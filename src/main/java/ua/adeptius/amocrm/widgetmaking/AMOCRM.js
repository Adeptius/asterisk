// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.

/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */

/*
 *	jQuery dotdotdot 1.8.3
 *
 *	Copyright (c) Fred Heusschen
 *	www.frebsite.nl
 *
 *	Plugin website:
 *	dotdotdot.frebsite.nl
 *
 *	Licensed under the MIT license.
 *	http://en.wikipedia.org/wiki/MIT_License
 */

/*_sizeRow: function(options) {
      var self = this,
        options = options || {},
        rowIndex = options.index,
        rows,
        cells,
        height = 0,
        max;

      if (typeof rowIndex != 'number' || rowIndex < 0) {
        throw '_sizeRow: row index not specified.'
      }

      max = rowIndex == 0 ? 86 : 106;
      rows = self._elem('rowByIndex', rowIndex);
      cells = rows.find(self._selector('cellsByRowIndex', rowIndex));

      rows.css({height: ''});
      cells.css({height: ''});

      cells.each(function() {
        var cell = $(this),
          cellContent = cell.find('.cell__body > *'), // все элементы в контейнере
          cHeight = 0; // высота контейнера

        // считаем суммарную высоту элементов в контейнере
        cellContent.each(function() {
          cHeight += $(this).outerHeight(true);
        });

        // если в контейнере нет элементов с €вно заданной высотой, берЄм высоту контейнера
        if (cHeight == 0) {
          cHeight = cell.find('.cell__body').height();
        }

        // если у контейнера тоже нет заданной высоты или она равна 0, задаЄм максимальную (без учЄта паддинга €чейки)
        if (cHeight == 0) {
          cHeight = max;
        }

        // если в резултате получивша€с€ высота больше максимальной, то добавл€ем стиль со скрытием
        // иначе убираем скрытие
        if (cHeight > max) {
          cell.addClass('merge-form__table-cell_contracted');
        } else {
          cell.removeClass('merge-form__table-cell_contracted');
        }
      });

      // находим самую высокую €чейку
      height = _.max(cells, function(c) {
        return c.offsetHeight;
      }).offsetHeight;

      // если высота €чейки превышает макисмальную, ставим максимальную
      if (height > 136) {
        height = 136;
      }

      // задаЄм строке и €чейкам полученную высоту
      cells.css({height: height+'px'});
      rows.css({height: height+'px'});
    },*/

/**
 * Generates event when user makes new movement (like a swipe on a touchscreen).
 * @version 1.1.4
 * @link https://github.com/Promo/wheel-indicator
 * @license MIT
 */

define("lib/components/base/notifications", ["require", "jquery", "underscore", "twig", "elements_view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view");
    return t = o.extend({
        account: AMOCRM.constant("account"),
        user: AMOCRM.constant("user"),
        list: AMOCRM.constant("notifications_list"),
        types: AMOCRM.constant("notifications_types"),
        future_tasks: AMOCRM.constant("notifications_task_times"),
        popup_time: 1e4,
        time_interval_connect_socket: 2e3,
        time_interval_try_connect_count: 1,
        max_interval_connect_timeout: 3e4,
        count_notification: 0,
        timer_on: !1,
        permission: "",
        popup_selector: ".notification__item",
        popup_close_selector: ".nav__notifications__bar__close",
        popup_id_prefix: "notification-popup-",
        tasks: [],
        _selectors: function() {
            return {
                wrapper: "#notifications-wrapper",
                list: "#aside__menu_container"
            }
        },
        initialize: function() {
            this.setElement(i(".nav__notifications")),
            n._preload(["/tmpl/notifications/list.twig", "/tmpl/notifications/popup.twig"])().then(function() {
                var e = AMOCRM.constant("amocrm_notify_params") || {};
                i.isEmptyObject(e) || AMOCRM.inbox.showNotification(e)
            })
        },
        checkErrorNotifications: function() {
            s.each(AMOCRM.constant("error_notifications"), function(e) {
                e && e.text && this.add_error(e)
            }, this)
        },
        show_message: function(e) {
            "undefined" == typeof e.date && (e.date = Math.ceil(+new Date / 1e3)),
            e = {
                id: e.id,
                type: e.type,
                header: e.header,
                without_header: e.without_header,
                title: e.header,
                message: e.text,
                link: e.link,
                icon: e.icon
            },
            AMOCRM.inbox.showNotification(e)
        },
        show_message_error: function(e) {
            "undefined" == typeof e.date && (e.date = Math.ceil(+new Date / 1e3)),
            AMOCRM.inbox.showNotification({
                id: 0,
                type: "error",
                header: e.header,
                without_header: e.without_header,
                title: e.header,
                message: e.text,
                link: e.link,
                icon: "/frontend/images/interface/inbox/error_mesage_bot_avatar.png"
            })
        },
        show_notification: function(e) {
            var t, s, n = this, o = {};
            if (!(i("#" + n.popup_id_prefix + e.id).length > 0)) {
                for (s in n.types)
                    if (n.types.hasOwnProperty(s) && n.types[s] === e.type) {
                        t = s;
                        break
                    }
                if ("" !== t) {
                    switch (t) {
                    case "call":
                        o.title = e.text.header,
                        o.message = e.text.text,
                        o.link = e.text.link;
                        break;
                    case "error":
                        o.title = e.text.header,
                        o.message = e.text.text,
                        o.link = e.text.link,
                        o.icon = "/frontend/images/interface/inbox/error_mesage_bot_avatar.png"
                    }
                    AMOCRM.inbox.showNotification(o)
                }
            }
        },
        add: function(e, t) {
            "undefined" == typeof t && (t = {}),
            i.post("/ajax/v1/inbox/add/", {
                request: e
            }).done(function(e) {
                "function" == typeof t.done && t.done()
            }).fail(function() {
                "function" == typeof t.fail && t.fail()
            }).always(function() {
                "function" == typeof t.always && t.always()
            })
        },
        add_error: function(e, t) {
            var i;
            "undefined" == typeof e.date && (e.date = Math.ceil(+new Date / 1e3)),
            i = {
                date: e.date,
                type: "error",
                message: e.text,
                header: e.header,
                link: e.link || null
            },
            this.add(i, t)
        },
        add_call: function(e, t) {
            var i;
            e.header = e.header || "",
            "undefined" == typeof e.date && (e.date = Math.ceil(+new Date / 1e3)),
            e.from = e.from || "",
            void 0 !== e.duration && (e.duration = 1e3 * e.duration,
            e.duration = moment.utc(e.duration).format("mm:ss") || ""),
            e.link = e.link || "",
            e.to = e.to || "",
            void 0 !== e.element ? (e.element.id = e.element.id || "",
            e.element.type = e.element.type || "",
            e.element.name = e.element.type || "") : e.element = {
                id: "",
                type: "",
                name: ""
            },
            e.phone && (e.title = e.phone,
            delete e.phone),
            i = {
                header: e.header,
                to: e.to,
                from: e.from,
                duration: e.duration,
                link: e.link,
                user: AMOCRM.constant("user").id,
                date: e.date,
                type: "call",
                message: e.text,
                element: e.element
            },
            "undefined" != typeof e.id && (i.id = e.id),
            this.add(i, t)
        },
        togglePanelNotification: s.noop,
        checkHasScroll: s.noop,
        check_notifications_popups: s.noop,
        check_popups_height: s.noop,
        refresh: s.noop,
        receive: s.noop
    })
}),
function(e) {
    function t(e) {
        return e && e.Object === Object ? e : null
    }
    function i(e) {
        for (var t = e.length, i = new Array(t), s = 0; t > s; s++)
            i[s] = e[s];
        return i
    }
    function s(e) {
        return function() {
            try {
                return e.apply(this, arguments)
            } catch (t) {
                return Qe.e = t,
                Qe
            }
        }
    }
    function n(e) {
        throw e
    }
    function o(e, t) {
        if (Xe && t.stack && "object" == typeof e && null !== e && e.stack && -1 === e.stack.indexOf(it)) {
            for (var i = [], s = t; s; s = s.source)
                s.stack && i.unshift(s.stack);
            i.unshift(e.stack);
            var n = i.join("\n" + it + "\n");
            e.stack = r(n)
        }
    }
    function r(e) {
        for (var t = e.split("\n"), i = [], s = 0, n = t.length; n > s; s++) {
            var o = t[s];
            a(o) || l(o) || !o || i.push(o)
        }
        return i.join("\n")
    }
    function a(e) {
        var t = d(e);
        if (!t)
            return !1;
        var i = t[0]
          , s = t[1];
        return i === et && s >= tt && Nr >= s
    }
    function l(e) {
        return -1 !== e.indexOf("(module.js:") || -1 !== e.indexOf("(node.js:")
    }
    function c() {
        if (Xe)
            try {
                throw new Error
            } catch (e) {
                var t = e.stack.split("\n")
                  , i = t[0].indexOf("@") > 0 ? t[1] : t[2]
                  , s = d(i);
                if (!s)
                    return;
                return et = s[0],
                s[1]
            }
    }
    function d(e) {
        var t = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(e);
        if (t)
            return [t[1], Number(t[2])];
        var i = /at ([^ ]+):(\d+):(?:\d+)$/.exec(e);
        if (i)
            return [i[1], Number(i[2])];
        var s = /.*@(.+):(\d+)$/.exec(e);
        return s ? [s[1], Number(s[2])] : void 0
    }
    function u(t, i, s, n, o, r) {
        var a = Qt(t)
          , l = a.length
          , c = Qt(i)
          , d = c.length;
        if (l !== d && !n)
            return !1;
        for (var u, h = l; h--; )
            if (u = a[h],
            !(n ? u in i : Gt.call(i, u)))
                return !1;
        for (var _ = n; ++h < l; ) {
            u = a[h];
            var p, m = t[u], f = i[u];
            if (!(p === e ? s(m, f, n, o, r) : p))
                return !1;
            _ || (_ = "constructor" === u)
        }
        if (!_) {
            var g = t.constructor
              , b = i.constructor;
            if (g !== b && "constructor"in t && "constructor"in i && !("function" == typeof g && g instanceof g && "function" == typeof b && b instanceof b))
                return !1
        }
        return !0
    }
    function h(e, t, i) {
        switch (i) {
        case xt:
        case Mt:
            return +e === +t;
        case At:
            return e.name === t.name && e.message === t.message;
        case Tt:
            return e !== +e ? t !== +t : e === +t;
        case Et:
        case Rt:
            return e === t + ""
        }
        return !1
    }
    function _(e) {
        return !!e && "object" == typeof e
    }
    function p(e) {
        return "number" == typeof e && e > -1 && e % 1 === 0 && Jt >= e
    }
    function m(e) {
        return _(e) && p(e.length) && !!Wt[Yt.call(e)]
    }
    function f(e, t) {
        for (var i = -1, s = e.length; ++i < s; )
            if (t(e[i], i, e))
                return !0;
        return !1
    }
    function g(t, i, s, n, o, r) {
        var a = -1
          , l = t.length
          , c = i.length;
        if (l !== c && !(n && c > l))
            return !1;
        for (; ++a < l; ) {
            var d, u = t[a], h = i[a];
            if (d !== e) {
                if (d)
                    continue;
                return !1
            }
            if (n) {
                if (!f(i, function(e) {
                    return u === e || s(u, e, n, o, r)
                }))
                    return !1
            } else if (u !== h && !s(u, h, n, o, r))
                return !1
        }
        return !0
    }
    function b(e, t, i, s, n, o) {
        var r = Xt(e)
          , a = Xt(t)
          , l = kt
          , c = kt;
        r || (l = Yt.call(e),
        l === Ct ? l = St : l !== St && (r = m(e))),
        a || (c = Yt.call(t),
        c === Ct && (c = St));
        var d = l === St && !Kt(e)
          , _ = c === St && !Kt(t)
          , p = l === c;
        if (p && !r && !d)
            return h(e, t, l);
        if (!s) {
            var f = d && Gt.call(e, "__wrapped__")
              , b = _ && Gt.call(t, "__wrapped__");
            if (f || b)
                return i(f ? e.value() : e, b ? t.value() : t, s, n, o)
        }
        if (!p)
            return !1;
        n || (n = []),
        o || (o = []);
        for (var v = n.length; v--; )
            if (n[v] === e)
                return o[v] === t;
        n.push(e),
        o.push(t);
        var y = (r ? g : u)(e, t, i, s, n, o);
        return n.pop(),
        o.pop(),
        y
    }
    function v(e, t, i, s, n) {
        return e === t ? !0 : null == e || null == t || !ee(e) && !_(t) ? e !== e && t !== t : b(e, t, v, i, s, n)
    }
    function y(e, t) {
        for (var i = new Array(e), s = 0; e > s; s++)
            i[s] = t();
        return i
    }
    function w(e, t) {
        this.id = e,
        this.value = t
    }
    function C(e, t) {
        this.scheduler = e,
        this.disposable = t,
        this.isDisposed = !1
    }
    function k(e, t) {
        t.isDisposed || (t.isDisposed = !0,
        t.disposable.dispose())
    }
    function x(e) {
        this._s = e,
        this.isDisposed = !1
    }
    function M(e) {
        this._s = e
    }
    function A(e) {
        this._s = e,
        this._l = e.length,
        this._i = 0
    }
    function O(e) {
        this._a = e
    }
    function $(e) {
        this._a = e,
        this._l = j(e),
        this._i = 0
    }
    function T(e) {
        return "number" == typeof e && Le.isFinite(e)
    }
    function S(t) {
        var i, s = t[mt];
        if (!s && "string" == typeof t)
            return i = new M(t),
            i[mt]();
        if (!s && t.length !== e)
            return i = new O(t),
            i[mt]();
        if (!s)
            throw new TypeError("Object is not iterable");
        return t[mt]()
    }
    function E(e) {
        var t = +e;
        return 0 === t ? t : isNaN(t) ? t : 0 > t ? -1 : 1
    }
    function j(e) {
        var t = +e.length;
        return isNaN(t) ? 0 : 0 !== t && T(t) ? (t = E(t) * Math.floor(Math.abs(t)),
        0 >= t ? 0 : t > gs ? gs : t) : t
    }
    function R(e, t) {
        return wi(e) || (e = $i),
        new vs(t,e)
    }
    function P(e, t) {
        this.observer = e,
        this.parent = t
    }
    function I(e, t) {
        return e.amb(t)
    }
    function F() {
        return !1
    }
    function D() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return t
    }
    function F() {
        return !1
    }
    function D() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return t
    }
    function F() {
        return !1
    }
    function q() {
        return []
    }
    function F() {
        return !1
    }
    function q() {
        return []
    }
    function D() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return t
    }
    function N(e) {
        return function(t) {
            return e.subscribe(t)
        }
    }
    function L(e) {
        return e.toArray()
    }
    function z(e) {
        return e.length > 0
    }
    function U(e) {
        return {
            "@@iterator": function() {
                return {
                    next: function() {
                        return {
                            done: !1,
                            value: e
                        }
                    }
                }
            }
        }
    }
    function U(e) {
        return {
            "@@iterator": function() {
                return {
                    next: function() {
                        return {
                            done: !1,
                            value: e
                        }
                    }
                }
            }
        }
    }
    function H(e, t, i) {
        for (var s = 0, n = e.length; n > s; s++)
            if (i(e[s], t))
                return s;
        return -1
    }
    function B(e) {
        this.comparer = e,
        this.set = []
    }
    function W(t, i) {
        return function(s) {
            for (var n = s, o = 0; i > o; o++) {
                var r = n[t[o]];
                if ("undefined" == typeof r)
                    return e;
                n = r
            }
            return n
        }
    }
    function V(e) {
        if (0 === e.length)
            throw new ct;
        return e[0]
    }
    function G(e, t, i, s) {
        var n = vt(t, i, 3);
        return new Sr(function(t) {
            return e.subscribe(new po(t,e,n,s))
        }
        ,e)
    }
    function Y(e) {
        return e ? Qi.isObservable(e) ? e : Ye(e) ? Qi.fromPromise(e) : Z(e) || X(e) ? ko.call(this, e) : Je(e) ? K.call(this, e) : bt(e) || gt(e) ? J.call(this, e) : ee(e) ? Q.call(this, e) : e : e
    }
    function J(e) {
        return Qi.from(e).concatMap(function(e) {
            return Qi.isObservable(e) || ee(e) ? Y.call(null, e) : ze.Observable.just(e)
        }).toArray()
    }
    function Q(t) {
        function i(t, i) {
            s[i] = e,
            o.push(t.map(function(e) {
                s[i] = e
            }))
        }
        for (var s = new t.constructor, n = Object.keys(t), o = [], r = 0, a = n.length; a > r; r++) {
            var l = n[r]
              , c = Y.call(this, t[l]);
            c && Qi.isObservable(c) ? i(c, l) : s[l] = t[l]
        }
        return Qi.forkJoin.apply(Qi, o).map(function() {
            return s
        })
    }
    function K(e) {
        var t = this;
        return new Sr(function(i) {
            e.call(t, function() {
                var e = arguments[0]
                  , t = arguments[1];
                if (e)
                    return i.onError(e);
                if (arguments.length > 2) {
                    for (var s = [], n = 1, o = arguments.length; o > n; n++)
                        s.push(arguments[n]);
                    t = s
                }
                i.onNext(t),
                i.onCompleted()
            })
        }
        )
    }
    function X(e) {
        return Je(e.next) && Je(e["throw"])
    }
    function Z(e) {
        var t = e.constructor;
        return t ? "GeneratorFunction" === t.name || "GeneratorFunction" === t.displayName ? !0 : X(t.prototype) : !1
    }
    function ee(e) {
        return Object == e.constructor
    }
    function te(e, t, i, s) {
        var n = new Ir;
        return s.push(ie(n, t, i)),
        e.apply(t, s),
        n.asObservable()
    }
    function ie(e, t, i) {
        return function() {
            for (var s = arguments.length, n = new Array(s), o = 0; s > o; o++)
                n[o] = arguments[o];
            if (Je(i)) {
                if (n = Ke(i).apply(t, n),
                n === Qe)
                    return e.onError(n.e);
                e.onNext(n)
            } else
                n.length <= 1 ? e.onNext(n[0]) : e.onNext(n);
            e.onCompleted()
        }
    }
    function se(e, t, i, s) {
        var n = new Ir;
        return s.push(ne(n, t, i)),
        e.apply(t, s),
        n.asObservable()
    }
    function ne(e, t, i) {
        return function() {
            var s = arguments[0];
            if (s)
                return e.onError(s);
            for (var n = arguments.length, o = [], r = 1; n > r; r++)
                o[r - 1] = arguments[r];
            if (Je(i)) {
                var o = Ke(i).apply(t, o);
                if (o === Qe)
                    return e.onError(o.e);
                e.onNext(o)
            } else
                o.length <= 1 ? e.onNext(o[0]) : e.onNext(o);
            e.onCompleted()
        }
    }
    function oe(e) {
        return Le.StaticNodeList ? e instanceof Le.StaticNodeList || e instanceof Le.NodeList : "[object NodeList]" === Object.prototype.toString.call(e)
    }
    function re(e, t, i) {
        this._e = e,
        this._n = t,
        this._fn = i,
        this._e.addEventListener(this._n, this._fn, !1),
        this.isDisposed = !1
    }
    function ae(e, t, i) {
        var s = new oi
          , n = Object.prototype.toString.call(e);
        if (oe(e) || "[object HTMLCollection]" === n)
            for (var o = 0, r = e.length; r > o; o++)
                s.add(ae(e.item(o), t, i));
        else
            e && s.add(new re(e,t,i));
        return s
    }
    function le(e, t, i) {
        return new Sr(function(s) {
            function n(e, t) {
                if (c[t] = e,
                r[t] = !0,
                a || (a = r.every(He))) {
                    if (o)
                        return s.onError(o);
                    var n = Ke(i).apply(null, c);
                    if (n === Qe)
                        return s.onError(n.e);
                    s.onNext(n)
                }
                l && c[1] && s.onCompleted()
            }
            var o, r = [!1, !1], a = !1, l = !1, c = new Array(2);
            return new mi(e.subscribe(function(e) {
                n(e, 0)
            }, function(e) {
                c[1] ? s.onError(e) : o = e
            }, function() {
                l = !0,
                c[1] && s.onCompleted()
            }),t.subscribe(function(e) {
                n(e, 1)
            }, function(e) {
                s.onError(e)
            }, function() {
                l = !0,
                n(!0, 1)
            }))
        }
        ,e)
    }
    function L(e) {
        return e.toArray()
    }
    function ce(e, t) {
        return e.groupJoin(this, t, ms, function(e, t) {
            return t
        })
    }
    function de(e) {
        var t = this;
        return new Sr(function(i) {
            var s = new Pr
              , n = new oi
              , o = new gi(n);
            return i.onNext(ii(s, o)),
            n.add(t.subscribe(function(e) {
                s.onNext(e)
            }, function(e) {
                s.onError(e),
                i.onError(e)
            }, function() {
                s.onCompleted(),
                i.onCompleted()
            })),
            Ye(e) && (e = cs(e)),
            n.add(e.subscribe(function(e) {
                s.onCompleted(),
                s = new Pr,
                i.onNext(ii(s, o))
            }, function(e) {
                s.onError(e),
                i.onError(e)
            }, function() {
                s.onCompleted(),
                i.onCompleted()
            })),
            o
        }
        ,t)
    }
    function ue(e) {
        var t = this;
        return new Sr(function(i) {
            function s() {
                var t;
                try {
                    t = e()
                } catch (o) {
                    return void i.onError(o)
                }
                Ye(t) && (t = cs(t));
                var l = new _i;
                n.setDisposable(l),
                l.setDisposable(t.take(1).subscribe(Ue, function(e) {
                    a.onError(e),
                    i.onError(e)
                }, function() {
                    a.onCompleted(),
                    a = new Pr,
                    i.onNext(ii(a, r)),
                    s()
                }))
            }
            var n = new pi
              , o = new oi(n)
              , r = new gi(o)
              , a = new Pr;
            return i.onNext(ii(a, r)),
            o.add(t.subscribe(function(e) {
                a.onNext(e)
            }, function(e) {
                a.onError(e),
                i.onError(e)
            }, function() {
                a.onCompleted(),
                i.onCompleted()
            })),
            s(),
            r
        }
        ,t)
    }
    function he(e, t) {
        return new Lo(e,t)
    }
    function D() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return t
    }
    function _e(e) {
        this.patterns = e
    }
    function pe(e, t) {
        this.expression = e,
        this.selector = t
    }
    function me(e) {
        return function(t) {
            e.onError(t)
        }
    }
    function fe(e, t) {
        return function() {
            var i = Ke(e.selector).apply(e, arguments);
            return i === Qe ? t.onError(i.e) : void t.onNext(i)
        }
    }
    function ge(e, t, i) {
        var s = e.get(t);
        if (!s) {
            var n = new Yo(t,i);
            return e.set(t, n),
            n
        }
        return s
    }
    function be(e, t, i) {
        this.joinObserverArray = e,
        this.onNext = t,
        this.onCompleted = i,
        this.joinObservers = new Go;
        for (var s = 0, n = this.joinObserverArray.length; n > s; s++) {
            var o = this.joinObserverArray[s];
            this.joinObservers.set(o, o)
        }
    }
    function ve(e, t) {
        return new Jo(e,t)
    }
    function ye(e, t, i) {
        return new Sr(function(s) {
            var n = e
              , o = yi(t);
            return i.scheduleRecursiveFuture(0, n, function(e, t) {
                if (o > 0) {
                    var r = i.now();
                    n = new Date(n.getTime() + o),
                    n.getTime() <= r && (n = new Date(r + o))
                }
                s.onNext(e),
                t(e + 1, new Date(n))
            })
        }
        )
    }
    function we(e, t, i) {
        return e === t ? new Sr(function(e) {
            return i.schedulePeriodic(0, t, function(t) {
                return e.onNext(t),
                t + 1
            })
        }
        ) : hs(function() {
            return ye(new Date(i.now() + e), t, i)
        })
    }
    function Ce(e, t, i) {
        return new Sr(function(s) {
            var n, o = !1, r = new pi, a = null, l = [], c = !1;
            return n = e.materialize().timestamp(i).subscribe(function(e) {
                var n, d;
                "E" === e.value.kind ? (l = [],
                l.push(e),
                a = e.value.error,
                d = !c) : (l.push({
                    value: e.value,
                    timestamp: e.timestamp + t
                }),
                d = !o,
                o = !0),
                d && (null !== a ? s.onError(a) : (n = new _i,
                r.setDisposable(n),
                n.setDisposable(i.scheduleRecursiveFuture(null, t, function(e, t) {
                    var n, r, d, u;
                    if (null === a) {
                        c = !0;
                        do
                            d = null,
                            l.length > 0 && l[0].timestamp - i.now() <= 0 && (d = l.shift().value),
                            null !== d && d.accept(s);
                        while (null !== d);u = !1,
                        r = 0,
                        l.length > 0 ? (u = !0,
                        r = Math.max(0, l[0].timestamp - i.now())) : o = !1,
                        n = a,
                        c = !1,
                        null !== n ? s.onError(n) : u && t(null, r)
                    }
                }))))
            }),
            new mi(n,r)
        }
        ,e)
    }
    function ke(e, t, i) {
        return hs(function() {
            return Ce(e, t - i.now(), i)
        })
    }
    function xe(e, t, i) {
        var s, n;
        return Je(t) ? n = t : (s = t,
        n = i),
        new Sr(function(t) {
            function i() {
                l.setDisposable(e.subscribe(function(e) {
                    var i = Ke(n)(e);
                    if (i === Qe)
                        return t.onError(i.e);
                    var s = new _i;
                    r.add(s),
                    s.setDisposable(i.subscribe(function() {
                        t.onNext(e),
                        r.remove(s),
                        o()
                    }, function(e) {
                        t.onError(e)
                    }, function() {
                        t.onNext(e),
                        r.remove(s),
                        o()
                    }))
                }, function(e) {
                    t.onError(e)
                }, function() {
                    a = !0,
                    l.dispose(),
                    o()
                }))
            }
            function o() {
                a && 0 === r.length && t.onCompleted()
            }
            var r = new oi
              , a = !1
              , l = new pi;
            return s ? l.setDisposable(s.subscribe(i, function(e) {
                t.onError(e)
            }, i)) : i(),
            new mi(l,r)
        }
        ,e)
    }
    function Me(e, t) {
        return new Sr(function(i) {
            var s, n = !1, o = new pi, r = 0, a = e.subscribe(function(e) {
                var a = Ke(t)(e);
                if (a === Qe)
                    return i.onError(a.e);
                Ye(a) && (a = cs(a)),
                n = !0,
                s = e,
                r++;
                var l = r
                  , c = new _i;
                o.setDisposable(c),
                c.setDisposable(a.subscribe(function() {
                    n && r === l && i.onNext(s),
                    n = !1,
                    c.dispose()
                }, function(e) {
                    i.onError(e)
                }, function() {
                    n && r === l && i.onNext(s),
                    n = !1,
                    c.dispose()
                }))
            }, function(e) {
                o.dispose(),
                i.onError(e),
                n = !1,
                r++
            }, function() {
                o.dispose(),
                n && i.onNext(s),
                i.onCompleted(),
                n = !1,
                r++
            });
            return new mi(a,o)
        }
        ,e)
    }
    function L(e) {
        return e.toArray()
    }
    function L(e) {
        return e.toArray()
    }
    function Ae(e, t, i, s) {
        return Je(t) && (s = i,
        i = t,
        t = xs()),
        Qi.isObservable(s) || (s = Ss(new rr)),
        new Sr(function(n) {
            function o(e) {
                function t() {
                    return u = i === d
                }
                var i = d
                  , o = new _i;
                l.setDisposable(o),
                o.setDisposable(e.subscribe(function() {
                    t() && a.setDisposable(s.subscribe(n)),
                    o.dispose()
                }, function(e) {
                    t() && n.onError(e)
                }, function() {
                    t() && a.setDisposable(s.subscribe(n))
                }))
            }
            function r() {
                var e = !u;
                return e && d++,
                e
            }
            var a = new pi
              , l = new pi
              , c = new _i;
            a.setDisposable(c);
            var d = 0
              , u = !1;
            return o(t),
            c.setDisposable(e.subscribe(function(e) {
                if (r()) {
                    n.onNext(e);
                    var t = Ke(i)(e);
                    if (t === Qe)
                        return n.onError(t.e);
                    o(Ye(t) ? cs(t) : t)
                }
            }, function(e) {
                r() && n.onError(e)
            }, function() {
                r() && n.onCompleted()
            })),
            new mi(a,l)
        }
        ,e)
    }
    function Oe(e, t, i, s) {
        return wi(i) && (s = i,
        i = Ss(new rr)),
        i instanceof Error && (i = Ss(i)),
        wi(s) || (s = Ri),
        Qi.isObservable(i) || (i = Ss(new rr)),
        new Sr(function(n) {
            function o() {
                var e = r;
                d.setDisposable(s.scheduleFuture(null, t, function() {
                    c = r === e,
                    c && (Ye(i) && (i = cs(i)),
                    l.setDisposable(i.subscribe(n)))
                }))
            }
            var r = 0
              , a = new _i
              , l = new pi
              , c = !1
              , d = new pi;
            return l.setDisposable(a),
            o(),
            a.setDisposable(e.subscribe(function(e) {
                c || (r++,
                n.onNext(e),
                o())
            }, function(e) {
                c || (r++,
                n.onError(e))
            }, function() {
                c || (r++,
                n.onCompleted())
            })),
            new mi(l,d)
        }
        ,e)
    }
    function $e(e) {
        return {
            "@@transducer/init": function() {
                return e
            },
            "@@transducer/step": function(e, t) {
                return e.onNext(t)
            },
            "@@transducer/result": function(e) {
                return e.onCompleted()
            }
        }
    }
    function Te(e) {
        this.predicate = e
    }
    function Se(e) {
        this.predicate = e
    }
    function Ee(e, t) {
        var i = this;
        this.scheduler = e,
        this.messages = t,
        this.subscriptions = [],
        this.observers = [];
        for (var s = 0, n = this.messages.length; n > s; s++) {
            var o = this.messages[s]
              , r = o.value;
            !function(t) {
                e.scheduleAbsolute(null, o.time, function() {
                    for (var e = i.observers.slice(0), s = 0, n = e.length; n > s; s++)
                        t.accept(e[s]);
                    return ci
                })
            }(r)
        }
    }
    var je = {
        "function": !0,
        object: !0
    }
      , Re = je[typeof exports] && exports && !exports.nodeType ? exports : null
      , Pe = je[typeof module] && module && !module.nodeType ? module : null
      , Ie = t(Re && Pe && "object" == typeof global && global)
      , Fe = t(je[typeof self] && self)
      , De = t(je[typeof window] && window)
      , qe = Pe && Pe.exports === Re ? Re : null
      , Ne = t(je[typeof this] && this)
      , Le = Ie || De !== (Ne && Ne.window) && De || Fe || Ne || Function("return this")()
      , ze = {
        internals: {},
        config: {
            Promise: Le.Promise
        },
        helpers: {}
    }
      , Ue = ze.helpers.noop = function() {}
      , He = ze.helpers.identity = function(e) {
        return e
    }
      , Be = ze.helpers.defaultNow = function() {
        return Date.now ? Date.now : function() {
            return +new Date
        }
    }()
      , We = ze.helpers.defaultComparer = function(e, t) {
        return Zt(e, t)
    }
      , Ve = ze.helpers.defaultSubComparer = function(e, t) {
        return e > t ? 1 : t > e ? -1 : 0
    }
      , Ge = (ze.helpers.defaultKeySerializer = function(e) {
        return e.toString()
    }
    ,
    ze.helpers.defaultError = function(e) {
        throw e
    }
    )
      , Ye = ze.helpers.isPromise = function(e) {
        return !!e && "function" != typeof e.subscribe && "function" == typeof e.then
    }
      , Je = ze.helpers.isFunction = function() {
        var e = function(e) {
            return "function" == typeof e || !1
        };
        return e(/x/) && (e = function(e) {
            return "function" == typeof e && "[object Function]" == st.call(e)
        }
        ),
        e
    }()
      , Qe = {
        e: {}
    }
      , Ke = ze.internals.tryCatch = function(e) {
        if (!Je(e))
            throw new TypeError("fn must be a function");
        return s(e)
    }
    ;
    ze.config.longStackSupport = !1;
    var Xe = !1
      , Ze = Ke(function() {
        throw new Error
    })();
    Xe = !!Ze.e && !!Ze.e.stack;
    var et, tt = c(), it = "From previous event:", st = Object.prototype.toString, nt = "[object Array]", ot = "[object Function]", rt = "[object String]";
    Array.prototype.forEach || (Array.prototype.forEach = function(e, t) {
        var i, s;
        if (null == this)
            throw new TypeError(" this is null or not defined");
        var n = Object(this)
          , o = n.length >>> 0;
        if ("function" != typeof e)
            throw new TypeError(e + " is not a function");
        for (arguments.length > 1 && (i = t),
        s = 0; o > s; ) {
            var r;
            s in n && (r = n[s],
            e.call(i, r, s, n)),
            s++
        }
    }
    );
    var at = Object("a")
      , lt = "a" !== at[0] || !(0 in at);
    Array.prototype.every || (Array.prototype.every = function(e) {
        var t = Object(this)
          , i = lt && st.call(this) === rt ? this.split("") : t
          , s = i.length >>> 0
          , n = arguments[1];
        if (st.call(e) !== ot)
            throw new TypeError(e + " is not a function");
        for (var o = 0; s > o; o++)
            if (o in i && !e.call(n, i[o], o, t))
                return !1;
        return !0
    }
    ),
    Array.prototype.map || (Array.prototype.map = function(e) {
        var t = Object(this)
          , i = lt && st.call(this) === rt ? this.split("") : t
          , s = i.length >>> 0
          , n = new Array(s)
          , o = arguments[1];
        if (st.call(e) !== ot)
            throw new TypeError(e + " is not a function");
        for (var r = 0; s > r; r++)
            r in i && (n[r] = e.call(o, i[r], r, t));
        return n
    }
    ),
    Array.prototype.filter || (Array.prototype.filter = function(e) {
        for (var t, i = [], s = new Object(this), n = 0, o = s.length >>> 0; o > n; n++)
            t = s[n],
            n in s && e.call(arguments[1], t, n, s) && i.push(t);
        return i
    }
    ),
    Array.isArray || (Array.isArray = function(e) {
        return st.call(e) === nt
    }
    ),
    Array.prototype.indexOf || (Array.prototype.indexOf = function(e) {
        var t = Object(this)
          , i = t.length >>> 0;
        if (0 === i)
            return -1;
        var s = 0;
        if (arguments.length > 1 && (s = Number(arguments[1]),
        s !== s ? s = 0 : 0 !== s && s !== 1 / 0 && s !== -(1 / 0) && (s = (s > 0 || -1) * Math.floor(Math.abs(s)))),
        s >= i)
            return -1;
        for (var n = s >= 0 ? s : Math.max(i - Math.abs(s), 0); i > n; n++)
            if (n in t && t[n] === e)
                return n;
        return -1
    }
    ),
    Object.prototype.propertyIsEnumerable || (Object.prototype.propertyIsEnumerable = function(e) {
        for (var t in this)
            if (t === e)
                return !0;
        return !1
    }
    ),
    Object.keys || (Object.keys = function() {
        "use strict";
        var e = Object.prototype.hasOwnProperty
          , t = !{
            toString: null
        }.propertyIsEnumerable("toString");
        return function(i) {
            if ("object" != typeof i && ("function" != typeof i || null === i))
                throw new TypeError("Object.keys called on non-object");
            var s, n, o = [];
            for (s in i)
                e.call(i, s) && o.push(s);
            if (t)
                for (n = 0; wt > n; n++)
                    e.call(i, yt[n]) && o.push(yt[n]);
            return o
        }
    }()),
    "function" != typeof Object.create && (Object.create = function() {
        function e() {}
        var t = Object.prototype.hasOwnProperty;
        return function(i) {
            if ("object" != typeof i)
                throw new TypeError("Object prototype may only be an Object or null");
            e.prototype = i;
            var s = new e;
            if (e.prototype = null,
            arguments.length > 1) {
                var n = Object(arguments[1]);
                for (var o in n)
                    t.call(n, o) && (s[o] = n[o])
            }
            return s
        }
    }()),
    Le.Element && Le.Element.prototype.attachEvent && !Le.Element.prototype.addEventListener && function() {
        function e(e, t) {
            Window.prototype[e] = HTMLDocument.prototype[e] = Element.prototype[e] = t
        }
        function t() {
            t.interval && document.body && (t.interval = clearInterval(t.interval),
            document.dispatchEvent(new CustomEvent("DOMContentLoaded")))
        }
        e("addEventListener", function(e, t) {
            var i = this
              , s = i._c1_listeners = i._c1_listeners || {}
              , n = s[e] = s[e] || [];
            i.attachEvent("on" + e, n.event = function(e) {
                e || (e = Le.event);
                var t = i.document && i.document.documentElement || i.documentElement || {
                    scrollLeft: 0,
                    scrollTop: 0
                };
                switch (e.currentTarget = i,
                e.pageX = e.clientX + t.scrollLeft,
                e.pageY = e.clientY + t.scrollTop,
                e.preventDefault = function() {
                    if (e.bubbledKeyCode = e.keyCode,
                    e.ctrlKey)
                        try {
                            e.keyCode = 0
                        } catch (e) {}
                    e.defaultPrevented = !0,
                    e.returnValue = !1,
                    e.modified = !0,
                    e.returnValue = !1
                }
                ,
                e.stopImmediatePropagation = function() {
                    d = !1,
                    e.cancelBubble = !0
                }
                ,
                e.stopPropagation = function() {
                    e.cancelBubble = !0
                }
                ,
                e.relatedTarget = e.fromElement || null,
                e.target = e.srcElement || i,
                e.timeStamp = +new Date,
                e.type) {
                case "keypress":
                    var s = "charCode"in e ? e.charCode : e.keyCode;
                    10 === s ? (s = 0,
                    e.keyCode = 13) : 13 === s || 27 === s ? s = 0 : 3 === s && (s = 99),
                    e.charCode = s,
                    e.keyChar = e.charCode ? String.fromCharCode(e.charCode) : ""
                }
                var o = {};
                for (var r in e)
                    o[r] = e[r];
                for (var a, l = 0, c = [].concat(n), d = !0; d && (a = c[l]); ++l)
                    for (var u, h = 0; u = n[h]; ++h)
                        if (u === a) {
                            u.call(i, o);
                            break
                        }
            }
            ),
            n.push(t)
        }),
        e("removeEventListener", function(e, t) {
            for (var i, s = this, n = s._c1_listeners = s._c1_listeners || {}, o = n[e] = n[e] || [], r = o.length - 1; i = o[r]; --r)
                if (i === t) {
                    o.splice(r, 1);
                    break
                }
            !o.length && o.event && s.detachEvent("on" + e, o.event)
        }),
        e("dispatchEvent", function(e) {
            var t = this
              , i = e.type
              , s = t._c1_listeners = t._c1_listeners || {}
              , n = s[i] = s[i] || [];
            try {
                return t.fireEvent("on" + i, e)
            } catch (o) {
                return n.event && n.event(e)
            }
        }),
        t.interval = setInterval(t, 1),
        Le.addEventListener("load", t)
    }(),
    (!Le.CustomEvent || "object" == typeof Le.CustomEvent) && function() {
        function t(t, i) {
            var s;
            i = i || {
                bubbles: !1,
                cancelable: !1,
                detail: e
            };
            try {
                document.createEvent ? (s = document.createEvent("CustomEvent"),
                s.initCustomEvent(t, i.bubbles, i.cancelable, i.detail)) : document.createEventObject && (s = document.createEventObject())
            } catch (n) {
                s = document.createEvent("Event"),
                s.initEvent(t, i.bubbles, i.cancelable),
                s.detail = i.detail
            }
            return s
        }
        Le.CustomEvent && (t.prototype = Le.CustomEvent.prototype),
        Le.CustomEvent = t
    }();
    var ct = ze.EmptyError = function() {
        this.message = "Sequence contains no elements.",
        Error.call(this)
    }
    ;
    ct.prototype = Object.create(Error.prototype),
    ct.prototype.name = "EmptyError";
    var dt = ze.ObjectDisposedError = function() {
        this.message = "Object has been disposed",
        Error.call(this)
    }
    ;
    dt.prototype = Object.create(Error.prototype),
    dt.prototype.name = "ObjectDisposedError";
    var ut = ze.ArgumentOutOfRangeError = function() {
        this.message = "Argument out of range",
        Error.call(this)
    }
    ;
    ut.prototype = Object.create(Error.prototype),
    ut.prototype.name = "ArgumentOutOfRangeError";
    var ht = ze.NotSupportedError = function(e) {
        this.message = e || "This operation is not supported",
        Error.call(this)
    }
    ;
    ht.prototype = Object.create(Error.prototype),
    ht.prototype.name = "NotSupportedError";
    var _t = ze.NotImplementedError = function(e) {
        this.message = e || "This operation is not implemented",
        Error.call(this)
    }
    ;
    _t.prototype = Object.create(Error.prototype),
    _t.prototype.name = "NotImplementedError";
    var pt = ze.helpers.notImplemented = function() {
        throw new _t
    }
      , mt = (ze.helpers.notSupported = function() {
        throw new ht
    }
    ,
    "function" == typeof Symbol && Symbol.iterator || "_es6shim_iterator_");
    Le.Set && "function" == typeof (new Le.Set)["@@iterator"] && (mt = "@@iterator");
    var ft = ze.doneEnumerator = {
        done: !0,
        value: e
    }
      , gt = ze.helpers.isIterable = function(t) {
        return t && t[mt] !== e
    }
      , bt = ze.helpers.isArrayLike = function(t) {
        return t && t.length !== e
    }
    ;
    ze.helpers.iterator = mt;
    var vt = ze.internals.bindCallback = function(e, t, i) {
        if ("undefined" == typeof t)
            return e;
        switch (i) {
        case 0:
            return function() {
                return e.call(t)
            }
            ;
        case 1:
            return function(i) {
                return e.call(t, i)
            }
            ;
        case 2:
            return function(i, s) {
                return e.call(t, i, s)
            }
            ;
        case 3:
            return function(i, s, n) {
                return e.call(t, i, s, n)
            }
        }
        return function() {
            return e.apply(t, arguments)
        }
    }
      , yt = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"]
      , wt = yt.length
      , Ct = "[object Arguments]"
      , kt = "[object Array]"
      , xt = "[object Boolean]"
      , Mt = "[object Date]"
      , At = "[object Error]"
      , Ot = "[object Function]"
      , $t = "[object Map]"
      , Tt = "[object Number]"
      , St = "[object Object]"
      , Et = "[object RegExp]"
      , jt = "[object Set]"
      , Rt = "[object String]"
      , Pt = "[object WeakMap]"
      , It = "[object ArrayBuffer]"
      , Ft = "[object Float32Array]"
      , Dt = "[object Float64Array]"
      , qt = "[object Int8Array]"
      , Nt = "[object Int16Array]"
      , Lt = "[object Int32Array]"
      , zt = "[object Uint8Array]"
      , Ut = "[object Uint8ClampedArray]"
      , Ht = "[object Uint16Array]"
      , Bt = "[object Uint32Array]"
      , Wt = {};
    Wt[Ft] = Wt[Dt] = Wt[qt] = Wt[Nt] = Wt[Lt] = Wt[zt] = Wt[Ut] = Wt[Ht] = Wt[Bt] = !0,
    Wt[Ct] = Wt[kt] = Wt[It] = Wt[xt] = Wt[Mt] = Wt[At] = Wt[Ot] = Wt[$t] = Wt[Tt] = Wt[St] = Wt[Et] = Wt[jt] = Wt[Rt] = Wt[Pt] = !1;
    var Vt = Object.prototype
      , Gt = Vt.hasOwnProperty
      , Yt = Vt.toString
      , Jt = Math.pow(2, 53) - 1
      , Qt = Object.keys || function() {
        var e = Object.prototype.hasOwnProperty
          , t = !{
            toString: null
        }.propertyIsEnumerable("toString")
          , i = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"]
          , s = i.length;
        return function(n) {
            if ("object" != typeof n && ("function" != typeof n || null === n))
                throw new TypeError("Object.keys called on non-object");
            var o, r, a = [];
            for (o in n)
                e.call(n, o) && a.push(o);
            if (t)
                for (r = 0; s > r; r++)
                    e.call(n, i[r]) && a.push(i[r]);
            return a
        }
    }()
      , ee = ze.internals.isObject = function(e) {
        var t = typeof e;
        return !!e && ("object" === t || "function" === t)
    }
      , Kt = function() {
        try {
            Object({
                toString: 0
            } + "")
        } catch (e) {
            return function() {
                return !1
            }
        }
        return function(e) {
            return "function" != typeof e.toString && "string" == typeof (e + "")
        }
    }()
      , Xt = Array.isArray || function(e) {
        return _(e) && p(e.length) && Yt.call(e) === kt
    }
      , Zt = ze.internals.isEqual = function(e, t) {
        return v(e, t)
    }
      , ei = ({}.hasOwnProperty,
    Array.prototype.slice,
    ze.internals.inherits = function(e, t) {
        function i() {
            this.constructor = e
        }
        i.prototype = t.prototype,
        e.prototype = new i
    }
    )
      , ti = ze.internals.addProperties = function(e) {
        for (var t = [], i = 1, s = arguments.length; s > i; i++)
            t.push(arguments[i]);
        for (var n = 0, o = t.length; o > n; n++) {
            var r = t[n];
            for (var a in r)
                e[a] = r[a]
        }
    }
      , ii = ze.internals.addRef = function(e, t) {
        return new Sr(function(i) {
            return new mi(t.getDisposable(),e.subscribe(i))
        }
        )
    }
    ;
    w.prototype.compareTo = function(e) {
        var t = this.value.compareTo(e.value);
        return 0 === t && (t = this.id - e.id),
        t
    }
    ;
    var si = ze.internals.PriorityQueue = function(e) {
        this.items = new Array(e),
        this.length = 0
    }
      , ni = si.prototype;
    ni.isHigherPriority = function(e, t) {
        return this.items[e].compareTo(this.items[t]) < 0
    }
    ,
    ni.percolate = function(e) {
        if (!(e >= this.length || 0 > e)) {
            var t = e - 1 >> 1;
            if (!(0 > t || t === e) && this.isHigherPriority(e, t)) {
                var i = this.items[e];
                this.items[e] = this.items[t],
                this.items[t] = i,
                this.percolate(t)
            }
        }
    }
    ,
    ni.heapify = function(e) {
        if (+e || (e = 0),
        !(e >= this.length || 0 > e)) {
            var t = 2 * e + 1
              , i = 2 * e + 2
              , s = e;
            if (t < this.length && this.isHigherPriority(t, s) && (s = t),
            i < this.length && this.isHigherPriority(i, s) && (s = i),
            s !== e) {
                var n = this.items[e];
                this.items[e] = this.items[s],
                this.items[s] = n,
                this.heapify(s)
            }
        }
    }
    ,
    ni.peek = function() {
        return this.items[0].value
    }
    ,
    ni.removeAt = function(t) {
        this.items[t] = this.items[--this.length],
        this.items[this.length] = e,
        this.heapify()
    }
    ,
    ni.dequeue = function() {
        var e = this.peek();
        return this.removeAt(0),
        e
    }
    ,
    ni.enqueue = function(e) {
        var t = this.length++;
        this.items[t] = new w(si.count++,e),
        this.percolate(t)
    }
    ,
    ni.remove = function(e) {
        for (var t = 0; t < this.length; t++)
            if (this.items[t].value === e)
                return this.removeAt(t),
                !0;
        return !1
    }
    ,
    si.count = 0;
    var oi = ze.CompositeDisposable = function() {
        var e, t, i = [];
        if (Array.isArray(arguments[0]))
            i = arguments[0];
        else
            for (t = arguments.length,
            i = new Array(t),
            e = 0; t > e; e++)
                i[e] = arguments[e];
        this.disposables = i,
        this.isDisposed = !1,
        this.length = i.length
    }
      , ri = oi.prototype;
    ri.add = function(e) {
        this.isDisposed ? e.dispose() : (this.disposables.push(e),
        this.length++)
    }
    ,
    ri.remove = function(e) {
        var t = !1;
        if (!this.isDisposed) {
            var i = this.disposables.indexOf(e);
            -1 !== i && (t = !0,
            this.disposables.splice(i, 1),
            this.length--,
            e.dispose())
        }
        return t
    }
    ,
    ri.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = !0;
            for (var e = this.disposables.length, t = new Array(e), i = 0; e > i; i++)
                t[i] = this.disposables[i];
            for (this.disposables = [],
            this.length = 0,
            i = 0; e > i; i++)
                t[i].dispose()
        }
    }
    ;
    var ai = ze.Disposable = function(e) {
        this.isDisposed = !1,
        this.action = e || Ue
    }
    ;
    ai.prototype.dispose = function() {
        this.isDisposed || (this.action(),
        this.isDisposed = !0)
    }
    ;
    var li = ai.create = function(e) {
        return new ai(e)
    }
      , ci = ai.empty = {
        dispose: Ue
    }
      , di = ai.isDisposable = function(e) {
        return e && Je(e.dispose)
    }
      , ui = ai.checkDisposed = function(e) {
        if (e.isDisposed)
            throw new dt
    }
      , hi = ai._fixup = function(e) {
        return di(e) ? e : ci
    }
      , _i = ze.SingleAssignmentDisposable = function() {
        this.isDisposed = !1,
        this.current = null
    }
    ;
    _i.prototype.getDisposable = function() {
        return this.current
    }
    ,
    _i.prototype.setDisposable = function(e) {
        if (this.current)
            throw new Error("Disposable has already been assigned");
        var t = this.isDisposed;
        !t && (this.current = e),
        t && e && e.dispose()
    }
    ,
    _i.prototype.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = !0;
            var e = this.current;
            this.current = null,
            e && e.dispose()
        }
    }
    ;
    var pi = ze.SerialDisposable = function() {
        this.isDisposed = !1,
        this.current = null
    }
    ;
    pi.prototype.getDisposable = function() {
        return this.current
    }
    ,
    pi.prototype.setDisposable = function(e) {
        var t = this.isDisposed;
        if (!t) {
            var i = this.current;
            this.current = e
        }
        i && i.dispose(),
        t && e && e.dispose()
    }
    ,
    pi.prototype.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = !0;
            var e = this.current;
            this.current = null
        }
        e && e.dispose()
    }
    ;
    var mi = ze.BinaryDisposable = function(e, t) {
        this._first = e,
        this._second = t,
        this.isDisposed = !1
    }
    ;
    mi.prototype.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = !0;
            var e = this._first;
            this._first = null,
            e && e.dispose();
            var t = this._second;
            this._second = null,
            t && t.dispose()
        }
    }
    ;
    var fi = ze.NAryDisposable = function(e) {
        this._disposables = e,
        this.isDisposed = !1
    }
    ;
    fi.prototype.dispose = function() {
        if (!this.isDisposed) {
            this.isDisposed = !0;
            for (var e = 0, t = this._disposables.length; t > e; e++)
                this._disposables[e].dispose();
            this._disposables.length = 0
        }
    }
    ;
    var gi = ze.RefCountDisposable = function() {
        function e(e) {
            this.disposable = e,
            this.disposable.count++,
            this.isInnerDisposed = !1
        }
        function t(e) {
            this.underlyingDisposable = e,
            this.isDisposed = !1,
            this.isPrimaryDisposed = !1,
            this.count = 0
        }
        return e.prototype.dispose = function() {
            this.disposable.isDisposed || this.isInnerDisposed || (this.isInnerDisposed = !0,
            this.disposable.count--,
            0 === this.disposable.count && this.disposable.isPrimaryDisposed && (this.disposable.isDisposed = !0,
            this.disposable.underlyingDisposable.dispose()))
        }
        ,
        t.prototype.dispose = function() {
            this.isDisposed || this.isPrimaryDisposed || (this.isPrimaryDisposed = !0,
            0 === this.count && (this.isDisposed = !0,
            this.underlyingDisposable.dispose()))
        }
        ,
        t.prototype.getDisposable = function() {
            return this.isDisposed ? ci : new e(this)
        }
        ,
        t
    }();
    C.prototype.dispose = function() {
        this.scheduler.schedule(this, k)
    }
    ;
    var bi = ze.internals.ScheduledItem = function(e, t, i, s, n) {
        this.scheduler = e,
        this.state = t,
        this.action = i,
        this.dueTime = s,
        this.comparer = n || Ve,
        this.disposable = new _i
    }
    ;
    bi.prototype.invoke = function() {
        this.disposable.setDisposable(this.invokeCore())
    }
    ,
    bi.prototype.compareTo = function(e) {
        return this.comparer(this.dueTime, e.dueTime)
    }
    ,
    bi.prototype.isCancelled = function() {
        return this.disposable.isDisposed
    }
    ,
    bi.prototype.invokeCore = function() {
        return hi(this.action(this.scheduler, this.state));
    }
    ;
    var vi = ze.Scheduler = function() {
        function e() {}
        e.isScheduler = function(t) {
            return t instanceof e
        }
        ;
        var t = e.prototype;
        return t.schedule = function(e, t) {
            throw new _t
        }
        ,
        t.scheduleFuture = function(t, i, s) {
            var n = i;
            return n instanceof Date && (n -= this.now()),
            n = e.normalize(n),
            0 === n ? this.schedule(t, s) : this._scheduleFuture(t, n, s)
        }
        ,
        t._scheduleFuture = function(e, t, i) {
            throw new _t
        }
        ,
        e.now = Be,
        e.prototype.now = Be,
        e.normalize = function(e) {
            return 0 > e && (e = 0),
            e
        }
        ,
        e
    }()
      , yi = vi.normalize
      , wi = vi.isScheduler;
    !function(e) {
        function t(e, t) {
            function i(t) {
                function s(e, t) {
                    return r ? o.remove(l) : a = !0,
                    n(t, i),
                    ci
                }
                var r = !1
                  , a = !1
                  , l = e.schedule(t, s);
                a || (o.add(l),
                r = !0)
            }
            var s = t[0]
              , n = t[1]
              , o = new oi;
            return n(s, i),
            o
        }
        function i(e, t) {
            function i(t, s) {
                function r(e, t) {
                    return a ? o.remove(c) : l = !0,
                    n(t, i),
                    ci
                }
                var a = !1
                  , l = !1
                  , c = e.scheduleFuture(t, s, r);
                l || (o.add(c),
                a = !0)
            }
            var s = t[0]
              , n = t[1]
              , o = new oi;
            return n(s, i),
            o
        }
        e.scheduleRecursive = function(e, i) {
            return this.schedule([e, i], t)
        }
        ,
        e.scheduleRecursiveFuture = function(e, t, s) {
            return this.scheduleFuture([e, s], t, i)
        }
    }(vi.prototype),
    function(e) {
        e.schedulePeriodic = function(e, t, i) {
            if ("undefined" == typeof Le.setInterval)
                throw new ht;
            t = yi(t);
            var s = e
              , n = Le.setInterval(function() {
                s = i(s)
            }, t);
            return li(function() {
                Le.clearInterval(n)
            })
        }
    }(vi.prototype),
    function(e) {
        e.catchError = e["catch"] = function(e) {
            return new Pi(this,e)
        }
    }(vi.prototype);
    var Ci, ki, xi = ze.internals.SchedulePeriodicRecursive = function() {
        function e(e) {
            return function(t, i) {
                i(0, e._period);
                var s = Ke(e._action)(e._state);
                s === Qe && (e._cancel.dispose(),
                n(s.e)),
                e._state = s
            }
        }
        function t(e, t, i, s) {
            this._scheduler = e,
            this._state = t,
            this._period = i,
            this._action = s
        }
        return t.prototype.start = function() {
            var t = new _i;
            return this._cancel = t,
            t.setDisposable(this._scheduler.scheduleRecursiveFuture(0, this._period, e(this))),
            t
        }
        ,
        t
    }(), Mi = function(e) {
        function t() {
            e.call(this)
        }
        return ei(t, e),
        t.prototype.schedule = function(e, t) {
            return hi(t(this, e))
        }
        ,
        t
    }(vi), Ai = vi.immediate = new Mi, Oi = function(e) {
        function t() {
            for (; s.length > 0; ) {
                var e = s.dequeue();
                !e.isCancelled() && e.invoke()
            }
        }
        function i() {
            e.call(this)
        }
        var s;
        return ei(i, e),
        i.prototype.schedule = function(e, i) {
            var o = new bi(this,e,i,this.now());
            if (s)
                s.enqueue(o);
            else {
                s = new si(4),
                s.enqueue(o);
                var r = Ke(t)();
                s = null,
                r === Qe && n(r.e)
            }
            return o.disposable
        }
        ,
        i.prototype.scheduleRequired = function() {
            return !s
        }
        ,
        i
    }(vi), $i = vi.currentThread = new Oi, Ti = function() {
        var e, t = Ue;
        if (Le.setTimeout)
            e = Le.setTimeout,
            t = Le.clearTimeout;
        else {
            if (!Le.WScript)
                throw new ht;
            e = function(e, t) {
                Le.WScript.Sleep(t),
                e()
            }
        }
        return {
            setTimeout: e,
            clearTimeout: t
        }
    }(), Si = Ti.setTimeout, Ei = Ti.clearTimeout;
    !function() {
        function e(t) {
            if (o)
                Si(function() {
                    e(t)
                }, 0);
            else {
                var i = s[t];
                if (i) {
                    o = !0;
                    var r = Ke(i)();
                    ki(t),
                    o = !1,
                    r === Qe && n(r.e)
                }
            }
        }
        function t() {
            if (!Le.postMessage || Le.importScripts)
                return !1;
            var e = !1
              , t = Le.onmessage;
            return Le.onmessage = function() {
                e = !0
            }
            ,
            Le.postMessage("", "*"),
            Le.onmessage = t,
            e
        }
        var i = 1
          , s = {}
          , o = !1;
        ki = function(e) {
            delete s[e]
        }
        ;
        var r = new RegExp("^" + String(st).replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/toString| for [^\]]+/g, ".*?") + "$")
          , a = "function" == typeof (a = Ie && qe && Ie.setImmediate) && !r.test(a) && a;
        if (Je(a))
            Ci = function(t) {
                var n = i++;
                return s[n] = t,
                a(function() {
                    e(n)
                }),
                n
            }
            ;
        else if ("undefined" != typeof process && "[object process]" === {}.toString.call(process))
            Ci = function(t) {
                var n = i++;
                return s[n] = t,
                process.nextTick(function() {
                    e(n)
                }),
                n
            }
            ;
        else if (t()) {
            var l = "ms.rx.schedule" + Math.random()
              , c = function(t) {
                "string" == typeof t.data && t.data.substring(0, l.length) === l && e(t.data.substring(l.length))
            };
            Le.addEventListener("message", c, !1),
            Ci = function(e) {
                var t = i++;
                return s[t] = e,
                Le.postMessage(l + t, "*"),
                t
            }
        } else if (Le.MessageChannel) {
            var d = new Le.MessageChannel;
            d.port1.onmessage = function(t) {
                e(t.data)
            }
            ,
            Ci = function(e) {
                var t = i++;
                return s[t] = e,
                d.port2.postMessage(t),
                t
            }
        } else
            Ci = "document"in Le && "onreadystatechange"in Le.document.createElement("script") ? function(t) {
                var n = Le.document.createElement("script")
                  , o = i++;
                return s[o] = t,
                n.onreadystatechange = function() {
                    e(o),
                    n.onreadystatechange = null,
                    n.parentNode.removeChild(n),
                    n = null
                }
                ,
                Le.document.documentElement.appendChild(n),
                o
            }
            : function(t) {
                var n = i++;
                return s[n] = t,
                Si(function() {
                    e(n)
                }, 0),
                n
            }
    }();
    var ji = function(e) {
        function t() {
            e.call(this)
        }
        function i(e, t, i, s) {
            return function() {
                e.setDisposable(ai._fixup(t(i, s)))
            }
        }
        function s(e) {
            this._id = e,
            this.isDisposed = !1
        }
        function n(e) {
            this._id = e,
            this.isDisposed = !1
        }
        function o(e, t, i) {
            return function() {
                t(e, i)
            }
        }
        return ei(t, e),
        s.prototype.dispose = function() {
            this.isDisposed || (this.isDisposed = !0,
            ki(this._id))
        }
        ,
        n.prototype.dispose = function() {
            this.isDisposed || (this.isDisposed = !0,
            Ei(this._id))
        }
        ,
        t.prototype.schedule = function(e, t) {
            var n = new _i
              , o = Ci(i(n, t, this, e));
            return new mi(n,new s(o))
        }
        ,
        t.prototype._scheduleFuture = function(e, t, s) {
            if (0 === t)
                return this.schedule(e, s);
            var o = new _i
              , r = Si(i(o, s, this, e), t);
            return new mi(o,new n(r))
        }
        ,
        t.prototype.scheduleLongRunning = function(e, t) {
            var i = li(Ue);
            return Ci(o(e, t, i)),
            i
        }
        ,
        t
    }(vi)
      , Ri = vi["default"] = vi.async = new ji
      , Pi = function(e) {
        function t(t, i) {
            this._scheduler = t,
            this._handler = i,
            this._recursiveOriginal = null,
            this._recursiveWrapper = null,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.schedule = function(e, t) {
            return this._scheduler.schedule(e, this._wrap(t))
        }
        ,
        t.prototype._scheduleFuture = function(e, t, i) {
            return this._scheduler.schedule(e, t, this._wrap(i))
        }
        ,
        t.prototype.now = function() {
            return this._scheduler.now()
        }
        ,
        t.prototype._clone = function(e) {
            return new t(e,this._handler)
        }
        ,
        t.prototype._wrap = function(e) {
            var t = this;
            return function(i, s) {
                var o = Ke(e)(t._getRecursiveWrapper(i), s);
                return o === Qe ? (t._handler(o.e) || n(o.e),
                ci) : hi(o)
            }
        }
        ,
        t.prototype._getRecursiveWrapper = function(e) {
            if (this._recursiveOriginal !== e) {
                this._recursiveOriginal = e;
                var t = this._clone(e);
                t._recursiveOriginal = e,
                t._recursiveWrapper = t,
                this._recursiveWrapper = t
            }
            return this._recursiveWrapper
        }
        ,
        t.prototype.schedulePeriodic = function(e, t, i) {
            var s = this
              , o = !1
              , r = new _i;
            return r.setDisposable(this._scheduler.schedulePeriodic(e, t, function(e) {
                if (o)
                    return null;
                var t = Ke(i)(e);
                return t === Qe ? (o = !0,
                s._handler(t.e) || n(t.e),
                r.dispose(),
                null) : t
            })),
            r
        }
        ,
        t
    }(vi)
      , Ii = ze.Notification = function() {
        function e() {}
        return e.prototype._accept = function(e, t, i) {
            throw new _t
        }
        ,
        e.prototype._acceptObserver = function(e, t, i) {
            throw new _t
        }
        ,
        e.prototype.accept = function(e, t, i) {
            return e && "object" == typeof e ? this._acceptObserver(e) : this._accept(e, t, i)
        }
        ,
        e.prototype.toObservable = function(e) {
            var t = this;
            return wi(e) || (e = Ai),
            new Sr(function(i) {
                return e.schedule(t, function(e, t) {
                    t._acceptObserver(i),
                    "N" === t.kind && i.onCompleted()
                })
            }
            )
        }
        ,
        e
    }()
      , Fi = function(e) {
        function t(e) {
            this.value = e,
            this.kind = "N"
        }
        return ei(t, e),
        t.prototype._accept = function(e) {
            return e(this.value)
        }
        ,
        t.prototype._acceptObserver = function(e) {
            return e.onNext(this.value)
        }
        ,
        t.prototype.toString = function() {
            return "OnNext(" + this.value + ")"
        }
        ,
        t
    }(Ii)
      , Di = function(e) {
        function t(e) {
            this.error = e,
            this.kind = "E"
        }
        return ei(t, e),
        t.prototype._accept = function(e, t) {
            return t(this.error)
        }
        ,
        t.prototype._acceptObserver = function(e) {
            return e.onError(this.error)
        }
        ,
        t.prototype.toString = function() {
            return "OnError(" + this.error + ")"
        }
        ,
        t
    }(Ii)
      , qi = function(e) {
        function t() {
            this.kind = "C"
        }
        return ei(t, e),
        t.prototype._accept = function(e, t, i) {
            return i()
        }
        ,
        t.prototype._acceptObserver = function(e) {
            return e.onCompleted()
        }
        ,
        t.prototype.toString = function() {
            return "OnCompleted()"
        }
        ,
        t
    }(Ii)
      , Ni = Ii.createOnNext = function(e) {
        return new Fi(e)
    }
      , Li = Ii.createOnError = function(e) {
        return new Di(e)
    }
      , zi = Ii.createOnCompleted = function() {
        return new qi
    }
      , Ui = ze.Observer = function() {}
    ;
    Ui.prototype.toNotifier = function() {
        var e = this;
        return function(t) {
            return t.accept(e)
        }
    }
    ,
    Ui.prototype.asObserver = function() {
        var e = this;
        return new Vi(function(t) {
            e.onNext(t)
        }
        ,function(t) {
            e.onError(t)
        }
        ,function() {
            e.onCompleted()
        }
        )
    }
    ,
    Ui.prototype.checked = function() {
        return new Gi(this)
    }
    ;
    var Hi = Ui.create = function(e, t, i) {
        return e || (e = Ue),
        t || (t = Ge),
        i || (i = Ue),
        new Vi(e,t,i)
    }
    ;
    Ui.fromNotifier = function(e, t) {
        var i = vt(e, t, 1);
        return new Vi(function(e) {
            return i(Ni(e))
        }
        ,function(e) {
            return i(Li(e))
        }
        ,function() {
            return i(zi())
        }
        )
    }
    ,
    Ui.prototype.notifyOn = function(e) {
        return new Ji(e,this)
    }
    ,
    Ui.prototype.makeSafe = function(e) {
        return new AnonymousSafeObserver(this._onNext,this._onError,this._onCompleted,e)
    }
    ;
    var Bi, Wi = ze.internals.AbstractObserver = function(e) {
        function t() {
            this.isStopped = !1
        }
        return ei(t, e),
        t.prototype.next = pt,
        t.prototype.error = pt,
        t.prototype.completed = pt,
        t.prototype.onNext = function(e) {
            !this.isStopped && this.next(e)
        }
        ,
        t.prototype.onError = function(e) {
            this.isStopped || (this.isStopped = !0,
            this.error(e))
        }
        ,
        t.prototype.onCompleted = function() {
            this.isStopped || (this.isStopped = !0,
            this.completed())
        }
        ,
        t.prototype.dispose = function() {
            this.isStopped = !0
        }
        ,
        t.prototype.fail = function(e) {
            return this.isStopped ? !1 : (this.isStopped = !0,
            this.error(e),
            !0)
        }
        ,
        t
    }(Ui), Vi = ze.AnonymousObserver = function(e) {
        function t(t, i, s) {
            e.call(this),
            this._onNext = t,
            this._onError = i,
            this._onCompleted = s
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._onCompleted()
        }
        ,
        t
    }(Wi), Gi = function(e) {
        function t(t) {
            e.call(this),
            this._observer = t,
            this._state = 0
        }
        ei(t, e);
        var i = t.prototype;
        return i.onNext = function(e) {
            this.checkAccess();
            var t = Ke(this._observer.onNext).call(this._observer, e);
            this._state = 0,
            t === Qe && n(t.e)
        }
        ,
        i.onError = function(e) {
            this.checkAccess();
            var t = Ke(this._observer.onError).call(this._observer, e);
            this._state = 2,
            t === Qe && n(t.e)
        }
        ,
        i.onCompleted = function() {
            this.checkAccess();
            var e = Ke(this._observer.onCompleted).call(this._observer);
            this._state = 2,
            e === Qe && n(e.e)
        }
        ,
        i.checkAccess = function() {
            if (1 === this._state)
                throw new Error("Re-entrancy detected");
            if (2 === this._state)
                throw new Error("Observer completed");
            0 === this._state && (this._state = 1)
        }
        ,
        t
    }(Ui), Yi = ze.internals.ScheduledObserver = function(e) {
        function t(t, i) {
            e.call(this),
            this.scheduler = t,
            this.observer = i,
            this.isAcquired = !1,
            this.hasFaulted = !1,
            this.queue = [],
            this.disposable = new pi
        }
        function i(e, t) {
            return function() {
                e.onNext(t)
            }
        }
        function s(e, t) {
            return function() {
                e.onError(t)
            }
        }
        function o(e) {
            return function() {
                e.onCompleted()
            }
        }
        function r(e, t) {
            var i;
            if (!(e.queue.length > 0))
                return void (e.isAcquired = !1);
            i = e.queue.shift();
            var s = Ke(i)();
            return s === Qe ? (e.queue = [],
            e.hasFaulted = !0,
            n(s.e)) : void t(e)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this.queue.push(i(this.observer, e))
        }
        ,
        t.prototype.error = function(e) {
            this.queue.push(s(this.observer, e))
        }
        ,
        t.prototype.completed = function() {
            this.queue.push(o(this.observer))
        }
        ,
        t.prototype.ensureActive = function() {
            var e = !1;
            !this.hasFaulted && this.queue.length > 0 && (e = !this.isAcquired,
            this.isAcquired = !0),
            e && this.disposable.setDisposable(this.scheduler.scheduleRecursive(this, r))
        }
        ,
        t.prototype.dispose = function() {
            e.prototype.dispose.call(this),
            this.disposable.dispose()
        }
        ,
        t
    }(Wi), Ji = function(e) {
        function t(t, i, s) {
            e.call(this, t, i),
            this._cancel = s
        }
        return ei(t, e),
        t.prototype.next = function(t) {
            e.prototype.next.call(this, t),
            this.ensureActive()
        }
        ,
        t.prototype.error = function(t) {
            e.prototype.error.call(this, t),
            this.ensureActive()
        }
        ,
        t.prototype.completed = function() {
            e.prototype.completed.call(this),
            this.ensureActive()
        }
        ,
        t.prototype.dispose = function() {
            e.prototype.dispose.call(this),
            this._cancel && this._cancel.dispose(),
            this._cancel = null
        }
        ,
        t
    }(Yi), Qi = ze.Observable = function() {
        function e(e, t) {
            return function(i) {
                var s = i.onError;
                return i.onError = function(t) {
                    o(t, e),
                    s.call(i, t)
                }
                ,
                t.call(e, i)
            }
        }
        function t() {
            if (ze.config.longStackSupport && Xe) {
                var t = this._subscribe
                  , i = Ke(n)(new Error).e;
                this.stack = i.stack.substring(i.stack.indexOf("\n") + 1),
                this._subscribe = e(this, t)
            }
        }
        return Bi = t.prototype,
        t.isObservable = function(e) {
            return e && Je(e.subscribe)
        }
        ,
        Bi.subscribe = Bi.forEach = function(e, t, i) {
            return this._subscribe("object" == typeof e ? e : Hi(e, t, i))
        }
        ,
        Bi.subscribeOnNext = function(e, t) {
            return this._subscribe(Hi("undefined" != typeof t ? function(i) {
                e.call(t, i)
            }
            : e))
        }
        ,
        Bi.subscribeOnError = function(e, t) {
            return this._subscribe(Hi(null, "undefined" != typeof t ? function(i) {
                e.call(t, i)
            }
            : e))
        }
        ,
        Bi.subscribeOnCompleted = function(e, t) {
            return this._subscribe(Hi(null, null, "undefined" != typeof t ? function() {
                e.call(t)
            }
            : e))
        }
        ,
        t
    }(), Ki = ze.ObservableBase = function(e) {
        function t(e) {
            return e && Je(e.dispose) ? e : Je(e) ? li(e) : ci
        }
        function i(e, i) {
            var s = i[0]
              , o = i[1]
              , r = Ke(o.subscribeCore).call(o, s);
            r !== Qe || s.fail(Qe.e) || n(Qe.e),
            s.setDisposable(t(r))
        }
        function s() {
            e.call(this)
        }
        return ei(s, e),
        s.prototype._subscribe = function(e) {
            var t = new Er(e)
              , s = [t, this];
            return $i.scheduleRequired() ? $i.schedule(s, i) : i(null, s),
            t
        }
        ,
        s.prototype.subscribeCore = pt,
        s
    }(Qi), Xi = ze.FlatMapObservable = function(e) {
        function t(t, i, s, n) {
            this.resultSelector = Je(s) ? s : null,
            this.selector = vt(Je(i) ? i : function() {
                return i
            }
            , n, 3),
            this.source = t,
            e.call(this)
        }
        function i(e, t, i, s) {
            this.i = 0,
            this.selector = t,
            this.resultSelector = i,
            this.source = s,
            this.o = e,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e,this.selector,this.resultSelector,this))
        }
        ,
        ei(i, Wi),
        i.prototype._wrapResult = function(e, t, i) {
            return this.resultSelector ? e.map(function(e, s) {
                return this.resultSelector(t, e, i, s)
            }, this) : e
        }
        ,
        i.prototype.next = function(e) {
            var t = this.i++
              , i = Ke(this.selector)(e, t, this.source);
            return i === Qe ? this.o.onError(i.e) : (Ye(i) && (i = cs(i)),
            (bt(i) || gt(i)) && (i = Qi.from(i)),
            void this.o.onNext(this._wrapResult(i, e, t)))
        }
        ,
        i.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this.o.onCompleted()
        }
        ,
        t
    }(Ki), Zi = ze.internals.Enumerable = function() {}
    ;
    x.prototype.dispose = function() {
        this.isDisposed || (this.isDisposed = !0,
        this._s.isDisposed = !0)
    }
    ;
    var es = function(e) {
        function t(t) {
            this.sources = t,
            e.call(this)
        }
        function i(e, t) {
            if (!e.isDisposed) {
                var i = Ke(e.e.next).call(e.e);
                if (i === Qe)
                    return e.o.onError(i.e);
                if (i.done)
                    return e.o.onCompleted();
                var n = i.value;
                Ye(n) && (n = cs(n));
                var o = new _i;
                e.subscription.setDisposable(o),
                o.setDisposable(n.subscribe(new s(e,t)))
            }
        }
        function s(e, t) {
            this._state = e,
            this._recurse = t,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , s = {
                isDisposed: !1,
                o: e,
                subscription: t,
                e: this.sources[mt]()
            }
              , n = $i.scheduleRecursive(s, i);
            return new fi([t, n, new x(s)])
        }
        ,
        ei(s, Wi),
        s.prototype.next = function(e) {
            this._state.o.onNext(e)
        }
        ,
        s.prototype.error = function(e) {
            this._state.o.onError(e)
        }
        ,
        s.prototype.completed = function() {
            this._recurse(this._state)
        }
        ,
        t
    }(Ki);
    Zi.prototype.concat = function() {
        return new es(this)
    }
    ;
    var ts = function(e) {
        function t(t) {
            this.sources = t,
            e.call(this)
        }
        function i(e, t) {
            if (!e.isDisposed) {
                var i = Ke(e.e.next).call(e.e);
                if (i === Qe)
                    return e.o.onError(i.e);
                if (i.done)
                    return null !== e.lastError ? e.o.onError(e.lastError) : e.o.onCompleted();
                var n = i.value;
                Ye(n) && (n = cs(n));
                var o = new _i;
                e.subscription.setDisposable(o),
                o.setDisposable(n.subscribe(new s(e,t)))
            }
        }
        function s(e, t) {
            this._state = e,
            this._recurse = t,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , s = {
                isDisposed: !1,
                e: this.sources[mt](),
                subscription: t,
                lastError: null,
                o: e
            }
              , n = $i.scheduleRecursive(s, i);
            return new fi([t, n, new x(s)])
        }
        ,
        ei(s, Wi),
        s.prototype.next = function(e) {
            this._state.o.onNext(e)
        }
        ,
        s.prototype.error = function(e) {
            this._state.lastError = e,
            this._recurse(this._state)
        }
        ,
        s.prototype.completed = function() {
            this._state.o.onCompleted()
        }
        ,
        t
    }(Ki);
    Zi.prototype.catchError = function() {
        return new ts(this)
    }
    ;
    var is = function(e) {
        function t(e, t) {
            this.v = e,
            this.c = null == t ? -1 : t
        }
        function i(e) {
            this.v = e.v,
            this.l = e.c
        }
        return ei(t, e),
        t.prototype[mt] = function() {
            return new i(this)
        }
        ,
        i.prototype.next = function() {
            return 0 === this.l ? ft : (this.l > 0 && this.l--,
            {
                done: !1,
                value: this.v
            })
        }
        ,
        t
    }(Zi)
      , ss = Zi.repeat = function(e, t) {
        return new is(e,t)
    }
      , ns = function(e) {
        function t(e, t, i) {
            this.s = e,
            this.fn = t ? vt(t, i, 3) : null
        }
        function i(e) {
            this.i = -1,
            this.s = e.s,
            this.l = this.s.length,
            this.fn = e.fn
        }
        return ei(t, e),
        t.prototype[mt] = function() {
            return new i(this)
        }
        ,
        i.prototype.next = function() {
            return ++this.i < this.l ? {
                done: !1,
                value: this.fn ? this.fn(this.s[this.i], this.i, this.s) : this.s[this.i]
            } : ft
        }
        ,
        t
    }(Zi)
      , os = Zi.of = function(e, t, i) {
        return new ns(e,t,i)
    }
      , rs = function(e) {
        function t(t, i) {
            this.source = t,
            this._s = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Ji(this._s,e))
        }
        ,
        t
    }(Ki);
    Bi.observeOn = function(e) {
        return new rs(this,e)
    }
    ;
    var as = function(e) {
        function t(t, i) {
            this.source = t,
            this._s = i,
            e.call(this)
        }
        function i(e, t) {
            var i = t[0]
              , s = t[1]
              , n = t[2];
            s.setDisposable(new C(e,i.subscribe(n)))
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new _i
              , s = new pi;
            return s.setDisposable(t),
            t.setDisposable(this._s.schedule([this.source, s, e], i)),
            s
        }
        ,
        t
    }(Ki);
    Bi.subscribeOn = function(e) {
        return new as(this,e)
    }
    ;
    var ls = function(e) {
        function t(t, i) {
            this._p = t,
            this._s = i,
            e.call(this)
        }
        function i(e, t) {
            var i = t[0]
              , s = t[1];
            i.onNext(s),
            i.onCompleted()
        }
        function s(e, t) {
            var i = t[0]
              , s = t[1];
            i.onError(s)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new _i
              , n = this
              , o = this._p;
            return Je(o) && (o = Ke(o)(),
            o === Qe) ? (e.onError(o.e),
            t) : (o.then(function(s) {
                t.setDisposable(n._s.schedule([e, s], i))
            }, function(i) {
                t.setDisposable(n._s.schedule([e, i], s))
            }),
            t)
        }
        ,
        t
    }(Ki)
      , cs = Qi.fromPromise = function(e, t) {
        return t || (t = Ri),
        new ls(e,t)
    }
    ;
    Bi.toPromise = function(e) {
        if (e || (e = ze.config.Promise),
        !e)
            throw new ht("Promise type not provided nor in Rx.config.Promise");
        var t = this;
        return new e(function(e, i) {
            var s;
            t.subscribe(function(e) {
                s = e
            }, i, function() {
                e(s)
            })
        }
        )
    }
    ;
    var ds = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        function i(e) {
            this.o = e,
            this.a = [],
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e))
        }
        ,
        ei(i, Wi),
        i.prototype.next = function(e) {
            this.a.push(e)
        }
        ,
        i.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this.o.onNext(this.a),
            this.o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi.toArray = function() {
        return new ds(this)
    }
    ,
    Qi.create = function(e, t) {
        return new Sr(e,t)
    }
    ;
    var us = function(e) {
        function t(t) {
            this._f = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = Ke(this._f)();
            return t === Qe ? Ss(t.e).subscribe(e) : (Ye(t) && (t = cs(t)),
            t.subscribe(e))
        }
        ,
        t
    }(Ki)
      , hs = Qi.defer = function(e) {
        return new us(e)
    }
      , _s = function(e) {
        function t(t) {
            this.scheduler = t,
            e.call(this)
        }
        function i(e, t) {
            this.observer = e,
            this.scheduler = t
        }
        function s(e, t) {
            return t.onCompleted(),
            ci
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new i(e,this.scheduler);
            return t.run()
        }
        ,
        i.prototype.run = function() {
            var e = this.observer;
            return this.scheduler === Ai ? s(null, e) : this.scheduler.schedule(e, s)
        }
        ,
        t
    }(Ki)
      , ps = new _s(Ai)
      , ms = Qi.empty = function(e) {
        return wi(e) || (e = Ai),
        e === Ai ? ps : new _s(e)
    }
      , fs = function(e) {
        function t(t, i, s) {
            this._iterable = t,
            this._fn = i,
            this._scheduler = s,
            e.call(this)
        }
        function i(e, t, i) {
            return function(s, n) {
                var o = Ke(t.next).call(t);
                if (o === Qe)
                    return e.onError(o.e);
                if (o.done)
                    return e.onCompleted();
                var r = o.value;
                return Je(i) && (r = Ke(i)(r, s),
                r === Qe) ? e.onError(r.e) : (e.onNext(r),
                void n(s + 1))
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = Object(this._iterable)
              , s = S(t);
            return this._scheduler.scheduleRecursive(0, i(e, s, this._fn))
        }
        ,
        t
    }(Ki)
      , gs = Math.pow(2, 53) - 1;
    M.prototype[mt] = function() {
        return new A(this._s)
    }
    ,
    A.prototype[mt] = function() {
        return this
    }
    ,
    A.prototype.next = function() {
        return this._i < this._l ? {
            done: !1,
            value: this._s.charAt(this._i++)
        } : ft
    }
    ,
    O.prototype[mt] = function() {
        return new $(this._a)
    }
    ,
    $.prototype[mt] = function() {
        return this
    }
    ,
    $.prototype.next = function() {
        return this._i < this._l ? {
            done: !1,
            value: this._a[this._i++]
        } : ft
    }
    ;
    var bs = Qi.from = function(e, t, i, s) {
        if (null == e)
            throw new Error("iterable cannot be null.");
        if (t && !Je(t))
            throw new Error("mapFn when provided must be a function");
        if (t)
            var n = vt(t, i, 2);
        return wi(s) || (s = $i),
        new fs(e,n,s)
    }
      , vs = function(e) {
        function t(t, i) {
            this._args = t,
            this._scheduler = i,
            e.call(this)
        }
        function i(e, t) {
            var i = t.length;
            return function(s, n) {
                i > s ? (e.onNext(t[s]),
                n(s + 1)) : e.onCompleted()
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._scheduler.scheduleRecursive(0, i(e, this._args))
        }
        ,
        t
    }(Ki)
      , ys = Qi.fromArray = function(e, t) {
        return wi(t) || (t = $i),
        new vs(e,t)
    }
      , ws = function(e) {
        function t(t, i, s, n, o) {
            this._initialState = t,
            this._cndFn = i,
            this._itrFn = s,
            this._resFn = n,
            this._s = o,
            e.call(this)
        }
        function i(e, t) {
            if (e.first)
                e.first = !1;
            else if (e.newState = Ke(e.self._itrFn)(e.newState),
            e.newState === Qe)
                return e.o.onError(e.newState.e);
            var i = Ke(e.self._cndFn)(e.newState);
            if (i === Qe)
                return e.o.onError(i.e);
            if (i) {
                var s = Ke(e.self._resFn)(e.newState);
                if (s === Qe)
                    return e.o.onError(s.e);
                e.o.onNext(s),
                t(e)
            } else
                e.o.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = {
                o: e,
                self: this,
                first: !0,
                newState: this._initialState
            };
            return this._s.scheduleRecursive(t, i)
        }
        ,
        t
    }(Ki);
    Qi.generate = function(e, t, i, s, n) {
        return wi(n) || (n = $i),
        new ws(e,t,i,s,n)
    }
    ,
    Qi.of = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return new vs(t,$i)
    }
    ,
    Qi.ofWithScheduler = function(e) {
        for (var t = arguments.length, i = new Array(t - 1), s = 1; t > s; s++)
            i[s - 1] = arguments[s];
        return new vs(i,e)
    }
    ;
    var Cs = function(e) {
        function t() {
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return ci
        }
        ,
        t
    }(Ki)
      , ks = new Cs
      , xs = Qi.never = function() {
        return ks
    }
      , Ms = function(e) {
        function t(t, i) {
            this._o = t,
            this._keys = Object.keys(t),
            this._scheduler = i,
            e.call(this)
        }
        function i(e, t, i) {
            return function(s, n) {
                if (s < i.length) {
                    var o = i[s];
                    e.onNext([o, t[o]]),
                    n(s + 1)
                } else
                    e.onCompleted()
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._scheduler.scheduleRecursive(0, i(e, this._o, this._keys))
        }
        ,
        t
    }(Ki);
    Qi.pairs = function(e, t) {
        return t || (t = $i),
        new Ms(e,t)
    }
    ;
    var As = function(e) {
        function t(t, i, s) {
            this.start = t,
            this.rangeCount = i,
            this.scheduler = s,
            e.call(this)
        }
        function i(e, t, i) {
            return function(s, n) {
                t > s ? (i.onNext(e + s),
                n(s + 1)) : i.onCompleted()
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.scheduler.scheduleRecursive(0, i(this.start, this.rangeCount, e))
        }
        ,
        t
    }(Ki);
    Qi.range = function(e, t, i) {
        return wi(i) || (i = $i),
        new As(e,t,i)
    }
    ;
    var Os = function(e) {
        function t(t, i, s) {
            this.value = t,
            this.repeatCount = null == i ? -1 : i,
            this.scheduler = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new P(e,this);
            return t.run()
        }
        ,
        t
    }(Ki);
    P.prototype.run = function() {
        function e(e, s) {
            return (-1 === e || e > 0) && (t.onNext(i),
            e > 0 && e--),
            0 === e ? t.onCompleted() : void s(e)
        }
        var t = this.observer
          , i = this.parent.value;
        return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount, e)
    }
    ,
    Qi.repeat = function(e, t, i) {
        return wi(i) || (i = $i),
        new Os(e,t,i)
    }
    ;
    var $s = function(e) {
        function t(t, i) {
            this._value = t,
            this._scheduler = i,
            e.call(this)
        }
        function i(e, t) {
            var i = t[0]
              , s = t[1];
            return s.onNext(i),
            s.onCompleted(),
            ci
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = [this._value, e];
            return this._scheduler === Ai ? i(null, t) : this._scheduler.schedule(t, i)
        }
        ,
        t
    }(Ki)
      , Ts = (Qi["return"] = Qi.just = function(e, t) {
        return wi(t) || (t = Ai),
        new $s(e,t)
    }
    ,
    function(e) {
        function t(t, i) {
            this._error = t,
            this._scheduler = i,
            e.call(this)
        }
        function i(e, t) {
            var i = t[0]
              , s = t[1];
            return s.onError(i),
            ci
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = [this._error, e];
            return this._scheduler === Ai ? i(null, t) : this._scheduler.schedule(t, i)
        }
        ,
        t
    }(Ki))
      , Ss = Qi["throw"] = function(e, t) {
        return wi(t) || (t = Ai),
        new Ts(e,t)
    }
      , Es = function(e) {
        function t(t, i) {
            this._resFn = t,
            this._obsFn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = ci
              , i = Ke(this._resFn)();
            if (i === Qe)
                return new mi(Ss(i.e).subscribe(e),t);
            i && (t = i);
            var s = Ke(this._obsFn)(i);
            return s === Qe ? new mi(Ss(s.e).subscribe(e),t) : new mi(s.subscribe(e),t)
        }
        ,
        t
    }(Ki);
    Qi.using = function(e, t) {
        return new Es(e,t)
    }
    ,
    Bi.amb = function(e) {
        var t = this;
        return new Sr(function(i) {
            function s() {
                o || (o = r,
                c.dispose())
            }
            function n() {
                o || (o = a,
                l.dispose())
            }
            var o, r = "L", a = "R", l = new _i, c = new _i;
            Ye(e) && (e = cs(e));
            var d = Hi(function(e) {
                s(),
                o === r && i.onNext(e)
            }, function(e) {
                s(),
                o === r && i.onError(e)
            }, function() {
                s(),
                o === r && i.onCompleted()
            })
              , u = Hi(function(e) {
                n(),
                o === a && i.onNext(e)
            }, function(e) {
                n(),
                o === a && i.onError(e)
            }, function() {
                n(),
                o === a && i.onCompleted()
            });
            return l.setDisposable(t.subscribe(d)),
            c.setDisposable(e.subscribe(u)),
            new mi(l,c)
        }
        )
    }
    ,
    Qi.amb = function() {
        var e, t = xs();
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            var i = arguments.length;
            e = new Array(e);
            for (var s = 0; i > s; s++)
                e[s] = arguments[s]
        }
        for (var s = 0, i = e.length; i > s; s++)
            t = I(t, e[s]);
        return t
    }
    ;
    var js = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new _i
              , i = new pi;
            return i.setDisposable(t),
            t.setDisposable(this.source.subscribe(new Rs(e,i,this._fn))),
            i
        }
        ,
        t
    }(Ki)
      , Rs = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._s = i,
            this._fn = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._o.onNext(e)
        }
        ,
        t.prototype.completed = function() {
            return this._o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            var t = Ke(this._fn)(e);
            if (t === Qe)
                return this._o.onError(t.e);
            Ye(t) && (t = cs(t));
            var i = new _i;
            this._s.setDisposable(i),
            i.setDisposable(t.subscribe(this._o))
        }
        ,
        t
    }(Wi);
    Bi["catch"] = function(e) {
        return Je(e) ? new js(this,e) : Ps([this, e])
    }
    ;
    var Ps = Qi["catch"] = function() {
        var e;
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            var t = arguments.length;
            e = new Array(t);
            for (var i = 0; t > i; i++)
                e[i] = arguments[i]
        }
        return os(e).catchError()
    }
    ;
    Bi.combineLatest = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return Array.isArray(t[0]) ? t[0].unshift(this) : t.unshift(this),
        Ds.apply(this, t)
    }
    ;
    var Is = function(e) {
        function t(t, i) {
            this._params = t,
            this._cb = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            for (var t = this._params.length, i = new Array(t), s = {
                hasValue: y(t, F),
                hasValueAll: !1,
                isDone: y(t, F),
                values: new Array(t)
            }, n = 0; t > n; n++) {
                var o = this._params[n]
                  , r = new _i;
                i[n] = r,
                Ye(o) && (o = cs(o)),
                r.setDisposable(o.subscribe(new Fs(e,n,this._cb,s)))
            }
            return new fi(i)
        }
        ,
        t
    }(Ki)
      , Fs = function(e) {
        function t(t, i, s, n) {
            this._o = t,
            this._i = i,
            this._cb = s,
            this._state = n,
            e.call(this)
        }
        function i(e) {
            return function(t, i) {
                return i !== e
            }
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._state.values[this._i] = e,
            this._state.hasValue[this._i] = !0,
            this._state.hasValueAll || (this._state.hasValueAll = this._state.hasValue.every(He))) {
                var t = Ke(this._cb).apply(null, this._state.values);
                if (t === Qe)
                    return this._o.onError(t.e);
                this._o.onNext(t)
            } else
                this._state.isDone.filter(i(this._i)).every(He) && this._o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._state.isDone[this._i] = !0,
            this._state.isDone.every(He) && this._o.onCompleted()
        }
        ,
        t
    }(Wi)
      , Ds = Qi.combineLatest = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        var s = Je(t[e - 1]) ? t.pop() : D;
        return Array.isArray(t[0]) && (t = t[0]),
        new Is(t,s)
    }
    ;
    Bi.concat = function() {
        for (var e = [], t = 0, i = arguments.length; i > t; t++)
            e.push(arguments[t]);
        return e.unshift(this),
        Ls.apply(null, e)
    }
    ;
    var qs = function(e) {
        function t(t, i) {
            this._s = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._s.o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._s.i++,
            this._fn(this._s)
        }
        ,
        t
    }(Wi)
      , Ns = function(e) {
        function t(t) {
            this._sources = t,
            e.call(this)
        }
        function i(e, t) {
            if (!e.disposable.isDisposed) {
                if (e.i === e.sources.length)
                    return e.o.onCompleted();
                var i = e.sources[e.i];
                Ye(i) && (i = cs(i));
                var s = new _i;
                e.subscription.setDisposable(s),
                s.setDisposable(i.subscribe(new qs(e,t)))
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , s = li(Ue)
              , n = {
                o: e,
                i: 0,
                subscription: t,
                disposable: s,
                sources: this._sources
            }
              , o = Ai.scheduleRecursive(n, i);
            return new fi([t, s, o])
        }
        ,
        t
    }(Ki)
      , Ls = Qi.concat = function() {
        var e;
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            e = new Array(arguments.length);
            for (var t = 0, i = arguments.length; i > t; t++)
                e[t] = arguments[t]
        }
        return new Ns(e)
    }
    ;
    Bi.concatAll = function() {
        return this.merge(1)
    }
    ;
    var zs = function(e) {
        function t(t, i) {
            this.source = t,
            this.maxConcurrent = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new oi;
            return t.add(this.source.subscribe(new Us(e,this.maxConcurrent,t))),
            t
        }
        ,
        t
    }(Ki)
      , Us = function(e) {
        function t(t, i, s) {
            this.o = t,
            this.max = i,
            this.g = s,
            this.done = !1,
            this.q = [],
            this.activeCount = 0,
            e.call(this)
        }
        function i(t, i) {
            this.parent = t,
            this.sad = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.handleSubscribe = function(e) {
            var t = new _i;
            this.g.add(t),
            Ye(e) && (e = cs(e)),
            t.setDisposable(e.subscribe(new i(this,t)))
        }
        ,
        t.prototype.next = function(e) {
            this.activeCount < this.max ? (this.activeCount++,
            this.handleSubscribe(e)) : this.q.push(e)
        }
        ,
        t.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this.done = !0,
            0 === this.activeCount && this.o.onCompleted()
        }
        ,
        ei(i, e),
        i.prototype.next = function(e) {
            this.parent.o.onNext(e)
        }
        ,
        i.prototype.error = function(e) {
            this.parent.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this.parent.g.remove(this.sad),
            this.parent.q.length > 0 ? this.parent.handleSubscribe(this.parent.q.shift()) : (this.parent.activeCount--,
            this.parent.done && 0 === this.parent.activeCount && this.parent.o.onCompleted())
        }
        ,
        t
    }(Wi);
    Bi.merge = function(e) {
        return "number" != typeof e ? Hs(this, e) : new zs(this,e)
    }
    ;
    var Hs = Qi.merge = function() {
        var e, t, i = [], s = arguments.length;
        if (arguments[0])
            if (wi(arguments[0]))
                for (e = arguments[0],
                t = 1; s > t; t++)
                    i.push(arguments[t]);
            else
                for (e = Ai,
                t = 0; s > t; t++)
                    i.push(arguments[t]);
        else
            for (e = Ai,
            t = 1; s > t; t++)
                i.push(arguments[t]);
        return Array.isArray(i[0]) && (i = i[0]),
        R(e, i).mergeAll()
    }
      , Bs = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new oi
              , i = new _i;
            return t.add(i),
            i.setDisposable(this.source.subscribe(new Ws(e,t))),
            t
        }
        ,
        t
    }(Ki)
      , Ws = function(e) {
        function t(t, i) {
            this.o = t,
            this.g = i,
            this.done = !1,
            e.call(this)
        }
        function i(t, i) {
            this.parent = t,
            this.sad = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = new _i;
            this.g.add(t),
            Ye(e) && (e = cs(e)),
            t.setDisposable(e.subscribe(new i(this,t)))
        }
        ,
        t.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this.done = !0,
            1 === this.g.length && this.o.onCompleted()
        }
        ,
        ei(i, e),
        i.prototype.next = function(e) {
            this.parent.o.onNext(e)
        }
        ,
        i.prototype.error = function(e) {
            this.parent.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this.parent.g.remove(this.sad),
            this.parent.done && 1 === this.parent.g.length && this.parent.o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.mergeAll = function() {
        return new Bs(this)
    }
    ;
    var Vs = ze.CompositeError = function(e) {
        this.innerErrors = e,
        this.message = "This contains multiple errors. Check the innerErrors",
        Error.call(this)
    }
    ;
    Vs.prototype = Object.create(Error.prototype),
    Vs.prototype.name = "CompositeError";
    var Gs = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new oi
              , i = new _i
              , s = {
                isStopped: !1,
                errors: [],
                o: e
            };
            return t.add(i),
            i.setDisposable(this.source.subscribe(new Ys(t,s))),
            t
        }
        ,
        t
    }(Ki)
      , Ys = function(e) {
        function t(t, i) {
            this._group = t,
            this._state = i,
            e.call(this)
        }
        function i(e, t) {
            0 === t.length ? e.onCompleted() : 1 === t.length ? e.onError(t[0]) : e.onError(new Vs(t))
        }
        function s(t, i, s) {
            this._inner = t,
            this._group = i,
            this._state = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = new _i;
            this._group.add(t),
            Ye(e) && (e = cs(e)),
            t.setDisposable(e.subscribe(new s(t,this._group,this._state)))
        }
        ,
        t.prototype.error = function(e) {
            this._state.errors.push(e),
            this._state.isStopped = !0,
            1 === this._group.length && i(this._state.o, this._state.errors)
        }
        ,
        t.prototype.completed = function() {
            this._state.isStopped = !0,
            1 === this._group.length && i(this._state.o, this._state.errors)
        }
        ,
        ei(s, e),
        s.prototype.next = function(e) {
            this._state.o.onNext(e)
        }
        ,
        s.prototype.error = function(e) {
            this._state.errors.push(e),
            this._group.remove(this._inner),
            this._state.isStopped && 1 === this._group.length && i(this._state.o, this._state.errors)
        }
        ,
        s.prototype.completed = function() {
            this._group.remove(this._inner),
            this._state.isStopped && 1 === this._group.length && i(this._state.o, this._state.errors)
        }
        ,
        t
    }(Wi);
    Qi.mergeDelayError = function() {
        var e;
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            var t = arguments.length;
            e = new Array(t);
            for (var i = 0; t > i; i++)
                e[i] = arguments[i]
        }
        var s = R(null, e);
        return new Gs(s)
    }
    ,
    Bi.onErrorResumeNext = function(e) {
        if (!e)
            throw new Error("Second observable is required");
        return Ks([this, e])
    }
    ;
    var Js = function(e) {
        function t(t) {
            this.sources = t,
            e.call(this)
        }
        function i(e, t) {
            if (e.pos < e.sources.length) {
                var i = e.sources[e.pos++];
                Ye(i) && (i = cs(i));
                var s = new _i;
                e.subscription.setDisposable(s),
                s.setDisposable(i.subscribe(new Qs(e,t)))
            } else
                e.o.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , s = {
                pos: 0,
                subscription: t,
                o: e,
                sources: this.sources
            }
              , n = Ai.scheduleRecursive(s, i);
            return new mi(t,n)
        }
        ,
        t
    }(Ki)
      , Qs = function(e) {
        function t(t, i) {
            this._state = t,
            this._recurse = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._state.o.onNext(e)
        }
        ,
        t.prototype.error = function() {
            this._recurse(this._state)
        }
        ,
        t.prototype.completed = function() {
            this._recurse(this._state)
        }
        ,
        t
    }(Wi)
      , Ks = Qi.onErrorResumeNext = function() {
        var e = [];
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            var t = arguments.length;
            e = new Array(t);
            for (var i = 0; t > i; i++)
                e[i] = arguments[i]
        }
        return new Js(e)
    }
      , Xs = function(e) {
        function t(t, i) {
            this._s = t,
            this._o = Ye(i) ? cs(i) : i,
            this._open = !1,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new _i;
            t.setDisposable(this._s.subscribe(new Zs(e,this))),
            Ye(this._o) && (this._o = cs(this._o));
            var i = new _i;
            return i.setDisposable(this._o.subscribe(new en(e,this,i))),
            new mi(t,i)
        }
        ,
        t
    }(Ki)
      , Zs = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._p._open && this._o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.onCompleted = function() {
            this._p._open && this._o.onCompleted()
        }
        ,
        t
    }(Wi)
      , en = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._p = i,
            this._r = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function() {
            this._p._open = !0,
            this._r.dispose()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.onCompleted = function() {
            this._r.dispose()
        }
        ,
        t
    }(Wi);
    Bi.skipUntil = function(e) {
        return new Xs(this,e)
    }
    ;
    var tn = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        function i(e, t) {
            this.o = e,
            this.inner = t,
            this.stopped = !1,
            this.latest = 0,
            this.hasLatest = !1,
            Wi.call(this)
        }
        function s(e, t) {
            this.parent = e,
            this.id = t,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , s = this.source.subscribe(new i(e,t));
            return new mi(s,t)
        }
        ,
        ei(i, Wi),
        i.prototype.next = function(e) {
            var t = new _i
              , i = ++this.latest;
            this.hasLatest = !0,
            this.inner.setDisposable(t),
            Ye(e) && (e = cs(e)),
            t.setDisposable(e.subscribe(new s(this,i)))
        }
        ,
        i.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this.stopped = !0,
            !this.hasLatest && this.o.onCompleted()
        }
        ,
        ei(s, Wi),
        s.prototype.next = function(e) {
            this.parent.latest === this.id && this.parent.o.onNext(e)
        }
        ,
        s.prototype.error = function(e) {
            this.parent.latest === this.id && this.parent.o.onError(e)
        }
        ,
        s.prototype.completed = function() {
            this.parent.latest === this.id && (this.parent.hasLatest = !1,
            this.parent.stopped && this.parent.o.onCompleted())
        }
        ,
        t
    }(Ki);
    Bi["switch"] = Bi.switchLatest = function() {
        return new tn(this)
    }
    ;
    var sn = function(e) {
        function t(t, i) {
            this.source = t,
            this.other = Ye(i) ? cs(i) : i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return new mi(this.source.subscribe(e),this.other.subscribe(new nn(e)))
        }
        ,
        t
    }(Ki)
      , nn = function(e) {
        function t(t) {
            this._o = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function() {
            this._o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.onCompleted = Ue,
        t
    }(Wi);
    Bi.takeUntil = function(e) {
        return new sn(this,e)
    }
    ;
    var on = function(e) {
        function t(t, i, s) {
            this._s = t,
            this._ss = i,
            this._cb = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            for (var t = this._ss.length, i = {
                hasValue: y(t, F),
                hasValueAll: !1,
                values: new Array(t)
            }, s = this._ss.length, n = new Array(s + 1), o = 0; s > o; o++) {
                var r = this._ss[o]
                  , a = new _i;
                Ye(r) && (r = cs(r)),
                a.setDisposable(r.subscribe(new rn(e,o,i))),
                n[o] = a
            }
            var l = new _i;
            return l.setDisposable(this._s.subscribe(new an(e,this._cb,i))),
            n[s] = l,
            new fi(n)
        }
        ,
        t
    }(Ki)
      , rn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._i = i,
            this._state = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._state.values[this._i] = e,
            this._state.hasValue[this._i] = !0,
            this._state.hasValueAll = this._state.hasValue.every(He)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = Ue,
        t
    }(Wi)
      , an = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._cb = i,
            this._state = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = [e].concat(this._state.values);
            if (this._state.hasValueAll) {
                var i = Ke(this._cb).apply(null, t);
                return i === Qe ? this._o.onError(i.e) : void this._o.onNext(i)
            }
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.withLatestFrom = function() {
        if (0 === arguments.length)
            throw new Error("invalid arguments");
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        var s = Je(t[e - 1]) ? t.pop() : D;
        return Array.isArray(t[0]) && (t = t[0]),
        new on(this,t,s)
    }
    ;
    var ln = function(e) {
        function t(t, i) {
            this._s = t,
            this._cb = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            for (var t = this._s.length, i = new Array(t), s = y(t, F), n = y(t, q), o = 0; t > o; o++) {
                var r = this._s[o]
                  , a = new _i;
                i[o] = a,
                Ye(r) && (r = cs(r)),
                a.setDisposable(r.subscribe(new cn(e,o,this,n,s)))
            }
            return new fi(i)
        }
        ,
        t
    }(Ki)
      , cn = function(e) {
        function t(t, i, s, n, o) {
            this._o = t,
            this._i = i,
            this._p = s,
            this._q = n,
            this._d = o,
            e.call(this)
        }
        function i(e) {
            return e.length > 0
        }
        function s(e) {
            return e.shift()
        }
        function n(e) {
            return function(t, i) {
                return i !== e
            }
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._q[this._i].push(e),
            this._q.every(i)) {
                var t = this._q.map(s)
                  , o = Ke(this._p._cb).apply(null, t);
                if (o === Qe)
                    return this._o.onError(o.e);
                this._o.onNext(o)
            } else
                this._d.filter(n(this._i)).every(He) && this._o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._d[this._i] = !0,
            this._d.every(He) && this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.zip = function() {
        if (0 === arguments.length)
            throw new Error("invalid arguments");
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        var s = Je(t[e - 1]) ? t.pop() : D;
        Array.isArray(t[0]) && (t = t[0]);
        var n = this;
        return t.unshift(n),
        new ln(t,s)
    }
    ,
    Qi.zip = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        Array.isArray(t[0]) && (t = Je(t[1]) ? t[0].concat(t[1]) : t[0]);
        var s = t.shift();
        return s.zip.apply(s, t)
    }
    ;
    var dn = function(e) {
        function t(t, i) {
            this.sources = t,
            this._cb = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            for (var t = this.sources, i = t.length, s = new Array(i), n = {
                q: y(i, q),
                done: y(i, F),
                cb: this._cb,
                o: e
            }, o = 0; i > o; o++)
                !function(e) {
                    var i = t[e]
                      , o = new _i;
                    (bt(i) || gt(i)) && (i = bs(i)),
                    s[e] = o,
                    o.setDisposable(i.subscribe(new un(n,e)))
                }(o);
            return new fi(s)
        }
        ,
        t
    }(Ki)
      , un = function(e) {
        function t(t, i) {
            this._s = t,
            this._i = i,
            e.call(this)
        }
        function i(e) {
            return e.length > 0
        }
        function s(e) {
            return e.shift()
        }
        function n(e) {
            return function(t, i) {
                return i !== e
            }
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._s.q[this._i].push(e),
            this._s.q.every(i)) {
                var t = this._s.q.map(s)
                  , o = Ke(this._s.cb).apply(null, t);
                if (o === Qe)
                    return this._s.o.onError(o.e);
                this._s.o.onNext(o)
            } else
                this._s.done.filter(n(this._i)).every(He) && this._s.o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._s.done[this._i] = !0,
            this._s.done.every(He) && this._s.o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.zipIterable = function() {
        if (0 === arguments.length)
            throw new Error("invalid arguments");
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        var s = Je(t[e - 1]) ? t.pop() : D
          , n = this;
        return t.unshift(n),
        new dn(t,s)
    }
    ,
    Bi.asObservable = function() {
        return new Sr(N(this),this)
    }
    ,
    Bi.bufferWithCount = Bi.bufferCount = function(e, t) {
        return "number" != typeof t && (t = e),
        this.windowWithCount(e, t).flatMap(L).filter(z)
    }
    ;
    var hn = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new _n(e))
        }
        ,
        t
    }(Ki)
      , _n = function(e) {
        function t(t) {
            this._o = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            e.accept(this._o)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.dematerialize = function() {
        return new hn(this)
    }
    ;
    var pn = function(e) {
        function t(t, i, s) {
            this.source = t,
            this.keyFn = i,
            this.comparer = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new mn(e,this.keyFn,this.comparer))
        }
        ,
        t
    }(Ki)
      , mn = function(e) {
        function t(t, i, s) {
            this.o = t,
            this.keyFn = i,
            this.comparer = s,
            this.hasCurrentKey = !1,
            this.currentKey = null,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t, i = e;
            return Je(this.keyFn) && (i = Ke(this.keyFn)(e),
            i === Qe) ? this.o.onError(i.e) : this.hasCurrentKey && (t = Ke(this.comparer)(this.currentKey, i),
            t === Qe) ? this.o.onError(t.e) : void (this.hasCurrentKey && t || (this.hasCurrentKey = !0,
            this.currentKey = i,
            this.o.onNext(e)))
        }
        ,
        t.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this.o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.distinctUntilChanged = function(e, t) {
        return t || (t = We),
        new pn(this,e,t)
    }
    ;
    var fn = function(e) {
        function t(t, i, s, n) {
            this.source = t,
            this._oN = i,
            this._oE = s,
            this._oC = n,
            e.call(this)
        }
        function i(e, t) {
            this.o = e,
            this.t = !t._oN || Je(t._oN) ? Hi(t._oN || Ue, t._oE || Ue, t._oC || Ue) : t._oN,
            this.isStopped = !1,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e,this))
        }
        ,
        ei(i, Wi),
        i.prototype.next = function(e) {
            var t = Ke(this.t.onNext).call(this.t, e);
            t === Qe && this.o.onError(t.e),
            this.o.onNext(e)
        }
        ,
        i.prototype.error = function(e) {
            var t = Ke(this.t.onError).call(this.t, e);
            return t === Qe ? this.o.onError(t.e) : void this.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            var e = Ke(this.t.onCompleted).call(this.t);
            return e === Qe ? this.o.onError(e.e) : void this.o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi["do"] = Bi.tap = Bi.doAction = function(e, t, i) {
        return new fn(this,e,t,i)
    }
    ,
    Bi.doOnNext = Bi.tapOnNext = function(e, t) {
        return this.tap("undefined" != typeof t ? function(i) {
            e.call(t, i)
        }
        : e)
    }
    ,
    Bi.doOnError = Bi.tapOnError = function(e, t) {
        return this.tap(Ue, "undefined" != typeof t ? function(i) {
            e.call(t, i)
        }
        : e)
    }
    ,
    Bi.doOnCompleted = Bi.tapOnCompleted = function(e, t) {
        return this.tap(Ue, null, "undefined" != typeof t ? function() {
            e.call(t)
        }
        : e)
    }
    ;
    var gn = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._fn = vt(i, s, 0),
            e.call(this)
        }
        function i(e, t) {
            this.isDisposed = !1,
            this._s = e,
            this._fn = t
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = Ke(this.source.subscribe).call(this.source, e);
            return t === Qe && (this._fn(),
            n(t.e)),
            new i(t,this._fn)
        }
        ,
        i.prototype.dispose = function() {
            if (!this.isDisposed) {
                var e = Ke(this._s.dispose).call(this._s);
                this._fn(),
                e === Qe && n(e.e)
            }
        }
        ,
        t
    }(Ki);
    Bi["finally"] = function(e, t) {
        return new gn(this,e,t)
    }
    ;
    var bn = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        function i(e) {
            this.o = e,
            this.isStopped = !1
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e))
        }
        ,
        i.prototype.onNext = Ue,
        i.prototype.onError = function(e) {
            this.isStopped || (this.isStopped = !0,
            this.o.onError(e))
        }
        ,
        i.prototype.onCompleted = function() {
            this.isStopped || (this.isStopped = !0,
            this.o.onCompleted())
        }
        ,
        i.prototype.dispose = function() {
            this.isStopped = !0
        }
        ,
        i.prototype.fail = function(e) {
            return this.isStopped ? !1 : (this.isStopped = !0,
            this.observer.onError(e),
            !0)
        }
        ,
        t
    }(Ki);
    Bi.ignoreElements = function() {
        return new bn(this)
    }
    ;
    var vn = function(e) {
        function t(t, i) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new yn(e))
        }
        ,
        t
    }(Ki)
      , yn = function(e) {
        function t(t) {
            this._o = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._o.onNext(Ni(e))
        }
        ,
        t.prototype.error = function(e) {
            this._o.onNext(Li(e)),
            this._o.onCompleted()
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(zi()),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.materialize = function() {
        return new vn(this)
    }
    ,
    Bi.repeat = function(e) {
        return ss(this, e).concat()
    }
    ,
    Bi.retry = function(e) {
        return ss(this, e).catchError()
    }
    ;
    var wn = function(e) {
        function t(e) {
            return {
                isDisposed: !1,
                dispose: function() {
                    this.isDisposed || (this.isDisposed = !0,
                    e.isDisposed = !0)
                }
            }
        }
        function i(t, i) {
            this.source = t,
            this._notifier = i,
            e.call(this)
        }
        return ei(i, e),
        i.prototype.subscribeCore = function(e) {
            var i, s = new Pr, n = new Pr, o = this._notifier(s), r = o.subscribe(n), a = this.source["@@iterator"](), l = {
                isDisposed: !1
            }, c = new pi, d = $i.scheduleRecursive(null, function(t, o) {
                if (!l.isDisposed) {
                    var r = a.next();
                    if (r.done)
                        return void (i ? e.onError(i) : e.onCompleted());
                    var d = r.value;
                    Ye(d) && (d = cs(d));
                    var u = new _i
                      , h = new _i;
                    c.setDisposable(new mi(h,u)),
                    u.setDisposable(d.subscribe(function(t) {
                        e.onNext(t)
                    }, function(t) {
                        h.setDisposable(n.subscribe(o, function(t) {
                            e.onError(t)
                        }, function() {
                            e.onCompleted()
                        })),
                        s.onNext(t),
                        u.dispose()
                    }, function() {
                        e.onCompleted()
                    }))
                }
            });
            return new fi([r, c, d, t(l)])
        }
        ,
        i
    }(Ki);
    Bi.retryWhen = function(e) {
        return new wn(U(this),e)
    }
    ;
    var Cn = function(e) {
        function t(e) {
            return {
                isDisposed: !1,
                dispose: function() {
                    this.isDisposed || (this.isDisposed = !0,
                    e.isDisposed = !0)
                }
            }
        }
        function i(t, i) {
            this.source = t,
            this._notifier = i,
            e.call(this)
        }
        return ei(i, e),
        i.prototype.subscribeCore = function(e) {
            var i, s = new Pr, n = new Pr, o = this._notifier(s), r = o.subscribe(n), a = this.source["@@iterator"](), l = {
                isDisposed: !1
            }, c = new pi, d = $i.scheduleRecursive(null, function(t, o) {
                if (!l.isDisposed) {
                    var r = a.next();
                    if (r.done)
                        return void (i ? e.onError(i) : e.onCompleted());
                    var d = r.value;
                    Ye(d) && (d = cs(d));
                    var u = new _i
                      , h = new _i;
                    c.setDisposable(new mi(h,u)),
                    u.setDisposable(d.subscribe(function(t) {
                        e.onNext(t)
                    }, function(t) {
                        e.onError(t)
                    }, function() {
                        h.setDisposable(n.subscribe(o, function(t) {
                            e.onError(t)
                        }, function() {
                            e.onCompleted()
                        })),
                        s.onNext(null),
                        u.dispose()
                    }))
                }
            });
            return new fi([r, c, d, t(l)])
        }
        ,
        i
    }(Ki);
    Bi.repeatWhen = function(e) {
        return new Cn(U(this),e)
    }
    ;
    var kn = function(e) {
        function t(t, i, s, n) {
            this.source = t,
            this.accumulator = i,
            this.hasSeed = s,
            this.seed = n,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new xn(e,this))
        }
        ,
        t
    }(Ki)
      , xn = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            this._fn = i.accumulator,
            this._hs = i.hasSeed,
            this._s = i.seed,
            this._ha = !1,
            this._a = null,
            this._hv = !1,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            return !this._hv && (this._hv = !0),
            this._ha ? this._a = Ke(this._fn)(this._a, e, this._i, this._p) : (this._a = this._hs ? Ke(this._fn)(this._s, e, this._i, this._p) : e,
            this._ha = !0),
            this._a === Qe ? this._o.onError(this._a.e) : (this._o.onNext(this._a),
            void this._i++)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            !this._hv && this._hs && this._o.onNext(this._s),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.scan = function() {
        var e, t = !1, i = arguments[0];
        return 2 === arguments.length && (t = !0,
        e = arguments[1]),
        new kn(this,i,t,e)
    }
    ;
    var Mn = function(e) {
        function t(t, i) {
            this.source = t,
            this._c = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new An(e,this._c))
        }
        ,
        t
    }(Ki)
      , An = function(e) {
        function t(t, i) {
            this._o = t,
            this._c = i,
            this._q = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._q.push(e),
            this._q.length > this._c && this._o.onNext(this._q.shift())
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.skipLast = function(e) {
        if (0 > e)
            throw new ut;
        return new Mn(this,e)
    }
    ,
    Bi.startWith = function() {
        var e, t = 0;
        arguments.length && wi(arguments[0]) ? (e = arguments[0],
        t = 1) : e = Ai;
        for (var i = [], s = t, n = arguments.length; n > s; s++)
            i.push(arguments[s]);
        return Ls.apply(null, [ys(i, e), this])
    }
    ;
    var On = function(e) {
        function t(t, i) {
            this._o = t,
            this._c = i,
            this._q = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._q.push(e),
            this._q.length > this._c && this._q.shift()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            for (; this._q.length > 0; )
                this._o.onNext(this._q.shift());
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.takeLast = function(e) {
        if (0 > e)
            throw new ut;
        var t = this;
        return new Sr(function(i) {
            return t.subscribe(new On(i,e))
        }
        ,t)
    }
    ;
    var $n = function(e) {
        function t(t, i) {
            this._o = t,
            this._c = i,
            this._q = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._q.push(e),
            this._q.length > this._c && this._q.shift()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._q),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.takeLastBuffer = function(e) {
        if (0 > e)
            throw new ut;
        var t = this;
        return new Sr(function(i) {
            return t.subscribe(new $n(i,e))
        }
        ,t)
    }
    ,
    Bi.windowWithCount = Bi.windowCount = function(e, t) {
        var i = this;
        if (+e || (e = 0),
        Math.abs(e) === 1 / 0 && (e = 0),
        0 >= e)
            throw new ut;
        if (null == t && (t = e),
        +t || (t = 0),
        Math.abs(t) === 1 / 0 && (t = 0),
        0 >= t)
            throw new ut;
        return new Sr(function(s) {
            function n() {
                var e = new Pr;
                l.push(e),
                s.onNext(ii(e, r))
            }
            var o = new _i
              , r = new gi(o)
              , a = 0
              , l = [];
            return n(),
            o.setDisposable(i.subscribe(function(i) {
                for (var s = 0, o = l.length; o > s; s++)
                    l[s].onNext(i);
                var r = a - e + 1;
                r >= 0 && r % t === 0 && l.shift().onCompleted(),
                ++a % t === 0 && n()
            }, function(e) {
                for (; l.length > 0; )
                    l.shift().onError(e);
                s.onError(e)
            }, function() {
                for (; l.length > 0; )
                    l.shift().onCompleted();
                s.onCompleted()
            })),
            r
        }
        ,i)
    }
    ,
    Bi.flatMapConcat = Bi.concatMap = function(e, t, i) {
        return new Xi(this,e,t,i).merge(1)
    }
    ,
    Bi.concatMapObserver = Bi.selectConcatObserver = function(e, t, i, s) {
        var n = this
          , o = vt(e, s, 2)
          , r = vt(t, s, 1)
          , a = vt(i, s, 0);
        return new Sr(function(e) {
            var t = 0;
            return n.subscribe(function(i) {
                var s;
                try {
                    s = o(i, t++)
                } catch (n) {
                    return void e.onError(n)
                }
                Ye(s) && (s = cs(s)),
                e.onNext(s)
            }, function(t) {
                var i;
                try {
                    i = r(t)
                } catch (s) {
                    return void e.onError(s)
                }
                Ye(i) && (i = cs(i)),
                e.onNext(i),
                e.onCompleted()
            }, function() {
                var t;
                try {
                    t = a()
                } catch (i) {
                    return void e.onError(i)
                }
                Ye(t) && (t = cs(t)),
                e.onNext(t),
                e.onCompleted()
            })
        }
        ,this).concatAll()
    }
    ;
    var Tn = function(e) {
        function t(t, i) {
            this._o = t,
            this._d = i,
            this._f = !1,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._f = !0,
            this._o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            !this._f && this._o.onNext(this._d),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.defaultIfEmpty = function(t) {
        var i = this;
        return t === e && (t = null),
        new Sr(function(e) {
            return i.subscribe(new Tn(e,t))
        }
        ,i)
    }
    ,
    B.prototype.push = function(e) {
        var t = -1 === H(this.set, e, this.comparer);
        return t && this.set.push(e),
        t
    }
    ;
    var Sn = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._keyFn = i,
            this._cmpFn = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new En(e,this._keyFn,this._cmpFn))
        }
        ,
        t
    }(Ki)
      , En = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._keyFn = i,
            this._h = new B(s),
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = e;
            return Je(this._keyFn) && (t = Ke(this._keyFn)(e),
            t === Qe) ? this._o.onError(t.e) : void (this._h.push(t) && this._o.onNext(e))
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.distinct = function(e, t) {
        return t || (t = We),
        new Sn(this,e,t)
    }
    ,
    Bi.groupBy = function(e, t) {
        return this.groupByUntil(e, t, xs)
    }
    ,
    Bi.groupByUntil = function(t, i, s) {
        var n = this;
        return new Sr(function(o) {
            var r = new Go
              , a = new oi
              , l = new gi(a)
              , c = function(e) {
                return function(t) {
                    t.onError(e)
                }
            };
            return a.add(n.subscribe(function(n) {
                var d = Ke(t)(n);
                if (d === Qe)
                    return r.forEach(c(d.e)),
                    o.onError(d.e);
                var u = !1
                  , h = r.get(d);
                if (h === e && (h = new Pr,
                r.set(d, h),
                u = !0),
                u) {
                    var _ = new Rr(d,h,l)
                      , p = new Rr(d,h)
                      , m = Ke(s)(p);
                    if (m === Qe)
                        return r.forEach(c(m.e)),
                        o.onError(m.e);
                    o.onNext(_);
                    var f = new _i;
                    a.add(f),
                    f.setDisposable(m.take(1).subscribe(Ue, function(e) {
                        r.forEach(c(e)),
                        o.onError(e)
                    }, function() {
                        r["delete"](d) && h.onCompleted(),
                        a.remove(f)
                    }))
                }
                var g = n;
                return Je(i) && (g = Ke(i)(n),
                g === Qe) ? (r.forEach(c(g.e)),
                o.onError(g.e)) : void h.onNext(g)
            }, function(e) {
                r.forEach(c(e)),
                o.onError(e)
            }, function() {
                r.forEach(function(e) {
                    e.onCompleted()
                }),
                o.onCompleted()
            })),
            l
        }
        ,n)
    }
    ;
    var jn = function(e) {
        function t(t, i, s) {
            this.source = t,
            this.selector = vt(i, s, 3),
            e.call(this)
        }
        function i(e, t) {
            return function(i, s, n) {
                return e.call(this, t.selector(i, s, n), s, n)
            }
        }
        function s(e, t, i) {
            this.o = e,
            this.selector = t,
            this.source = i,
            this.i = 0,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.internalMap = function(e, s) {
            return new t(this.source,i(e, this),s)
        }
        ,
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new s(e,this.selector,this))
        }
        ,
        ei(s, Wi),
        s.prototype.next = function(e) {
            var t = Ke(this.selector)(e, this.i++, this.source);
            return t === Qe ? this.o.onError(t.e) : void this.o.onNext(t)
        }
        ,
        s.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        s.prototype.completed = function() {
            this.o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi.map = Bi.select = function(e, t) {
        var i = "function" == typeof e ? e : function() {
            return e
        }
        ;
        return this instanceof jn ? this.internalMap(i, t) : new jn(this,i,t)
    }
    ,
    Bi.pluck = function() {
        var e = arguments.length
          , t = new Array(e);
        if (0 === e)
            throw new Error("List of properties cannot be empty.");
        for (var i = 0; e > i; i++)
            t[i] = arguments[i];
        return this.map(W(t, e))
    }
    ,
    Bi.flatMap = Bi.selectMany = Bi.mergeMap = function(e, t, i) {
        return new Xi(this,e,t,i).mergeAll()
    }
    ,
    Bi.flatMapObserver = Bi.selectManyObserver = function(e, t, i, s) {
        var n = this;
        return new Sr(function(o) {
            var r = 0;
            return n.subscribe(function(t) {
                var i;
                try {
                    i = e.call(s, t, r++)
                } catch (n) {
                    return void o.onError(n)
                }
                Ye(i) && (i = cs(i)),
                o.onNext(i)
            }, function(e) {
                var i;
                try {
                    i = t.call(s, e)
                } catch (n) {
                    return void o.onError(n)
                }
                Ye(i) && (i = cs(i)),
                o.onNext(i),
                o.onCompleted()
            }, function() {
                var e;
                try {
                    e = i.call(s)
                } catch (t) {
                    return void o.onError(t)
                }
                Ye(e) && (e = cs(e)),
                o.onNext(e),
                o.onCompleted()
            })
        }
        ,n).mergeAll()
    }
    ,
    Bi.flatMapLatest = Bi.switchMap = function(e, t, i) {
        return new Xi(this,e,t,i).switchLatest()
    }
    ;
    var Rn = function(e) {
        function t(t, i) {
            this.source = t,
            this._count = i,
            e.call(this)
        }
        function i(e, t) {
            this._o = e,
            this._r = t,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e,this._count))
        }
        ,
        ei(i, Wi),
        i.prototype.next = function(e) {
            this._r <= 0 ? this._o.onNext(e) : this._r--
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi.skip = function(e) {
        if (0 > e)
            throw new ut;
        return new Rn(this,e)
    }
    ;
    var Pn = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new In(e,this))
        }
        ,
        t
    }(Ki)
      , In = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            this._i = 0,
            this._r = !1,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (!this._r) {
                var t = Ke(this._p._fn)(e, this._i++, this._p);
                if (t === Qe)
                    return this._o.onError(t.e);
                this._r = !t
            }
            this._r && this._o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.skipWhile = function(e, t) {
        var i = vt(e, t, 3);
        return new Pn(this,i)
    }
    ;
    var Fn = function(e) {
        function t(t, i) {
            this.source = t,
            this._count = i,
            e.call(this)
        }
        function i(e, t) {
            this._o = e,
            this._c = t,
            this._r = t,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new i(e,this._count))
        }
        ,
        ei(i, Wi),
        i.prototype.next = function(e) {
            this._r-- > 0 && (this._o.onNext(e),
            this._r <= 0 && this._o.onCompleted())
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi.take = function(e, t) {
        if (0 > e)
            throw new ut;
        return 0 === e ? ms(t) : new Fn(this,e)
    }
    ;
    var Dn = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new qn(e,this))
        }
        ,
        t
    }(Ki)
      , qn = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            this._i = 0,
            this._r = !0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            return this._r && (this._r = Ke(this._p._fn)(e, this._i++, this._p),
            this._r === Qe) ? this._o.onError(this._r.e) : void (this._r ? this._o.onNext(e) : this._o.onCompleted())
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.takeWhile = function(e, t) {
        var i = vt(e, t, 3);
        return new Dn(this,i)
    }
    ;
    var Nn = function(e) {
        function t(t, i, s) {
            this.source = t,
            this.predicate = vt(i, s, 3),
            e.call(this)
        }
        function i(e, t) {
            return function(i, s, n) {
                return t.predicate(i, s, n) && e.call(this, i, s, n)
            }
        }
        function s(e, t, i) {
            this.o = e,
            this.predicate = t,
            this.source = i,
            this.i = 0,
            Wi.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new s(e,this.predicate,this))
        }
        ,
        t.prototype.internalFilter = function(e, s) {
            return new t(this.source,i(e, this),s)
        }
        ,
        ei(s, Wi),
        s.prototype.next = function(e) {
            var t = Ke(this.predicate)(e, this.i++, this.source);
            return t === Qe ? this.o.onError(t.e) : void (t && this.o.onNext(e))
        }
        ,
        s.prototype.error = function(e) {
            this.o.onError(e)
        }
        ,
        s.prototype.completed = function() {
            this.o.onCompleted()
        }
        ,
        t
    }(Ki);
    Bi.filter = Bi.where = function(e, t) {
        return this instanceof Nn ? this.internalFilter(e, t) : new Nn(this,e,t)
    }
    ;
    var Ln = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._k = i,
            this._c = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new zn(e,this._k,this._c))
        }
        ,
        t
    }(Ki)
      , zn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._k = i,
            this._c = s,
            this._v = null,
            this._hv = !1,
            this._l = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._k)(e);
            if (t === Qe)
                return this._o.onError(t.e);
            var i = 0;
            if (this._hv) {
                if (i = Ke(this._c)(t, this._v),
                i === Qe)
                    return this._o.onError(i.e)
            } else
                this._hv = !0,
                this._v = t;
            i > 0 && (this._v = t,
            this._l = []),
            i >= 0 && this._l.push(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._l),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi)
      , Un = function(e) {
        function t(t, i, s, n) {
            this.source = t,
            this.accumulator = i,
            this.hasSeed = s,
            this.seed = n,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Hn(e,this))
        }
        ,
        t
    }(Ki)
      , Hn = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            this._fn = i.accumulator,
            this._hs = i.hasSeed,
            this._s = i.seed,
            this._ha = !1,
            this._a = null,
            this._hv = !1,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            return !this._hv && (this._hv = !0),
            this._ha ? this._a = Ke(this._fn)(this._a, e, this._i, this._p) : (this._a = this._hs ? Ke(this._fn)(this._s, e, this._i, this._p) : e,
            this._ha = !0),
            this._a === Qe ? this._o.onError(this._a.e) : void this._i++
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._hv && this._o.onNext(this._a),
            !this._hv && this._hs && this._o.onNext(this._s),
            !this._hv && !this._hs && this._o.onError(new ct),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.reduce = function() {
        var e, t = !1, i = arguments[0];
        return 2 === arguments.length && (t = !0,
        e = arguments[1]),
        new Un(this,i,t,e)
    }
    ;
    var Bn = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Wn(e,this._fn,this.source))
        }
        ,
        t
    }(Ki)
      , Wn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._fn = i,
            this._s = s,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._fn)(e, this._i++, this._s);
            return t === Qe ? this._o.onError(t.e) : void (Boolean(t) && (this._o.onNext(!0),
            this._o.onCompleted()))
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(!1),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.some = function(e, t) {
        var i = vt(e, t, 3);
        return new Bn(this,i)
    }
    ;
    var Vn = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Gn(e))
        }
        ,
        t
    }(Ki)
      , Gn = function(e) {
        function t(t) {
            this._o = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function() {
            this._o.onNext(!1),
            this._o.onCompleted()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(!0),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.isEmpty = function() {
        return new Vn(this)
    }
    ;
    var Yn = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Jn(e,this._fn,this.source))
        }
        ,
        t
    }(Ki)
      , Jn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._fn = i,
            this._s = s,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._fn)(e, this._i++, this._s);
            return t === Qe ? this._o.onError(t.e) : void (Boolean(t) || (this._o.onNext(!1),
            this._o.onCompleted()))
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(!0),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.every = function(e, t) {
        var i = vt(e, t, 3);
        return new Yn(this,i)
    }
    ;
    var Qn = function(e) {
        function t(t, i, s) {
            var n = +s || 0;
            Math.abs(n) === 1 / 0 && (n = 0),
            this.source = t,
            this._elem = i,
            this._n = n,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._n < 0 ? (e.onNext(!1),
            e.onCompleted(),
            ci) : this.source.subscribe(new Kn(e,this._elem,this._n))
        }
        ,
        t
    }(Ki)
      , Kn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._elem = i,
            this._n = s,
            this._i = 0,
            e.call(this)
        }
        function i(e, t) {
            return 0 === e && 0 === t || e === t || isNaN(e) && isNaN(t)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._i++ >= this._n && i(e, this._elem) && (this._o.onNext(!0),
            this._o.onCompleted())
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(!1),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.includes = function(e, t) {
        return new Qn(this,e,t)
    }
    ;
    var Xn = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new Zn(e,this._fn,this.source))
        }
        ,
        t
    }(Ki)
      , Zn = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._fn = i,
            this._s = s,
            this._i = 0,
            this._c = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._fn) {
                var t = Ke(this._fn)(e, this._i++, this._s);
                if (t === Qe)
                    return this._o.onError(t.e);
                Boolean(t) && this._c++
            } else
                this._c++
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._c),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.count = function(e, t) {
        var i = vt(e, t, 3);
        return new Xn(this,i)
    }
    ;
    var eo = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._e = i,
            this._n = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._n < 0 ? (e.onNext(-1),
            e.onCompleted(),
            ci) : this.source.subscribe(new to(e,this._e,this._n))
        }
        ,
        t
    }(Ki)
      , to = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._e = i,
            this._n = s,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._i >= this._n && e === this._e && (this._o.onNext(this._i),
            this._o.onCompleted()),
            this._i++
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(-1),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.indexOf = function(e, t) {
        var i = +t || 0;
        return Math.abs(i) === 1 / 0 && (i = 0),
        new eo(this,e,i)
    }
    ;
    var io = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new so(e,this._fn,this.source))
        }
        ,
        t
    }(Ki)
      , so = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._fn = i,
            this._s = s,
            this._i = 0,
            this._c = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._fn) {
                var t = Ke(this._fn)(e, this._i++, this._s);
                if (t === Qe)
                    return this._o.onError(t.e);
                this._c += t
            } else
                this._c += e
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._c),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.sum = function(e, t) {
        var i = vt(e, t, 3);
        return new io(this,i)
    }
    ,
    Bi.minBy = function(e, t) {
        return t || (t = Ve),
        new Ln(this,e,function(e, i) {
            return -1 * t(e, i)
        }
        )
    }
    ,
    Bi.min = function(e) {
        return this.minBy(He, e).map(V)
    }
    ,
    Bi.maxBy = function(e, t) {
        return t || (t = Ve),
        new Ln(this,e,t)
    }
    ,
    Bi.max = function(e) {
        return this.maxBy(He, e).map(V)
    }
    ;
    var no = function(e) {
        function t(t, i) {
            this.source = t,
            this._fn = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new oo(e,this._fn,this.source))
        }
        ,
        t
    }(Ki)
      , oo = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._fn = i,
            this._s = s,
            this._c = 0,
            this._t = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (this._fn) {
                var t = Ke(this._fn)(e, this._c++, this._s);
                if (t === Qe)
                    return this._o.onError(t.e);
                this._t += t
            } else
                this._c++,
                this._t += e
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            return 0 === this._c ? this._o.onError(new ct) : (this._o.onNext(this._t / this._c),
            void this._o.onCompleted())
        }
        ,
        t
    }(Wi);
    Bi.average = function(e, t) {
        var i, s = this;
        return Je(e) && (i = vt(e, t, 3)),
        new no(s,i)
    }
    ,
    Bi.sequenceEqual = function(e, t) {
        var i = this;
        return t || (t = We),
        new Sr(function(s) {
            var n = !1
              , o = !1
              , r = []
              , a = []
              , l = i.subscribe(function(e) {
                if (a.length > 0) {
                    var i = a.shift()
                      , n = Ke(t)(i, e);
                    if (n === Qe)
                        return s.onError(n.e);
                    n || (s.onNext(!1),
                    s.onCompleted())
                } else
                    o ? (s.onNext(!1),
                    s.onCompleted()) : r.push(e)
            }, function(e) {
                s.onError(e)
            }, function() {
                n = !0,
                0 === r.length && (a.length > 0 ? (s.onNext(!1),
                s.onCompleted()) : o && (s.onNext(!0),
                s.onCompleted()))
            });
            (bt(e) || gt(e)) && (e = bs(e)),
            Ye(e) && (e = cs(e));
            var c = e.subscribe(function(e) {
                if (r.length > 0) {
                    var i = r.shift()
                      , o = Ke(t)(i, e);
                    if (o === Qe)
                        return s.onError(o.e);
                    o || (s.onNext(!1),
                    s.onCompleted())
                } else
                    n ? (s.onNext(!1),
                    s.onCompleted()) : a.push(e)
            }, function(e) {
                s.onError(e)
            }, function() {
                o = !0,
                0 === a.length && (r.length > 0 ? (s.onNext(!1),
                s.onCompleted()) : n && (s.onNext(!0),
                s.onCompleted()))
            });
            return new mi(l,c)
        }
        ,i)
    }
    ;
    var ro = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._i = i,
            this._d = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new ao(e,this._i,this._d))
        }
        ,
        t
    }(Ki)
      , ao = function(t) {
        function i(e, i, s) {
            this._o = e,
            this._i = i,
            this._d = s,
            t.call(this)
        }
        return ei(i, t),
        i.prototype.next = function(e) {
            0 === this._i-- && (this._o.onNext(e),
            this._o.onCompleted())
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._d === e ? this._o.onError(new ut) : (this._o.onNext(this._d),
            this._o.onCompleted())
        }
        ,
        i
    }(Wi);
    Bi.elementAt = function(e, t) {
        if (0 > e)
            throw new ut;
        return new ro(this,e,t)
    }
    ;
    var lo = function(t) {
        function i(e, i, s) {
            this._o = e,
            this._obj = i,
            this._s = s,
            this._i = 0,
            this._hv = !1,
            this._v = null,
            t.call(this)
        }
        return ei(i, t),
        i.prototype.next = function(e) {
            var t = !1;
            if (this._obj.predicate) {
                var i = Ke(this._obj.predicate)(e, this._i++, this._s);
                if (i === Qe)
                    return this._o.onError(i.e);
                Boolean(i) && (t = !0)
            } else
                this._obj.predicate || (t = !0);
            if (t) {
                if (this._hv)
                    return this._o.onError(new Error("Sequence contains more than one matching element"));
                this._hv = !0,
                this._v = e
            }
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._hv ? (this._o.onNext(this._v),
            this._o.onCompleted()) : this._obj.defaultValue === e ? this._o.onError(new ct) : (this._o.onNext(this._obj.defaultValue),
            this._o.onCompleted())
        }
        ,
        i
    }(Wi);
    Bi.single = function(e, t) {
        var i = {}
          , s = this;
        if (i = "object" == typeof arguments[0] ? arguments[0] : {
            predicate: arguments[0],
            thisArg: arguments[1],
            defaultValue: arguments[2]
        },
        Je(i.predicate)) {
            var n = i.predicate;
            i.predicate = vt(n, i.thisArg, 3)
        }
        return new Sr(function(e) {
            return s.subscribe(new lo(e,i,s))
        }
        ,s)
    }
    ;
    var co = function(e) {
        function t(t, i) {
            this.source = t,
            this._obj = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new uo(e,this._obj,this.source))
        }
        ,
        t
    }(Ki)
      , uo = function(t) {
        function i(e, i, s) {
            this._o = e,
            this._obj = i,
            this._s = s,
            this._i = 0,
            t.call(this)
        }
        return ei(i, t),
        i.prototype.next = function(e) {
            if (this._obj.predicate) {
                var t = Ke(this._obj.predicate)(e, this._i++, this._s);
                if (t === Qe)
                    return this._o.onError(t.e);
                Boolean(t) && (this._o.onNext(e),
                this._o.onCompleted())
            } else
                this._obj.predicate || (this._o.onNext(e),
                this._o.onCompleted())
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._obj.defaultValue === e ? this._o.onError(new ct) : (this._o.onNext(this._obj.defaultValue),
            this._o.onCompleted())
        }
        ,
        i
    }(Wi);
    Bi.first = function() {
        var e = {};
        if (e = "object" == typeof arguments[0] ? arguments[0] : {
            predicate: arguments[0],
            thisArg: arguments[1],
            defaultValue: arguments[2]
        },
        Je(e.predicate)) {
            var t = e.predicate;
            e.predicate = vt(t, e.thisArg, 3)
        }
        return new co(this,e)
    }
    ;
    var ho = function(e) {
        function t(t, i) {
            this.source = t,
            this._obj = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new _o(e,this._obj,this.source))
        }
        ,
        t
    }(Ki)
      , _o = function(t) {
        function i(e, i, s) {
            this._o = e,
            this._obj = i,
            this._s = s,
            this._i = 0,
            this._hv = !1,
            this._v = null,
            t.call(this)
        }
        return ei(i, t),
        i.prototype.next = function(e) {
            var t = !1;
            if (this._obj.predicate) {
                var i = Ke(this._obj.predicate)(e, this._i++, this._s);
                if (i === Qe)
                    return this._o.onError(i.e);
                Boolean(i) && (t = !0)
            } else
                this._obj.predicate || (t = !0);
            t && (this._hv = !0,
            this._v = e)
        }
        ,
        i.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._hv ? (this._o.onNext(this._v),
            this._o.onCompleted()) : this._obj.defaultValue === e ? this._o.onError(new ct) : (this._o.onNext(this._obj.defaultValue),
            this._o.onCompleted())
        }
        ,
        i
    }(Wi);
    Bi.last = function() {
        var e = {};
        if (e = "object" == typeof arguments[0] ? arguments[0] : {
            predicate: arguments[0],
            thisArg: arguments[1],
            defaultValue: arguments[2]
        },
        Je(e.predicate)) {
            var t = e.predicate;
            e.predicate = vt(t, e.thisArg, 3)
        }
        return new ho(this,e)
    }
    ;
    var po = function(e) {
        function t(t, i, s, n) {
            this._o = t,
            this._s = i,
            this._cb = s,
            this._y = n,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._cb)(e, this._i, this._s);
            return t === Qe ? this._o.onError(t.e) : void (t ? (this._o.onNext(this._y ? this._i : e),
            this._o.onCompleted()) : this._i++)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._y && this._o.onNext(-1),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.find = function(e, t) {
        return G(this, e, t, !1)
    }
    ,
    Bi.findIndex = function(e, t) {
        return G(this, e, t, !0)
    }
    ;
    var mo = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new fo(e))
        }
        ,
        t
    }(Ki)
      , fo = function(e) {
        function t(t) {
            this._o = t,
            this._s = new Le.Set,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._s.add(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._s),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.toSet = function() {
        if ("undefined" == typeof Le.Set)
            throw new TypeError;
        return new mo(this)
    }
    ;
    var go = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._k = i,
            this._e = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new bo(e,this._k,this._e))
        }
        ,
        t
    }(Ki)
      , bo = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._k = i,
            this._e = s,
            this._m = new Le.Map,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._k)(e);
            if (t === Qe)
                return this._o.onError(t.e);
            var i = e;
            return this._e && (i = Ke(this._e)(e),
            i === Qe) ? this._o.onError(i.e) : void this._m.set(t, i)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onNext(this._m),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.toMap = function(e, t) {
        if ("undefined" == typeof Le.Map)
            throw new TypeError;
        return new go(this,e,t)
    }
    ;
    var vo = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._b = i,
            this._e = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new yo(e,this._b,this._e))
        }
        ,
        t
    }(Ki)
      , yo = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._b = i,
            this._e = s,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._i >= this._b && (this._e === this._i ? this._o.onCompleted() : this._o.onNext(e)),
            this._i++
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.slice = function(e, t) {
        var i = e || 0;
        if (0 > i)
            throw new ze.ArgumentOutOfRangeError;
        if ("number" == typeof t && i > t)
            throw new ze.ArgumentOutOfRangeError;
        return new vo(this,i,t)
    }
    ;
    var wo = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._e = i,
            this._n = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._n < 0 ? (e.onNext(-1),
            e.onCompleted(),
            ci) : this.source.subscribe(new Co(e,this._e,this._n))
        }
        ,
        t
    }(Ki)
      , Co = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._e = i,
            this._n = s,
            this._v = 0,
            this._hv = !1,
            this._i = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._i >= this._n && e === this._e && (this._hv = !0,
            this._v = this._i),
            this._i++
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._hv ? this._o.onNext(this._v) : this._o.onNext(-1),
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.lastIndexOf = function(e, t) {
        var i = +t || 0;
        return Math.abs(i) === 1 / 0 && (i = 0),
        new wo(this,e,i)
    }
    ,
    Qi.wrap = function(e) {
        function t() {
            return Qi.spawn.call(this, e.apply(this, arguments))
        }
        return t.__generatorFunction__ = e,
        t
    }
    ;
    var ko = Qi.spawn = function() {
        for (var e = arguments[0], t = this, i = [], s = 1, n = arguments.length; n > s; s++)
            i.push(arguments[s]);
        return new Sr(function(s) {
            function n(t) {
                var i = Ke(e.next).call(e, t);
                return i === Qe ? s.onError(i.e) : void r(i)
            }
            function o(t) {
                var i = Ke(e.next).call(e, t);
                return i === Qe ? s.onError(i.e) : void r(i)
            }
            function r(e) {
                if (e.done)
                    return s.onNext(e.value),
                    void s.onCompleted();
                var i = Y.call(t, e.value)
                  , r = null
                  , l = !1;
                Qi.isObservable(i) ? a.add(i.subscribe(function(e) {
                    l = !0,
                    r = e
                }, o, function() {
                    l && n(r)
                })) : o(new TypeError("type not supported"))
            }
            var a = new oi;
            return Je(e) && (e = e.apply(t, i)),
            e && Je(e.next) ? (n(),
            a) : (s.onNext(e),
            s.onCompleted())
        }
        )
    }
    ;
    Qi.start = function(e, t, i) {
        return xo(e, t, i)()
    }
    ;
    var xo = Qi.toAsync = function(e, t, i) {
        return wi(i) || (i = Ri),
        function() {
            var s = arguments
              , n = new Ir;
            return i.schedule(null, function() {
                var i;
                try {
                    i = e.apply(t, s)
                } catch (o) {
                    return void n.onError(o)
                }
                n.onNext(i),
                n.onCompleted()
            }),
            n.asObservable()
        }
    }
    ;
    Qi.fromCallback = function(e, t, i) {
        return function() {
            "undefined" == typeof t && (t = this);
            for (var s = arguments.length, n = new Array(s), o = 0; s > o; o++)
                n[o] = arguments[o];
            return te(e, t, i, n)
        }
    }
    ,
    Qi.fromNodeCallback = function(e, t, i) {
        return function() {
            "undefined" == typeof t && (t = this);
            for (var s = arguments.length, n = new Array(s), o = 0; s > o; o++)
                n[o] = arguments[o];
            return se(e, t, i, n)
        }
    }
    ,
    re.prototype.dispose = function() {
        this.isDisposed || (this._e.removeEventListener(this._n, this._fn, !1),
        this.isDisposed = !0)
    }
    ,
    ze.config.useNativeEvents = !1;
    var Mo = function(e) {
        function t(t, i, s) {
            this._el = t,
            this._n = i,
            this._fn = s,
            e.call(this)
        }
        function i(e, t) {
            return function() {
                var i = arguments[0];
                return Je(t) && (i = Ke(t).apply(null, arguments),
                i === Qe) ? e.onError(i.e) : void e.onNext(i)
            }
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return ae(this._el, this._n, i(e, this._fn))
        }
        ,
        t
    }(Ki);
    Qi.fromEvent = function(e, t, i) {
        return e.addListener ? Oo(function(i) {
            e.addListener(t, i)
        }, function(i) {
            e.removeListener(t, i)
        }, i) : ze.config.useNativeEvents || "function" != typeof e.on || "function" != typeof e.off ? new Mo(e,t,i).publish().refCount() : Oo(function(i) {
            e.on(t, i)
        }, function(i) {
            e.off(t, i)
        }, i)
    }
    ;
    var Ao = function(e) {
        function t(t, i, s) {
            this._add = t,
            this._del = i,
            this._fn = s,
            e.call(this)
        }
        function i(e, t) {
            return function() {
                var i = arguments[0];
                return Je(t) && (i = Ke(t).apply(null, arguments),
                i === Qe) ? e.onError(i.e) : void e.onNext(i)
            }
        }
        function s(e, t, i) {
            this._del = e,
            this._fn = t,
            this._ret = i,
            this.isDisposed = !1
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = i(e, this._fn)
              , n = this._add(t);
            return new s(this._del,t,n)
        }
        ,
        s.prototype.dispose = function() {
            this.isDisposed || (Je(this._del) && this._del(this._fn, this._ret),
            this.isDisposed = !0)
        }
        ,
        t
    }(Ki)
      , Oo = Qi.fromEventPattern = function(e, t, i) {
        return new Ao(e,t,i).publish().refCount()
    }
    ;
    Qi.startAsync = function(e) {
        var t = Ke(e)();
        return t === Qe ? Ss(t.e) : cs(t)
    }
    ;
    var $o = function(e) {
        function t(t, i) {
            this.source = t,
            this.controller = new Pr,
            this.paused = !0,
            i && i.subscribe ? this.pauser = this.controller.merge(i) : this.pauser = this.controller,
            e.call(this)
        }
        return ei(t, e),
        t.prototype._subscribe = function(e) {
            var t = this.source.publish()
              , i = t.subscribe(e)
              , s = ci
              , n = this.pauser.startWith(!this.paused).distinctUntilChanged().subscribe(function(e) {
                e ? s = t.connect() : (s.dispose(),
                s = ci)
            });
            return new fi([i, s, n])
        }
        ,
        t.prototype.pause = function() {
            this.paused = !0,
            this.controller.onNext(!1)
        }
        ,
        t.prototype.resume = function() {
            this.paused = !1,
            this.controller.onNext(!0)
        }
        ,
        t
    }(Qi);
    Bi.pausable = function(e) {
        return new $o(this,e)
    }
    ;
    var To = function(t) {
        function i(e, i) {
            this.source = e,
            this.controller = new Pr,
            this.paused = !0,
            i && i.subscribe ? this.pauser = this.controller.merge(i) : this.pauser = this.controller,
            t.call(this)
        }
        return ei(i, t),
        i.prototype._subscribe = function(t) {
            function i() {
                for (; n.length > 0; )
                    t.onNext(n.shift())
            }
            var s, n = [], o = le(this.source, this.pauser.startWith(!this.paused).distinctUntilChanged(), function(e, t) {
                return {
                    data: e,
                    shouldFire: t
                }
            }).subscribe(function(o) {
                s !== e && o.shouldFire !== s ? (s = o.shouldFire,
                o.shouldFire && i()) : (s = o.shouldFire,
                o.shouldFire ? t.onNext(o.data) : n.push(o.data))
            }, function(e) {
                i(),
                t.onError(e)
            }, function() {
                i(),
                t.onCompleted()
            });
            return o
        }
        ,
        i.prototype.pause = function() {
            this.paused = !0,
            this.controller.onNext(!1)
        }
        ,
        i.prototype.resume = function() {
            this.paused = !1,
            this.controller.onNext(!0)
        }
        ,
        i
    }(Qi);
    Bi.pausableBuffered = function(e) {
        return new To(this,e)
    }
    ;
    var So = function(e) {
        function t(t, i, s) {
            e.call(this),
            this.subject = new Eo(i,s),
            this.source = t.multicast(this.subject).refCount()
        }
        return ei(t, e),
        t.prototype._subscribe = function(e) {
            return this.source.subscribe(e)
        }
        ,
        t.prototype.request = function(e) {
            return this.subject.request(null == e ? -1 : e)
        }
        ,
        t
    }(Qi)
      , Eo = function(e) {
        function t(t, i) {
            null == t && (t = !0),
            e.call(this),
            this.subject = new Pr,
            this.enableQueue = t,
            this.queue = t ? [] : null,
            this.requestedCount = 0,
            this.requestedDisposable = null,
            this.error = null,
            this.hasFailed = !1,
            this.hasCompleted = !1,
            this.scheduler = i || $i
        }
        return ei(t, e),
        ti(t.prototype, Ui, {
            _subscribe: function(e) {
                return this.subject.subscribe(e)
            },
            onCompleted: function() {
                this.hasCompleted = !0,
                this.enableQueue && 0 !== this.queue.length ? this.queue.push(Ii.createOnCompleted()) : (this.subject.onCompleted(),
                this.disposeCurrentRequest())
            },
            onError: function(e) {
                this.hasFailed = !0,
                this.error = e,
                this.enableQueue && 0 !== this.queue.length ? this.queue.push(Ii.createOnError(e)) : (this.subject.onError(e),
                this.disposeCurrentRequest())
            },
            onNext: function(e) {
                this.requestedCount <= 0 ? this.enableQueue && this.queue.push(Ii.createOnNext(e)) : (0 === this.requestedCount-- && this.disposeCurrentRequest(),
                this.subject.onNext(e))
            },
            _processRequest: function(e) {
                if (this.enableQueue)
                    for (; this.queue.length > 0 && (e > 0 || "N" !== this.queue[0].kind); ) {
                        var t = this.queue.shift();
                        t.accept(this.subject),
                        "N" === t.kind ? e-- : (this.disposeCurrentRequest(),
                        this.queue = [])
                    }
                return e
            },
            request: function(e) {
                this.disposeCurrentRequest();
                var t = this;
                return this.requestedDisposable = this.scheduler.schedule(e, function(e, i) {
                    var s = t._processRequest(i)
                      , n = t.hasCompleted || t.hasFailed;
                    return !n && s > 0 ? (t.requestedCount = s,
                    li(function() {
                        t.requestedCount = 0
                    })) : void 0
                }),
                this.requestedDisposable
            },
            disposeCurrentRequest: function() {
                this.requestedDisposable && (this.requestedDisposable.dispose(),
                this.requestedDisposable = null)
            }
        }),
        t
    }(Qi);
    Bi.controlled = function(e, t) {
        return e && wi(e) && (t = e,
        e = !0),
        null == e && (e = !0),
        new So(this,e,t)
    }
    ;
    var jo = function(e) {
        function t(t) {
            e.call(this),
            this.source = t
        }
        function i(e, t) {
            return t.source.request(1)
        }
        ei(t, e),
        t.prototype._subscribe = function(e) {
            return this.subscription = this.source.subscribe(new s(e,this,this.subscription)),
            new mi(this.subscription,Ri.schedule(this, i))
        }
        ;
        var s = function(e) {
            function t(t, i, s) {
                e.call(this),
                this.observer = t,
                this.observable = i,
                this.cancel = s,
                this.scheduleDisposable = null
            }
            function i(e, t) {
                return t.observable.source.request(1)
            }
            return ei(t, e),
            t.prototype.completed = function() {
                this.observer.onCompleted(),
                this.dispose()
            }
            ,
            t.prototype.error = function(e) {
                this.observer.onError(e),
                this.dispose()
            }
            ,
            t.prototype.next = function(e) {
                this.observer.onNext(e),
                this.scheduleDisposable = Ri.schedule(this, i)
            }
            ,
            t.dispose = function() {
                this.observer = null,
                this.cancel && (this.cancel.dispose(),
                this.cancel = null),
                this.scheduleDisposable && (this.scheduleDisposable.dispose(),
                this.scheduleDisposable = null),
                e.prototype.dispose.call(this)
            }
            ,
            t
        }(Wi);
        return t
    }(Qi);
    So.prototype.stopAndWait = function() {
        return new jo(this)
    }
    ;
    var Ro = function(e) {
        function t(t, i) {
            e.call(this),
            this.source = t,
            this.windowSize = i
        }
        function i(e, t) {
            return t.source.request(t.windowSize)
        }
        ei(t, e),
        t.prototype._subscribe = function(e) {
            return this.subscription = this.source.subscribe(new s(e,this,this.subscription)),
            new mi(this.subscription,Ri.schedule(this, i))
        }
        ;
        var s = function(e) {
            function t(t, i, s) {
                this.observer = t,
                this.observable = i,
                this.cancel = s,
                this.received = 0,
                this.scheduleDisposable = null,
                e.call(this)
            }
            function i(e, t) {
                return t.observable.source.request(t.observable.windowSize)
            }
            return ei(t, e),
            t.prototype.completed = function() {
                this.observer.onCompleted(),
                this.dispose()
            }
            ,
            t.prototype.error = function(e) {
                this.observer.onError(e),
                this.dispose()
            }
            ,
            t.prototype.next = function(e) {
                this.observer.onNext(e),
                this.received = ++this.received % this.observable.windowSize,
                0 === this.received && (this.scheduleDisposable = Ri.schedule(this, i))
            }
            ,
            t.prototype.dispose = function() {
                this.observer = null,
                this.cancel && (this.cancel.dispose(),
                this.cancel = null),
                this.scheduleDisposable && (this.scheduleDisposable.dispose(),
                this.scheduleDisposable = null),
                e.prototype.dispose.call(this)
            }
            ,
            t
        }(Wi);
        return t
    }(Qi);
    So.prototype.windowed = function(e) {
        return new Ro(this,e)
    }
    ,
    Bi.pipe = function(e) {
        function t() {
            i.resume()
        }
        var i = this.pausableBuffered();
        return e.addListener("drain", t),
        i.subscribe(function(t) {
            !e.write(t) && i.pause()
        }, function(t) {
            e.emit("error", t)
        }, function() {
            !e._isStdio && e.end(),
            e.removeListener("drain", t)
        }),
        i.resume(),
        e
    }
    ;
    var Po = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._fn1 = i,
            this._fn2 = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = this.source.multicast(this._fn1());
            return new mi(this._fn2(t).subscribe(e),t.connect())
        }
        ,
        t
    }(Ki);
    Bi.multicast = function(e, t) {
        return Je(e) ? new Po(this,e,t) : new Do(this,e)
    }
    ,
    Bi.publish = function(e) {
        return e && Je(e) ? this.multicast(function() {
            return new Pr
        }, e) : this.multicast(new Pr)
    }
    ,
    Bi.share = function() {
        return this.publish().refCount()
    }
    ,
    Bi.publishLast = function(e) {
        return e && Je(e) ? this.multicast(function() {
            return new Ir
        }, e) : this.multicast(new Ir)
    }
    ,
    Bi.publishValue = function(e, t) {
        return 2 === arguments.length ? this.multicast(function() {
            return new Dr(t)
        }, e) : this.multicast(new Dr(e))
    }
    ,
    Bi.shareValue = function(e) {
        return this.publishValue(e).refCount()
    }
    ,
    Bi.replay = function(e, t, i, s) {
        return e && Je(e) ? this.multicast(function() {
            return new qr(t,i,s)
        }, e) : this.multicast(new qr(t,i,s))
    }
    ,
    Bi.shareReplay = function(e, t, i) {
        return this.replay(null, e, t, i).refCount()
    }
    ;
    var Io = function(e, t) {
        this._s = e,
        this._o = t
    };
    Io.prototype.dispose = function() {
        if (!this._s.isDisposed && null !== this._o) {
            var e = this._s.observers.indexOf(this._o);
            this._s.observers.splice(e, 1),
            this._o = null
        }
    }
    ;
    var Fo = function(e) {
        function t(t) {
            this.source = t,
            this._count = 0,
            this._connectableSubscription = null,
            e.call(this)
        }
        function i(e, t) {
            this._p = e,
            this._s = t,
            this.isDisposed = !1
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = this.source.subscribe(e);
            return 1 === ++this._count && (this._connectableSubscription = this.source.connect()),
            new i(this,t)
        }
        ,
        i.prototype.dispose = function() {
            this.isDisposed || (this.isDisposed = !0,
            this._s.dispose(),
            0 === --this._p._count && this._p._connectableSubscription.dispose())
        }
        ,
        t
    }(Ki)
      , Do = ze.ConnectableObservable = function(e) {
        function t(t, i) {
            this.source = t,
            this._connection = null,
            this._source = t.asObservable(),
            this._subject = i,
            e.call(this)
        }
        function i(e, t) {
            this._p = e,
            this._s = t
        }
        return ei(t, e),
        i.prototype.dispose = function() {
            this._s && (this._s.dispose(),
            this._s = null,
            this._p._connection = null)
        }
        ,
        t.prototype.connect = function() {
            if (!this._connection) {
                if (this._subject.isStopped)
                    return ci;
                var e = this._source.subscribe(this._subject);
                this._connection = new i(this,e)
            }
            return this._connection
        }
        ,
        t.prototype._subscribe = function(e) {
            return this._subject.subscribe(e)
        }
        ,
        t.prototype.refCount = function() {
            return new Fo(this)
        }
        ,
        t
    }(Qi);
    Bi.singleInstance = function() {
        function e() {
            return s || (s = !0,
            t = i["finally"](function() {
                s = !1
            }).publish().refCount()),
            t
        }
        var t, i = this, s = !1;
        return new Sr(function(t) {
            return e().subscribe(t)
        }
        )
    }
    ,
    Bi.join = function(e, t, i, s) {
        var n = this;
        return new Sr(function(o) {
            var r = new oi
              , a = !1
              , l = !1
              , c = 0
              , d = 0
              , u = new Go
              , h = new Go
              , _ = function(e) {
                o.onError(e)
            };
            return r.add(n.subscribe(function(e) {
                var i = c++
                  , n = new _i;
                u.set(i, e),
                r.add(n);
                var l = Ke(t)(e);
                return l === Qe ? o.onError(l.e) : (n.setDisposable(l.take(1).subscribe(Ue, _, function() {
                    u["delete"](i) && 0 === u.size && a && o.onCompleted(),
                    r.remove(n)
                })),
                void h.forEach(function(t) {
                    var i = Ke(s)(e, t);
                    return i === Qe ? o.onError(i.e) : void o.onNext(i)
                }))
            }, _, function() {
                a = !0,
                (l || 0 === u.size) && o.onCompleted()
            })),
            r.add(e.subscribe(function(e) {
                var t = d++
                  , n = new _i;
                h.set(t, e),
                r.add(n);
                var a = Ke(i)(e);
                return a === Qe ? o.onError(a.e) : (n.setDisposable(a.take(1).subscribe(Ue, _, function() {
                    h["delete"](t) && 0 === h.size && l && o.onCompleted(),
                    r.remove(n)
                })),
                void u.forEach(function(t) {
                    var i = Ke(s)(t, e);
                    return i === Qe ? o.onError(i.e) : void o.onNext(i)
                }))
            }, _, function() {
                l = !0,
                (a || 0 === h.size) && o.onCompleted()
            })),
            r
        }
        ,n)
    }
    ,
    Bi.groupJoin = function(e, t, i, s) {
        var n = this;
        return new Sr(function(o) {
            function r(e) {}
            var a = new oi
              , l = new gi(a)
              , c = new Go
              , d = new Go
              , u = 0
              , h = 0
              , r = function(e) {
                return function(t) {
                    t.onError(e)
                }
            };
            return a.add(n.subscribe(function(e) {
                var i = new Pr
                  , n = u++;
                c.set(n, i);
                var h = Ke(s)(e, ii(i, l));
                if (h === Qe)
                    return c.forEach(r(h.e)),
                    o.onError(h.e);
                o.onNext(h),
                d.forEach(function(e) {
                    i.onNext(e)
                });
                var _ = new _i;
                a.add(_);
                var p = Ke(t)(e);
                return p === Qe ? (c.forEach(r(p.e)),
                o.onError(p.e)) : void _.setDisposable(p.take(1).subscribe(Ue, function(e) {
                    c.forEach(r(e)),
                    o.onError(e)
                }, function() {
                    c["delete"](n) && i.onCompleted(),
                    a.remove(_)
                }))
            }, function(e) {
                c.forEach(r(e)),
                o.onError(e)
            }, function() {
                o.onCompleted()
            })),
            a.add(e.subscribe(function(e) {
                var t = h++;
                d.set(t, e);
                var s = new _i;
                a.add(s);
                var n = Ke(i)(e);
                return n === Qe ? (c.forEach(r(n.e)),
                o.onError(n.e)) : (s.setDisposable(n.take(1).subscribe(Ue, function(e) {
                    c.forEach(r(e)),
                    o.onError(e)
                }, function() {
                    d["delete"](t),
                    a.remove(s)
                })),
                void c.forEach(function(t) {
                    t.onNext(e)
                }))
            }, function(e) {
                c.forEach(r(e)),
                o.onError(e)
            })),
            l
        }
        ,n)
    }
    ,
    Bi.buffer = function() {
        return this.window.apply(this, arguments).flatMap(L)
    }
    ,
    Bi.window = function(e, t) {
        return 1 === arguments.length && "function" != typeof arguments[0] ? de.call(this, e) : "function" == typeof e ? ue.call(this, e) : ce.call(this, e, t)
    }
    ;
    var qo = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new No(e))
        }
        ,
        t
    }(Ki)
      , No = function(e) {
        function t(t) {
            this._o = t,
            this._p = null,
            this._hp = !1,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._hp ? this._o.onNext([this._p, e]) : this._hp = !0,
            this._p = e
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.pairwise = function() {
        return new qo(this)
    }
    ,
    Bi.partition = function(e, t) {
        var i = vt(e, t, 3);
        return [this.filter(e, t), this.filter(function(e, t, s) {
            return !i(e, t, s)
        })]
    }
    ;
    var Lo = function(e) {
        function t(e, t) {
            this.c = e,
            this.s = t
        }
        return ei(t, e),
        t.prototype[mt] = function() {
            var e = this;
            return {
                next: function() {
                    return e.c() ? {
                        done: !1,
                        value: e.s
                    } : {
                        done: !0,
                        value: void 0
                    }
                }
            }
        }
        ,
        t
    }(Zi);
    Bi.letBind = Bi.let = function(e) {
        return e(this)
    }
    ,
    Qi["if"] = function(e, t, i) {
        return hs(function() {
            return i || (i = ms()),
            Ye(t) && (t = cs(t)),
            Ye(i) && (i = cs(i)),
            "function" == typeof i.now && (i = ms(i)),
            e() ? t : i
        })
    }
    ,
    Qi["for"] = Qi.forIn = function(e, t, i) {
        return os(e, t, i).concat()
    }
    ;
    var zo = Qi["while"] = Qi.whileDo = function(e, t) {
        return Ye(t) && (t = cs(t)),
        he(e, t).concat()
    }
    ;
    Bi.doWhile = function(e) {
        return Ls([this, zo(e, this)])
    }
    ,
    Qi["case"] = function(e, t, i) {
        return hs(function() {
            Ye(i) && (i = cs(i)),
            i || (i = ms()),
            wi(i) && (i = ms(i));
            var s = t[e()];
            return Ye(s) && (s = cs(s)),
            s || i
        })
    }
    ;
    var Uo = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._fn = i,
            this._scheduler = s,
            e.call(this)
        }
        function i(e, t) {
            var i, s = e[0], n = e[1];
            if (!(s.q.length > 0))
                return void (s.isAcquired = !1);
            i = s.q.shift();
            var o = new _i;
            s.d.add(o),
            o.setDisposable(i.subscribe(new Ho(s,n,o))),
            t([s, n])
        }
        return ei(t, e),
        t.prototype._ensureActive = function(e) {
            var t = !1;
            e.q.length > 0 && (t = !e.isAcquired,
            e.isAcquired = !0),
            t && e.m.setDisposable(this._scheduler.scheduleRecursive([e, this], i))
        }
        ,
        t.prototype.subscribeCore = function(e) {
            var t = new pi
              , i = new oi(t)
              , s = {
                q: [],
                m: t,
                d: i,
                activeCount: 0,
                isAcquired: !1,
                o: e
            };
            return s.q.push(this.source),
            s.activeCount++,
            this._ensureActive(s),
            i
        }
        ,
        t
    }(Ki)
      , Ho = function(e) {
        function t(t, i, s) {
            this._s = t,
            this._p = i,
            this._m1 = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._s.o.onNext(e);
            var t = Ke(this._p._fn)(e);
            return t === Qe ? this._s.o.onError(t.e) : (this._s.q.push(t),
            this._s.activeCount++,
            void this._p._ensureActive(this._s))
        }
        ,
        t.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._s.d.remove(this._m1),
            this._s.activeCount--,
            0 === this._s.activeCount && this._s.o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.expand = function(e, t) {
        return wi(t) || (t = $i),
        new Uo(this,e,t)
    }
    ;
    var Bo = function(e) {
        function t(t, i) {
            this._sources = t,
            this._cb = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            if (0 === this._sources.length)
                return e.onCompleted(),
                ci;
            for (var t = this._sources.length, i = {
                finished: !1,
                hasResults: new Array(t),
                hasCompleted: new Array(t),
                results: new Array(t)
            }, s = new oi, n = 0, o = this._sources.length; o > n; n++) {
                var r = this._sources[n];
                Ye(r) && (r = cs(r)),
                s.add(r.subscribe(new Wo(e,i,n,this._cb,s)))
            }
            return s
        }
        ,
        t
    }(Ki)
      , Wo = function(e) {
        function t(t, i, s, n, o) {
            this._o = t,
            this._s = i,
            this._i = s,
            this._cb = n,
            this._subs = o,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._s.finished || (this._s.hasResults[this._i] = !0,
            this._s.results[this._i] = e)
        }
        ,
        t.prototype.error = function(e) {
            this._s.finished = !0,
            this._o.onError(e),
            this._subs.dispose()
        }
        ,
        t.prototype.completed = function() {
            if (!this._s.finished) {
                if (!this._s.hasResults[this._i])
                    return this._o.onCompleted();
                this._s.hasCompleted[this._i] = !0;
                for (var e = 0; e < this._s.results.length; e++)
                    if (!this._s.hasCompleted[e])
                        return;
                this._s.finished = !0;
                var t = Ke(this._cb).apply(null, this._s.results);
                if (t === Qe)
                    return this._o.onError(t.e);
                this._o.onNext(t),
                this._o.onCompleted()
            }
        }
        ,
        t
    }(Wi);
    Qi.forkJoin = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        var s = Je(t[e - 1]) ? t.pop() : D;
        return Array.isArray(t[0]) && (t = t[0]),
        new Bo(t,s)
    }
    ,
    Bi.forkJoin = function() {
        for (var e = arguments.length, t = new Array(e), i = 0; e > i; i++)
            t[i] = arguments[i];
        return Array.isArray(t[0]) ? t[0].unshift(this) : t.unshift(this),
        Qi.forkJoin.apply(null, t)
    }
    ,
    Bi.manySelect = Bi.extend = function(e, t) {
        wi(t) || (t = ze.Scheduler.immediate);
        var i = this;
        return hs(function() {
            var s;
            return i.map(function(e) {
                var t = new Vo(e);
                return s && s.onNext(e),
                s = t,
                t
            }).tap(Ue, function(e) {
                s && s.onError(e)
            }, function() {
                s && s.onCompleted()
            }).observeOn(t).map(e)
        }, i)
    }
    ;
    var Vo = function(e) {
        function t(t) {
            e.call(this),
            this.head = t,
            this.tail = new Ir
        }
        return ei(t, e),
        ti(t.prototype, Ui, {
            _subscribe: function(e) {
                var t = new oi;
                return t.add($i.schedule(this, function(i, s) {
                    e.onNext(s.head),
                    t.add(s.tail.mergeAll().subscribe(e))
                })),
                t
            },
            onCompleted: function() {
                this.onNext(Qi.empty())
            },
            onError: function(e) {
                this.onNext(Qi["throw"](e))
            },
            onNext: function(e) {
                this.tail.onNext(e),
                this.tail.onCompleted()
            }
        }),
        t
    }(Qi)
      , Go = Le.Map || function() {
        function t() {
            this.size = 0,
            this._values = [],
            this._keys = []
        }
        return t.prototype["delete"] = function(e) {
            var t = this._keys.indexOf(e);
            return -1 === t ? !1 : (this._values.splice(t, 1),
            this._keys.splice(t, 1),
            this.size--,
            !0)
        }
        ,
        t.prototype.get = function(t) {
            var i = this._keys.indexOf(t);
            return -1 === i ? e : this._values[i]
        }
        ,
        t.prototype.set = function(e, t) {
            var i = this._keys.indexOf(e);
            return -1 === i ? (this._keys.push(e),
            this._values.push(t),
            this.size++) : this._values[i] = t,
            this
        }
        ,
        t.prototype.forEach = function(e, t) {
            for (var i = 0; i < this.size; i++)
                e.call(t, this._values[i], this._keys[i])
        }
        ,
        t
    }();
    _e.prototype.and = function(e) {
        return new _e(this.patterns.concat(e))
    }
    ,
    _e.prototype.thenDo = function(e) {
        return new pe(this,e)
    }
    ,
    pe.prototype.activate = function(e, t, i) {
        for (var s = [], n = me(t), o = 0, r = this.expression.patterns.length; r > o; o++)
            s.push(ge(e, this.expression.patterns[o], n));
        var a = new be(s,fe(this, t),function() {
            for (var e = 0, t = s.length; t > e; e++)
                s[e].removeActivePlan(a);
            i(a)
        }
        );
        for (o = 0,
        r = s.length; r > o; o++)
            s[o].addActivePlan(a);
        return a
    }
    ,
    be.prototype.dequeue = function() {
        this.joinObservers.forEach(function(e) {
            e.queue.shift()
        })
    }
    ,
    be.prototype.match = function() {
        var e, t, i = !0;
        for (e = 0,
        t = this.joinObserverArray.length; t > e; e++)
            if (0 === this.joinObserverArray[e].queue.length) {
                i = !1;
                break
            }
        if (i) {
            var s = []
              , n = !1;
            for (e = 0,
            t = this.joinObserverArray.length; t > e; e++)
                s.push(this.joinObserverArray[e].queue[0]),
                "C" === this.joinObserverArray[e].queue[0].kind && (n = !0);
            if (n)
                this.onCompleted();
            else {
                this.dequeue();
                var o = [];
                for (e = 0,
                t = s.length; e < s.length; e++)
                    o.push(s[e].value);
                this.onNext.apply(this, o)
            }
        }
    }
    ;
    var Yo = function(e) {
        function t(t, i) {
            e.call(this),
            this.source = t,
            this.onError = i,
            this.queue = [],
            this.activePlans = [],
            this.subscription = new _i,
            this.isDisposed = !1
        }
        ei(t, e);
        var i = t.prototype;
        return i.next = function(e) {
            if (!this.isDisposed) {
                if ("E" === e.kind)
                    return this.onError(e.error);
                this.queue.push(e);
                for (var t = this.activePlans.slice(0), i = 0, s = t.length; s > i; i++)
                    t[i].match()
            }
        }
        ,
        i.error = Ue,
        i.completed = Ue,
        i.addActivePlan = function(e) {
            this.activePlans.push(e)
        }
        ,
        i.subscribe = function() {
            this.subscription.setDisposable(this.source.materialize().subscribe(this))
        }
        ,
        i.removeActivePlan = function(e) {
            this.activePlans.splice(this.activePlans.indexOf(e), 1),
            0 === this.activePlans.length && this.dispose()
        }
        ,
        i.dispose = function() {
            e.prototype.dispose.call(this),
            this.isDisposed || (this.isDisposed = !0,
            this.subscription.dispose())
        }
        ,
        t
    }(Wi);
    Bi.and = function(e) {
        return new _e([this, e])
    }
    ,
    Bi.thenDo = function(e) {
        return new _e([this]).thenDo(e)
    }
    ,
    Qi.when = function() {
        var e, t = arguments.length;
        if (Array.isArray(arguments[0]))
            e = arguments[0];
        else {
            e = new Array(t);
            for (var i = 0; t > i; i++)
                e[i] = arguments[i]
        }
        return new Sr(function(t) {
            var i = []
              , s = new Go
              , n = Hi(function(e) {
                t.onNext(e)
            }, function(e) {
                s.forEach(function(t) {
                    t.onError(e)
                }),
                t.onError(e)
            }, function(e) {
                t.onCompleted()
            });
            try {
                for (var o = 0, r = e.length; r > o; o++)
                    i.push(e[o].activate(s, n, function(e) {
                        var s = i.indexOf(e);
                        i.splice(s, 1),
                        0 === i.length && t.onCompleted()
                    }))
            } catch (a) {
                return Ss(a).subscribe(t)
            }
            var l = new oi;
            return s.forEach(function(e) {
                e.subscribe(),
                l.add(e)
            }),
            l
        }
        )
    }
    ;
    var Jo = function(e) {
        function t(t, i) {
            this._dt = t,
            this._s = i,
            e.call(this)
        }
        function i(e, t) {
            t.onNext(0),
            t.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._s.scheduleFuture(e, this._dt, i)
        }
        ,
        t
    }(Ki)
      , Qo = Qi.interval = function(e, t) {
        return we(e, e, wi(t) ? t : Ri)
    }
    ;
    Qi.timer = function(t, i, s) {
        var n;
        return wi(s) || (s = Ri),
        null != i && "number" == typeof i ? n = i : wi(i) && (s = i),
        (t instanceof Date || "number" == typeof t) && n === e ? ve(t, s) : t instanceof Date && n !== e ? ye(t, i, s) : we(t, n, s)
    }
    ;
    Bi.delay = function() {
        var e = arguments[0];
        if ("number" == typeof e || e instanceof Date) {
            var t = e
              , i = arguments[1];
            return wi(i) || (i = Ri),
            t instanceof Date ? ke(this, t, i) : Ce(this, t, i)
        }
        if (Qi.isObservable(e) || Je(e))
            return xe(this, e, arguments[1]);
        throw new Error("Invalid arguments")
    }
    ;
    var Ko = function(e) {
        function t(t, i, s) {
            wi(s) || (s = Ri),
            this.source = t,
            this._dt = i,
            this._s = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi;
            return new mi(this.source.subscribe(new Xo(e,this._dt,this._s,t)),t)
        }
        ,
        t
    }(Ki)
      , Xo = function(e) {
        function t(t, i, s, n) {
            this._o = t,
            this._d = i,
            this._scheduler = s,
            this._c = n,
            this._v = null,
            this._hv = !1,
            this._id = 0,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._hv = !0,
            this._v = e;
            var t = ++this._id
              , i = new _i;
            this._c.setDisposable(i),
            i.setDisposable(this._scheduler.scheduleFuture(this, this._d, function(i, s) {
                s._hv && s._id === t && s._o.onNext(e),
                s._hv = !1
            }))
        }
        ,
        t.prototype.error = function(e) {
            this._c.dispose(),
            this._o.onError(e),
            this._hv = !1,
            this._id++
        }
        ,
        t.prototype.completed = function() {
            this._c.dispose(),
            this._hv && this._o.onNext(this._v),
            this._o.onCompleted(),
            this._hv = !1,
            this._id++
        }
        ,
        t
    }(Wi);
    Bi.debounce = function() {
        if (Je(arguments[0]))
            return Me(this, arguments[0]);
        if ("number" == typeof arguments[0])
            return new Ko(this,arguments[0],arguments[1]);
        throw new Error("Invalid arguments")
    }
    ,
    Bi.windowWithTime = Bi.windowTime = function(e, t, i) {
        var s, n = this;
        return null == t && (s = e),
        wi(i) || (i = Ri),
        "number" == typeof t ? s = t : wi(t) && (s = e,
        i = t),
        new Sr(function(t) {
            function o() {
                var e = new _i
                  , n = !1
                  , r = !1;
                u.setDisposable(e),
                c === l ? (n = !0,
                r = !0) : l > c ? n = !0 : r = !0;
                var _ = n ? c : l
                  , p = _ - h;
                h = _,
                n && (c += s),
                r && (l += s),
                e.setDisposable(i.scheduleFuture(null, p, function() {
                    if (r) {
                        var e = new Pr;
                        d.push(e),
                        t.onNext(ii(e, a))
                    }
                    n && d.shift().onCompleted(),
                    o()
                }))
            }
            var r, a, l = s, c = e, d = [], u = new pi, h = 0;
            return r = new oi(u),
            a = new gi(r),
            d.push(new Pr),
            t.onNext(ii(d[0], a)),
            o(),
            r.add(n.subscribe(function(e) {
                for (var t = 0, i = d.length; i > t; t++)
                    d[t].onNext(e)
            }, function(e) {
                for (var i = 0, s = d.length; s > i; i++)
                    d[i].onError(e);
                t.onError(e)
            }, function() {
                for (var e = 0, i = d.length; i > e; e++)
                    d[e].onCompleted();
                t.onCompleted()
            })),
            a
        }
        ,n)
    }
    ,
    Bi.windowWithTimeOrCount = Bi.windowTimeOrCount = function(e, t, i) {
        var s = this;
        return wi(i) || (i = Ri),
        new Sr(function(n) {
            function o(t) {
                var s = new _i;
                r.setDisposable(s),
                s.setDisposable(i.scheduleFuture(null, e, function() {
                    if (t === d) {
                        c = 0;
                        var e = ++d;
                        u.onCompleted(),
                        u = new Pr,
                        n.onNext(ii(u, l)),
                        o(e)
                    }
                }))
            }
            var r = new pi
              , a = new oi(r)
              , l = new gi(a)
              , c = 0
              , d = 0
              , u = new Pr;
            return n.onNext(ii(u, l)),
            o(0),
            a.add(s.subscribe(function(e) {
                var i = 0
                  , s = !1;
                u.onNext(e),
                ++c === t && (s = !0,
                c = 0,
                i = ++d,
                u.onCompleted(),
                u = new Pr,
                n.onNext(ii(u, l))),
                s && o(i)
            }, function(e) {
                u.onError(e),
                n.onError(e)
            }, function() {
                u.onCompleted(),
                n.onCompleted()
            })),
            l
        }
        ,s)
    }
    ,
    Bi.bufferWithTime = Bi.bufferTime = function(e, t, i) {
        return this.windowWithTime(e, t, i).flatMap(L)
    }
    ,
    Bi.bufferWithTimeOrCount = Bi.bufferTimeOrCount = function(e, t, i) {
        return this.windowWithTimeOrCount(e, t, i).flatMap(L)
    }
    ;
    var Zo = function(e) {
        function t(t, i) {
            this.source = t,
            this._s = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new er(e,this._s))
        }
        ,
        t
    }(Ki)
      , er = function(e) {
        function t(t, i) {
            this._o = t,
            this._s = i,
            this._l = i.now(),
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = this._s.now()
              , i = t - this._l;
            this._l = t,
            this._o.onNext({
                value: e,
                interval: i
            })
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.timeInterval = function(e) {
        return wi(e) || (e = Ri),
        new Zo(this,e)
    }
    ;
    var tr = function(e) {
        function t(t, i) {
            this.source = t,
            this._s = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new ir(e,this._s))
        }
        ,
        t
    }(Ki)
      , ir = function(e) {
        function t(t, i) {
            this._o = t,
            this._s = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._o.onNext({
                value: e,
                timestamp: this._s.now()
            })
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.timestamp = function(e) {
        return wi(e) || (e = Ri),
        new tr(this,e)
    }
    ;
    var sr = function(e) {
        function t(t, i) {
            this.source = t,
            this._sampler = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = {
                o: e,
                atEnd: !1,
                value: null,
                hasValue: !1,
                sourceSubscription: new _i
            };
            return t.sourceSubscription.setDisposable(this.source.subscribe(new or(t))),
            new mi(t.sourceSubscription,this._sampler.subscribe(new nr(t)))
        }
        ,
        t
    }(Ki)
      , nr = function(e) {
        function t(t) {
            this._s = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype._handleMessage = function() {
            this._s.hasValue && (this._s.hasValue = !1,
            this._s.o.onNext(this._s.value)),
            this._s.atEnd && this._s.o.onCompleted()
        }
        ,
        t.prototype.next = function() {
            this._handleMessage()
        }
        ,
        t.prototype.error = function(e) {
            this._s.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._handleMessage()
        }
        ,
        t
    }(Wi)
      , or = function(e) {
        function t(t) {
            this._s = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._s.hasValue = !0,
            this._s.value = e
        }
        ,
        t.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._s.atEnd = !0,
            this._s.sourceSubscription.dispose()
        }
        ,
        t
    }(Wi);
    Bi.sample = function(e, t) {
        return wi(t) || (t = Ri),
        "number" == typeof e ? new sr(this,Qo(e, t)) : new sr(this,e)
    }
    ;
    var rr = ze.TimeoutError = function(e) {
        this.message = e || "Timeout has occurred",
        this.name = "TimeoutError",
        Error.call(this)
    }
    ;
    rr.prototype = Object.create(Error.prototype),
    Bi.timeout = function() {
        var e = arguments[0];
        if (e instanceof Date || "number" == typeof e)
            return Oe(this, e, arguments[1], arguments[2]);
        if (Qi.isObservable(e) || Je(e))
            return Ae(this, e, arguments[1], arguments[2]);
        throw new Error("Invalid arguments")
    }
    ;
    var ar = function(e) {
        function t(t, i, s, n, o, r) {
            this._state = t,
            this._cndFn = i,
            this._itrFn = s,
            this._resFn = n,
            this._timeFn = o,
            this._s = r,
            e.call(this)
        }
        function i(e, t) {
            if (e.hasResult && e.o.onNext(e.result),
            e.first)
                e.first = !1;
            else if (e.newState = Ke(e.self._itrFn)(e.newState),
            e.newState === Qe)
                return e.o.onError(e.newState.e);
            if (e.hasResult = Ke(e.self._cndFn)(e.newState),
            e.hasResult === Qe)
                return e.o.onError(e.hasResult.e);
            if (e.hasResult) {
                if (e.result = Ke(e.self._resFn)(e.newState),
                e.result === Qe)
                    return e.o.onError(e.result.e);
                var i = Ke(e.self._timeFn)(e.newState);
                if (i === Qe)
                    return e.o.onError(i.e);
                t(e, i)
            } else
                e.o.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = {
                o: e,
                self: this,
                newState: this._state,
                first: !0,
                hasResult: !1
            };
            return this._s.scheduleRecursiveFuture(t, new Date(this._s.now()), i)
        }
        ,
        t
    }(Ki);
    Qi.generateWithAbsoluteTime = function(e, t, i, s, n, o) {
        return wi(o) || (o = Ri),
        new ar(e,t,i,s,n,o)
    }
    ;
    var lr = function(e) {
        function t(t, i, s, n, o, r) {
            this._state = t,
            this._cndFn = i,
            this._itrFn = s,
            this._resFn = n,
            this._timeFn = o,
            this._s = r,
            e.call(this)
        }
        function i(e, t) {
            if (e.hasResult && e.o.onNext(e.result),
            e.first)
                e.first = !1;
            else if (e.newState = Ke(e.self._itrFn)(e.newState),
            e.newState === Qe)
                return e.o.onError(e.newState.e);
            if (e.hasResult = Ke(e.self._cndFn)(e.newState),
            e.hasResult === Qe)
                return e.o.onError(e.hasResult.e);
            if (e.hasResult) {
                if (e.result = Ke(e.self._resFn)(e.newState),
                e.result === Qe)
                    return e.o.onError(e.result.e);
                var i = Ke(e.self._timeFn)(e.newState);
                if (i === Qe)
                    return e.o.onError(i.e);
                t(e, i)
            } else
                e.o.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = {
                o: e,
                self: this,
                newState: this._state,
                first: !0,
                hasResult: !1
            };
            return this._s.scheduleRecursiveFuture(t, 0, i)
        }
        ,
        t
    }(Ki);
    Qi.generateWithRelativeTime = function(e, t, i, s, n, o) {
        return wi(o) || (o = Ri),
        new lr(e,t,i,s,n,o)
    }
    ;
    var cr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._dt = i,
            this._s = s,
            e.call(this)
        }
        function i(e, t) {
            var i = t[0]
              , s = t[1]
              , n = t[2];
            n.setDisposable(i.subscribe(s))
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new pi;
            return t.setDisposable(this._s.scheduleFuture([this.source, e, t], this._dt, i)),
            t
        }
        ,
        t
    }(Ki);
    Bi.delaySubscription = function(e, t) {
        return wi(t) || (t = Ri),
        new cr(this,e,t)
    }
    ;
    var dr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._d = i,
            this._s = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new ur(e,this))
        }
        ,
        t
    }(Ki)
      , ur = function(e) {
        function t(t, i) {
            this._o = t,
            this._s = i._s,
            this._d = i._d,
            this._q = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = this._s.now();
            for (this._q.push({
                interval: t,
                value: e
            }); this._q.length > 0 && t - this._q[0].interval >= this._d; )
                this._o.onNext(this._q.shift().value)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            for (var e = this._s.now(); this._q.length > 0 && e - this._q[0].interval >= this._d; )
                this._o.onNext(this._q.shift().value);
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.skipLastWithTime = function(e, t) {
        return wi(t) || (t = Ri),
        new dr(this,e,t)
    }
    ;
    var hr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._d = i,
            this._s = s,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this.source.subscribe(new _r(e,this._d,this._s))
        }
        ,
        t
    }(Ki)
      , _r = function(e) {
        function t(t, i, s) {
            this._o = t,
            this._d = i,
            this._s = s,
            this._q = [],
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = this._s.now();
            for (this._q.push({
                interval: t,
                value: e
            }); this._q.length > 0 && t - this._q[0].interval >= this._d; )
                this._q.shift()
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            for (var e = this._s.now(); this._q.length > 0; ) {
                var t = this._q.shift();
                e - t.interval <= this._d && this._o.onNext(t.value)
            }
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.takeLastWithTime = function(e, t) {
        return wi(t) || (t = Ri),
        new hr(this,e,t)
    }
    ,
    Bi.takeLastBufferWithTime = function(e, t) {
        var i = this;
        return wi(t) || (t = Ri),
        new Sr(function(s) {
            var n = [];
            return i.subscribe(function(i) {
                var s = t.now();
                for (n.push({
                    interval: s,
                    value: i
                }); n.length > 0 && s - n[0].interval >= e; )
                    n.shift()
            }, function(e) {
                s.onError(e)
            }, function() {
                for (var i = t.now(), o = []; n.length > 0; ) {
                    var r = n.shift();
                    i - r.interval <= e && o.push(r.value)
                }
                s.onNext(o),
                s.onCompleted()
            })
        }
        ,i)
    }
    ;
    var pr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._d = i,
            this._s = s,
            e.call(this)
        }
        function i(e, t) {
            t.onCompleted()
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return new mi(this._s.scheduleFuture(e, this._d, i),this.source.subscribe(e))
        }
        ,
        t
    }(Ki);
    Bi.takeWithTime = function(e, t) {
        return wi(t) || (t = Ri),
        new pr(this,e,t)
    }
    ;
    var mr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._d = i,
            this._s = s,
            this._open = !1,
            e.call(this)
        }
        function i(e, t) {
            t._open = !0
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return new mi(this._s.scheduleFuture(this, this._d, i),this.source.subscribe(new fr(e,this)))
        }
        ,
        t
    }(Ki)
      , fr = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._p._open && this._o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.skipWithTime = function(e, t) {
        return wi(t) || (t = Ri),
        new mr(this,e,t)
    }
    ;
    var gr = function(e) {
        function t(t, i, s) {
            this.source = t,
            this._st = i,
            this._s = s,
            e.call(this)
        }
        function i(e, t) {
            t._open = !0
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return this._open = !1,
            new mi(this._s.scheduleFuture(this, this._st, i),this.source.subscribe(new br(e,this)))
        }
        ,
        t
    }(Ki)
      , br = function(e) {
        function t(t, i) {
            this._o = t,
            this._p = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            this._p._open && this._o.onNext(e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.skipUntilWithTime = function(e, t) {
        return wi(t) || (t = Ri),
        new gr(this,e,t)
    }
    ,
    Bi.takeUntilWithTime = function(e, t) {
        wi(t) || (t = Ri);
        var i = this;
        return new Sr(function(s) {
            return new mi(t.scheduleFuture(s, e, function(e, t) {
                t.onCompleted()
            }),i.subscribe(s))
        }
        ,i)
    }
    ,
    Bi.throttle = function(e, t) {
        wi(t) || (t = Ri);
        var i = +e || 0;
        if (0 >= i)
            throw new RangeError("windowDuration cannot be less or equal zero.");
        var s = this;
        return new Sr(function(e) {
            var n = 0;
            return s.subscribe(function(s) {
                var o = t.now();
                (0 === n || o - n >= i) && (n = o,
                e.onNext(s))
            }, function(t) {
                e.onError(t)
            }, function() {
                e.onCompleted()
            })
        }
        ,s)
    }
    ;
    var vr = function(e) {
        function t(t) {
            this.source = t,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            var t = new _i
              , i = new oi
              , s = {
                hasCurrent: !1,
                isStopped: !1,
                o: e,
                g: i
            };
            return i.add(t),
            t.setDisposable(this.source.subscribe(new yr(s))),
            i
        }
        ,
        t
    }(Ki)
      , yr = function(e) {
        function t(t) {
            this._s = t,
            e.call(this)
        }
        function i(t, i) {
            this._s = t,
            this._i = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            if (!this._s.hasCurrent) {
                this._s.hasCurrent = !0,
                Ye(e) && (e = cs(e));
                var t = new _i;
                this._s.g.add(t),
                t.setDisposable(e.subscribe(new i(this._s,t)))
            }
        }
        ,
        t.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._s.isStopped = !0,
            !this._s.hasCurrent && 1 === this._s.g.length && this._s.o.onCompleted()
        }
        ,
        ei(i, e),
        i.prototype.next = function(e) {
            this._s.o.onNext(e)
        }
        ,
        i.prototype.error = function(e) {
            this._s.o.onError(e)
        }
        ,
        i.prototype.completed = function() {
            this._s.g.remove(this._i),
            this._s.hasCurrent = !1,
            this._s.isStopped && 1 === this._s.g.length && this._s.o.onCompleted()
        }
        ,
        t
    }(Wi);
    Bi.switchFirst = function() {
        return new vr(this)
    }
    ,
    Bi.flatMapFirst = Bi.exhaustMap = function(e, t, i) {
        return new Xi(this,e,t,i).switchFirst()
    }
    ,
    Bi.flatMapWithMaxConcurrent = Bi.flatMapMaxConcurrent = function(e, t, i, s) {
        return new Xi(this,t,i,s).merge(e)
    }
    ;
    var wr = function(e) {
        function t(t, i) {
            this._o = t,
            this._xform = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.next = function(e) {
            var t = Ke(this._xform["@@transducer/step"]).call(this._xform, this._o, e);
            t === Qe && this._o.onError(t.e)
        }
        ,
        t.prototype.error = function(e) {
            this._o.onError(e)
        }
        ,
        t.prototype.completed = function() {
            this._xform["@@transducer/result"](this._o)
        }
        ,
        t
    }(Wi);
    Bi.transduce = function(e) {
        var t = this;
        return new Sr(function(i) {
            var s = e($e(i));
            return t.subscribe(new wr(i,s))
        }
        ,t)
    }
    ;
    var Cr = ze.VirtualTimeScheduler = function(e) {
        function t(t, i) {
            this.clock = t,
            this.comparer = i,
            this.isEnabled = !1,
            this.queue = new si(1024),
            e.call(this)
        }
        ei(t, e);
        var i = t.prototype;
        return i.now = function() {
            return this.toAbsoluteTime(this.clock)
        }
        ,
        i.schedule = function(e, t) {
            return this.scheduleAbsolute(e, this.clock, t)
        }
        ,
        i.scheduleFuture = function(e, t, i) {
            var s = t instanceof Date ? this.toRelativeTime(t - this.now()) : this.toRelativeTime(t);
            return this.scheduleRelative(e, s, i)
        }
        ,
        i.add = pt,
        i.toAbsoluteTime = pt,
        i.toRelativeTime = pt,
        i.schedulePeriodic = function(e, t, i) {
            var s = new xi(this,e,t,i);
            return s.start()
        }
        ,
        i.scheduleRelative = function(e, t, i) {
            var s = this.add(this.clock, t);
            return this.scheduleAbsolute(e, s, i)
        }
        ,
        i.start = function() {
            if (!this.isEnabled) {
                this.isEnabled = !0;
                do {
                    var e = this.getNext();
                    null !== e ? (this.comparer(e.dueTime, this.clock) > 0 && (this.clock = e.dueTime),
                    e.invoke()) : this.isEnabled = !1
                } while (this.isEnabled)
            }
        }
        ,
        i.stop = function() {
            this.isEnabled = !1
        }
        ,
        i.advanceTo = function(e) {
            var t = this.comparer(this.clock, e);
            if (this.comparer(this.clock, e) > 0)
                throw new ut;
            if (0 !== t && !this.isEnabled) {
                this.isEnabled = !0;
                do {
                    var i = this.getNext();
                    null !== i && this.comparer(i.dueTime, e) <= 0 ? (this.comparer(i.dueTime, this.clock) > 0 && (this.clock = i.dueTime),
                    i.invoke()) : this.isEnabled = !1
                } while (this.isEnabled);this.clock = e
            }
        }
        ,
        i.advanceBy = function(e) {
            var t = this.add(this.clock, e)
              , i = this.comparer(this.clock, t);
            if (i > 0)
                throw new ut;
            0 !== i && this.advanceTo(t)
        }
        ,
        i.sleep = function(e) {
            var t = this.add(this.clock, e);
            if (this.comparer(this.clock, t) >= 0)
                throw new ut;
            this.clock = t
        }
        ,
        i.getNext = function() {
            for (; this.queue.length > 0; ) {
                var e = this.queue.peek();
                if (!e.isCancelled())
                    return e;
                this.queue.dequeue()
            }
            return null
        }
        ,
        i.scheduleAbsolute = function(e, t, i) {
            function s(e, t) {
                return n.queue.remove(o),
                i(e, t)
            }
            var n = this
              , o = new bi(this,e,s,t,this.comparer);
            return this.queue.enqueue(o),
            o.disposable
        }
        ,
        t
    }(vi);
    ze.HistoricalScheduler = function(e) {
        function t(t, i) {
            var s = null == t ? 0 : t
              , n = i || Ve;
            e.call(this, s, n)
        }
        ei(t, e);
        var i = t.prototype;
        return i.add = function(e, t) {
            return e + t
        }
        ,
        i.toAbsoluteTime = function(e) {
            return new Date(e).getTime()
        }
        ,
        i.toRelativeTime = function(e) {
            return e
        }
        ,
        t
    }(ze.VirtualTimeScheduler),
    Te.prototype.equals = function(e) {
        return e === this ? !0 : null == e ? !1 : "N" !== e.kind ? !1 : this.predicate(e.value)
    }
    ,
    Se.prototype.equals = function(e) {
        return e === this ? !0 : null == e ? !1 : "E" !== e.kind ? !1 : this.predicate(e.error)
    }
    ;
    var kr = ze.ReactiveTest = {
        created: 100,
        subscribed: 200,
        disposed: 1e3,
        onNext: function(e, t) {
            return "function" == typeof t ? new xr(e,new Te(t)) : new xr(e,Ii.createOnNext(t))
        },
        onError: function(e, t) {
            return "function" == typeof t ? new xr(e,new Se(t)) : new xr(e,Ii.createOnError(t))
        },
        onCompleted: function(e) {
            return new xr(e,Ii.createOnCompleted())
        },
        subscribe: function(e, t) {
            return new Mr(e,t)
        }
    }
      , xr = ze.Recorded = function(e, t, i) {
        this.time = e,
        this.value = t,
        this.comparer = i || We
    }
    ;
    xr.prototype.equals = function(e) {
        return this.time === e.time && this.comparer(this.value, e.value)
    }
    ,
    xr.prototype.toString = function() {
        return this.value.toString() + "@" + this.time
    }
    ;
    var Mr = ze.Subscription = function(e, t) {
        this.subscribe = e,
        this.unsubscribe = t || Number.MAX_VALUE
    }
    ;
    Mr.prototype.equals = function(e) {
        return this.subscribe === e.subscribe && this.unsubscribe === e.unsubscribe
    }
    ,
    Mr.prototype.toString = function() {
        return "(" + this.subscribe + ", " + (this.unsubscribe === Number.MAX_VALUE ? "Infinite" : this.unsubscribe) + ")"
    }
    ;
    var Ar = ze.MockDisposable = function(e) {
        this.scheduler = e,
        this.disposes = [],
        this.disposes.push(this.scheduler.clock)
    }
    ;
    Ar.prototype.dispose = function() {
        this.disposes.push(this.scheduler.clock)
    }
    ;
    var Or = function(e) {
        function t(t) {
            e.call(this),
            this.scheduler = t,
            this.messages = []
        }
        ei(t, e);
        var i = t.prototype;
        return i.onNext = function(e) {
            this.messages.push(new xr(this.scheduler.clock,Ii.createOnNext(e)))
        }
        ,
        i.onError = function(e) {
            this.messages.push(new xr(this.scheduler.clock,Ii.createOnError(e)))
        }
        ,
        i.onCompleted = function() {
            this.messages.push(new xr(this.scheduler.clock,Ii.createOnCompleted()))
        }
        ,
        t
    }(Ui);
    Ee.prototype.then = function(t, i) {
        var s = this;
        this.subscriptions.push(new Mr(this.scheduler.clock));
        var n, o = this.subscriptions.length - 1, r = ze.Observer.create(function(i) {
            var a = t(i);
            if (a && "function" == typeof a.then)
                n = a;
            else {
                var l = s.scheduler.clock;
                n = new Ee(s.scheduler,[ze.ReactiveTest.onNext(l, e), ze.ReactiveTest.onCompleted(l)])
            }
            var c = s.observers.indexOf(r);
            s.observers.splice(c, 1),
            s.subscriptions[o] = new Mr(s.subscriptions[o].subscribe,s.scheduler.clock)
        }, function(e) {
            i(e);
            var t = s.observers.indexOf(r);
            s.observers.splice(t, 1),
            s.subscriptions[o] = new Mr(s.subscriptions[o].subscribe,s.scheduler.clock)
        });
        return this.observers.push(r),
        n || new Ee(this.scheduler,this.messages)
    }
    ;
    var $r = function(e) {
        function t(t, i) {
            e.call(this);
            var s, n, o = this;
            this.scheduler = t,
            this.messages = i,
            this.subscriptions = [],
            this.observers = [];
            for (var r = 0, a = this.messages.length; a > r; r++)
                s = this.messages[r],
                n = s.value,
                function(e) {
                    t.scheduleAbsolute(null, s.time, function() {
                        for (var t = o.observers.slice(0), i = 0, s = t.length; s > i; i++)
                            e.accept(t[i]);
                        return ci
                    })
                }(n)
        }
        return ei(t, e),
        t.prototype._subscribe = function(e) {
            var t = this;
            this.observers.push(e),
            this.subscriptions.push(new Mr(this.scheduler.clock));
            var i = this.subscriptions.length - 1;
            return li(function() {
                var s = t.observers.indexOf(e);
                t.observers.splice(s, 1),
                t.subscriptions[i] = new Mr(t.subscriptions[i].subscribe,t.scheduler.clock)
            })
        }
        ,
        t
    }(Qi)
      , Tr = function(e) {
        function t(t, i) {
            e.call(this),
            this.scheduler = t,
            this.messages = i,
            this.subscriptions = []
        }
        return ei(t, e),
        t.prototype._subscribe = function(e) {
            var t, i, s = this;
            this.subscriptions.push(new Mr(this.scheduler.clock));
            for (var n = this.subscriptions.length - 1, o = new oi, r = 0, a = this.messages.length; a > r; r++)
                t = this.messages[r],
                i = t.value,
                function(i) {
                    o.add(s.scheduler.scheduleRelative(null, t.time, function() {
                        return i.accept(e),
                        ci
                    }))
                }(i);
            return li(function() {
                s.subscriptions[n] = new Mr(s.subscriptions[n].subscribe,s.scheduler.clock),
                o.dispose()
            })
        }
        ,
        t
    }(Qi);
    ze.TestScheduler = function(e) {
        function t(e, t) {
            return e > t ? 1 : t > e ? -1 : 0
        }
        function i() {
            e.call(this, 0, t)
        }
        return ei(i, e),
        i.prototype.scheduleAbsolute = function(t, i, s) {
            return i <= this.clock && (i = this.clock + 1),
            e.prototype.scheduleAbsolute.call(this, t, i, s)
        }
        ,
        i.prototype.add = function(e, t) {
            return e + t
        }
        ,
        i.prototype.toAbsoluteTime = function(e) {
            return new Date(e).getTime()
        }
        ,
        i.prototype.toRelativeTime = function(e) {
            return e
        }
        ,
        i.prototype.startScheduler = function(e, t) {
            t || (t = {}),
            null == t.created && (t.created = kr.created),
            null == t.subscribed && (t.subscribed = kr.subscribed),
            null == t.disposed && (t.disposed = kr.disposed);
            var i, s, n = this.createObserver();
            return this.scheduleAbsolute(null, t.created, function() {
                return i = e(),
                ci
            }),
            this.scheduleAbsolute(null, t.subscribed, function() {
                return s = i.subscribe(n),
                ci
            }),
            this.scheduleAbsolute(null, t.disposed, function() {
                return s.dispose(),
                ci
            }),
            this.start(),
            n
        }
        ,
        i.prototype.createHotObservable = function() {
            var e, t = arguments.length;
            if (Array.isArray(arguments[0]))
                e = arguments[0];
            else {
                e = new Array(t);
                for (var i = 0; t > i; i++)
                    e[i] = arguments[i]
            }
            return new $r(this,e)
        }
        ,
        i.prototype.createColdObservable = function() {
            var e, t = arguments.length;
            if (Array.isArray(arguments[0]))
                e = arguments[0];
            else {
                e = new Array(t);
                for (var i = 0; t > i; i++)
                    e[i] = arguments[i]
            }
            return new Tr(this,e)
        }
        ,
        i.prototype.createResolvedPromise = function(e, t) {
            return new Ee(this,[ze.ReactiveTest.onNext(e, t), ze.ReactiveTest.onCompleted(e)])
        }
        ,
        i.prototype.createRejectedPromise = function(e, t) {
            return new Ee(this,[ze.ReactiveTest.onError(e, t)])
        }
        ,
        i.prototype.createObserver = function() {
            return new Or(this)
        }
        ,
        i
    }(Cr);
    var Sr = ze.AnonymousObservable = function(e) {
        function t(e) {
            return e && Je(e.dispose) ? e : Je(e) ? li(e) : ci
        }
        function i(e, i) {
            var s = i[0]
              , o = i[1]
              , r = Ke(o.__subscribe).call(o, s);
            r !== Qe || s.fail(Qe.e) || n(Qe.e),
            s.setDisposable(t(r))
        }
        function s(t, i) {
            this.source = i,
            this.__subscribe = t,
            e.call(this)
        }
        return ei(s, e),
        s.prototype._subscribe = function(e) {
            var t = new Er(e)
              , s = [t, this];
            return $i.scheduleRequired() ? $i.schedule(s, i) : i(null, s),
            t
        }
        ,
        s
    }(Qi)
      , Er = function(e) {
        function t(t) {
            e.call(this),
            this.observer = t,
            this.m = new _i
        }
        ei(t, e);
        var i = t.prototype;
        return i.next = function(e) {
            var t = Ke(this.observer.onNext).call(this.observer, e);
            t === Qe && (this.dispose(),
            n(t.e))
        }
        ,
        i.error = function(e) {
            var t = Ke(this.observer.onError).call(this.observer, e);
            this.dispose(),
            t === Qe && n(t.e)
        }
        ,
        i.completed = function() {
            var e = Ke(this.observer.onCompleted).call(this.observer);
            this.dispose(),
            e === Qe && n(e.e)
        }
        ,
        i.setDisposable = function(e) {
            this.m.setDisposable(e)
        }
        ,
        i.getDisposable = function() {
            return this.m.getDisposable()
        }
        ,
        i.dispose = function() {
            e.prototype.dispose.call(this),
            this.m.dispose()
        }
        ,
        t
    }(Wi)
      , jr = function(e) {
        function t(t, i) {
            this._m = t,
            this._u = i,
            e.call(this)
        }
        return ei(t, e),
        t.prototype.subscribeCore = function(e) {
            return new mi(this._m.getDisposable(),this._u.subscribe(e))
        }
        ,
        t
    }(Ki)
      , Rr = function(e) {
        function t(t, i, s) {
            e.call(this),
            this.key = t,
            this.underlyingObservable = s ? new jr(s,i) : i
        }
        return ei(t, e),
        t.prototype._subscribe = function(e) {
            return this.underlyingObservable.subscribe(e)
        }
        ,
        t
    }(Qi)
      , Pr = ze.Subject = function(e) {
        function t() {
            e.call(this),
            this.isDisposed = !1,
            this.isStopped = !1,
            this.observers = [],
            this.hasError = !1
        }
        return ei(t, e),
        ti(t.prototype, Ui.prototype, {
            _subscribe: function(e) {
                return ui(this),
                this.isStopped ? this.hasError ? (e.onError(this.error),
                ci) : (e.onCompleted(),
                ci) : (this.observers.push(e),
                new Io(this,e))
            },
            hasObservers: function() {
                return ui(this),
                this.observers.length > 0
            },
            onCompleted: function() {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0;
                    for (var e = 0, t = i(this.observers), s = t.length; s > e; e++)
                        t[e].onCompleted();
                    this.observers.length = 0
                }
            },
            onError: function(e) {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0,
                    this.error = e,
                    this.hasError = !0;
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++)
                        s[t].onError(e);
                    this.observers.length = 0
                }
            },
            onNext: function(e) {
                if (ui(this),
                !this.isStopped)
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++)
                        s[t].onNext(e)
            },
            dispose: function() {
                this.isDisposed = !0,
                this.observers = null
            }
        }),
        t.create = function(e, t) {
            return new Fr(e,t)
        }
        ,
        t
    }(Qi)
      , Ir = ze.AsyncSubject = function(e) {
        function t() {
            e.call(this),
            this.isDisposed = !1,
            this.isStopped = !1,
            this.hasValue = !1,
            this.observers = [],
            this.hasError = !1
        }
        return ei(t, e),
        ti(t.prototype, Ui.prototype, {
            _subscribe: function(e) {
                return ui(this),
                this.isStopped ? (this.hasError ? e.onError(this.error) : this.hasValue ? (e.onNext(this.value),
                e.onCompleted()) : e.onCompleted(),
                ci) : (this.observers.push(e),
                new Io(this,e))
            },
            hasObservers: function() {
                return ui(this),
                this.observers.length > 0
            },
            onCompleted: function() {
                var e, t;
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0;
                    var s = i(this.observers)
                      , t = s.length;
                    if (this.hasValue)
                        for (e = 0; t > e; e++) {
                            var n = s[e];
                            n.onNext(this.value),
                            n.onCompleted()
                        }
                    else
                        for (e = 0; t > e; e++)
                            s[e].onCompleted();
                    this.observers.length = 0
                }
            },
            onError: function(e) {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0,
                    this.hasError = !0,
                    this.error = e;
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++)
                        s[t].onError(e);
                    this.observers.length = 0
                }
            },
            onNext: function(e) {
                ui(this),
                this.isStopped || (this.value = e,
                this.hasValue = !0)
            },
            dispose: function() {
                this.isDisposed = !0,
                this.observers = null,
                this.error = null,
                this.value = null
            }
        }),
        t
    }(Qi)
      , Fr = ze.AnonymousSubject = function(e) {
        function t(t, i) {
            this.observer = t,
            this.observable = i,
            e.call(this)
        }
        return ei(t, e),
        ti(t.prototype, Ui.prototype, {
            _subscribe: function(e) {
                return this.observable.subscribe(e)
            },
            onCompleted: function() {
                this.observer.onCompleted()
            },
            onError: function(e) {
                this.observer.onError(e)
            },
            onNext: function(e) {
                this.observer.onNext(e)
            }
        }),
        t
    }(Qi)
      , Dr = ze.BehaviorSubject = function(e) {
        function t(t) {
            e.call(this),
            this.value = t,
            this.observers = [],
            this.isDisposed = !1,
            this.isStopped = !1,
            this.hasError = !1
        }
        return ei(t, e),
        ti(t.prototype, Ui.prototype, {
            _subscribe: function(e) {
                return ui(this),
                this.isStopped ? (this.hasError ? e.onError(this.error) : e.onCompleted(),
                ci) : (this.observers.push(e),
                e.onNext(this.value),
                new Io(this,e))
            },
            getValue: function() {
                return ui(this),
                this.hasError && n(this.error),
                this.value
            },
            hasObservers: function() {
                return ui(this),
                this.observers.length > 0
            },
            onCompleted: function() {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0;
                    for (var e = 0, t = i(this.observers), s = t.length; s > e; e++)
                        t[e].onCompleted();
                    this.observers.length = 0
                }
            },
            onError: function(e) {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0,
                    this.hasError = !0,
                    this.error = e;
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++)
                        s[t].onError(e);
                    this.observers.length = 0
                }
            },
            onNext: function(e) {
                if (ui(this),
                !this.isStopped) {
                    this.value = e;
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++)
                        s[t].onNext(e)
                }
            },
            dispose: function() {
                this.isDisposed = !0,
                this.observers = null,
                this.value = null,
                this.error = null
            }
        }),
        t
    }(Qi)
      , qr = ze.ReplaySubject = function(e) {
        function t(e, t) {
            return li(function() {
                t.dispose(),
                !e.isDisposed && e.observers.splice(e.observers.indexOf(t), 1)
            })
        }
        function s(t, i, s) {
            this.bufferSize = null == t ? n : t,
            this.windowSize = null == i ? n : i,
            this.scheduler = s || $i,
            this.q = [],
            this.observers = [],
            this.isStopped = !1,
            this.isDisposed = !1,
            this.hasError = !1,
            this.error = null,
            e.call(this)
        }
        var n = Math.pow(2, 53) - 1;
        return ei(s, e),
        ti(s.prototype, Ui.prototype, {
            _subscribe: function(e) {
                ui(this);
                var i = new Yi(this.scheduler,e)
                  , s = t(this, i);
                this._trim(this.scheduler.now()),
                this.observers.push(i);
                for (var n = 0, o = this.q.length; o > n; n++)
                    i.onNext(this.q[n].value);
                return this.hasError ? i.onError(this.error) : this.isStopped && i.onCompleted(),
                i.ensureActive(),
                s
            },
            hasObservers: function() {
                return ui(this),
                this.observers.length > 0
            },
            _trim: function(e) {
                for (; this.q.length > this.bufferSize; )
                    this.q.shift();
                for (; this.q.length > 0 && e - this.q[0].interval > this.windowSize; )
                    this.q.shift()
            },
            onNext: function(e) {
                if (ui(this),
                !this.isStopped) {
                    var t = this.scheduler.now();
                    this.q.push({
                        interval: t,
                        value: e
                    }),
                    this._trim(t);
                    for (var s = 0, n = i(this.observers), o = n.length; o > s; s++) {
                        var r = n[s];
                        r.onNext(e),
                        r.ensureActive()
                    }
                }
            },
            onError: function(e) {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0,
                    this.error = e,
                    this.hasError = !0;
                    var t = this.scheduler.now();
                    this._trim(t);
                    for (var s = 0, n = i(this.observers), o = n.length; o > s; s++) {
                        var r = n[s];
                        r.onError(e),
                        r.ensureActive()
                    }
                    this.observers.length = 0
                }
            },
            onCompleted: function() {
                if (ui(this),
                !this.isStopped) {
                    this.isStopped = !0;
                    var e = this.scheduler.now();
                    this._trim(e);
                    for (var t = 0, s = i(this.observers), n = s.length; n > t; t++) {
                        var o = s[t];
                        o.onCompleted(),
                        o.ensureActive()
                    }
                    this.observers.length = 0
                }
            },
            dispose: function() {
                this.isDisposed = !0,
                this.observers = null
            }
        }),
        s
    }(Qi);
    ze.Pauser = function(e) {
        function t() {
            e.call(this)
        }
        return ei(t, e),
        t.prototype.pause = function() {
            this.onNext(!1)
        }
        ,
        t.prototype.resume = function() {
            this.onNext(!0)
        }
        ,
        t
    }(Pr),
    "function" == typeof define && "object" == typeof define.amd && define.amd ? (Le.Rx = ze,
    define("rxjs", [], function() {
        return ze
    })) : Re && Pe ? qe ? (Pe.exports = ze).Rx = ze : Re.Rx = ze : Le.Rx = ze;
    var Nr = c()
}
.call(this),
define("lib/core/updater", ["require", "jquery"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = AMOCRM.constant("version");
    return "production" === AMOCRM.environment && t(document).ajaxComplete(function(e, t, s) {
        var n = AMOCRM.constant("server");
        t.getResponseHeader("X-Core-Server") && t.getResponseHeader("X-Core-Server") !== n && AMOCRM.constant("server", t.getResponseHeader("X-Core-Server")),
        t.getResponseHeader("X-Core-Version") && t.getResponseHeader("X-Core-Version") !== i && (window.location.href = document.URL)
    }),
    {
        check: function() {
            return t.ajax({
                url: "/private/ping.php"
            })
        }
    }
}),
define("lib/core/view", ["require", "underscore", "elements_view", "backbone", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("elements_view"), n = e("backbone"), o = e("lib/common/fn"), r = ".default:page:ns";
    return s.prototype.remove = function(e) {
        e === !1 && this.stopListening().undelegateEvents(),
        this.$el.off(".delegateEvents" + this.cid).off(this.ns),
        (void 0 === e || e === !0) && n.View.prototype.remove.apply(this, arguments)
    }
    ,
    t = s.extend({
        ns: r,
        initialize: function(e) {
            this.setNS(),
            s.prototype.initialize.call(this),
            e = e || {},
            this._page_components = {
                active: [],
                all: {}
            },
            e.init_components !== !1 && this._initComponents()
        },
        delegateEvents: function() {
            var e = s.prototype.delegateEvents.apply(this, arguments)
              , t = i.isFunction(this.document_events) ? this.document_events() : this.document_events;
            return i.each(t, function(e, t) {
                var s = t.split(" ")
                  , n = [];
                n.push(s.shift() + this.ns + ".document"),
                s.length && n.push(s.join(" ")),
                n.push(i.bind(this[e], this)),
                this._$document.on.apply(this._$document, n)
            }, this),
            e
        },
        undelegateEvents: function() {
            return this._$document.off(this.ns + ".document"),
            s.prototype.undelegateEvents.apply(this, arguments)
        },
        destroy: function(e) {
            e = i.isUndefined(e) ? !1 : e,
            this._$document.off(this.ns),
            this._$window.off(this.ns),
            this._page_components.active = i.filter(this._page_components.active, function(t) {
                return this._destroyComponent(t, e),
                !1
            }, this),
            this.remove(e)
        },
        setNS: function() {
            this.ns === r && (this.ns = "." + i.uniqueId("amo_view_"))
        },
        _initComponents: function() {
            var e;
            e = this.components && this.components.apply(this, arguments),
            i.each(e, function(e) {
                this._addComponent.apply(this, e)
            }, this)
        },
        _addComponent: function() {
            var e, t, s, n;
            if (!i.isFunction(arguments[0]))
                throw new Error("First argument of a component must be a function");
            return e = arguments[0],
            t = Array.prototype.slice.call(arguments, 1),
            s = this._initComponent(e, t),
            n = "component_" + o.randHex(),
            i.isFunction(s.destroy) && (s.destroy = this._wrapComponentDestroy(s.destroy, this)),
            s.__page_component_hash = n,
            this._page_components.active.push(s),
            this._page_components.all[n] = {
                Component: e,
                args: t
            },
            s
        },
        _wrapComponentDestroy: function(e, t) {
            return i.wrap(e, function(e) {
                var s = Array.prototype.slice.call(arguments, 1);
                e.apply(this, s),
                t._page_components.active = i.without(t._page_components.active, this),
                t._page_components.all = i.omit(t._page_components.all, this.__page_component_hash)
            })
        },
        _initComponent: function(e, t) {
            return t = [e].concat(t || []),
            new (e.bind.apply(e, t))
        },
        _destroyComponent: function(e, t) {
            return e && e.__page_component_hash && (i.isFunction(e.destroy) ? e.destroy(t) : i.isFunction(e.remove) && e.remove(t),
            e = null),
            this
        },
        _disableComponent: function(e) {
            var t;
            return e && e.__page_component_hash && (t = i.indexOf(this._page_components.active, e),
            this._destroyComponent(e),
            -1 !== t && this._page_components.active.splice(t, 1)),
            this
        },
        _enableComponent: function(e) {
            var t;
            return e && e.__page_component_hash && -1 === i.indexOf(this._page_components.active, e) && (t = this._page_components.all[e.__page_component_hash],
            e = this._initComponent(t.Component, t.args)),
            this
        }
    })
}),
define("lib/components/base/inbox/offline", ["require", "underscore", "backbone", "twig", "lib/core/updater", "lib/core/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone")
      , s = e("twig")
      , n = e("lib/core/updater")
      , o = e("lib/core/view");
    return o.extend({
        className: "offline-notifier",
        idle_tt: null,
        offline_tt: null,
        _classes: function() {
            return {
                reconnect: "js-reconnect"
            }
        },
        events: {
            "click .js-reconnect": "onReconnectClick"
        },
        initialize: function(e) {
            this.options = t.extend({
                template: "",
                reconnect: t.noop
            }, e),
            o.prototype.initialize.apply(this, arguments),
            this.model = new i.Model,
            this.listenTo(this.model, "change", this.render),
            this.setIdleTimeout(),
            this._$window.on("offline" + this.ns, t.bind(this._setOfflineFromEvent, this, !0)).on("online" + this.ns, t.bind(this._setOfflineFromEvent, this, !1))
        },
        onReconnectClick: function() {
            this._tryToReconnect()
        },
        _tryToReconnect: function() {
            this._elem("reconnect").trigger("button:load:start"),
            n.check().fail(t.bind(function() {
                this._elem("reconnect").trigger("button:load:error")
            }, this)).done(t.bind(this._reconnect, this))
        },
        setIdleTimeout: function() {
            t.isNull(this.idle_tt) && this._$document.on("ajaxComplete" + this.ns, t.bind(this.setIdleTimeout, this)),
            clearTimeout(this.idle_tt),
            this.idle_tt = setTimeout(t.bind(this._setIdle, this, !0), 36e5)
        },
        _reconnect: function() {
            this.setIdleTimeout(),
            this.model.clear(),
            this.options.reconnect()
        },
        _setOfflineFromEvent: function(e) {
            clearTimeout(this.offline_tt),
            e === !1 ? this._tryToReconnect() : this.offline_tt = setTimeout(t.bind(this._setOffline, this, !0), 5e3)
        },
        _setOffline: function(e) {
            t.isBoolean(e) && this.model.set("offline", e)
        },
        _setIdle: function(e) {
            t.isBoolean(e) && this.model.set("idle", e),
            e === !0 && this._$document.one("mouseup" + this.ns, t.bind(this._reconnect, this))
        },
        render: s._preload(["/tmpl/common/offline.twig"], "_render"),
        _render: function() {
            var e = "";
            this.model.get("offline") && (e = s({
                ref: "/tmpl/common/offline.twig"
            }).render({
                class_name: this.options.class_name
            })),
            this.$el.html(e),
            e && (this.$el.addClass("animated slideInDown"),
            t.delay(t.bind(function() {
                this.$el.removeClass("animated slideInDown")
            }, this), 300))
        }
    })
}),
define("lib/core/users", ["require", "underscore", "jquery", "rxjs"], function(e) {
    "use strict";
    function t(e) {
        var t = {}
          , i = {};
        switch (u.each(p, function(e, s) {
            e.active ? t[s] = e : i[s] = e
        }),
        !0) {
        case e === !0:
            return h.extend(!0, {}, t, m);
        case "free" === e:
            return h.extend(!0, {}, m);
        case "inactive" === e:
            return h.extend(!0, {}, i);
        case parseInt(e) > 0:
            return h.extend(!0, {}, t, m)[e];
        default:
            return h.extend(!0, {}, t)
        }
    }
    function i(e) {
        return u.extend(p, e),
        AMOCRM.constant("managers", p),
        s(p),
        t()
    }
    function s() {
        f = u.chain(t(!0)).reduce(function(e, t) {
            return t.amojo_id && (e[t.amojo_id] = t),
            e
        }, {}).value()
    }
    function n() {
        return u.extend({}, f)
    }
    function o(e) {
        var t = u.extend({}, AMOCRM.constant("user") || {});
        return "undefined" != typeof e && (t = t[e] || null),
        t
    }
    function r(e) {
        var t = p
          , i = {};
        "Y" === e.is_free && (t = m),
        i[e.id] = u.clone(e),
        u.extend(t, i),
        s()
    }
    function a() {
        return u.values(t())[0]
    }
    function l() {
        return b.asObservable()
    }
    function c(e) {
        return e
    }
    function d() {
        return _.Observable.fromPromise(function() {
            return h.ajax({
                url: "/ajax/get_managers_with_group/",
                type: "POST",
                data: {
                    free_users: "Y"
                },
                dataType: "json"
            })
        })
    }
    var u = e("underscore")
      , h = e("jquery")
      , _ = e("rxjs")
      , p = h.extend(!0, {}, AMOCRM.constant("managers") || {})
      , m = h.extend(!0, {}, AMOCRM.constant("free_users") || {})
      , f = {}
      , g = new _.Subject
      , b = new _.ReplaySubject(1);
    return g.merge(_.Observable.fromEvent(h(document), "loaded_users:null")).startWith(!0).switchMap(d).map(c).subscribe(b),
    s(),
    {
        get: t,
        set: i,
        add: r,
        first: a,
        current: o,
        fetch: l,
        getByAmoJoId: n
    }
}),
define("lib/components/base/inbox/users", ["require", "lib/core/users"], function(e) {
    "use strict";
    function t(e) {
        return {
            id: e.id,
            amojo_id: e.id,
            title: e.name,
            avatar: e.avatar,
            is_bot: !0
        }
    }
    var i = e("lib/core/users")
      , s = AMOCRM.constant("amojo_bots");
    return {
        getRecipient: function(e) {
            var n = i.get(!0);
            switch (!0) {
            case parseInt(e).toString() === e.toString():
                return n[e];
            default:
                return t(s[e])
            }
        }
    }
}),
define("lib/components/base/sockets/socket2v", ["require", "rxjs", "underscore"], function(e) {
    "use strict";
    var t = e("rxjs")
      , i = e("underscore")
      , s = 1
      , n = [];
    return function(e, o) {
        function r(e) {
            var o, r = [];
            return null == c && (c = t.Observable.create(function(e) {
                h.connect().subscribe(function(t) {
                    o = new WebSocket(t),
                    u = 0,
                    o.onmessage = function(t) {
                        e.onNext(t)
                    }
                    ,
                    o.onerror = function(t) {
                        e.onError(t)
                    }
                    ,
                    o.onclose = function(t) {
                        return n = i.without(n, o),
                        o = null,
                        1e3 === t.code && t.wasClean ? void e.onCompleted() : e.onError(t)
                    }
                    ,
                    o.onopen = function() {
                        r.length && (i.each(r, o.send, o),
                        r = [])
                    }
                    ,
                    n.push(o)
                }, e.onError.bind(e))
            }).retryWhen(function(e) {
                return e.switchMap(function(e) {
                    if (402 === e.status)
                        throw new Error("Payment required");
                    return u > 7 && (u = 0),
                    u++,
                    t.Observable.timer(1e3 * (u + (u - 1)))
                })
            }).subscribe(e)),
            {
                socket: e,
                send: function(e) {
                    e = JSON.stringify(e),
                    o && o.send && o.readyState === s ? o.send(e) : r.push(e)
                }
            }
        }
        function a() {
            i.each(n, function(e) {
                e.close()
            }),
            n = []
        }
        function l() {
            return {
                connect: t.Observable.just(e)
            }
        }
        var c, d, u = 0, h = i.extend({}, l(), o) || {}, _ = new t.Subject;
        return d = r(_),
        {
            socket: d.socket,
            send: d.send,
            reconnect: a
        }
    }
}),
define("lib/components/base/inbox/broadcast", ["require", "rxjs", "lib/components/base/sockets/socket2v"], function(e) {
    "use strict";
    function t() {
        return AMOCRM.constant("account").notifications_enabled ? i.Observable.fromPromise($.ajax({
            url: n.wsStart,
            method: "POST",
            context: this,
            data: {
                user_login: AMOCRM.constant("user").login,
                user_hash: AMOCRM.constant("user").api_key,
                sub_domain: AMOCRM.constant("account").subdomain
            }
        }).promise()).map(function(e) {
            if (!e.success)
                throw new Error("Connect to socket error");
            return n.wsConnect(e.token)
        }) : i.Observable.empty();
    }
    var i = e("rxjs")
      , s = e("lib/components/base/sockets/socket2v")
      , n = {
        wsStart: AMOCRM.constant("notifications").url_start + "/v1/ws.start",
        wsConnect: function(e) {
            return AMOCRM.constant("notifications").url_ws + "/v1/ws/" + e
        }
    };
    return s(null, {
        connect: t
    })
}),
define("lib/components/base/sticky_headers", ["require", "jquery", "underscore", "lib/common/fn", "lib/core/view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/core/view");
    return t = o.extend({
        events: {
            scroll: "update"
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this),
            this.options = s.extend({
                max_sticky_count: 1 / 0,
                exclude_scrollbar: !1,
                disable_click: !1,
                top_offset: 0,
                no_stack_items: !1,
                onOutside: s.noop,
                onUpdate: s.noop
            }, e || {}),
            this.options.disable_click || this.$el.on("click" + this.ns, this.options.selector, s.bind(this.onHeaderClick, this)),
            this._$window.on("resize" + this.ns, s.debounce(s.bind(this.refresh, this), 200))
        },
        destroy: function() {
            this._$window.off(this.ns),
            o.prototype.destroy.apply(this)
        },
        cleanup: function(e) {
            e = e || this.headers,
            e && e.length && s.each(e, function(e, t) {
                e.parentNode && e.parentNode !== this.el && (e.parentNode.style.height = ""),
                e.style.top = "",
                e.style.bottom = "",
                e.style.width = "",
                e.classList.remove("outside"),
                e.classList.remove("outside-top"),
                e.classList.remove("outside-bottom")
            }, this)
        },
        refresh: function() {
            var e, t, i, o, r = this.options.exclude_scrollbar ? n.getScrollBarWidth("custom-scroll") : 0;
            i = Array.prototype.slice.call(this.el.querySelectorAll(this.options.selector)),
            s.isFunction(this.options.filterElements) && (i = this.options.filterElements(i)),
            s.isEqual(i, this.headers) || this.cleanup(s.difference(i, this.headers)),
            this.headers = i,
            this.top_fix_heights = [],
            this.top_real_heights = [],
            this.header_tops = [],
            this.headers.length && this.headers.length < this.options.max_sticky_count && (this.el.style.maxHeight = "",
            t = this.$el.css("max-height"),
            e = /%$/.test(t),
            t = parseInt(t),
            (s.isNaN(t) || e) && (t = parseInt(this.$el[0].offsetHeight)),
            this.viewport_size = t,
            s.isFunction(this.options.getViewportHeight) && (this.viewport_size = this.options.getViewportHeight()),
            this.el.style.maxHeight = this.viewport_size + "px",
            this.headers = s.filter(this.headers, function(e, t) {
                var i;
                return e.parentNode !== this.el && (e.parentNode.style.height = e.offsetHeight + "px"),
                (i = e.parentNode.clientWidth - r) ? (e.style.width = i + "px",
                this.options.no_stack_items || (this.viewport_size -= e.offsetHeight),
                o = this.options.top_offset,
                s.isFunction(o) && (o = o(e, t)),
                this.header_tops[t] = e.parentNode.offsetTop - o,
                this.top_fix_heights[t] = this.top_fix_heights[t - 1] || 0,
                this.top_real_heights[t] = this.top_real_heights[t - 1] || Math.min(this.header_tops[t], 0),
                this.headers[t - 1] && !this.options.no_stack_items && (this.top_fix_heights[t] += this.headers[t - 1].offsetHeight,
                this.top_real_heights[t] += this.headers[t - 1].offsetHeight),
                !0) : !1
            }, this)),
            this.fix_flag = [],
            this.update()
        },
        update: function() {
            var e, t, i = this.$el.scrollTop();
            this.headers.length && this.headers.length < this.options.max_sticky_count && (s.each(this.headers, function(s, n) {
                e = 0,
                this.header_tops[n] - i < this.top_real_heights[n] ? (e = 1,
                t = this.top_fix_heights[n]) : this.header_tops[n] - i > this.top_real_heights[n] + this.viewport_size ? (e = 2,
                t = this.el.clientHeight - s.offsetHeight - this.top_fix_heights[n] - this.viewport_size) : (e = 3,
                t = void 0),
                e !== this.fix_flag[n] && (s.style.top = "",
                s.style.bottom = "",
                s.classList.remove("outside"),
                s.classList.remove("outside-top"),
                s.classList.remove("outside-bottom"),
                void 0 !== t && (1 === e ? (s.style.top = t + "px",
                s.classList.add("outside-top")) : (s.style.bottom = t + "px",
                s.classList.add("outside-bottom")),
                s.classList.add("outside"),
                this.options.onOutside(s, this.headers)),
                this.fix_flag[n] = e)
            }, this),
            this._setLastTopHeader()),
            this.options.onUpdate(this.headers, {
                scroll_top: i
            })
        },
        _setLastTopHeader: function() {
            var e = s.findIndex(this.headers, function(e) {
                return e.classList.contains("outside-top_last")
            })
              , t = s.findLastIndex(this.headers, function(e, t) {
                return e.classList.contains("outside-top")
            });
            (-1 === t || t !== e) && e > -1 && this.headers[e].classList.remove("outside-top_last"),
            t > -1 && t !== e && this.headers[t].classList.add("outside-top_last")
        },
        onHeaderClick: function(e) {
            var t = i(e.currentTarget).parent();
            this.$el.scrollTop(t[0].offsetTop)
        }
    })
}),
define("lib/common/cookie", [], function() {
    var e = function() {
        var e = this;
        e.set = function(e) {
            if ("undefined" == typeof e.name || "undefined" == typeof e.value)
                return !1;
            "object" == typeof e.value && (e.value = JSON.stringify(e.value));
            var t = e.expiredays || 7
              , i = e.path || "/"
              , s = e.domain || ""
              , n = e.secure || !1;
            if (0 != n && (n = !0),
            t) {
                var o = new Date;
                o.setDate(o.getDate() + t);
                var r = o.toGMTString()
            }
            document.cookie = e.name + "=" + escape(e.value) + (t ? "; expires=" + r : "") + (i ? "; path=" + i : "") + (s ? "; domain=" + s : "") + (n ? "; secure" : "")
        }
        ,
        e.get = function(e) {
            var t = " " + document.cookie
              , i = " " + e + "="
              , s = null
              , n = 0
              , o = 0;
            return t.length > 0 && (n = t.indexOf(i),
            -1 != n && (n += i.length,
            o = t.indexOf(";", n),
            -1 == o && (o = t.length),
            s = unescape(t.substring(n, o)))),
            s
        }
    };
    return new e
}),
define("lib/interface/amojo/access_token", ["require"], function(e) {
    "use strict";
    return function() {
        function e(e, t, i, s) {
            this.expiredAt = i || 0,
            this.refreshToken = t,
            this.token = e,
            this.user = s
        }
        var t = AMOCRM.constant("user");
        return e.fromJSON = function(t) {
            var i = JSON.parse(t);
            return new e(i.token,i.refreshToken,i.expiredAt,i.user)
        }
        ,
        e.prototype = {
            expiredAt: 0,
            token: "",
            refreshToken: "",
            user: 0,
            expired: function() {
                return 1e3 * this.expiredAt < (new Date).getTime()
            },
            expiresInDays: function() {
                return (1e3 * this.expiredAt - (new Date).getTime()) / 864e5
            },
            valid: function() {
                return this.expiredAt > 0 && this.token.length > 0 && this.refreshToken.length > 0 && this.user.toString() === t.id.toString()
            },
            toString: function() {
                return JSON.stringify(this)
            }
        },
        e
    }()
}),
define("lib/interface/amojo/token_storage", ["require", "lib/common/cookie", "lib/interface/amojo/access_token", "rxjs"], function(e) {
    "use strict";
    return function(t) {
        function i(e) {
            r() ? t.setItem("amojo_token", e) : l.set({
                name: "amojo_token",
                value: e,
                expiredays: e.expiresInDays()
            }),
            d = e
        }
        function s() {
            return u.Observable.just(d).map(n)
        }
        function n(e) {
            if (!e.valid())
                throw new Error("Token not valid");
            return e
        }
        function o() {
            return u.Observable.create(function(e) {
                if (r()) {
                    var i;
                    if (i = t.getItem(h))
                        return e.onNext(c.fromJSON(i)),
                        void e.onCompleted()
                }
                e.onNext(null),
                e.onCompleted()
            }).map(n).doOnNext(function(e) {
                d = e
            })
        }
        function r() {
            var e = "test";
            try {
                return t.setItem(e, e),
                t.removeItem(e),
                !0
            } catch (i) {
                return !1
            }
        }
        function a() {
            return u.Observable.create(function(e) {
                var t;
                return (t = l.get(h)) ? (e.onNext(c.fromJSON(t)),
                void e.onCompleted()) : (e.onNext(null),
                void e.onCompleted())
            }).map(n).doOnNext(function(e) {
                d = e
            })
        }
        var l = e("lib/common/cookie")
          , c = e("lib/interface/amojo/access_token")
          , d = null
          , u = e("rxjs")
          , h = "amojo_token";
        return {
            memory: s,
            cookies: a,
            localStorage: o,
            set: i
        }
    }(window.localStorage)
}),
define("lib/interface/amojo/token_manager", ["require", "underscore", "rxjs", "lib/interface/amojo/token_storage", "lib/interface/amojo/access_token", "lib/core/users"], function(e) {
    "use strict";
    return function() {
        function t(e) {
            return l.Observable["catch"](c.memory(), c.localStorage(), c.cookies(), s()).switchMap(e).retryWhen(i)
        }
        function i(e) {
            return l.Observable.range(1, 2).zip(e, function(e, t) {
                return t
            }).flatMap(function(e) {
                return e.status >= 500 ? l.Observable.timer(5e3).switchMap(function() {
                    return s()
                }) : 402 === e.status ? l.Observable["throw"](e) : s()
            })
        }
        function s() {
            return l.Observable.defer(function() {
                return l.Observable.fromPromise($.ajax({
                    url: r(g.createToken),
                    data: {
                        request: {
                            chats: {
                                session: {
                                    action: "create"
                                }
                            }
                        }
                    },
                    method: "POST"
                }).promise()).map(function(e) {
                    var t = e.response.chats.session;
                    return n(t),
                    new d(t.access_token,t.refresh_token,t.expired_at,p.id)
                }).doOnNext(function(e) {
                    c.set(e)
                })
            })
        }
        function n(e) {
            !h.amojo_id && e.account && e.account.id && (h.amojo_id = e.account.id),
            !p.amojo_id && e.user && e.user.id && (p.amojo_id = e.user.id),
            p.amojo_id && a.each([m, f], function(e) {
                e[p.id] && !e[p.id].amojo_id && (e[p.id].amojo_id = p.amojo_id)
            })
        }
        function o(e) {
            return _ + e
        }
        function r(e) {
            return e
        }
        var a = e("underscore")
          , l = e("rxjs")
          , c = e("lib/interface/amojo/token_storage")
          , d = e("lib/interface/amojo/access_token")
          , u = e("lib/core/users")
          , h = AMOCRM.constant("account")
          , _ = h.amojo_server
          , p = AMOCRM.constant("user")
          , m = u.get()
          , f = u.get("free_users")
          , g = {
            refreshToken: o("/session/refresh_token"),
            createToken: r("/ajax/v1/chats/session")
        };
        return {
            inject: t
        }
    }()
}),
define("lib/interface/amojo/uploader", ["require", "underscore", "rxjs"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("rxjs"), n = 512, o = 1024, r = AMOCRM.constant("account") || {}, a = r.amojo_server;
    return t = function(e) {
        this.file_id = this.guid(),
        this.token = e
    }
    ,
    i.extend(t.prototype, {
        agents: [],
        totalParts: 0,
        agentStream$: new s.Subject,
        partsStream$: new s.Subject,
        uploadSource$: null,
        send: function(e) {
            return s.Observable.create(i.bind(function(t) {
                var s = this.fileToStream(e.bytes).map(i.bind(this.sendPart(e), this)).concatAll().subscribe(i.bind(function(e) {
                    var i = {
                        file_id: this.file_id,
                        type: "process",
                        progress: (e.num + 1) / e.total * 100
                    };
                    e.num + 1 === e.total ? (i.type = "load",
                    t.onNext(i),
                    t.onCompleted()) : t.onNext(i)
                }, this), i.bind(t.onError, t));
                return function() {
                    s.dispose()
                }
            }, this))
        },
        fileToStream: function(e) {
            var t = n * o
              , i = Math.ceil(e.byteLength / t);
            return e.byteLength % t === 0 && i++,
            s.Observable.create(function(s) {
                for (var n = 0; i > n; n++)
                    s.onNext({
                        num: n,
                        bytes: new Uint8Array(e.slice(t * n, (n + 1) * t)),
                        total: i
                    });
                s.onCompleted()
            })
        },
        sendPart: function(e) {
            return function(t) {
                return s.Observable.defer(i.bind(function() {
                    return s.Observable.fromPromise($.ajax({
                        url: a + "/v2/upload/saveFilePart?part=" + t.num + "&file_id=" + this.file_id,
                        headers: {
                            "X-Auth-Token": this.token.token,
                            "Content-Disposition": "attachment; filename*=\"UTF-8''" + encodeURIComponent(e.name) + '"'
                        },
                        type: "PUT",
                        contentType: e.mimeType,
                        data: t.bytes,
                        processData: !1
                    })).map(function() {
                        return {
                            num: t.num,
                            total: t.total
                        }
                    })
                }, this))
            }
        },
        guid: function() {
            function e() {
                return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
            }
            return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()
        }
    }),
    t
}),
define("lib/interface/amojo/api", ["require", "jquery", "underscore", "rxjs", "lib/interface/amojo/token_manager", "lib/interface/amojo/uploader"], function(e) {
    "use strict";
    function t(e, t, i) {
        return s(function(s) {
            switch (!0) {
            case /^image\//.test(t.mimeType):
                return b(t, s, v(e, i, s));
            default:
                return b(t, s, y(e, i, s))
            }
        })
    }
    function i(e) {
        return s(function(t) {
            return x.Observable.fromPromise(C.ajax({
                url: R.sendTyping(),
                headers: {
                    "X-Auth-Token": t.token
                },
                data: {
                    chat_id: e
                },
                type: "POST",
                dataType: "json"
            }).promise())["catch"](function(e) {
                return e.status && 200 === e.status ? x.Observable.of(!0) : x.Observable["throw"](e)
            })
        })
    }
    function s(e) {
        return M.inject(e)
    }
    function n(e) {
        return k.isArray(e) || (e = [e]),
        s(function(t) {
            return x.Observable.fromPromise(C.ajax({
                url: R.getChatsStat(),
                data: {
                    chat_id: e
                },
                headers: {
                    "X-Auth-Token": t.token
                },
                type: "GET",
                dataType: "json"
            }).promise()).map(function(e) {
                return k.map(e.chats, function(e, t) {
                    return {
                        id: t,
                        count: e.total,
                        users: k.values(e.users)
                    }
                })
            })
        })
    }
    function o(e, t, i, n) {
        return s(function(s) {
            return x.Observable.fromPromise(C.ajax({
                url: R.sendMessage(e),
                data: {
                    text: t,
                    recipient_id: i,
                    callback_data: n
                },
                headers: {
                    "X-Auth-Token": s.token
                },
                type: "POST",
                dataType: "json"
            }).promise())
        })
    }
    function r(e, t, i) {
        return s(function(s) {
            return x.Observable.fromPromise(C.ajax({
                url: R.fetchMessages(e),
                data: {
                    offset: t,
                    limit: i
                },
                headers: {
                    "X-Auth-Token": s.token
                },
                type: "GET",
                dataType: "json"
            }).promise()).map(function(e) {
                return k.isUndefined(e) ? [] : e
            })
        })
    }
    function a() {
        return R
    }
    function l(e, t, i, s, n, o) {
        switch (e) {
        case $:
            return c(t, i, s);
        case T:
            return s = arguments[1],
            d(s);
        case S:
            return h(n, s, o);
        default:
            return x.Observable["throw"](new Error("Unsupported chat type " + e))
        }
    }
    function c(e, t, i) {
        return x.Observable.fromPromise(C.ajax({
            url: R.createChat(),
            type: "POST",
            data: {
                request: {
                    chats: {
                        create: {
                            type: "internal",
                            entity_id: e,
                            entity_type: t,
                            users: i || []
                        }
                    }
                }
            },
            dataType: "json"
        }).promise())
    }
    function d(e) {
        return x.Observable.fromPromise(C.ajax({
            url: R.createChat(),
            type: "POST",
            data: {
                request: {
                    chats: {
                        create: {
                            type: "direct",
                            users: e || []
                        }
                    }
                }
            },
            dataType: "json"
        }).promise())
    }
    function u(e) {
        return x.Observable.fromPromise(C.ajax({
            url: R.connectBot(),
            type: "POST",
            data: {
                request: {
                    chats: {
                        bots: {
                            connect: {
                                bot_id: e
                            }
                        }
                    }
                }
            },
            dataType: "json"
        }).promise())
    }
    function h(e, t, i) {
        return x.Observable.fromPromise(C.ajax({
            url: R.createChat(),
            type: "POST",
            data: {
                request: {
                    chats: {
                        create: {
                            type: "group",
                            users: t || [],
                            groups: i || [],
                            title: e
                        }
                    }
                }
            },
            dataType: "json"
        }).promise())
    }
    function _(e, t) {
        return x.Observable.just(t).map(function(t) {
            var i = {};
            return i[e] = {
                users: t
            },
            i
        }).switchMap(function(e) {
            return x.Observable.fromPromise(C.ajax({
                url: R.manageUsersInChat(),
                type: "POST",
                data: {
                    request: {
                        chats: {
                            users: {
                                add: e
                            }
                        }
                    }
                },
                dataType: "json"
            }).promise())
        })
    }
    function p(e, t) {
        return x.Observable.just(t).map(function(t) {
            var i = {};
            return i[e] = {
                users: t
            },
            i
        }).switchMap(function(e) {
            return x.Observable.fromPromise(C.ajax({
                url: R.manageUsersInChat(),
                type: "POST",
                data: {
                    request: {
                        chats: {
                            users: {
                                remove: e
                            }
                        }
                    }
                },
                dataType: "json"
            }).promise())
        })
    }
    function m() {
        return s(function(e) {
            return x.Observable.fromPromise(C.ajax({
                url: R.rtmStart(),
                headers: {
                    "X-Auth-Token": e.token
                },
                type: "POST",
                dataType: "json"
            }).promise())
        })
    }
    function f(e) {
        return x.Observable.fromPromise(C.ajax({
            url: R.getChat(e),
            type: "GET",
            dataType: "json"
        }).promise())
    }
    function g(e, t) {
        return x.Observable.fromPromise(C.ajax({
            url: R.getGroupChats(e, t),
            type: "GET",
            dataType: "json"
        }).promise())
    }
    function b(e, t, i) {
        var s = new j(t);
        return s.send(e).last().map(function(t) {
            return e.id = t.file_id,
            e
        }).switchMap(i)
    }
    function v(e, t, i) {
        return function(s) {
            return x.Observable.fromPromise(C.ajax({
                url: R.sendPhoto(e),
                data: {
                    file_id: s.id,
                    recipient_id: t,
                    text: s.desc
                },
                headers: {
                    "X-Auth-Token": i.token
                },
                type: "POST",
                dataType: "json"
            }))
        }
    }
    function y(e, t, i) {
        return function(s) {
            return x.Observable.fromPromise(C.ajax({
                url: R.sendDocument(e),
                data: {
                    file_id: s.id,
                    recipient_id: t,
                    text: s.desc
                },
                headers: {
                    "X-Auth-Token": i.token
                },
                type: "POST",
                dataType: "json"
            }))
        }
    }
    function w(e, t) {
        return x.Observable.fromPromise(C.ajax({
            url: R.updateChat(),
            type: "POST",
            data: {
                request: {
                    chats: {
                        update: {
                            type: "group",
                            chat_id: e,
                            title: t
                        }
                    }
                }
            },
            dataType: "json"
        }).promise())
    }
    var C = e("jquery")
      , k = e("underscore")
      , x = e("rxjs")
      , M = e("lib/interface/amojo/token_manager")
      , A = AMOCRM.constant("account") || {}
      , O = A.amojo_server
      , $ = "internal"
      , T = "direct"
      , S = "group"
      , E = 4
      , j = e("lib/interface/amojo/uploader")
      , R = {
        sendMessage: function(e) {
            return O + "/chats/" + A.amojo_id + "/" + e + "/messages"
        },
        sendPhoto: function(e) {
            return O + "/v2/" + e + "/sendPhoto"
        },
        sendDocument: function(e) {
            return O + "/v2/" + e + "/sendDocument"
        },
        sendTyping: function() {
            return O + "/v2/typing"
        },
        fetchMessages: function(e) {
            return O + "/chats/" + A.amojo_id + "/" + e + "/messages"
        },
        createChat: function() {
            return "/ajax/v1/chats/create"
        },
        connectBot: function() {
            return "/ajax/v1/chats/bots/connect"
        },
        manageUsersInChat: function() {
            return "/ajax/v1/chats/users"
        },
        rtmStart: function() {
            return O + "/rtm.start/" + A.amojo_id
        },
        getChat: function(e) {
            return "/ajax/v1/chats/list?fields=users&short=y&filter[chat_id]=" + e
        },
        getGroupChats: function(e, t) {
            return "/ajax/v1/chats/group_list?fields=" + (t || []).join(",")
        },
        getChatsStat: function() {
            return O + "/v2/stat/chats"
        },
        updateChat: function() {
            return "/ajax/v1/chats/update/"
        }
    };
    return {
        CHAT_INTERNAL: $,
        CHAT_DIRECT: T,
        CHAT_GROUP: S,
        CHAT_GROUP_TYPE: E,
        sendMessage: o,
        sendFile: t,
        sendTyping: i,
        getLinks: a,
        createChat: l,
        connectBot: u,
        addUsersToChat: _,
        fetchMessages: r,
        withToken: s,
        rtmStart: m,
        removeUsersFromChat: p,
        getChat: f,
        getGroupChats: g,
        getChatsStat: n,
        updateGroupChat: w
    }
}),
define("lib/interface/amojo/rtm", ["require", "underscore", "rxjs", "lib/interface/amojo/api", "lib/components/base/sockets/socket2v"], function(e) {
    "use strict";
    function t(e) {
        e = o.filter(o.isArray(e) ? e : [e], function(e) {
            return o.findWhere(d, {
                chat_id: e.chat_id
            }) ? !1 : (d.push(e),
            !0)
        }),
        e.length && n.send({
            action: "CHAT_ENTER",
            data: e
        })
    }
    function i(e) {
        e = o.filter(o.isArray(e) ? e : [e], function(e) {
            return o.findWhere(d, {
                chat_id: e.chat_id
            }) ? !0 : !1
        }),
        d = o.filter(d, function(t) {
            return !o.findWhere(e, t.chat_id)
        }),
        e.length && n.send({
            action: "CHAT_LEAVE",
            data: e
        })
    }
    function s() {
        return d.length && n.send({
            action: "CHAT_ENTER",
            data: d
        }),
        a.rtmStart().map(function(e) {
            return e.url
        })
    }
    var n, o = e("underscore"), r = e("rxjs"), a = e("lib/interface/amojo/api"), l = e("lib/components/base/sockets/socket2v"), c = AMOCRM.constant("account") || {}, d = [];
    return c.amojo_enabled ? (n = l(null, {
        connect: s
    }),
    o.extend({
        subscribe: t,
        unsubscribe: i
    }, n)) : r.Observable.empty()
}),
define("lib/components/base/autoload", ["require", "underscore", "vendor/Steady.js/Steady"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("vendor/Steady.js/Steady"), n = [];
    return t = function(e) {
        e = e || {},
        this.steady_loader = new s({
            scrollElement: e.element || window,
            conditions: e.conditions || {
                "max-bottom": 100
            },
            throttle: e.throttle || 100,
            handler: function(t, i) {
                e.onLoadMore(),
                i()
            }
        }),
        n.push(this.steady_loader)
    }
    ,
    t.prototype.destroy = function() {
        var e = i.indexOf(n, this.steady_loader);
        this.steady_loader && this.steady_loader.stop(),
        n.splice(e, 1)
    }
    ,
    t
}),
define("lib/interface/amojo/mediator", ["require", "underscore", "jquery"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = {
        add: [],
        remove: [],
        update: []
    }
      , n = "amojo_chats";
    return {
        get: function(e) {
            var i = AMOCRM.constant(n) || {};
            switch (e) {
            case "group":
                return t.pick(i, function(e) {
                    return "group" === e.entity_type
                });
            case "direct":
                return t.pick(i, function(e) {
                    return "direct" === e.entity_type
                });
            case "all":
                return i;
            default:
                return t.pick(i, function(e) {
                    return "group" !== e.entity_type && "direct" !== e.entity_type
                })
            }
        },
        set: function(e) {
            return AMOCRM.constant(n, e),
            !0
        },
        on: function(e, t) {
            s[e].push(t)
        },
        off: function(e, i) {
            var n = t.indexOf(s[e], i);
            s[e].splice(n, 1)
        },
        trigger: function(e, i) {
            t.each(s[e], function(e) {
                e.apply(null, i)
            })
        },
        addChat: function(e) {
            e && e.chat_id && (e = [e]),
            t.each(e, function(e) {
                t.isObject(e) && e.chat_id && this._addChat(e)
            }, this)
        },
        _addChat: function(e) {
            var t = this.get("all");
            return t[e.chat_id] = e,
            this.set(t),
            this.trigger("add", [e]),
            t
        },
        updateChat: function(e, t) {
            var s, n = this.get("all");
            return s = i.extend({}, n[e] || {}, t),
            n[e] = s,
            this.set(n),
            this.trigger("update", [e]),
            s
        },
        removeChat: function(e) {
            var i = t.without(this.get("all"), function(t) {
                return t.chat_id === e
            });
            return this.set(i),
            this.trigger("remove", [e]),
            i
        }
    }
}),
define("lib/interface/notes/views/typing", ["require", "underscore", "jquery", "twig", "lib/core/view"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("twig"), o = e("lib/core/view");
    return t = o.extend({
        typing_template: "/tmpl/notes/types/typing.twig",
        className: "feed-note-wrapper feed-note-wrapper-amojo feed-note-typing-wrapper-amojo",
        events: {
            "click .js-target_typing": "onAmoJoReplyClick"
        },
        _classes: function() {
            return {
                filter_typing: "feed-note__typing"
            }
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.listenTo(this.model, "remove", i.bind(this.destroy, this, !0))
        },
        onAmoJoReplyClick: function(e) {
            e.stopPropagation(),
            this._$document.trigger("notes:compose:switch", ["chat", {
                user_id: s(e.currentTarget).attr("data-id")
            }])
        },
        render: function() {
            return n._preload([this.typing_template])().then(i.bind(this._render, this))
        },
        _render: function() {
            this.$el.append(n({
                ref: this.typing_template
            }).render({
                amo_author: this.model.attributes,
                note_class_name: this._class("filter_typing")
            }))
        }
    })
}),
define("lib/interface/notes/mixins/typing", ["require", "underscore", "jquery", "twig", "backbone", "lib/core/users", "lib/interface/notes/views/typing"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = (e("jquery"),
    e("twig"),
    e("backbone"))
      , s = e("lib/core/users")
      , n = e("lib/interface/notes/views/typing");
    return {
        initCollection: function() {
            this.typing = new i.Collection([]),
            this.listenTo(this.typing, "add", this.renderTyping)
        },
        removeTypingAfterSendMessage: function(e) {
            var i = t.find(s.get(!0), function(t) {
                return e.id === t.amojo_id
            });
            !t.isUndefined(i) && this.all_printing[i.amojo_id] && (clearTimeout(this.all_printing[i.amojo_id]),
            this.typing.remove(i.id))
        },
        _onTypingFromSocket: function(e, i) {
            var n = t.find(s.get(!0), function(e) {
                return i.user_id === e.amojo_id
            });
            t.isUndefined(n) || parseInt(n.id) === s.current("id") || (n._type = e,
            this.all_printing[n.amojo_id] && clearTimeout(this.all_printing[n.amojo_id]),
            this.all_printing[n.amojo_id] = setTimeout(t.bind(function() {
                this.typing.remove(n.id)
            }, this), 6e3),
            this.typing.add(n))
        },
        destroy: function() {
            t.each(this.all_printing, clearTimeout)
        },
        renderTyping: function(e, t, i) {
            var s = this.scrollFromTyping()
              , o = this._addComponent(n, {
                model: e
            });
            o.render().then(s),
            this._findElem("typing_wrapper").append(o.$el)
        }
    }
}),
define("lib/components/base/inbox/constants", ["require"], function(e) {
    "use strict";
    return {
        STATE_UNINITIALIZED: -1,
        STATE_SHOW_CONTENT: 1,
        STATE_SHOW_LOADING: 2,
        STATE_SHOW_ERROR: 3,
        EVENT_READ: "read",
        EVENT_DELETE: "delete",
        EVENT_NEW: "new",
        LOCAL_STORAGE_KEY: "_amojo_direct",
        PAGE_COUNT: 50,
        ENTER: 13,
        ESC_KEY: 27,
        ENTER_KEY: 13,
        ARROW_DOWN: 40,
        ARROW_UP: 38,
        TYPE_DIRECT: "chat_direct",
        TYPE_GROUP: "chat_group",
        SYSTEM_CREATE_GROUP: "group_chat_create",
        AMO_CHATS_GROUP_TYPE: 18
    }
}),
define("lib/components/base/inbox/chat_collection", ["require", "twig", "lib/core/view", "backbone", "lib/components/base/inbox/constants"], function(e) {
    "use strict";
    var t, i, s, n = e("twig"), o = e("lib/core/view"), r = e("backbone"), a = e("lib/components/base/inbox/constants");
    return i = r.Model.extend({
        sticky_offset: 6e4,
        isLaterThen: function(e, t) {
            return this.get("created_at") >= e.get("created_at") && (!t || this.isNearTo(e))
        },
        isEarlierThen: function(e, t) {
            return this.get("created_at") <= e.get("created_at") && (!t || this.isNearTo(e))
        },
        isNearTo: function(e) {
            var t = 1e3 * this.get("created_at")
              , i = 1e3 * e.get("created_at")
              , s = Math.max(t, i)
              , n = Math.min(t, i);
            return s - n <= this.sticky_offset
        },
        isSameDay: function(e) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return moment.unix(this.get("created_at")).isSame(moment.unix(e.get("created_at")), "day")
        },
        isSameAuthor: function(e) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return this.get("author").id == e.get("author").id
        },
        isSameRecipient: function(e) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return this.get("recipient") && e.get("recipient") ? this.get("recipient").id == e.get("recipient").id : !1
        },
        isGroup: function() {
            return this.get("type") === a.TYPE_GROUP
        }
    }),
    s = o.extend({
        ns: ".chat_message",
        direct_template: "/tmpl/inbox/direct_chat/item.twig",
        group_template: "/tmpl/inbox/group_chat/item.twig",
        separator_template: "/tmpl/inbox/direct_chat/date_separator.twig",
        events: {
            "click .js-inline-keyboard button": "onInlineButtonClick"
        },
        onInlineButtonClick: function(e) {
            e.stopPropagation(),
            e.preventDefault();
            var t = $(e.currentTarget);
            this.trigger("inline_button_clicked", {
                model: this.model,
                message: t.text(),
                callback_data: t.val()
            })
        },
        _selectors: function() {
            return {
                item: ".feed-note-wrapper-amojo",
                inline_buttons: ".inline_keyboard button"
            }
        },
        _classes: function() {
            return {
                hidden_item: "feed-note-wrapper_hidden",
                compact_item: "feed-note-wrapper_compact"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            this.model.view = this,
            this.listenTo(this.model, "change", this.re_render),
            o.prototype.initialize.apply(this, arguments)
        },
        renderTemplate: function() {
            var e = this._isGroup() ? this.group_template : this.direct_template;
            return n({
                ref: e
            }).render(this.model.toJSON())
        },
        render: function() {
            this.setElement($(this.renderTemplate())),
            this.options.$container[this.options.method](this.$el),
            this.setRepresentation(),
            this.show()
        },
        re_render: function() {
            if (this.$el) {
                var e = $(this.renderTemplate());
                this._elem("item").html(e.html()),
                this.setRepresentation()
            }
        },
        show: function() {
            this.$el.removeClass("feed-note-wrapper_hidden")
        },
        hide: function() {
            this.$el.addClass("feed-note-wrapper_hidden")
        },
        setRepresentation: function() {
            this.model.get("first_for_day") ? this.addDaySeparator() : this.removeDaySeparator(),
            this._toggleClass("compact_item", this.model.get("compact"))
        },
        addDaySeparator: function() {
            this.$separator || (this.$separator = $(n({
                ref: this.separator_template
            }).render(this.model.toJSON()))),
            this.$el.before(this.$separator)
        },
        removeDaySeparator: function() {
            this.$separator && (this.$separator.remove(),
            this.$separator = null)
        },
        _isGroup: function() {
            return this.options.type === a.TYPE_GROUP
        }
    }),
    t = r.Collection.extend({
        model: i,
        initialize: function() {
            this.listenTo(this, "add", this.onAdd)
        },
        onAdd: function(e, t, i) {
            var s, n, o, r, a = this.length - 1, l = this.at(0) === e;
            e.toJSON();
            return a > 0 && (s = l ? this.at(1) : this.at(a - 1)),
            s ? (n = s.toJSON(),
            o = this.isMessagesAtSameDay(s, e),
            r = this.isMessagesFromSameAuthor(s, e),
            e.isGroup && (r = r && this.isMessagesFromSameRecipient(s, e)),
            void (l ? (e.set({
                first_for_day: !0,
                compact: !1
            }),
            s.set({
                compact: o && e.isEarlierThen(s, !0) && r,
                first_for_day: !o
            })) : e.set({
                compact: o && e.isLaterThen(s, !0) && r,
                first_for_day: !o
            }))) : void e.set({
                first_for_day: !0,
                compact: !1
            })
        },
        isMessagesAtSameDay: function(e, t) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return e.isSameDay(t)
        },
        isMessagesFromSameAuthor: function(e, t) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return e.isSameAuthor(t)
        },
        isMessagesFromSameRecipient: function(e, t) {
            if (!(e instanceof i))
                throw "Invalid argument";
            return e.isSameRecipient(t)
        }
    }),
    {
        Collection: t,
        Model: i,
        View: s
    }
}),
function() {
    var e = {}.hasOwnProperty
      , t = function(t, i) {
        function s() {
            this.constructor = t
        }
        for (var n in i)
            e.call(i, n) && (t[n] = i[n]);
        return s.prototype = i.prototype,
        t.prototype = new s,
        t.__super__ = i.prototype,
        t
    };
    !function(e, t) {
        return ("undefined" != typeof define && null !== define ? define.amd : void 0) ? define("backbone.hal", ["backbone", "underscore"], t) : e.HAL = t(Backbone, _)
    }(this, function(e, i) {
        var s, n;
        return n = function(e) {
            function s(e, t) {
                s.__super__.constructor.call(this, this.parse(i.clone(e)), t)
            }
            return t(s, e),
            s.prototype.parse = function(e) {
                return null == e && (e = {}),
                this.links = e._links || {},
                delete e._links,
                this.embedded = e._embedded || {},
                delete e._embedded,
                e
            }
            ,
            s.prototype.url = function() {
                var e, t;
                return (null != (e = this.links) && null != (t = e.self) ? t.href : void 0) || s.__super__.url.call(this)
            }
            ,
            s.prototype.isNew = function() {
                var e;
                return !(null != (e = this.links) ? e.self : void 0)
            }
            ,
            s
        }(e.Model),
        s = function(e) {
            function s(e, t) {
                i.isArray(e) || (e = this.parse(i.clone(e))),
                s.__super__.constructor.call(this, e, t)
            }
            return t(s, e),
            s.prototype.parse = function(e) {
                var t;
                return null == e && (e = {}),
                this.links = e._links || {},
                delete e._links,
                this.embedded = e._embedded || {},
                delete e._embedded,
                this.attributes = e || {},
                t = null != this.itemRel ? this.embedded[this.itemRel] : this.embedded.items
            }
            ,
            s.prototype.reset = function(e, t) {
                return null == t && (t = {}),
                i.isArray(e) || (e = this.parse(i.clone(e))),
                t.parse = !1,
                s.__super__.reset.call(this, e, t)
            }
            ,
            s.prototype.url = function() {
                var e, t;
                return null != (e = this.links) && null != (t = e.self) ? t.href : void 0
            }
            ,
            s
        }(e.Collection),
        {
            Model: n,
            Collection: s
        }
    })
}
.call(this),
define("lib/interface/notes/models/mixins/task", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        _tempTemplate: t.template('<div id="note_temp_<%= id %>"><input type="hidden" value="" name="comments[<%= id %>][DATE_CREATE]"><input type="hidden" value="<%= created_by %>" name="comments[<%= id %>][CREATED_BY]"><textarea class="hidden" name="comments[<%= id %>][body]"><%= data.text %></textarea><input type="hidden" value="<%= responsible_user %>" name="comments[<%= id %>][MAIN_USER]" /><input type="hidden" value="<%= type %>" name="comments[<%= id %>][TASK_TYPE]" /><input type="hidden" value="<%= complete_till %>" name="comments[<%= id %>][END_DATE]" /></div>'),
        _updateModel: function(e) {
            e.task && (e.task.id && this.set("id", e.task.id),
            e.task.date && this.set("complete_till", e.task.date),
            e.task.result_id && this.set("result_id", e.task.result_id))
        },
        _getSyncData: function(e) {
            switch (e) {
            case "create":
                return {
                    ID: this.get("element_id"),
                    ACTION: "ADD_TASK",
                    BODY: this.get("data").text,
                    MAIN_USER: this.get("responsible_user"),
                    TASK_TYPE: this.get("type"),
                    END_DATE: this.get("complete_till"),
                    DISABLE_WEBHOOKS: "N",
                    ELEMENT_TYPE: this.get("element_type")
                };
            case "update":
                return {
                    ID: this.get("id"),
                    ACTION: "EDIT_TASK",
                    BODY: this.get("data").text,
                    MAIN_USER: this.get("responsible_user"),
                    TASK_TYPE: this.get("type"),
                    END_DATE: this.get("complete_till"),
                    MAIN_USER_CHANGED: this.get("responsible_user")
                };
            case "delete":
                return {
                    ID: this.get("id"),
                    ACTION: "TASK_DELETE"
                };
            case "complete":
                return {
                    ID: this.get("id"),
                    ACTION: "COMPLATE_TASK",
                    result: this.get("result_text")
                }
            }
        },
        _generateEmpty: function() {
            var e = AMOCRM.constant("user") || {};
            return {
                type: 1,
                editable: !0,
                deletable: !1,
                data: {
                    text: AMOCRM.lang.tasks_follow_up,
                    params: {}
                },
                responsible_user: e.id,
                created_by: e.id,
                object_type: {
                    code: "tasks",
                    id: 4
                }
            }
        },
        _getResult: function() {
            return this.get("status") && this.collection ? this.collection.getOriginCollection(this).tasks_results.findWhere({
                element_id: this.id
            }) : void 0
        },
        complete: function(e) {
            return e = e || {},
            this.sync("complete", this, {
                success: t.bind(function() {
                    e.silent || this.trigger("sync", this)
                }, this)
            })
        },
        _setModelResult: function(e) {
            var i, s = this._getResult(), n = "update", o = {
                element_id: this.id,
                is_new: !0,
                object_type: {
                    id: 5,
                    code: "notes"
                },
                type: AMOCRM.note_types.task_result
            }, r = this.get("result_id");
            return s || (r && (o.id = r),
            i = this.collection.getOriginCollection(this),
            s = i.tasks_results.add(o),
            n = "create"),
            s.set("data", t.extend(s.get("data"), {
                text: e
            })),
            {
                model: s,
                action: n
            }
        },
        result: function(e) {
            var i = this._setModelResult(e);
            return i.model.sync(i.action, this, {
                success: t.bind(function() {
                    this.trigger("sync", this)
                }, this)
            })
        },
        resultNotSync: function(e) {
            this._setModelResult(e),
            this.trigger("sync", this)
        }
    }
}),
define("lib/interface/notes/models/mixins/task_result", ["require"], function(e) {
    "use strict";
    return {
        _updateModel: function(e) {
            e.note && e.note.id && this.set("id", e.note.id)
        },
        _getSyncData: function(e) {
            switch (e) {
            case "create":
                return {
                    ID: this.get("element_id"),
                    ACTION: "ADD_NOTE",
                    NOTE_TYPE: this.get("type"),
                    BODY: this.get("data").text,
                    ELEMENT_TYPE: 4
                };
            case "update":
                return {
                    ID: this.get("id"),
                    ACTION: "EDIT_NOTE",
                    NOTE_TYPE: this.get("type"),
                    BODY: this.get("data").text,
                    ELEMENT_TYPE: 4
                }
            }
        },
        _generateEmpty: function() {
            var e = AMOCRM.constant("user") || {};
            return {
                created_by: e.id,
                data: {
                    text: "",
                    params: {}
                },
                date_create: moment().unix(),
                deletable: !0,
                editable: !0,
                element_type: 4,
                responsible_user: e.id,
                type: 13,
                object_type: {
                    code: "notes",
                    id: 5
                }
            }
        }
    }
}),
define("lib/interface/notes/models/mixins/note", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        _tempTemplate: t.template('<% if (data && data.text) { %><div id="note_temp_<%= id %>"><input type="hidden" value="<%= date_create %>" name="comments[<%= id %>][DATE_CREATE]" ><input type="hidden" value="<%= created_by %>" name="comments[<%= id %>][CREATED_BY]" ><textarea class="hidden" name="comments[<%= id %>][body]"><%= data.text %></textarea><input type="hidden" value="<%= data.params.link %>" name="comments[<%= id %>][ATTACHEMENT]" ></div><% } %>'),
        _updateModel: function(e) {
            e.note && e.note.id && this.set("id", e.note.id)
        },
        _getSyncData: function(e) {
            switch (e) {
            case "create":
                return {
                    ID: this.get("element_id"),
                    DATE_CREATE: this.get("date_create"),
                    ACTION: "ADD_NOTE",
                    ATTACH: this.get("data").params ? this.get("data").params.link : "",
                    BODY: this.get("data").text,
                    ELEMENT_TYPE: this.get("element_type")
                };
            case "update":
                return {
                    ID: this.get("id"),
                    ACTION: "EDIT_NOTE",
                    BODY: this.get("data").text
                };
            case "delete":
                return {
                    ID: this.get("id"),
                    ACTION: "NOTE_DELETE"
                }
            }
        },
        pin: function() {
            return $.ajax({
                url: "/v3/notes/" + this.get("id"),
                type: "patch",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    pinned: this.get("pinned")
                })
            })
        },
        _generateEmpty: function() {
            return {
                type: AMOCRM.note_types.common,
                editable: !0,
                deletable: !1,
                date_create: moment().unix(),
                data: {
                    text: "",
                    params: {}
                },
                created_by: (AMOCRM.constant("user") || {}).id,
                object_type: {
                    code: "notes",
                    id: 5
                }
            }
        }
    }
}),
define("lib/interface/notes/templates", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = [1, 2, 3, 6, 9, 8, 12, 14, 16, 18, 19, 20, 22, 23, 25];
    return t.extend({}, t.invert(AMOCRM.note_types), {
        15: "mail_message",
        6: "system_note",
        10: "call_in_out",
        11: "call_in_out",
        4: "note",
        9: "system_note",
        8: "system_note",
        14: "main_user_changed",
        16: "site_visit",
        18: "system_note",
        19: "system_note",
        20: "lead_auto_created",
        22: "customer_created",
        23: "transaction",
        25: "service_message",
        101: "dropbox",
        102: "sms",
        103: "sms",
        24: "geolocation",
        tabula_note: "tabula_note",
        _isSystem: function(e, s) {
            return t.indexOf(i, e) + 1 && "tasks" !== s ? !0 : !1
        },
        _get: function(e, t) {
            return "tasks" === t ? "task" : this[e]
        }
    })
}),
define("lib/interface/notes/model", ["require", "underscore", "jquery", "backbone", "backbone.hal", "cocktail", "lib/common/fn", "lib/interface/notes/models/mixins/task", "lib/interface/notes/models/mixins/task_result", "lib/interface/notes/models/mixins/note", "lib/interface/notes/templates"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("backbone")
      , n = e("backbone.hal")
      , o = e("cocktail")
      , r = e("lib/common/fn")
      , a = e("lib/interface/notes/models/mixins/task")
      , l = e("lib/interface/notes/models/mixins/task_result")
      , c = e("lib/interface/notes/models/mixins/note")
      , d = e("lib/interface/notes/templates")
      , u = t.invert(d);
    return n.Model.extend({
        initialize: function() {
            var e = this.get("type");
            switch (t.isString(e) && this.set("type", u[e]),
            this.get("object_type") || this.set("object_type", this._getObjectType()),
            this.get("object_type").code) {
            case "tasks":
                o.mixin(this, a);
                break;
            default:
                this.get("type") === AMOCRM.note_types.task_result ? o.mixin(this, l) : o.mixin(this, c)
            }
            (this.get("is_add") || this.get("is_new")) && this.set(this._generateEmpty())
        },
        _getObjectType: function() {
            return this.get("chat_id") ? {
                code: "chats",
                id: "wtf?!"
            } : {
                code: "notes",
                id: 5
            }
        },
        parse: function(e) {
            return e = e || {},
            !t.isEmpty(this.links) && t.isEmpty(e.links) ? e : n.Model.prototype.parse.apply(this, arguments)
        },
        _generateEmpty: function() {
            return {}
        },
        _getSyncData: function() {
            return {}
        },
        isNew: function() {
            return s.Model.prototype.isNew.apply(this, arguments)
        },
        _updateModel: t.noop,
        sync: function(e, s, n) {
            return this._pending || (this._pending = !0,
            this._loading = new Promise(t.bind(function(s, o) {
                this.trigger("request", this),
                this.get("element_id") ? i.ajax({
                    url: "/private/notes/edit2.php",
                    data: this._getSyncData(e),
                    dataType: "json",
                    type: "POST"
                }).always(t.bind(function() {
                    this._pending = !1
                }, this)).done(t.bind(function(e) {
                    "ok" === e.status ? (this._updateModel(e),
                    n.success && n.success(),
                    s({
                        status: 1
                    })) : o({
                        status: 0,
                        response: e
                    })
                }, this)).fail(function() {
                    o({
                        status: 0
                    })
                }) : (this._pending = !1,
                this.get("id") || this.set("id", r.randHex() + "-" + r.randHex()),
                n.success && n.success(),
                s())
            }, this))),
            this._loading
        }
    })
}),
define("lib/interface/notes/views/mixins/togglable", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = function(e) {
        return "tasks" === e.get("object_type").code && !e.get("status")
    };
    return {
        events: {
            "mouseenter .js-note-context": "maybeSomeActionsYes",
            "mouseleave .js-note-context": "maybeSomeActionsNo",
            swipe: "switchActionsSwipe",
            "actions:toggle": "toggleActionsTrigger"
        },
        switchActionsSwipe: function(e, t, i) {
            1 === t && 0 === i && this.toggleActions(!1),
            -1 === t && 0 === i && this.maybeSomeActionsYes()
        },
        maybeSomeActionsYes: function() {
            var e = this.$el.find(".feed-note__context");
            !this.model.get("id") || i(this.model) || this._editing || (this.$el.addClass("fixed"),
            e.addClass("feed-note__context_opened"))
        },
        maybeSomeActionsNo: function() {
            this.$el.addClass("fixed").find(".feed-note__context").removeClass("feed-note__context_opened")
        },
        toggleActionsTrigger: function(e, i) {
            i = t.isBoolean(i) ? i : !this.$el.hasClass("hovered"),
            this.toggleActions(i)
        },
        toggleActions: function(e) {
            !this.model.get("editable") && !this.model.get("deletable") || !this.model.get("id") || i(this.model) || this._editing || (e ? this.$el.addClass("hovered") : this.$el.removeClass("hovered fixed").find(".feed-note:first").css(Modernizr.prefixed("transform"), ""))
        }
    }
}),
define("lib/components/base/form", ["require", "jquery", "underscore", "backbone", "elements_view"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("backbone")
      , n = e("elements_view")
      , o = {};
    return o.Model = s.Model.extend({
        initialize: function() {
            this.defaults = i.clone(this.attributes)
        },
        setDefaults: function() {
            this.defaults = i.defaults(this.defaults, this.attributes)
        },
        updateDefaults: function() {
            this.defaults = i.extend(this.defaults, this.attributes)
        },
        hasChanges: function() {
            return !i.isEqual(this.attributes, this.defaults)
        }
    }),
    o.View = n.extend({
        events: {
            "input :input": "changeInModel",
            "change :input": "changeInModel",
            "controls:change :input": "changeInModel"
        },
        initialize: function(e) {
            var s = {
                _onSave: i.noop,
                onSaveError: i.noop,
                onSaveForm: i.noop
            }
              , n = e && e.model || o.Model;
            this.ns = i.uniqueId(".amo:base:form:"),
            this.options = t.extend({}, s, e),
            this.model = new n,
            this.initModelFromForm(e)
        },
        destroy: function() {
            this.undelegateEvents().stopListening()
        },
        save: function(e) {
            var s = this
              , n = t.extend({
                success: i.noop,
                error: i.noop
            }, e || {});
            this.model.save({
                success: i.bind(function(e) {
                    this.updateDefaults(),
                    "function" == typeof s.options._onSave && s.options._onSave.call(this, e),
                    "function" == typeof s.options.onSaveForm && s.options.onSaveForm.call(this, e),
                    n.success.call(this, e),
                    s.checkChanges()
                }, this.model),
                error: function(e) {
                    i.isFunction(s.options._onError) && s.options._onError.call(this, e),
                    "function" == typeof s.options.onSaveError && s.options.onSaveError.call(this, e),
                    n.error.call(this, e)
                }
            })
        },
        revert: function() {
            this.model.attributes = i.clone(this.model.defaults),
            i.each(this.model.attributes, function(e, t) {
                this.setInputValue(this.$(':input[name="' + t + '"]'), e, t)
            }, this),
            this.model.trigger("has_reverted")
        },
        checkDeleted: function() {
            var e = this;
            i.each(this.model.attributes, function(t, i) {
                e.$el.find(':input[name="' + i + '"]').length || delete e.model.attributes[i]
            }, this),
            this.checkChanges()
        },
        initModelFromForm: function() {
            this._initModelFromForm(),
            this.model.setDefaults(),
            this.setUrl()
        },
        updateModelFromForm: function() {
            this._initModelFromForm({
                update: !0
            }),
            this.checkChanges()
        },
        setTrackingInputs: function(e) {
            this._initModelFromForm({
                $elem: e
            }),
            this.model.setDefaults()
        },
        _initModelFromForm: function(e) {
            e = e || {},
            i.each((e.$elem || this.$el).find(":input"), function(s) {
                var n = t(s)
                  , o = this.model.get(n.attr("name"));
                ((i.isUndefined(o) || "" === o) && !n.hasClass("js-form-changes-skip") || e.update) && this.model.set(n.attr("name"), this.getInputValue(n))
            }, this)
        },
        setUrl: function(e) {
            this.model.url = e || this.$el.attr("action")
        },
        hasChanges: function() {
            return this.model.hasChanges()
        },
        setInputValue: function(e, t, i) {
            var s = e.attr("type");
            switch (i = i || e.attr("name"),
            s) {
            case "checkbox":
                e.prop("checked", t);
                break;
            case "radio":
                e = e.closest('[name="' + i + '"][value="' + t + '"]'),
                e.prop("checked", !0);
                break;
            default:
                e.val(t)
            }
            e.trigger("change").trigger("controls:change"),
            this.model.set(i, t)
        },
        getInputValue: function(e) {
            var i = "";
            switch (e.attr("type")) {
            case "checkbox":
            case "radio":
                i = e.prop("checked") ? e.val() || "on" : "";
                break;
            default:
                i = t.trim(e.val())
            }
            return i
        },
        changeInModel: function(e) {
            var i = t(e.currentTarget);
            i.hasClass("js-form-changes-skip") || (this.model.set(i.attr("name"), this.getInputValue(i)),
            this.checkChanges())
        },
        checkChanges: function() {
            var e = this.hasChanges()
              , t = "has_changes";
            return e || (t = "has_reverted"),
            this.model.trigger(t, {
                type: t
            }),
            e
        }
    }),
    o
}),
define("lib/components/filter/form", ["require", "jquery", "underscore", "lib/components/base/form"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/base/form")
      , n = {}
      , o = function(e) {
        return e && "object" == typeof e ? i.isString(e) ? String.prototype.slice.call(e) : i.isDate(e) ? new Date(e.valueOf()) : i.isFunction(e.clone) ? e.clone() : i.isArray(e) ? i.map(e, function(e) {
            return o(e)
        }) : i.mapObject(e, function(e, t) {
            return o(e)
        }) : e
    }
      , r = function(e, t) {
        return function(i) {
            var s = arguments.length;
            if (2 > s || null == i)
                return i;
            for (var n = 1; s > n; n++)
                for (var r = arguments[n], a = e(r), l = a.length, c = 0; l > c; c++) {
                    var d = a[c];
                    t && void 0 !== i[d] || (i[d] = o(r[d]))
                }
            return i
        }
    }
      , a = r(i.allKeys, !0);
    return n.Model = s.Model.extend({
        initialize: function() {
            this.defaults = o(this.attributes)
        },
        setDefaults: function() {
            this.defaults = a(this.defaults, this.attributes)
        },
        updateDefaults: function() {
            this.defaults = t.extend(!0, {}, this.defaults, this.attributes)
        },
        set: function(e, t, n) {
            i.isArray(t) && (t = i(t).sort()),
            s.Model.prototype.set.call(this, e, t, n)
        }
    }),
    n.View = s.View.extend({
        _cached_form_html: null,
        destroy: function() {
            this.remove(!1)
        },
        revert: function() {
            this.model.attributes = o(this.model.defaults),
            this._cached_form_html && this.$el.html(this._cached_form_html),
            this.model.trigger("has_reverted")
        },
        initModelFromForm: function() {
            this._cached_form_html = this.$el.html(),
            i.each(this.$(":input"), function(e) {
                this.setModelValue(t(e))
            }, this),
            this.model.setDefaults(),
            this.model.url = this.$el.attr("action")
        },
        setInputValue: function(e, t, i, s) {
            var n = e.attr("type");
            switch (s = s || {},
            i = i || e.attr("name"),
            n) {
            case "checkbox":
            case "radio":
                e.prop("checked", t);
                break;
            default:
                e.val(t)
            }
            s.silent || e.trigger("change").trigger("controls:change"),
            this.setModelValue(e)
        },
        changeInModel: function(e) {
            this.setModelValue(t(e.currentTarget)),
            this.checkChanges()
        },
        setModelValue: function(e) {
            var t, s = e.attr("name"), n = this.model.get(s);
            if (e.length && s && !e.hasClass("js-form-changes-skip") && !e.attr("disabled")) {
                switch (e[0].type) {
                case "checkbox":
                    if (t = this.getInputValue(e),
                    n)
                        switch (i.isArray(n) || (n = [n]),
                        t ? n.push(t) : n = i.without(n, e.val()),
                        t = i.sortBy(i.uniq(n), function(e) {
                            return (e || "").toString()
                        }),
                        t.length) {
                        case 1:
                            t = t[0];
                            break;
                        case 0:
                            t = ""
                        }
                    break;
                default:
                    t = this.getInputValue(e)
                }
                this.model.set(s, t)
            }
        }
    }),
    n
}),
define("lib/interface/notes/form", ["require", "lib/components/filter/form"], function(e) {
    "use strict";
    var t = e("lib/components/filter/form");
    return t.View.extend({
        revert: function() {
            return this._cached_form_html = null,
            t.View.prototype.revert.apply(this, arguments)
        },
        getInputValue: function(e) {
            var i = t.View.prototype.getInputValue.apply(this, arguments)
              , s = this.model.get(e.attr("name"));
            return "radio" === e.attr("type") && s && !i ? s : i
        }
    })
}),
define("lib/interface/notes/views/mixins/editable", ["require", "underscore", "lib/interface/notes/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/form")
      , s = 27
      , n = 13
      , o = function() {
        arguments[0] && arguments[0].stopPropagation && arguments[0].stopPropagation()
    };
    return {
        events: {
            keydown: "hotkeys",
            "click .js-note": "_setEditClick",
            "click .js-note-edit-mode-btn": "_setEditClick",
            "click .js-note-edit-cancel": "cancel",
            "click .js-note-add-cancel": "cancel",
            "click .js-note-submit:not(.button-input-disabled)": "save",
            "click .js-note-delete-btn": "delete",
            "focus textarea": "_putCursorToEnd"
        },
        hotkeys: function(e) {
            switch (!0) {
            case e.keyCode === s:
                this.cancel();
                break;
            case e.keyCode === n && (e.ctrlKey || e.metaKey):
                this.save()
            }
        },
        cancel: function() {
            o.apply(this, arguments),
            this._editing = !1,
            this._form && (this._form.revert(),
            this._form.destroy(),
            this._form = null),
            this._setChanges(!1),
            this._render(),
            this.model.trigger("notes:update-sticky")
        },
        _setEditClick: function(e) {
            var t = $(e.target)
              , i = t.add(e.target.parentNode).add(e.target.parentNode.parentNode);
            (i.is(":input, label") || this.model.get("editable") && !i.is("a")) && e.stopPropagation(),
            !i.is("a, :input, label") && this.model.get("editable") && (this._$document.trigger("controls:hide"),
            this.setEdit())
        },
        setEdit: function() {
            this._editing || this.model.get("editable") !== !0 || (t.isFunction(this.options.onEdit) ? this.options.onEdit(this) : this.edit())
        },
        _setChanges: function(e) {
            t.isBoolean(e) && e === !1 ? this._changes = {} : t.extend(this._changes, e),
            this._highlightSave(this.hasChanges())
        },
        hasChanges: function() {
            var e = t.unique(t.values(this._changes));
            return 2 === e.length || e[0] === !0
        },
        _copyFormToModel: function() {
            this.model.set("data", t.extend({}, this.model.get("data"), {
                text: this._form.model.get("text")
            }))
        },
        save: function() {
            return o.apply(this, arguments),
            this.model._pending || !t.isEmpty(this.validate()) ? new Promise(t.bind(function(e, t) {
                this._findElem("submit").trigger("button:load:stop"),
                t("Model is loading or no changes")
            }, this)) : (this._findElem("submit").trigger("button:load:start", ["white"]),
            this._copyFormToModel(),
            this.model.save().then(t.bind(this.cancel, this), t.bind(function() {
                this._findElem("submit").trigger("button:load:stop")
            }, this)))
        },
        edit: function(e) {
            this.toggleActions && this.toggleActions(!1),
            this._editing = !0,
            this._changes = {},
            this._render("edit"),
            AMOCRM.is_touch_device || e === !1 || this.$("textarea").trigger("controls:textarea:autosize").focus(),
            this._initForm()
        },
        _initForm: function() {
            this._changes = {},
            this._form = this._addComponent(i, {
                el: this.el
            }),
            this._form.model.on("has_changes has_reverted", t.bind(function(e) {
                e && this._setChanges({
                    form: "has_changes" === e.type
                })
            }, this), this)
        },
        _highlightSave: function(e) {
            var t = this._findElem("submit");
            e === !1 && t.trigger("button:load:stop"),
            t.trigger("button:" + (e ? "enable" : "disable"))
        },
        _putCursorToEnd: function(e) {
            var t, i = e.currentTarget, s = $(i), n = s.is("[contenteditable]") ? "text" : "val";
            i.setSelectionRange ? (t = 2 * s[n]().length,
            setTimeout(function() {
                i.setSelectionRange(t, t)
            }, 1)) : s[n](s[n]()),
            i.scrollTop = 999999
        },
        validate: function(e) {
            return e = e || {},
            this._form.model.get("text") || (e = t.extend(e || {}, {
                text: !1
            }),
            this.$el.addClass("note-has-error")),
            e
        }
    }
}),
define("lib/components/base/modal", ["require", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = i(document), r = i(window), a = s.template('<div class="modal <%= class_name %>"><div class="modal-scroller custom-scroll"><div class="modal-body modal-body-loading <% if (float_animation) { %>modal-body-float-animation<% } %>"></div></div></div>');
    return t = function(e) {
        var t = this;
        return this.ns = ".modal:core." + s.uniqueId("modal_"),
        this.options = i.extend({
            class_name: "modal-list",
            can_centrify: !1,
            init: s.noop,
            destroy: s.noop,
            container: document.body,
            disable_overlay_click: !1,
            init_animation: !1,
            focus_element: ".js-modal-accept",
            show_loader: !0
        }, e),
        this.$modal = i(a({
            class_name: this.options.class_name,
            float_animation: this.options.init_animation
        })),
        this.$overlay = i('<div class="default-overlay modal-overlay"><span class="modal-overlay__spinner spinner-icon spinner-icon-abs-center"></span></div>'),
        this.$modal.children(".modal-scroller").append(this.$overlay),
        i(this.options.container).append(this.$modal),
        i(".modal").length > 1 && this.$overlay.css(Modernizr.prefixed("transition"), "none"),
        this.options.show_loader ? this.$overlay.trigger("overlay:show") : this.$overlay.trigger("overlay:fix"),
        this.disable_overlay_click = this.options.disable_overlay_click,
        this.$modal.find(t.options.focus_element).focus(),
        this.$modal.on("click", ".js-modal-try-again", function() {
            var e = i(this).closest(".modal-body").css("width", "");
            e.find(".js-modal-error").remove(),
            e.find(".modal-body__inner").show(),
            e.trigger("modal:centrify")
        }).on("click", ".modal-body__actions .button-cancel, .modal-body__close, .modal-scroller", function(e) {
            var s = i(e.target);
            return (s.hasClass("modal-scroller") || s.hasClass("modal-overlay")) && !t.disable_overlay_click || s.closest(".button-cancel").length && !t.disable_cancel_click || s.closest(".modal-body__close").length ? (t.destroy(),
            !1) : void 0
        }).on("click", ".js-modal-accept", function() {
            t.$overlay.find(".modal-overlay__spinner").show()
        }).on("modal:loaded", ".modal-body", function() {
            var e = i(this);
            e.removeClass("modal-body-loading")
        }).on("modal:centrify", ".modal-body:visible", function() {
            var e, s = i(this), n = this.offsetHeight, o = this.parentNode.offsetHeight;
            t.$overlay.find(".modal-overlay__spinner").hide(),
            o > n ? (e = this.offsetWidth,
            s.css("margin-top", -(o / 2 - n / 2 + n)).css("margin-left", "-" + (e / 2).toString() + "px").removeClass("modal-body-relative")) : s.addClass("modal-body-relative").css("margin-top", "").css("margin-left", ""),
            t.options.init_animation && s.prepareTransition().removeClass("modal-body-float-animation"),
            t.options.centrify_animation && t.centrifyAnimation()
        }).prepareTransition(),
        AMOCRM.is_touch_device && setTimeout(s.bind(function() {
            this.options.can_centrify && this.$modal.find(".modal-body").trigger("modal:centrify")
        }, this), 500),
        o.on("keydown" + this.ns, function(e) {
            var s = i(".modal:visible", document.body)
              , n = i(e.target)
              , o = 13
              , r = 27;
            switch (e.keyCode) {
            case o:
                n.closest(".modal").length && n.is(":input") && !s.hasClass("js-modal-confirm") || (n.blur(),
                e.stopImmediatePropagation(),
                s.find(".js-modal-accept").trigger("click"));
                break;
            case r:
                t.disable_overlay_click || t.destroy()
            }
        }).on("page:changed" + this.ns, function() {
            t.options.can_destroy !== !1 && t.destroy()
        }),
        r.on("resize" + this.ns, function() {
            t.$modal.find(".modal-body").trigger("modal:centrify")
        }),
        this.options.init.call(this, this.$modal.find(".modal-body")),
        this
    }
    ,
    t.prototype.centrifyAnimation = function(e) {
        var t = this.$modal.find(".modal-body");
        e === !1 ? t.removeClass("modal-body-centrified") : (t.offset(),
        t.addClass("modal-body-centrified"))
    }
    ,
    t.prototype.show = function() {
        this.$modal.show()
    }
    ,
    t.prototype.hide = function() {
        this.$modal.hide()
    }
    ,
    t.prototype.showError = n._preload(["/tmpl/common/modal/error.twig"], "_showError"),
    t.prototype._showError = function(e, t) {
        var i = this;
        t = "boolean" != typeof t ? !0 : t,
        e = e || !1,
        i.centrifyAnimation(!1),
        i.$modal.find(".modal-body__inner").hide(),
        i.$modal.find(".modal-body:first").show().width(500).append(n({
            ref: "/tmpl/common/modal/error.twig"
        }).render({
            lang: AMOCRM.lang,
            text: e,
            no_retry: !t
        })).trigger("modal:centrify")
    }
    ,
    t.prototype.showSuccess = n._preload(["/tmpl/common/modal/success.twig"], "_showSuccess"),
    t.prototype._showSuccess = function(e, t, i, s) {
        var o, r = this;
        i = i || 500,
        r.centrifyAnimation(!1),
        r.$modal.find(".modal-body__inner").hide(),
        r.$modal.find(".modal-body:first").show().width(500).append(n({
            ref: "/tmpl/common/modal/success.twig"
        }).render({
            lang: AMOCRM.lang,
            msg: e || !1
        })).trigger("modal:centrify"),
        o = setTimeout(function() {
            clearTimeout(o),
            r.destroy(),
            "function" == typeof t && t()
        }, i)
    }
    ,
    t.prototype.requestStart = function() {
        return this.$modal.find(".modal-body").hide(),
        this
    }
    ,
    t.prototype.shakeError = function() {
        this.$modal.find(".modal-body").one(AMOCRM.animation_event, s.bind(function(e) {
            i(e.currentTarget).removeClass("animated shake")
        }, this)).addClass("animated shake")
    }
    ,
    t.prototype.destroy = function() {
        var e = this;
        return e.$overlay.hasClass("permanent-overlay") ? !1 : this.options.destroy() === !1 ? !1 : this._destroyed ? !1 : (this._destroyed = !0,
        this.$modal.remove(),
        o.trigger("overlay:unfix").off(this.ns),
        void r.off(this.ns))
    }
    ,
    t
}),
define("lib/components/base/confirm", ["require", "jquery", "underscore", "twig", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/base/modal");
    return t = function(e) {
        var t = this;
        this.options = s.extend({}, e),
        this.modal = new o({
            can_centrify: !0,
            class_name: (this.options.class_name || "modal-list") + " js-modal-confirm",
            disable_overlay_click: this.options.disable_overlay_click,
            init: n._preload([t.options.template || "/tmpl/common/modal/confirm.twig"], function(e) {
                t.$modal_body = e,
                e.trigger("modal:loaded").html(n({
                    ref: t.options.template || "/tmpl/common/modal/confirm.twig"
                }).render(i.extend({
                    decline_text: t.options.decline_text,
                    accept_text: t.options.accept_text,
                    button_class: t.options.button_class,
                    no_cancel: t.options.no_cancel
                }, t.options))).trigger("modal:centrify"),
                s.isFunction(t.options.init) && t.options.init.call(t),
                e.on("click", function(e) {
                    e.stopPropagation()
                }).on("click", ".button-cancel", function(e) {
                    e.stopPropagation(),
                    t.accepted = !1,
                    t.destroy()
                }).on("click", ".modal-body__close", function(e) {
                    e.stopPropagation(),
                    t.destroy()
                }).on("click", ".js-modal-accept", function(e) {
                    t.accepted = !0,
                    "function" == typeof t.options.accept ? t.options.accept.call(t) : t.destroy(),
                    e.stopPropagation()
                })
            }),
            destroy: function() {
                return t.xhr && 4 != t.xhr.readyState ? !1 : (t.modal.$modal.find(".modal-body").off(),
                "function" == typeof t.options.destroy && t.options.destroy.call(t),
                !0)
            }
        })
    }
    ,
    t.prototype.requestStart = function() {
        return this.$modal_body.hide(),
        this
    }
    ,
    t.prototype.requestSuccess = function(e, t) {
        this.$modal_body.show(),
        this.modal.showSuccess(e, t)
    }
    ,
    t.prototype.requestFail = function(e, t) {
        this.$modal_body.show(),
        this.modal.showError(e, t)
    }
    ,
    t.prototype.destroy = function() {
        this.modal.destroy()
    }
    ,
    t
}),
define("lib/interface/notes/views/mixins/deletable", ["require", "underscore", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/confirm");
    return {
        events: {
            "click .js-note-delete-btn": "delete"
        },
        "delete": function(e) {
            var s = this;
            return this.model.get("deletable") === !0 && (e = t.isString(e) ? e : AMOCRM.lang["note_delete_msg" + ("tasks" === this.model.get("object_type").code ? "_task" : "")],
            this.$el.trigger("actions:toggle", [!1]),
            new i({
                class_name: "modal-list",
                text: e,
                accept: function() {
                    var e = this;
                    e.requestStart(),
                    Promise.all(t.map(s.models, function(e) {
                        return e.destroy({
                            wait: !0
                        })
                    })).then(function() {
                        e.requestSuccess(AMOCRM.lang.multiple_delete_success_msg)
                    }, function(t) {
                        t && t.response && t.response.error_message ? e.requestFail(t.response.error_message, !1) : e.requestFail()
                    })
                }
            })),
            !1
        }
    }
}),
define("lib/interface/notes/views/note", ["require", "underscore", "twig", "cocktail", "lib/core/view", "lib/core/users", "lib/interface/notes/templates", "lib/interface/notes/views/mixins/togglable", "lib/interface/notes/views/mixins/editable", "lib/interface/notes/views/mixins/deletable"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("twig"), n = e("cocktail"), o = e("lib/core/view"), r = e("lib/core/users"), a = e("lib/interface/notes/templates"), l = e("lib/interface/notes/views/mixins/togglable"), c = e("lib/interface/notes/views/mixins/editable"), d = e("lib/interface/notes/views/mixins/deletable"), u = i.invert(AMOCRM.note_types), h = i.invert(AMOCRM.element_types);
    return t = o.extend({
        className: "feed-note-wrapper",
        events: {
            "click .js-note-expander": "noteExpand",
            "click .js-note-header-expander": "noteHeaderExpand",
            "click .js-amojo-reply": "onAmoJoReplyClick"
        },
        _selectors: function() {
            return {
                submit: ".js-note-submit, .js-task-submit, .js-todo-result, .js-task-result-button",
                header: ".feed-note__header",
                header_inner: ".feed-note__header-inner",
                header_expander: ".js-note-header-expander"
            }
        },
        _classes: function() {
            return {
                no_outside_animation: "js-no-outside-animation"
            }
        },
        initialize: function(e) {
            var t, s;
            o.prototype.initialize.apply(this, arguments),
            e = e || {},
            this.models = e.models || [],
            this.options = i.pick(e, function(e, t) {
                return "models" !== t
            }),
            !this.model && e.models && (this.model = e.models[0]),
            i.each(this.models, function(i) {
                i.get("element_id") || (t = i.get("linked"),
                s = t && t.id || e.element_id,
                i.set("element_id", s))
            }, this),
            this.listenTo(this.model, "destroy", i.bind(this.destroy, this, !0)),
            i.each(this.models, function(e) {
                this.listenTo(e, "change:visible", this.toggleVisible)
            }, this),
            this.model.get("visible") || this.toggleVisible(),
            this._$window.on("resize" + this.ns, i.debounce(i.bind(this.checkHeaderExpander, this), 150))
        },
        destroy: function() {
            this._$window.off(this.ns),
            o.prototype.destroy.apply(this, arguments),
            i.isFunction(this.options.onDestroy) && this.options.onDestroy(this)
        },
        _getTemplateName: function() {
            return a._get(this.model.get("type"), this.model.get("object_type").code)
        },
        _getTemplate: function(e) {
            var t = "/tmpl/notes/types/" + this._getTemplateName() + ".twig";
            return "edit" === e && (t = "/tmpl/notes/defaults/note_edit.twig"),
            t
        },
        _getRenderClassName: function(e) {
            return []
        },
        _getUsers: function() {
            var e = this.options.getExtraData(this.model).users;
            return i.isEmpty(e) ? i.reduce(r.get() || {}, function(e, t, s) {
                return e[t.id] = i.extend({}, t, {
                    full_name: t.option
                }),
                e
            }, {}) : e
        },
        _getRenderParams: function(e) {
            return $.extend(!0, this.model.toJSON(), {
                is_edit: "edit" === e,
                note_types: u,
                main_element_type: this.options.element_type,
                element_type_code: h[this.model.get("element_type")],
                template: this._getTemplateName(),
                is_free_user: AMOCRM.constant("user_rights").is_free_user,
                current_user_id: r.current("id"),
                _links: this.model.links,
                extra: i.extend(this.options.getExtraData(this.model), {
                    users: this._getUsers()
                })
            })
        },
        render: function() {
            return s._preload(["/tmpl/notes/wrapper.twig"], i.bind(this._render, this))()
        },
        _render: function(e) {
            var t = this.model.get("object_type") || {};
            this.el.className = i.union([this.className, this.className + "-" + this._getTemplateName()], this._getRenderClassName(e)).join(" "),
            this.el.style.height = "",
            this.el.innerHTML = s({
                ref: this._getTemplate(e)
            }).render(this._getRenderParams(e)),
            a._isSystem(this.model.get("type"), t.code) && this.el.classList.add(this.className + "_system"),
            "edit" === e && this.el.classList.add(this.className + "-in-edit"),
            this.model.get("id") && this.$el.attr("data-id", this.model.get("id")),
            !this.model.collection || this.el.parentNode && "[object DocumentFragment]" !== this.el.parentNode.toString() ? this._afterRender(e) : this.model.collection.once("views:tasks:autosize views:added", i.bind(this._afterRender, this, e))
        },
        _afterRender: function() {
            this.checkHeaderExpander(),
            i.delay(i.bind(function() {
                var e = this.el.querySelector(".js-note");
                e && e.classList.remove(this._class("no_outside_animation"))
            }, this), 100)
        },
        toggleVisible: function() {
            this.model.get("is_add") || (this.el.style.display = this.model.get("visible") ? "" : "none")
        },
        onAmoJoReplyClick: function(e) {
            e.stopPropagation(),
            this.model.trigger("notes:compose:switch", "chat", {
                user_id: $(e.currentTarget).attr("data-id")
            })
        },
        noteExpand: function(e) {
            var t = $(e.currentTarget);
            t.parent().hide().parent().find(".note--body--content-not-sliced").show()
        },
        noteHeaderExpand: function(e) {
            var t = $(e.currentTarget);
            t.parent().toggleClass("h-feed-note__header-expanded")
        },
        checkHeaderExpander: function() {
            var e = this.$(this._selector("header_inner"));
            e.length && (e[0].scrollWidth > e[0].offsetWidth ? this.$(this._selector("header_expander")).removeClass("hidden") : this.$(this._selector("header_expander")).addClass("hidden"))
        }
    }),
    n.mixin(t, l, c, d),
    t
}),
define("lib/interface/notes/views/joined/joined", ["require", "underscore", "lib/interface/notes/templates", "lib/interface/notes/views/note"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/templates")
      , s = e("lib/interface/notes/views/note");
    return s.extend({
        _getJoinedType: function() {
            switch (i._get(this.model.get("type"), this.model.get("object_type").code)) {
            case "attachment":
                return "attachment";
            case "note":
                return "note";
            case "transaction":
                return "transactions";
            default:
                return "joined"
            }
        },
        _getTemplate: function(e) {
            return e ? s.prototype._getTemplate.apply(this, arguments) : "/tmpl/notes/types/" + this._getJoinedType() + ".twig"
        },
        _getRenderParams: function(e) {
            var i = t.map(this.models, function(e) {
                return t.extend(e.toJSON(), {
                    _links: e.links
                })
            });
            return t.extend(s.prototype._getRenderParams.apply(this, arguments), {
                joined: i
            })
        },
        toggleVisible: function() {
            var e = t.filter(this.models, function(e) {
                return !e.get("visible")
            });
            "joined" === this._getJoinedType() && e.length !== this.models.length ? (this.el.style.display = "",
            this.render()) : s.prototype.toggleVisible.apply(this, arguments)
        }
    })
}),
define("lib/interface/notes/views/joined/note", ["require", "jquery", "underscore", "twig", "FileAPI", "lib/interface/notes/views/joined/joined", "lib/interface/notes/model"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("FileAPI")
      , o = e("lib/interface/notes/views/joined/joined")
      , r = e("lib/interface/notes/model");
    return o.extend({
        events: i.extend({}, o.prototype.events || {}, {
            "click .js-note-attach-remove": "_removeFileClick",
            "click .js-note-pinner": "togglePinClick"
        }),
        _getRenderParams: function() {
            var e = i.map(this.models, function(e) {
                return i.extend(e.toJSON(), {
                    _links: e.links
                })
            })
              , t = this.model.links && this.model.links.download && this.model.links.download.href.match(/\.([a-z]{0,4})$/gi, "$1");
            return i.extend(o.prototype._getRenderParams.apply(this, arguments), {
                joined: i.map(i.filter(e, function(e) {
                    return e.id !== this.model.id
                }, this), function(e) {
                    var t = e._links.download && e._links.download.href.match(/\.([a-z]{0,4})$/gi, "$1");
                    return i.extend(e, {
                        is_image: t ? i.indexOf([".png", ".jpg", ".jpeg", ".gif"], t[0].toLowerCase()) >= 0 : !1
                    })
                }),
                is_image: t ? i.indexOf([".png", ".jpg", ".jpeg", ".gif"], t[0].toLowerCase()) >= 0 : !1
            })
        },
        initialize: function() {
            i.bindAll(this, "_onFileApiInput", "_onFileApiElOver", "_onFileApiElDrop", "_onFileApiWindowOver"),
            o.prototype.initialize.apply(this, arguments),
            this.listenTo(this.model, "notes:dnd:window", this._onFileApiWindowOver)
        },
        edit: function() {
            var e = null;
            i.isFunction(this.options.scrollUpdate) && (e = this.options.scrollUpdate()),
            o.prototype.edit.apply(this, arguments),
            this._initAttachWrap({
                cleanup_attaches: !1
            }),
            i.isFunction(e) && (this.model.trigger("notes:update-sticky"),
            e())
        },
        cancel: function() {
            o.prototype.cancel.apply(this, arguments),
            this._removeFilesEvents()
        },
        _removeFilesEvents: function() {
            this._files_queue = {
                add: [],
                remove: []
            },
            this.$(".js-note-attaches").html(""),
            n.event.off(this.$('input[type="file"]')[0], "change"),
            n.event.dnd.off(this.$el[0])
        },
        addAttach: function(e) {
            var t = i.find(this._files_queue.add, function(t) {
                return e.name === t.name
            });
            return t ? !1 : (this._files_queue.add.push(e),
            this._renderAttach(e.name),
            this._setChanges({
                files: !0
            }),
            !0)
        },
        _renderAttach: function(e, t) {
            var n = this.$('.js-note-attach-item[data-id="' + e + '"]')
              , o = s({
                ref: "/tmpl/notes/attach.twig"
            }).render(i.extend({
                filename: i.escape(e),
                id: i.escape(e)
            }, t || {}));
            n.length ? n.replaceWith(o) : this.$(".js-note-attaches").append(o)
        },
        _initAttachWrap: function(e) {
            e = e || {},
            e.cleanup_attaches !== !1 && this._removeFilesEvents(),
            this._initAttach()
        },
        _onFileApiInput: function(e) {
            i.each(n.getFiles(e), this.addAttach, this)
        },
        _onFileApiElOver: function(e) {
            var t = this.$el;
            this._editing && (t.hasClass("js-note") || (t = this.$(".js-note")),
            t.toggleClass("js-dnd-after", e))
        },
        _onFileApiElDrop: function(e) {
            this._editing && i.each(e, this.addAttach, this)
        },
        _onFileApiWindowOver: function(e) {
            var t;
            this._editing && (t = this.$el,
            this.$el.hasClass("js-note") || (t = this.$el.children(".js-note")),
            t.toggleClass("js-dnd-before", e))
        },
        _initAttach: function() {
            this._setChanges({
                files: !1
            }),
            this._files_queue = {
                add: [],
                remove: []
            },
            n.event.on(this.$('input[type="file"]')[0], "change", this._onFileApiInput),
            n.event.dnd(this.$el[0], this._onFileApiElOver, this._onFileApiElDrop)
        },
        _copyFormToModel: function() {
            this.model.set("data", i.extend(this.model.get("data"), {
                text: this._form.model.get("text")
            }))
        },
        _uploadFile: function(e) {
            var s, o;
            return new Promise(i.bind(function(a, l) {
                n.upload({
                    url: "/private/notes/edit2.php?ACTION=ADD_NOTE&v=2&" + (this.model.get("element_id") ? "ID=" + this.model.get("element_id") : "TEMP=Y") + "&ELEMENT_TYPE=" + this.model.get("element_type"),
                    files: {
                        UserFile: e
                    },
                    complete: i.bind(function(e, n) {
                        e && l(e);
                        try {
                            s = t.parseJSON(n.response)
                        } catch (c) {
                            l(c)
                        }
                        o = new r(i.extend(s.note, {
                            date_create: this.model.get("date_create"),
                            created_by: (AMOCRM.constant("user") || {}).id,
                            object_type: {
                                code: "notes"
                            },
                            element_id: this.model.get("element_id"),
                            element_type: this.model.get("element_type"),
                            type: AMOCRM.note_types.attachment,
                            data: {
                                text: s.note.params.text,
                                params: s.note.params
                            },
                            _links: {
                                download: {
                                    href: "/download/" + s.note.params.link
                                }
                            }
                        })),
                        this.model.collection && this.model.collection.add(o),
                        o.save().then(function() {
                            a()
                        }, function() {
                            l()
                        }),
                        this.models.push(o)
                    }, this)
                })
            }, this))
        },
        _destroyFileAndUpdateModels: function(e) {
            return e.destroy().then(i.bind(function(e) {
                this.models = i.without(this.models, e)
            }, this, e))
        },
        _uploadFiles: function() {
            var e = i.map(this._files_queue.add, this._uploadFile, this)
              , t = i.map(this._files_queue.remove, this._destroyFileAndUpdateModels, this);
            return Promise.all(e.concat(t)).then(i.bind(function() {
                this._files_queue = {
                    add: [],
                    remove: []
                }
            }, this))
        },
        _removeFileClick: function(e) {
            var s = t(e.currentTarget)
              , n = s.closest(".js-note-attach-item")
              , o = parseInt(n.attr("data-id"))
              , r = !1;
            e.stopPropagation(),
            o ? this._files_queue.remove = this._files_queue.remove.concat(i.filter(this.models, function(e) {
                return e.id === o
            })) : this._files_queue.add = i.filter(this._files_queue.add, function(e) {
                return s.attr("data-id") !== i.escape(e.name)
            }),
            (this._files_queue.add.length > 0 || this.model.get("id")) && (r = !0),
            this._setChanges({
                files: r
            }),
            n.remove()
        },
        togglePinClick: function(e) {
            e.stopPropagation(),
            this.model.set("pinned", !this.model.get("pinned")).pin(),
            this._render(),
            this.model.trigger("note:view:pin", this.model)
        },
        save: function() {
            return this._findElem("submit").trigger("button:load:start", ["white"]),
            new Promise(i.bind(function(e, t) {
                return i.isEmpty(this.validate()) ? this.model._pending ? void t("Already saving") : void this._uploadFiles().then(i.bind(function() {
                    this._changes.form ? o.prototype.save.apply(this, arguments).then(e, t) : (this.cancel(),
                    e())
                }, this), t) : (this._findElem("submit").trigger("button:load:stop"),
                void t())
            }, this))
        }
    })
}),
!("innerText"in document.createElement("a")) && "getSelection"in window && (HTMLElement.prototype.__defineGetter__("innerText", function() {
    for (var e, t = window.getSelection(), i = [], s = 0; s < t.rangeCount; s++)
        i[s] = t.getRangeAt(s);
    t.removeAllRanges(),
    t.selectAllChildren(this),
    e = t.toString(),
    t.removeAllRanges();
    for (var s = 0; s < i.length; s++)
        t.addRange(i[s]);
    return e
}),
HTMLElement.prototype.__defineSetter__("innerText", function(e) {
    this.innerHTML = e.replace(/\n/g, "<br />")
})),
define("vendor/innerText-polyfill/index", function() {}),
define("lib/interface/notes/views/add/note", ["require", "underscore", "lib/interface/notes/model", "lib/interface/notes/views/joined/note", "vendor/innerText-polyfill/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/model")
      , s = e("lib/interface/notes/views/joined/note")
      , n = 38;
    return e("vendor/innerText-polyfill/index"),
    s.extend({
        _selectors: function() {
            return t.extend({}, s.prototype._selectors.apply(this, arguments), {
                textarea: "[contenteditable]",
                text_input: '[name="text"]'
            })
        },
        events: t.extend({}, s.prototype.events || {}, {
            "click [contenteditable]": "focusContentEditableOnMobile",
            "focus [contenteditable]": "focusContentEditable",
            "input [contenteditable]": "checkMessageIndent",
            "paste [contenteditable]": "onPasteContent",
            "keyup [contenteditable]": "onArrowNavigate"
        }),
        _getTemplate: function(e) {
            return "/tmpl/notes/adding/note.twig"
        },
        _generateEmptyModel: function(e) {
            return e = e || this.options,
            new i({
                is_new: !0,
                object_type: {
                    code: "notes",
                    id: 5
                },
                element_id: e.element_id,
                element_type: e.element_type,
                editable: !0,
                visible: !0
            })
        },
        setParamsOnSwitch: t.noop,
        getExistingText: function() {
            return this._form.model.get("text")
        },
        setExistingText: function() {
            this._elem("textarea").text(this.options.text),
            this._elem("text_input").val(this.options.text).trigger("change")
        },
        onFoldCompose: function() {
            this._initAttachWrap()
        },
        onOpenCompose: function() {
            this.focusContentEditable()
        },
        initialize: function(e) {
            e.models = [this._generateEmptyModel(e)],
            s.prototype.initialize.apply(this, arguments),
            this.models = []
        },
        setMainId: function(e) {
            this.model && t.isFunction(this.model.set) && this.model.set("element_id", e),
            this.options && (this.options.element_id = e)
        },
        destroy: function() {
            s.prototype.cancel.apply(this, arguments),
            s.prototype.destroy.apply(this, arguments)
        },
        onArrowNavigate: function(e) {
            n !== e.keyCode || this._getMessageValue() || this.options.toggleSwitcher && this.options.toggleSwitcher()
        },
        onPasteContent: function(e) {
            var t, i = (e.originalEvent || e).clipboardData;
            e.preventDefault(),
            i ? (t = i.getData("text/plain"),
            document.execCommand("insertText", !1, t)) : window.clipboardData && (t = window.clipboardData.getData("Text"),
            document.selection.createRange().pasteHTML(t))
        },
        focusContentEditableOnMobile: function(e) {
            AMOCRM.is_touch_device && $(e.currentTarget).focus()
        },
        focusContentEditable: function() {
            var e = this._findElem("textarea").get(0);
            e && (this.checkMessageIndent(),
            this._putCursorToEnd({
                currentTarget: e
            }))
        },
        checkMessageIndent: function() {
            var e = "";
            this._findElem("textarea").is(":empty") && (e = this.$(".feed-compose__before").width() + 7),
            this._findElem("textarea").css("padding-left", e),
            this._findElem("text_input").val(this._getMessageValue()).trigger("change")
        },
        _getMessageValue: function(e) {
            var t = this._findElem("textarea").get(0).innerText || "";
            return e !== !1 && (t = t.trim()),
            t
        },
        _render: function() {
            s.prototype._render.apply(this, arguments),
            this.$el.attr("data-dnd-before", AMOCRM.lang.notes_dnd_title_before).attr("data-dnd-after", AMOCRM.lang.notes_dnd_title_after).attr("class", "js-note feed-compose_note")
        },
        _putCursorToEnd: function(e) {
            var t, i, s = e.currentTarget;
            t = document.createRange(),
            t.selectNodeContents(s),
            t.collapse(!1),
            i = window.getSelection(),
            i.removeAllRanges(),
            i.addRange(t)
        },
        cancel: t.noop,
        _setEditClick: t.noop,
        reset: function() {
            s.prototype.cancel.apply(this, arguments)
        },
        resetCompose: function() {
            this._findElem("textarea").text(""),
            this._findElem("text_input").val("").trigger("change"),
            this._form && this._form.revert(),
            this._setChanges(!1),
            this.checkMessageIndent(),
            this.model = this._generateEmptyModel(),
            this.models = []
        },
        validate: function(e) {
            return e = e || {},
            this._form.model.get("text") || this._changes.files || (e = t.extend(e || {}, {
                text: !1
            }),
            this.$el.addClass("note-has-error")),
            e
        },
        save: function() {
            var e = this.model;
            return this.model.set("date_create", moment().unix()),
            s.prototype.save.apply(this, arguments).then(t.bind(function() {
                this.model.set({
                    is_new: !1,
                    deletable: !0
                }),
                !e.get("id") && this.models[0] && this.models[0].get("id") && (e = this.models[0],
                this.models = t.without(this.models, this.models[0])),
                this.options.onAdd(t.flatten([t.extend(e.toJSON(), {
                    _links: e.links
                }), t.map(this.models, function(e) {
                    return t.extend(e.toJSON(), {
                        _links: e.links
                    })
                })])),
                this.resetCompose()
            }, this))
        }
    })
}),
define("lib/interface/card/controls/subscribers/network/model", ["require", "backbone"], function(e) {
    "use strict";
    var t = e("backbone");
    return t.Model.extend({
        defaults: {
            user_id: 0,
            group_id: 0
        },
        initialize: function() {
            this.attributes.user_id = parseInt(this.attributes.user_id) || 0,
            this.attributes.group_id = parseInt(this.attributes.group_id) || 0,
            this.id = this._makeId()
        },
        _makeId: function() {
            return this.attributes.user_id > 0 ? this.attributes.user_id : "group_" + this.attributes.group_id
        }
    })
}),
define("lib/interface/card/controls/subscribers/network/collection", ["require", "backbone", "lib/interface/card/controls/subscribers/network/model"], function(e) {
    "use strict";
    var t = e("backbone")
      , i = e("lib/interface/card/controls/subscribers/network/model");
    return t.Collection.extend({
        model: i
    })
}),
define("lib/interface/card/controls/subscribers/network/api", ["require", "underscore", "jquery", "rxjs", "lib/interface/card/controls/subscribers/network/collection"], function(e) {
    "use strict";
    function t(e, t) {
        var i = {
            entity_type: e,
            entity_id: t
        };
        return u.Observable.fromPromise(l(i, o("list"))).map(r("list")).map(n)
    }
    function i(e) {
        return u.Observable.fromPromise(l(a(e, "subscribe"), o("subscribe"), "POST")).map(r("subscribe"))
    }
    function s(e) {
        return u.Observable.fromPromise(l(a(e, "unsubscribe"), o("unsubscribe"), "POST")).map(r("unsubscribe"))
    }
    function n(e) {
        var t = new h;
        return c.each(e, function(e) {
            t.add(e)
        }),
        t
    }
    function o(e) {
        return _[e] ? _[e] : _.base + "/" + e
    }
    function r(e) {
        return function(t) {
            return t ? t.response.subscriptions[e] : null
        }
    }
    function a(e, t) {
        var i = {
            request: {
                subscriptions: {}
            }
        };
        return i.request.subscriptions[t] = e,
        i
    }
    function l(e, t, i) {
        return i = i || "GET",
        function() {
            return d.ajax({
                url: t,
                type: i,
                data: e,
                dataType: "json"
            })
        }
    }
    var c = e("underscore")
      , d = e("jquery")
      , u = e("rxjs")
      , h = e("lib/interface/card/controls/subscribers/network/collection")
      , _ = {
        base: "/ajax/v1/subscriptions"
    };
    return {
        list: t,
        subscribe: i,
        unsubscribe: s
    }
}),
define("lib/interface/card/controls/subscribers/network/service", ["require", "underscore", "rxjs", "lib/interface/card/controls/subscribers/network/collection", "lib/interface/card/controls/subscribers/network/model", "lib/interface/card/controls/subscribers/network/api", "lib/core/users"], function(e) {
    "use strict";
    function t(e, t) {
        var i = e + "" + t;
        return l[i] ? l[i] : (this.hash = i,
        this.entity_type = parseInt(e),
        this.entity_id = parseInt(t),
        this.items = new n,
        this.updates$ = new s.Subject,
        this._changes = {},
        this.reset$ = new s.BehaviorSubject(!0),
        this.list$ = new s.ReplaySubject(1),
        this.loading$ = new s.BehaviorSubject(!1),
        this.sync_state$ = new s.BehaviorSubject(!0),
        l[i] = this,
        void this.init())
    }
    var i = e("underscore")
      , s = e("rxjs")
      , n = e("lib/interface/card/controls/subscribers/network/collection")
      , o = e("lib/interface/card/controls/subscribers/network/model")
      , r = e("lib/interface/card/controls/subscribers/network/api")
      , a = e("lib/core/users")
      , l = {};
    return i.extend(t.prototype, {
        init: function() {
            var e = this.reset$.merge(s.Observable.fromEvent($(document), "users:list:changed"))
              , t = e.switchMap(this.fetch, null, this).combineLatest(a.fetch(), this.onlyActive).map(this.resetItems, this)
              , i = s.Observable.fromEvent(this.items, "add remove").switchMap(s.Observable.just(this.items));
            i.merge(t).map(function(e) {
                return {
                    action: "reset",
                    items: e.toArray()
                }
            }).subscribe(this.list$)
        },
        onlyActive: function(e, t) {
            var s = e.clone();
            return s.models = i.filter(s.models, function(e) {
                if (e.get("user_id") > 0) {
                    if (!t.managers[e.get("user_id")])
                        return !1
                } else if (!t.groups["group_" + e.get("group_id")])
                    return !1;
                return !0
            }),
            s
        },
        fetch: function() {
            return this.startLoading().flatMap(r.list(this.entity_type, this.entity_id)).doOnCompleted(this.stopLoading, this)
        },
        save: function() {
            return this.startLoading().switchMap(this.makeSaveObserverChain, null, this).doOnNext(function(e) {
                e.add && e.add.success && (e.add.success.user_id && e.add.success.user_id.length > 0 && i.each(e.add.success.user_id, function(e) {
                    var t = new o({
                        user_id: e
                    });
                    this._changes = i.omit(this._changes, t.id),
                    this.items.add(t)
                }, this),
                e.add.success.group_id && e.add.success.group_id.length > 0 && i.each(e.add.success.group_id, function(e) {
                    var t = new o({
                        group_id: e
                    });
                    this._changes = i.omit(this._changes, t.id),
                    this.items.add(t)
                }, this)),
                e.remove && e.remove.success && (e.remove.success.user_id && e.remove.success.user_id.length > 0 && i.each(e.remove.success.user_id, function(e) {
                    var t = new o({
                        user_id: e
                    });
                    this._changes = i.omit(this._changes, t.id),
                    this.items.remove(t)
                }, this),
                e.remove.success.group_id && e.remove.success.group_id.length > 0 && i.each(e.remove.success.group_id, function(e) {
                    var t = new o({
                        group_id: e
                    });
                    this._changes = i.omit(this._changes, t.id),
                    this.items.remove(t)
                }, this)),
                this.stopLoading(),
                this._changes = {},
                this._updateState()
            }, this)
        },
        count: function() {
            return this.items.length
        },
        makeSaveObserverChain: function() {
            var e = {
                user_id: [],
                group_id: []
            }
              , t = {
                user_id: [],
                group_id: []
            };
            i.each(this._changes, function(i, s) {
                var n = i.model;
                -1 === i.state ? n.get("user_id") > 0 ? t.user_id.push(n.get("user_id")) : t.group_id.push(n.get("group_id")) : 1 === i.state && (n.get("user_id") > 0 ? e.user_id.push(n.get("user_id")) : e.group_id.push(n.get("group_id")))
            }, this);
            var n = s.Observable.just({
                remove: {},
                add: {}
            });
            return (e.user_id.length || e.group_id.length) && (n = n.zip(r.subscribe(i.extend(e, {
                entity_type: this.entity_type,
                entity_id: this.entity_id,
                event: "chat_message"
            })), function(e, t) {
                return e.add = t,
                e
            })),
            (t.user_id.length || t.group_id.length) && (n = n.zip(r.unsubscribe(i.extend(t, {
                entity_type: this.entity_type,
                entity_id: this.entity_id,
                event: "chat_message"
            })), function(e, t) {
                return e.remove = t,
                e
            })),
            n
        },
        unsubscribe: function(e) {
            var t = this.items.get(e);
            t && this._markRemoved(t)
        },
        subscribe: function(e) {
            var t, i = e.toString().replace("group_", "");
            t = new o(i !== e.toString() ? {
                group_id: i
            } : {
                user_id: e
            }),
            this._markAdded(t)
        },
        subscribeUser: function(e, t) {
            var i = new o({
                user_id: e
            });
            this._markAdded(i)
        },
        subscribeGroup: function(e) {
            new o({
                group_id: e
            })
        },
        unsubscribeUser: function(e, t) {
            var i = new o({
                user_id: e
            });
            this._markRemoved(i)
        },
        unsubscribeGroup: function(e) {
            var t = new o({
                group_id: e
            });
            this._markRemoved(t)
        },
        _markRemoved: function(e) {
            this._changes[e.id] || (this._changes[e.id] = {
                state: 0,
                model: e
            }),
            this._changes[e.id].state--,
            this._updateState()
        },
        _markAdded: function(e) {
            this._changes[e.id] || (this._changes[e.id] = {
                state: 0,
                model: e
            }),
            this._changes[e.id].state++,
            this._updateState()
        },
        _updateState: function() {
            var e = i.reduce(i.values(this._changes), function(e, t) {
                return e.state + t.state
            });
            this.sync_state$.onNext(0 === e)
        },
        resetItems: function(e) {
            return this._changes = {},
            this.sync_state$.onNext(!0),
            this.items.reset(e.toJSON(), {
                silent: !0
            }),
            this.updates$.onNext({
                action: "add",
                items: e.toArray()
            }),
            e
        },
        startLoading: function() {
            return this.loading$.onNext(!0),
            s.Observable.just(!0)
        },
        stopLoading: function() {
            this.loading$.onNext(!1)
        },
        destroy: function() {
            l = i.omit(l, this.hash)
        }
    }),
    t
}),
define("lib/interface/controls/multisuggest", ["require", "jquery", "underscore", "twig", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/common/fn")
      , o = t(document)
      , r = 13
      , a = 9
      , l = 8
      , c = 39
      , d = 37
      , u = 38
      , h = 40
      , _ = 27
      , p = 32
      , m = "ONLY_SELECT"
      , f = !1
      , g = {}
      , b = {}
      , v = {}
      , y = "multisuggest__suggest-item";
    return v[m] = 0,
    v[h] = 1,
    v[u] = -1,
    v[c] = 1,
    v[d] = -1,
    b.getTitle = function(e) {
        var t = e.attr("data-title");
        return t || (t = e.text()),
        t
    }
    ,
    b.scroll = function(e) {
        var i, s, n, o, r, a = e.$list.find("." + e.item_class + ":visible"), l = 0;
        return i = a.index(e.$selected),
        a.eq(i).removeClass(e.item_class + "_selected"),
        s = a[i + v[e.keyCode]] ? i + v[e.keyCode] : e.keyCode === h ? a.length - 1 : 0,
        a[s] && (a.eq(s).addClass(e.item_class + "_selected"),
        o = a.eq(s).closest(".group-color-wrapper"),
        r = a[s].offsetHeight,
        o.hasClass("js-multisuggest-item") || (l = o.prevAll(".group-color-wrapper").length + 1),
        n = r * s + l * r,
        e.$list.find(".js-multisuggest-suggest").scrollTop(n - 150),
        f = !0),
        t(this).trigger("multisuggest:set_hint", [e.value, a[s] && "new" !== a[s].getAttribute("data-id") ? b.getTitle(a.eq(s)) : ""]),
        !1
    }
    ,
    b.select = function(e) {
        return e.$selected.length && e.$list.is(":visible") && "new" !== e.$selected.attr("data-id") ? e.$selected.trigger("suggest:suggest:click") : e.value && e.can_add && t(this).trigger("multisuggest:item:choose", {
            is_new: !0,
            value: e.value,
            title: e.value
        }),
        !1
    }
    ,
    b.makeActive = function(e) {
        var i, s = e.$wrapper.find(".js-multisuggest-list").find(".js-multisuggest-item:not(.multisuggest__list-item_input):not(.js-multisuggest-fake)"), n = s.filter(function() {
            return t(this).hasClass("js-active")
        });
        if (!n.length)
            switch (e.keyCode) {
            case d:
                return e.value ? !0 : s.length && s[s.length - 1].classList.add("js-active");
            default:
                return !0
            }
        return i = s.index(n) + v[e.keyCode],
        0 > i ? !1 : (n.removeClass("js-active"),
        i > s.length - 1 ? !1 : (s[i].classList.add("js-active"),
        !1))
    }
    ,
    b.removeItem = function(e) {
        var t;
        return e.hasClass("js-active") ? e.trigger("multisuggest:item:remove") : (t = e.closest(".js-multisuggest-list"),
        t.find(".js-multisuggest-item.js-active").removeClass("js-active"),
        e.addClass("js-active"),
        AMOCRM.is_touch_device || t.find(".js-multisuggest-input").focus()),
        !1
    }
    ,
    b.clickItem = function(e) {
        var t = b.getSuggest(e)
          , i = e.attr("data-id")
          , s = e.text();
        "new" === i && (s = t.find(".js-multisuggest-input").val()),
        t.trigger("multisuggest:item:choose", [{
            id: "new" === i ? "" : i,
            title: n.trim(s)
        }])
    }
    ,
    g[_] = function(e) {
        return t(this).closest(".js-multisuggest").removeClass("multisuggest_show-suggest"),
        !1
    }
    ,
    g[l] = function(e) {
        var s;
        return e.value || (s = t(this).closest(".js-multisuggest-list").find(".js-multisuggest-item.js-active"),
        s.length ? s.trigger("multisuggest:item:remove") : b.makeActive(i.extend(e, {
            keyCode: d
        }))),
        !0
    }
    ,
    g[h] = b.scroll,
    g[u] = b.scroll,
    g[m] = b.scroll,
    g[r] = b.select,
    g[a] = b.select,
    g[p] = function(e) {
        return e.value ? !0 : (b.select(e),
        !1)
    }
    ,
    g[c] = b.makeActive,
    g[d] = b.makeActive,
    b.getSuggest = function(e) {
        var i = e.closest("[data-multisuggest-id]");
        return "y" === i.attr("data-is-suggest") ? t('.js-multisuggest[data-multisuggest-id="' + i.attr("data-multisuggest-id") + '"]') : i
    }
    ,
    o.on("multisuggest:set_suggest", ".js-multisuggest", function(e, o) {
        var r, a = t(this), l = a.find(".js-multisuggest-list").find(".js-multisuggest-item:not(.multisuggest__list-input)"), c = a.data("values-hash") || [], d = a.data("items-tmpl") || "/tmpl/controls/multisuggest/item.twig", u = t('[data-multisuggest-id="' + a.attr("data-multisuggest-id") + '"]:not(.js-multisuggest)'), h = u.hasClass("js-multisuggest-suggest") ? u : u.find(".js-multisuggest-suggest"), p = "";
        o === !1 && (o = ""),
        i.isUndefined(o) || (o = n.trim(o),
        r = i.filter(c, function(e) {
            var i = (e.title || e.label || e.name || "").toString().toLowerCase()
              , s = n.transliterate(i)
              , r = n.transliterate(i, "punto");
            return i && (i.indexOf(o.toLowerCase()) >= 0 || s.indexOf(o.toLowerCase()) >= 0 || r.indexOf(o.toLowerCase()) >= 0) && !l.filter(function(n, o) {
                var a = t.trim(t(o).text() || "").toLowerCase();
                return parseInt(t(o).attr("data-id")) === parseInt(e.id) || a === i || a === s || a === r
            }).length
        }),
        i.each(r, function(e) {
            p += s({
                ref: d
            }).render({
                item: e,
                class_name: "multisuggest__suggest-item"
            })
        }),
        o && a.hasClass("js-can-add") && (p += s({
            ref: d
        }).render({
            item: {
                id: "new",
                title: AMOCRM.lang.fast_tags_empty + ' <span class="new-tag">' + i.escape(o) + "</span>"
            },
            class_name: "multisuggest__suggest-item multisuggest__suggest-item_add"
        }))),
        h.html(p),
        p.length ? (u.show(),
        a.find(".js-multisuggest-input").on("keyup.escape", function(e) {
            e.keyCode === _ && (t(this).off("keyup.escape"),
            e.stopPropagation())
        }),
        a.addClass("multisuggest_show-suggest").trigger("multisuggest:has_value")) : (u.hide(),
        a.removeClass("multisuggest_show-suggest").trigger("multisuggest:no_value")),
        a.find(".js-multisuggest-input").trigger("multisuggest:select-first")
    }).on("multisuggest:item:remove", ".js-multisuggest-item", function(e, i) {
        var s, n, o = t(this);
        s = b.getSuggest(o),
        (!o.hasClass("js-multisuggest-input") || i) && (n = {
            title: t.trim(o.text()),
            id: o.attr("data-id")
        },
        o.remove(),
        s.trigger("multisuggest:set_suggest", [!1]).trigger("multisuggest:item:removed", [n]))
    }).on("multisuggest:item:choose", ".js-multisuggest", function(e, i) {
        var n = t(this)
          , o = n.find(".js-multisuggest-list .js-multisuggest-item").filter(function() {
            return t(this).text().toLowerCase() === i.title.toString().toLowerCase()
        });
        o.length || !t.trim(i.title) ? n.find(".js-multisuggest-input input").val("") : n.addClass("multisuggest_show-list").find(".js-multisuggest-input").val("").parent().before(s({
            ref: "/tmpl/controls/multisuggest/item.twig"
        }).render({
            item: i
        })),
        AMOCRM.is_touch_device || n.find(".js-multisuggest-input").focus(),
        n.trigger("multisuggest:set_suggest", [!1]).trigger("multisuggest:item:choosed")
    }).on("multisuggest:set_hint", ".js-multisuggest-input", function(e, i, s) {
        var n, o, r = t(this), a = r.parent().find(".js-multisuggest-hint");
        return r.removeClass("h-suggest-failed"),
        i || s ? !i && s ? void a.text(s) : (o = new RegExp("(^|\\s)(" + i.replace(/(\/|\[)/gi, "\\$1") + "(.+)?)($|\\s)","i"),
        n = s.match(o),
        void (n ? a.text(t.trim(n[0].replace(new RegExp(i,"i"), i)) + " " + s.replace(o, "")) : (s || r.addClass("h-suggest-failed"),
        a.text("")))) : void a.text("")
    }).on("multisuggest:select-first", ".js-multisuggest-input", function(e, s) {
        var n, o, r = t(this);
        i.isEmpty(s) || (n = r.closest(".js-multisuggest"),
        o = t('[data-multisuggest-id="' + n.attr("data-multisuggest-id") + '"]:not(.js-multisuggest)'),
        o.find("." + y + "_selected").removeClass(y + "_selected"),
        o.find("#select_users__user-" + s.id).find(".js-multisuggest-item").addClass(y + "_selected")),
        r.trigger({
            type: "keydown",
            keyCode: m
        })
    }),
    t(window).on("mousemove", function() {
        f && (f = !1)
    }),
    o.on("keydown", ".js-multisuggest-input", function(e) {
        var i = t(this)
          , s = i.closest(".js-multisuggest")
          , n = t('[data-multisuggest-id="' + s.attr("data-multisuggest-id") + '"]:not(.js-multisuggest)');
        return t.isFunction(g[e.keyCode]) ? g[e.keyCode].call(this, {
            $wrapper: s,
            $list: n,
            $selected: n.find("." + y + "_selected"),
            keyCode: e.keyCode,
            can_add: "N" !== i.attr("data-can-add"),
            item_class: y,
            value: e.inputValue || i.val()
        }) : void 0
    }).on("mouseover", ".js-multisuggest-item", function() {
        var e, i = t(this), s = b.getSuggest(i);
        f || i.hasClass("multisuggest__list-item") || i.hasClass("multisuggest__suggest-item_selected") || (i.closest(".js-multisuggest-suggest").find(".multisuggest__suggest-item_selected").removeClass("multisuggest__suggest-item_selected"),
        i.addClass("multisuggest__suggest-item_selected"),
        e = s.find(".js-multisuggest-input"),
        e.trigger("multisuggest:set_hint", [e.val(), b.getTitle(i)]))
    }).on("input", ".js-multisuggest-input", function(e) {
        var i = b.getSuggest(t(this));
        i.trigger("multisuggest:set_suggest", this.value.toString())
    }).on("click suggest:suggest:click", ".js-multisuggest-item", function(e) {
        e.stopPropagation(),
        b.clickItem(t(this))
    }).on("click suggest:list:click", ".js-multisuggest-item", function() {
        return b.removeItem(t(this))
    }),
    b
}),
define("lib/components/base/suggest_manager", ["require", "jquery", "twig", "underscore", "lib/core/view", "lib/interface/controls/multisuggest"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/core/view"), r = e("lib/interface/controls/multisuggest"), a = 27;
    return t = o.extend({
        _classes: function() {
            return {
                input: "js-multisuggest-input",
                input_wrapper: "multisuggest__list-item_input",
                loader: "js-multisuggest-loader"
            }
        },
        _selectors: function() {
            return {
                list_item: ".js-multisuggest-list .js-multisuggest-item"
            }
        },
        events: {
            click: "preventExit",
            "click .js-multisuggest-item": "clickToRemoveChoosed",
            "keydown .multisuggest__input": "escapeDestroy",
            "multisuggest:item:choosed": "onItemChoose",
            "multisuggest:item:removed": "onItemRemove",
            "click .js-chat_user_remove": "groupChatRemoveTag"
        },
        initialize: function(e) {
            o.prototype.initialize.call(this),
            this.options = i.extend(this.options || {}, {
                $container: e.$container || this._$body,
                class_name: "",
                suggest_id: "suggest-manager__suggest",
                onInit: n.noop,
                onModify: n.noop,
                onRevert: n.noop,
                onItemChoosed: n.noop,
                onItemRemoved: n.noop
            }, e),
            this.options.template = this.options.template || "/tmpl/common/fast_tags/wrapper.twig",
            this._$document.trigger({
                type: "controls:hide",
                target: e.el
            }),
            this.render(this.options.template).then(n.bind(function() {
                this.bindEvents(),
                this.suggestLeaveOnBlur(!0),
                n.isFunction(this.options.onInit) && this.options.onInit.call(this),
                n.isObject(this.options.items) ? this.setItems(this.options.items) : n.isFunction(this.loadItems) && this.loadItems(),
                AMOCRM.is_touch_device ? "INPUT" === document.activeElement.tagName && document.activeElement.blur() : this._elem("input").autosizeInput().focus()
            }, this))
        },
        destroy: function() {
            this.suggestLeaveOnBlur(!1),
            this.hasModifications(),
            i("html").removeClass("has-suggest-manager"),
            this.$list.remove(),
            o.prototype.destroy.apply(this)
        },
        onItemChoose: function() {
            n.isFunction(this.options.onItemChoosed) && this.options.onItemChoosed.call(this),
            this.setPositions(),
            this.checkModifications()
        },
        onItemRemove: function() {
            n.isFunction(this.options.onItemRemoved) && this.options.onItemRemoved.call(this),
            this.setPositions(),
            this.checkModifications()
        },
        bindEvents: function() {
            i("html").addClass("has-suggest-manager"),
            this._$window.on("resize" + this.ns, n.debounce(n.bind(this.setPositions, this), 50)),
            this.$list.on("click", ".suggest-manager__empty__tag", n.bind(function() {
                this.$el.find(".multisuggest__input").trigger({
                    type: "keydown",
                    keyCode: 13
                }).focus()
            }, this)).on("click", function(e) {
                e.stopPropagation()
            }).on("click", ".fast_tags__closer-ok", n.bind(this.destroy, this)).on("click", ".js-multisuggest-item", n.bind(this.clickToChoose, this)),
            this._$document.on("page:change:start" + this.ns + " suggest:manager:destroy" + this.ns, n.bind(this.destroy, this)).on("orientationchange" + this.ns, n.bind(this.setPositions, this))
        },
        getSelectedItems: function() {
            return i.makeArray(this.$(this._selector("list_item")).map(function(e, t) {
                var s = i(t);
                return {
                    id: s.attr("data-id"),
                    raw_title: s.text(),
                    title: s.text().trim()
                }
            }))
        },
        hasModifications: function() {
            var e = this.getSelectedItems();
            return (document.contains && document.contains(this.el) || this.$el.closest("body").length) && !n.isEqual(this.options.existing_items, e) || this._elem("input").val() && !this.options.cant_add
        },
        checkModifications: function() {
            this.hasModifications() ? n.isFunction(this.options.onModify) && this.options.onModify.call(this) : n.isFunction(this.options.onRevert) && this.options.onRevert.call(this)
        },
        modified: n.noop,
        reverted: n.noop,
        preventExit: function(e) {
            i(e.currentTarget).hasClass("suggest-manager-lib__actions") || e.stopPropagation()
        },
        clickToChoose: function(e) {
            r.clickItem(i(e.currentTarget)),
            n.isFunction(this.options.onAddItem) && this.options.onAddItem()
        },
        clickToRemoveChoosed: function(e) {
            var t = i(e.currentTarget);
            t.addClass("js-active"),
            r.removeItem(t),
            n.isFunction(this.options.onRemoveItem) && this.options.onRemoveItem()
        },
        groupChatRemoveTag: function(e) {
            i(e.currentTarget).find("js-chat_user_remove") && (i(e.currentTarget).addClass("js-active"),
            this.clickToRemoveChoosed(e))
        },
        escapeDestroy: function(e) {
            return e.keyCode === a ? (this.destroy(),
            !1) : void 0
        },
        _getRenderParams: function() {
            return n.isFunction(this.options.onRenderParams) ? this.options.onRenderParams.apply(this) : {}
        },
        render: function(e) {
            return s._preload([e], n.bind(this._render, this, e))()
        },
        _render: function(e) {
            this.setElement(i(s({
                ref: e
            }).render(n.extend({
                id: this.$el.attr("id"),
                class_name: this.options.class_name,
                suggest_class_name: this.options.suggest_class_name,
                render_hidden: this.options.render_hidden,
                items: this.options.existing_items,
                cant_add: this.options.cant_add,
                can_remove: this.options.can_remove,
                no_items_msg: this.options.no_items_msg,
                empty_msg: this.options.empty_msg,
                placeholder: this.options.placeholder,
                actions: this.options.actions,
                item_tmpl: this.options.item_tmpl
            }, this._getRenderParams())))),
            this.options.replace ? this.options.$el.html(this.$el) : this.options.$el.append(this.$el),
            this.$list = this.$('[data-multisuggest-id="' + this.$el.attr("data-multisuggest-id") + '"]'),
            this.options.$container.append(this.$list),
            this.setPositions()
        },
        setPositions: function() {
            var e, t = this.$el.offset(), s = t.top + this.$el[0].offsetHeight + 5, n = t.top - 15 - i(window).scrollTop() - this.options.topbar_offset, o = this.options.$relative_to ? this.options.$relative_to.outerHeight() : window.innerHeight, r = this.$list.find(".js-multisuggest-suggest");
            this.$list.css(Modernizr.prefixed("transform"), ""),
            this.options.no_absolute_positioning || this.$list.css({
                top: s,
                left: t.left
            }),
            r.get(0).style.height = "",
            this.$list.is(":visible") && !this.$list.visible() && (this.$list.css(Modernizr.prefixed("transform"), "translateY(calc(-100% - " + (this.el.offsetHeight + 15) + "px))"),
            this.$list.visible() || (n > o - s ? e = n : (e = o - s,
            this.$list.css(Modernizr.prefixed("transform"), "")),
            r.css("height", e - 10)))
        },
        setItems: function(e) {
            this.items = e.items,
            this._elem("loader").remove(),
            this.$el.data("values-hash", this.items).trigger("multisuggest:set_suggest", !1)
        },
        save: n.noop,
        suggestLeaveOnBlur: function(e) {
            var t, i, s = ".suggest-manager:destroy";
            this._$document.off(s),
            this._$body.off(s),
            e !== !1 && (this._$document.on("controls:hide" + s, n.bind(this.destroy, this)),
            AMOCRM.is_touch_device ? this._$document.on("controls:hide:private" + s, n.bind(this.destroy, this)) : this._$body.on("mousedown" + s, n.bind(function(e) {
                t = e.target
            }, this)).on("mouseup" + s, n.bind(function(e) {
                i = e.target
            }, this)).on("click" + s, n.bind(function(e) {
                e.stopPropagation(),
                e.preventDefault(),
                i === t && this.destroy()
            }, this)))
        }
    })
}),
define("lib/interface/users_select", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/users", "lib/components/base/suggest_manager", "lib/components/base/sticky_headers"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("lib/core/users"), a = e("lib/components/base/suggest_manager"), l = e("lib/components/base/sticky_headers"), c = 8, d = 13;
    return i(document).on("loaded_users:null", function() {
        AMOCRM.constant("loaded_users", null)
    }),
    t = a.extend({
        overlay_id: "users_select_overlay",
        _classes: function() {
            return n.extend({}, a.prototype._classes.apply(this, arguments), {
                suggest: "js-multisuggest-suggest",
                group: "users-select__head"
            })
        },
        events: n.extend({}, a.prototype.events, {
            "click .js-filter-save-managers": "onSaveClick",
            "click .js-filter-cancel-managers": "onCancelClick",
            "keydown .js-multisuggest-input": "onSelectOneKeydown",
            "multisuggest:set_suggest": "setUsers",
            "multisuggest:item:choose": "itemChoose"
        }),
        initialize: function(e) {
            var t = this.getSelectedItems();
            t.length && (e.existing_items = i.makeArray(t)),
            e = n.extend({
                $el: this.$el.parent(),
                input_name: "users_select",
                existing_items: [],
                template: "/tmpl/users_select/users_select.twig",
                users_template: "/tmpl/users_select/wrapper/index.twig",
                replace: !0,
                item_template: "/tmpl/users_select/item.twig"
            }, e),
            this.users = {
                groups: {},
                allmanagers: {},
                managers: {}
            },
            a.prototype.initialize.call(this, n.extend(e, {
                no_absolute_positioning: e.no_absolute_positioning,
                onInit: n.bind(this.onInit, this, e.onInit),
                onDrop: n.bind(function(e) {
                    e.draggable && (e.draggable.addClass("users-select__remove-after-render").hide(),
                    this.$el.append(e.draggable))
                }, this)
            }))
        },
        destroy: function(e, t) {
            var o, r, l = this.$el, c = this.$(".js-multisuggest-input"), u = c.val().trim();
            u && c.val("").trigger({
                type: "keydown",
                keyCode: d,
                inputValue: u
            }),
            r = this.getSelectedItems(),
            o = i(s({
                ref: this.options.items_template || "/tmpl/users_select/users_select_items.twig"
            }).render(n.extend({
                id: this.options.id,
                class_name: this.options.class_name || "",
                input_name: this.options.input_name,
                items: r
            }, this.options.onRenderItemsParams ? this.options.onRenderItemsParams(r) : {}))),
            n.isFunction(this.options.onDestroy) && this.options.onDestroy.call(this, r, u),
            this.options.id && this.$el.attr("id") !== this.options.id && (l = i("#" + this.options.id)),
            l.replaceWith(o),
            o.find('input[type="checkbox"]').trigger("change"),
            a.prototype.destroy.call(this)
        },
        onInit: function(e) {
            this.$el.addClass("users-select-wrapper_editing"),
            n.isFunction(e) && e.call(this)
        },
        setPositions: function() {
            a.prototype.setPositions.apply(this, arguments),
            n.isFunction(this.options.onSetPositions) && this.options.onSetPositions.call(this),
            this.sticky_headers && this.sticky_headers.refresh()
        },
        bindEvents: function() {
            a.prototype.bindEvents.call(this),
            AMOCRM.is_touch_device && (this.$el.on("focus blur", ".js-multisuggest-input", n.bind(function() {
                setTimeout(n.bind(function() {
                    this.setPositions()
                }, this), 200)
            }, this)),
            this.options.select_one && this.$el.on("blur", ".js-multisuggest-input", n.throttle(n.bind(function() {
                this.destroy()
            }, this), 100, {
                leading: !1
            }))),
            this.$list.on("click", ".users-select__head-allgroup", n.bind(this.addGroupClick, this)).on("suggest:suggest:click", ".users-select__head", n.bind(this.addGroupClick, this)),
            AMOCRM.is_touch_device || (this.sticky_headers = this._addComponent(l, {
                el: this.$list.find(this._selector("suggest")),
                selector: ".users-select__head-title",
                max_sticky_count: 6,
                exclude_scrollbar: !1,
                filterElements: function(e) {
                    return n.filter(e, function(e) {
                        return !i(e).closest(".users-select-row__inner").hasClass("hidden")
                    })
                }
            }))
        },
        onSelectOneKeydown: function(e) {
            return this.options.select_one && e.keyCode === c ? (e.stopPropagation(),
            !0) : void 0
        },
        _getRenderParams: function() {
            return n.extend({
                input_name: this.options.input_name
            }, n.isFunction(this.options.onRenderParams) ? this.options.onRenderParams.call(this) : {})
        },
        _render: function() {
            a.prototype._render.apply(this, arguments),
            this.$list.hide()
        },
        addGroupClick: function(e) {
            var t = i(e.currentTarget).closest(this._selector("group")).attr("data-id")
              , s = i(e.currentTarget).closest(this._selector("group"))
              , o = "";
            e.stopPropagation && e.stopPropagation(),
            o = n.chain(this.users.allmanagers).filter(function(e) {
                return e.group === t
            }).map(function(e) {
                var t = this.$el.find('.js-multisuggest-item[data-id="' + e.id + '"]');
                return t.length && t.remove(),
                this.getHtmlElem({
                    title: e.title,
                    id: e.id,
                    group: e.group
                })
            }, this).value(),
            s.parent().remove(),
            this._elem("input").val(""),
            this._elem("input_wrapper").before(o),
            n.isFunction(this.options.onGroupChoosed) && this.options.onGroupChoosed.call(this),
            this.setPositions()
        },
        setExistsUsersgroup: function() {
            var e = {};
            this.options.existing_items || (n.each(this.users.allmanagers, function(t) {
                var i = this.$(".js-multisuggest-item[data-id=" + t.id + "]");
                e[t.id] = {
                    id: t.id,
                    title: t.title,
                    group: this.users.allmanagers[t.id].group
                },
                i.attr("data-group", this.users.allmanagers[t.id].group)
            }, this),
            this.options.existing_items = e)
        },
        getHtmlElem: function(e) {
            return s({
                ref: this.options.item_template
            }).render({
                item: e
            })
        },
        itemChoose: function(e, t) {
            var s, r = this.el.querySelectorAll(".js-multisuggest-item"), a = this.el.querySelector(".js-multisuggest-input");
            n.isUndefined(this.$el.data("values-hash")[t.id]) || (t.group = this.$el.data("values-hash")[t.id].group),
            e && e.stopPropagation && e.stopPropagation(),
            (!t.is_new || o.checkEmail(t.value)) && (a.value = "",
            t.is_new ? (n.each(r, function(e) {
                e.parentNode.removeChild(e)
            }),
            i(a.parentNode).before(this.getHtmlElem(t))) : (s = n.filter(r, function(e) {
                return i(e).text().toLowerCase() === (t.title || "").toString().toLowerCase()
            }),
            this.options.select_one && r.length > 0 && r[0].parentNode.removeChild(r[0]),
            !this.options.select_one && s.length || !i.trim(t.title) || i(a.parentNode).before(this.getHtmlElem(t))),
            this.options.select_one ? this.destroy() : (this.removeSuggestItem(t),
            this.$el.trigger("multisuggest:item:choosed")))
        },
        removeSuggestItem: function(e) {
            var t = this.$list.find('.js-multisuggest-item[data-id="' + e.id + '"]').parent()
              , i = t.closest(".users-select__body");
            t.remove(),
            this.closingAnEmptyGroup(i),
            this.setPositions()
        },
        closingAnEmptyGroup: function(e) {
            e.is(":empty") && e.parent().remove()
        },
        onItemRemove: function() {
            this.$el.trigger("multisuggest:set_suggest", [!1]),
            a.prototype.onItemRemove.apply(this, arguments)
        },
        loadItems: function() {
            this.$list.addClass("js-loading"),
            !this.options.load_data && AMOCRM.constant("loaded_users") ? this.loadHelper() : i.ajax({
                url: "/ajax/get_managers_with_group/",
                type: "POST",
                data: this.options.load_data || {},
                dataType: "json"
            }).done(n.bind(function(e) {
                this.options.load_data || AMOCRM.constant("loaded_users", e),
                n.each(n.where(e.managers, {
                    free_user: "N"
                }), function(e) {
                    r.add(e)
                }),
                this.loadHelper(e)
            }, this))
        },
        loadHelper: function(e) {
            var t = this.options.users || {};
            e = e || AMOCRM.constant("loaded_users"),
            this.users = {
                managers: e.managers,
                allmanagers: n.extend({}, t.managers, e.managers),
                groups: n.extend({}, t.groups, e.groups)
            },
            this.options.disabled_users && n.each(this.users.allmanagers, function(e) {
                e.chat_id || (e.active = !1)
            }),
            this.setExistsUsersgroup(),
            this.$list.removeClass("js-loading"),
            this.setItems({
                from_load: !0
            }),
            this.setPositions()
        },
        setItems: function() {
            var e = this.loadManagersForTheSelector();
            this._elem("loader").remove(),
            this.$el.data("values-hash", e).data("groups-hash", this.users.groups),
            this.$el.trigger("multisuggest:set_suggest", this._elem("input").val() || !1),
            this.options.from_load && !n.keys(e).length && this.checkSuggestsExists(!1)
        },
        loadManagersForTheSelector: function() {
            return n.isUndefined(this.users.allmanagers) ? {} : n.extend({}, this.users.allmanagers)
        },
        findGroup: function(e) {
            var t = this.$el.data("groups-hash") || {};
            return t = n.filter(t, function(t) {
                var i = (t || "").toString().toLowerCase()
                  , s = o.transliterate(i)
                  , n = o.transliterate(i, "punto");
                return i && (s.match(e) || n.match(e) || i.match(e))
            }),
            n.isUndefined(t) ? [] : t
        },
        findUser: function(e) {
            var t = this.$el.data("values-hash") || {}
              , s = this.$el.find(".multisuggest__list").find(".multisuggest__list-item:not(.multisuggest__list-item_input)");
            return n.filter(t, function(t) {
                var n = (t.title || "").toString().toLowerCase()
                  , r = (t.login || "").toString().toLowerCase()
                  , a = o.transliterate(n)
                  , l = o.transliterate(n, "punto");
                return n && (a.match(e) || l.match(e) || n.match(e) || r.match(e)) && (this.options.select_one || !s.filter(function(e, s) {
                    return parseInt(i(s).attr("data-id")) === parseInt(t.id)
                }).length)
            }, this)
        },
        setUsers: function(e, t) {
            var i, o, r, a = this.getSelectedItems() || {}, l = {}, c = !1;
            switch (e.stopPropagation(),
            t === !1 && (t = ""),
            n.isUndefined(t) || (o = new RegExp("(^|\\s)" + (t ? t.replace(/(\[|\/)/gi, "\\$1") : ""),"i"),
            l = this.findGroup(o),
            i = this.findUser(o, l)),
            ["events", "statsCalls"].indexOf(AMOCRM.getBaseEntity()) > -1 && (c = !Boolean(a.filter(function(e) {
                return "0" === e.id
            }).length)),
            r = this.getRenderUsersAndGroups(i, l),
            !0) {
            case n.isEmpty(r.users) && !n.findWhere(r.groups, {
                hidden: !1
            }):
                this.$list.hide();
                break;
            default:
                this._render_users_cache && n.isEqual(this._render_users_cache, r.users) && !c || (this.$list.show().find(".multisuggest__suggest").html(s({
                    ref: this.options.users_template
                }).render({
                    class_name: "users_select_wrapper",
                    select_one: this.options.select_one,
                    rows: r.groups,
                    items: r.users,
                    user_bot: c
                })),
                n.isFunction(this.options.onRenderSuggest) && this.options.onRenderSuggest.call(this),
                this.setPositions())
            }
            this._elem("input").trigger("multisuggest:select-first", [this.getHighlightedItem(a[0], r)]),
            this._render_users_cache = r.users
        },
        getHighlightedItem: function(e, t) {
            return e
        },
        getRenderUsersAndGroups: function(e, t) {
            var i, s;
            return i = n.reduce(e, function(e, t, i) {
                return n.isArray(e[t.group]) || (e[t.group] = []),
                this.options.disabled_users === !1 ? t.active === !0 && e[t.group].push(t) : e[t.group].push(t),
                e
            }, {}, this),
            s = this.getRenderAllGroup(t, i),
            {
                users: i,
                groups: s
            }
        },
        getRenderAllGroup: function(e, t) {
            var i = this.$el.data("groups-hash") || {};
            return n.reduce(i, function(i, s, o) {
                return i[o] = {
                    title: s,
                    hidden: !(t[o] || !this.options.select_one && n.indexOf(e, s) + 1),
                    id: o
                },
                i
            }, {}, this)
        },
        getSelectedItems: function() {
            var e = a.prototype.getSelectedItems.apply(this, arguments)
              , t = this.users && this.users.allmanagers ? this.users.allmanagers : r.get();
            return n.map(e, function(e) {
                return n.extend(e, {
                    name: e.title,
                    group: t[e.id] && t[e.id].group,
                    active: t[e.id] && t[e.id].active
                })
            }, this)
        }
    })
}),
define("lib/interface/card/controls/users_select", ["require", "underscore", "lib/common/fn", "lib/core/users", "lib/interface/card/controls/subscribers/network/service", "lib/interface/amojo/mediator", "lib/interface/users_select"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = e("lib/interface/card/controls/subscribers/network/service")
      , o = (e("lib/interface/amojo/mediator"),
    e("lib/interface/users_select"));
    return o.extend({
        _show_all: !1,
        _selected_all: !1,
        initialize: function(e) {
            this.SELECTABLE_GROUPS = [],
            t.extend(e, {
                users_template: "/tmpl/users_select/wrapper/amojo.twig"
            }),
            o.prototype.initialize.apply(this, arguments),
            this.options.select_members === !0 && this.SELECTABLE_GROUPS.push("members")
        },
        _getChatMembers: function() {
            var e, i = s.get(!0), o = [];
            return void 0 === this.options.entity ? !1 : (e = new n(this.options.entity.element_type,this.options.entity.id),
            t.each(e.items.models, function(e) {
                0 === e.attributes.user_id ? t.each(i, function(t) {
                    t.group === "group_" + e.attributes.group_id && o.push(t.amojo_id)
                }) : o.push(i[e.id].amojo_id)
            }),
            o || {})
        },
        getRenderUsersAndGroups: function(e, n) {
            var r, a, l = {}, c = this.$el.data("groups-hash"), d = t.isFunction(this.options.getChatMembers) ? this.options.getChatMembers() : this._getChatMembers();
            return n = t.filter(c, function(e, i) {
                return -1 !== n.indexOf(e) && -1 !== t.indexOf(this.SELECTABLE_GROUPS, i)
            }, this),
            a = t.reduce(e, function(e, i, n) {
                var o = i.group;
                return "external" !== o && (o = "members"),
                -1 === t.indexOf(d, i.amojo_id || i.id) && "external" !== i.group || this.options.exclude_me && parseInt(i.id) === s.current("id") || (t.isArray(e[o]) || (e[o] = []),
                e[o].push(i)),
                e
            }, {}, this),
            this._show_all || !t.keys(a).length || n.length && !a.members ? (r = o.prototype.getRenderUsersAndGroups.apply(this, arguments),
            a.members && (r.users.members = [{
                id: "show_members",
                group: "members",
                title: i.i18n("Show participants only")
            }],
            r.groups.members.hidden = !1,
            r.groups.members.hide_title = !0),
            r.users = t.reduce(r.users, function(e, i, n) {
                var o = t.filter(i, function(e) {
                    return !this.options.exclude_me || parseInt(e.id) !== s.current("id")
                }, this);
                return o.length ? e[n] = o : r.groups[n].hidden = !0,
                e
            }, {}, this),
            r) : (l = t.reduce(["external", "members"], function(e, i) {
                return e[i] = {
                    title: c[i],
                    hidden: !a[i] && -1 === t.indexOf(n, c[i]),
                    selectable: -1 !== t.indexOf(this.SELECTABLE_GROUPS, i),
                    id: i
                },
                e
            }, {}, this),
            a.members && (l.members.select_title = i.i18n("Write to all"),
            a.members.push({
                id: "show_all",
                group: "members",
                title: i.i18n("Show all users in chat")
            })),
            {
                users: a,
                groups: l
            })
        },
        getHighlightedItem: function(e, i) {
            var s = t.chain(i.users).clone().toArray().flatten().filter(function(e) {
                return "show_all" !== e.id
            }).value();
            return e = t.findWhere(s, {
                id: e.id,
                title: e.title
            }),
            e || (e = s[0]),
            e
        },
        itemChoose: function(e, t) {
            switch (t.id) {
            case "show_members":
            case "show_all":
                e.stopPropagation(),
                this.$(".js-multisuggest-input").val(""),
                this._show_all = !this._show_all,
                this.setUsers(e, !1);
                break;
            default:
                o.prototype.itemChoose.apply(this, arguments)
            }
        },
        getSelectedItems: function() {
            return this._selected_all ? [{
                id: "all"
            }] : o.prototype.getSelectedItems.apply(this, arguments)
        },
        setExistsUsersgroup: function() {
            this.users.groups.members = i.i18n("Participants"),
            o.prototype.setExistsUsersgroup.apply(this, arguments)
        },
        addGroupClick: function() {
            this._selected_all = !0,
            this.destroy()
        }
    })
}),
define("lib/interface/notes/views/add/mixins/users_select", ["require", "underscore", "lib/common/fn", "lib/core/users", "lib/interface/card/controls/users_select"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = e("lib/interface/card/controls/users_select");
    return {
        events: {
            "click .js-feed-users": "_initUsersSelect"
        },
        _initUsersSelect: function(e) {
            var o = this
              , r = {
                el: this.$(".js-feed-users").get(0),
                inner_id: "feed_users_select",
                input_name: "feed_compose_user",
                class_name: "feed-compose-user",
                select_one: !0,
                exclude_me: "chat" === this.options._type,
                select_members: "chat" === this.options._type,
                entity: t.isFunction(this._getElement) ? this._getElement() : {},
                not_remove: !1,
                disabled_users: !0,
                users: t.isFunction(this._getUsers) ? this._getUsers() : {},
                existing_items: t.isFunction(this._getExistingUsers) ? this._getExistingUsers() : {},
                load_data: t.isFunction(this._getUsersSelectData) ? this._getUsersSelectData() : !1,
                items_template: "/tmpl/notes/feed_user.twig",
                onRenderItemsParams: function(e) {
                    return e[0] || {}
                },
                onDestroy: function(e, n) {
                    !e.length && i.checkEmail(n) && (e = t.reduce(s.get(!0), function(e, t) {
                        return t.login === n && (e = {
                            group: "",
                            title: t.title,
                            id: t.id
                        }),
                        e
                    }, null),
                    e || (e = [{
                        is_new: !0,
                        group: "",
                        title: n
                    }])),
                    t.isFunction(o._onUserChanged) && o._onUserChanged(e[0])
                }
            };
            this._addComponent(n, r)
        }
    }
}),
define("lib/interface/amojo/collection", ["require", "underscore", "backbone", "lib/interface/amojo/api", "rxjs"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("backbone"), n = e("lib/interface/amojo/api"), o = e("rxjs");
    return t = s.Collection.extend({
        _has_next_page: !0,
        _page_length: 100,
        url: function() {
            return n.getLinks().fetchMessages(this.id)
        },
        initialize: function(e, t) {
            t = t || {},
            this.id = t.id,
            this.options = t
        },
        hasNextPage: function() {
            return this._has_next_page
        },
        parse: function(e) {
            return this._pending = !1,
            this.trigger("fetched", e),
            s.Collection.prototype.parse.apply(this, arguments)
        },
        fetch: function(e) {
            return e = e || {},
            this._pending ? void 0 : (this._pending = !0,
            e.data = i.extend({}, e.data, {
                offset: (parseInt(e.data.page) - 1) * e.data.limit
            }),
            n.withToken(i.bind(function(t) {
                return e.headers = i.extend({}, e.headers, {
                    "X-Auth-Token": t.token
                }),
                o.Observable.fromPromise(s.Collection.prototype.fetch.apply(this, [e]).always(i.bind(function() {
                    this._pending = !1
                }, this)).done(i.bind(function(t) {
                    (!t || t.length < e.data.limit) && (this._has_next_page = !1)
                }, this)).fail(i.bind(function() {
                    this._has_next_page = !1,
                    this.trigger("error")
                }, this)))
            }, this)).toPromise())
        }
    })
}),
define("lib/interface/notes/views/add/amojo", ["require", "underscore", "twig", "cocktail", "lib/common/fn", "lib/core/users", "lib/interface/notes/views/add/note", "lib/interface/notes/views/add/mixins/users_select", "lib/interface/amojo/api", "lib/interface/amojo/mediator", "lib/interface/amojo/collection", "lib/components/base/confirm", "FileAPI", "rxjs"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("cocktail")
      , n = e("lib/common/fn")
      , o = e("lib/core/users")
      , r = e("lib/interface/notes/views/add/note")
      , a = e("lib/interface/notes/views/add/mixins/users_select")
      , l = e("lib/interface/amojo/api")
      , c = e("lib/interface/amojo/mediator")
      , d = e("lib/interface/amojo/collection")
      , u = e("lib/components/base/confirm")
      , h = e("FileAPI")
      , _ = e("rxjs")
      , p = AMOCRM.constant("account") || {}
      , m = 8;
    return r.extend({
        className: "feed-compose__inner_chats",
        token_error_counter: 0,
        rxUploadSubscription: null,
        events: t.extend({}, r.prototype.events || {}, {
            "keydown [contenteditable]": "focusToUserOnBackspace",
            input: "sendTypeEventOnInput"
        }),
        _getTemplate: function() {
            return "/tmpl/notes/adding/amojo.twig"
        },
        _getRenderParams: function() {
            return t.extend(r.prototype._getRenderParams.apply(this, arguments), {
                amojo_disabled: !p.amojo_enabled
            })
        },
        getExistingText: function() {
            return this._getMessageValue()
        },
        setParamsOnSwitch: function(e) {
            var i = o.get("all")[e.user_id];
            switch (!0) {
            case !e.user_id:
                i = null;
                break;
            case !t.isUndefined(i):
                i = {
                    id: i.amojo_id
                };
                break;
            default:
                i = {
                    id: e.user_id
                }
            }
            this.onOpenCompose({
                recipient: i
            })
        },
        sendTypeEventOnInput: function() {
            var e = t.pluck(c.get(), "chat_id") || {};
            e.length && this.eventUserTyping(e)
        },
        eventUserTyping: t.throttle(function(e) {
            l.sendTyping(e).subscribe()
        }, 5e3, {
            trailing: !1
        }),
        onOpenCompose: function(e) {
            var i, s, r, a, l = o.getByAmoJoId(), d = this._getInternalChat(), u = null, h = !1;
            if (!e) {
                if (!t.isEmpty(this._chat_params))
                    return;
                e = this.options.getLastChatMessage() || {
                    recipient: {}
                }
            }
            switch (i = t.find(c.get(), function(t) {
                return e.recipient && t.contacts[e.recipient.id]
            }, this),
            !0) {
            case t.isNull(e.recipient):
                h = !0,
                a = {
                    id: null
                };
                break;
            case !t.isUndefined(l[e.recipient.id]):
                a = l[e.recipient.id];
                break;
            case !t.isUndefined(i):
                s = this._getUsers().managers[i.chat_id] || {},
                a = {
                    name: s.title + " (" + n.capitalize(s.origin_title) + ")",
                    id: null
                },
                d = i;
                break;
            default:
                a = this._getDefaultRecipient()
            }
            r = a.id,
            d && (u = d.chat_id),
            this._updateChatParams({
                is_external: d && -1 === [AMOCRM.element_types.leads, AMOCRM.element_types.customers].indexOf(parseInt(d.entity_type)),
                to_all: h,
                name: a.title || a.name,
                chat_id: u,
                user_id: r
            }),
            this.focusContentEditable()
        },
        onFoldCompose: t.noop,
        initialize: function(e) {
            this.options = t.extend({}, e || {}, {
                onToggleClassModificator: t.noop
            }),
            this.onOpenCompose(),
            s.mixin(this, a),
            r.prototype.initialize.apply(this, arguments)
        },
        focusToUserOnBackspace: function(e) {
            e.keyCode !== m || this._getMessageValue(!1).replace(/\s+/gi, "") || this._initUsersSelect()
        },
        cancel: function() {
            r.prototype.cancel.apply(this, arguments),
            this.rxUploadSubscription && this.rxUploadSubscription.dispose()
        },
        _getDefaultRecipient: function() {
            var e = o.get(!0)
              , i = this.options.getResponsibleId();
            return i !== o.current("id") && e[i] ? e[i] : t.find(e, function(e) {
                return parseInt(e.id) !== parseInt(o.current().id)
            }) || o.current()
        },
        _getUserRenderParams: function() {
            return {
                main_class_name: "js-feed-users",
                user_class_name: "js-multisuggest-item"
            }
        },
        _renderSelectedUser: function() {
            var e = this._getUserRenderParams();
            this.$("#feed_compose_user").html(i({
                ref: "/tmpl/notes/feed_user.twig"
            }).render(t.extend({
                is_new: !this._chat_params.user_id,
                id: this._chat_params.user_id || this._chat_params.chat_id,
                name: this._chat_params.name
            }, e || {}))),
            this.options.onToggleClassModificator("feed-compose_amojo-internal", !this._chat_params.is_external)
        },
        _onUserChanged: function(e) {
            var t = null
              , i = null
              , s = !1
              , n = this._getInternalChat();
            if (e) {
                switch (!0) {
                case "all" === e.id:
                    n && (t = n.chat_id),
                    s = !0;
                    break;
                case "external" !== e.group:
                    n && (t = n.chat_id),
                    e.id && (i = e.id);
                    break;
                default:
                    t = e.id
                }
                this._updateChatParams({
                    is_external: "external" === e.group,
                    to_all: s,
                    user_id: i,
                    chat_id: t,
                    name: e.title
                }),
                this._findElem("textarea").focus()
            } else
                this._renderSelectedUser();
            this.checkMessageIndent()
        },
        _updateChatParams: function(e) {
            var i = null
              , s = null
              , r = !1
              , a = this.options.getExtraData()
              , l = o.get(!0);
            if (e) {
                switch (!0) {
                case e.to_all:
                    r = e.to_all;
                    break;
                case e.user_id && !t.isUndefined(l[parseInt(e.user_id)]):
                    i = l[e.user_id].amojo_id;
                    break;
                case e.is_external && n.has_keys(a.chats, [e.chat_id, "contacts"]):
                    i = t.keys(a.chats[e.chat_id].contacts)[0],
                    s = t.values(a.chats[e.chat_id].contacts)[0].origin
                }
                this._chat_params = {
                    is_external: e.is_external,
                    to_all: r,
                    user_id: e.user_id,
                    chat_id: e.chat_id,
                    name: r ? n.i18n("Chat for all").toLowerCase() : e.name,
                    recipient_id: i,
                    origin: s
                }
            }
            this._renderSelectedUser(),
            this._renderState()
        },
        _render: function() {
            r.prototype._render.apply(this, arguments),
            this._renderSelectedUser(),
            this.$el.attr("class", "js-note feed-compose_amojo"),
            this._renderState()
        },
        _renderState: function() {
            this._chat_params.is_external ? this.$el.addClass("external").addClass("external-" + this._chat_params.origin).removeClass("internal") : this.$el.removeClass("external").addClass("internal")
        },
        _sendError: function() {
            this._findElem("textarea").addClass("animated shake").removeAttr("disabled").focus(),
            this.editLoading(!1),
            t.delay(t.bind(function() {
                this._findElem("textarea").removeClass("animated shake")
            }, this), 200)
        },
        _getInternalChat: function() {
            return t.find(this.options.getExtraData().chats, function(e) {
                return -1 !== [AMOCRM.element_types.leads, AMOCRM.element_types.customers, AMOCRM.element_types.unsorted].indexOf(parseInt(e.entity_type))
            })
        },
        _getElement: function() {
            return t.find(this.options.getExtraData().elements, function(e) {
                return -1 !== [AMOCRM.element_types.leads, AMOCRM.element_types.customers, AMOCRM.element_types.unsorted].indexOf(parseInt(e.element_type))
            })
        },
        _checkUserForCreate: function() {
            var e, i, s = $.Deferred(), r = this._getMessageValue(), a = AMOCRM.constant("user_rights");
            return this._chat_params.to_all || this._chat_params.user_id || this._chat_params.is_external ? s.resolve() : a.leads.edit || a.contacts.edit || a.companies.edit ? (i = this._getElement(),
            this._findElem("submit").trigger("button:load:start", ["white"]),
            $.ajax({
                url: "/ajax/v1/users/add",
                type: "POST",
                dataType: "json",
                data: {
                    request: {
                        users: {
                            add: [{
                                free: !0,
                                email: this._chat_params.name,
                                entity_id: i.id,
                                entity_type: i.element_type,
                                chat_message: r
                            }]
                        }
                    }
                }
            }).always(t.bind(function() {
                this._findElem("submit").trigger("button:load:stop")
            }, this)).done(t.bind(function(i) {
                i && n.has_keys(i, ["response", "users", "add", "0", "id"]) && i.response.users.add[0].result ? (e = i.response.users.add[0],
                o.add({
                    id: e.id,
                    amojo_id: e.amojo_id,
                    login: this._chat_params.name,
                    option: this._chat_params.name,
                    title: this._chat_params.name,
                    free_user: "Y",
                    active: !0
                }),
                this._updateChatParams(t.extend(this._chat_params, {
                    user_id: e.id
                })),
                s.resolve()) : (i && n.has_keys(i, ["response", "users", "add", "0", "inactive"]) && new u({
                    class_name: "modal-list",
                    accept_text: "OK",
                    text: AMOCRM.lang.unable_to_add,
                    no_cancel: !0,
                    message: [{
                        text: AMOCRM.lang.user_is_deactivated
                    }]
                }),
                this._sendError(),
                s.reject())
            }, this)).fail(t.bind(function() {
                this._sendError(),
                s.reject()
            }, this)),
            s.promise()) : (this._sendError(),
            s.reject())
        },
        _checkChatForCreate: function() {
            var e, i = $.Deferred(), s = this._getElement(), n = [o.current().id];
            return s ? (this._chat_params.user_id && n.push(this._chat_params.user_id),
            this._chat_params.chat_id ? this._checkUserExistsInChat().done(function() {
                i.resolve()
            }) : l.createChat(l.CHAT_INTERNAL, s.id, s.element_type, n).map(function(e) {
                return e.response.chats.create
            }).subscribe(t.bind(function(n) {
                e = {
                    chat_id: n.id,
                    contacts: {},
                    entity_id: s.id,
                    entity_type: s.element_type,
                    token: n.token,
                    users: n.users
                },
                c.addChat(e),
                this.options.addAmoJoCollection(new d([],t.extend(e, {
                    id: e.chat_id
                }))),
                this._updateChatParams(t.extend(this._chat_params, {
                    chat_id: e.chat_id
                })),
                i.resolve()
            }, this), t.bind(function(e) {
                throw this._sendError(),
                e
            }, this)),
            i.promise()) : (this._sendError(),
            i.reject())
        },
        _checkUserExistsInChat: function() {
            var e = $.Deferred()
              , i = c.get()[this._chat_params.chat_id]
              , s = [o.current().id]
              , n = t.map(i.users, function(e) {
                return e.id
            })
              , r = o.get(!0)
              , a = {};
            return this._chat_params.user_id && s.push(parseInt(this._chat_params.user_id)),
            s = t.unique(t.difference(s, n)),
            s.length ? (l.addUsersToChat(i.chat_id, s).map(function(e) {
                return e.response.chats.users.add[i.chat_id].users
            }).subscribe(function(n) {
                t.each(s, function(e) {
                    n[e] && (a[r[e].amojo_id] = {
                        amojo_id: r[e].amojo_id,
                        id: e
                    })
                }),
                c.updateChat(i.chat_id, {
                    users: a
                }),
                e.resolve()
            }, t.bind(function(e) {
                throw this._sendError(),
                e
            }, this)),
            e.promise()) : e.resolve()
        },
        save: function() {
            var e = this._getMessageValue();
            if (e.length)
                return this.editLoading(!0),
                this._checkUserForCreate().then(t.bind(this._checkChatForCreate, this)).then(t.bind(this._send, this))
        },
        _send: function() {
            var e = this._getMessageValue();
            e.length && (this._$document.trigger("users:list:changed"),
            this._findElem("textarea").prop("contenteditable", "false"),
            o.set({}),
            l.sendMessage(this._chat_params.chat_id, e, this._chat_params.recipient_id).subscribe(t.bind(this._onMessageSend, this), t.bind(this._sendError, this)))
        },
        _getUsers: function() {
            var e, i, s = this.options.getExtraData(), o = t.reduce(s.chats, function(n, o) {
                return -1 === [AMOCRM.element_types.leads, AMOCRM.element_types.customers].indexOf(parseInt(o.entity_type)) && (e = t.find(s.elements, function(e) {
                    return parseInt(e.id) === parseInt(o.entity_id)
                }),
                e && (i = t.values(o.contacts)[0],
                n[o.chat_id] = {
                    group: "external",
                    title: e.name,
                    option: e.name,
                    active: !0,
                    origin: i ? i.origin : "facebook",
                    origin_title: i.origin_title,
                    origin_icon: i.origin_icon,
                    id: o.chat_id
                })),
                n
            }, {}, this);
            return {
                managers: o,
                groups: {
                    external: n.i18n("Contacts")
                }
            }
        },
        _getUsersSelectData: function() {
            return {
                free_users: 1
            }
        },
        editLoading: function(e) {
            var t = "load:start";
            e === !1 && (t = "load:stop"),
            this.$(".button-input:visible").trigger("button:" + t, ["white"])
        },
        addAttach: function(e) {
            this.editLoading(!0),
            this._$document.trigger("users:list:changed"),
            this._findElem("textarea").prop("contenteditable", "false"),
            o.set({}),
            this._setChanges({
                files: !0
            }),
            this._checkUserForCreate().then(t.bind(this._checkChatForCreate, this)).then(t.bind(this._sendFile(e), this))
        },
        _sendFile: function(e) {
            return function() {
                var i = _.Observable.fromEventPattern(function(t) {
                    h.readAsArrayBuffer(e, t)
                })
                  , s = i.filter(function(e) {
                    return "load" === e.type
                }).map(this._mapToFile(e), this).flatMap(function(e) {
                    return l.sendFile(this._chat_params.chat_id, e, this._chat_params.recipient_id)
                }, null, this);
                this.rxUploadSubscription = s.subscribe(t.bind(this._onMessageSend, this), t.bind(this._sendError, this))
            }
        },
        _mapToFile: function(e) {
            return function(t) {
                return {
                    name: e.name,
                    mimeType: e.type,
                    bytes: t.result,
                    desc: this._form.model.get("text")
                }
            }
        },
        _onMessageSend: function() {
            this.editLoading(!1),
            this._findElem("textarea").text("").prop("contenteditable", "true"),
            this._form.model.set("message", ""),
            this.options.onAdd(),
            this._findElem("textarea").focus()
        }
    })
}),
define("lib/components/base/inbox/reply/base_view", ["require", "lib/core/view", "twig", "underscore", "FileAPI", "lib/interface/amojo/mediator", "lib/interface/notes/views/add/amojo"], function(e) {
    "use strict";
    var t = e("lib/core/view")
      , i = e("twig")
      , s = e("underscore")
      , n = e("FileAPI")
      , o = e("lib/interface/amojo/mediator")
      , r = e("lib/interface/notes/views/add/amojo");
    return r.extend({
        events: {
            "click .feed-note__button:not(.button-input-disabled)": "save",
            "click .js-note-edit-cancel": "cancel",
            input: "sendTypeEventOnInput"
        },
        _selectors: function() {
            return s.extend(r.prototype._selectors.apply(this) || {}, {
                message_field: "textarea",
                send_button: ".js-note-submit",
                scroll_wrap: ".feed-compose__message-wrapper"
            })
        },
        _classes: function() {
            return s.extend(r.prototype._classes.apply(this) || {}, {
                send_button_disabled: "button-input-disabled"
            })
        },
        _getTemplate: function() {
            return ""
        },
        saver: null,
        initialize: function(e) {
            this.options = e || {},
            t.prototype.initialize.apply(this, arguments),
            this.render(),
            n.event.on(this.$('input[type="file"]')[0], "change", s.bind(this.saveFile, this)),
            this._$document.on("controls:hide:private" + this.ns, s.bind(this._onOutsideClick, this))
        },
        destroy: function() {
            n.event.off(this.$('input[type="file"]')[0], "change"),
            o.set(o.get()),
            t.prototype.destroy.apply(this, arguments)
        },
        onKeyDown: function(e) {
            !e.ctrlKey && !e.metaKey || 13 !== e.keyCode && 10 !== e.keyCode || this.save()
        },
        sendTypeEventOnInput: function(e) {
            if (!s.isEmpty(e.target.value)) {
                var t = s.pluck(o.get("direct"), "chat_id") || {};
                t.length && this.eventUserTyping(t)
            }
        },
        onTextChanged: function() {
            var e = this._getMessageValue(!0);
            e.length > 0 ? this._toggleClass("send_button_disabled", "send_button", !1) : this._toggleClass("send_button_disabled", "send_button", !0)
        },
        _getMessageValue: function() {
            return this._elem("message_field").val().trim()
        },
        render: function() {
            this.$el.html(i({
                ref: this._getTemplate()
            }).render({
                disableReplyTo: !0,
                disableParticipants: !0
            }))
        },
        setSaver: function(e) {
            this.saver = e
        },
        save: function() {
            var e = this._elem("message_field").val().trim();
            e.length && (this._addClass("send_button_disabled", "send_button"),
            this._findElem("message_field").prop("disabled", "disabled"),
            this._elem("send_button").trigger("button:load:start"),
            s.isObject(this.saver) ? this.saver.message(e, s.bind(this.onSaveComplete, this), s.bind(this._sendError, this), this._chat_params.recipient_id) : this.onSaveComplete())
        },
        saveFile: function(e) {
            var t, i, o;
            this._addClass("send_button_disabled", "send_button"),
            this._elem("send_button").trigger("button:load:start"),
            this._findElem("message_field").prop("disabled", "disabled"),
            t = this._elem("message_field").val().trim(),
            i = n.getFiles(e)[0],
            n.readAsArrayBuffer(i, s.bind(function(e) {
                switch (e.type) {
                case "load":
                    s.isObject(this.saver) ? (o = {
                        name: i.name,
                        mimeType: i.type,
                        bytes: e.result,
                        desc: t
                    },
                    this.saver.file(o, s.bind(this.onSaveComplete, this), s.bind(this._sendError, this), this._chat_params.recipient_id)) : this.onSaveComplete();
                    break;
                case "progress":
                    this.file_pending = !0;
                    break;
                default:
                    this.onSaveComplete(),
                    this._sendError()
                }
            }, this))
        },
        _onOutsideClick: function(e, t, i) {
            var n = !s.isUndefined(i) && $.contains(this.el, i.get(0))
              , o = "note-edit-attach-filenew" === i.get(0).id;
            return n || o ? !1 : void this.cancel(e)
        },
        cancel: function(e) {
            var t = e || {}
              , i = $(t.currentTarget).is(this._$document);
            return this.file_pending ? !1 : this.$el.hasClass("minimized") ? void e.stopPropagation() : (this._elem("message_field").trigger("change").trigger("autosize.destroy").css("overflow", function() {
                return $(this).attr("contenteditable") ? "" : "hidden"
            }),
            i || this._elem("message_field").css("overflow", "").val("").text(""),
            this._elem("scroll_wrap").length && this._elem("scroll_wrap").css("overflow-y", "hidden"),
            this._elem("send_button").trigger("button:load:stop"),
            i || this._elem("message_field").focus(),
            this._elem("message_field").prop("disabled", !1),
            this.$('input[type="file"]').val(""),
            s.isFunction(this.options.onCancel) && (this.options.onCancel(i),
            this._elem("message_field").val() ? (this.$(".custom-scroll").scrollTop(0),
            this._elem("message_field").blur()) : this._toggleClass("send_button_disabled", "send_button", !0)),
            this._$document.trigger("suggest:manager:destroy"),
            this.trigger("onCancel"),
            !1)
        },
        onSaveComplete: function() {
            this.file_pending = !1,
            this._elem("send_button").trigger("button:load:stop"),
            this.setValue(""),
            this._elem("message_field").prop("disabled", !1),
            this.$('input[type="file"]').val(""),
            this._toggleClass("send_button_disabled", "send_button", !0),
            this.cancel()
        },
        _sendError: function() {
            this._removeClass("send_button_disabled", "send_button"),
            this._findElem("message_field").prop("disabled", !1),
            this._elem("message_field").trigger("button:load:stop"),
            this.$('input[type="file"]').val(""),
            r.prototype._sendError.apply(this, arguments)
        },
        getValue: function() {
            return this._elem("message_field").val() || ""
        },
        setValue: function(e) {
            e = e || "",
            e !== this.getValue() && this._elem("message_field").val(e).trigger("input")
        }
    })
}),
define("lib/components/base/inbox/reply/light_view", ["require", "underscore", "lib/components/base/inbox/reply/base_view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/inbox/reply/base_view");
    return i.extend({
        events: t.extend(i.prototype.events || {}, {
            "keydown textarea": "onKeyDown",
            "input textarea": "onTextChanged"
        }),
        _chat_params: {
            recipient_id: null
        },
        _getTemplate: function() {
            return "/tmpl/inbox/direct_chat/compose.twig"
        },
        placeCaretAtEnd: function() {
            var e = this._elem("message_field")
              , i = e.val()
              , s = i.length
              , n = e[0].createTextRange ? e[0].createTextRange() : !1;
            e.focus(),
            n ? (n.collapse(!1),
            n.select()) : t.isFunction(e[0].setSelectionRange) ? e[0].setSelectionRange(s, s) : e.val("").val(i),
            this.$(".custom-scroll").scrollTop(e[0].scrollHeight)
        }
    })
}),
define("lib/components/base/inbox/reply/mixins/users_select", ["require", "underscore", "lib/common/fn", "lib/core/users", "lib/components/base/inbox/constants", "lib/interface/amojo/mediator", "lib/interface/card/controls/users_select"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = (e("lib/components/base/inbox/constants"),
    e("lib/interface/amojo/mediator"),
    e("lib/interface/card/controls/users_select"));
    return {
        events: {
            "click .js-feed-users": "_initUsersSelect"
        },
        _initUsersSelect: function(e) {
            var o = this
              , r = {
                el: this.$(".js-feed-users").get(0),
                inner_id: "feed_users_select",
                input_name: "feed_compose_user",
                class_name: "feed-compose-user",
                select_one: !0,
                exclude_me: !0,
                select_members: !0,
                not_remove: !1,
                disabled_users: !0,
                chat_id: this.options.chat_id,
                existing_items: t.isFunction(this._getExistingUsers) ? this._getExistingUsers() : {},
                load_data: t.isFunction(this._getUsersSelectData) ? this._getUsersSelectData() : !1,
                items_template: "/tmpl/notes/feed_user.twig",
                onRenderItemsParams: function(e) {
                    return e[0] || {}
                },
                onDestroy: function(e, n) {
                    !e.length && i.checkEmail(n) && (e = t.reduce(s.get(!0), function(e, t) {
                        return t.login === n && (e = {
                            group: "",
                            title: t.title,
                            id: t.id
                        }),
                        e
                    }, null),
                    e || (e = [{
                        is_new: !0,
                        group: "",
                        title: n
                    }])),
                    t.isFunction(o._onUserChanged) && o._onUserChanged(e[0])
                },
                getChatMembers: function() {
                    return t.keys(o._getExistingUsers())
                }
            };
            this._addComponent(n, r)
        }
    }
}),
define("lib/components/base/inbox/reply/group_view", ["require", "twig", "underscore", "lib/common/fn", "lib/core/users", "cocktail", "lib/interface/amojo/api", "lib/interface/amojo/mediator", "lib/components/base/inbox/reply/mixins/users_select", "lib/components/base/inbox/reply/base_view"], function(e) {
    "use strict";
    var t = (e("twig"),
    e("underscore"))
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = e("cocktail")
      , o = e("lib/interface/amojo/api")
      , r = e("lib/interface/amojo/mediator")
      , a = e("lib/components/base/inbox/reply/mixins/users_select")
      , l = e("lib/components/base/inbox/reply/base_view")
      , c = 8;
    return l.extend({
        events: t.extend(l.prototype.events || {}, {
            "keydown [contenteditable]": "onKeyDown",
            "input [contenteditable]": "onTextChanged",
            "focus [contenteditable]": "focusContentEditable"
        }),
        _selectors: function() {
            return t.extend(l.prototype._selectors.apply(this) || {}, {
                message_field: "[contenteditable]"
            })
        },
        _getTemplate: function() {
            return "/tmpl/inbox/group_chat/compose.twig"
        },
        defaultOptions: {
            onToggleClassModificator: t.noop
        },
        initialize: function(e) {
            e = e || {},
            e = t.extend({}, e || {}, this.defaultOptions),
            n.mixin(this, a),
            this.listenTo(this, "replySelectionAddressee", this.changeCompose),
            l.prototype.initialize.apply(this, [e])
        },
        changeCompose: function(e) {
            this._updateChatParams(e),
            this._elem("message_field").focus()
        },
        sendTypeEventOnInput: function(e) {
            if (!t.isEmpty(e.target.value)) {
                var i = t.pluck(r.get("group"), "chat_id") || {};
                i.length && this.eventUserTyping(i)
            }
        },
        onOpenCompose: function() {
            this._updateChatParams({
                to_all: !0
            }),
            this._elem("message_field").focus()
        },
        onTextChanged: function() {
            l.prototype.onTextChanged.apply(this, arguments),
            this.checkMessageIndent()
        },
        save: function() {
            this._checkUserExistsInChat().then(t.bind(l.prototype.save, this))
        },
        saveFile: function(e) {
            this._checkUserExistsInChat().then(t.bind(l.prototype.saveFile, this, e))
        },
        _getMessageValue: function() {
            return this._elem("message_field").get(0).innerText.trim()
        },
        _checkUserExistsInChat: function() {
            var e = $.Deferred()
              , i = this.options.chat_id
              , n = this._getUsers()
              , a = [s.current().id]
              , l = s.get(!0)
              , c = s.current("id")
              , d = {};
            return n = t.map(n, function(e) {
                return t.isUndefined(e.id) ? void 0 : parseInt(e.id)
            }),
            this._chat_params.user_id && a.push(parseInt(this._chat_params.user_id)),
            a.push(parseInt(c)),
            a = t.unique(t.difference(a, n)),
            a.length ? (t.each(a, t.bind(function(e) {
                this.options.subscriber.subscribe(e)
            }, this)),
            this.options.subscriber.save().subscribe(t.noop),
            o.addUsersToChat(i, a).map(function(e) {
                return e.response.chats.users.add[i].users
            }).subscribe(t.bind(function(s) {
                t.each(a, t.bind(function(e) {
                    s[e] && l[e] && (d[l[e].amojo_id] = l[e])
                }, this)),
                r.updateChat(i, {
                    users: t.extend({}, this._getUsers(), d),
                    subscribers: t.extend({}, this._getSubscribers(!1), d)
                }),
                e.resolve()
            }, this), t.bind(function(e) {
                throw this._sendError(),
                e
            }, this)),
            e.promise()) : e.resolve()
        },
        render: function() {
            l.prototype.render.apply(this, arguments),
            this.onOpenCompose()
        },
        _onUserChanged: function(e) {
            var t = null
              , i = !1;
            if (e) {
                switch (!0) {
                case "all" === e.id:
                    i = !0;
                    break;
                default:
                    t = e.id
                }
                this._updateChatParams({
                    to_all: i,
                    user_id: t,
                    name: e.title
                }),
                this._elem("message_field").focus()
            } else
                this._renderSelectedUser();
            this.checkMessageIndent()
        },
        _updateChatParams: function(e) {
            var n = null
              , o = !1
              , r = s.get(!0);
            if (e) {
                switch (!0) {
                case e.to_all:
                    o = e.to_all;
                    break;
                case e.user_id && !t.isUndefined(r[parseInt(e.user_id)]):
                    n = r[e.user_id].amojo_id
                }
                this._chat_params = {
                    to_all: o,
                    user_id: e.user_id,
                    name: o ? i.i18n("Chat for all").toLowerCase() : e.name,
                    recipient_id: n
                }
            }
            this._renderSelectedUser()
        },
        getValue: function() {
            return this._getMessageValue(!0)
        },
        setValue: function(e) {
            e = e || "",
            e !== this.getValue() && this._elem("message_field").text(e).trigger("input")
        },
        _getUsers: function() {
            return r.get("group")[this.options.chat_id].users || {}
        },
        _getSubscribers: function(e) {
            var i, n, o = r.get("group")[this.options.chat_id].subscribers || {}, a = s.get(!0);
            return e && (i = this._getGroups(),
            n = t.reduce(a, function(e, t) {
                return i[t.group] && (e[t.amojo_id] = t),
                e
            }, {}, this),
            o = t.extend({}, o, n)),
            o
        },
        _getGroups: function() {
            return r.get("group")[this.options.chat_id].groups || {}
        },
        _getUsersSelectData: function() {
            return {
                free_users: 1
            }
        },
        _getExistingUsers: function() {
            return this._getSubscribers(!0)
        },
        focusContentEditable: function() {
            var e = this._elem("message_field").get(0);
            e && this.checkMessageIndent()
        },
        checkMessageIndent: function() {
            var e = "";
            this._findElem("message_field").is(":empty") && (e = this.$(".feed-compose__before").width() + 7),
            this._elem("message_field").css("padding-left", e),
            this._elem("message_field").val(this._getMessageValue()).trigger("change")
        },
        placeCaretAtEnd: function() {
            var e = this._elem("message_field")
              , t = document.createRange ? document.createRange() : !1
              , i = window.getSelection ? window.getSelection() : !1
              , s = document.body.createTextRange ? document.body.createTextRange() : !1;
            e.focus(),
            i && t ? (t.selectNodeContents(e[0]),
            t.collapse(!1),
            i.removeAllRanges(),
            i.addRange(t)) : s && (s.moveToElementText(e[0]),
            s.collapse(!1),
            s.select()),
            this.$(".custom-scroll").scrollTop(e.height())
        },
        onKeyDown: function(e) {
            this.focusToUserOnBackspace(e),
            l.prototype.onKeyDown.apply(this, arguments)
        },
        focusToUserOnBackspace: function(e) {
            e.keyCode !== c || this._getMessageValue().replace(/\s+/gi, "") || this._initUsersSelect()
        }
    })
}),
define("lib/components/base/inbox/reply_form", ["require", "lib/core/view", "underscore", "lib/components/base/inbox/constants", "lib/components/base/inbox/reply/light_view", "lib/components/base/inbox/reply/group_view"], function(e) {
    "use strict";
    var t = e("lib/core/view")
      , i = e("underscore")
      , s = e("lib/components/base/inbox/constants")
      , n = e("lib/components/base/inbox/reply/light_view")
      , o = e("lib/components/base/inbox/reply/group_view")
      , r = 8;
    return t.extend({
        replyForm: null,
        _classes: function() {
            return {
                inner: ".feed-compose__inner"
            }
        },
        events: {
            click: "openComposeOnClick",
            keydown: "focusToUserOnBackspace",
            input: "onInput"
        },
        initialize: function(e) {
            var r;
            this.options = e || {},
            t.prototype.initialize.apply(this, arguments),
            r = this.options.type === s.TYPE_GROUP ? o : n,
            this.replyForm = this._addComponent(r, this.options),
            this.listenTo(this, "selectionAddressee", this.changeCompose),
            this.replyForm.on("onCancel", i.bind(this.closeCompose, this, this.options.onCloseMessage)),
            this.$el.append(this.replyForm.el)
        },
        changeCompose: function(e) {
            this.replyForm.trigger("replySelectionAddressee", e)
        },
        onInput: function(e) {
            this.openCompose(e),
            i.isFunction(this.options.saveValue) && this.options.saveValue()
        },
        openComposeOnClick: function(e) {
            e.stopPropagation(),
            this.openCompose(e)
        },
        openCompose: function(e) {
            var t = !!e;
            this.$el.hasClass("minimized") && ((t || !AMOCRM.is_touch_device) && (this.$el.removeClass("minimized").css("overflow", ""),
            this.replyForm._elem("scroll_wrap").length && this.replyForm._elem("scroll_wrap").css("overflow-y", "auto"),
            this.replyForm._elem("message_field").css("overflow", "").autosize(),
            this.trigger("onOpen")),
            i.isFunction(this.options.restoreValue) && this.options.restoreValue(),
            this.replyForm.placeCaretAtEnd())
        },
        closeCompose: function(e) {
            return this.$el.addClass("minimized").css("overflow", "hidden"),
            i.isFunction(e) && e(),
            !1
        },
        setSaver: function(e) {
            this.replyForm.setSaver(e)
        },
        getValue: function() {
            return this.replyForm.getValue()
        },
        focusToUserOnBackspace: function(e) {
            e.keyCode === r && this.openComposeOnClick(e)
        },
        setValue: function(e) {
            this.replyForm.setValue(e)
        }
    })
}),
function(e) {
    "function" == typeof define && define.amd ? define("magnific-popup", ["jquery"], e) : e("object" == typeof exports ? require("jquery") : window.jQuery || window.Zepto)
}(function(e) {
    var t, i, s, n, o, r, a = "Close", l = "BeforeClose", c = "AfterClose", d = "BeforeAppend", u = "MarkupParse", h = "Open", _ = "Change", p = "mfp", m = "." + p, f = "mfp-ready", g = "mfp-removing", b = "mfp-prevent-close", v = function() {}, y = !!window.jQuery, w = e(window), C = function(e, i) {
        t.ev.on(p + e + m, i)
    }, k = function(t, i, s, n) {
        var o = document.createElement("div");
        return o.className = "mfp-" + t,
        s && (o.innerHTML = s),
        n ? i && i.appendChild(o) : (o = e(o),
        i && o.appendTo(i)),
        o
    }, x = function(i, s) {
        t.ev.triggerHandler(p + i, s),
        t.st.callbacks && (i = i.charAt(0).toLowerCase() + i.slice(1),
        t.st.callbacks[i] && t.st.callbacks[i].apply(t, e.isArray(s) ? s : [s]))
    }, M = function(i) {
        return i === r && t.currTemplate.closeBtn || (t.currTemplate.closeBtn = e(t.st.closeMarkup.replace("%title%", t.st.tClose)),
        r = i),
        t.currTemplate.closeBtn
    }, A = function() {
        e.magnificPopup.instance || (t = new v,
        t.init(),
        e.magnificPopup.instance = t)
    }, O = function() {
        var e = document.createElement("p").style
          , t = ["ms", "O", "Moz", "Webkit"];
        if (void 0 !== e.transition)
            return !0;
        for (; t.length; )
            if (t.pop() + "Transition"in e)
                return !0;
        return !1
    };
    v.prototype = {
        constructor: v,
        init: function() {
            var i = navigator.appVersion;
            t.isLowIE = t.isIE8 = document.all && !document.addEventListener,
            t.isAndroid = /android/gi.test(i),
            t.isIOS = /iphone|ipad|ipod/gi.test(i),
            t.supportsTransition = O(),
            t.probablyMobile = t.isAndroid || t.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),
            s = e(document),
            t.popupsCache = {}
        },
        open: function(i) {
            var n;
            if (i.isObj === !1) {
                t.items = i.items.toArray(),
                t.index = 0;
                var r, a = i.items;
                for (n = 0; n < a.length; n++)
                    if (r = a[n],
                    r.parsed && (r = r.el[0]),
                    r === i.el[0]) {
                        t.index = n;
                        break
                    }
            } else
                t.items = e.isArray(i.items) ? i.items : [i.items],
                t.index = i.index || 0;
            if (t.isOpen)
                return void t.updateItemHTML();
            t.types = [],
            o = "",
            i.mainEl && i.mainEl.length ? t.ev = i.mainEl.eq(0) : t.ev = s,
            i.key ? (t.popupsCache[i.key] || (t.popupsCache[i.key] = {}),
            t.currTemplate = t.popupsCache[i.key]) : t.currTemplate = {},
            t.st = e.extend(!0, {}, e.magnificPopup.defaults, i),
            t.fixedContentPos = "auto" === t.st.fixedContentPos ? !t.probablyMobile : t.st.fixedContentPos,
            t.st.modal && (t.st.closeOnContentClick = !1,
            t.st.closeOnBgClick = !1,
            t.st.showCloseBtn = !1,
            t.st.enableEscapeKey = !1),
            t.bgOverlay || (t.bgOverlay = k("bg").on("click" + m, function() {
                t.close()
            }),
            t.wrap = k("wrap").attr("tabindex", -1).on("click" + m, function(e) {
                t._checkIfClose(e.target) && t.close()
            }),
            t.container = k("container", t.wrap)),
            t.contentContainer = k("content"),
            t.st.preloader && (t.preloader = k("preloader", t.container, t.st.tLoading));
            var l = e.magnificPopup.modules;
            for (n = 0; n < l.length; n++) {
                var c = l[n];
                c = c.charAt(0).toUpperCase() + c.slice(1),
                t["init" + c].call(t)
            }
            x("BeforeOpen"),
            t.st.showCloseBtn && (t.st.closeBtnInside ? (C(u, function(e, t, i, s) {
                i.close_replaceWith = M(s.type)
            }),
            o += " mfp-close-btn-in") : t.wrap.append(M())),
            t.st.alignTop && (o += " mfp-align-top"),
            t.fixedContentPos ? t.wrap.css({
                overflow: t.st.overflowY,
                overflowX: "hidden",
                overflowY: t.st.overflowY
            }) : t.wrap.css({
                top: w.scrollTop(),
                position: "absolute"
            }),
            (t.st.fixedBgPos === !1 || "auto" === t.st.fixedBgPos && !t.fixedContentPos) && t.bgOverlay.css({
                height: s.height(),
                position: "absolute"
            }),
            t.st.enableEscapeKey && s.on("keyup" + m, function(e) {
                27 === e.keyCode && t.close()
            }),
            w.on("resize" + m, function() {
                t.updateSize()
            }),
            t.st.closeOnContentClick || (o += " mfp-auto-cursor"),
            o && t.wrap.addClass(o);
            var d = t.wH = w.height()
              , _ = {};
            if (t.fixedContentPos && t._hasScrollBar(d)) {
                var p = t._getScrollbarSize();
                p && (_.marginRight = p)
            }
            t.fixedContentPos && (t.isIE7 ? e("body, html").css("overflow", "hidden") : _.overflow = "hidden");
            var g = t.st.mainClass;
            return t.isIE7 && (g += " mfp-ie7"),
            g && t._addClassToMFP(g),
            t.updateItemHTML(),
            x("BuildControls"),
            e("html").css(_),
            t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo || e(document.body)),
            t._lastFocusedEl = document.activeElement,
            setTimeout(function() {
                t.content ? (t._addClassToMFP(f),
                t._setFocus()) : t.bgOverlay.addClass(f),
                s.on("focusin" + m, t._onFocusIn)
            }, 16),
            t.isOpen = !0,
            t.updateSize(d),
            x(h),
            i
        },
        close: function() {
            t.isOpen && (x(l),
            t.isOpen = !1,
            t.st.removalDelay && !t.isLowIE && t.supportsTransition ? (t._addClassToMFP(g),
            setTimeout(function() {
                t._close()
            }, t.st.removalDelay)) : t._close())
        },
        _close: function() {
            x(a);
            var i = g + " " + f + " ";
            if (t.bgOverlay.detach(),
            t.wrap.detach(),
            t.container.empty(),
            t.st.mainClass && (i += t.st.mainClass + " "),
            t._removeClassFromMFP(i),
            t.fixedContentPos) {
                var n = {
                    marginRight: ""
                };
                t.isIE7 ? e("body, html").css("overflow", "") : n.overflow = "",
                e("html").css(n)
            }
            s.off("keyup" + m + " focusin" + m),
            t.ev.off(m),
            t.wrap.attr("class", "mfp-wrap").removeAttr("style"),
            t.bgOverlay.attr("class", "mfp-bg"),
            t.container.attr("class", "mfp-container"),
            !t.st.showCloseBtn || t.st.closeBtnInside && t.currTemplate[t.currItem.type] !== !0 || t.currTemplate.closeBtn && t.currTemplate.closeBtn.detach(),
            t.st.autoFocusLast && t._lastFocusedEl && e(t._lastFocusedEl).focus(),
            t.currItem = null,
            t.content = null,
            t.currTemplate = null,
            t.prevHeight = 0,
            x(c)
        },
        updateSize: function(e) {
            if (t.isIOS) {
                var i = document.documentElement.clientWidth / window.innerWidth
                  , s = window.innerHeight * i;
                t.wrap.css("height", s),
                t.wH = s
            } else
                t.wH = e || w.height();
            t.fixedContentPos || t.wrap.css("height", t.wH),
            x("Resize")
        },
        updateItemHTML: function() {
            var i = t.items[t.index];
            t.contentContainer.detach(),
            t.content && t.content.detach(),
            i.parsed || (i = t.parseEl(t.index));
            var s = i.type;
            if (x("BeforeChange", [t.currItem ? t.currItem.type : "", s]),
            t.currItem = i,
            !t.currTemplate[s]) {
                var o = t.st[s] ? t.st[s].markup : !1;
                x("FirstMarkupParse", o),
                o ? t.currTemplate[s] = e(o) : t.currTemplate[s] = !0
            }
            n && n !== i.type && t.container.removeClass("mfp-" + n + "-holder");
            var r = t["get" + s.charAt(0).toUpperCase() + s.slice(1)](i, t.currTemplate[s]);
            t.appendContent(r, s),
            i.preloaded = !0,
            x(_, i),
            n = i.type,
            t.container.prepend(t.contentContainer),
            x("AfterChange")
        },
        appendContent: function(e, i) {
            t.content = e,
            e ? t.st.showCloseBtn && t.st.closeBtnInside && t.currTemplate[i] === !0 ? t.content.find(".mfp-close").length || t.content.append(M()) : t.content = e : t.content = "",
            x(d),
            t.container.addClass("mfp-" + i + "-holder"),
            t.contentContainer.append(t.content)
        },
        parseEl: function(i) {
            var s, n = t.items[i];
            if (n.tagName ? n = {
                el: e(n)
            } : (s = n.type,
            n = {
                data: n,
                src: n.src
            }),
            n.el) {
                for (var o = t.types, r = 0; r < o.length; r++)
                    if (n.el.hasClass("mfp-" + o[r])) {
                        s = o[r];
                        break
                    }
                n.src = n.el.attr("data-mfp-src"),
                n.src || (n.src = n.el.attr("href"))
            }
            return n.type = s || t.st.type || "inline",
            n.index = i,
            n.parsed = !0,
            t.items[i] = n,
            x("ElementParse", n),
            t.items[i]
        },
        addGroup: function(e, i) {
            var s = function(s) {
                s.mfpEl = this,
                t._openClick(s, e, i)
            };
            i || (i = {});
            var n = "click.magnificPopup";
            i.mainEl = e,
            i.items ? (i.isObj = !0,
            e.off(n).on(n, s)) : (i.isObj = !1,
            i.delegate ? e.off(n).on(n, i.delegate, s) : (i.items = e,
            e.off(n).on(n, s)))
        },
        _openClick: function(i, s, n) {
            var o = void 0 !== n.midClick ? n.midClick : e.magnificPopup.defaults.midClick;
            if (o || !(2 === i.which || i.ctrlKey || i.metaKey || i.altKey || i.shiftKey)) {
                var r = void 0 !== n.disableOn ? n.disableOn : e.magnificPopup.defaults.disableOn;
                if (r)
                    if (e.isFunction(r)) {
                        if (!r.call(t))
                            return !0
                    } else if (w.width() < r)
                        return !0;
                i.type && (i.preventDefault(),
                t.isOpen && i.stopPropagation()),
                n.el = e(i.mfpEl),
                n.delegate && (n.items = s.find(n.delegate)),
                t.open(n)
            }
        },
        updateStatus: function(e, s) {
            if (t.preloader) {
                i !== e && t.container.removeClass("mfp-s-" + i),
                s || "loading" !== e || (s = t.st.tLoading);
                var n = {
                    status: e,
                    text: s
                };
                x("UpdateStatus", n),
                e = n.status,
                s = n.text,
                t.preloader.html(s),
                t.preloader.find("a").on("click", function(e) {
                    e.stopImmediatePropagation()
                }),
                t.container.addClass("mfp-s-" + e),
                i = e
            }
        },
        _checkIfClose: function(i) {
            if (!e(i).hasClass(b)) {
                var s = t.st.closeOnContentClick
                  , n = t.st.closeOnBgClick;
                if (s && n)
                    return !0;
                if (!t.content || e(i).hasClass("mfp-close") || t.preloader && i === t.preloader[0])
                    return !0;
                if (i === t.content[0] || e.contains(t.content[0], i)) {
                    if (s)
                        return !0
                } else if (n && e.contains(document, i))
                    return !0;
                return !1
            }
        },
        _addClassToMFP: function(e) {
            t.bgOverlay.addClass(e),
            t.wrap.addClass(e)
        },
        _removeClassFromMFP: function(e) {
            this.bgOverlay.removeClass(e),
            t.wrap.removeClass(e)
        },
        _hasScrollBar: function(e) {
            return (t.isIE7 ? s.height() : document.body.scrollHeight) > (e || w.height())
        },
        _setFocus: function() {
            (t.st.focus ? t.content.find(t.st.focus).eq(0) : t.wrap).focus()
        },
        _onFocusIn: function(i) {
            return i.target === t.wrap[0] || e.contains(t.wrap[0], i.target) ? void 0 : (t._setFocus(),
            !1)
        },
        _parseMarkup: function(t, i, s) {
            var n;
            s.data && (i = e.extend(s.data, i)),
            x(u, [t, i, s]),
            e.each(i, function(i, s) {
                if (void 0 === s || s === !1)
                    return !0;
                if (n = i.split("_"),
                n.length > 1) {
                    var o = t.find(m + "-" + n[0]);
                    if (o.length > 0) {
                        var r = n[1];
                        "replaceWith" === r ? o[0] !== s[0] && o.replaceWith(s) : "img" === r ? o.is("img") ? o.attr("src", s) : o.replaceWith(e("<img>").attr("src", s).attr("class", o.attr("class"))) : o.attr(n[1], s)
                    }
                } else
                    t.find(m + "-" + i).html(s)
            })
        },
        _getScrollbarSize: function() {
            if (void 0 === t.scrollbarSize) {
                var e = document.createElement("div");
                e.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",
                document.body.appendChild(e),
                t.scrollbarSize = e.offsetWidth - e.clientWidth,
                document.body.removeChild(e)
            }
            return t.scrollbarSize
        }
    },
    e.magnificPopup = {
        instance: null,
        proto: v.prototype,
        modules: [],
        open: function(t, i) {
            return A(),
            t = t ? e.extend(!0, {}, t) : {},
            t.isObj = !0,
            t.index = i || 0,
            this.instance.open(t)
        },
        close: function() {
            return e.magnificPopup.instance && e.magnificPopup.instance.close()
        },
        registerModule: function(t, i) {
            i.options && (e.magnificPopup.defaults[t] = i.options),
            e.extend(this.proto, i.proto),
            this.modules.push(t)
        },
        defaults: {
            disableOn: 0,
            key: null,
            midClick: !1,
            mainClass: "",
            preloader: !0,
            focus: "",
            closeOnContentClick: !1,
            closeOnBgClick: !0,
            closeBtnInside: !0,
            showCloseBtn: !0,
            enableEscapeKey: !0,
            modal: !1,
            alignTop: !1,
            removalDelay: 0,
            prependTo: null,
            fixedContentPos: "auto",
            fixedBgPos: "auto",
            overflowY: "auto",
            closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',
            tClose: "Close (Esc)",
            tLoading: "Loading...",
            autoFocusLast: !0
        }
    },
    e.fn.magnificPopup = function(i) {
        A();
        var s = e(this);
        if ("string" == typeof i)
            if ("open" === i) {
                var n, o = y ? s.data("magnificPopup") : s[0].magnificPopup, r = parseInt(arguments[1], 10) || 0;
                o.items ? n = o.items[r] : (n = s,
                o.delegate && (n = n.find(o.delegate)),
                n = n.eq(r)),
                t._openClick({
                    mfpEl: n
                }, s, o)
            } else
                t.isOpen && t[i].apply(t, Array.prototype.slice.call(arguments, 1));
        else
            i = e.extend(!0, {}, i),
            y ? s.data("magnificPopup", i) : s[0].magnificPopup = i,
            t.addGroup(s, i);
        return s
    }
    ;
    var $, T, S, E = "inline", j = function() {
        S && (T.after(S.addClass($)).detach(),
        S = null)
    };
    e.magnificPopup.registerModule(E, {
        options: {
            hiddenClass: "hide",
            markup: "",
            tNotFound: "Content not found"
        },
        proto: {
            initInline: function() {
                t.types.push(E),
                C(a + "." + E, function() {
                    j()
                })
            },
            getInline: function(i, s) {
                if (j(),
                i.src) {
                    var n = t.st.inline
                      , o = e(i.src);
                    if (o.length) {
                        var r = o[0].parentNode;
                        r && r.tagName && (T || ($ = n.hiddenClass,
                        T = k($),
                        $ = "mfp-" + $),
                        S = o.after(T).detach().removeClass($)),
                        t.updateStatus("ready")
                    } else
                        t.updateStatus("error", n.tNotFound),
                        o = e("<div>");
                    return i.inlineElement = o,
                    o
                }
                return t.updateStatus("ready"),
                t._parseMarkup(s, {}, i),
                s
            }
        }
    });
    var R, P = function(i) {
        if (i.data && void 0 !== i.data.title)
            return i.data.title;
        var s = t.st.image.titleSrc;
        if (s) {
            if (e.isFunction(s))
                return s.call(t, i);
            if (i.el)
                return i.el.attr(s) || ""
        }
        return ""
    };
    e.magnificPopup.registerModule("image", {
        options: {
            markup: '<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',
            cursor: "mfp-zoom-out-cur",
            titleSrc: "title",
            verticalFit: !0,
            tError: '<a href="%url%">The image</a> could not be loaded.'
        },
        proto: {
            initImage: function() {
                var i = t.st.image
                  , s = ".image";
                t.types.push("image"),
                C(h + s, function() {
                    "image" === t.currItem.type && i.cursor && e(document.body).addClass(i.cursor)
                }),
                C(a + s, function() {
                    i.cursor && e(document.body).removeClass(i.cursor),
                    w.off("resize" + m)
                }),
                C("Resize" + s, t.resizeImage),
                t.isLowIE && C("AfterChange", t.resizeImage)
            },
            resizeImage: function() {
                var e = t.currItem;
                if (e && e.img && t.st.image.verticalFit) {
                    var i = 0;
                    t.isLowIE && (i = parseInt(e.img.css("padding-top"), 10) + parseInt(e.img.css("padding-bottom"), 10)),
                    e.img.css("max-height", t.wH - i)
                }
            },
            _onImageHasSize: function(e) {
                e.img && (e.hasSize = !0,
                R && clearInterval(R),
                e.isCheckingImgSize = !1,
                x("ImageHasSize", e),
                e.imgHidden && (t.content && t.content.removeClass("mfp-loading"),
                e.imgHidden = !1))
            },
            findImageSize: function(e) {
                var i = 0
                  , s = e.img[0]
                  , n = function(o) {
                    R && clearInterval(R),
                    R = setInterval(function() {
                        return s.naturalWidth > 0 ? void t._onImageHasSize(e) : (i > 200 && clearInterval(R),
                        i++,
                        void (3 === i ? n(10) : 40 === i ? n(50) : 100 === i && n(500)))
                    }, o)
                };
                n(1)
            },
            getImage: function(i, s) {
                var n = 0
                  , o = function() {
                    i && (i.img[0].complete ? (i.img.off(".mfploader"),
                    i === t.currItem && (t._onImageHasSize(i),
                    t.updateStatus("ready")),
                    i.hasSize = !0,
                    i.loaded = !0,
                    x("ImageLoadComplete")) : (n++,
                    200 > n ? setTimeout(o, 100) : r()))
                }
                  , r = function() {
                    i && (i.img.off(".mfploader"),
                    i === t.currItem && (t._onImageHasSize(i),
                    t.updateStatus("error", a.tError.replace("%url%", i.src))),
                    i.hasSize = !0,
                    i.loaded = !0,
                    i.loadError = !0)
                }
                  , a = t.st.image
                  , l = s.find(".mfp-img");
                if (l.length) {
                    var c = document.createElement("img");
                    c.className = "mfp-img",
                    i.el && i.el.find("img").length && (c.alt = i.el.find("img").attr("alt")),
                    i.img = e(c).on("load.mfploader", o).on("error.mfploader", r),
                    c.src = i.src,
                    l.is("img") && (i.img = i.img.clone()),
                    c = i.img[0],
                    c.naturalWidth > 0 ? i.hasSize = !0 : c.width || (i.hasSize = !1)
                }
                return t._parseMarkup(s, {
                    title: P(i),
                    img_replaceWith: i.img
                }, i),
                t.resizeImage(),
                i.hasSize ? (R && clearInterval(R),
                i.loadError ? (s.addClass("mfp-loading"),
                t.updateStatus("error", a.tError.replace("%url%", i.src))) : (s.removeClass("mfp-loading"),
                t.updateStatus("ready")),
                s) : (t.updateStatus("loading"),
                i.loading = !0,
                i.hasSize || (i.imgHidden = !0,
                s.addClass("mfp-loading"),
                t.findImageSize(i)),
                s)
            }
        }
    });
    var I, F = function() {
        return void 0 === I && (I = void 0 !== document.createElement("p").style.MozTransform),
        I
    };
    e.magnificPopup.registerModule("zoom", {
        options: {
            enabled: !1,
            easing: "ease-in-out",
            duration: 300,
            opener: function(e) {
                return e.is("img") ? e : e.find("img")
            }
        },
        proto: {
            initZoom: function() {
                var e, i = t.st.zoom, s = ".zoom";
                if (i.enabled && t.supportsTransition) {
                    var n, o, r = i.duration, c = function(e) {
                        var t = e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image")
                          , s = "all " + i.duration / 1e3 + "s " + i.easing
                          , n = {
                            position: "fixed",
                            zIndex: 9999,
                            left: 0,
                            top: 0,
                            "-webkit-backface-visibility": "hidden"
                        }
                          , o = "transition";
                        return n["-webkit-" + o] = n["-moz-" + o] = n["-o-" + o] = n[o] = s,
                        t.css(n),
                        t
                    }, d = function() {
                        t.content.css("visibility", "visible")
                    };
                    C("BuildControls" + s, function() {
                        if (t._allowZoom()) {
                            if (clearTimeout(n),
                            t.content.css("visibility", "hidden"),
                            e = t._getItemToZoom(),
                            !e)
                                return void d();
                            o = c(e),
                            o.css(t._getOffset()),
                            t.wrap.append(o),
                            n = setTimeout(function() {
                                o.css(t._getOffset(!0)),
                                n = setTimeout(function() {
                                    d(),
                                    setTimeout(function() {
                                        o.remove(),
                                        e = o = null,
                                        x("ZoomAnimationEnded")
                                    }, 16)
                                }, r)
                            }, 16)
                        }
                    }),
                    C(l + s, function() {
                        if (t._allowZoom()) {
                            if (clearTimeout(n),
                            t.st.removalDelay = r,
                            !e) {
                                if (e = t._getItemToZoom(),
                                !e)
                                    return;
                                o = c(e)
                            }
                            o.css(t._getOffset(!0)),
                            t.wrap.append(o),
                            t.content.css("visibility", "hidden"),
                            setTimeout(function() {
                                o.css(t._getOffset())
                            }, 16)
                        }
                    }),
                    C(a + s, function() {
                        t._allowZoom() && (d(),
                        o && o.remove(),
                        e = null)
                    })
                }
            },
            _allowZoom: function() {
                return "image" === t.currItem.type
            },
            _getItemToZoom: function() {
                return t.currItem.hasSize ? t.currItem.img : !1
            },
            _getOffset: function(i) {
                var s;
                s = i ? t.currItem.img : t.st.zoom.opener(t.currItem.el || t.currItem);
                var n = s.offset()
                  , o = parseInt(s.css("padding-top"), 10)
                  , r = parseInt(s.css("padding-bottom"), 10);
                n.top -= e(window).scrollTop() - o;
                var a = {
                    width: s.width(),
                    height: (y ? s.innerHeight() : s[0].offsetHeight) - r - o
                };
                return F() ? a["-moz-transform"] = a.transform = "translate(" + n.left + "px," + n.top + "px)" : (a.left = n.left,
                a.top = n.top),
                a
            }
        }
    });
    var D = function(e) {
        var i = t.items.length;
        return e > i - 1 ? e - i : 0 > e ? i + e : e
    }
      , q = function(e, t, i) {
        return e.replace(/%curr%/gi, t + 1).replace(/%total%/gi, i)
    };
    e.magnificPopup.registerModule("gallery", {
        options: {
            enabled: !1,
            arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
            preload: [0, 2],
            navigateByImgClick: !0,
            arrows: !0,
            tPrev: "Previous (Left arrow key)",
            tNext: "Next (Right arrow key)",
            tCounter: "%curr% of %total%"
        },
        proto: {
            initGallery: function() {
                var i = t.st.gallery
                  , n = ".mfp-gallery";
                return t.direction = !0,
                i && i.enabled ? (o += " mfp-gallery",
                C(h + n, function() {
                    i.navigateByImgClick && t.wrap.on("click" + n, ".mfp-img", function() {
                        return t.items.length > 1 ? (t.next(),
                        !1) : void 0
                    }),
                    s.on("keydown" + n, function(e) {
                        37 === e.keyCode ? t.prev() : 39 === e.keyCode && t.next()
                    })
                }),
                C("UpdateStatus" + n, function(e, i) {
                    i.text && (i.text = q(i.text, t.currItem.index, t.items.length))
                }),
                C(u + n, function(e, s, n, o) {
                    var r = t.items.length;
                    n.counter = r > 1 ? q(i.tCounter, o.index, r) : ""
                }),
                C("BuildControls" + n, function() {
                    if (t.items.length > 1 && i.arrows && !t.arrowLeft) {
                        var s = i.arrowMarkup
                          , n = t.arrowLeft = e(s.replace(/%title%/gi, i.tPrev).replace(/%dir%/gi, "left")).addClass(b)
                          , o = t.arrowRight = e(s.replace(/%title%/gi, i.tNext).replace(/%dir%/gi, "right")).addClass(b);
                        n.click(function() {
                            t.prev()
                        }),
                        o.click(function() {
                            t.next()
                        }),
                        t.container.append(n.add(o))
                    }
                }),
                C(_ + n, function() {
                    t._preloadTimeout && clearTimeout(t._preloadTimeout),
                    t._preloadTimeout = setTimeout(function() {
                        t.preloadNearbyImages(),
                        t._preloadTimeout = null
                    }, 16)
                }),
                void C(a + n, function() {
                    s.off(n),
                    t.wrap.off("click" + n),
                    t.arrowRight = t.arrowLeft = null
                })) : !1
            },
            next: function() {
                t.direction = !0,
                t.index = D(t.index + 1),
                t.updateItemHTML()
            },
            prev: function() {
                t.direction = !1,
                t.index = D(t.index - 1),
                t.updateItemHTML()
            },
            goTo: function(e) {
                t.direction = e >= t.index,
                t.index = e,
                t.updateItemHTML()
            },
            preloadNearbyImages: function() {
                var e, i = t.st.gallery.preload, s = Math.min(i[0], t.items.length), n = Math.min(i[1], t.items.length);
                for (e = 1; e <= (t.direction ? n : s); e++)
                    t._preloadItem(t.index + e);
                for (e = 1; e <= (t.direction ? s : n); e++)
                    t._preloadItem(t.index - e)
            },
            _preloadItem: function(i) {
                if (i = D(i),
                !t.items[i].preloaded) {
                    var s = t.items[i];
                    s.parsed || (s = t.parseEl(i)),
                    x("LazyLoad", s),
                    "image" === s.type && (s.img = e('<img class="mfp-img" />').on("load.mfploader", function() {
                        s.hasSize = !0
                    }).on("error.mfploader", function() {
                        s.hasSize = !0,
                        s.loadError = !0,
                        x("LazyLoadError", s)
                    }).attr("src", s.src)),
                    s.preloaded = !0
                }
            }
        }
    }),
    A()
}),
define("lib/interface/notes/mixins/images_preview", ["require", "lib/common/fn", "jquery", "magnific-popup"], function(e) {
    "use strict";
    var t = e("lib/common/fn")
      , i = e("jquery");
    return e("magnific-popup"),
    {
        events: {
            "click .js-new-window": "onAttachDownloadClick"
        },
        setElement: function() {
            var e;
            this.$el.magnificPopup({
                delegate: ".feed-note__img-preview",
                type: "image",
                tLoading: '<span class="spinner-icon spinner-icon-abs-center"></span>',
                closeMarkup: '<button title="%title%" type="button" class="mfp-close mfp-close_image-button"><svg class="svg-icon mfp-close_svg-icon"><use xlink:href="#common--close-not-painted"></use></svg></button>',
                tError: t.i18n("The image could not be loaded").replace("#URL#", "%url%"),
                closeBtnInside: !1,
                tClose: AMOCRM.lang.button_text_close,
                gallery: {
                    enabled: !0,
                    preload: [0, 2],
                    navigateByImgClick: !0,
                    arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"><div></div><div></div></button>',
                    tPrev: "",
                    tNext: "",
                    tCounter: '<span class="mfp-counter">%curr% ' + AMOCRM.lang.step_of + " %total%</span>"
                },
                callbacks: {
                    beforeOpen: function() {
                        e = "hidden" === i("html").css("overflow")
                    },
                    afterClose: function() {
                        e && i("html").css("overflow", "hidden")
                    }
                }
            })
        },
        onAttachDownloadClick: function(e) {
            return i('<iframe style="display: none"></iframe>').attr("src", i(e.currentTarget).parent().attr("href")).appendTo("body").load(function() {
                i(this).remove()
            }),
            !1
        }
    }
}),
define("lib/components/base/inbox/chats/base_chat", ["require", "jquery", "underscore", "twig", "rxjs", "cocktail", "lib/core/view", "lib/common/fn", "lib/components/base/sticky_headers", "lib/interface/amojo/api", "lib/interface/amojo/rtm", "lib/components/base/autoload", "lib/interface/amojo/mediator", "lib/interface/notes/mixins/typing", "lib/components/base/inbox/chat_collection", "lib/components/base/inbox/reply_form", "lib/interface/notes/mixins/images_preview", "lib/components/base/inbox/constants"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("rxjs"), r = e("cocktail"), a = e("lib/core/view"), l = e("lib/common/fn"), c = e("lib/components/base/sticky_headers"), d = e("lib/interface/amojo/api"), u = e("lib/interface/amojo/rtm"), h = e("lib/components/base/autoload"), _ = e("lib/interface/amojo/mediator"), p = e("lib/interface/notes/mixins/typing"), m = e("lib/components/base/inbox/chat_collection"), f = e("lib/components/base/inbox/reply_form"), g = e("lib/interface/notes/mixins/images_preview"), b = e("lib/components/base/inbox/constants"), v = AMOCRM.constant("account");
    return t = a.extend({
        id: null,
        messageID: null,
        type: "chat_direct",
        users: [],
        chat: null,
        me: null,
        to: null,
        replyForm: null,
        template: "",
        currentState: b.STATE_UNINITIALIZED,
        items: [],
        chatViews: [],
        offset: 0,
        socketSubscription: null,
        inboxFilter: null,
        scroller: null,
        isFinished: !1,
        rxSubscriptions: null,
        _selectors: function() {
            return {
                chatsContainer: ".js-notes",
                header: ".chat-inbox__header",
                scroller: ".chat-inbox__content",
                chatWrapper: ".chat-inbox__content-inner",
                messageWrapper: ".chat-inbox__reply",
                scrollerInner: ".js-notes",
                replyField: ".chat-inbox__set-text__typing",
                tmpReplyField: ".feed-compose__inner",
                replyContainer: ".feed-compose",
                close: ".chat-inbox__close",
                loader: ".js-feed-spinner",
                typing_wrapper: ".chat-inbox__content-inner-typing",
                container_typing: ".feed-note-typing-wrapper-amojo",
                inbox__content: ".chat-inbox__content"
            }
        },
        events: {
            "click .chat-inbox__close": "dismiss",
            keydown: "onKeyDown",
            "focus .feed-compose__message": "_updateBottomChatOffset",
            "focus .feed-compose__message-area": "_updateBottomChatOffset",
            "click .inline-keyboard__button": "onInlineButtonClick"
        },
        initialize: function(e) {
            this.readers = [],
            this.all_printing = {},
            this.rxSubscriptions = new o.CompositeDisposable,
            this.options = e || {},
            a.prototype.initialize.apply(this, arguments),
            this.messages = this._addComponent(m.Collection),
            this.messages.bind("add", this.onMessageAdded, this),
            this.model = this.options.model,
            this.id = this.options.id,
            this.read(),
            this.loadData(),
            this.initCollection()
        },
        read: function() {
            this.readers.push(AMOCRM.inbox.addReader(s.bind(function(e) {
                return e.entity.id.toString() === this.id.toString()
            }, this), this.id)),
            AMOCRM.inbox.read({
                type: s.isUndefined(this.model) ? this.type : this.model.get("type"),
                entity_id: this.id
            })
        },
        destroy: function() {
            this._saveUnsentMessage(),
            this.rxSubscriptions.dispose(),
            this.inboxFilter && this.inboxFilter.remove(),
            AMOCRM.inbox.removeReader(this.readers),
            a.prototype.destroy.apply(this, arguments)
        },
        onKeyDown: function(e) {
            e.keyCode === b.ESC_KEY && (e.stopPropagation(),
            this.dismiss())
        },
        scrollFromTyping: function() {
            var e = this._elem("inbox__content").scrollTop()
              , t = this._elem("inbox__content")[0].offsetHeight
              , i = this._elem("inbox__content")[0].scrollHeight
              , n = i === e + t;
            return s.bind(function() {
                n && this.scrollToBottom()
            }, this)
        },
        loadData: function() {
            var e = this._elem("chatsContainer").height();
            this.currentState !== b.STATE_SHOW_LOADING && !this.isFinished && v.amojo_enabled && this.rxSubscriptions.add(this.getChat().switchMap(s.bind(function(e) {
                return e.chat_id = e.id,
                e.entity_type = e.entity_type || "direct",
                _.addChat(e),
                d.fetchMessages(this.chat.id, this.offset, 50)
            }, this)).flatMap(s.bind(function(e) {
                return s.isUndefined(e) ? (this.isFinished = !0,
                this.loader && this._destroyComponent(this.loader),
                o.Observable.empty()) : (e.length < 50 && (this.isFinished = !0,
                this.loader && this._destroyComponent(this.loader)),
                this._elem("loader").remove(),
                o.Observable.from(e))
            }, this)).map(s.bind(this.mapChatItem, this)).subscribe(s.bind(function(e) {
                this.offset++,
                this.messages.add(e, {
                    at: 0
                })
            }, this), s.bind(function(e) {
                throw this.currentState = b.STATE_SHOW_ERROR,
                e
            }, this), s.bind(function() {
                this.currentState === b.STATE_UNINITIALIZED && (this.scrollToBottom(),
                this.subscribeSocket(),
                this.loader = this._addComponent(h, {
                    element: this._elem("scroller")[0],
                    throttle: 300,
                    onLoadMore: s.bind(this.loadData, this),
                    conditions: {
                        "max-top": 100
                    }
                })),
                this.currentState = b.STATE_SHOW_CONTENT,
                this._refreshStickySeparators(),
                this.currentState !== b.STATE_UNINITIALIZED && this.scrollToBottom(this._elem("chatsContainer").height() - e),
                this.trigger("loadUserList")
            }, this)))
        },
        dismiss: function() {
            this.trigger("onClosed")
        },
        subscribeSocket: function() {
            var e = u.socket.map(function(e) {
                return JSON.parse(e.data)
            })
              , t = e.filter(function(e) {
                return "message_created" === e.type
            }).map(function(e) {
                return e.data.message
            }).filter(s.bind(function(e) {
                return e.chat_id === this.chat.id
            }, this)).map(s.bind(this.mapChatItem, this))
              , i = e.filter(function(e) {
                return "typing" === e.type
            }).map(function(e) {
                return e.data
            }).filter(s.bind(function(e) {
                return e.chat_id === this.chat.id
            }, this));
            this.rxSubscriptions.add(t.subscribe(s.bind(function(e) {
                this.offset++,
                this.messages.add(e)
            }, this), function(e) {
                throw e
            }, s.bind(function() {
                this._refreshStickySeparators()
            }, this))),
            this.rxSubscriptions.add(i.subscribe(s.bind(function(e) {
                this._onTypingFromSocket("direct", e)
            }, this), function(e) {
                throw e
            }))
        },
        scrollToBottom: function(e) {
            var t = this._findElem("scroller")
              , i = t.get(0).scrollHeight;
            t.scrollTop(e || i)
        },
        onMessageAdded: function(e) {
            var t = this.messages.at(0) === e
              , i = this._addComponent(m.View, {
                model: e,
                $container: this._elem("chatsContainer"),
                method: t ? "prepend" : "append",
                type: s.isUndefined(this.model) ? this.type : this.model.get("type")
            });
            this.removeTypingAfterSendMessage(e.attributes.author),
            this.chatViews.push(i),
            i.render(),
            this.scrollToBottom()
        },
        _refreshStickySeparators: function() {
            this.sticky_separators && this.sticky_separators.refresh()
        },
        onFileSubmit: function(e, t, i, n) {
            this.rxFileSendSubscription = d.sendFile(this.chat.id, e, n).map(this.mapChatItem, this).subscribe(s.bind(this.onMessageSend(t), this), s.bind(i)),
            this.rxSubscriptions.add(this.rxFileSendSubscription)
        },
        onMessageSubmit: function(e, t, i, n, o) {
            this.rxSubscriptions.add(d.sendMessage(this.chat.id, e, n, o).map(this.mapChatItem, this).subscribe(s.bind(this.onMessageSend(t), this), s.bind(i)))
        },
        onInlineButtonClick: function(e) {
            var t = i(e.currentTarget);
            this.onMessageSubmit(t.text(), s.noop, s.noop, this.to.id, t.data("value"))
        },
        onMessageSend: function(e) {
            return function(t) {
                this.messages.add(t),
                this.scrollToBottom(),
                this._refreshStickySeparators(),
                e()
            }
        },
        showContent: s.noop,
        render: function() {
            return n._preload([this.template])().then(s.bind(this._render, this))
        },
        _render: function() {
            var e = l.getScrollBarWidth("custom-scroll");
            this.setElement(i(n({
                ref: this.template
            }).render(s.extend(this.to, {
                amojo_disabled: !v.amojo_enabled
            })))),
            this.replyForm = this._addComponent(f, s.extend(this._getReplyParams(), {
                onCloseMessage: s.bind(this._updateBottomChatOffset, this),
                onCancel: s.bind(this.onCancel, this)
            })),
            this.replyForm.setSaver({
                message: s.bind(this.onMessageSubmit, this),
                file: s.bind(this.onFileSubmit, this)
            }),
            this.replyForm.on("onOpen", s.bind(function() {
                this.scrollToBottom()
            }, this)),
            this.options.$container.append(this.$el),
            this.openReplyForm(),
            AMOCRM.is_touch_device || (this.sticky_separators = this._addComponent(c, {
                el: this._elem("scroller"),
                selector: ".separator__inner",
                top_offset: 10,
                no_stack_items: !0
            })),
            this._elem("replyContainer").css("margin-right", e)
        },
        openReplyForm: function() {
            this.replyForm && this.replyForm.openCompose()
        },
        _onReplyFormClosed: function() {
            this._saveUnsentMessage(),
            this.rxFileSendSubscription && this.rxFileSendSubscription.dispose(),
            this._updateBottomChatOffset()
        },
        _saveUnsentMessage: function() {
            var e = this._getStorage()
              , t = e.chats[this.getId()] || ""
              , i = this.replyForm.getValue();
            t !== i && (e.chats[this.getId()] = i,
            this._setStorage(e))
        },
        _restoreUnsentMessage: function() {
            var e = this._getStorage()
              , t = e.chats[this.getId()] || "";
            t && this.replyForm.setValue(t)
        },
        _getStorage: function() {
            var e = l.storeWithExpiration.get(b.LOCAL_STORAGE_KEY);
            return e || (e = {
                chats: {}
            }),
            e
        },
        _setStorage: function(e) {
            l.storeWithExpiration.set(b.LOCAL_STORAGE_KEY, e, b.LOCAL_STORAGE_LIFETIME)
        },
        getId: function() {
            return this.id.toString()
        },
        _updateBottomChatOffset: function() {
            var e = (this._elem("messageWrapper").get(0).offsetHeight,
            this._findElem("scroller"))
              , t = e.scrollTop()
              , i = e.get(0).scrollHeight - e.get(0).offsetHeight;
            i === t && this.scrollToBottom()
        },
        onCancel: function(e) {
            var t = this._getStorage();
            e || (t.chats[this.getId()] = "",
            this._setStorage(t))
        }
    }),
    r.mixin(t, p, g),
    t
}),
define("lib/components/base/inbox/chats/direct_chat", ["require", "underscore", "rxjs", "lib/components/base/inbox/users", "lib/core/users", "lib/components/base/inbox/chats/base_chat", "lib/components/base/inbox/chat_collection", "lib/interface/amojo/api"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("rxjs"), n = e("lib/components/base/inbox/users"), o = e("lib/core/users"), r = e("lib/components/base/inbox/chats/base_chat"), a = e("lib/components/base/inbox/chat_collection"), l = e("lib/interface/amojo/api");
    return t = r.extend({
        template: "/tmpl/inbox/direct_chat/wrapper.twig",
        initialize: function(e) {
            this.options = e || {},
            this.to = n.getRecipient(this.options.id),
            this.me = n.getRecipient(o.current("id")),
            this.users = [this.to, this.me],
            r.prototype.initialize.apply(this, arguments),
            this.inboxFilter = AMOCRM.inbox.addNotifyFilter(i.bind(function(e) {
                return e.id != this.id
            }, this))
        },
        createChat: function() {
            return this.to.is_bot ? l.connectBot(this.to.id).map(function(e) {
                return e.response.chats.bots
            }) : l.createChat("direct", [this.id]).map(function(e) {
                return e.response.chats.create
            })
        },
        getChat: function() {
            return this.chat ? s.Observable.just(this.chat) : this.createChat().doOnNext(i.bind(function(e) {
                this.chat = e
            }, this))
        },
        mapChatItem: function(e) {
            var t, s, n = i.isUndefined(this.model) ? this.type : this.model.get("type"), r = new a.Model(e,{
                parse: !0,
                type: n
            }), l = o.get(!0);
            return (t = i.find(this.users, function(t) {
                return t.amojo_id === e.author.id
            })) ? (s = i.find(l, function(e) {
                return parseInt(e.id) !== parseInt(t.id)
            }),
            t && r.set("amo_author", {
                id: t.id,
                name: t.title,
                avatar: t.avatar
            }),
            s && r.set("amo_recipient", {
                name: s.title
            }),
            t === this.me && r.set("is_external", !0),
            r) : !1
        },
        _getReplyParams: function() {
            return {
                el: this._elem("tmpReplyField")[0],
                saveValue: i.bind(this._onReplyFormClosed, this),
                restoreValue: i.bind(this._restoreUnsentMessage, this),
                type: i.isUndefined(this.model) ? "" : this.model.get("type")
            }
        }
    })
}),
define("lib/interface/user_select_chat_group", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/users", "lib/interface/users_select"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("lib/core/users"), a = e("lib/interface/users_select");
    return t = a.extend({
        addGroupClick: function(e) {
            var t = this.$el.find(".multisuggest__list").find(".multisuggest__list-item:not(.multisuggest__list-item_input, .group_chat-color)")
              , o = i(e.currentTarget).closest(this._selector("group"))
              , r = i(e.currentTarget).closest(this._selector("group")).attr("data-id")
              , a = i(e.currentTarget).closest(this._selector("group")).attr("data-title")
              , l = {
                title: a,
                group: r
            };
            return "group_free_users" === r ? !1 : (n.filter(t, function(e) {
                i(e).data("group") === l.group && i(e).remove()
            }, this),
            e.stopPropagation && e.stopPropagation(),
            o.parent().remove(),
            n.isFunction(this.options.onGroupChoosed) && this.options.onGroupChoosed.call(this),
            this.setPositions(),
            void s._preload(["/tmpl/users_select/item_group_chat.twig"], n.bind(this._renderGroupItem, this))(e, l))
        },
        _renderGroupItem: function(e, t) {
            var n = "/tmpl/users_select/item_group_chat.twig";
            i(".multisuggest__list-item.multisuggest__list-item_input").before(s({
                ref: n
            }).render({
                item: {
                    title: t.title,
                    group: t.group,
                    class_name: "group_chat-color"
                }
            }))
        },
        closingAnEmptyGroup: function() {},
        getSelectedItems: function() {
            var e;
            return i.makeArray(this.$(this._selector("list_item")).map(function(t, s) {
                return e = i(s),
                {
                    id: e.attr("data-id"),
                    raw_title: e.text(),
                    title: e.text().trim(),
                    group: e.attr("data-group"),
                    class_name: e.attr("class").replace("group-chat__multisuggest", "").replace("multisuggest__list-item", "").replace("js-multisuggest-item", "")
                }
            }))
        },
        loadManagersForTheSelector: function() {
            var e = [r.current().id.toString()];
            return this.items = n.extend({}, this.users.allmanagers),
            delete this.items[e],
            n.isUndefined(this.users.allmanagers) ? {} : this.items
        },
        findGroup: function() {
            var e, t = n.keys(this.$el.data("groups-hash")), s = this.$el.find(".multisuggest__list").find(".group_chat-color"), o = n.extend({}, this.users.allmanagers);
            return e = n.filter(t, function(e) {
                return n.find(o, function(t) {
                    return t.group === e
                }, this)
            }),
            e = n.filter(e, function(e) {
                return !s.filter(function(t, s) {
                    return i(s).attr("data-group") === e
                }).length
            }, this),
            n.isUndefined(e) ? [] : e
        },
        findUser: function(e, t) {
            var s = this.$el.data("values-hash") || {}
              , r = this.$el.find(".multisuggest__list").find(".multisuggest__list-item:not(.multisuggest__list-item_input, .group_chat-color)");
            return n.filter(s, function(s) {
                var a = (s.title || "").toString().toLowerCase()
                  , l = (s.login || "").toString().toLowerCase()
                  , c = o.transliterate(a)
                  , d = o.transliterate(a, "punto");
                return -1 !== n.indexOf(t, s.group) ? a && (c.match(e) || d.match(e) || a.match(e) || l.match(e)) && (this.options.select_one || !r.filter(function(e, t) {
                    return parseInt(i(t).attr("data-id")) === parseInt(s.id)
                }).length) : void 0
            }, this)
        },
        getRenderAllGroup: function(e, t) {
            var i = this.$el.data("groups-hash") || {};
            return n.reduce(i, function(i, s, o) {
                return "group_free_users" === o && n.isEmpty(t[o]) ? i : (i[o] = {
                    title: s,
                    hidden: !(t[o] || !this.options.select_one && n.indexOf(e, o) + 1),
                    all_select: "group_free_users" === o,
                    id: o
                },
                i)
            }, {}, this)
        }
    })
}),
define("lib/components/base/inbox/chats/group_chat", ["require", "underscore", "rxjs", "lib/common/fn", "twig", "lib/core/users", "lib/components/base/inbox/chats/base_chat", "lib/interface/amojo/api", "lib/components/base/inbox/chat_collection", "lib/interface/amojo/mediator", "lib/components/base/inbox/constants", "lib/interface/card/controls/subscribers/network/service", "lib/interface/user_select_chat_group", "lib/interface/amojo/rtm"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("rxjs"), n = e("lib/common/fn"), o = e("twig"), r = e("lib/core/users"), a = e("lib/components/base/inbox/chats/base_chat"), l = e("lib/interface/amojo/api"), c = e("lib/components/base/inbox/chat_collection"), d = e("lib/interface/amojo/mediator"), u = e("lib/components/base/inbox/constants"), h = e("lib/interface/card/controls/subscribers/network/service"), _ = e("lib/interface/user_select_chat_group"), p = e("lib/interface/amojo/rtm");
    return t = a.extend({
        type: "chat_group",
        template: "/tmpl/inbox/group_chat/wrapper.twig",
        member_template: "/tmpl/inbox/group_chat/item_wrapper.twig",
        _selectors: function() {
            return i.extend(a.prototype._selectors.apply(this) || {}, {
                title: ".group-chat__title",
                title_edit: ".group_title__edit",
                group_chat_items: ".hide_items-group_chat",
                all_users_button: ".js-toggle-all-users",
                user_item: ".group-chat__multisuggest",
                input_user_select: ".multisuggest__list-item_input",
                users_select_wrapper_editing: ".users-select-wrapper_editing"
            })
        },
        _classes: function() {
            return {
                subscriber: "js-subscriber",
                group: "group_chat-color"
            }
        },
        events: i.extend(a.prototype.events, {
            "click .group-chat__title": "titleActive",
            "blur .group-chat__title": "saveTitle",
            "click .group_title__edit__cancel": "cancelTitle",
            "click .js-amojo-reply": "selectionOfTheAddressee",
            "click .js-multisuggest-item": "selectionOfTheAddressee",
            "click #members-selector": "initUserSelect",
            "click .group_chat-inbox__content": "removeSubscriber",
            "click .js-chat_user_remove": "removeChatUser"
        }),
        initialize: function(e) {
            this._first_load_and_scroll = !0,
            this.options = e || {},
            this.chat_id = this.model.get("payload").chat_id,
            this.to = {
                title: this.model.get("title")
            },
            this.listenTo(this, "closeDirectChat", function() {
                this._$document.trigger("suggest:manager:destroy")
            }),
            this.listenTo(this, "loadUserList", this.renderUsersList),
            d.on("update", i.bind(this.chatUpdated, this)),
            this.service = new h(u.AMO_CHATS_GROUP_TYPE,this.id),
            a.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            this._manageChatSubscription(!1),
            d.off("update", i.bind(this.chatUpdated, this)),
            a.prototype.destroy.apply(this, arguments)
        },
        initUserSelect: function() {
            var e = $("#members-selector")
              , t = {
                el: e,
                id: "members-selector",
                item_template: "interface/users_select/item_group_chat.twig",
                template: "/tmpl/users_select/users_select_group_chat.twig",
                load_data: {
                    free_users: 1
                },
                onRenderParams: function() {
                    return {
                        id: ""
                    }
                },
                onSetPositions: i.bind(function() {
                    this.showAllUsers(),
                    this._findElem("users_select_wrapper_editing").attr("id", "members-selector")
                }, this),
                onDestroy: i.bind(function(e) {
                    this.handleUsersAndGroups(e)
                }, this)
            };
            this.users_select = new _(t)
        },
        _manageChatSubscription: function(e) {
            var t = i.pick(d.get("group")[this.chat_id], "chat_id", "token");
            e === !0 ? p.subscribe(t) : p.unsubscribe(t)
        },
        getChat: function() {
            return this.chat ? s.Observable.just(this.chat) : l.getChat(this.chat_id).map(function(e) {
                return e.response.chats.list
            }).doOnNext(i.bind(function(e) {
                e = i.first(i.values(e)),
                e.id = e.chat_id,
                e.users = this.prepareUsers(e.users),
                e.subscribers = this.prepareUsers(e.subscribers),
                e.groups = this.prepareGroups(e.groups),
                e.entity_type = "group",
                d.addChat(e),
                this._manageChatSubscription(!0),
                this.chat = e
            }, this))
        },
        mapChatItem: function(e) {
            var t, s, n = new c.Model(e,{
                parse: !0,
                type: this.model.get("type")
            }), o = r.get(!0);
            return t = i.find(o, function(t) {
                return t.amojo_id === e.author.id
            }),
            i.isEmpty(e.recipient) || (s = i.find(o, function(t) {
                return t.amojo_id === e.recipient.id
            })),
            t && n.set("amo_author", {
                id: t.id,
                name: t.title,
                avatar: t.avatar
            }),
            s && n.set("amo_recipient", {
                name: s.title
            }),
            n
        },
        handleUsersAndGroups: function(e) {
            var t, s, n = [], o = [], a = [], l = [], c = this.getSubscribers(), u = this.getGroups(), h = r.get(!0);
            i.each(e, i.bind(function(e) {
                i.isEmpty(e.id) ? (u[e.group] || l.push(e.group),
                n.push(e.group)) : (t = this._getAmojoID(e.id),
                c[t] || a.push(e.id),
                o.push(e.id))
            }, this)),
            c = i.pick(c, i.bind(function(e) {
                return -1 === i.indexOf(o, e.id) ? (this.service.unsubscribe(e.id),
                !1) : !0
            }, this)),
            u = i.pick(u, i.bind(function(e, t) {
                return -1 === i.indexOf(n, t) ? (this.service.unsubscribe(t),
                !1) : !0
            }, this)),
            i.each(l, i.bind(function(e) {
                this.service.subscribe(e),
                u[e] = this._groupFormatter(e)
            }, this)),
            i.each(a, i.bind(function(e) {
                (s = h[e]) && (this.service.subscribe(e),
                c[s.amojo_id] = i.extend(s, {
                    current: this._isCurrentUser(e)
                }))
            }, this)),
            this.service.save().subscribe(),
            d.updateChat(this.chat_id, {
                groups: u,
                subscribers: c
            })
        },
        prepareUsers: function(e) {
            var t = r.get(!0)
              , s = {};
            return i.each(e, i.bind(function(e) {
                t[e.user_id] && (s[t[e.user_id].amojo_id] = t[e.user_id],
                s[t[e.user_id].amojo_id].current = this._isCurrentUser(e.user_id))
            }, this)),
            s
        },
        prepareGroups: function(e) {
            var t = {};
            return i.each(e, i.bind(function(e) {
                var i = "group_" + e;
                t[i] = this._groupFormatter(i)
            }, this)),
            t
        },
        _groupFormatter: function(e) {
            return {
                group: e,
                class_name: "group_chat-color",
                title: this.accountGroup(e)
            }
        },
        getId: function() {
            return this.id
        },
        _getReplyParams: function() {
            return {
                el: this._elem("tmpReplyField")[0],
                saveValue: i.bind(this._onReplyFormClosed, this),
                restoreValue: i.bind(this._restoreUnsentMessage, this),
                type: this.model.get("type"),
                chat_id: this.chat_id,
                subscriber: this.service
            }
        },
        titleActive: function() {
            return this._elem("title").hasClass("expanded") || this._elem("title").addClass("expanded"),
            this
        },
        saveTitle: function() {
            var e = this._elem("title").val().trim();
            e = n.stripTags(e),
            this.model.get("title") !== e && ("" !== e ? (l.updateGroupChat(this.chat_id, e),
            this.model.set("title", e)) : this._elem("title").val(this.model.get("title"))),
            this._elem("title").removeClass("expanded")
        },
        renderUsersList: function() {
            return o._preload([this.member_template], i.bind(this._renderUsersList, this))()
        },
        getLastRecipient: function() {
            var e = i.chain(this.messages.models).reduce(function(e, t) {
                return t.get("recipient") ? t.get("recipient").id : void 0
            }, void 0).value()
              , t = r.getByAmoJoId()
              , s = {
                to_all: !0
            };
            t[e] && (this._isCurrentUser(t[e].id) || (s.to_all = !1,
            s.user_id = t[e].id,
            s.name = t[e].title)),
            this.replyForm.trigger("selectionAddressee", s)
        },
        _renderUsersList: function() {
            $("#members-selector").html(o({
                ref: this.member_template
            }).render({
                users: this.getGroupsAndSubscribers()
            })),
            this.getLastRecipient(),
            this._first_load_and_scroll && (this.scrollToBottom(),
            this._first_load_and_scroll = !1)
        },
        getGroupsAndSubscribers: function() {
            return i.extend({}, this.getGroups(), this.getSubscribers())
        },
        accountGroup: function(e) {
            return AMOCRM.constant("groups")[e] || {}
        },
        showAllUsers: function() {
            this._findElem("group_chat_items").show(),
            this._findElem("all_users_button").hide()
        },
        removeSubscriber: function(e) {
            e.stopPropagation()
        },
        getUsers: function() {
            return d.get("group")[this.chat_id].users || {}
        },
        getSubscribers: function() {
            return d.get("group")[this.chat_id].subscribers || {}
        },
        getGroups: function() {
            return d.get("group")[this.chat_id].groups || {}
        },
        chatUpdated: function(e) {
            e === this.chat_id && this.renderUsersList()
        },
        selectionOfTheAddressee: function(e) {
            e.stopPropagation();
            var t = this.getUsers()
              , s = $(e.currentTarget).attr("data-id")
              , n = $(e.currentTarget).attr("data-title")
              , o = {};
            if (i.isUndefined(t[s]))
                if (i.isEmpty(s))
                    o = {
                        to_all: !0
                    };
                else {
                    if (s === r.current("id").toString())
                        return !1;
                    o = {
                        to_all: !1,
                        user_id: s,
                        name: n
                    }
                }
            else {
                if (this._isCurrentUser(t[s].id))
                    return !1;
                o = {
                    to_all: !1,
                    user_id: t[s].id,
                    name: t[s].title
                }
            }
            this.replyForm.trigger("selectionAddressee", o)
        },
        removeChatUser: function(e) {
            e.stopPropagation();
            var t = $(e.target)
              , s = t.closest(this._findElem("user_item"))
              , n = s.hasClass(this._class("group"))
              , o = n ? s.data("group") : s.data("id")
              , r = this.getUsers();
            this._removeSubscriber(o),
            n || i.isEmpty(r[this._getAmojoID(o)]) || this._removeMember(o),
            n ? this._removeGroupFromMediator(o) : this._removeUserFromMediator(o)
        },
        _removeMember: function(e) {
            l.removeUsersFromChat(this.chat_id, [e]).map(i.bind(function(e) {
                return e.response.chats.users.remove[this.chat_id].users
            }, this)).subscribe(i.bind(function() {
                return !0
            }, this), i.bind(function(e) {
                throw e
            }, this))
        },
        _removeSubscriber: function(e) {
            this.service.unsubscribe(e),
            this.service.save().subscribe(i.noop)
        },
        _removeUserFromMediator: function(e) {
            var t = this.getUsers()
              , s = this.getSubscribers();
            e = this._getAmojoID(e),
            t[e] && (t = i.omit(t, e)),
            s[e] && (s = i.omit(s, e)),
            d.updateChat(this.chat_id, {
                users: t,
                subscribers: s
            })
        },
        _removeGroupFromMediator: function(e) {
            var t = this.getGroups();
            t[e] && (t = i.omit(t, e)),
            d.updateChat(this.chat_id, {
                groups: t
            })
        },
        _getAmojoID: function(e) {
            var t = r.get(!0);
            return t[e].amojo_id
        },
        _isCurrentUser: function(e) {
            return e.toString() === r.current("id").toString()
        }
    })
}),
define("lib/components/base/inbox/chats/group_chat_create", ["require", "underscore", "twig", "lib/core/view", "lib/common/fn", "lib/components/base/inbox/chats/base_chat", "lib/interface/user_select_chat_group", "lib/interface/amojo/api"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("twig"), n = e("lib/core/view"), o = (e("lib/common/fn"),
    e("lib/components/base/inbox/chats/base_chat")), r = e("lib/interface/user_select_chat_group"), a = e("lib/interface/amojo/api"), l = AMOCRM.constant("account");
    return t = o.extend({
        template: "/tmpl/inbox/group_chat/wrapper_edit.twig",
        _selectors: function() {
            return {
                title: ".group-chat__title",
                users: ".js-chat-create-user-select",
                save_btn: ".js-chat-submit"
            }
        },
        events: {
            "click .chat-inbox__close": "dismiss",
            "click .group-chat__title": "titleActive",
            "click .js-chat-create-user-select": "initUserSelect",
            "click .js-chat-submit": "save",
            "click .js-chat-edit-cancel": "dismiss"
        },
        initialize: function(e) {
            this.options = e || {},
            n.prototype.initialize.apply(this, arguments),
            this.listenTo(this, "closeDirectChat", function() {
                this._$document.trigger("suggest:manager:destroy")
            }),
            this.listenTo(this, "openDirectChat", function() {
                this.initUserSelect()
            })
        },
        destroy: function() {
            this._$document.trigger("suggest:manager:destroy"),
            n.prototype.destroy.apply(this, arguments)
        },
        _render: function() {
            this.setElement($(s({
                ref: this.template
            }).render({
                amojo_disabled: !l.amojo_enabled
            }))),
            this.options.$container.append(this.$el).one(AMOCRM.animation_event, i.bind(function() {
                this.initUserSelect()
            }, this))
        },
        initUserSelect: function(e) {
            var t;
            e ? (e.stopPropagation(),
            t = $(e.currentTarget)) : t = $("#members-selector"),
            this._findElem("users").removeClass("error");
            var s = this
              , n = t.closest("#dashboard_manager_toggler").find(".active")
              , o = this.$el.find("#dashborad_manager_toggler-active")
              , a = {
                el: t,
                id: "members-selector",
                class_name: "js-chat-create-user-select",
                select_one: !1,
                not_remove: !1,
                disabled_users: !1,
                item_template: "interface/users_select/item_group_chat.twig",
                template: "/tmpl/users_select/users_select_group_chat.twig",
                load_data: {
                    free_users: 1
                },
                onRenderParams: function() {
                    return {
                        id: ""
                    }
                },
                onInit: function() {
                    o.addClass("dashboard-toggler_active-hidden"),
                    n.removeClass("active")
                },
                onDestroy: function(e) {
                    s.users = i.pluck(i.filter(e, function(e) {
                        return !i.isEmpty(e.id)
                    }), "id") || [],
                    s.groups = i.pluck(i.filter(e, function(e) {
                        return i.isEmpty(e.id)
                    }), "group") || []
                }
            };
            this.user_select = new r(a)
        },
        titleActive: function() {
            return this._elem("title").hasClass("expanded") || this._elem("title").addClass("expanded"),
            this._findElem("title").removeClass("error"),
            this
        },
        save: function() {
            this.editLoading(!0),
            this.user_select.destroy();
            var e = this.users
              , t = this.groups
              , s = this._elem("title").val();
            i.isEmpty(e) && i.isEmpty(t) ? (this._findElem("users").addClass("error"),
            this._sendError()) : a.createChat("group", null, null, e, s, t).map(function(e) {
                return e.response.chats.create
            }).subscribe(i.bind(this._onChatCreated, this), i.bind(this._sendError, this))
        },
        _onChatCreated: function(e) {
            var t = setTimeout(i.bind(function() {
                this.trigger("fetchData", {
                    reset: !0,
                    from_create: !0
                })
            }, this), 3e3);
            this.listenTo(this, "chatsFetched", i.bind(function() {
                var t = {
                    id: e.group_id,
                    type: "chat_group",
                    payload: {},
                    entity: {
                        id: e.group_id
                    }
                };
                this.trigger("openChat", t)
            }, this)),
            this.listenTo(this, "chatCreated", function(e) {
                clearTimeout(t),
                e.id = e.entity.id,
                this.trigger("openChat", e)
            })
        },
        getId: function() {
            return "0"
        },
        editLoading: function(e) {
            var t = "load:start";
            e === !1 && (t = "load:stop"),
            this._findElem("save_btn").trigger("button:" + t, ["white"])
        },
        _sendError: function() {
            this._findElem("save_btn").addClass("animated shake").removeAttr("disabled").focus(),
            this.editLoading(!1),
            i.delay(i.bind(function() {
                this._findElem("save_btn").removeClass("animated shake")
            }, this), 200)
        }
    })
}),
define("lib/components/lists/actions/todo_result", ["require", "jquery", "twig", "underscore", "lib/components/base/modal"], function(e) {
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/components/base/modal");
    return t = function(e) {
        var t = this;
        this.options = i.extend({}, e),
        this.modal = new o({
            class_name: "modal-list modal-todo-result",
            init: s._preload(["/tmpl/common/modal/todo_result.twig"], function(e) {
                t.$modal_body = e,
                e.trigger("modal:loaded").html(s({
                    ref: "/tmpl/common/modal/todo_result.twig"
                }).render({
                    lang: AMOCRM.lang
                })).trigger("modal:centrify"),
                t.init()
            }),
            destroy: function() {
                t.$modal_body && t.$modal_body.off(),
                t.save_xhr && "undefined" != typeof t.save_xhr.status && t.save_xhr.abort(),
                "function" == typeof t.options.cancel && t.has_result !== !0 && t.options.cancel()
            }
        })
    }
    ,
    t.prototype.init = function() {
        var e = this
          , t = this.$modal_body.find("#modal_todo_result");
        t.trigger("controls:textarea:autosize"),
        AMOCRM.is_touch_device || t.focus(),
        this.$modal_body.on(AMOCRM.click_event, ".js-modal-accept", function() {
            e.save()
        }).on(AMOCRM.click_event, ".button-cancel", function() {
            "function" == typeof e.options.skip && e.options.skip()
        }).on("focus keyup", "#modal_todo_result", function() {
            e.unvalidate()
        })
    }
    ,
    t.prototype.unvalidate = function() {
        this.$modal_body.find("#modal_todo_result").hasClass("validate-has-error") && this.$modal_body.find("#modal_todo_result").removeClass("validate-has-error")
    }
    ,
    t.prototype.validate = function() {
        return i.trim(this.$modal_body.find("#modal_todo_result").val())
    }
    ,
    t.prototype.save = function() {
        var e = this
          , t = this.validate();
        return t ? void (this.save_xhr = i.ajax({
            url: "/private/notes/edit2.php",
            data: {
                ID: this.options.id,
                ACTION: "ADD_NOTE",
                NOTE_TYPE: 13,
                BODY: t,
                ELEMENT_TYPE: 4
            },
            type: "POST",
            dataType: "json",
            success: function(t) {
                "ok" == t.status ? (e.has_result = !0,
                (n.isUndefined(e.options.noreload) || e.options.noreload === !1) && ("todo" == AMOCRM.data.current_entity ? i(document).trigger("list:reload") : i(document).trigger("page:reload", ["line"])),
                e.modal.showSuccess(t.message)) : e.modal.showError()
            },
            error: function() {
                e.modal.showError()
            }
        })) : void this.$modal_body.find("#modal_todo_result").focus().addClass("validate-has-error")
    }
    ,
    t
}),
function(e) {
    define("vendor/jQuery.dotdotdot/src/jquery.dotdotdot", ["jquery"], function() {
        return function() {
            !function(e, t) {
                function i(e, t, i) {
                    var s = e.children()
                      , n = !1;
                    e.empty();
                    for (var r = 0, a = s.length; a > r; r++) {
                        var l = s.eq(r);
                        if (e.append(l),
                        i && e.append(i),
                        o(e, t)) {
                            l.remove(),
                            n = !0;
                            break
                        }
                        i && i.detach()
                    }
                    return n
                }
                function s(t, i, r, a, l) {
                    var c = !1
                      , d = "a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style"
                      , u = "script, .dotdotdot-keep";
                    return t.contents().detach().each(function() {
                        var h = this
                          , _ = e(h);
                        if ("undefined" == typeof h)
                            return !0;
                        if (_.is(u))
                            t.append(_);
                        else {
                            if (c)
                                return !0;
                            t.append(_),
                            !l || _.is(a.after) || _.find(a.after).length || t[t.is(d) ? "after" : "append"](l),
                            o(r, a) && (c = 3 == h.nodeType ? n(_, i, r, a, l) : s(_, i, r, a, l)),
                            c || l && l.detach()
                        }
                    }),
                    i.addClass("is-truncated"),
                    c
                }
                function n(t, i, s, n, a) {
                    var d = t[0];
                    if (!d)
                        return !1;
                    var h = c(d)
                      , _ = -1 !== h.indexOf(" ") ? " " : "?"
                      , p = "letter" == n.wrap ? "" : _
                      , m = h.split(p)
                      , f = -1
                      , g = -1
                      , b = 0
                      , v = m.length - 1;
                    for (n.fallbackToLetter && 0 == b && 0 == v && (p = "",
                    m = h.split(p),
                    v = m.length - 1); v >= b && (0 != b || 0 != v); ) {
                        var y = Math.floor((b + v) / 2);
                        if (y == g)
                            break;
                        g = y,
                        l(d, m.slice(0, g + 1).join(p) + n.ellipsis),
                        s.children().each(function() {
                            e(this).toggle().toggle()
                        }),
                        o(s, n) ? (v = g,
                        n.fallbackToLetter && 0 == b && 0 == v && (p = "",
                        m = m[0].split(p),
                        f = -1,
                        g = -1,
                        b = 0,
                        v = m.length - 1)) : (f = g,
                        b = g)
                    }
                    if (-1 == f || 1 == m.length && 0 == m[0].length) {
                        var w = t.parent();
                        t.detach();
                        var C = a && a.closest(w).length ? a.length : 0;
                        if (w.contents().length > C ? d = u(w.contents().eq(-1 - C), i) : (d = u(w, i, !0),
                        C || w.detach()),
                        d && (h = r(c(d), n),
                        l(d, h),
                        C && a)) {
                            var k = a.parent();
                            e(d).parent().append(a),
                            e.trim(k.html()) || k.remove()
                        }
                    } else
                        h = r(m.slice(0, f + 1).join(p), n),
                        l(d, h);
                    return !0
                }
                function o(e, t) {
                    return e.innerHeight() > t.maxHeight
                }
                function r(t, i) {
                    for (; e.inArray(t.slice(-1), i.lastCharacter.remove) > -1; )
                        t = t.slice(0, -1);
                    return e.inArray(t.slice(-1), i.lastCharacter.noEllipsis) < 0 && (t += i.ellipsis),
                    t
                }
                function a(e) {
                    return {
                        width: e.innerWidth(),
                        height: e.innerHeight()
                    }
                }
                function l(e, t) {
                    e.innerText ? e.innerText = t : e.nodeValue ? e.nodeValue = t : e.textContent && (e.textContent = t)
                }
                function c(e) {
                    return e.innerText ? e.innerText : e.nodeValue ? e.nodeValue : e.textContent ? e.textContent : ""
                }
                function d(e) {
                    do
                        e = e.previousSibling;
                    while (e && 1 !== e.nodeType && 3 !== e.nodeType);return e
                }
                function u(t, i, s) {
                    var n, o = t && t[0];
                    if (o) {
                        if (!s) {
                            if (3 === o.nodeType)
                                return o;
                            if (e.trim(t.text()))
                                return u(t.contents().last(), i)
                        }
                        for (n = d(o); !n; ) {
                            if (t = t.parent(),
                            t.is(i) || !t.length)
                                return !1;
                            n = d(t[0])
                        }
                        if (n)
                            return u(e(n), i)
                    }
                    return !1
                }
                function h(t, i) {
                    return t ? "string" == typeof t ? (t = e(t, i),
                    t.length ? t : !1) : t.jquery ? t : !1 : !1
                }
                function _(e) {
                    for (var t = e.innerHeight(), i = ["paddingTop", "paddingBottom"], s = 0, n = i.length; n > s; s++) {
                        var o = parseInt(e.css(i[s]), 10);
                        isNaN(o) && (o = 0),
                        t -= o
                    }
                    return t
                }
                if (!e.fn.dotdotdot) {
                    e.fn.dotdotdot = function(t) {
                        if (0 == this.length)
                            return e.fn.dotdotdot.debug('No element found for "' + this.selector + '".'),
                            this;
                        if (this.length > 1)
                            return this.each(function() {
                                e(this).dotdotdot(t)
                            });
                        var n = this
                          , r = n.contents();
                        n.data("dotdotdot") && n.trigger("destroy.dot"),
                        n.data("dotdotdot-style", n.attr("style") || ""),
                        n.css("word-wrap", "break-word"),
                        "nowrap" === n.css("white-space") && n.css("white-space", "normal"),
                        n.bind_events = function() {
                            return n.bind("update.dot", function(t, a) {
                                switch (n.removeClass("is-truncated"),
                                t.preventDefault(),
                                t.stopPropagation(),
                                typeof l.height) {
                                case "number":
                                    l.maxHeight = l.height;
                                    break;
                                case "function":
                                    l.maxHeight = l.height.call(n[0]);
                                    break;
                                default:
                                    l.maxHeight = _(n)
                                }
                                l.maxHeight += l.tolerance,
                                "undefined" != typeof a && (("string" == typeof a || "nodeType"in a && 1 === a.nodeType) && (a = e("<div />").append(a).contents()),
                                a instanceof e && (r = a)),
                                m = n.wrapInner('<div class="dotdotdot" />').children(),
                                m.contents().detach().end().append(r.clone(!0)).find("br").replaceWith("  <br />  ").end().css({
                                    height: "auto",
                                    width: "auto",
                                    border: "none",
                                    padding: 0,
                                    margin: 0
                                });
                                var d = !1
                                  , u = !1;
                                return c.afterElement && (d = c.afterElement.clone(!0),
                                d.show(),
                                c.afterElement.detach()),
                                o(m, l) && (u = "children" == l.wrap ? i(m, l, d) : s(m, n, m, l, d)),
                                m.replaceWith(m.contents()),
                                m = null,
                                e.isFunction(l.callback) && l.callback.call(n[0], u, r),
                                c.isTruncated = u,
                                u
                            }).bind("isTruncated.dot", function(e, t) {
                                return e.preventDefault(),
                                e.stopPropagation(),
                                "function" == typeof t && t.call(n[0], c.isTruncated),
                                c.isTruncated
                            }).bind("originalContent.dot", function(e, t) {
                                return e.preventDefault(),
                                e.stopPropagation(),
                                "function" == typeof t && t.call(n[0], r),
                                r
                            }).bind("destroy.dot", function(e) {
                                e.preventDefault(),
                                e.stopPropagation(),
                                n.unwatch().unbind_events().contents().detach().end().append(r).attr("style", n.data("dotdotdot-style") || "").removeClass("is-truncated").data("dotdotdot", !1)
                            }),
                            n
                        }
                        ,
                        n.unbind_events = function() {
                            return n.unbind(".dot"),
                            n
                        }
                        ,
                        n.watch = function() {
                            if (n.unwatch(),
                            "window" == l.watch) {
                                var t = e(window)
                                  , i = t.width()
                                  , s = t.height();
                                t.bind("resize.dot" + c.dotId, function() {
                                    i == t.width() && s == t.height() && l.windowResizeFix || (i = t.width(),
                                    s = t.height(),
                                    u && clearInterval(u),
                                    u = setTimeout(function() {
                                        n.trigger("update.dot")
                                    }, 100))
                                })
                            } else
                                d = a(n),
                                u = setInterval(function() {
                                    if (n.is(":visible")) {
                                        var e = a(n);
                                        (d.width != e.width || d.height != e.height) && (n.trigger("update.dot"),
                                        d = e)
                                    }
                                }, 500);
                            return n
                        }
                        ,
                        n.unwatch = function() {
                            return e(window).unbind("resize.dot" + c.dotId),
                            u && clearInterval(u),
                            n
                        }
                        ;
                        var l = e.extend(!0, {}, e.fn.dotdotdot.defaults, t)
                          , c = {}
                          , d = {}
                          , u = null
                          , m = null;
                        return l.lastCharacter.remove instanceof Array || (l.lastCharacter.remove = e.fn.dotdotdot.defaultArrays.lastCharacter.remove),
                        l.lastCharacter.noEllipsis instanceof Array || (l.lastCharacter.noEllipsis = e.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),
                        c.afterElement = h(l.after, n),
                        c.isTruncated = !1,
                        c.dotId = p++,
                        n.data("dotdotdot", !0).bind_events().trigger("update.dot"),
                        l.watch && n.watch(),
                        n
                    }
                    ,
                    e.fn.dotdotdot.defaults = {
                        ellipsis: "... ",
                        wrap: "word",
                        fallbackToLetter: !0,
                        lastCharacter: {},
                        tolerance: 0,
                        callback: null,
                        after: null,
                        height: null,
                        watch: !1,
                        windowResizeFix: !0
                    },
                    e.fn.dotdotdot.defaultArrays = {
                        lastCharacter: {
                            remove: [" ", "?", ",", ";", ".", "!", "?"],
                            noEllipsis: []
                        }
                    },
                    e.fn.dotdotdot.debug = function(e) {}
                    ;
                    var p = 1
                      , m = e.fn.html;
                    e.fn.html = function(i) {
                        return i != t && !e.isFunction(i) && this.data("dotdotdot") ? this.trigger("update", [i]) : m.apply(this, arguments)
                    }
                    ;
                    var f = e.fn.text;
                    e.fn.text = function(i) {
                        return i != t && !e.isFunction(i) && this.data("dotdotdot") ? (i = e("<div />").text(i).html(),
                        this.trigger("update", [i])) : f.apply(this, arguments)
                    }
                }
            }(jQuery),
            jQuery(document).ready(function(e) {
                e(".dot-ellipsis").each(function() {
                    var t = e(this).hasClass("dot-resize-update")
                      , i = e(this).hasClass("dot-timer-update")
                      , s = 0
                      , n = e(this).attr("class").split(/\s+/);
                    e.each(n, function(e, t) {
                        var i = t.match(/^dot-height-(\d+)$/);
                        null !== i && (s = Number(i[1]))
                    });
                    var o = new Object;
                    i && (o.watch = !0),
                    t && (o.watch = "window"),
                    s > 0 && (o.height = s),
                    e(this).dotdotdot(o)
                })
            }),
            jQuery(window).on("load", function() {
                jQuery(".dot-ellipsis.dot-load-update").trigger("update.dot")
            })
        }
        .apply(e, arguments)
    })
}(this),
define("lib/components/base/inbox/notification_collection", ["require", "underscore", "twig", "jquery", "lib/core/view", "backbone", "lib/components/lists/actions/todo_result", "vendor/jQuery.dotdotdot/src/jquery.dotdotdot"], function(e) {
    "use strict";
    var t, i, s, n, o, r, a, l, c, d, u, h, _, p, m, f, g = e("underscore"), b = e("twig"), v = e("jquery"), y = e("lib/core/view"), w = e("backbone"), C = e("lib/components/lists/actions/todo_result"), k = 40, x = 50, M = 60;
    return e("vendor/jQuery.dotdotdot/src/jquery.dotdotdot"),
    i = w.Model.extend({
        view: null,
        last_index: null,
        current_index: null,
        constructor: function(e, t) {
            switch (e.notification_id = e.id,
            e.type) {
            case "chat_direct":
            case "chat_group":
                e.id = e.entity.id;
                break;
            case "chat_unsorted":
                e.web_link = "/unsorted/detail/" + e.entity.id
            }
            w.Model.apply(this, arguments)
        },
        initialize: function() {
            this.listenTo(this, "add", this.onAdd),
            w.Model.prototype.initialize.apply(this, arguments)
        },
        onAdd: function() {
            this.listenTo(this.collection, "inbox:show", this.onInboxShow),
            this.listenTo(this.collection, "inbox:hide", this.onInboxHide)
        },
        onSort: function() {
            this.refreshIndexInCollection()
        },
        onInboxShow: function() {
            this.trigger("collection:active")
        },
        onInboxHide: function() {
            this.trigger("collection:inactive")
        },
        refreshIndexInCollection: function() {
            var e = this.collection.indexOf(this)
              , t = -1 != e ? e : null;
            this.current_index != t && (this.last_index = this.current_index,
            this.current_index = t)
        }
    }),
    s = y.extend({
        message_cut_height: k,
        message_cut_symbols: [" ", ",", ";", ".", "!", "?", "-", ":"],
        active: !1,
        need_refresh: !1,
        events: {
            click: "open"
        },
        _selectors: function() {
            var e = {};
            return g.isFunction(y.prototype._selectors) && (e = y.prototype._selectors.apply(this, arguments) || {}),
            g.extend(e, {
                date: ".notification-inner__data_message",
                message: ".notification-inner__from__message"
            })
        },
        open: function(e) {
            return this.trigger("click", e, this)
        },
        template: function() {
            throw new Error("unsupported type")
        },
        initialize: function() {
            y.prototype.initialize.call(this, arguments),
            this.bindEvents(),
            this.model.view = this
        },
        bindEvents: function() {
            this.listenTo(this.model, "change", this.update),
            this.listenTo(this.model, "remove", this.remove),
            this.listenTo(this.model, "collection:active", this.activate),
            this.listenTo(this.model, "collection:inactive", this.deactivate)
        },
        remove: function() {
            return w.View.prototype.remove.apply(this, arguments)
        },
        getDOM: function() {
            return v(b({
                ref: this.template()
            }).render(this.model.toJSON()))
        },
        render: function() {
            return this.active || (this.need_refresh = !0),
            this.setElement(this.getDOM())
        },
        rerender: function() {
            var e = this.getDOM();
            return this.$el.attr("class", e.attr("class")),
            this.$el.html(e.html()),
            this._dropElemCache(),
            this.cutText(),
            this
        },
        update: function(e) {
            var t = g.keys(e.changed);
            return t.length && ((t.length > 1 || -1 === g.indexOf(t, "selected") && -1 === g.indexOf(t, "preselected")) && this.rerender(),
            this.updateSelection(t[0]),
            this.active || (this.need_refresh = !0)),
            this
        },
        updateSelection: function(e) {
            this.model.get(e) ? this.makeSelection(e) : this.removeSelection(e)
        },
        makeSelection: function(e) {
            switch (e) {
            case "selected":
                this.$el.addClass("notification-inner_selected").removeClass("notification-inner_preselected").removeClass("notification__item__unread");
                break;
            case "preselected":
                if (!this.$el.hasClass("notification-inner_selected")) {
                    this.$el.addClass("notification-inner_preselected").removeClass("notification__item__unread");
                    break
                }
            }
        },
        removeSelection: function(e) {
            switch (e) {
            case "selected":
                this.$el.removeClass("notification-inner_selected");
                break;
            case "preselected":
                this.$el.removeClass("notification-inner_preselected")
            }
        },
        cutText: function() {
            this._elem("message").dotdotdot({
                height: this.message_cut_height,
                remove: this.message_cut_symbols
            })
        },
        activate: function() {
            this.need_refresh && (this.need_refresh = !1,
            this.cutText()),
            this.active = !0
        },
        deactivate: function() {
            this.active = !1
        }
    }),
    n = s.extend({
        template: function() {
            return "/tmpl/notifications/types/chat_unsorted.twig"
        }
    }),
    o = s.extend({
        template: function() {
            return "/tmpl/notifications/types/inner_message.twig"
        }
    }),
    r = o.extend({}),
    l = o.extend({}),
    p = o.extend({}),
    a = s.extend({
        message_cut_height: x,
        message_cut_symbols: [" ", ",", ";", ".", "!", "?", "-"],
        template: function() {
            return "/tmpl/notifications/types/mail_thread.twig"
        },
        _selectors: function() {
            var e = {};
            return g.isFunction(s.prototype._selectors) && (e = s.prototype._selectors.apply(this, arguments) || {}),
            g.extend(e, {
                message: ".notification-mail__text-message"
            })
        }
    }),
    c = s.extend({
        message_cut_height: M,
        events: g.extend(s.prototype.events, {
            "click .complete-task": "completeTask"
        }),
        template: function() {
            return "/tmpl/notifications/types/bot_message.twig"
        },
        _selectors: function() {
            return g.extend(s.prototype._selectors.apply(this, arguments), {
                message: ".notification-bot__text__message"
            })
        },
        completeTask: function(e) {
            e.preventDefault(),
            v.ajax({
                url: "/ajax/todo/multiple/close/",
                type: "POST",
                dataType: "json",
                data: {
                    ID: [this.model.get("entity").id]
                }
            }).done(g.bind(function() {
                new C({
                    id: this.model.get("entity").id,
                    noreload: !0
                })
            }, this))
        }
    }),
    d = s.extend({
        template: function() {
            return "/tmpl/notifications/types/payment_bot.twig"
        }
    }),
    u = s.extend({
        template: function() {
            return "/tmpl/notifications/types/call.twig"
        }
    }),
    h = s.extend({
        template: function() {
            return "/tmpl/notifications/types/error.twig"
        }
    }),
    _ = s.extend({
        template: function() {
            return "/tmpl/notifications/types/user_not_found.twig"
        }
    }),
    m = s.extend({
        template: function() {
            return "/tmpl/notifications/types/new_version_bot.twig"
        }
    }),
    f = s.extend({
        template: function() {
            return "/tmpl/notifications/types/activity_bot.twig"
        }
    }),
    t = w.Collection.extend({
        model: i,
        open_timer: null,
        initialize: function(e) {
            this.options = e || {},
            this.listenTo(this, "change", this.onChange),
            this.listenTo(this, "add", this.onAdd),
            w.Collection.prototype.initialize.apply(this, arguments)
        },
        setNext: function() {
            var e = this.findSelected();
            if (e === !1)
                var t = 0;
            else {
                this.models[e].set({
                    preselected: !1
                });
                var t = e + 1
            }
            this.changeSelect(t)
        },
        setPrev: function() {
            var e = this.findSelected();
            if (e === !1 || 0 === e)
                var t = 0;
            else {
                var t = e - 1;
                this.models[e].set({
                    preselected: !1
                })
            }
            this.changeSelect(t)
        },
        changeSelect: function(e) {
            this.models[e] && (this.models[e].set({
                preselected: !0
            }),
            this.setScroll(this.models[e].view.el))
        },
        triggerClick: function() {
            var e = this.findSelected();
            (e || 0 === e) && this.models[e].view.$el[0].click()
        },
        findSelected: function() {
            for (var e = !1, t = 0; t < this.models.length; t++)
                this.models[t].get("preselected") === !0 && (e = t);
            return e
        },
        setScroll: function(e) {
            var t = v("#inbox-container")
              , i = e.getBoundingClientRect().top
              , s = v(".inbox-wrapper .search-container").height();
            i + e.offsetHeight > t.outerHeight() && t.scrollTop(t.scrollTop() + i - t.outerHeight()),
            0 > i - s && t.scrollTop(t.scrollTop() + (i - s))
        },
        setOrder: function(e) {
            this.order_by = e,
            this.sort()
        },
        comparator: function(e) {
            var t = 1;
            return "read_state" == this.order_by && (t = 3 - (e.get("is_read") + 1)),
            g.contains(["payment_expired", "payment_overflow", "payment_pay"], e.get("type")) && (t = 3),
            -e.get("created_at") * t
        },
        onAdd: function(e) {
            var t = g.isBoolean(e.get("selected")) ? e.get("selected") : !1;
            e.set({
                selected: t
            }, {
                silent: !0
            })
        },
        onChange: function(e, t) {
            var i = g.keys(e.changed);
            g.indexOf(i, "selected") > -1 && this.resetSelection(e, "selected"),
            g.indexOf(i, "preselected") > -1 && this.resetSelection(e, "preselected")
        },
        resetSelection: function(e, t) {
            g.chain(this.without(e)).filter(function(e) {
                switch (t) {
                case "selected":
                    return e.get("selected");
                case "preselected":
                    return e.get("preselected")
                }
            }).each(function(e) {
                switch (t) {
                case "selected":
                    e.set({
                        selected: !1
                    });
                    break;
                case "preselected":
                    e.set({
                        preselected: !1
                    })
                }
            })
        }
    }),
    {
        Collection: t,
        Model: i,
        View: function(e) {
            switch (e) {
            case "chat_unsorted":
                return n;
            case "chat_lead":
            case "chat_customer":
                return o;
            case "chat_direct":
                return l;
            case "chat_group":
                return p;
            case "chat_contact":
                return r;
            case "mail_thread":
                return a;
            case "task":
                return c;
            case "payment_expired":
            case "payment_overflow":
            case "payment_pay":
                return d;
            case "call":
                return u;
            case "error":
                return h;
            case "user_not_found":
                return _;
            case "amocrm_new_version":
                return m;
            case "activity_action":
                return f;
            default:
                throw new Error("unsupported type")
            }
        }
    }
}),
define("lib/components/base/inbox/toast", ["require"], function(e) {
    return function() {
        function e(e, t) {
            return e || (e = d()),
            h = $(e.containerId),
            h.length ? h : (t && (h = r(e)),
            h)
        }
        function t(e) {
            _ = e
        }
        function i(t, i) {
            var s = d();
            h || e(s),
            o(t, s, i) || n(s)
        }
        function s(t) {
            var i = d();
            return h || e(i),
            t && 0 === $(":focus", t).length ? void u(t) : void (h.children().length && h.remove())
        }
        function n(e) {
            for (var t = h.children(), i = t.length - 1; i >= 0; i--)
                o($(t[i]), e)
        }
        function o(e, t, i) {
            var s = i && i.force ? i.force : !1;
            return e && (s || 0 === $(":focus", e).length) ? (e[t.hideMethod]({
                duration: t.hideDuration,
                easing: t.hideEasing,
                complete: function() {
                    u(e)
                }
            }),
            !0) : !1
        }
        function r(e) {
            return h = $("<div/>").attr("id", e.containerId).addClass(e.positionClass),
            h.appendTo($(e.target)),
            h
        }
        function a() {
            return {
                tapToDismiss: !0,
                toastClass: "toast",
                containerId: "toast-container",
                debug: !1,
                showMethod: "fadeIn",
                showDuration: 300,
                showEasing: "swing",
                onShown: void 0,
                hideMethod: "fadeOut",
                hideDuration: 1e3,
                hideEasing: "swing",
                onHidden: void 0,
                closeMethod: !1,
                closeDuration: !1,
                closeEasing: !1,
                closeOnHover: !0,
                extendedTimeOut: 1e3,
                iconClasses: {
                    error: "toast-error",
                    info: "toast-info",
                    success: "toast-success",
                    warning: "toast-warning"
                },
                iconClass: "toast-info",
                positionClass: "toast-top-right",
                timeOut: 5e3,
                titleClass: "toast-title",
                messageClass: "toast-message",
                escapeHtml: !1,
                target: "body",
                closeHtml: '<button type="button">&times;</button>',
                closeClass: "toast-close-button",
                newestOnTop: !0,
                preventDuplicates: !1,
                progressBar: !1,
                progressClass: "toast-progress",
                rtl: !1
            }
        }
        function l(e) {
            _ && _(e)
        }
        function c(t, i) {
            function s() {
                c(),
                a(),
                n()
            }
            function n() {
                g.attr("aria-live", "polite")
            }
            function o() {
                b.closeOnHover && g.hover(f, p),
                !b.onclick && b.tapToDismiss && g.click(_),
                b.closeButton && v && v.click(function(e) {
                    e.stopPropagation ? e.stopPropagation() : void 0 !== e.cancelBubble && e.cancelBubble !== !0 && (e.cancelBubble = !0),
                    b.onCloseClick && b.onCloseClick(e),
                    _(!0)
                }),
                b.onclick && g.click(function(e) {
                    b.onclick(e),
                    _()
                })
            }
            function r() {
                g.hide(),
                g[b.showMethod]({
                    duration: b.showDuration,
                    easing: b.showEasing,
                    complete: b.onShown
                }),
                b.timeOut > 0 && "amocrm_new_version" != b.notificationType && (y = setTimeout(_, b.timeOut))
            }
            function a() {
                b.newestOnTop ? h.prepend(g) : h.append(g)
            }
            function c() {
                b.closeButton && (v.addClass(b.closeClass).attr("role", "button"),
                g.prepend(v))
            }
            function _(e) {
                var t = e && b.closeMethod !== !1 ? b.closeMethod : b.hideMethod
                  , i = e && b.closeDuration !== !1 ? b.closeDuration : b.hideDuration
                  , s = e && b.closeEasing !== !1 ? b.closeEasing : b.hideEasing;
                return !$(":focus", g).length || e ? g[t]({
                    duration: i,
                    easing: s,
                    complete: function() {
                        u(g),
                        clearTimeout(y),
                        b.onHidden && "hidden" !== w.state && b.onHidden(),
                        w.state = "hidden",
                        w.endTime = new Date,
                        l(w)
                    }
                }) : void 0
            }
            function p() {
                (b.timeOut > 0 || b.extendedTimeOut > 0) && (y = setTimeout(_, b.extendedTimeOut))
            }
            function f() {
                clearTimeout(y),
                g.stop(!0, !0)[b.showMethod]({
                    duration: b.showDuration,
                    easing: b.showEasing
                })
            }
            var g = $("<div/>")
              , b = $.extend({}, d(), i)
              , v = $(b.closeHtml)
              , y = null;
            h = e(b, !0),
            m++;
            var w = {
                toastId: m,
                state: "visible",
                startTime: new Date,
                options: b
            };
            return g.addClass(b.toastClass),
            g.append(t),
            s(),
            r(),
            o(),
            l(w),
            g
        }
        function d() {
            return $.extend({}, a(), f.options)
        }
        function u(t) {
            h || (h = e()),
            t.is(":visible") || (t.remove(),
            t = null,
            0 === h.children().length && (h.remove(),
            p = void 0))
        }
        var h, _, p, m = 0, f = {
            clear: i,
            remove: s,
            getContainer: e,
            options: {},
            subscribe: t,
            create: c,
            version: "2.1.3"
        };
        return f
    }()
}),
define("lib/interface/amojo/bots", ["require"], function(e) {
    "use strict";
    function t() {
        var e = {};
        return _.each(i, function(t) {
            e[t.id] = {
                id: t.id,
                amojo_id: t.id,
                name: t.name,
                active: !0,
                code: t.code,
                avatar: t.avatar,
                option: t.name,
                title: t.name,
                bot: !0
            }
        }),
        e
    }
    var i = AMOCRM.constant("amojo_bots");
    return {
        get: t
    }
}),
define("lib/components/base/inbox/sources", ["require", "underscore", "rxjs", "lib/core/users", "lib/interface/amojo/api", "lib/interface/amojo/bots", "lib/components/base/inbox/users"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("rxjs")
      , s = e("lib/core/users")
      , n = e("lib/interface/amojo/api")
      , o = e("lib/interface/amojo/bots")
      , r = (s.current(),
    e("lib/components/base/inbox/users"))
      , a = AMOCRM.constant("account").amojo_rights
      , l = {
        list: "/ajax/v1/inbox/list"
    };
    return function(e) {
        function c(s) {
            s = s || {},
            s.filter = s.filter || {},
            b = s;
            var n = []
              , o = s.filter;
            return g = o.search_title && o.search_title.term.length > 0,
            s.reset && d(),
            g ? (n = _(t.extend({}, s, {
                fetch_local: !0
            })).concat(m()).map(function(e) {
                return s.filter.search_title && t.isFunction(s.filter.search_title.rate) ? s.filter.search_title.rate(e) : e
            }).filter(function(e, t, i) {
                var s = !o.search_title || e._sorting_rate > 0;
                return s && x.push(e),
                s
            }).toArray().map(function(e, i, s) {
                return e = t.sortBy(e, function(e) {
                    return -e._sorting_rate
                })
            }).flatMap(function(e) {
                return i.Observable.fromArray(e)
            }),
            g && t.isFunction(s.filter.afterFetch) && s.reset && s.filter.afterFetch()) : n = h(s).filter(function(e) {
                return "chat_direct" === e.type ? !!r.getRecipient(e.entity.id) : !0
            }).concat(_()).take(e).doOnNext(function(e) {
                f(e.id, "chat_direct_create" == e.type)
            }),
            n
        }
        function d() {
            v = 0,
            y = !0,
            w = s.get(!0),
            k = {}
        }
        function u() {
            return !y && 0 === t.values(w).length
        }
        function h(s) {
            return i.Observable.defer(function() {
                if (!y)
                    return i.Observable.empty();
                var n = null;
                if (s.filter.use_cache && x.length)
                    n = $.Deferred(),
                    n.resolve({
                        response: {
                            inbox: {
                                list: {
                                    data: x
                                }
                            }
                        }
                    });
                else {
                    var o = {
                        limit: g ? 500 : e,
                        offset: v
                    };
                    "read_state" == b.order_by && (o.order_by = b.order_by),
                    n = $.ajax({
                        url: l.list,
                        data: o
                    }).promise()
                }
                return i.Observable.fromPromise(n).map(function(e) {
                    if (t.isUndefined(e))
                        return y = !1,
                        [];
                    var i = e.response.inbox.list.data;
                    return s.filter.direct_only && (i = t.filter(i, function(e) {
                        return "chat_direct" == e.type
                    })),
                    x = [],
                    i
                }).flatMap(function(t) {
                    return t.length < e && (y = !1),
                    v += t.length,
                    i.Observable.fromArray(t)
                }).doOnNext(function(e) {
                    "chat_direct" === e.type && (k[e.entity.id] = !0)
                })
            })
        }
        function _(e) {
            e = e || {};
            var n;
            return e.fetch_local ? (n = e.filter.use_cache && x.length ? x : s.get(!0),
            x = []) : n = w,
            i.Observable.fromArray(a.can_direct ? t.values(n) : []).concat(i.Observable.fromArray(t.values(o.get())).filter(function(e) {
                return "amo.support" !== e.code || "customers" !== AMOCRM.constant("account").subdomain
            })).filter(function(t) {
                return e.fetch_local || f(t.id, k[t.id])
            }).filter(function(t) {
                return e.fetch_local || f(t.id, t.id === C.id)
            }).map(function(e) {
                return {
                    id: e.id,
                    title: e.title,
                    login: e.login,
                    type: "chat_direct",
                    web_link: "#direct",
                    icon: e.avatar,
                    is_read: 1,
                    bot: e.bot === !0,
                    entity: {
                        id: e.id
                    },
                    created_at: 0,
                    payload: {
                        message: {
                            id: null
                        }
                    }
                }
            })
        }
        function p() {
            return i.Observable.defer(function() {
                return n.getGroupChats(n.CHAT_GROUP_TYPE)
            }).map(function(e) {
                return e ? e.response.chats.group_list : null
            }).shareReplay(1).flatMap(function(e) {
                return i.Observable.fromArray(t.values(e))
            })
        }
        function m() {
            return M.map(function(e) {
                return {
                    id: parseInt(e.entity_id),
                    title: e.title,
                    login: e.login,
                    type: "chat_group",
                    web_link: null,
                    icon: null,
                    is_read: 1,
                    entity: {
                        id: e.entity_id.toString()
                    },
                    created_at: 0,
                    payload: {
                        chat_id: e.chat_id,
                        message: {
                            id: 0
                        }
                    }
                }
            })
        }
        function f(e, i) {
            return i ? (w = t.omit(w, e),
            !1) : !0
        }
        var g, b, v = 0, y = !0, w = s.get(!0), C = s.get(!0)[s.current().id], k = {}, x = [], M = p();
        return {
            fetch: c,
            isFinished: u
        }
    }
}),
define("lib/components/base/inbox/search", ["require", "underscore", "twig", "lib/common/fn", "lib/core/view", "jquery", "lib/components/base/inbox/constants"], function(e) {
    "use strict";
    var t, i, s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = e("lib/core/view"), a = e("jquery"), l = e("lib/components/base/inbox/constants");
    return i = r.extend({
        ns: ".inbox_filter",
        $overlay: null,
        unread_first: !0,
        template: "/tmpl/inbox/filter/filter.twig",
        hidden: !0,
        _selectors: function() {
            return {
                order_switcher: ".js-order-switcher"
            }
        },
        _classes: function() {
            return {
                hidden: "inbox-filter_hidden"
            }
        },
        events: {
            "change .js-order-switcher": "onOrderChange"
        },
        initialize: function(e) {
            this.options = e || {};
            var t = JSON.parse(localStorage.getItem("amo_inbox_order"));
            s.isBoolean(t) && (this.unread_first = t),
            r.prototype.initialize.apply(this, arguments),
            this.render()
        },
        render: function() {
            return n._preload([this.template])().then(s.bind(this._render, this))
        },
        _render: function() {
            var e = a(n({
                ref: this.template
            }).render({
                unread_first: this.unread_first
            }));
            this.setElement(e),
            this.options.$container.append(this.$el)
        },
        show: function() {
            this._removeClass("hidden"),
            this.hidden = !1,
            this.showOverlay(),
            s.isFunction(this.options.onShow) && this.options.onShow()
        },
        hide: function() {
            s.isFunction(this.options.onHide) && this.options.onHide(),
            this._addClass("hidden"),
            this.hidden = !0,
            this.hideOverlay()
        },
        showOverlay: function() {
            this.hideOverlay(),
            this.$overlay = a('<div class="inbox-filter__overlay"></div>'),
            this.$overlay.one("click" + this.ns, s.bind(this.onOverlayClick, this)),
            this.$el.after(this.$overlay)
        },
        hideOverlay: function() {
            this.$overlay && this.$overlay.length && (this.$overlay.off().remove(),
            this.$overlay = null)
        },
        onOrderChange: function(e) {
            a(e.currentTarget);
            this.unread_first = e.target.checked,
            this.toggleOrderSwitcher(this.unread_first),
            localStorage.setItem("amo_inbox_order", JSON.stringify(this.unread_first)),
            s.isFunction(this.options.onSelect) && this.options.onSelect(this.unread_first)
        },
        onOverlayClick: function(e) {
            this.hide()
        },
        toggleOrderSwitcher: function(e) {
            var t = this._elem("order_switcher")
              , i = t.closest(".switcher_wrapper").find(".switcher");
            t.prop("checked", e),
            i.toggleClass("switcher__off", !e).toggleClass("switcher__on", e)
        }
    }),
    t = r.extend({
        template: "/tmpl/inbox/filter/search_line.twig",
        filter_is_active: !1,
        filter_prev_term: null,
        last_filter: {},
        events: {
            "input input#search-input": "onInputSearch",
            "click .aside__menu_container": "onCancelSearch",
            keydown: "onKeyDown",
            "click .filter-button": "onFilterClick",
            "click .button__filter": "onFilterClickToSearchLine"
        },
        _selectors: function() {
            return {
                cancel_search: ".aside__menu_container .icon-search-cancel",
                search_input: "input#search-input",
                filter_button: ".filter-button"
            }
        },
        _classes: function() {
            return {
                filter_active: "filter-button_active"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            r.prototype.initialize.apply(this, arguments),
            this.initFilter()
        },
        initFilter: function() {
            this.filter = this._addComponent(i, {
                $container: this.$el,
                onSelect: s.bind(function(e) {
                    this.options.onFilterItems(s.extend(this.last_filter || this._getFilterOptions(), {
                        reset: !0
                    })),
                    this.toggleFilterButton(e)
                }, this)
            }),
            this.toggleFilterButton(this.filter.unread_first)
        },
        toggleFilterButton: function(e) {
            this._elem("filter_button").toggleClass(this._class("filter_active"), e)
        },
        destroy: function() {
            r.prototype.destroy.apply(this, arguments)
        },
        onFilterClick: function(e) {
            this.filter[this.filter.hidden ? "show" : "hide"]()
        },
        onFilterClickToSearchLine: function(e) {
            a(e.currentTarget).find("input").focus(),
            this.filter.show()
        },
        onKeyDown: function(e) {
            this.filter.hide(),
            (e.keyCode == l.ARROW_DOWN || e.keyCode == l.ARROW_UP || e.keyCode == l.ENTER) && this.options.startClickDown(e.keyCode),
            e.stopPropagation()
        },
        onCancelSearch: function(e) {
            this.resetSearch(),
            this.filter.hide()
        },
        onInputSearch: function(e) {
            this.filter.hide(),
            this.handleSearchTerm()
        },
        showCancel: function() {
            this._elem("cancel_search").removeClass("icon-search-cancel_hidden")
        },
        hideCancel: function() {
            this._elem("cancel_search").addClass("icon-search-cancel_hidden")
        },
        handleSearchTerm: function() {
            var e = this._elem("search_input")
              , t = e.val().trim()
              , i = this.isSearchValid(t);
            t && t.length ? this.showCancel() : this.hideCancel(),
            i ? (this.options.onTermIsValid(),
            this.enableFilter(t)) : this.filter_is_active && this.filter_prev_term && (this.options.onTermIsInvalid(),
            this.disableFilter()),
            this.filter_is_active = i
        },
        enableFilter: s.debounce(function(e) {
            this.filterItems(e),
            this.filter_prev_term = e
        }, 300),
        disableFilter: s.debounce(function() {
            this.resetFilter(),
            this.filter_prev_term = null
        }, 300),
        isSearchValid: function(e) {
            return s.isString(e) && e.length > 2
        },
        resetFilter: function() {
            this.options.onResetFilter()
        },
        resetSearch: function() {
            var e = this._elem("search_input");
            e.val("").trigger("input")
        },
        _getSortingRules: function(e) {
            e = this._escapeSpecialChars(e);
            var t = this._escapeSpecialChars(o.transliterate(e))
              , i = this._escapeSpecialChars(o.transliterate(e, "punto"));
            return e = e.replace(/(е|Є)/gim, "(е|Є)"),
            {
                contains_term: {
                    rx: new RegExp("(" + e + "|" + t + "|" + i + ")","igm"),
                    rate: 1
                },
                equality_at_start: {
                    rx: new RegExp("^(" + e + "|" + t + "|" + i + ")","igm"),
                    rate: 10
                },
                strict_equality: {
                    rx: new RegExp("^(" + e + "|" + t + "|" + i + ")$","igm"),
                    rate: 100
                }
            }
        },
        _escapeSpecialChars: function(e) {
            return e.replace(/([!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])/gim, "\\$1")
        },
        _getFilterOptions: function(e) {
            var t = {}
              , i = !1
              , n = e ? this._getSortingRules(e) : {};
            return t = {
                direct_only: !0,
                use_cache: i,
                search_title: {
                    term: e,
                    rules: n,
                    rate: function(e) {
                        return function(e, t) {
                            var i = 0;
                            return s.each(t, function(t, s) {
                                var n = t.rx.exec(e.title) || [];
                                "equality_at_start" == s && e.login && e.login != e.title && n.concat(t.rx.exec(e.login) || []),
                                i += t.rate * n.length,
                                t.rx.lastIndex = 0
                            }),
                            e._sorting_rate = i,
                            e
                        }(e, n)
                    }
                },
                afterFetch: s.bind(function() {
                    this.options.afterFilterFetch()
                }, this)
            },
            this.last_filter = t,
            t
        },
        filterItems: function(e) {
            var t = this._getFilterOptions(e);
            this.options.onFilterItems({
                filter: t,
                reset: !0
            })
        }
    })
}),
define("lib/components/base/inbox/base", ["require", "jquery", "twig", "underscore", "rxjs", "visibilityjs", "lib/components/base/inbox/offline", "lib/common/fn", "lib/core/view", "lib/components/base/inbox/users", "lib/components/base/inbox/broadcast", "lib/components/base/inbox/chats/direct_chat", "lib/components/base/inbox/chats/group_chat", "lib/components/base/inbox/chats/group_chat_create", "lib/components/base/inbox/notification_collection", "lib/components/base/inbox/toast", "lib/components/base/inbox/sources", "lib/components/base/autoload", "lib/components/base/inbox/search", "lib/components/base/inbox/constants", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("twig")
      , s = e("underscore")
      , n = e("rxjs")
      , o = e("visibilityjs")
      , r = e("lib/components/base/inbox/offline")
      , a = e("lib/common/fn")
      , l = e("lib/core/view")
      , c = e("lib/components/base/inbox/users")
      , d = e("lib/components/base/inbox/broadcast")
      , u = e("lib/components/base/inbox/chats/direct_chat")
      , h = e("lib/components/base/inbox/chats/group_chat")
      , _ = e("lib/components/base/inbox/chats/group_chat_create")
      , p = e("lib/components/base/inbox/notification_collection")
      , m = e("lib/components/base/inbox/toast")
      , f = e("lib/components/base/inbox/sources")
      , g = e("lib/components/base/autoload")
      , b = e("lib/components/base/inbox/search")
      , v = e("lib/components/base/inbox/constants")
      , y = e("lib/core/users");
    return l.extend({
        el: ".notification-wrapper",
        data: [],
        error: null,
        api: {
            list: "/ajax/v1/inbox/list",
            badge: "/ajax/v1/inbox/state",
            read: "/ajax/v1/inbox/read",
            task: "/ajax/todo/multiple/close/"
        },
        current_state: v.STATE_UNINITIALIZED,
        subscriptions: [],
        filters: [],
        notifications_loader: new f(v.PAGE_COUNT),
        opened_direct_chat: null,
        push_hide_timers: {},
        _push_permission: null,
        filter_is_active: !1,
        filter_prev_term: null,
        $unread_items: null,
        directChatOpening: !1,
        inbox_fully_opened: !1,
        readableTypes: function(e) {
            var t = ["task", "error", "call", "payment_expired", "payment_overflow", "payment_pay", "amocrm_new_version"];
            return -1 !== s.indexOf(t, e)
        },
        readable_ids: [],
        preload: n.Observable.create(function(e) {
            i._preload(["/tmpl/notifications/types/inner_message.twig", "/tmpl/inbox/direct_chat/item.twig"])().then(function() {
                e.onNext(!0),
                e.onCompleted()
            })
        }).shareReplay(),
        readers: {},
        _selectors: function() {
            return {
                inbox: "#side-line",
                inbox_container: "#inbox-container",
                item_container: "#inbox-inner",
                search_container: ".search-container",
                inbox__spiner: ".inbox__spiner",
                direct_chat_container: ".inbox-direct-chat-container",
                inbox_toggle_button: ".nav__notifications",
                toast_container: "#popups_inbox",
                navigation: ".js-navigate-link",
                loader: ".loading",
                unread_item: ".notification__item__unread",
                cancel_search: ".aside__menu_container .icon-search-cancel",
                search_input: "input#search-input",
                chat_create_cross: ".add_icon-userpic_is-add"
            }
        },
        _classes: function() {
            return {
                hidden_inbox: "notification-wrapper__hidden",
                active: "inbox-expanded",
                enable_animation: "animated",
                hide_animation: "slide-out",
                show_animation: "slide-in",
                loading: "loading-full",
                direct_chat_enabled: "direct-chat__opened",
                chat_create_active: "active"
            }
        },
        events: {
            "input #search-input": "handleSearchTerm",
            "click .icon-search-cancel": "resetSearch",
            "click .js-create_group_chat:not(.chat_create-button--disabled)": "createGroupChat"
        },
        addReader: function(e, t) {
            return this.readers[t] = e,
            t
        },
        removeReader: function(e) {
            delete this.readers[e]
        },
        initialize: function() {
            this.$el.length && (l.prototype.initialize.apply(this, arguments),
            this.initSearch(),
            this.notifications = this._addComponent(p.Collection, {
                order_by: this.search.filter.unread_first ? "read_state" : ""
            }),
            this.listenTo(this.notifications, "add", s.bind(this.onInboxListAdd, this)),
            this.listenTo(this.notifications, "change", s.bind(this.onInboxListUpdated, this)),
            this.listenTo(this.notifications, "reset", s.bind(this.onInboxListReset, this)),
            this.listenTo(this.notifications, "inbox:show", s.bind(function() {
                this.inbox_fully_opened = !0,
                this.readable_ids.length > 0 && this.read({
                    id: this.readable_ids
                })
            }, this)),
            this.listenTo(this.notifications, "inbox:hide", s.bind(function() {
                this.inbox_fully_opened = !1
            }, this)),
            this.requestBadge(),
            this.requestPushPermission(),
            this.connect(),
            this.autoloadContent(),
            this._initOffline())
        },
        initSearch: function() {
            this.search = this._addComponent(b, {
                el: this.$el.find(".search-container"),
                onFilterItems: s.bind(function(e) {
                    this.data = [],
                    this.loadData(e)
                }, this),
                afterFilterFetch: s.bind(function() {
                    this.onInboxListReset()
                }, this),
                onResetFilter: s.bind(function() {
                    this.data = [],
                    this.onInboxListReset(),
                    this.loadData({
                        reset: !0
                    })
                }, this),
                onTermIsValid: s.bind(function() {
                    this.loader && this._destroyComponent(this.loader)
                }, this),
                onTermIsInvalid: s.bind(function() {
                    this.autoloadContent()
                }, this),
                startClickDown: s.bind(function(e) {
                    this.onWindowKeyDown(e)
                }, this)
            })
        },
        _initOffline: function() {
            this.offline = this._addComponent(r, {
                reconnect: s.bind(this.reconnect, this),
                class_name: "offline_notifications"
            }),
            this.listenTo(this.notifications, "add", s.bind(this.offline.setIdleTimeout, this.offline)),
            this._appendOffline(this.offline.el)
        },
        _appendOffline: function(e) {
            this.$el.find("#inbox-inner").before(e)
        },
        reconnect: function() {
            var e = this._elem("search_input").val()
              , t = this.notifications.findWhere({
                selected: !0
            });
            t && this.reconnectOpenedChat(t),
            e ? this.filterItems(e) : this.resetFilter(),
            d.reconnect(),
            this.requestBadge()
        },
        reconnectOpenedChat: function(e) {
            this.opened_direct_chat = this._addComponent(this._getChatView(e.attributes), this._getChatViewParams(e.attributes)),
            this.opened_direct_chat.render()
        },
        onWindowKeyDown: function(e) {
            this.directChatOpening || (e === v.ENTER && this.notifications.triggerClick(),
            e === v.ARROW_DOWN && this.notifications.setNext(),
            e === v.ARROW_UP && this.notifications.setPrev())
        },
        onInboxListReset: function() {
            this._elem("item_container").empty()
        },
        onInboxListUpdated: function(e) {
            var t = s.keys(e.changed);
            !t.length || 1 === t.length && "selected" === t[0] || setTimeout(s.bind(function() {
                var t = this._elem("item_container").children().index(e.view.$el)
                  , i = this.notifications.indexOf(e);
                t > i && this.moveItemAtTop(e.view.$el, !0, this.isExternalMessage(e))
            }, this), 100)
        },
        isExternalMessage: function(e) {
            var t = this.opened_direct_chat
              , i = e.get("payload").message && e.get("payload").message.id ? e.get("payload").message.id : null
              , s = t && t.messages ? t.messages.get(i) : null
              , n = y.current();
            return !t || t.userID !== e.get("entity").id || s.get("author").id !== n.amojo_id
        },
        onInboxListAdd: function(e) {
            var t = this.notifications.at(0) === e
              , i = this._addComponent(p.View(e.get("type")), {
                model: e
            });
            i.bind("click", s.bind(this.onItemSelected, this));
            try {
                t ? i.render().$el.prependTo(this._elem("item_container")) : i.render().$el.appendTo(this._elem("item_container")),
                i.cutText()
            } catch (n) {
                a.log({
                    msg: n.toString(),
                    tags: {}
                })
            }
        },
        onItemSelected: function(e, t, i) {
            switch (t.model.get("type")) {
            case "chat_direct":
            case "chat_direct_create":
            case "chat_group":
                return e.preventDefault(),
                e.stopPropagation(),
                this.openChat(t.model.toJSON(), i),
                !1
            }
        },
        connect: function() {
            d.socket.map(function(e) {
                return JSON.parse(e.data)
            }).subscribe(s.bind(this.onMessageReceived, this), function(e) {
                a.log({
                    msg: e.toString(),
                    tags: {}
                })
            })
        },
        read: function(e) {
            var i = {
                request: {
                    inbox: {
                        read: e
                    }
                }
            }
              , o = "/ajax/v1/inbox/read";
            return !s.isNull(this.readable_ids) && this.readable_ids.length > 0 && (this.readable_ids = []),
            n.Observable.fromPromise(t.ajax({
                type: "POST",
                url: o,
                contentType: "application/json",
                data: JSON.stringify(i)
            })).map(function(e) {
                return e.response.inbox.read
            })
        },
        onMessageReceived: function(e) {
            var t;
            this.refreshCounter(e.state.unread),
            s.each(e.data, s.bind(function(i) {
                i = new p.Model(i).toJSON(),
                "new" === e.event && 0 === i.is_read && (this.readTypes(i),
                this.readable_ids.length > 0 && this.inbox_fully_opened && this.read({
                    id: this.readable_ids
                }),
                t = s.find(this.readers, function(e) {
                    return e(i)
                }),
                s.isUndefined(t) || this.read({
                    id: i.notification_id
                })),
                this.current_state !== v.STATE_SHOW_CONTENT || this.search.filter_is_active || (e.event === v.EVENT_DELETE ? this.notifications.remove(i) : this.notifications.add(new p.Model(i), {
                    merge: !0
                })),
                i.silent || this.showNotification(i),
                this._checkChatCreated(i)
            }, this))
        },
        isActive: function() {
            return !this._hasClass("hidden_inbox")
        },
        showNotification: function(e) {
            o.hidden() ? this.showPushNotification(e) : this.didNotifyAllowed(e) && this.showInternalNotification(e)
        },
        showInternalNotification: function(e) {
            var t;
            e.notification = !0;
            try {
                t = new (p.View(e.type))({
                    model: new p.Model(e)
                }),
                t.bind("click", s.bind(this.onItemSelected, this)),
                m.create(t.render().el, {
                    containerId: this._selector("toast_container"),
                    toastClass: "popup-inbox",
                    closeHtml: '<img class="popup-inbox__close" src="/frontend/images/interface/inbox/close_notification.svg">',
                    closeButton: !0,
                    notificationType: e.type
                })
            } catch (i) {
                a.log({
                    msg: i.toString(),
                    tags: {}
                })
            }
        },
        _isPushSupported: function() {
            return "Notification"in window
        },
        _isPushAllowed: function() {
            return "granted" === this._push_permission
        },
        requestPushPermission: function() {
            this._isPushSupported() && Notification && Notification.requestPermission && Notification.requestPermission(s.bind(function(e) {
                this._push_permission = e
            }, this))
        },
        showPushNotification: function(e) {
            var t, i;
            this._isPushSupported() && this._isPushAllowed() && (i = e.entity && e.entity.id,
            t = new Notification(e.title,{
                lang: AMOCRM.lang_id,
                body: e.message.replace(/<[^>]+>/g, ""),
                icon: e.icon,
                tag: i
            }),
            t.onclick = s.bind(function() {
                this.focusWindow(),
                this.onPushNotificationClick(e),
                t.close()
            }, this),
            t.onshow = s.bind(function() {
                this.push_hide_timers[i] && clearTimeout(this.push_hide_timers[i]),
                this.push_hide_timers[i] = setTimeout(function() {
                    t.close()
                }, 1e4)
            }, this),
            t.onerror = s.noop,
            t.onclose = s.bind(function() {
                this.push_hide_timers[i] && clearTimeout(this.push_hide_timers[i])
            }, this))
        },
        onPushNotificationClick: function(e) {
            var t, i = /^(https?:\/\/)?([0-9a-z\-\.]{1,})(\.amocrm\.(ru|com)|\.amocrm2\.saas).*/i;
            switch (e.type) {
            case "chat_direct":
            case "chat_direct_create":
            case "chat_group":
                this.openChat(e),
                this.scrollToTop();
                break;
            default:
                e.web_link && (this.focusWindow(),
                "/" === e.web_link[0] || i.test(e.web_link) ? AMOCRM.router.navigate(e.web_link, {
                    trigger: !0
                }) : (t = window.open(),
                t.opener = null,
                t.location = e.web_link))
            }
        },
        focusWindow: function() {
            window.focus()
        },
        apply: function() {
            var e = t.Deferred();
            switch (this.current_state) {
            case v.STATE_UNINITIALIZED:
            case v.STATE_SHOW_ERROR:
                this.loadData({
                    reset: !0
                }).then(function() {
                    e.resolve()
                });
                break;
            default:
                e.resolve()
            }
            return e.promise()
        },
        showError: s.noop,
        showContent: function(e) {
            this.current_state = v.STATE_SHOW_CONTENT,
            e.length > 0 && s.each(e, function(e) {
                this.notifications.add(e)
            }, this)
        },
        moveItemAtTop: function(e, i, n) {
            var o, r, a, l = t(e), c = 0, d = 0, u = this.search.filter.unread_first, h = 0;
            if (i) {
                if (o = e.prevAll(),
                u && !n) {
                    if (this.$unread_items = this.search.filter.unread_first ? this._findElem("unread_item") : null,
                    this.$unread_items.length) {
                        var _ = t(this.$unread_items[this.$unread_items.length - 1]);
                        h = _.offset().top + _.outerHeight()
                    }
                    _ && (o = o.slice(0, o.length - _.index())),
                    o = o.not(this.$unread_items)
                }
                o.length > 0 && (r = _ && _.next() ? _.next() : t(o[o.length - 1]),
                a = t(o[0]),
                c = l.offset().top - r.offset().top,
                d = l.offset().top + l.outerHeight() - (a.offset().top + a.outerHeight()),
                l.animate({
                    top: -c
                }),
                o.animate({
                    top: d
                }, {
                    complete: s.bind(function() {
                        u && !n && this.$unread_items.length ? _.after(l) : l.parent().prepend(l),
                        l.css({
                            top: 0
                        }),
                        o.css({
                            top: 0
                        })
                    }, this)
                }))
            } else
                this._elem("item_container").prepend(this._addClass("enable_animation", l)),
                setTimeout(s.bind(function() {
                    this._addClass("show_animation", l),
                    setTimeout(s.bind(function() {
                        this._removeClass("show_animation", l),
                        this._removeClass("enable_animation", l)
                    }, this), 200)
                }, this), 10)
        },
        loadData: function(e) {
            e = e || {};
            var i = t.Deferred();
            return this.filter_prev_term && s.isUndefined(e.filter) && s.isUndefined(e.reset) && (this.data = [],
            s.extend(e, {
                filter: this._getFilterOptions(this.filter_prev_term)
            })),
            e.order_by = this.search.filter.unread_first ? "read_state" : "",
            this.notifications.setOrder(e.order_by),
            this.current_state === v.STATE_SHOW_LOADING || this.notifications_loader.isFinished() && s.isEmpty(e.filter) ? void i.resolve() : (this.current_state = v.STATE_SHOW_LOADING,
            this.showLoading(),
            e.reset && this.notifications.reset(),
            this.preload.switchMap(s.bind(function() {
                return this.notifications_loader.fetch(e)
            }, this)).subscribe(s.bind(this.createNotificationModel, this), s.bind(function(e) {
                this.current_state = v.STATE_SHOW_ERROR,
                this.showError(),
                this.hideLoading(),
                i.resolve(),
                a.log({
                    msg: e.toString(),
                    tags: {}
                })
            }, this), s.bind(function() {
                0 === this.notifications.length && this.search.filter_is_active && this.notifications.add(new p.Model({
                    id: "fake",
                    type: "user_not_found"
                })),
                this.current_state = v.STATE_SHOW_CONTENT,
                this.hideLoading(),
                this.$unread_items = this.search.filter.unread_first ? this._findElem("unread_item") : null,
                this.readable_ids.length > 0 && this.read({
                    id: this.readable_ids
                }),
                i.resolve()
            }, this)),
            this.opened_direct_chat && e.from_create && this.opened_direct_chat.trigger("chatsFetched"),
            i.promise())
        },
        readTypes: function(e) {
            0 === e.is_read && this.readableTypes(e.type) && this.readable_ids.push(e.notification_id)
        },
        createNotificationModel: function(e) {
            var t = new p.Model(e);
            this.readTypes(t.attributes),
            this.opened_direct_chat && this.opened_direct_chat.model && t.id.toString() === this.opened_direct_chat.model.id.toString() && (t.set({
                selected: !0
            }, {
                silent: !0
            }),
            this.opened_direct_chat.model = t),
            parseInt(t.attributes.entity.id) !== y.current("id") && this.notifications.add(t)
        },
        autoloadContent: function() {
            this.loader = this._addComponent(g, {
                element: document.getElementById("inbox-container"),
                throttle: 300,
                onLoadMore: s.bind(this.loadData, this)
            })
        },
        requestBadge: function() {
            t.ajax({
                context: this,
                url: this.api.badge,
                dataType: "json",
                success: s.bind(function(e) {
                    this.refreshCounter(e.response.inbox.state.unread)
                }, this)
            })
        },
        showLoading: function() {
            0 === this.data.length ? (this._toggleClass("loading", "search_container", !0),
            this._toggleClass("loading", "inbox__spiner", !0)) : (this._elem("loader").show(),
            this._elem("inbox_container").animate({
                scrollTop: this._elem("inbox_container").children().height()
            }, "slow"))
        },
        hideLoading: function() {
            this._toggleClass("loading", "search_container", !1),
            this._toggleClass("loading", "inbox__spiner", !1),
            this._elem("loader").hide(),
            this.trigger("inbox:loaded:fully")
        },
        addNotifyFilter: function(e) {
            var t = this.filters.push(e)
              , i = this;
            return {
                remove: function() {
                    t > -1 && i.filters.splice(t - 1, 1)
                }
            }
        },
        didNotifyAllowed: function(e) {
            var t = !0;
            return this.filters.forEach(function(i) {
                i(e) || (t = !1)
            }),
            t
        },
        _isChatAlreadyOpened: function(e) {
            return null !== this.opened_direct_chat && this.opened_direct_chat.getId() === e.toString() ? !0 : !1
        },
        _getChatView: function(e) {
            switch (e.type) {
            case "chat_group":
                return h;
            case "chat_group_create":
                return _;
            case "chat_direct":
            case "chat_direct_create":
            default:
                return u
            }
        },
        _getChatViewParams: function(e) {
            return {
                id: e.id,
                messageId: e.payload.message && e.payload.message_id,
                model: this.notifications.get(e.id),
                $container: this._getDirectChatContainer()
            }
        },
        createGroupChat: function() {
            var e = {
                type: "chat_group_create",
                id: "create_group",
                payload: {},
                entity: {
                    id: "create_group"
                }
            };
            this.openChat(e)
        },
        openDirectChat: function(e) {
            var t = this.notifications.get(e);
            if (!t) {
                var i = c.getRecipient(e);
                if (i) {
                    var s = {
                        id: i.id,
                        title: i.title,
                        login: i.login,
                        type: "chat_direct",
                        web_link: "#direct",
                        icon: i.avatar,
                        is_read: 1,
                        bot: i.is_bot === !0,
                        entity: {
                            id: i.id
                        },
                        created_at: 0,
                        payload: {
                            message: {
                                id: null
                            }
                        }
                    };
                    t = new p.Model(s),
                    this.notifications.add(new p.Model(s), {
                        merge: !0
                    })
                }
            }
            this.openChat(t.attributes)
        },
        openChat: function(e) {
            var i, n = t.Deferred();
            return this._isChatAlreadyOpened(e.id) ? n.reject() : (this.directChatOpening = !0,
            this.closeDirectChat().then(s.bind(function() {
                i = this.notifications.get(e.id),
                this._toggleClass("direct_chat_enabled", this.$el, !0),
                this.opened_direct_chat = this._addComponent(this._getChatView(e), this._getChatViewParams(e)),
                this.opened_direct_chat.on("onClosed", s.bind(this.closeDirectChat, this)),
                "chat_group_create" === e.type && (this.opened_direct_chat.on("openChat", s.bind(this.openChat, this)),
                this.opened_direct_chat.on("fetchData", s.bind(this.loadData, this))),
                this.opened_direct_chat.render().then(s.bind(function() {
                    this._toggleClass("show_animation", this.opened_direct_chat.$el, !0).show(),
                    i && (i.set({
                        selected: !0
                    }),
                    this.directChatOpening = !1),
                    n.resolve()
                }, this))
            }, this)),
            n.promise())
        },
        closeDirectChat: function() {
            var e = t.Deferred();
            return s.isNull(this.opened_direct_chat) || s.isUndefined(this.opened_direct_chat) ? e.resolve() : (this._toggleClass("show_animation", this.opened_direct_chat.$el, !1),
            this._toggleClass("hide_animation", this.opened_direct_chat.$el, !0),
            setTimeout(s.bind(function() {
                this._toggleClass("direct_chat_enabled", this.$el, !1),
                this._toggleClass("chat_create_active", this._elem("chat_create_cross"), !1),
                this.opened_direct_chat.model && this.opened_direct_chat.model.set({
                    selected: !1
                }),
                this._destroyComponent(this.opened_direct_chat),
                this._getDirectChatContainer().empty(),
                this.opened_direct_chat = null,
                e.resolve()
            }, this), 300),
            this.opened_direct_chat.trigger("closeDirectChat")),
            e.promise()
        },
        _getDirectChatContainer: function() {
            return this._elem("direct_chat_container")
        },
        findIndex: function(e) {
            return s.findIndex(this.data, function(t) {
                return "chat_direct" === e.data.type ? t.data.entity.id.toString() === e.data.entity.id.toString() : t.data.id.toString() === e.data.id.toString()
            })
        },
        handleSearchTerm: function() {
            var e = this._elem("search_input")
              , t = e.val().trim()
              , i = this.isSearchValid(t);
            t && t.length ? this._elem("cancel_search").removeClass("icon-search-cancel_hidden") : this._elem("cancel_search").addClass("icon-search-cancel_hidden"),
            i ? (this.loader && this._destroyComponent(this.loader),
            this.enableFilter(t)) : this.filter_is_active && this.filter_prev_term && (this.autoloadContent(),
            this.disableFilter()),
            this.filter_is_active = i
        },
        enableFilter: s.debounce(function(e) {
            this.filterItems(e),
            this.filter_prev_term = e
        }, 300),
        disableFilter: s.debounce(function() {
            this.resetFilter(),
            this.filter_prev_term = null
        }, 300),
        isSearchValid: function(e) {
            return s.isString(e) && e.length > 2
        },
        resetFilter: function() {
            this.data = [],
            this._elem("item_container").empty(),
            this.loadData({
                reset: !0
            })
        },
        resetSearch: function() {
            var e = this._elem("search_input");
            e.val("").trigger("input")
        },
        _getSortingRules: function(e) {
            var t, i;
            return e = this._escapeSpecialChars(e),
            t = this._escapeSpecialChars(a.transliterate(e)),
            i = this._escapeSpecialChars(a.transliterate(e, "punto")),
            e = e.replace(/(е|Є)/gim, "(е|Є)"),
            {
                contains_term: {
                    rx: new RegExp("(" + e + "|" + t + "|" + i + ")","igm"),
                    rate: 1
                },
                equality_at_start: {
                    rx: new RegExp("^(" + e + "|" + t + "|" + i + ")","igm"),
                    rate: 10
                },
                strict_equality: {
                    rx: new RegExp("^(" + e + "|" + t + "|" + i + ")$","igm"),
                    rate: 100
                }
            }
        },
        _escapeSpecialChars: function(e) {
            return e.replace(/([!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])/gim, "\\$1")
        },
        _getFilterOptions: function(e) {
            var t = {}
              , i = !1
              , n = this._getSortingRules(e);
            return t = {
                direct_only: !0,
                use_cache: i,
                search_title: {
                    term: e,
                    rules: n,
                    rate: function(e) {
                        return function(e, t) {
                            var i = 0;
                            return s.each(t, function(t, s) {
                                var n = t.rx.exec(e.title) || [];
                                "equality_at_start" === s && e.login && e.login !== e.title && n.concat(t.rx.exec(e.login) || []),
                                i += t.rate * n.length,
                                t.rx.lastIndex = 0
                            }),
                            e._sorting_rate = i,
                            e
                        }(e, n)
                    }
                },
                afterFetch: s.bind(function() {
                    this._elem("item_container").empty()
                }, this)
            }
        },
        filterItems: function(e) {
            var t = this._getFilterOptions(e);
            this.data = [],
            this.loadData({
                filter: t,
                reset: !0
            })
        },
        setData: function(e) {
            this.data = e
        },
        getData: function() {
            return this.data
        },
        scrollToTop: function(e) {
            e ? this._elem("inbox_container").scrollTop(0) : this._elem("inbox_container").animate({
                scrollTop: 0
            }, "slow")
        },
        _checkChatCreated: function(e) {
            var t = e.payload && !s.isUndefined(e.payload.system_type);
            t && e.payload.system_type === v.SYSTEM_CREATE_GROUP && null !== this.opened_direct_chat && this.opened_direct_chat.trigger("chatCreated", e)
        }
    })
}),
define("lib/interface/support", ["require", "jquery", "underscore", "twig", "FileAPI", "vendor/intl-tel-input/lib/libphonenumber/build/utils", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/base/form", "vendor/intl-tel-input/build/js/intlTelInput"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("FileAPI"), r = e("vendor/intl-tel-input/lib/libphonenumber/build/utils"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = e("lib/components/base/form");
    return e("vendor/intl-tel-input/build/js/intlTelInput"),
    t = function(e) {
        var t = this;
        t.options = i.extend({}, e),
        t.attach_file = !1,
        t.overlay_start(),
        i.ajax({
            url: "/private/ping.php",
            dataType: "json"
        }).done(function(e) {
            t.overlay_stop(),
            "success" === e.status && (t.modal = new a({
                class_name: "modal-list modal-support",
                init: n._preload(["/tmpl/account/support.twig"], function(e) {
                    t.modal_body = e,
                    this.can_destroy = !1,
                    e.trigger("modal:loaded").html(n({
                        ref: "/tmpl/account/support.twig"
                    }).render()).trigger("modal:centrify"),
                    t.init(),
                    i("#support-phone").intlTelInput({
                        defaultCountry: ((AMOCRM.constant("ip_info") || {}).country_code || "").toLowerCase(),
                        utilsScript: r
                    }),
                    this.$modal.on("click", ".js-modal-try-again", s.bind(function() {
                        i("#support-error-window").empty().hide()
                    }))
                }),
                destroy: function() {
                    return t.destroy_modal(this)
                }
            }),
            setTimeout(function() {
                t.modal.options.can_destroy = !0
            }, 300),
            i(document).on("page:change:loader", function() {
                t.modal.destroy()
            }))
        })
    }
    ,
    s.extend(t.prototype, {
        overlay_start: function() {
            var e = this;
            return e.$modal_obj ? void e.$modal_obj.$modal.find(".modal-body").hide() : (e.$work_area = i("#page_holder"),
            void ((s.isUndefined(e.$overlay) || !e.$overlay) && (e.$overlay = i('<div class="default-overlay support-overlay-loader" id="support_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            e.$work_area.append(e.$overlay),
            e.$overlay.trigger("overlay:show"))))
        },
        overlay_stop: function() {
            var e = this;
            e.$modal_obj && e.$modal_obj.$modal.find(".modal-body").show(),
            e.$overlay && (e.$overlay.trigger("overlay:hide", {
                instantly: !0
            }),
            e.$overlay = !1)
        },
        destroy_modal: function(e) {
            return this.modified === !0 && this.force_close !== !0 ? (this.open_confirm_close_modal(),
            !1) : (this.modal_body && this.modal_body.off(),
            e.xhr && "undefined" == typeof e.xhr.status && e.xhr.abort(),
            this.options.callbacks && s.isFunction(this.options.callbacks.onDestroy) && this.options.callbacks.onDestroy(),
            this._form && this._form.destroy(),
            !0)
        },
        open_confirm_close_modal: function() {
            var e = this;
            new l({
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.button_exit,
                accept_text: AMOCRM.lang.support_submit,
                button_class: "button-input_blue",
                text: AMOCRM.lang.support_confirm_close_modal,
                accept: function() {
                    e.$send_button.trigger(AMOCRM.click_event),
                    this.modal.destroy()
                },
                destroy: function() {
                    this.accepted || (e.force_close = !0,
                    e.modal_body.find(".modal-body__close").trigger(AMOCRM.click_event))
                }
            })
        },
        validate: function() {
            var e, t, s, n = this, o = {
                form_caption: i("#support-caption"),
                form_message: i("#support-message"),
                form_email: i("#support-email"),
                form_phone: i("#support-phone")
            }, r = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,6})+$/, a = !0;
            return n.modified ? (e = i("input#support-email"),
            e.val(e.val().trim()),
            i.each(o, function(e, n) {
                switch (e) {
                case "form_caption":
                    n.val().length || (a = !1,
                    n.focus(function() {
                        n.removeClass("support_error_input"),
                        n.next(".support_error").hide()
                    }),
                    n.addClass("support_error_input"),
                    n.next(".support_error").show());
                    break;
                case "form_message":
                    n.val().length || (a = !1,
                    n.focus(function() {
                        n.removeClass("support_error_input"),
                        n.next(".support_error").hide()
                    }),
                    n.addClass("support_error_input"),
                    n.next(".support_error").show());
                    break;
                case "form_email":
                    r.test(n.val()) && n.val().length || (a = !1,
                    n.focus(function() {
                        n.removeClass("support_error_input"),
                        n.next(".support_error").hide()
                    }),
                    n.addClass("support_error_input"),
                    n.next(".support_error").show());
                    break;
                case "form_phone":
                    "ru" !== AMOCRM.lang_id && n.val().length > 4 && (t = n,
                    t.intlTelInput("isValidNumber") || (s = parseInt(t.intlTelInput("getValidationError")),
                    2 === s ? (a = !1,
                    n.focus(function() {
                        n.removeClass("support_error_input"),
                        i(".support_phone_error").hide()
                    }),
                    n.addClass("support_error_input"),
                    i(".support_phone_error").text(AMOCRM.lang.support_phone_error_short).show()) : (1 === s || 3 === s || 4 === s) && (a = !1,
                    n.focus(function() {
                        n.removeClass("support_error_input"),
                        i(".support_phone_error").hide()
                    }),
                    n.addClass("support_error_input"),
                    i(".support_phone_error").text(AMOCRM.lang.support_phone_error).show())))
                }
            }),
            a) : !1
        },
        set_changes: function(e) {
            var t = this;
            t.modified = e,
            this.modified ? t.$send_button.trigger("button:save:enable") : t.$send_button.trigger("button:save:disable")
        },
        init: function() {
            var e = this
              , t = i("#support_key_holder")
              , r = i("#btn-support-key");
            e.$form = i("#support-report-form"),
            e.$send_button = i("#btn-support-form"),
            t.hide(),
            r.hide(),
            i("#support_resolution").text(screen.width + "x" + screen.height),
            i.ajax({
                url: "/private/ajax/settings/support.php",
                data: {
                    base_info: !0
                },
                dataType: "json",
                success: function(e) {
                    i("#support_ip-address").text(e.ip_address),
                    i("#support_browser").text(e.browser),
                    i("#support_email").text(e.email),
                    i("#support-email").val(e.email.split(" ")[0]),
                    i("#support_subdomain").text(e.subdomain),
                    e.employer || r.show()
                }
            }),
            e.modal_body.on(AMOCRM.click_event, "#btn-support-key", function() {
                return i.ajax({
                    url: "/private/ajax/settings/support.php",
                    data: {
                        get_key: "Y"
                    },
                    dataType: "json",
                    success: function(e) {
                        t.show(),
                        i("#support_key").text(e.key),
                        i("#support_expire").text(e.expire_date)
                    }
                }),
                !1
            }),
            o.event.on(document.getElementById("file_attach"), "change", function(t) {
                var s;
                i("#support_attached_file").empty(),
                o.each(o.getFiles(t), function(t) {
                    e.attach_file = t,
                    s = '<div><span class="icon icon-inline icon-attach note-edit__attaches-item__icon"></span>',
                    s += '<span class="attached_file_name">' + t.name + "</span></div>",
                    i("#support_attached_file").append(s),
                    i("#files_counter").val(1)
                })
            }),
            e.$send_button.on(AMOCRM.click_event, function() {
                return e.validate() && "Y" !== e.$send_button.attr("data-loading") && (e.$send_button.trigger("button:save:disable").trigger("button:load:start"),
                o.upload({
                    data: {
                        EMAIL_FROM: e.$form.find("input#support-email").val(),
                        TITLE: e.$form.find("input#support-caption").val(),
                        MESSAGE: e.$form.find("#support-message").val(),
                        PHONE_FROM: e.$form.find("#support-phone").val(),
                        apply: "Y"
                    },
                    url: "/private/ajax/settings/support-form.php",
                    files: {
                        UserFile: e.attach_file
                    },
                    complete: function(t, s) {
                        var o = JSON.parse(s.response)
                          , r = o.state === !0 ? "success" : "error"
                          , a = i("#support-" + r + "-window")
                          , l = n({
                            ref: "/tmpl/common/modal/" + r + ".twig"
                        }).render({
                            msg: o.text,
                            text: o.text
                        });
                        a.append(l),
                        a.find(".modal-body__close").hide(),
                        setTimeout(function() {
                            a.show(),
                            e.$send_button.trigger("button:load:stop").trigger("button:save:enable")
                        }, 500),
                        "error" !== r && (setTimeout(function() {
                            e.$form[0].reset(),
                            i("#support_attached_file").empty()
                        }, 2500),
                        setTimeout(function() {
                            a.hide(),
                            e.force_close = !0,
                            e.modal.destroy()
                        }, 3e3))
                    }
                })),
                !1
            }),
            e._form = new c.View({
                el: e.$form
            }),
            e._form.model.on("has_changes", s.bind(e.set_changes, e, !0)).on("has_reverted", s.bind(e.set_changes, e, !1)),
            e.set_changes(!1)
        }
    }),
    t
}),
define("lib/components/leads/api", ["require", "underscore", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/urlparams")
      , s = function() {};
    return t.extend(s.prototype, {
        getPipelines: function() {
            return $.ajax({
                url: "/ajax/v1/pipelines/list",
                type: "GET",
                dataType: "json"
            }).then(function(e) {
                var i = e.response;
                return t.each(i.pipelines, function(e) {
                    e.statuses = t.sortBy(e.statuses, "sort")
                }),
                i
            })
        },
        getLeadsByStatus: function(e) {
            return e = e ? e + "/" : "",
            $.ajax({
                url: "/ajax/leads/sum/" + e + "?" + i.getQueryString(),
                data: {
                    leads_by_status: "Y"
                },
                type: "POST"
            })
        },
        getLeadsCount: function(e) {
            return $.ajax({
                url: "/ajax/leads/sum/?pipeline_id=" + e,
                data: {
                    leads_count: "Y"
                },
                type: "POST"
            })
        }
    }),
    new s
}),
define("lib/interface/left_menu/hover_menu/data_handlers/leads", ["require", "jquery", "underscore", "lib/components/leads/api"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/leads/api")
      , n = function() {
        n.prototype.type = "leads"
    };
    return i.extend(n.prototype, {
        default_data: {
            id: "new_pipe",
            leads: 0,
            request: {
                pipelines: {
                    add: {
                        new_pipe: {
                            sort: "",
                            is_main: "",
                            statuses: {
                                142: {
                                    name: AMOCRM.lang.pipelines_statuses_closed_won
                                },
                                143: {
                                    name: AMOCRM.lang.pipelines_statuses_closed_lost
                                },
                                new_1: {
                                    color: "#99ccff",
                                    name: AMOCRM.lang.pipelines_statuses_first_contact,
                                    pipeline_id: "new_pipe",
                                    sort: 10
                                },
                                new_2: {
                                    color: "#ffff99",
                                    name: AMOCRM.lang.pipelines_statuses_conversations,
                                    pipeline_id: "new_pipe",
                                    sort: 20
                                },
                                new_3: {
                                    color: "#ffcc66",
                                    name: AMOCRM.lang.pipelines_statuses_taking_decision,
                                    pipeline_id: "new_pipe",
                                    sort: 30
                                }
                            }
                        }
                    }
                }
            }
        },
        getRenderData: function(e) {
            var o = t.Deferred()
              , r = this._items[n.prototype.type];
            return i.isEmpty(r) || e ? s.getPipelines().done(i.bind(function(e) {
                this._items[n.prototype.type] = e.pipelines,
                o.resolve(t.extend(!0, {}, e.pipelines))
            }, this)) : o.resolve(t.extend(!0, {}, r)),
            o.promise()
        },
        getActiveData: function(e) {
            var t, s;
            switch (AMOCRM.data.current_entity) {
            case "leads-pipeline":
                t = AMOCRM.data && AMOCRM.data.current_view && +AMOCRM.data.current_view.pipeline_id,
                0 === t && (t = i.findWhere(e, {
                    is_main: !0
                }).value);
                break;
            case "leads":
            case "leads-unsorted":
                AMOCRM.data.is_card || (t = AMOCRM.data && AMOCRM.data.current_view && +AMOCRM.data.current_view.pipeline_id,
                t || (s = !0));
                break;
            case "leads-dp":
                t = AMOCRM.data && AMOCRM.data.current_view && AMOCRM.data.current_view.pipeline && +AMOCRM.data.current_view.pipeline.id
            }
            return t && e[t] && (e[t].selected = !0),
            {
                type: "leads",
                items: e,
                list_view: s
            }
        }
    }),
    {
        leads: new n
    }
}),
define("lib/common/user_rights", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = null
      , s = function(e, s) {
        var n = i;
        return null !== n && void 0 !== e && (n = t.has(n, e) ? n[e] : null,
        void 0 !== s && (n = t.has(n, s) ? n[s] : null)),
        n
    };
    return t.extend(function() {}, {
        RIGHTS_FULL: "A",
        RIGHTS_GROUP: "G",
        RIGHTS_MAIN: "M",
        RIGHTS_DENIED: "D",
        isAdmin: function() {
            return !!this.getRights("is_admin")
        },
        userID: function() {
            return this.getRights("user", "id")
        },
        groupMatesIDs: function() {
            return this.getRights("user", "group_mates_ids")
        },
        refreshCache: function() {
            var e, s, n, o;
            e = AMOCRM.constant("user_rights"),
            e && (i = i || {},
            n = ["add", "add_company", "has_multi", "view_company", "merge", "view", "edit", "add_task", "change_status", "reassign", "delete", "manage_tags", "import", "export", "can_save"],
            i.contacts = t.extend({}, i.contacts, e.contacts, e.contacts.CONTACT || {}),
            i.contacts = t.pick(i.contacts, n),
            n = ["add_company", "has_multi", "view_company", "merge", "view", "edit", "add_task", "change_status", "reassign", "delete", "manage_tags", "add", "import", "export", "can_save"],
            i.companies = t.extend({}, i.companies, e.companies, e.contacts.COMPANY || {}),
            i.companies = t.pick(i.companies, n),
            o = {
                leads: ["view", "edit", "change_status", "reassign", "add_task", "delete", "manage_tags", "add", "import", "export", "has_multi", "merge", "can_save"],
                todo: ["delete", "open", "close"],
                unsorted: ["accept", "decline", "denied"],
                catalogs_manage: ["view", "delete", "add", "edit"],
                catalogs: ["delete", "add", "edit"],
                customers: ["view", "export", "edit", "add", "delete"],
                tags: ["add"],
                mail: ["add_contacts", "add_customers", "add_leads", "delete_thread", "mailing", "multi_read", "reply", "restore_thread"],
                "contacts-trash": ["restore"],
                "leads-trash": ["restore"],
                "todo-trash": ["restore"]
            },
            t.each(o, function(s, n) {
                i[n] = t.extend({}, i[n], e[n]),
                i[n] = t.pick(i[n], s)
            }),
            i.is_admin = !!e.is_admin,
            i.is_free_user = !!e.is_free_user,
            i.mail_admin = !!e.mail_admin,
            i.duplicate_search = !!e.duplicate_search,
            s = AMOCRM.constant("user"),
            n = ["id", "group_mates_ids"],
            i.user = t.extend({}, i.user, t.pick(s, n)),
            i.user.id = parseInt(i.user.id))
        },
        getRights: function(e, t, n) {
            var o;
            return i && n !== !0 || this.refreshCache(),
            o = s(e, t),
            null === o && (this.refreshCache(),
            o = s(e, t)),
            o
        }
    })
}),
define("lib/interface/left_menu/hover_menu/data_handlers/catalogs", ["require", "jquery", "underscore", "lib/common/fn", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/common/fn")
      , n = e("lib/common/user_rights")
      , o = {
        contacts: 2,
        companies: 3,
        all: 4
    }
      , r = function() {
        r.prototype.type = "catalogs"
    };
    return i.extend(r.prototype, {
        default_data: {
            request: {
                catalogs: {
                    add: {
                        0: {
                            id: !1,
                            sort: 99999
                        }
                    }
                }
            }
        },
        getDefaultList: function() {
            return this.default_list = {},
            (n.getRights("contacts", "view") || n.getRights("contacts", "add")) && (this.default_list[o.contacts] = {
                name: AMOCRM.lang.contacts_head_title,
                sort: 9999,
                entity: "contacts",
                id: "contacts"
            }),
            (n.getRights("companies", "view") || n.getRights("companies", "add")) && (this.default_list[o.companies] = {
                name: AMOCRM.lang.companies_head_title,
                sort: 9998,
                entity: "companies",
                id: "companies"
            }),
            (n.getRights("companies", "add") || n.getRights("companies", "view")) && (n.getRights("contacts", "view") || n.getRights("contacts", "add")) && (this.default_list[o.all] = {
                name: s.i18n("Contacts and Companies"),
                sort: 9997,
                entity: "all"
            }),
            this.default_list
        },
        getRenderData: function(e) {
            var n = t.Deferred()
              , o = this._items[r.prototype.type];
            return i.isEmpty(o) || e ? t.ajax({
                url: "/ajax/v1/catalogs/list",
                type: "GET",
                dataType: "json"
            }).always(i.bind(function() {
                this._items[r.prototype.type] = i.extend({}, r.prototype.getDefaultList())
            }, this)).done(i.bind(function(e) {
                var t = e && e.response && e.response.catalogs;
                i.each(t, function(e) {
                    e.name = i.escape(e.name)
                }),
                i.extend(this._items[r.prototype.type], t)
            }, this)).fail(function() {
                i.delay(function() {
                    AMOCRM.notifications.show_message_error({
                        text: s.i18n("Lists are temporarily unavailable"),
                        timeout: 5e3
                    })
                }, 5e3)
            }).then(i.bind(function() {
                n.resolve(t.extend(!0, {}, this._items[r.prototype.type]))
            }, this)) : n.resolve(t.extend(!0, {}, o)),
            n.promise()
        },
        getActiveData: function(e) {
            var t, s, n, r = !0, a = 0;
            switch (e = i.sortBy(e, "sort").reverse(),
            i.each(e, function(e) {
                e.entity || a++
            }),
            a >= 10 && (r = !1),
            AMOCRM.data.current_entity) {
            case "catalogs":
                t = AMOCRM.data && AMOCRM.data.current_view && +AMOCRM.data.current_view.catalog.id,
                n = i.findWhere(e, {
                    id: t
                });
                break;
            case "contacts":
                t = o[AMOCRM.data.element_type],
                n = i.findWhere(e, {
                    entity: AMOCRM.data.element_type
                })
            }
            return AMOCRM.data.current_view && AMOCRM.data.current_view.catalog || "" != AMOCRM.data.element_type || "contacts" !== AMOCRM.data.current_entity || (s = !0),
            t && n && (n.selected = !0),
            {
                type: "catalogs",
                items: e,
                footer: r,
                list_view: s
            }
        }
    }),
    {
        catalogs: new r
    }
}),
define("lib/components/modals/action", ["require", "jquery", "underscore", "lib/core/view", "twig", "lib/components/base/modal", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/core/view")
      , n = e("twig")
      , o = e("lib/components/base/modal")
      , r = e("lib/common/fn");
    return s.extend({
        _url: function() {
            throw new Error("Must be overridden")
        },
        $el: null,
        _xhr: null,
        _destroy_from_modal: !1,
        _ajax_params: null,
        _callbacks: {
            afterDestroy: i.noop,
            destroy: i.noop,
            complete: i.noop,
            failed: i.noop
        },
        initialize: function(e) {
            s.prototype.initialize.call(this, arguments),
            this.setParams(e),
            this.initModal()
        },
        destroy: function() {
            this._destroy_from_modal || this.modal && i.isFunction(this.modal.destroy) && (this.modal.destroy(),
            delete this.modal),
            s.prototype.destroy.call(this, arguments),
            this._callbacks.afterDestroy.call(this, arguments)
        },
        initModal: function() {
            return this.modal = new o({
                class_name: "modal-list " + this._class("modal"),
                init: n._preload(i.result(this, "preload"), i.bind(this._initModal, this)),
                destroy: i.bind(function() {
                    return this._xhr && !i.isUndefined(this._xhr.status) && this._xhr.abort(),
                    this._callbacks.destroy.call(this) === !1 ? !1 : (this._destroy_from_modal = !0,
                    this.destroy(),
                    !0)
                }, this)
            }),
            this
        },
        _initModal: function(e) {
            this.setElement(e),
            this.render().center().preventClicks()
        },
        save: function(e) {
            var s;
            this._elem("save_btn").trigger("button:load:start"),
            this._xhr || (s = this.getDataForRequest(e),
            this._xhr = t.ajax(i.extend({
                url: i.result(this, "_url"),
                data: s,
                type: "POST",
                dataType: "json"
            }, this._ajax_params || {})).always(i.bind(this.actionComplete, this)))
        },
        actionComplete: function(e) {
            if (e = r.cleanResponse(e),
            this._elem("save_btn").trigger("button:load:stop"),
            !this.isValidResponse(e))
                throw this._xhr = null,
                this._callbacks.failed.call(this, e),
                this.destroy(),
                new Error("Invalid response: " + JSON.stringify(e));
            this._xhr = null,
            this._callbacks.complete.call(this, e),
            this.destroy()
        },
        setParams: function(e) {
            return e = e || {},
            i.each(this._callbacks, function(t, i) {
                this._callbacks[i] = this.wrapCallback(i, e[i])
            }, this),
            e.url && (this._url = e.url),
            this
        },
        wrapCallback: function(e, t) {
            return i.isFunction(t) || (t = i.noop),
            t
        },
        getDataForRequest: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        isValidResponse: function(e) {
            return !!e
        },
        _classes: function() {
            return {
                modal: "action_modal",
                save_btn: "modal-body__actions__save"
            }
        },
        center: function() {
            return this.$el.trigger("modal:centrify"),
            document.activeElement.blur(),
            this
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("save_btn") + ":not(.button-input-disabled)"] = "clickSaveBtn",
            e
        },
        preventClicks: function() {
            return this.modal.$modal.on("click", function(e) {
                e.stopPropagation()
            }),
            this
        },
        clickSaveBtn: function() {
            this.save()
        },
        _template: "/tmpl/common/modal/delete.twig",
        preload: function() {
            return [this._template]
        },
        render: function() {
            var e = n({
                ref: this._template
            });
            return this.$el.trigger("modal:loaded"),
            this.$el.html(e.render(this.getTemplateParams())),
            this
        },
        getTemplateParams: function() {
            return {
                caption: r.i18n("Caption text"),
                message: [{
                    text: r.i18n("This is forever! Seriously, think!")
                }],
                accept_text: r.i18n("Confirm")
            }
        }
    })
}),
define("lib/components/modals/delete", ["require", "lib/components/modals/action", "underscore"], function(e) {
    "use strict";
    var t = e("lib/components/modals/action")
      , i = e("underscore");
    return t.extend({
        _classes: function() {
            return i.extend(t.prototype._classes.apply(this, arguments), {
                modal: "confirm_catalog_delete"
            })
        },
        _template: "/tmpl/common/modal/delete.twig"
    })
}),
define("lib/interface/catalogs/catalogs/delete_modal", ["require", "lib/components/modals/delete", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/components/modals/delete")
      , i = e("lib/common/fn");
    return t.extend({
        _catalog_id: 0,
        _catalog_name: "",
        _url: "/ajax/v1/catalogs/set/",
        setParams: function(e) {
            var i = t.prototype.setParams.apply(this, arguments);
            if (this._catalog_id = e.catalog_id,
            this._catalog_name = e.catalog_name,
            !this._catalog_id)
                throw new Error("Catalog id not defined in params: " + JSON.stringify(e));
            return i
        },
        getDataForRequest: function() {
            return {
                request: {
                    catalogs: {
                        "delete": this._catalog_id
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.catalogs && e.catalogs["delete"]
        },
        getTemplateParams: function() {
            var e = AMOCRM.lang;
            return {
                lang: e,
                caption: i.i18n("Delete list"),
                message: [{
                    text: i.i18n("Are you sure you want to delete Ђ%sї?").replace("%s", this._catalog_name)
                }, {
                    text: i.i18n("All data associated with Ђ%sї, will be deleted. Removed data recovery is impossible.").replace("%s", this._catalog_name)
                }],
                accept_text: i.i18n("Confirm")
            }
        }
    })
}),
define("lib/interface/leads/delete_modal", ["require", "lib/components/modals/delete", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/components/modals/delete")
      , i = e("lib/common/fn");
    return t.extend({
        _pipeline_id: 0,
        _pipeline_name: "",
        _url: "/ajax/v1/pipelines/delete",
        setParams: function(e) {
            var i = t.prototype.setParams.apply(this, arguments);
            return this._pipeline_id = e.pipeline_id,
            this._pipeline_name = e.pipeline_name,
            i
        },
        getDataForRequest: function() {
            return {
                "request[id]": this._pipeline_id
            }
        },
        isValidResponse: function(e) {
            return e && e[this._pipeline_id]
        },
        getTemplateParams: function() {
            return {
                caption: i.i18n("Delete pipeline"),
                message: [{
                    text: i.i18n("Are you sure you want to delete Ђ%sї?").replace("%s", this._pipeline_name)
                }],
                accept_text: i.i18n("Confirm")
            }
        }
    })
}),
define("lib/interface/left_menu/hover_menu/aside_view", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/components/base/modal", "lib/components/base/form", "lib/interface/catalogs/catalogs/delete_modal", "lib/interface/leads/delete_modal", "lib/common/user_rights", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/components/base/modal"), a = e("lib/components/base/form"), l = {
        Catalogs: e("lib/interface/catalogs/catalogs/delete_modal"),
        Leads: e("lib/interface/leads/delete_modal")
    }, c = e("lib/common/user_rights"), d = e("lib/common/fn"), u = "hover_menu", h = {
        ENTER: 13,
        ESCAPE: 27
    }, _ = {
        SHOW: !0,
        HIDE: !1
    };
    return t = o.extend({
        _endpoints: {},
        _changes: {},
        _selectors: function() {
            return {
                aside_wrapper: "#aside__list-wrapper",
                aside_footer: ".aside__footer",
                list_holder: ".aside__common-settings",
                footer_add: ".js-aside__footer-add",
                list_item: ".aside__list-item",
                list_item_selected: ".aside__list-item_selected",
                list_item_by_id: '.aside__list-item[data-id="%s"]'
            }
        },
        _classes: function() {
            return {
                add_error_note: "aside__footer-add_error-note"
            }
        },
        events: {
            "click .js-aside__footer-add": "onAddClick",
            "click .js-aside__action-button": "onActionClick",
            "keydown .aside__list-item-input": "onItemKeydown",
            "input .aside__list-item-input": "onItemInput",
            "click .aside__top": "closeHoverMenu"
        },
        initialize: function(e) {
            return e = e || {},
            this.options = e,
            this.data_handler = e.handler,
            s.each(e.callbacks, function(e, t) {
                this[t] = s.isFunction(e) ? e : s.noop
            }, this),
            o.prototype.initialize.apply(this, arguments),
            this.listenTo(this.collection, "change", this.actionUpdate),
            this
        },
        render: function(e) {
            var t;
            return this._template_params = e || {},
            t = i(n({
                ref: "/tmpl/left_menu/aside.twig"
            }).render(s.extend(e, {
                user_rights: c.getRights(),
                entity: AMOCRM.data.current_entity,
                is_card: AMOCRM.data.is_card,
                from_list: AMOCRM.data.current_list && AMOCRM.data.current_list.length,
                from_top_click: e.from_top_nav_click
            }))),
            this.setElement(t),
            this.$el
        },
        destroy: function(e) {
            return !e && this.hasActiveStatus() ? (AMOCRM.router.confirmPageChange(this._confirmModalConfig, s.noop),
            !1) : (this._changes.has_changes && this.stopChangeTracking(),
            AMOCRM.router.removePreventConfig(u),
            void o.prototype.destroy.call(this))
        },
        stopChangeTracking: function() {
            this._setChanges({
                form: !1
            }),
            this._$document.off(this.ns),
            delete this._changes.item_id,
            delete this._changes.has_errors,
            this.form && (this.destroyForm(),
            delete this.form)
        },
        prepareView: function(e) {
            this._scrollIntoView(),
            this._checkListHasScroll(),
            s.isFunction(e) && e(),
            this.onPrepareView(),
            this.initPagePreventer()
        },
        onPrepareView: s.noop,
        getTemplate: function() {
            var e = "/tmpl/left_menu/hover_menu/" + this.data_handler.type + "/";
            return {
                in_edit: e + "item_in_edit.twig",
                item: e + "item.twig",
                footer: e + "footer_add.twig",
                footer_edit: e + "footer_in_edit.twig"
            }
        },
        initPagePreventer: function() {
            var e = this;
            this._confirmModalConfig = {
                message: d.i18n("You didn't save any changes."),
                accept_text: d.i18n("Save"),
                decline_text: d.i18n("Exit without save"),
                init: s.bind(this.elevateDownHoverMenu, this),
                accept: s.bind(function(e) {
                    var t = this._changes.item_id;
                    "new_item" !== this._changes.item_id ? (this.collection.get(t).set({
                        name: s.escape(this.form.model.get(t))
                    }, {
                        silent: !0
                    }),
                    this.actionUpdate(this.collection.get(t), e)) : this.actionAdd({
                        no_redirect: !0,
                        no_destroy: !0,
                        callback: e
                    })
                }, this),
                decline: s.bind(function(e) {
                    s.isFunction(e) && (AMOCRM.router.preventPageChange(!1, u),
                    e())
                }, this),
                destroy: function() {
                    this.declined = !0,
                    e.destroyForm(),
                    e.closeHoverMenu()
                }
            },
            s.isObject(AMOCRM.router) && AMOCRM.router.registerPreventConfig(this._confirmModalConfig, u)
        },
        _scrollIntoView: function() {
            var e, t, i, s, n = this._findElem("list_item_selected");
            n.length && !n.visible() && (e = this._elem("list_holder"),
            t = e[0].getBoundingClientRect(),
            i = n[0].getBoundingClientRect(),
            s = i.top - t.height - t.top + 2 * i.height,
            e.scrollTop(s))
        },
        _checkListHasScroll: function() {
            var e = this._elem("list_holder")
              , t = this._elem("aside_wrapper")
              , i = e.outerHeight()
              , s = t.outerHeight()
              , n = e.outerWidth()
              , o = t.outerWidth()
              , r = this._elem("aside_footer")
              , a = n - o
              , l = s > i ? a + "px" : 0;
            a && r.css("paddingRight", l)
        },
        hasActiveStatus: function() {
            return this._changes.has_changes
        },
        onActionClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("action");
            switch (e.stopPropagation(),
            s) {
            case "add":
                this.checkChangesAndAdd();
                break;
            case "save":
                this.checkChangesAndUpdate(e);
                break;
            case "edit":
                this.onAsideEditClick(e);
                break;
            case "remove":
                this.onDeleteClick(e)
            }
        },
        onAddClick: function(e) {
            var t = i(e.currentTarget);
            this._changes.item_id && this.rerenderInputs(),
            t.addClass("aside__footer-inner_in-edit").html(n({
                ref: this.getTemplate().footer_edit
            }).render()).find(".aside__list-item-input").focus(),
            this.initForm(t)
        },
        onAsideEditClick: function(e) {
            var t = i(e.currentTarget).closest(".aside__list-item")
              , s = +t.data("id")
              , o = this.collection.get(s).toJSON();
            this.revertInputs(),
            t.addClass("aside__list-item_in-edit").html(n({
                ref: this.getTemplate().in_edit
            }).render({
                item: o
            })).find(".aside__list-item-input").val(t.find(".aside__list-item-input").val()).focus(),
            this.initForm(t)
        },
        onDeleteClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(".aside__list-item_in-edit");
            this.actionDelete(this.collection.get(s.data("id")).toJSON())
        },
        onItemKeydown: function(e) {
            switch (e.stopPropagation(),
            e.keyCode) {
            case h.ENTER:
                "new_item" !== this._changes.item_id ? this.checkChangesAndUpdate(e) : this.checkChangesAndAdd();
                break;
            case h.ESCAPE:
                this.revertInputs()
            }
        },
        onItemInput: function(e) {
            var t = i(e.currentTarget)
              , s = !t.val().length;
            this.toggleInputError(s),
            this._changes.has_errors = s
        },
        onInputBlur: function(e) {
            var t = i(e.target);
            t.closest(".aside__common-settings__list_wrapper").length || t.closest(".aside__footer").length || t.closest("#nav_menu").length || t.closest(".nav__notifications").length || t.closest(".nav__top").length || this.revertInputs()
        },
        initForm: function(e) {
            this.form = this._addComponent(a.View, {
                el: e
            }),
            this._changes = {},
            this._changes.item_id = s.first(s.keys(this.form.model.toJSON())),
            this.form.model.on("has_changes", s.bind(this._setChanges, this, {
                form: !0
            })).on("has_reverted", s.bind(this._setChanges, this, {
                form: !1
            })),
            this._$document.on("click" + this.ns, "#left_menu", s.bind(this.onInputBlur, this))
        },
        destroyForm: function() {
            this._destroyComponent(this.form),
            this._setChanges({
                form: !1
            })
        },
        _setChanges: function(e) {
            var t = e.form;
            this._changes.has_changes = t,
            AMOCRM.router.preventPageChange(t, u)
        },
        checkChangesAndAdd: function() {
            this._changes.has_changes ? this.actionAdd() : this.toggleInputError(_.SHOW)
        },
        checkChangesAndUpdate: function(e) {
            var t = i(e.currentTarget).closest(".aside__list-item_in-edit")
              , n = +t.data("id")
              , o = this.collection.get(n);
            this._changes.has_errors || (this._changes.has_changes ? o.set({
                name: s.escape(this.form.model.get(this._changes.item_id))
            }) : this.rerenderInputs(n))
        },
        revertInputs: function() {
            this._changes.item_id && this.rerenderInputs()
        },
        rerenderInputs: function(e) {
            e = e || this._changes.item_id,
            "new_item" === e ? this._findElem("footer_add").html(n({
                ref: this.getTemplate().footer
            }).render({})).removeClass("aside__footer-inner_in-edit") : this._findElem("list_item_by_id", e).replaceWith(n({
                ref: this.getTemplate().item
            }).render(s.extend(this._template_params, {
                item: this.collection.get(e).toJSON(),
                user_rights: c.getRights()
            }))),
            this.stopChangeTracking()
        },
        toggleInputError: function(e) {
            var t = this._changes.item_id;
            "new_item" === t ? this._toggleClass("add_error_note", "footer_add", e) : this._findElem("list_item_by_id", t).toggleClass("aside__footer-add_error-note", e)
        },
        toggleActionLoader: function(e, t) {
            var i = t ? this._findElem("list_item_by_id", t) : this._findElem("footer_add");
            i.find(".aside__action-button_loader").toggleClass("aside__action-button_loading", e)
        },
        actionUpdate: function(e, t) {
            var n = e.get("id");
            if (!this.save_blocked) {
                if (this.save_blocked = !0,
                this.toggleActionLoader(_.SHOW, n),
                !this._endpoints.update)
                    throw new Error("No update endpoint specified!");
                return i.ajax({
                    url: this._endpoints.update,
                    type: "POST",
                    dataType: "json",
                    data: this.prepareUpdateData(e)
                }).always(s.bind(function() {
                    this.save_blocked = !1,
                    this.toggleActionLoader(_.HIDE, n)
                }, this)).done(s.bind(function(i) {
                    var o = e.toJSON();
                    this.isValidUpdateResponse(i, o) && (this.onUpdateSuccess(i, o),
                    delete o.selected,
                    this.updateHoverMenuListData(this.data_handler.type, o),
                    this.rerenderInputs(n),
                    s.isFunction(t) && t())
                }, this)).fail(s.bind(function(e) {
                    this.showErrorModal()
                }, this))
            }
        },
        prepareUpdateData: function() {
            throw new Error("Must be implemented by subclass!")
        },
        isValidUpdateResponse: function(e) {
            return !!e
        },
        onUpdateSuccess: function() {
            throw new Error("Must be implemented by subclass!")
        },
        actionAdd: function(e) {
            return e = e || {},
            this.save_blocked ? void 0 : (this.save_blocked = !0,
            this.toggleActionLoader(_.SHOW),
            i.ajax({
                url: this._endpoints.add,
                type: "POST",
                dataType: "json",
                data: this.prepareAddData(this.data_handler.default_data, this.form.model.get(this._changes.item_id))
            }).always(s.bind(function() {
                this.save_blocked = !1,
                this.toggleActionLoader(_.HIDE)
            }, this)).done(s.bind(function(t) {
                var i = this.onAddSuccess(t);
                s.isFunction(e.callback) && e.callback(),
                this.stopChangeTracking(),
                e.no_destroy || this.closeHoverMenu(),
                e.no_redirect || this.navigateTo(i)
            }, this)).fail(s.bind(function(e) {
                this.showErrorModal()
            }, this)))
        },
        prepareAddData: function(e, t) {
            throw new Error("Must be implemented by subclass!")
        },
        onAddSuccess: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        actionDelete: function(e) {
            var t = this.data_handler.type;
            this.elevateDownHoverMenu(),
            new (l[d.toTitleCase(t)])(s.extend(this._deleteModalParams(e) || {}, {
                url: this.url,
                complete: s.bind(function() {
                    this.closeHoverMenu(),
                    this.onDeleteSuccess(e),
                    this.fetchHoverMenuListData(t)
                }, this)
            }))
        },
        _deleteModalParams: function() {
            throw new Error("Must be implemented by subclass!")
        },
        onDeleteSuccess: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        showErrorModal: function(e) {
            return this.elevateDownHoverMenu(),
            new r({
                destroy: s.bind(function() {
                    this.elevateUpHoverMenu(),
                    s.isFunction(e) && e()
                }, this)
            }).showError(null, !1)
        }
    })
}),
define("lib/interface/left_menu/hover_menu/leads", ["require", "jquery", "underscore", "lib/common/fn", "lib/interface/left_menu/hover_menu/aside_view", "lib/components/base/confirm", "lib/components/leads/api"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/interface/left_menu/hover_menu/aside_view"), r = e("lib/components/base/confirm"), a = e("lib/components/leads/api");
    return t = o.extend({
        _endpoints: {
            update: "/ajax/v1/pipelines/set",
            add: "/ajax/v1/pipelines/set"
        },
        onPrepareView: function() {
            var e, t, s, n, o = this._template_params;
            "leads-dp" === o.entity && (e = i(".list__top__preset").outerWidth(),
            n = i(".digital-pipeline__lead-sources").outerWidth() + 65,
            o.from_top_click ? (t = i(".list__top__preset").offset().left - e,
            s = 0) : (t = parseFloat(this.$el.css("left")),
            s = this.$el.outerWidth() - e),
            this.$el.css({
                width: e,
                left: t + s
            }),
            i("#left-menu-overlay").css({
                left: n
            }))
        },
        prepareAddData: function(e, t) {
            return e.request.pipelines.add.new_pipe.name = t.length ? t : AMOCRM.lang.pipelines_statuses_new_pipeline,
            e
        },
        onAddSuccess: function(e) {
            var t = {
                id: "new_pipe",
                newPipeline: s.toArray(e.response.pipelines.add.pipelines)[0]
            };
            return this._$document.trigger("pipeline:saved", [t]),
            t
        },
        prepareUpdateData: function(e) {
            var t = e.get("id")
              , i = {
                request: {
                    pipelines: {
                        update: {}
                    }
                }
            };
            return i.request.pipelines.update[t] = {
                id: t,
                sort: e.get("sort"),
                name: n.unescapeHTML(e.get("name")),
                is_main: e.get("is_main") ? "on" : "",
                statuses: {}
            },
            s.each(e.get("statuses"), function(s) {
                s.deleted || (i.request.pipelines.update[t].statuses[s.id] = {
                    color: s.bg_color,
                    name: s.option,
                    sort: s.sort,
                    pipeline_id: e.get("id")
                })
            }),
            i
        },
        isValidUpdateResponse: function(e, t) {
            return n.has_keys(e, ["response", "pipelines", "update", t.id]) && e.response.pipelines.update[t.id] === !0
        },
        onUpdateSuccess: function(e, t) {
            this._$document.trigger("pipelines:name:changed", t)
        },
        actionDelete: function(e) {
            a.getLeadsCount(e.id).done(s.bind(function(t) {
                t.leads_by_pipe > 0 ? new r({
                    class_name: "modal-list",
                    accept_text: n.i18n("OK"),
                    text: n.i18n("Pipeline has leads"),
                    no_cancel: !0,
                    init: s.bind(this.elevateDownHoverMenu, this),
                    destroy: s.bind(function() {
                        this.rerenderInputs(e.id),
                        this.elevateUpHoverMenu()
                    }, this)
                }) : o.prototype.actionDelete.call(this, e)
            }, this))
        },
        onDeleteSuccess: function(e) {
            "leads-dp" === AMOCRM.data.current_entity && +AMOCRM.data.current_view.pipeline.id === +e.id && AMOCRM.router.navigate("/settings/pipeline/leads/", {
                trigger: !0,
                replace: !0
            })
        },
        _deleteModalParams: function(e) {
            return {
                pipeline_id: e.id,
                pipeline_name: e.name
            }
        },
        navigateTo: function(e) {
            var t, i = e.newPipeline && e.newPipeline.id || e.id, s = AMOCRM.data.current_entity, n = "/leads/";
            t = "leads-dp" === s ? "/settings/pipeline/leads/" : AMOCRM.data.is_card || "leads" !== s ? n + "pipeline/" : n + "list/pipeline/",
            AMOCRM.router.navigate(t + i, {
                trigger: !0,
                replace: !0
            })
        }
    })
}),
define("lib/interface/left_menu/hover_menu/catalogs", ["require", "underscore", "lib/common/fn", "lib/interface/left_menu/hover_menu/aside_view"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/common/fn"), n = e("lib/interface/left_menu/hover_menu/aside_view");
    return t = n.extend({
        _endpoints: {
            update: "/ajax/v1/catalogs/set",
            add: "/ajax/v1/catalogs/set"
        },
        prepareAddData: function(e, t) {
            return e.request.catalogs.add[0] = {
                name: t.length ? t : s.i18n("Products"),
                demo_data: !0
            },
            e
        },
        onAddSuccess: function(e) {
            var t = {
                id: e.response.catalogs.add.catalogs[0].name,
                newCatalog: i.toArray(e.response.catalogs.add.catalogs)[0]
            }
              , s = [];
            return s[t.newCatalog.id] = t.newCatalog.id,
            AMOCRM.extend(s, AMOCRM.constant("catalogs")),
            this.fetchHoverMenuListData(this.data_handler.type),
            t
        },
        prepareUpdateData: function(e) {
            var t = e.get("id")
              , i = s.unescapeHTML(e.get("name"))
              , n = {
                request: {
                    catalogs: {
                        update: {}
                    }
                }
            };
            return n.request.catalogs.update[t] = {
                id: t,
                name: i.length ? i : s.i18n("Products")
            },
            n
        },
        isValidUpdateResponse: function(e, t) {
            return s.has_keys(e, ["response", "catalogs", "update", "catalogs", t.id]) && !i.isEmpty(e.response.catalogs.update.catalogs[t.id])
        },
        onUpdateSuccess: function(e, t) {
            var i = e.response.catalogs.update.catalogs[t.id];
            this._$document.trigger("catalogs:name:changed", [i.id, i.name])
        },
        onDeleteSuccess: function(e) {
            delete AMOCRM.constant("catalogs")[e.id],
            "catalogs" === AMOCRM.data.current_entity && +AMOCRM.data.current_view.catalog.id === +e.id && AMOCRM.router.navigate("/catalogs/", {
                trigger: !0,
                replace: !0
            })
        },
        _deleteModalParams: function(e) {
            return {
                catalog_id: e.id,
                catalog_name: e.name
            }
        },
        navigateTo: function(e) {
            var t = e.newCatalog && e.newCatalog.id || e.id
              , i = "/catalogs/";
            AMOCRM.router.navigate(i + t, {
                trigger: !0,
                replace: !0
            })
        }
    })
}),
define("lib/interface/left_menu/hover_menu/index", ["require", "jquery", "underscore", "twig", "pubsub", "backbone", "lib/core/view", "lib/common/fn", "lib/interface/left_menu/hover_menu/data_handlers/leads", "lib/interface/left_menu/hover_menu/data_handlers/catalogs", "lib/interface/left_menu/hover_menu/leads", "lib/interface/left_menu/hover_menu/catalogs"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("pubsub"), r = e("backbone"), a = e("lib/core/view"), l = e("lib/common/fn"), c = {
        Leads: e("lib/interface/left_menu/hover_menu/data_handlers/leads"),
        Catalogs: e("lib/interface/left_menu/hover_menu/data_handlers/catalogs")
    }, d = {
        Leads: e("lib/interface/left_menu/hover_menu/leads"),
        Catalogs: e("lib/interface/left_menu/hover_menu/catalogs")
    }, u = {
        full_expand: 1e3,
        empty_list: 2500,
        quick_hover: 120,
        left_menu_hover: 250
    }, h = {
        FORCE: !0
    }, _ = {
        FORCE: !0
    };
    return t = a.extend({
        el: i(document),
        _data_handlers: {},
        _items: {},
        _hover_entities: [],
        hover_entity: null,
        hover_entity_change: null,
        aside_view: null,
        clicked_menu_opened: null,
        hover_menu_animated: null,
        stop_hover: null,
        options: null,
        destroy_blocked: null,
        mouseenter_tmid: null,
        mouseleave_tmid: null,
        expand_tmid: null,
        full_expand_tmid: null,
        _templates: ["/tmpl/left_menu/aside.twig", "/tmpl/left_menu/hover_menu/leads/index.twig", "/tmpl/left_menu/hover_menu/leads/item.twig", "/tmpl/left_menu/hover_menu/leads/item_in_edit.twig", "/tmpl/left_menu/hover_menu/leads/footer_add.twig", "/tmpl/left_menu/hover_menu/leads/footer_in_edit.twig", "/tmpl/left_menu/hover_menu/catalogs/index.twig", "/tmpl/left_menu/hover_menu/catalogs/item.twig", "/tmpl/left_menu/hover_menu/catalogs/item_in_edit.twig", "/tmpl/left_menu/hover_menu/catalogs/footer_add.twig", "/tmpl/left_menu/hover_menu/catalogs/footer_in_edit.twig"],
        _selectors: function() {
            return {
                left_menu: "#left_menu",
                hover_menu: "#aside-hover",
                inbox: "#notification-wrapper",
                overlay: "#left-menu-overlay"
            }
        },
        _classes: function() {
            return {
                nav_top: "nav__top",
                nav_top_wrapper: "nav__top__wrapper",
                inbox_hidden: "notification-wrapper__hidden",
                overlay_visible: "default-overlay-visible",
                hover_overlay: "hover-overlay",
                expanded: "expanded",
                elevated: "h-elevated",
                hidden: "h-hidden",
                aside_expanded: "aside-expanded",
                aside_visible: "aside-visible"
            }
        },
        _desktop_events: {
            "mouseenter .nav__menu__item": "onMenuItemHover",
            "mouseleave .nav__menu__item": "onMenuItemHover"
        },
        _touch_events: {
            "touchstart .nav__menu__item": "onMenuItemHover",
            "touchend .nav__menu__item": "onMenuItemHover"
        },
        events: function() {
            return AMOCRM.is_touch_device ? this._touch_events : this._desktop_events
        },
        initialize: function(e) {
            this.options = e || {},
            s.isFunction(e.isNotificationsExpanded) && (this.isNotificationsExpanded = e.isNotificationsExpanded),
            s.each(c, function(e) {
                s.extend(this._data_handlers || {}, e)
            }, this),
            this._hover_entities = s.map(this._data_handlers, function(e, t) {
                return t
            })
        },
        init: function() {
            return n._preload(this._templates)().then(s.bind(function() {
                a.prototype.initialize.call(this),
                s.each(this._data_handlers, function(e) {
                    s.isFunction(e.getRenderData) && (this._items[e] = {},
                    e.getRenderData.call(this))
                }, this),
                this._$document.on("pipeline:removed pipeline:saved", s.bind(function() {
                    this._getDataHandler("leads").getRenderData.call(this, !0)
                }, this)),
                o.subscribe("hover_menu:show", s.bind(function(e, t) {
                    this.expandHoverMenuOnClick(t)
                }, this))
            }, this))
        },
        onMenuItemHover: function(e) {
            var t, n, o, r = i(e.currentTarget), a = r.data("entity"), l = !1;
            if (!(!s.contains(this._hover_entities, a) || this._isSidebarExpanded() || this.clicked_menu_opened || this.stop_hover || this.aside_view && this.aside_view.hasActiveStatus()))
                switch (this._isHoverMenuExpanded() && this.hover_entity && a !== this.hover_entity ? (n = this._hasClass("aside_expanded", "hover_menu"),
                l = this._hasClass("overlay_visible", "overlay"),
                this.destroyHoverMenu(h.FORCE, l),
                this.hover_entity_change = n) : AMOCRM.is_touch_device && (o = !0),
                e.type) {
                case "mouseenter":
                case "touchstart":
                    clearTimeout(this.mouseenter_tmid),
                    clearTimeout(this.mouseleave_tmid),
                    t = this._getDataHandler(this.hover_entity = a),
                    this._isHoverMenuExpanded() || t.getRenderData.call(this).done(s.bind(function(e) {
                        var i = 1 === s.keys(e).length
                          , r = n || o && !i ? 0 : i ? u.empty_list : u.quick_hover
                          , a = function() {
                            this.renderHoverMenu(s.extend(t.getActiveData(e), {
                                keep_overlay: l,
                                prepend_render: i,
                                hover_entity_change: n,
                                force_render: n || i || AMOCRM.is_touch_device
                            }))
                        };
                        r && (a = s.wrap(a, s.bind(function(e) {
                            this.mouseenter_tmid = setTimeout(s.bind(function() {
                                e.call(this)
                            }, this), r)
                        }, this))),
                        a.call(this)
                    }, this));
                    break;
                case "mouseleave":
                case "touchend":
                    clearTimeout(this.mouseenter_tmid)
                }
        },
        expandHoverMenuOnClick: function(e) {
            var t;
            s.contains(this._hover_entities, e) && (t = this._getDataHandler(this.hover_entity = e),
            t.getRenderData.call(this).done(s.bind(function(e) {
                this.clicked_menu_opened = !0,
                this.renderHoverMenu(s.extend(t.getActiveData(e), {
                    force_render: !0,
                    from_top_nav_click: this.clicked_menu_opened
                }))
            }, this)))
        },
        checkTouchClick: function(e, t) {
            var n = i.Deferred()
              , o = this._getDataHandler(t);
            return s.contains(this._hover_entities, t) && o && !this._isSidebarExpanded() && s.isFunction(o.getRenderData) ? o.getRenderData.call(this).done(s.bind(function(e) {
                this._isHoverMenuExpanded() && this.destroy_blocked ? n.reject() : n.resolve()
            }, this)) : n.resolve(),
            n.promise()
        },
        bindHideEvents: function(e) {
            AMOCRM.is_touch_device ? (this.destroy_blocked = !0,
            s.delay(s.bind(function() {
                this.destroy_blocked = !1
            }, this), e ? 1e3 : 300)) : (this._$document.on("mouseleave" + this.ns, '.nav__menu__item[data-entity="' + this.hover_entity + '"]', s.bind(this.onHoverMenuMouseleave, this)).on("mouseleave" + this.ns, "#aside-hover", s.bind(this.onHoverMenuMouseleave, this)).on("mouseenter" + this.ns, "#aside-hover", s.bind(function() {
                clearTimeout(this.mouseleave_tmid)
            }, this)),
            this.clicked_menu_opened || this._$document.on("mouseenter" + this.ns, "#aside-hover", s.bind(function() {
                this.expand_tmid = setTimeout(s.bind(this.expandHoverMenu, this), u.quick_hover)
            }, this))),
            this._$document.on("click" + this.ns, "#aside-hover .aside__list-item-link", s.bind(this.destroyHoverMenu, this)).on("click" + this.ns, ".nav__menu__item", s.bind(function() {
                this.aside_view.hasActiveStatus() || this.closeHoverMenu()
            }, this)).on("click" + this.ns, "#left-menu-overlay", s.bind(this.onOverlayClick, this)).on("click" + this.ns, ".digital-pipeline__lead-sources", s.bind(this.onOverlayClick, this))
        },
        onOverlayClick: function(e) {
            e.stopPropagation(),
            this.destroyHoverMenu(this.clicked_menu_opened && !this.aside_view.hasActiveStatus())
        },
        onHoverMenuMouseleave: function(e) {
            var t = i(e.relatedTarget)
              , n = t.data("entity")
              , o = t.closest(".nav__menu__item")
              , r = o.length ? o.data("entity") : "";
            if (this.aside_view.hasActiveStatus() || this.clicked_menu_opened)
                return !1;
            if (clearTimeout(this.expand_tmid),
            s.contains(this._hover_entities, n || r))
                return !1;
            if (t.closest("#nav_menu").length)
                this.mouseleave_tmid = setTimeout(s.bind(function() {
                    this.destroyHoverMenu()
                }, this), u.left_menu_hover);
            else {
                if (t.hasClass("modal-overlay"))
                    return !1;
                t.closest("#aside-hover").length || this.destroyHoverMenu()
            }
        },
        renderHoverMenu: function(e) {
            var t;
            e = e || {},
            t = s.bind(function() {
                this.aside_view.prepareView(s.bind(function() {
                    this.bindHideEvents(e.prepend_render && !e.hover_entity_change)
                }, this))
            }, this),
            this.aside_view = new (d[l.toTitleCase(this.hover_entity)])({
                handler: this._getDataHandler(),
                collection: new r.Collection(s.toArray(e.items)),
                callbacks: {
                    elevateDownHoverMenu: s.bind(this.elevateDownHoverMenu, this),
                    elevateUpHoverMenu: s.bind(this.elevateUpHoverMenu, this),
                    closeHoverMenu: s.bind(this.closeHoverMenu, this),
                    fetchHoverMenuListData: s.bind(this.fetchHoverMenuListData, this),
                    updateHoverMenuListData: s.bind(this.updateHoverMenuListData, this)
                }
            }),
            this._dropElemCache("hover_menu"),
            this.elevateUpHoverMenu().append(this.aside_view.render(e)),
            e.force_render ? this.expandHoverMenu(s.extend(e, {
                callback: t
            })) : s.delay(s.bind(function() {
                this.hover_menu_animated = !0,
                this.aside_view.$el.addClass("aside-visible").on(AMOCRM.transition_event, s.bind(function() {
                    this.hover_menu_animated = !1
                }, this)),
                t(),
                this.full_expand_tmid = setTimeout(s.bind(this.expandHoverMenu, this), u.full_expand)
            }, this), 10)
        },
        expandHoverMenu: function(e) {
            e = e || {},
            clearTimeout(this.full_expand_tmid),
            clearTimeout(this.expand_tmid),
            this._hasClass("aside_expanded", "hover_menu") || (s.isFunction(e.callback) && e.callback(),
            this._elem("hover_menu").addClass("aside-expanded" + (e.force_render ? " h-no-transition" : "")),
            e.keep_overlay || this._toggleOverlay({
                toggle: !0
            }))
        },
        destroyHoverMenu: function(e, t) {
            var i = s.bind(function() {
                this.hover_menu_animated = !1,
                this._elem("hover_menu").remove(),
                this._dropElemCache("hover_menu")
            }, this);
            this.destroy_blocked || (e = e || AMOCRM.is_touch_device,
            this.aside_view.destroy(e) !== !1 && (clearTimeout(this.full_expand_tmid),
            e || this.hover_menu_animated ? i() : (this._elem("hover_menu").removeClass("aside-visible aside-expanded h-no-transition"),
            this.hover_menu_animated = !0,
            this._elem("hover_menu").on(AMOCRM.transition_event, i)),
            this.hover_entity = null,
            this.clicked_menu_opened = !1,
            this.hover_entity_change = !1,
            this.elevateDownHoverMenu(),
            t || this._toggleOverlay({
                toggle: !1
            }),
            this._$document.off(this.ns)))
        },
        _getDataHandler: function(e) {
            return this._data_handlers[e || this.hover_entity]
        },
        _isSidebarExpanded: function() {
            return this._hasClass("expanded", "nav_top") || this._hasClass("expanded", "nav_top_wrapper") || !this._hasClass("inbox_hidden", "inbox") || this.isNotificationsExpanded()
        },
        _isHoverMenuExpanded: function() {
            return this._elem("hover_menu") && (this._hasClass("aside_expanded", "hover_menu") || this._hasClass("aside_visible", "hover_menu"))
        },
        _toggleElevation: function(e) {
            return e = e || {},
            this._toggleClass("elevated", "left_menu", e.toggle),
            this._elem("left_menu")
        },
        _toggleOverlay: function(e) {
            return e = e || {},
            s.isBoolean(e.toggle) && (e.toggle ? this._$document.trigger("overlay:fix") : this._hasClass("overlay_visible", "overlay") && this._$document.trigger("overlay:unfix")),
            this._toggleClass("overlay_visible", "overlay", e.toggle),
            this._toggleClass("hover_overlay", "overlay", e.toggle),
            this._elem("overlay")
        },
        isHoverMenuVisible: function() {
            return this._isHoverMenuExpanded()
        },
        elevateDownHoverMenu: function() {
            return this._toggleElevation({
                toggle: !1
            })
        },
        elevateUpHoverMenu: function() {
            return this._toggleElevation({
                toggle: !0
            })
        },
        closeHoverMenu: function() {
            this.destroyHoverMenu(h.FORCE)
        },
        prependHoverMenu: function(e) {
            this.stop_hover = !e
        },
        fetchHoverMenuListData: function(e) {
            this._getDataHandler(e).getRenderData.call(this, _.FORCE)
        },
        updateHoverMenuListData: function(e, t) {
            this._items[e][t.id] = t
        }
    })
}),
define("lib/interface/left_menu/index", ["require", "jquery", "underscore", "clipboard", "lib/core/view", "lib/interface/support", "lib/interface/left_menu/hover_menu/index", "lib/interface/amojo/bots"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("clipboard"), o = e("lib/core/view"), r = e("lib/interface/support"), a = e("lib/interface/left_menu/hover_menu/index"), l = e("lib/interface/amojo/bots"), c = {
        SHOW: !0,
        HIDE: !1
    };
    return new (t = o.extend({
        el: i(document),
        entities: {
            leads: "leads",
            catalogs: "catalogs",
            companies: "contacts",
            events: "stats",
            statsCalls: "stats",
            "todo-line": "todo",
            authlog: "settings",
            widgetsSettings: "settings",
            dev: "settings",
            mail: "mail"
        },
        _matching_entities: {
            leads: ["leads"],
            catalogs: ["companies", "contacts"],
            settings: ["authlog", "dev", "widgetsSettings"],
            stats: ["statsCalls", "events"],
            mail: ["mail"]
        },
        _classes: function() {
            return {
                nav_top: "nav__top",
                nav_top_wrapper: "nav__top__wrapper",
                item: "nav__menu__item",
                item_selected: "nav__menu__item-selected",
                copy: "js-copy-account-id"
            }
        },
        _selectors: function() {
            return {
                left_menu: "#left_menu",
                loader: "#page_change_progress",
                nav_menu_up: "#nav_menu_up",
                nav_menu_down: "#nav_menu_down",
                nav_menu: "#nav_menu",
                nav_menu_wrapper: ".nav__menu-wrapper",
                nav_item_by_entity: '.nav__menu__item[data-entity="%s"]',
                overlay: "#left-menu-overlay:not(.hover-overlay)"
            }
        },
        initialize: function() {
            o.prototype.initialize.apply(this, arguments),
            this.hover_menu = new a({
                isNotificationsExpanded: s.bind(this.isNotificationsExpanded, this)
            }),
            this.hover_menu.init().then(s.bind(function() {
                o.prototype.initialize.call(this),
                this.initEvents(),
                AMOCRM.is_touch_device || (this.onMenuScrollInit(),
                this._$window.on("resize", s.bind(s.debounce(this.onMenuScrollInit, 200), this)))
            }, this)),
            this._addComponent(n, ".js-copy-account-id").on("success", s.bind(function() {
                this._elem("copy").addClass("js-copied"),
                s.delay(s.bind(function() {
                    this._elem("copy").removeClass("js-copied")
                }, this), 800)
            }, this)).on("error", s.bind(function() {
                this._elem("copy").addClass("animated shake"),
                s.delay(s.bind(function() {
                    this._elem("copy").removeClass("animated shake")
                }, this), 200)
            }, this))
        },
        _common_events: {
            "menu:loader:change": "onLoaderChange",
            "page:change:start": "onPageChangeStart",
            "page:change:stop": "onPageChangeStop",
            "page:entity_changed": "onEntityChanged",
            "menu:icon:restore": "onEntityChanged",
            "click .js-support": "onSupportClick",
            "click .js-manage-profile": "onManageProfileClick",
            "click .js-account-id": "onAccountIdClick",
            "click .js-logout": "onLogoutClick",
            "click .nav__top": "onNavTopClick",
            "click .user-select-overlay": "onNavTopClick",
            "click .account_selection": "onAccountSelectionClick",
            "click .nav__menu__item": "onMenuClick"
        },
        _touch_events: {
            "scroll .nav__menu-wrapper": "onTouchScroll"
        },
        _desktop_events: {
            "menu:scroll .nav__menu-wrapper": "onMenuScroll",
            "menu:scroll:revert ": "onMenuScrollRevert",
            "mouseleave #left_menu": "onMouseLeave",
            "mouseenter #nav_menu_down": "onMouseEnter",
            "mouseenter #nav_menu_up": "onMouseEnter"
        },
        initEvents: function() {
            var e = AMOCRM.is_touch_device ? this._touch_events : this._desktop_events;
            this.events = s.extend(this._common_events, e),
            this.delegateEvents()
        },
        getItem: function(e) {
            return this._elem("nav_item_by_entity", e)
        },
        updateItemCounter: function(e, t) {
            var i = this.getItem(e);
            return i.length ? (0 >= t ? i.find(".js-notifications_counter").hide() : i.find(".js-notifications_counter").html(t).show(),
            this) : this
        },
        onAccountSelectionClick: function(e) {
            this._elem("nav_top").removeClass("expanded"),
            i(e.currentTarget).hide().removeClass("account_selection"),
            this._elem("nav_top_wrapper").removeClass("expanded")
        },
        onNavTopClick: function(e) {
            var t;
            return this.isNotificationsExpanded() ? !1 : (this.hover_menu && this.hover_menu.isHoverMenuVisible() && this.closeHoverMenu(),
            this.toggleSubmenus(),
            t = this._elem("nav_top").hasClass("expanded"),
            this.toggleOverlay().toggleClass("user-select-overlay", t),
            void (t ? this._$document.trigger("overlay:fix") : this._$document.trigger("overlay:unfix")))
        },
        onLogoutClick: function(e) {
            window.location.href = i(e.currentTarget).find("a").attr("href")
        },
        onAccountIdClick: function(e) {
            e.stopPropagation()
        },
        onManageProfileClick: function(e) {
            return e.stopPropagation(),
            AMOCRM.router.navigate("/settings/profile/", {
                trigger: !0
            }),
            this.toggleSubmenus(!1),
            this.toggleOverlay(!1),
            !1
        },
        onSupportClick: function(e) {
            e.preventDefault(),
            this.toggleSubmenus(!1),
            this.toggleOverlay(!1);
            var t = s.filter(l.get(), function(e) {
                return "customers" !== AMOCRM.constant("account").subdomain && "amo.support" === e.code
            })[0];
            t ? AMOCRM.inbox.openDirectChat(t.id) : this.support_modal || (this.support_modal = new r({
                callbacks: {
                    onDestroy: s.bind(function() {
                        this.support_modal = null
                    }, this)
                }
            }))
        },
        isNotificationsExpanded: function() {
            return this.$notifications || (this.$notifications = i("#sidebar-notifications")),
            this.$notifications.hasClass("aside-expanded")
        },
        toggleSubmenus: function(e) {
            this._elem("nav_top").toggleClass("expanded", e),
            this._elem("nav_top_wrapper").toggleClass("expanded", e),
            this._elem("left_menu").toggleClass("h-elevated", e)
        },
        toggleOverlay: function(e) {
            return s.isBoolean(e) && (e ? this._$document.trigger("overlay:fix") : this._findElem("overlay").hasClass("default-overlay-visible") && this._$document.trigger("overlay:unfix")),
            this._findElem("overlay").removeClass("user-select-overlay").toggleClass("default-overlay-visible", e),
            this._elem("overlay")
        },
        onPageChangeStart: function() {
            !i("html").hasClass("no-loading") && this._elem("loader").closest(this._selector("item")).hasClass(this._class("item_selected")) && this._elem("loader").removeClass("stopped")
        },
        onPageChangeStop: function() {
            this._elem("loader").addClass("stopped")
        },
        onLoaderChange: function() {
            var e = this._elem("loader").show()
              , t = AMOCRM.getBaseEntity();
            this.entities[t] && (t = this.entities[t]),
            this._elem("nav_item_by_entity", t).find(".nav__menu__item__icon").append(e)
        },
        onTouchScroll: function(e) {
            var t = i(e.currentTarget).scrollTop() > 0;
            this._elem("nav_menu_up").toggleClass("nav__menu-scroller-showed", t),
            this._elem("nav_menu_down").toggleClass("nav__menu-scroller-showed", !t)
        },
        onMouseEnter: function(e) {
            var t, s = i(e.currentTarget), n = this._elem("nav_menu_wrapper"), o = this._elem("nav_menu").outerHeight(!0), r = n.height();
            t = "nav_menu_down" === s.attr("id") ? o - r : 0,
            o > r && (n.trigger("menu:scroll", [t]),
            e.stopPropagation())
        },
        onMouseLeave: function() {
            this._$document.trigger("menu:scroll:revert")
        },
        onMenuScrollRevert: function() {
            var e, t = this._elem("nav_menu"), n = this._elem("nav_menu_wrapper"), o = t.children(".nav__menu__item-selected");
            AMOCRM.is_touch_device || s.delay(function() {
                i("#sidebar").hasClass("aside-expanded") || (e = t.outerHeight(!0) - n.height(),
                70 * (o.index() + 1) + 95 < n.height() && (e = 0),
                n.trigger("menu:scroll", [e]))
            }, 150)
        },
        onMenuScrollInit: function() {
            var e = this._elem("nav_menu").outerHeight(!0) > this._elem("nav_menu").parent().height();
            this._elem("nav_menu_up").removeClass("nav__menu-scroller-showed"),
            this._elem("nav_menu_down").toggleClass("nav__menu-scroller-showed", e),
            e && this._$document.trigger("menu:scroll:revert")
        },
        onMenuScroll: function(e, t) {
            var s = i(e.currentTarget)
              , n = t > 0;
            s.animate({
                scrollTop: t
            }, 100),
            s.children(".nav__menu").outerHeight(!0) > s.height() && (this._elem("nav_menu_up").toggleClass("nav__menu-scroller-showed", n),
            this._elem("nav_menu_down").toggleClass("nav__menu-scroller-showed", !n))
        },
        onMenuClick: function(e) {
            var t = i(e.currentTarget)
              , n = t.data("entity");
            e.stopPropagation(),
            e.preventDefault(),
            AMOCRM.is_touch_device ? this.hover_menu.checkTouchClick(e, n).done(s.bind(function() {
                this._onMenuClick(t)
            }, this)) : this._onMenuClick(t)
        },
        _onMenuClick: function(e) {
            this.toggleSubmenus(!1),
            this.toggleOverlay(!1),
            e.hasClass("nav__menu__item-selected") || this._$document.trigger("page:change:start"),
            this._elem("left_menu").find(".nav__menu__item").removeClass("nav__menu__item-selected"),
            e.addClass("nav__menu__item-selected"),
            AMOCRM.router.navigate(e.children("a").attr("href"), {
                trigger: !0
            })
        },
        onEntityChanged: function(e, t) {
            var n = AMOCRM.getBaseEntity()
              , o = this._matching_entities;
            this._elem("left_menu").find(".nav__menu__item").each(function() {
                var e = i(this)
                  , t = e.attr("data-entity");
                e.hasClass("nav__menu__item-selected") && t !== n && e.removeClass("nav__menu__item-selected"),
                !e.hasClass("nav__menu__item-selected") && (t === n || o.hasOwnProperty(t) && s.contains(o[t], n)) && e.addClass("nav__menu__item-selected")
            }),
            this._$document.trigger("menu:loader:change")
        },
        stopHoverMenu: function() {
            this.hover_menu && this.hover_menu.prependHoverMenu(c.HIDE)
        },
        startHoverMenu: function() {
            this.hover_menu && this.hover_menu.prependHoverMenu(c.SHOW)
        },
        isHoverMenuVisible: function() {
            return this.hover_menu ? this.hover_menu.isHoverMenuVisible() : void 0
        },
        closeHoverMenu: function() {
            return this.hover_menu ? this.hover_menu.closeHoverMenu() : void 0
        }
    }))
}),
define("lib/components/base/inbox/inbox", ["require", "underscore", "jquery", "lib/components/base/inbox/base", "lib/interface/left_menu/index", "lib/components/base/inbox/constants"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("lib/components/base/inbox/base"), o = e("lib/interface/left_menu/index");
    e("lib/components/base/inbox/constants");
    return t = n.extend({
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this._overlay_ns = ".inbox_overlay",
            this._$document.on("click" + this.ns, this._selector("inbox_toggle_button"), i.bind(this.toggle, this)).on("click" + this.ns, this._selector("navigation"), i.bind(function(e) {
                e.ctrlKey || e.metaKey || this.hide()
            }, this))
        },
        refreshCounter: function(e) {
            var t = s(".inbox-counter");
            parseInt(e) > 0 ? t.text(e).show() : t.text(0).hide()
        },
        requestPushPermission: function() {
            AMOCRM.constant("show_MainTour") || n.prototype.requestPushPermission.apply(this, arguments)
        },
        showNotification: function() {
            return this.isActive() ? void 0 : n.prototype.showNotification.apply(this, arguments)
        },
        toggle: function() {
            this.isActive() ? this.hide() : this.show()
        },
        show: function() {
            var e = s.Deferred();
            return this.isActive() ? (AMOCRM.is_touch_device && this._fixBodyPosition(),
            e.resolve()) : (o.isHoverMenuVisible() && o.closeHoverMenu(),
            this._toggleClass("active", "inbox", !0),
            this._toggleClass("hidden_inbox", this.$el, !1),
            this._toggleClass("hide_animation", "inbox", !1),
            this._toggleClass("show_animation", "inbox", !0),
            this.$el.show(),
            this.showOverlay(),
            this.notifications.trigger("inbox:show"),
            this.apply().then(i.bind(function() {
                AMOCRM.is_touch_device && this._fixBodyPosition()
            }, this)).then(i.bind(function() {
                this.notifications.sort(),
                e.resolve()
            }, this))),
            e.promise()
        },
        hide: function() {
            this.closeDirectChat().then(i.bind(function() {
                this._$document.off(this._overlay_ns),
                this.search.resetSearch(),
                this.scrollToTop(!0),
                this.notifications.trigger("inbox:hide"),
                this._toggleClass("active", "inbox", !1),
                this._toggleClass("hidden_inbox", this.$el, !0),
                this.$el.hide(),
                this._toggleClass("hide_animation", "inbox", !0),
                this._toggleClass("show_animation", "inbox", !1),
                this.hideOverlay(),
                AMOCRM.is_touch_device && this._releaseBodyPosition()
            }, this))
        },
        showOverlay: function() {
            this._$body.append(this.$overlay = s('<div class="default-overlay notifications-overlay" id="notification_overlay"></div>')),
            this.$overlay.trigger("overlay:show"),
            this._$document.one("click" + this._overlay_ns, "#notification_overlay", i.bind(this.hide, this)).one("page:changed" + this._overlay_ns, i.bind(this.hide, this))
        },
        hideOverlay: function() {
            this.$overlay && this.$overlay.length && this.$overlay.trigger("overlay:hide")
        },
        _fixBodyPosition: function() {
            s("body").css({
                position: "fixed"
            })
        },
        _releaseBodyPosition: function() {
            s("body").css({
                position: ""
            })
        },
        openChat: function(e) {
            var t = e.entity.id;
            return this._isChatAlreadyOpened(t) ? s.Deferred().resolve() : this.show().then(i.bind(function() {
                setTimeout(i.bind(function() {
                    n.prototype.openChat.apply(this, [e])
                }, this), 100)
            }, this))
        }
    })
}),
define("lib/common/browserdetect", ["require", "jquery"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = {
        init: function() {
            return this.browser = this.searchString(this.dataBrowser) || "unknown_browser",
            this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "",
            this.OS = this.searchString(this.dataOS) || "unknown_os",
            this
        },
        searchString: function(e) {
            var t, i, s;
            for (t = 0; t < e.length; t++)
                if (i = e[t].string,
                s = e[t].prop,
                this.versionSearchString = e[t].versionSearch || e[t].identity,
                i) {
                    if (-1 !== i.indexOf(e[t].subString))
                        return e[t].identity
                } else if (s)
                    return e[t].identity
        },
        searchVersion: function(e) {
            var t = e.indexOf(this.versionSearchString);
            if (-1 !== t)
                return parseFloat(e.substring(t + this.versionSearchString.length + 1))
        },
        dataBrowser: [{
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        }, {
            string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        }, {
            string: navigator.vendor,
            subString: "Apple",
            identity: "Safari",
            versionSearch: "Version"
        }, {
            prop: window.opera,
            identity: "Opera",
            versionSearch: "Version"
        }, {
            string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        }, {
            string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        }, {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        }, {
            string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        }, {
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        }, {
            string: navigator.userAgent,
            subString: "Trident/7.0",
            identity: "Explorer",
            versionSearch: "MSIE"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        }, {
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }],
        dataOS: [{
            string: navigator.platform,
            subString: "Win",
            identity: "Windows"
        }, {
            string: navigator.platform,
            subString: "Mac",
            identity: "Mac"
        }, {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod"
        }, {
            string: navigator.platform,
            subString: "Linux",
            identity: "Linux"
        }]
    }.init();
    return t(function() {
        t("html").addClass(i.browser.toString().toLowerCase() + " " + i.OS.toString().toLowerCase())
    }),
    i
}),
define("lib/common/windowWidthController", ["require", "jquery", "enquire"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("enquire");
    t(function() {
        AMOCRM.notSmall = t(window).width() > 1230
    }),
    i.register("screen and (max-width: 1230px)", {
        match: function() {
            AMOCRM.notSmall = !1,
            t("#page_holder").trigger("page:medium:minimized"),
            t(document).trigger("closeWidgetPanel").trigger("widgets:card-minimized")
        },
        unmatch: function() {
            AMOCRM.notSmall = !0,
            t("#page_holder").trigger("page:medium:maximized"),
            t(document).trigger("widgets:card-maximized")
        }
    }),
    i.register("screen and (min-width: 1500px)", {
        match: function() {
            AMOCRM.is_more_1500 = !0,
            t(document).trigger("openWidgetPanel")
        },
        unmatch: function() {
            AMOCRM.is_more_1500 = !1
        }
    }),
    i.register("screen and (max-device-width: 640px)", {
        match: function() {
            AMOCRM.is_phone = !0,
            t('meta[name="viewport"]').attr("content", "")
        }
    }),
    i.register("screen and (max-width: 1100px)", {
        match: function() {
            AMOCRM.minimizeDashboard = !0,
            t(document).trigger("minimizeDashboard")
        },
        unmatch: function() {
            AMOCRM.minimizeDashboard = !1,
            t(document).trigger("maximizeDashboard")
        }
    })
}),
function(e) {
    define("lib/vendor/plugins/jquery.swipe", ["jquery"], function() {
        return function() {
            !function(e) {
                e.event.special.swipe = {
                    setup: function() {
                        e(this).on("touchstart", e.event.special.swipe.handler)
                    },
                    teardown: function() {
                        e(this).off("touchstart", e.event.special.swipe.handler)
                    },
                    handler: function(t) {
                        function i() {
                            d.removeEventListener("touchmove", s),
                            d.removeEventListener("touchend", i),
                            n = o = null
                        }
                        function s(s) {
                            var a = n - s.touches[0].pageX
                              , u = o - s.touches[0].pageY
                              , h = Math.abs(a) >= 20
                              , _ = Math.abs(u) >= 20;
                            return (h || _) && (i(),
                            l = h ? a > 0 ? -1 : 1 : 0,
                            c = _ ? u > 0 ? 1 : -1 : 0),
                            0 !== l && e(d).hasClass("js-swipe-prevent-x") && s.preventDefault(),
                            t.type = "swipe",
                            r.unshift(t, l, c, s.touches.length),
                            (e.event.dispatch || e.event.handle).apply(d, r)
                        }
                        var n, o, r = [].slice.call(arguments, 1), a = t.originalEvent.touches, l = 0, c = 0, d = this;
                        t = e.event.fix(t),
                        1 == a.length && (n = a[0].pageX,
                        o = a[0].pageY,
                        this.addEventListener("touchmove", s, !1),
                        this.addEventListener("touchend", i, !1))
                    }
                }
            }(window.jQuery || window.Zepto)
        }
        .apply(e, arguments)
    })
}(this),
function(e) {
    function t(e) {
        return o[e] ? o[e].startTime : i.timing && i.timing[e] ? i.timing[e] : s
    }
    var i = e.performance || {}
      , s = Date.now ? Date.now() : +new Date
      , n = []
      , o = {}
      , r = function(e, t) {
        for (var i = 0, s = n.length, o = []; s > i; i++)
            n[i][e] == t && o.push(n[i]);
        return o
    }
      , a = function(e, t) {
        for (var i, s = n.length; s--; )
            i = n[s],
            i.entryType != e || void 0 !== t && i.name != t || n.splice(s, 1)
    };
    i.now || (i.now = i.webkitNow || i.mozNow || i.msNow || function() {
        return (Date.now ? Date.now() : +new Date) - s
    }
    ),
    i.mark || (i.mark = i.webkitMark || function(e) {
        var t = {
            name: e,
            entryType: "mark",
            startTime: i.now(),
            duration: 0
        };
        n.push(t),
        o[e] = t
    }
    ),
    i.measure || (i.measure = i.webkitMeasure || function(e, s, o) {
        i.timing && i.timing[s] && (o = !0),
        s = t(s),
        o = o ? t(o) : i.now(),
        n.push({
            name: e,
            entryType: "measure",
            startTime: s,
            duration: o - s
        })
    }
    ),
    i.getEntriesByType || (i.getEntriesByType = i.webkitGetEntriesByType || function(e) {
        return r("entryType", e)
    }
    ),
    i.getEntriesByName || (i.getEntriesByName = i.webkitGetEntriesByName || function(e) {
        return r("name", e)
    }
    ),
    i.clearMarks || (i.clearMarks = i.webkitClearMarks || function(e) {
        a("mark", e)
    }
    ),
    i.clearMeasures || (i.clearMeasures = i.webkitClearMeasures || function(e) {
        a("measure", e)
    }
    ),
    e.performance = i,
    "function" == typeof define && (define.amd || define.ajs) && define("performance", [], function() {
        return i
    })
}(window),
define("lib/dev/meter/polyfill", function() {}),
define("lib/dev/meter/meter", ["require", "lib/dev/meter/polyfill", "underscore", "lib/dev/logger"], function(e) {
    e("lib/dev/meter/polyfill");
    var t, i, s, n = e("underscore"), o = e("lib/dev/logger"), r = {
        DOM_LOADED: "DL",
        TEMPLATE_RENDERED: "TR",
        PAGE_CHANGED: "PC",
        NOTES_RENDERED: "NR"
    }, a = !1;
    return s = function(e, t) {
        var i = t.duration && t.duration.toFixed(2) || -1;
        o("amoCRM JSPerf:", e, "=", i),
        !t || a || "dev" == AMOCRM.environment || 0 > i || $.ajax({
            url: "https://jsperf.amocrm.com/metric/add",
            data: {
                type: e,
                aid: (AMOCRM.constant("account") || {}).id,
                time: i,
                server: AMOCRM.constant("server")
            },
            type: "GET",
            dataType: "json"
        }).done(function(e) {
            e.ok || "domain is not allowed" != e.reason || (a = !0)
        }).fail(function() {
            a = !0
        })
    }
    ,
    t = function() {
        var e;
        return this._performance = window.performance || window.webkitPerformance || window.msPerformance || window.mozPerformance,
        void 0 === this._performance ? this : (this._mark = null,
        e = performance.timing,
        e && (this.api = {
            domTime: e.domComplete - e.requestStart,
            loadTime: e.loadEventEnd - e.fetchStart,
            domReadyTime: e.domComplete - e.domInteractive,
            readyStart: e.fetchStart - e.navigationStart,
            redirectTime: e.redirectEnd - e.redirectStart,
            lookupDomainTime: e.domainLookupEnd - e.domainLookupStart,
            requestTime: e.responseEnd - e.requestStart,
            initDomTreeTime: e.domInteractive - e.responseEnd,
            loadEventTime: e.loadEventEnd - e.loadEventStart
        }),
        this)
    }
    ,
    t.prototype.mrk = function(e) {
        return this._performance ? (this._mark = e || "mark_" + n.uniqueId(),
        e || this._performance.mark(this._mark),
        this) : this
    }
    ,
    t.prototype.msr = function(e, t) {
        var e = r[e];
        return t = t || this._mark,
        this._performance ? (e && (this._performance.measure(e, t),
        s(e, (this._performance.getEntriesByName(e) || [])[0])),
        this._performance.clearMarks(t),
        this._performance.clearMeasures(),
        this._mark = null,
        this) : this
    }
    ,
    i = new t
}),
define("lib/components/base/scroll_saver", ["require", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/common/fn"), n = {};
    return t = function() {}
    ,
    i.extend(t.prototype, {
        _matching_entities: {
            contacts: ["companies"]
        },
        _positionId: function() {
            return s.getMatchingEntity() + AMOCRM.data.is_card
        },
        savePosition: function() {
            n[this._positionId()] = $(window).scrollTop()
        },
        getPosition: function() {
            return n[this._positionId()] || 0
        },
        restorePosition: function() {
            $(window).scrollTop(this.getPosition()),
            this.clearPosition()
        },
        clearPosition: function() {
            n[this._positionId()] = null
        }
    }),
    new t
}),
define("lib/core/page", ["require", "jquery", "underscore", "twig", "lib/dev/meter/meter", "lib/common/fn", "lib/common/urlparams", "lib/core/view", "lib/components/base/scroll_saver"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/dev/meter/meter"), r = e("lib/common/fn"), a = e("lib/common/urlparams"), l = e("lib/core/view"), c = e("lib/components/base/scroll_saver"), d = {};
    return d._construct = function(e) {
        this.setElement(document.getElementById("page_holder")),
        this.el.className = this.className || "",
        this.$el.on("click" + this.ns, ".js-filter-preset-link", s.bind(this._presetLinkClick, this)),
        this._$document.on("page:overlay:show" + this.ns, s.bind(this._showOverlay, this)).on("page:overlay:hide" + this.ns, s.bind(this._hideOverlay, this)),
        AMOCRM.setTitle(this._title()),
        this.construct(e),
        this._initComponents.apply(this, arguments),
        this._$document.trigger("widgets:load"),
        this._$document.trigger("page:construct"),
        this._page_built = !0,
        e.first_load || this._$document.triggerHandler("page:changed")
    }
    ,
    d._request = function(e) {
        var t = this.template;
        this._showOverlay(),
        s.isFunction(t) && (t = t.call(this)),
        Promise.all([d._xhr.call(this, e.construct_options), n._preload(d._getTemplates.call(this))()]).then(s.bind(function(i) {
            this._hideOverlay(),
            i[0] && i[0].template && (t = "/tmpl/" + i[0].template.name),
            this._renderPage({
                response: i[0],
                container: "#page_holder",
                template: t
            }),
            c.restorePosition(),
            d._construct.call(this, s.extend(e.construct_options, {
                response: i[0]
            }))
        }, this))["catch"](s.bind(function(e) {
            console.error(e)
        }, this))
    }
    ,
    d._xhr = function(e) {
        var t;
        return new Promise(s.bind(function(i, n) {
            d._curr_xhr && d._curr_xhr.abort && s.isUndefined(d._curr_xhr.status) && d._curr_xhr.abort(),
            d._curr_xhr = this._makeRequest(e).always(s.bind(function() {
                var e = document.getElementById("page_holder");
                (e.children.length || AMOCRM.is_card) && (document.getElementById("card_holder").style.display = "none",
                e.style.display = ""),
                this._$document.triggerHandler("page:change:stop")
            }, this)).done(s.bind(function(e) {
                e = e || {},
                t = e.response || s.isEmpty(e) ? e.response : e,
                t.lang && AMOCRM.addLang(t.lang),
                t.user_rights && AMOCRM.constant("user_rights", s.extend(AMOCRM.constant("user_rights") || {}, t.user_rights)),
                i(t)
            }, this)).fail(s.bind(function(e, t) {
                "abort" === t && this.destroy(),
                n()
            }, this)),
            AMOCRM.page_xhr = d._curr_xhr
        }, this))
    }
    ,
    d._getTemplates = function() {
        var e = this.template;
        return e && s.isFunction(e) && (e = e.call(this)),
        s.isArray(e) || (e = [e]),
        s.isArray(this.preload) && (e = s.unique(e.concat(this.preload))),
        e.concat(["/tmpl/cards/header.twig"])
    }
    ,
    t = l.extend({
        endpoint: null,
        template: null,
        preload: [],
        overlay_class_name: "list__overlay",
        $overlay_container: null,
        construct: s.noop,
        destruct: s.noop,
        initialize: function(e) {
            l.prototype.initialize.call(this, s.extend(e, {
                init_components: !1
            })),
            this.setNS(),
            e = s.extend(e || {}, {
                first_load: AMOCRM.first_load
            }),
            AMOCRM.first_load ? i(s.bind(function() {
                n._preload(d._getTemplates.call(this), s.bind(d._construct, this, e))(),
                o.mrk("requestStart").msr("DOM_LOADED")
            }, this)) : d._request.call(this, {
                construct_options: e
            })
        },
        destroy: function(e) {
            e !== !1 && this.destruct(),
            l.prototype.destroy.apply(this, arguments)
        },
        _request: d._request,
        _updateResponseData: function(e) {
            return e
        },
        _makeRequest: function(e, t) {
            return i.ajax(s.extend({
                url: this._getEndpoint(e.route_args),
                data: this._getEndpointData(e.route_args),
                type: this._getEndpointType(e.route_args),
                dataType: "json"
            }, t || {}))
        },
        _getEndpoint: function() {
            return this.endpoint + "?" + a.getQueryString()
        },
        _getEndpointData: function() {
            return {}
        },
        _getEndpointType: function() {
            return "POST"
        },
        _renderPage: function(e) {
            var t, i, s, a, l;
            e = e || {},
            t = e.response || {},
            i = e.template,
            s = e.container || "#page_holder",
            i && (l = o.mrk()._mrk,
            a = n({
                ref: i
            }).render(this._updateResponseData(t)),
            o.msr("TEMPLATE_RENDERED", l),
            r.replaceHtml(document.querySelector(s), a))
        },
        _presetLinkClick: function(e) {
            var t = i(e.currentTarget);
            t.parent().find(".filter__list__item-selected").removeClass("filter__list__item-selected"),
            t.addClass("filter__list__item-selected")
        },
        _title: function() {
            return AMOCRM.lang[AMOCRM.getBaseEntity() + "_head_title"]
        },
        _showOverlay: function() {
            var e = this._$window.scrollTop();
            this._$body.get(0).classList.add("page-loading"),
            this._$window.on(["mousewheel." + this.ns + ".disable_scroll", "DOMMouseScroll." + this.ns + ".disable_scroll", "touchmove." + this.ns + ".disable_scroll"].join(" "), function(e) {
                e.preventDefault()
            }),
            this._$window.on("scroll." + this.ns + ".disable_scroll", function(t) {
                t.currentTarget.scrollTop = e + "px"
            })
        },
        _hideOverlay: function() {
            this._$body.get(0).classList.remove("page-loading"),
            this._$window.off(".disable_scroll")
        }
    })
}),
define("lib/components/base/todo", ["require", "jquery", "underscore", "twig", "lib/common/urlparams", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/urlparams"), r = e("lib/common/fn"), a = e("lib/core/users");
    return t = function(e) {
        var t = this;
        return this.options = i.extend({}, e),
        this.vars = {},
        this.managers = s.omit(a.get(), s.keys(a.get("free"))),
        this.user = AMOCRM.constant("user"),
        this.task_types = AMOCRM.constant("task_types"),
        this.$el = i("<div></div>"),
        AMOCRM.inbox.read({
            type: "task"
        }),
        this.managers || (this.managers_xhr = i.ajax({
            url: "/ajax/get_managers/"
        }).done(function(e) {
            AMOCRM.constant("managers", e),
            t.managers = e,
            t.$el && t.task_types && i.isFunction(t.initCallback) && t.initCallback()
        })),
        this.task_types || (this.task_types_xhr = i.ajax({
            url: "/ajax/get_task_types/"
        }).done(function(e) {
            AMOCRM.constant("task_types", e),
            t.task_types = e,
            t.$el && t.managers && i.isFunction(t.initCallback) && t.initCallback()
        })),
        this.render().then(function() {
            t._is_destroyed !== !0 && (t.$el.on("focus", ":input", function() {
                t.$el.find(".validate-has-error").removeClass("validate-has-error")
            }).on("click", ".js-modal-accept", function() {
                t.checkTaskType()
            }).on("submit", "form", function() {
                return !1
            }),
            t.options.need_linked_input && t.$el.on("suggest:loaded", ".js-todo-form-suggest", function(e, t, s) {
                var n = [];
                t.items && t.items.length ? (i.each(t.items, function(e, t) {
                    n.push({
                        id: t.id,
                        title: t.name,
                        text: t.name,
                        additional_data: 'data-entity="' + t.type + '"'
                    })
                }),
                s.trigger("suggest:reset", [n])) : s.trigger("suggest:reset", [[]])
            }).on("input", ".js-todo-form-suggest", function() {
                i(this).attr("data-value-id", "").attr("data-entity", "").closest(".modal-todo__linked-wrapper").removeClass("has-link")
            }).on("suggest:changed", ".js-todo-form-suggest", function(e, t) {
                var s = t.attr("data-entity");
                i(this).attr("data-entity", s).closest(".modal-todo__linked-wrapper").addClass("has-link").find(".modal-todo__linked-wrapper__link").attr("href", "/" + s + "/detail/" + t.attr("data-value-id"))
            }),
            t.managers && t.task_types && (i.isFunction(t.initCallback) ? t.initCallback() : t.initStart = !0))
        }),
        this
    }
    ,
    t.prototype.destroy = function() {
        return this.save_xhr && 4 != this.save_xhr.readyState ? !1 : (this.managers_xhr && "undefined" != typeof this.managers_xhr.status && this.managers_xhr.abort(),
        this.task_types_xhr && "undefined" != typeof this.task_types_xhr.status && this.task_types_xhr.abort(),
        this._is_destroyed = !0,
        this.$el.off(),
        !0)
    }
    ,
    t.prototype.render = n._preload(["/tmpl/common/todo.twig"], "_render"),
    t.prototype._render = function() {
        var e, t = this, o = !this.options.todo || s.isEmpty(this.options.todo) ? !1 : this.options.todo;
        e = i(n({
            ref: "/tmpl/common/todo.twig"
        }).render({
            managers: {
                class_name: "control--select-white validate-error-wrapper modal-body__inner-add-task__managers-select",
                selected: o && o.main_user ? o.main_user : t.user.id,
                selected_before: AMOCRM.lang.before_for + ":&nbsp;&nbsp;",
                name: "main_user",
                items: t.managers
            },
            task_types: {
                items: t.task_types || [],
                selected: o ? o.type : !1
            },
            linked: o ? o.linked : {
                value: "",
                id: "",
                entity: ""
            },
            date: o ? o.date : "",
            body: o ? o.text : "",
            need_linked_input: t.options.need_linked_input,
            has_remove: t.options.has_remove
        })),
        this.$el[0].className = e[0].className,
        this.$el.html(e.html())
    }
    ,
    t.prototype.init = function(e) {
        var t = this;
        return e = e || s.noop,
        this.initStart === !0 ? e.call(this) : !this.$el.is(":empty") && this.managers && this.task_types ? e.call(this) : this.initCallback = function() {
            t.render().then(s.bind(e, t))
        }
        ,
        this
    }
    ,
    t.prototype.validate = function() {
        var e, t = {
            date: "required date",
            time: "required time",
            main_user: "required",
            type: "required",
            linked: "linked_entity"
        }, s = this, n = o.QStoJSON(this.$el.find(":input").serialize()), r = !1, a = i("#task_type_custom");
        return this.options.need_linked_input && (t.linked = ""),
        this.$el.find(".validate-has-error").removeClass("validate-has-error"),
        n.body = n.body.toString().replace(/\+/g, " "),
        i.each(n, function(i, o) {
            if (e = t[i]) {
                e = e.split(" ");
                for (var a in e)
                    switch (e[a]) {
                    case "linked_entity":
                        var l = s.$el.find('[name="' + i + '"]:input');
                        l.attr("data-entity") && parseInt(l.attr("data-value-id"), 10) || (r = !0,
                        l.closest(".validate-error-wrapper").addClass("validate-has-error"));
                        break;
                    case "required":
                        n[i] || (r = !0,
                        s.$el.find('[name="' + i + '"]:input').closest(".validate-error-wrapper").addClass("validate-has-error"));
                        break;
                    case "date":
                    case "time":
                        "time" == e[a] && n[i].toString().replace(/\+/gi, " ") == AMOCRM.lang.tasks_all_day && (n[i] = moment("11:59 PM", "h:mm A").format(AMOCRM.system.format.date.time)),
                        moment(n[i], AMOCRM.system.format.date[e[a]]).isValid() ? n[i] = moment(n[i], AMOCRM.system.format.date[e[a]]).format(AMOCRM.system.format.date[e[a]]) : (r = !0,
                        s.$el.find('[name="' + i + '"]:input').closest(".validate-error-wrapper").addClass("validate-has-error"))
                    }
            }
        }),
        a.closest(".task-types-holder__custom").is(":visible") && !a.val() && (r = !0,
        a.addClass("validate-has-error")),
        r || (n.linked_id = s.getParties(),
        this.validated = n,
        this.validated.date_time = n.date + " " + n.time,
        this.validated.linked_id = n.linked_id),
        !r
    }
    ,
    t.prototype.getParties = function() {
        return this.options.need_linked_input && "" != this.$el.find("#todo_form_linked").attr("data-value-id") ? {
            id: this.$el.find("#todo_form_linked").attr("data-value-id"),
            entity: this.$el.find("#todo_form_linked").attr("data-entity")
        } : "undefined" != typeof this.options.id ? {
            id: this.options.id,
            entity: this.options.entity
        } : {}
    }
    ,
    t.prototype.checkTaskType = function() {
        var e = this
          , t = i("#task_type_custom")
          , s = t.closest(".task-types-holder__custom")
          , n = t.val();
        if (this.validate())
            return n ? (t.attr("disabled", "disabled"),
            s.addClass("task-types-holder__custom-saving"),
            i.ajax({
                url: "/private/tasks/ajax_task_status_edit.php",
                data: {
                    ACTION: "ADD",
                    NAME: n
                },
                dataType: "json",
                type: "POST",
                success: function(i) {
                    "OK" == i.status && (t.removeAttr("disabled"),
                    s.removeClass("task-types-holder__custom-saving"),
                    e.task_types = AMOCRM.constant("task_types") || {},
                    e.task_types["key_" + i.data.ID] = {
                        id: i.data.ID,
                        option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + r.escapeHTML(n)
                    },
                    AMOCRM.constant("task_types", e.task_types),
                    e.validated.type = i.data.ID,
                    e.saveTask())
                },
                error: function() {}
            })) : this.saveTask(),
            this
    }
    ,
    t.prototype.saveTask = function() {
        var e, t, s = this, n = s.$el.find(".js-modal-accept");
        return t = "todo" == this.options.entity ? "/ajax/" + this.options.entity + "/multiple/add/" : "/ajax/" + this.options.entity + "/multiple/tasks/add/",
        "Y" == n.attr("data-loading") ? !1 : ("function" == typeof this.options.onSaveStart && this.options.onSaveStart.call(this, {}),
        n.trigger("button:load:start"),
        e = {
            task: {
                body: this.validated.body || AMOCRM.lang.tasks_follow_up,
                date: this.validated.date_time,
                main_user_id: this.validated.main_user,
                type: this.validated.type
            },
            parties: this.getParties()
        },
        this.options.todo && this.options.todo.id && (e.task_id = this.options.todo.id,
        t = "/ajax/" + this.options.entity + "/multiple/edit/"),
        void (this.save_xhr = i.ajax({
            url: t,
            type: "POST",
            data: e,
            dataType: "json"
        }).always(function() {
            "function" == typeof s.options.onSaveComplete && s.options.onSaveComplete.call(s),
            n.trigger("button:load:stop")
        }).done(function(e) {
            "fail" == e.status ? "function" == typeof s.options.onSaveFail && s.options.onSaveFail.call(s) : "function" == typeof s.options.onSaveSuccess && s.options.onSaveSuccess.call(s, e.message)
        }).fail(function() {
            "function" == typeof s.options.onSaveFail && s.options.onSaveFail.call(s)
        })))
    }
    ,
    t
}),
define("lib/components/lists/actions/add_task", ["require", "jquery", "underscore", "lib/components/base/modal", "lib/components/base/todo"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/components/base/modal"), o = e("lib/components/base/todo");
    return t = function(e) {
        var t = this;
        this.options = i.extend({}, e),
        this.modal = new n({
            class_name: "modal-list",
            can_centrify: !1,
            init: function(e) {
                var n = {
                    id: t.options.id,
                    entity: t.options.entity,
                    need_linked_input: t.options.need_linked_input || !1,
                    onSaveStart: function() {
                        e.hide()
                    },
                    onSaveFail: function() {
                        t.modal.showError()
                    },
                    onSaveSuccess: function(e) {
                        s.isFunction(t.options.onSaveSuccess) ? t.options.onSaveSuccess() : i(document).trigger("list:reload"),
                        t.modal.showSuccess(e)
                    }
                };
                t.todo = new o(n).init(function() {
                    e.trigger("modal:loaded").html(this.$el).trigger("modal:centrify")
                })
            },
            destroy: function() {
                t.todo.destroy()
            }
        })
    }
}),
define("lib/components/base/player", ["require", "jquery", "underscore", "lib/core/view", "jplayer"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/core/view");
    return e("jplayer"),
    window.AMOCRM = window.AMOCRM || {},
    window.AMOCRM.player_prepare = {},
    t = n.extend({
        ns: ".player",
        template: s.template(['<div id="amo-player" class="amo-player-container">', '<div class="amo-player-container--inner">', '<div class="amo-player-container--play"><span></span></div>', '<div class="amo-player-container--pause"><span></span><span></span></div>', '<div class="amo-player-container--stop"><span></span></div>', '<div class="amo-player-container--scrubber">', '<div class="amo-player-container--progress"><div class="amo-player-container--loaded"></div></div>', "</div>", '<div class="amo-player-container--time">', '<em class="amo-player-container--played">00:00</em>/<strong class="amo-player-container--duration">00:00</strong>', "</div>", "</div>", "</div>"].join("")),
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this.options = i.extend({
                append_to: ".custom-scroll",
                $container: this._$document,
                selector: !1
            }, e),
            this.default_selector = "#amo-player",
            this.default_width = 495,
            this.bindEvents()
        },
        destroy: function() {
            this._$body.removeAttr("bgsound"),
            this.options.$container.off(this.ns),
            this.last_audio && this.last_audio.jPlayer("stop").remove(),
            this.remove()
        },
        prepare: function() {
            return i.extend({}, this.default_prepare, AMOCRM.player_prepare)
        },
        bindEvents: function() {
            this.options.$container.on("click" + this.ns, ".js-call-play", s.bind(function(e) {
                var t, n = i(e.currentTarget);
                n.hasClass("amo-player--playing") ? this.stop(n) : (t = n.attr("data-prepare"),
                this.stop(),
                this.show(n),
                n.removeClass("icon--play").addClass("amo-player--playing"),
                s.isString(t) && s.isFunction(this.prepare()[t]) ? this.prepare()[t].call(this, n) : this.play(n)),
                e.preventDefault(),
                e.stopPropagation()
            }, this)),
            this._$document.on("page:change:loader", s.bind(this.stop, this))
        },
        _getPlayer: function(e) {
            var t = i(this.default_selector);
            return e && this.options.selector && (t = e.closest(this.options.selector)),
            t
        },
        _getContainer: function(e) {
            var t = e.closest(this.options.append_to);
            return t.length || (t = this._$body),
            t
        },
        showError: function(e, t) {
            var i = this._getPlayer(e);
            this.t = setTimeout(s.bind(this.stop, this, e), 1500),
            i.attr("data-error-text", t).addClass("js-ready js-error")
        },
        fileHash: function(e) {
            var t, i, s = 0;
            if (0 === e.length)
                return s;
            for (t = 0; t < e.length; t++)
                i = e.charCodeAt(t),
                s = (s << 5) - s + i,
                s &= s;
            return s
        },
        show: function(e) {
            var t, n, o, r, a, l, c, d = this._getContainer(e), u = "static" === d.css("position") ? 0 : d.scrollTop(), h = "static" === d.css("position") ? 0 : d.scrollLeft();
            this.options.selector || (i(this.default_selector).remove(),
            d.append(this.template()),
            t = this._getPlayer(),
            l = d.offset().left,
            n = e.offset().left - l,
            o = e.offset().top - d.offset().top,
            c = d.width(),
            r = t.width(),
            r > c && (r = c),
            a = n + e.width() / 2 - r / 2,
            0 > a && (a = 0),
            a + r > d.width() && (a = d.width() - r),
            s.isFunction(this.options.setPositions) && this.options.setPositions.call(this, e, t),
            t.css({
                top: o + e.height() / 2 - t.height() / 2 + u,
                left: a + h,
                width: r
            }).one("click", ".amo-player-container--stop", s.bind(this.stop, this, void 0)).on("click", s.bind(function(e) {
                e.stopPropagation()
            }, this)),
            s.isFunction(this.options.afterSetPositions) && this.options.afterSetPositions.call(this, e, t),
            t.addClass("js-loading"))
        },
        play: function(e, t) {
            var n, o;
            return (t = t || e.attr("href")) ? (n = this.fileHash(t),
            i(document.body).attr("bgsound", t),
            o = i("#audio" + n),
            o.length || (this._$body.append('<div id="audio' + n + '" controls class="amo-player--audio"></div>'),
            this.last_audio = i("#audio" + n).jPlayer({
                cssSelectorAncestor: this.options.selector || this.default_selector,
                cssSelector: {
                    seekBar: ".amo-player-container--progress",
                    playBar: ".amo-player-container--loaded",
                    play: ".amo-player-container--play",
                    pause: ".amo-player-container--pause",
                    currentTime: ".amo-player-container--played",
                    duration: ".amo-player-container--duration"
                },
                solution: "html",
                supplied: "mp3,wav,oga,m4a",
                preload: "metadata",
                muted: !1,
                ended: s.bind(this.stop, this, void 0),
                error: s.bind(this.showError, this, e, AMOCRM.lang.player_no_file),
                ready: s.bind(function(s) {
                    var n = {};
                    n.mp3 = t,
                    n.wav = t,
                    i(s.currentTarget).jPlayer("setMedia", n).jPlayer("play"),
                    this._getPlayer(e).addClass("js-ready")
                }, this)
            })),
            void e.addClass("amo-player--playing icon--stop")) : void this.stop(e)
        },
        stop: function(e) {
            e || (e = i("a.amo-player--playing")),
            clearTimeout(this.t),
            this.last_audio ? (this.last_audio.jPlayer("stop").remove(),
            this.options.selector ? e.closest(this.options.selector).find(".amo-player-container--played").text("00:00") : i(this.default_selector).remove(),
            this.last_audio = null) : i(this.default_selector).remove(),
            e.length && (e.removeClass("amo-player--loading-ajax amo-player--playing icon--stop").addClass("icon--play"),
            e.hasClass("amo-player--loading-ajax") && e.addClass("amo-player--dont-play"),
            s.isFunction(this.options.stop) && this.options.stop())
        },
        default_prepare: {
            onlinepbx: function(e) {
                e.hasClass("amo-player--loading-ajax") || (e.addClass("amo-player--loading-ajax"),
                i.ajax({
                    url: e.attr("href"),
                    dataType: "json",
                    success: s.bind(function(t) {
                        e.removeClass("amo-player--loading-ajax"),
                        /^http\:\/\/(.*)\.(onlinepbx|onpbx)\.ru\/$/.test(t.redirect) ? this.showError(e, AMOCRM.lang.player_no_file) : e.hasClass("amo-player--dont-play") ? e.removeClass("amo-player--dont-play") : this.play(e, t.redirect.replace(/^([\s\S]{0,5})\:\/\//, "//"))
                    }, this)
                }))
            },
            oktell: function(e) {
                var t;
                e.hasClass("amo-player--loading-ajax") || "undefined" == typeof AMOCRM.widgets.oktell || (e.addClass("amo-player--loading-ajax"),
                AMOCRM.widgets.oktell.exec("gettemphttppass", {}, function(i) {
                    i.result && i.password ? (t = e.attr("href") + "?temppass=" + i.password,
                    this.play(e, t),
                    e.addClass("amo-player--loading-ajax")) : (e.removeClass("amo-player--dont-play"),
                    this.showError(e, AMOCRM.lang.player_no_file))
                }))
            }
        }
    })
}),
define("lib/components/filter/delete_preset", ["require", "jquery", "underscore", "twig", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/base/modal");
    return t = function(e) {
        var t = this;
        this.options = i.extend({}, e || {}),
        this.options.id && (this.modal = new o({
            class_name: "modal-list",
            init: n._preload(["/tmpl/common/modal/delete.twig"], function(e) {
                t.$modal_body = e,
                e.trigger("modal:loaded").html(n({
                    ref: "/tmpl/common/modal/delete.twig"
                }).render({
                    lang: AMOCRM.lang,
                    caption: AMOCRM.lang.filter_preset_remove_caption,
                    message: [{
                        text: AMOCRM.lang.filter_preset_remove_msg
                    }],
                    accept_text: AMOCRM.lang.filter_preset_remove_accept_button
                })).trigger("modal:centrify"),
                document.activeElement.blur(),
                e.on("click", ".modal-body__actions__save", s.bind(t.removeRequest, t)),
                this.$modal.on("click", function(e) {
                    e.stopPropagation()
                })
            }),
            destroy: s.bind(function() {
                return !this.xhr || s.isUndefined(this.xhr.status) ? (s.isFunction(this.options.destroy) && this.options.destroy(),
                this.$modal_body.off(),
                !0) : !1
            }, this)
        }))
    }
    ,
    t.prototype.removeRequest = function() {
        this.xhr || (this.xhr = i.ajax({
            url: "/private/customfilters.php",
            data: {
                ACTION: "delete",
                selection: this.options.id
            }
        }).done(s.bind(function(e) {
            1 == e && (this.xhr = null,
            this.options.$el.addClass("flipOutX"),
            s.delay(s.bind(function() {
                this.options.$el.remove(),
                s.isFunction(this.options.complete) && this.options.complete()
            }, this), 300),
            this.modal.destroy())
        }, this)))
    }
    ,
    t
}),
define("lib/components/filter/presets", ["require", "jquery", "underscore", "twig", "elements_view", "backbone", "lib/common/urlparams", "lib/common/fn", "lib/components/filter/delete_preset"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("elements_view")
      , o = e("backbone")
      , r = e("lib/common/urlparams")
      , a = e("lib/common/fn")
      , l = e("lib/components/filter/delete_preset")
      , c = function(e, i) {
        t(this).sortable("refreshPositions"),
        e.helper.css("margin-top", i)
    };
    return n.extend({
        ns: ".filter:presets",
        _sorting: !1,
        _sortable: !1,
        _selectors: function() {
            return {
                default_item: ".js-filter-preset-link.filter__list__item-default"
            }
        },
        _classes: function() {
            return {
                selected: "filter__list__item-selected",
                save: "js-filter-save",
                trash_item: "filter__common_settings__item-trash"
            }
        },
        events: {
            "keyup .filter_items__user_value": "presetEditHotKeys",
            "click .js-filter-preset-link": "presetLoad",
            "click .js-filter-save": "presetSave",
            "click .filter_items__edit__delete": "presetRemove",
            "click .filter_items__edit__save": "presetEditSave",
            "click .filter_items__edit__btn": "presetEdit",
            "click .filter__list__item-edit-mode": "presetEditPreventExit"
        },
        initialize: function(e) {
            this.options = e || {},
            this.is_admin = (AMOCRM.constant("user_rights") || {}).is_admin,
            this._$body.on("click" + this.ns, "#filter_save", i.bind(this.presetSave, this)).on("click" + this.ns, i.bind(this.presetEditExit, this)),
            s._preload(["/tmpl/filter/bookmark.twig"])()
        },
        destroy: function() {
            this._$body.off(this.ns),
            this.makeSortable(!1),
            this.remove(!1)
        },
        presetLoad: function(e) {
            var i = t(e.currentTarget)
              , s = i.find(".filter__list__item__link:first");
            return e.preventDefault(),
            e.stopPropagation(),
            t(document).trigger("suggest:manager:destroy"),
            this._sorting ? void 0 : i.hasClass("filter__list__item-edit-mode") ? (i.find('input[type="text"]').focus(),
            !1) : (this.options.filter && this.options.filter.form.hasChanges() && this.options.filter.reset({
                navigate: !1
            }),
            AMOCRM.router.navigate(s.attr("href"), {
                trigger: !0
            }),
            AMOCRM.router.prevent_page_confirm !== !0 && (i.parent().find(this._selector("selected")).removeClass(this._class("selected")),
            i.addClass(this._class("selected"))),
            void 0)
        },
        highlight: function() {
            var e = []
              , s = r.removeQueryParam(["filter[order_by]", "order_by", "filter[order_type]", "order_type", "clear_order", "term", "typing"])
              , n = decodeURIComponent(s ? "?" + s : "")
              , a = this.presetIsTrash(o.history.location.pathname)
              , l = a ? this._selector("trash_item") : this._selector("default_item");
            return this._elem("save").addClass("hidden"),
            n ? (this.$(".js-filter-preset-link").each(i.bind(function(i, s) {
                var o, r, a;
                o = t(s),
                r = (o.children(".filter__list__item__link").attr("href") || "").toString().split("?"),
                a = decodeURIComponent(2 == r.length ? r[1] : ""),
                a && n.indexOf(a) >= 0 ? (e.length && e.removeClass(this._class("selected")),
                e = o,
                o.addClass(this._class("selected"))) : o.removeClass(this._class("selected"))
            }, this)),
            e.length || this.highlightSave()) : (this.$(this._selector("selected")).removeClass(this._class("selected")),
            a ? (this.$(l).addClass(this._class("selected")),
            this.options.filter.setUrl(this.options.filter.form.el.getAttribute("action").replace("/list/", "/trash/")),
            e = this.$(l)) : (this.$(l)[r.getQueryParam("term") ? "removeClass" : "addClass"](this._class("selected")),
            this.options.filter.setUrl(this.options.filter.form.el.getAttribute("action").replace("/trash/", "/list/")))),
            e
        },
        highlightSave: function(e) {
            e = this.options.can_save === !1 ? !1 : e,
            this.$(this._selector("selected")).removeClass(this._class("selected")),
            this._elem("save").addClass("hidden"),
            this.is_admin && e !== !1 && this._elem("save").removeClass("hidden").addClass(this._class("selected"))
        },
        presetRemove: function(e) {
            var s = t(e.currentTarget).closest("li");
            return this.$el.removeClass("filter-add-mode-active"),
            s.attr("data-id") ? new l({
                $el: s,
                id: s.attr("data-id"),
                complete: i.bind(function() {
                    this._elem("save").removeClass("hidden"),
                    this.$preset_in_edit = !1,
                    this.options.filter.form.hasChanges() ? this.highlightSave() : this.highlight()
                }, this)
            }) : (s.addClass("flipOutX"),
            i.delay(i.bind(function() {
                s.remove(),
                this._elem("save").removeClass("hidden"),
                this.highlight()
            }, this), 300),
            this.options.filter.makeFilterCaptionActive(!0),
            this.$preset_in_edit = !1),
            !1
        },
        presetSave: function(e) {
            var i, n = t(e.currentTarget), o = this.options.filter.form.$el.attr("action"), r = 99999, l = a.parseNum(this.$("li:last").attr("data-sort")), c = this.options.filter.form.$el.find(":input").filter(function() {
                return "" !== t(this).val()
            }).serialize();
            return i = t(s({
                ref: "/tmpl/filter/bookmark.twig"
            }).render({
                item: {
                    element_id: "filter_preset_save_item",
                    in_edit: !0,
                    link: o + "?" + c + (this.presetIsTrash(o) ? "&is_trash=Y" : ""),
                    label: "",
                    can_edit: !0
                }
            })),
            i.addClass("from-save filter__common_settings__item__add-mode"),
            i.attr("data-sort", l >= 99999 ? l + 1 : r).css("opacity", 0).css(Modernizr.prefixed("transform"), "scale(0.8)").css(Modernizr.prefixed("transition"), "opacity 0.2s, " + Modernizr.prefixed("transform") + " 0.2s"),
            n.closest("li").length ? n.closest("li").addClass("hidden").before(i) : (this.$el.append(i),
            this.options.filter.makeFilterCaptionActive(!1)),
            i.focus().css("opacity", "").css(Modernizr.prefixed("transform"), ""),
            i.find(".filter_items__user_value").attr("data-is-new", 1).removeAttr("readonly").focus(),
            this.$el.addClass("filter-add-mode-active"),
            this.$preset_in_edit = i,
            !1
        },
        presetEditSave: function(e) {
            var i = t(e.currentTarget)
              , s = i.closest("li")
              , n = a.escapeHTML(t.trim(s.find(".filter_items__user_value").val() || ""))
              , o = this.options.filter.form.$el.attr("action")
              , r = s.find(".filter__list__item__link").attr("href").toString().replace(o + "?", "") + (this.presetIsTrash(o) ? "&is_trash=Y" : "")
              , l = s.attr("data-id");
            return n.length ? (this.presetSaveRequest(s, {
                ACTION: l ? "update" : "add",
                name: n,
                selection: l ? l : "",
                query: r,
                sort: s.attr("data-sort")
            }),
            this.$preset_in_edit = !1) : this.presetShake(s),
            !1
        },
        presetEdit: function(e) {
            if (this.$preset_in_edit && !this.$preset_in_edit.find(".filter_items__user_value").val())
                return this.presetShake(this.$preset_in_edit),
                !1;
            var i = t(e.currentTarget)
              , s = i.closest("li")
              , n = s.parent()
              , o = n.children(".filter__list__item-edit-mode")
              , r = o.length ? o.attr("data-id") : ""
              , a = this.options.filter.form.$el.attr("action")
              , l = o.length ? o.find(".filter__list__item__link").attr("href").toString().replace(a + "?", "") + (this.presetIsTrash(a) ? "&is_trash=Y" : "") : ""
              , c = s.find(".filter_items__user_value");
            return o.length && this.presetSaveRequest(o, {
                ACTION: r ? "update" : "add",
                name: t.trim(o.find(".filter_items__user_value").val() || ""),
                selection: r ? r : "",
                query: l
            }),
            s.addClass("filter__list__item-edit-mode"),
            c.prev("span").remove(),
            c.show().removeAttr("readonly").val(c.val()),
            c.focus(),
            this.$preset_in_edit = s,
            this.makeSortable(!0),
            e.stopPropagation(),
            !1
        },
        presetEditHotKeys: function(e) {
            var i = t(e.currentTarget)
              , s = 13
              , n = 27;
            switch (e.keyCode) {
            case s:
                this.presetEditSave({
                    currentTarget: i.closest("li").find(".filter_items__edit__save")
                });
                break;
            case n:
                t(document).trigger("mouseup")
            }
        },
        makeSortable: function(e) {
            var s = this;
            e === !0 ? (this._sortable = !0,
            this.$el.sortable({
                containment: this.$el,
                items: ".js-filter__common_settings__item-sortable",
                axis: "y",
                tolerance: "pointer",
                scroll: !1,
                handle: ".filter_items__handle",
                refreshPositions: !0,
                sortAnimate: !0,
                start: function(e, i) {
                    s._sorting = !0,
                    i.item.addClass("sorted"),
                    c.call(this, i, t(window).scrollTop())
                },
                stop: function(e, t) {
                    i.delay(i.bind(function() {
                        this._sorting = !1
                    }, s), 200),
                    t.item.css("margin-top", "").removeClass("sorted")
                },
                update: function(e, i) {
                    var s = i.item.parent().find(".js-filter__common_settings__item-sortable.filter__common_settings__item-preset").map(function(e, i) {
                        var s = t(this)
                          , n = (a.parseNum(t(this).prev("li").attr("data-sort")) || 0) + 1;
                        return s.attr("data-sort", n),
                        {
                            id: s.attr("data-id"),
                            sort: n
                        }
                    })
                      , n = i.item.data("xhr");
                    "undefined" != typeof n && 4 !== n.readyState && n.abort(),
                    n = t.ajax({
                        url: "/private/customfilters.php",
                        data: {
                            ACTION: "sort",
                            filter: t.makeArray(s)
                        },
                        type: "POST"
                    }),
                    i.item.data("xhr", n)
                },
                sort: function(e, i) {
                    var s = t(window)
                      , n = s.scrollTop()
                      , o = s.height()
                      , r = i.item.offset().top
                      , a = i.item.height();
                    n - r > -70 && (n -= 10),
                    70 > n + o - (r + a) && (n += 10),
                    s.scrollTop(n),
                    c.call(this, i, n)
                }
            })) : this._sortable && (this.$el.sortable("destroy"),
            this._sortable = !1)
        },
        presetEditExit: function() {
            return this.$preset_in_edit ? (t(".modal").length || this.presetEditSave({
                currentTarget: this.$preset_in_edit
            }),
            !1) : void 0
        },
        presetShake: function(e) {
            e.one(AMOCRM.animation_event, function() {
                AMOCRM.is_touch_device || t(this).find(":input").focus(),
                t(this).off(AMOCRM.animation_event).removeClass("shake")
            }).addClass("shake")
        },
        presetSaveRequest: function(e, n) {
            var r = []
              , a = e.hasClass(this._class("selected"))
              , l = "";
            this.preset_saving || (this.preset_saving = !0,
            t.ajax({
                url: "/private/customfilters.php",
                type: "POST",
                dataType: "json",
                data: n
            }).always(i.bind(function() {
                this.preset_saving = !1
            }, this)).done(i.bind(function(i) {
                var c, d;
                this.$el.removeClass("filter-add-mode-active"),
                "success" === i.status || i ? (c = i.query,
                d = i.id,
                l = o.history.location.pathname + "?" + c + "&sel=" + d,
                e.replaceWith(r = t(s({
                    ref: "/tmpl/filter/bookmark.twig"
                }).render({
                    item: {
                        link: l,
                        label: n.name,
                        id: i.id || n.selection,
                        can_edit: !0
                    }
                }))),
                (a || "add" === n.ACTION) && (this.$(this._selector("selected")).removeClass(this._class("selected")),
                r.addClass(this._class("selected")),
                AMOCRM.router.navigate(l, {
                    replace: a,
                    trigger: "add" === n.ACTION
                }))) : this.presetEditExit()
            }, this)))
        },
        presetIsTrash: function(e) {
            return e.indexOf("/trash") >= 0
        }
    })
}),
define("lib/components/tags/api", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = {
        name_keys: ["raw_title", "name", "label", "title"],
        getTagName: function(e) {
            var s;
            return e = e || {},
            t(i.name_keys).each(function(i) {
                t.isUndefined(e[i]) || (s = e[i])
            }),
            s
        },
        getTagsList: function(e) {
            return e = e || {},
            new Promise(function(t, s) {
                $.ajax({
                    url: i.getTagsListUrl(e),
                    type: "GET",
                    dataType: "json"
                }).done(function(e) {
                    t(i.parseResponse(e))
                }).fail(function(e) {
                    t(i.parseResponse())
                })
            }
            )
        },
        getTagsListUrl: function(e) {
            var s, n, o;
            switch (e = e || {},
            s = i.parseEntity(e.entity),
            o = t.isEmpty(e.qs_params) ? "" : "/?" + decodeURIComponent($.param(e.qs_params)),
            s) {
            case "leads":
                n = "/v3/leads" + (e.pipeline_id ? "/pipeline/" + e.pipeline_id : "") + "/tags";
                break;
            default:
                n = "/v3" + (s ? "/" + s : "") + "/tags"
            }
            return n + o
        },
        getDeleteUrl: function(e) {
            var i, s;
            return 1 === e.length ? i = t(e).first().id : (s = {
                filter: {
                    id: t(e).pluck("id")
                }
            },
            i = "?" + decodeURIComponent($.param(s))),
            "/v3/tags/" + i
        },
        parseResponse: function(e) {
            return t.isEmpty(e) ? {
                total: 0,
                items: []
            } : {
                total: e.total,
                items: t.map(e._embedded.items, function(e) {
                    return {
                        id: e.id,
                        name: e.name,
                        frequency: e.total || 0
                    }
                })
            }
        },
        parseEntity: function(e) {
            switch (e) {
            case "amoforms":
                return "leads";
            case "stats":
                switch (window.location.pathname) {
                case "/stats/consolidated/":
                    return "leads";
                case "/stats/consolidated/contacts/":
                    return "contacts"
                }
                break;
            case "chat_send":
                return "";
            case "import":
                return AMOCRM.getBaseEntity();
            default:
                return e
            }
        }
    };
    return t.extend(function() {}, {
        getTagsList: i.getTagsList,
        getFullTagsList: function(e) {
            return e = t.extend(e || {}, {
                qs_params: {
                    limit: -1
                }
            }),
            i.getTagsList(e)
        },
        createNewTags: function(e, s) {
            return e.length ? (s = i.parseEntity(s),
            $.ajax({
                url: s ? "/v3/%s/tags/".replace("%s", s) : "/v3/tags/",
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify(t.map(e, function(e) {
                    return {
                        name: e
                    }
                }))
            }).then(i.parseResponse)) : $.Deferred().reject({
                error: "No tag names provided!"
            })
        },
        deleteTags: function(e) {
            return e.length ? $.ajax({
                url: i.getDeleteUrl(e),
                type: "DELETE",
                dataType: "json"
            }) : $.Deferred().reject({
                error: "No tags provided!"
            })
        },
        setTags: function(e) {
            return t.isEmpty(e) ? $.Deferred().reject({
                error: "No options provided!"
            }) : $.ajax({
                url: "/v3/" + i.parseEntity(e.entity),
                type: "PATCH",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(t.map(e.ids, function(s) {
                    return {
                        id: s,
                        tags: t.map(e.tags, function(e) {
                            return {
                                id: e.id || 0,
                                name: i.getTagName(e),
                                deleted: !!e.deleted
                            }
                        })
                    }
                }))
            })
        },
        getAccountSettings: function() {
            return $.ajax({
                url: "/v3/accounts/" + (AMOCRM.constant("account") || {}).id,
                type: "GET",
                dataType: "json"
            })
        },
        setAccountSettings: function(e) {
            return e ? $.ajax({
                url: "/v3/accounts/" + (AMOCRM.constant("account") || {}).id,
                type: "PATCH",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify(e)
            }) : $.Deferred().reject({
                error: "No options provided!"
            })
        },
        getTagName: i.getTagName
    })
}),
define("lib/components/tags/modals/delete", ["require", "underscore", "lib/components/modals/delete", "lib/components/tags/api", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/delete")
      , s = e("lib/components/tags/api")
      , n = e("lib/common/fn");
    return i.extend({
        _tags: null,
        save: function(e) {
            this._elem("save_btn").trigger("button:load:start"),
            this._xhr || (this._xhr = s.deleteTags(this._tags).always(t.bind(this.actionComplete, this)))
        },
        setParams: function(e) {
            var t = i.prototype.setParams.apply(this, arguments);
            if (!e.tags.length)
                throw new Error("Tag items not provided in params: " + JSON.stringify(e));
            return this._tags = e.tags,
            t
        },
        isValidResponse: function(e) {
            return (e || {}).deleted
        },
        getTemplateParams: function() {
            var e = [];
            return 1 === this._tags.length ? (e.push(n.i18n("Are you sure you want to delete the Ђ%sї tag?").replace("%s", t.escape(t.first(this._tags).name))),
            e.push(n.i18n("The tag will be removed from all leads."))) : (e.push(n.i18n("Are you sure you want to delete selected tags?")),
            e.push(n.i18n("Tags will be removed from all leads."))),
            {
                caption: n.i18n("Delete tags"),
                message: [{
                    text: e.join(" ")
                }],
                accept_text: n.i18n("Confirm")
            }
        }
    })
}),
define("lib/components/tags/modals/manage", ["require", "jquery", "underscore", "twig", "backbone", "lib/core/view", "lib/components/base/modal", "lib/components/tags/modals/delete", "lib/components/tags/api"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("backbone")
      , o = e("lib/core/view")
      , r = e("lib/components/base/modal")
      , a = e("lib/components/tags/modals/delete")
      , l = e("lib/components/tags/api")
      , c = 13;
    return o.extend({
        deleted_tags: null,
        added_tags: null,
        render_options: null,
        tags_list: null,
        preloadTemplates: s._preload(["/tmpl/common/tags_manage/modal.twig", "/tmpl/common/tags_manage/item.twig", "/tmpl/common/tags_manage/tags_wrapper.twig"]),
        _classes: function() {
            return {
                multisuggest: "js-multisuggest",
                multisuggest_input: "js-multisuggest-input",
                multisuggest_suggest: "multisuggest__suggest"
            }
        },
        events: function() {
            var e = i.extend({}, i.result(o.prototype, "events"), {
                'click .js-tags-lib__item_suggest[data-id="new"]': "onAddNewTagClick",
                "click .js-tags-lib__item-delete": "onDeleteTagClick",
                "change #modal-tags-lib-manage__restrict": "onRestrictSwitcherChange"
            });
            return e["keydown" + this._selector("multisuggest_input")] = "onSuggestInputKeydown",
            e
        },
        initialize: function(e) {
            e = e || {},
            o.prototype.initialize.call(this),
            this.options = e,
            this.deleted_tags = [],
            this.added_tags = [],
            Promise.all([l.getFullTagsList({
                entity: this.options.entity
            }), l.getAccountSettings(), this.preloadTemplates()]).then(i.bind(function(e) {
                var t = e[0]
                  , i = e[1] || {};
                this.render_options = {
                    tags_editable: i.tags_editable
                },
                this.prepareData(t).initModal()
            }, this))
        },
        prepareData: function(e) {
            return this.tags_list = new n.Collection(e.items || []),
            this.listenTo(this.tags_list, "remove", this.onTagsRemove),
            this.listenTo(this.tags_list, "add", this.onTagsAdd),
            this
        },
        initModal: function() {
            this.modal = new r({
                class_name: "modal-list modal-tags-lib-manage",
                init: i.bind(function(e) {
                    this.setElement(e),
                    this.render()
                }, this),
                destroy: i.bind(this.destroy, this)
            })
        },
        destroy: function() {
            i.isFunction(this.options.onDestroy) && this.options.onDestroy({
                deleted_tags: this.deleted_tags,
                added_tags: this.added_tags
            }),
            o.prototype.destroy.call(this)
        },
        render: function() {
            var e = this.tags_list.toJSON();
            this.$el.html(s({
                ref: "/tmpl/common/tags_manage/modal.twig"
            }).render(i.extend(this.render_options || {}, {
                tags: e
            }))),
            this._elem("multisuggest").data("values-hash", t.extend({}, e)).data("items-tmpl", "/tmpl/common/tags_manage/item.twig").trigger("multisuggest:set_suggest", [!1]),
            this.$el.trigger("modal:loaded").find(".js-multisuggest").find(".js-multisuggest-input").focus().end().trigger("modal:centrify"),
            AMOCRM.is_touch_device && this._elem("multisuggest_suggest").css("minHeight", this._elem("multisuggest_suggest").height())
        },
        onDeleteTagClick: function(e) {
            var s = t(e.currentTarget).parent()
              , n = s.attr("data-id")
              , o = this.tags_list.get(n);
            o && this._addComponent(a, {
                tags: [o.toJSON()],
                complete: i.bind(function() {
                    s.remove(),
                    this.tags_list.remove(o)
                }, this)
            })
        },
        onAddNewTagClick: function(e) {
            e.preventDefault(),
            e.stopPropagation(),
            this.addNewTag()
        },
        onSuggestInputKeydown: function(e) {
            switch (t(e.target).val() || this.$el.trigger("modal:centrify"),
            e.keyCode) {
            case c:
                e.preventDefault(),
                e.stopPropagation(),
                this.addNewTag()
            }
        },
        onRestrictSwitcherChange: function(e) {
            var s = t(e.currentTarget);
            this._restrict_xhr && this._restrict_xhr.abort(),
            this._restrict_xhr = l.setAccountSettings({
                tags_editable: !s.prop("checked")
            }).always(i.bind(function() {
                this._restrict_xhr = null
            }, this)).done(i.bind(function(e) {
                (e || {}).updated || this.modal.showError()
            }, this)).fail(i.bind(function(e) {
                "abort" !== e.statusText && this.modal.showError()
            }, this))
        },
        addNewTag: function() {
            var e = this._elem("multisuggest_input").val().trim();
            l.createNewTags([e], this.options.entity).done(i.bind(function(e) {
                e.items.length ? this.tags_list.push(e.items) : this.modal.showError()
            }, this)).fail(i.bind(function() {
                this.modal.showError()
            }, this))
        },
        updateSuggestHashes: function() {
            this._elem("multisuggest").data("values-hash", t.extend({}, this.tags_list.toJSON()))
        },
        onTagsRemove: function(e) {
            this.deleted_tags.push(e),
            this.updateSuggestHashes()
        },
        onTagsAdd: function(e) {
            this.added_tags.push(e),
            this.updateSuggestHashes(),
            this._elem("multisuggest").trigger("multisuggest:set_suggest", [!1]),
            this._elem("multisuggest_input").val("").trigger("input").focus()
        }
    })
}),
define("lib/components/filter/tags_lib/item", ["require", "underscore", "twig", "lib/core/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view");
    return s.extend({
        tagName: "li",
        className: "tags-lib__item",
        events: function() {
            var e = t.extend({}, t.result(s.prototype, "events"), {
                "click .js-tags-lib__item-name": "onTagsLibItemClick"
            });
            return e
        },
        initialize: function(e) {
            e = e || {},
            s.prototype.initialize.call(this),
            this.options = e,
            this.listenTo(this.model, "change:selected", this.render)
        },
        render: function() {
            return this.$el.attr("data-tag-id", this.model.get("id")).toggleClass("tags-lib__item_selected", !!this.model.get("selected")).html(i({
                ref: "/tmpl/filter/tags_lib/item.twig"
            }).render(this.model.toJSON())),
            this
        },
        onTagsLibItemClick: function(e) {
            var t = this.model.get("selected");
            this.model.set("selected", !t),
            t ? this.model.trigger("tags_lib:item:deseleted") : this.$("input").trigger("controls:change")
        }
    })
}),
define("lib/components/filter/tags_lib/model", ["require", "backbone"], function(e) {
    "use strict";
    var t = e("backbone");
    return t.Model.extend({
        defaults: {
            visible: !1,
            frequency: 0,
            selected: !1
        }
    })
}),
define("lib/components/filter/tags_lib/collection", ["require", "underscore", "backbone", "lib/components/filter/tags_lib/model", "lib/components/tags/api"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone")
      , s = e("lib/components/filter/tags_lib/model")
      , n = e("lib/components/tags/api")
      , o = 30
      , r = 40
      , a = {
        silent: !0
    };
    return i.Collection.extend({
        model: s,
        comparator: function(e) {
            return -1 * parseInt(e.get("frequency"))
        },
        setVisibleTags: function() {
            var e = this.where({
                visible: !0
            });
            return e.length && t.each(e, function(e) {
                e.set({
                    visible: !1
                })
            }),
            e = this.size() > r ? this.first(o) : this.models,
            t.each(e, function(e) {
                e.set({
                    visible: !0
                })
            }),
            this
        },
        removeTags: function(e) {
            e && t.chain(e).map(function(e) {
                return e.get("id")
            }).each(function(e) {
                var t = this.get(e);
                t && this.remove(t, a)
            }, this)
        },
        addTags: function(e) {
            e && (e = t(e).map(function(e) {
                return e.toJSON()
            }),
            this.add(e, a))
        },
        getSelectedTagsCount: function() {
            return this.filter(function(e) {
                return e.get("selected")
            }).length
        },
        checkTagsForAdditon: function(e) {
            e.length && t.each(e, function(e) {
                var t = this.get(e.id);
                t ? (t.set("frequency", t.get("frequency") + 1),
                this.sort()) : this.add({
                    id: e.id,
                    name: n.getTagName(e),
                    frequency: 1
                }, a)
            }, this)
        },
        checkTagsForDeletion: function(e) {
            e.length && t.each(e, function(e) {
                var t, i = this.get(e.id);
                i && (t = i.get("frequency") - 1,
                t > 0 ? (i.set("frequency", t),
                this.sort()) : this.remove(i, a))
            }, this)
        }
    })
}),
define("lib/components/filter/tags_lib/index", ["require", "underscore", "twig", "lib/core/view", "lib/components/tags/modals/manage", "lib/components/filter/tags_lib/item", "lib/components/filter/tags_lib/collection", "lib/common/user_rights", "lib/components/tags/api"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view")
      , n = e("lib/components/tags/modals/manage")
      , o = e("lib/components/filter/tags_lib/item")
      , r = e("lib/components/filter/tags_lib/collection")
      , a = e("lib/common/user_rights")
      , l = e("lib/components/tags/api");
    return s.extend({
        tags_list: null,
        additional_selected: null,
        _tag_items_subviews: null,
        _need_rerender: null,
        tag_input_name: "tag[]",
        className: "filter-search__tags-lib tags-lib",
        id: "filter-search__tags-lib",
        _classes: function() {
            return {
                hidden: "h-hidden",
                header: "tags-lib__header",
                tags_logic_visible: "tags-lib__header_tags-logic-visible",
                tags_holder: "tags-lib__tags-holder",
                tags_lib_item: "tags-lib__item",
                tags_lib_manage_button: "js-tags-lib__manage",
                tags_more_button: "js-tags-lib__tags-more",
                tags_suggest: "filter-search__tags-holder"
            }
        },
        _selectors: function() {
            return {
                tags_logic_inputs: ".tags-lib__tags-logic-holder input"
            }
        },
        events: function() {
            var e = t.extend({}, t.result(s.prototype, "events"));
            return e["click " + this._selector("tags_more_button")] = "showTagsSuggest",
            e["click " + this._selector("tags_lib_manage_button")] = "showTagsManageModal",
            e
        },
        initialize: function(e) {
            return e = e || {},
            e.entity = e.entity || AMOCRM.getBaseEntity(),
            s.prototype.initialize.call(this),
            this.options = e,
            this.tag_input_name = e.tag_input_name || this.tag_input_name,
            t.isFunction(e.checkSuggestValues) && (this.checkTagItemsChanges = t.bind(function() {
                e.checkSuggestValues(this.$el, this.tag_input_name)
            }, this)),
            this
        },
        init: function() {
            return new Promise(t.bind(function(e) {
                Promise.all([l.getFullTagsList(this.options), this.preloadTemplates()]).then(t.bind(function(i) {
                    this.prepareData(t.first(i)).render(e)
                }, this))
            }, this))
        },
        prepareData: function(e) {
            return e.items = t(e.items).filter(function(e) {
                return e.frequency
            }),
            this.tags_list = new r(e.items).setVisibleTags(),
            this.options.selected_tags && t.each(this.options.selected_tags, function(e) {
                var t = this.tags_list.get(e);
                t && t.set("selected", !0)
            }, this),
            this.listenTo(this.tags_list, "tags_lib:item:deseleted", this.onTagsLibItemDeselected),
            this.listenTo(this.tags_list, "change:selected", this.onTagsItemsChange),
            this
        },
        preloadTemplates: i._preload(["/tmpl/filter/tags_lib/index.twig", "/tmpl/filter/tags_lib/item.twig"]),
        render: function(e) {
            var s = this.tags_list.groupBy("visible")
              , n = s["true"] || []
              , r = s["false"] || []
              , l = t(r).filter(function(e) {
                return e.get("selected")
            })
              , c = document.createDocumentFragment();
            this.$el.html(i({
                ref: "/tmpl/filter/tags_lib/index.twig"
            }).render(t.extend({
                manage_tags: a.isAdmin(),
                has_tags: this.tags_list.length,
                tags_more: !!r.length
            }, this.options.tags_logic_enabled ? {
                tags_logic: {
                    disabled: !this.tags_list.getSelectedTagsCount(),
                    name: this.options.tags_logic_input_name || "",
                    value: this.options.getTagsLogicValue()
                }
            } : {}))),
            this._tag_items_subviews = [],
            t.each(n, function(e) {
                var t = this._addComponent(o, {
                    model: e
                }).render();
                this._tag_items_subviews.push(t),
                c.appendChild(t.el)
            }, this),
            this._elem("tags_holder").append(c),
            r.length && l.length && (this.additional_selected = l,
            this.renderAdditionalTags(t(l).map(function(e) {
                return e.toJSON()
            }))),
            t.isFunction(e) && e()
        },
        renderAdditionalTags: function(e) {
            e = e || [],
            this._addClass("hidden", "tags_more_button"),
            this.$el.append(i({
                ref: "/tmpl/filter/tags_lib/suggest.twig"
            }).render({
                items: e,
                set_glow: !!e.length,
                element_type_name: AMOCRM.getBaseEntity()
            }))
        },
        rerender: function() {
            this._tag_items_subviews.length && t(this._tag_items_subviews).invoke("destroy"),
            this._dropElemCache(),
            this.render(),
            this.checkTagItemsChanges(),
            this.onTagsItemsChange()
        },
        onTagsLibItemDeselected: function() {
            this.checkTagItemsChanges()
        },
        onTagsItemsChange: function() {
            var e = this._findElem("tags_logic_inputs")
              , t = !this.tags_list.getSelectedTagsCount();
            e.length && (t && e.filter('[value="or"]').trigger("custom_radio_change"),
            e.trigger("controls:disable", t),
            this._toggleClass("tags_logic_visible", "header", !t))
        },
        updateSelectedAdditionalTags: function(e) {
            e = e || [],
            this.additional_selected && (t.each(this.additional_selected, function(e) {
                e.set({
                    selected: !1
                }, {
                    silent: !0
                })
            }),
            this.additional_selected = []),
            e.length && t.each(e, function(e) {
                var i = this.tags_list.get(e);
                i.set({
                    selected: !0
                }, {
                    silent: !0
                }),
                t.isArray(this.additional_selected) || (this.additional_selected = []),
                this.additional_selected.push(i)
            }, this),
            this.onTagsItemsChange()
        },
        onTagsManageModalDestroy: function(e) {
            var i;
            e = e || {},
            this.tags_list.removeTags(e.deleted_tags),
            this.tags_list.setVisibleTags(),
            e.deleted_tags.length && (i = t.chain(e.deleted_tags).map(function(e) {
                return e.get("frequency")
            }).reduce(function(e, t) {
                return e + t
            }, 0).value(),
            i && t.isFunction(this.options.setNeedReload) && this.options.setNeedReload({
                reload: !0
            }),
            this.rerender())
        },
        showTagsManageModal: function(e) {
            this._addComponent(n, {
                entity: this.options.entity,
                onDestroy: t.bind(this.onTagsManageModalDestroy, this)
            })
        },
        showTagsSuggest: function(e) {
            var t, i, s = this.options.$filter_scroller, n = this.options.$apply_buttons, o = {};
            return this.renderAdditionalTags(),
            o.top = this._elem("tags_suggest").offset().top,
            o.height = this._elem("tags_suggest").outerHeight(!0),
            o.bottom = o.top + o.height,
            t = s.get(0).getBoundingClientRect(),
            i = n.offset(),
            o.bottom > t.bottom || $("#sidebar").hasClass("filter-search_has-changes") && o.bottom > i.top ? s.scrollTop(s.scrollTop() + o.height) : void 0
        },
        updateTags: function(e, t) {
            this.tags_list && (this.tags_list.checkTagsForAdditon(e),
            this.tags_list.checkTagsForDeletion(t),
            (e.length || t.length) && (this._need_rerender = !0))
        },
        checkNeedRerender: function() {
            this._need_rerender && (this.tags_list.setVisibleTags(),
            this.rerender()),
            this._need_rerender = !this._need_rerender
        },
        getAdditionalTags: function() {
            return t(this.tags_list.groupBy("visible")["false"]).map(function(e) {
                return {
                    id: e.get("id"),
                    name: e.get("name")
                }
            })
        }
    })
}),
define("lib/components/filter/mixins/defaults", ["require", "jquery", "underscore", "lib/common/urlparams", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/common/urlparams")
      , n = e("lib/common/fn")
      , o = e("lib/core/users")
      , r = n.getLeadsWinlostStatuses()
      , a = {
        leads: function() {
            var e = []
              , t = "";
            return (!s.getQueryParam("term") || this._searching) && (e = this.getFilterStatuses()),
            e.length && (t = this.sortFilter(e)),
            this.getDefaultFilterTagsLogic(t)
        },
        "leads-pipeline": function() {
            return a.leads.call(this)
        },
        events: function() {
            var e = AMOCRM.constant("default_filter") && AMOCRM.constant("default_filter").events || ""
              , t = e.replace(/filter\[note_type]\[]=/gi, "").split("&");
            return this.sortFilter(i.map(t, function(e) {
                return {
                    name: "filter[note_type][]",
                    value: (e || "").toString()
                }
            }))
        },
        todo: function() {
            return this.sortFilter([{
                name: "filter[task_type][]",
                value: "1"
            }, {
                name: "filter[task_type][]",
                value: "2"
            }, {
                name: "filter[status][]",
                value: "uncompl"
            }, {
                name: "filter[main_user][]",
                value: (o.current("id") || "").toString()
            }])
        },
        "todo-calendar": function() {
            return a.todo.call(this)
        },
        "todo-line": function() {
            return a.todo.call(this)
        },
        stats: function() {
            var e = [];
            switch (this.params._report_type) {
            case "consolidated":
                e = this.getFilterStatuses(),
                e.push({
                    name: "filter_date_switch",
                    value: "1"
                });
                break;
            case "goals":
                e = e.concat(i.map(o.get(), function(e) {
                    return {
                        name: "filter[main_user][]",
                        value: e.id
                    }
                })),
                e = e.concat(t.makeArray(this.$('[name="filter[group][]"]').map(function() {
                    return {
                        name: this.name,
                        value: this.value
                    }
                }))),
                e = e.concat([{
                    name: "filter[month]",
                    value: (moment().month() + 1).toString()
                }, {
                    name: "filter[year]",
                    value: moment().year().toString()
                }])
            }
            return this.sortFilter(e)
        },
        statsCalls: function() {
            var e = [{
                name: "filter_duration_from",
                value: "0"
            }, {
                name: "filter_duration_to",
                value: "1000"
            }];
            return e = e.concat(t.makeArray(this.$('[name="entity[]"]').map(function() {
                return {
                    name: this.name,
                    value: this.value
                }
            }))),
            e = e.concat(t.makeArray(this.$('[name="filter[group_id][]"]').map(function() {
                return {
                    name: this.name,
                    value: this.value
                }
            }))),
            e = e.concat(t.makeArray(this.$('[name="call_status[]"]').map(function() {
                return {
                    name: this.name,
                    value: this.value
                }
            }))),
            e = e.concat(t.makeArray(this.$('[name="call_type[]"]').map(function() {
                return {
                    name: this.name,
                    value: this.value
                }
            }))),
            this.sortFilter(e)
        }
    }
      , l = function() {
        var e = {
            filter_date_switch: ["", "created", "on"],
            fake: ["", "fake"]
        }
          , t = ["company", "main_contact"]
          , s = "filter[%s][%d]";
        return i.each(e, function(n, o) {
            i.each(t, function(t) {
                e[s.replace("%s", t).replace("%d", o)] = n
            })
        }),
        e["filter[date][type]"] = ["", "create", "on"],
        e["filter[tags_logic]"] = ["or"],
        e
    }();
    return {
        getDefaultFilter: function() {
            var e = a[AMOCRM.data.current_entity];
            return i.isFunction(e) ? e.call(this) : e
        },
        filterDefaultValues: function(e, t) {
            var s = l[e];
            return s ? i.isArray(s) ? i.contains(s, t) : s === t : !1
        },
        getFilterStatuses: function() {
            return t.makeArray(this.$('[name="filter[status_id][]"], [name^="filter[pipe]"]').filter(function() {
                return !i.contains(r, parseInt(this.value))
            }).map(function() {
                return {
                    name: this.name,
                    value: this.value
                }
            }))
        },
        sortFilter: function(e) {
            return i.chain(e).sortBy("value").map(function(e) {
                return e.name + "=" + e.value
            }).value().join("&")
        },
        getDefaultFilterTagsLogic: function(e) {
            var t = this.form.model.get("filter[tags_logic]") ? "filter[tags_logic]=or" : "";
            return e && t && (t = "&" + t),
            (e || "") + t
        }
    }
}),
define("lib/components/filter/mixins/parsing", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = function(e) {
        return t(e).map(function(e) {
            return parseInt(e)
        }).reduce(function(e, t) {
            return e + t
        }, 0)
    }
      , s = function(e, t, s) {
        for (var n = 0, o = [e]; s - 1 > n; n++)
            o.push(e += +t);
        return i(o)
    };
    return {
        parseObjectKeysForFilter: function(e, n, o) {
            var r, a, l, c, d;
            o = o || {};
            for (r in e)
                t(e).has(r) && (l = e[r],
                a = n ? n + "[" + r + "]" : r,
                t.isObject(l) ? (c = t.keys(l),
                d = t.every(c, function(e) {
                    return !t.isNaN(parseInt(e)) && !t.isObject(l[e])
                }),
                d && s(0, 1, c.length) === i(c) ? o[a + "[]"] = t.values(l) : this.parseObjectKeysForFilter(l, a, o)) : o[a] = l);
            return o
        }
    }
}),
define("lib/components/filter/mixins/multifilter", ["require", "jquery", "underscore"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore");
    return {
        cacheFilledInputName: function(e, t) {
            var s, n, o = t.closest(this._selector("entity_wrapper"));
            o.length && (s = o.data("element-type"),
            i.isArray(this.checked_fields[s]) || (this.checked_fields[s] = []),
            n = this.checked_fields[s],
            i.contains(n, e) || n.push(e))
        },
        unsetFilledInputName: function(e) {
            var s, n, o = e.find(":input:not(.js-filter-clear-skip)"), r = e.closest(this._selector("entity_wrapper"));
            if (r.length) {
                switch (s = r.data("element-type"),
                n = this.checked_fields[s],
                e.data("tmpl")) {
                case "tags":
                case "users":
                    var a = e.data("input-name");
                    i.isArray(n) && i.contains(n, a) && n.splice(i.indexOf(n, a), 1)
                }
                o.length && i.isArray(n) && t.each(o, function(e, s) {
                    var o = t(s).attr("name");
                    i.contains(n, o) && n.splice(i.indexOf(n, o), 1)
                }),
                this.setEntityWrapperClass()
            }
        },
        resetFilledInputNames: function() {
            i.isEmpty(this.checked_fields) || i.each(i.keys(this.checked_fields), function(e) {
                this.checked_fields[e] = []
            }, this)
        },
        setEntityWrapperClass: function() {
            i.each(this.checked_fields, function(e, t) {
                var i = this._findElem("entity_wrapper_by_type", t);
                i.length && this._findElem("entity_wrapper_by_type", t).toggleClass("filter-search__entity-wrapper_filled", !!e.length)
            }, this)
        }
    }
}),
define("lib/interface/fast_tags", ["require", "jquery", "underscore", "twig", "lib/components/base/suggest_manager", "lib/components/tags/api", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/components/base/suggest_manager")
      , o = e("lib/components/tags/api")
      , r = e("lib/common/user_rights");
    return n.extend({
        _skip_save: ["amoforms", "chat_send", "import"],
        _tags_for_deletion: null,
        _tags_for_addition: null,
        initialize: function(e) {
            this.options = {
                cant_add: "D" === r.getRights("tags", "add")
            },
            n.prototype.initialize.call(this, i.extend({}, e, {
                $el: e.$input_container ? e.$input_container : e.$container,
                existing_items: e.tags || {},
                can_remove: !0,
                cant_add: this.options.cant_add,
                topbar_offset: e.topbar_offset || 0,
                no_absolute_positioning: e.no_absolute_positioning,
                render_hidden: e.render_hidden,
                $relative_to: e.$relative_to,
                $container: e.$container,
                onInit: i.bind(this.onInit, this, e.onInit)
            }))
        },
        destroy: function() {
            this.hasModifications() ? this.save() : this.rerenderInput(this.old_tags),
            i.isFunction(this.options.onDestroy) && this.options.onDestroy.call(this),
            n.prototype.destroy.call(this)
        },
        onInit: function(e) {
            var t = this.options.area
              , s = i.isArray(t) ? i.map(t, function(e) {
                return "fast-tags-" + e
            }).join(" ") : "fast-tags-" + t
              , n = i.isArray(t) ? i.map(t, function(e) {
                return "fast-tags-suggest-" + e
            }).join(" ") : "fast-tags-suggest-" + t;
            this.options.area && (this.$el.addClass(s),
            this.$list.addClass(n)),
            this.old_tags = i.filter(this.options.existing_items, function(e) {
                var t = parseInt(e.id);
                return !i.isNaN(t) && t > 0
            }),
            i.isFunction(e) && e.call(this)
        },
        setPositions: function() {
            n.prototype.setPositions.apply(this, arguments),
            i.isFunction(this.options.onSetPositions) && this.options.onSetPositions.apply(this)
        },
        loadItems: function() {
            var e = this.options.entity || AMOCRM.getBaseEntity();
            this.$list.addClass("js-loading"),
            o.getFullTagsList({
                entity: e
            }).then(i.bind(function(e) {
                this.$list.removeClass("js-loading"),
                e = this.parseLoadedTags(e.items),
                this.setItems({
                    items: e,
                    selected: this.options.existing_items,
                    from_load: !0
                }),
                this.setPositions()
            }, this))
        },
        rerenderInput: function(e) {
            this.options.items_template && this.$el.replaceWith(t(s({
                ref: this.options.items_template
            }).render(i.extend({
                id: this.options.id,
                class_name: this.options.class_name || "",
                items: e
            }, this.options.onRenderItemsParams ? this.options.onRenderItemsParams(e) : {}))))
        },
        saveSuccess: function(e) {
            return this.rerenderInput(e),
            i.isFunction(this.options.onSaveSuccess) && this.options.onSaveSuccess.call(this, e),
            e
        },
        save: function() {
            var e, s = this._elem("input");
            s.val() && !this.options.cant_add && (this.$el.trigger("multisuggest:item:choose", {
                title: s.val()
            }),
            s.val("")),
            e = this.getSelectedItems(),
            this.createNewTags(e).then(i.bind(function(s) {
                return e = s,
                i.first(this.options.id) <= 0 || i.contains(this._skip_save, this.options.entity) ? Promise.resolve() : this.save_xhr = o.setTags({
                    entity: this.options.entity,
                    ids: this.options.id,
                    tags: this.prepareTagsForRequest(i.values(t.extend(!0, {}, s)), this.old_tags)
                })
            }, this)).then(i.bind(function() {
                this.saveSuccess(e)
            }, this))["catch"](i.bind(function() {
                i.isFunction(this.options.onSaveFail) && this.options.onSaveFail.call(this, {
                    items: this.old_tags
                })
            }, this))
        },
        hasModifications: function() {
            var e = this.getSelectedItems()
              , t = i.isEqual(i.sortBy(i.pluck(e, "id")), i.sortBy(i.pluck(this.old_tags, "id")));
            return !t || !(!this._elem("input").val() || this.options.cant_add)
        },
        getSelectedItems: function() {
            var e = n.prototype.getSelectedItems.apply(this, arguments);
            return i.map(e, function(e) {
                return i.extend(e, {
                    id: parseInt(e.id) || 0
                })
            })
        },
        parseLoadedTags: function(e) {
            return e
        },
        createNewTags: function(e, t) {
            var s = i.chain(e).filter(function(e) {
                return !e.id
            }).pluck("raw_title").value();
            return t = t || this.options.entity,
            new Promise(function(n, r) {
                s.length ? o.createNewTags(s, t).done(function(t) {
                    e = i(e).filter(function(e) {
                        return e.id
                    }).concat(t.items),
                    n(e)
                }).fail(r) : n(e)
            }
            )
        },
        prepareTagsForRequest: function(e, t) {
            var s = i.chain(e).filter(function(e) {
                return e.id
            }).map(function(e) {
                return parseInt(e.id)
            }).value()
              , n = i.map(t, function(e) {
                return parseInt(e.id)
            });
            return this._tags_for_deletion || (this._tags_for_deletion = []),
            i.each(i.difference(n, s), function(e) {
                var s = i.findWhere(t, {
                    id: e
                });
                this._tags_for_deletion.push(i.extend(s, {
                    deleted: !0
                }))
            }, this),
            this._tags_for_addition || (this._tags_for_addition = []),
            i.each(i.difference(s, n), function(t) {
                var s = i.findWhere(e, {
                    id: t
                });
                this._tags_for_addition.push(s)
            }, this),
            e.concat(this._tags_for_deletion)
        }
    })
}),
define("lib/components/filter/fast_tags", ["require", "underscore", "lib/components/base/suggest_manager", "lib/interface/fast_tags"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/suggest_manager")
      , s = e("lib/interface/fast_tags");
    return s.extend({
        initialize: function(e) {
            this.entity = e.entity,
            i.prototype.initialize.call(this, {
                $el: e.$el,
                $container: e.$container,
                class_name: e.class_name,
                suggest_class_name: e.suggest_class_name,
                replace: !0,
                cant_add: t.isBoolean(e.cant_add) ? e.cant_add : !0,
                items_template: e.items_template || "/tmpl/filter/tags/items.twig",
                existing_items: e.tags || {},
                preloaded_items: e.preloaded_items || [],
                onInit: e.onInit,
                onDestroy: e.onDestroy,
                onRenderItemsParams: e.onRenderItemsParams
            })
        },
        onInit: t.noop,
        destroy: function() {
            var e = t.map(this.getSelectedItems(), function(e) {
                return t.extend({
                    name: e.title
                }, e)
            });
            this.options.cant_add || this.save(),
            this.rerenderInput(e),
            t.isFunction(this.options.onDestroy) && this.options.onDestroy.call(this, e),
            i.prototype.destroy.apply(this)
        },
        setPositions: function() {
            i.prototype.setPositions.apply(this),
            this.$list.css({
                width: this.$el.width() + 5,
                left: parseFloat(this.$list.css("left")) - 3
            })
        },
        parseLoadedTags: function(e) {
            return t(e).filter(function(e) {
                return e.frequency
            })
        },
        save: function() {
            this.$el.find(".multiple-suggest__input").val("")
        }
    })
}),
define("lib/components/filter/tags_lib/fast_tags", ["require", "lib/components/filter/fast_tags"], function(e) {
    "use strict";
    var t = e("lib/components/filter/fast_tags");
    return t.extend({
        loadItems: function() {
            this.setItems({
                items: this.options.preloaded_items,
                selected: this.options.existing_items,
                from_load: !0
            }),
            this.setPositions()
        }
    })
}),
define("lib/components/filter/mixins/tags", ["require", "jquery", "underscore", "twig", "lib/components/filter/tags_lib/fast_tags", "lib/components/filter/fast_tags"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/components/filter/tags_lib/fast_tags")
      , o = e("lib/components/filter/fast_tags");
    return {
        events: {
            "click .filter-search__tags": "initTags"
        },
        initTags: function(e) {
            var s, r = t(e.currentTarget), a = r.closest(".filter-search__tags-holder");
            e.stopPropagation(),
            s = a.attr("data-subtags") ? n : o,
            this._tags = new s({
                $el: r,
                entity: a.data("element-type-name") || AMOCRM.getBaseEntity(),
                suggest_class_name: "filter__tags-suggest fast-tags-suggest-list",
                items_template: "/tmpl/filter/tags/items.twig",
                preloaded_items: this.tags_lib ? this.tags_lib.getAdditionalTags() : [],
                onRenderItemsParams: function(e) {
                    return {
                        input_name: a.data("input-name") || ""
                    }
                },
                tags: t.map(r.find(".js-multisuggest-item"), function(e) {
                    return {
                        id: parseInt(t(e).attr("data-id")) || 0,
                        name: t(e).text()
                    }
                }),
                onInit: i.bind(function() {
                    r.parent().addClass("js-in-edit"),
                    this._fixFilterForSuggest({
                        fix: !0
                    })
                }, this),
                onDestroy: i.bind(function(e) {
                    this._tags = null,
                    r.parent().removeClass("js-in-edit"),
                    this._fixFilterForSuggest({
                        fix: !1
                    }),
                    this.refreshSelectedTags(e, this.tags_lib ? this._findElem("tags_lib") : a)
                }, this)
            })
        },
        refreshSelectedTags: function(e, t) {
            var n = !0
              , o = t.data("input-name") || "tag[]";
            t = t || this._findElem("tags_field"),
            (!e || i.isArray(e) && !e.length) && (t.find(".filter-search__tags").html(s({
                ref: "/tmpl/filter/tags/items.twig"
            }).render({
                items: e || [],
                input_name: o
            })),
            this._tags && this._tags.destroy(),
            n = !1),
            this.checkSuggestValues(t, o),
            this.tags_lib && this.tags_lib.updateSelectedAdditionalTags(i.pluck(e, "id")),
            t = t.hasClass("filter__custom_settings__item_suggest-manager") ? t : t.find(".filter__custom_settings__item_suggest-manager"),
            t.toggleClass("glow", n)
        }
    }
}),
define("lib/components/filter/mixins/users_select", ["require", "underscore", "twig", "lib/interface/users_select"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/users_select");
    return {
        events: {
            "click .filter-search__users-select-holder_managers .js-multisuggest": "initUsersSelectManagers",
            "click .filter-search__users-select-holder_authors .js-multisuggest": "initUsersSelectAuthors"
        },
        usersSelectClear: function() {
            this._users_select && this._users_select.destroy(),
            this.refreshSelectedUsers.apply(this, arguments)
        },
        refreshSelectedUsers: function(e, i) {
            var s = {
                items: e || [],
                $wrapper: i
            };
            switch (i.attr("data-type")) {
            case "responsible_users":
                return this._refreshSelectedUsers(t.extend(s, {
                    title: AMOCRM.lang.filter_managers_title,
                    input_name: i.data("input-name") || "filter[main_user][]"
                }));
            case "authors":
                return this._refreshSelectedUsers(t.extend(s, {
                    title: AMOCRM.lang.filter_authors_title,
                    inner_id: "filter_users_select_authors",
                    input_name: i.data("input-name") || "filter[created_by][]"
                }))
            }
        },
        _refreshSelectedUsers: function(e) {
            var s, n, o = !0;
            e = e || {},
            s = e.$wrapper,
            n = s.find(".js-multisuggest"),
            t.isFunction(AMOCRM.data.current_view.getUsersSelectInputName) && (e.input_name = AMOCRM.data.current_view.getUsersSelectInputName()),
            (!e.items || t.isArray(e.items) && !e.items.length) && (n.replaceWith(i({
                ref: "/tmpl/users_select/users_select_items.twig"
            }).render(t.extend(e, {
                id: n.attr("id")
            }))),
            o = !1),
            this.checkSuggestValues(s, e.input_name),
            s.toggleClass("glow", o)
        },
        initUsersSelectManagers: function(e, i) {
            var n = this
              , o = $(e.currentTarget)
              , r = o.closest(".filter-search__users-select-holder")
              , a = r.data("input-name") || "filter[main_user][]";
            e.stopPropagation(),
            t.isFunction(AMOCRM.data.current_view.getUsersSelectInputName) && (a = AMOCRM.data.current_view.getUsersSelectInputName()),
            this._users_select = new s(t.extend({
                el: e.currentTarget,
                id: o.attr("id"),
                input_name: a,
                suggest_class_name: "filter__users-select-suggest",
                replace: !0,
                select_one: !1,
                not_remove: !1,
                disabled_users: this.params.disabled_users,
                existing_items: function() {
                    return $.makeArray(r.find(".js-multisuggest-item").map(function() {
                        return {
                            id: $(this).attr("data-id"),
                            title: $.trim($(this).text())
                        }
                    }))
                },
                onInit: function() {
                    this.$el.closest(".filter__custom_settings__item").addClass("js-in-edit"),
                    n._fixFilterForSuggest({
                        fix: !0
                    })
                },
                onRenderSuggest: function() {
                    this.$list.find(".users-select-row__inner").width(this.$el.width())
                },
                onItemChoosed: function() {
                    this.$el.parent().scrollTop(1e4)
                },
                onGroupChoosed: function() {
                    this.$el.parent().scrollTop(1e4)
                },
                onDestroy: function(e, t) {
                    this.$el.closest(".filter__custom_settings__item").removeClass("js-in-edit"),
                    n._fixFilterForSuggest({
                        fix: !1
                    }),
                    n.refreshSelectedUsers(e, r),
                    n._users_select = null
                }
            }, i))
        },
        initUsersSelectAuthors: function(e) {
            var t = this
              , i = $(e.currentTarget)
              , s = i.closest(".filter-search__users-select-holder")
              , n = s.data("input-name") || "filter[created_by][]";
            this.initUsersSelectManagers(e, {
                id: i.attr("id"),
                inner_id: "filter_users_select_authors",
                input_name: n,
                title: AMOCRM.lang.filter_authors_title,
                onDestroy: function(e, i) {
                    this.$el.closest(".filter__custom_settings__item").removeClass("js-in-edit"),
                    t.refreshSelectedUsers(e, s)
                }
            })
        }
    }
}),
define("lib/interface/account/mixins/cf_groups", ["require", "underscore", "jquery", "pubsub"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("pubsub");
    return s.subscribe("cf-group:toggle", function(e, t) {
        i('.js-cf-group[data-id="' + t.attr("data-id") + '"]').not(t).trigger(e)
    }),
    {
        _toggleCFGroupCallback: "_toggleCFGroup",
        events: {
            "cf-group:toggle .js-cf-group": "toggleCFGroupUI",
            "click .js-cf-group": "toggleCFGroupClick"
        },
        toggleCFGroupUI: function(e) {
            var t = i(e.currentTarget)
              , s = Math.abs(t.attr("data-folded") - 1);
            return t.attr("data-folded", s),
            this[this._toggleCFGroupCallback](t),
            s
        },
        toggleCFGroupClick: function(e) {
            var t, n = i(e.currentTarget), o = +n.data("element-type") || AMOCRM.element_types[AMOCRM.getBaseEntity()];
            0 === parseInt(n.attr("data-foldable")) || n.hasClass("need_hide") || (t = this.toggleCFGroupUI(e),
            this._toggleCFGroupAjax({
                action: "group_folding",
                id: n.attr("data-id"),
                show: t,
                element_type: o
            }),
            s.publish("cf-group:toggle", n))
        },
        _toggleCFGroupAjax: t.debounce(function(e) {
            i.ajax({
                url: "/ajax/settings/profile/",
                data: e,
                type: "POST"
            })
        }, 200),
        _toggleCFGroup: function(e) {
            var t = e.next()[0];
            "none" !== t.style.display ? t.style.display = "none" : t.style.display = ""
        }
    }
}),
define("lib/interface/controls/common", ["require", "jquery", "underscore", "vendor/device", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("vendor/device")
      , n = e("lib/common/urlparams")
      , o = document.documentElement
      , r = /^(https?:\/\/)?([0-9a-z\-\.]{1,})(\.amocrm\.(ru|com)|\.amocrm2\.saas).*/i
      , a = /^(https?:\/\/?[0-9a-z\-\.]{1,}\.amocrm\.(ru|com)|\.amocrm2\.saas)?\/\w+\/(detail)\/.*/i;
    AMOCRM.controls = {},
    AMOCRM.is_touch_device = s.tablet() && !s.windowsTablet() || s.mobile(),
    jQuery.fn.reverse = [].reverse,
    jQuery.fn.prepareTransition = function(e) {
        var s = t(this);
        return i.isFunction(e) && s.length ? setTimeout(function() {
            e.call(s[0])
        }, 0) : jQuery.contains(o, this) && s.offset(),
        s
    }
    ,
    function() {
        var e = function() {
            function e() {
                document.documentElement.style.height = window.innerHeight + "px"
            }
            var t = null;
            return function() {
                t && clearTimeout(t),
                t = setTimeout(e, 100)
            }
        }();
        /iPad/.test(navigator.platform) && /Safari/i.test(navigator.userAgent) && (window.addEventListener("scroll", e, !1),
        window.addEventListener("orientationchange", e, !1),
        e())
    }(),
    function() {
        if (window.devicePixelRatio && devicePixelRatio >= 2) {
            var e = document.createElement("div");
            e.style.border = ".5px solid transparent",
            document.body.appendChild(e),
            1 == e.offsetHeight && document.querySelector("html").classList.add("hairlines"),
            document.body.removeChild(e)
        }
    }(),
    t(document).on("page:back", function() {
        AMOCRM.router.back()
    }).on("click", ".js-card-back-button, .js-back-button", function(e) {
        e.preventDefault(),
        e.stopPropagation(),
        AMOCRM.router.back()
    }).on("click link:navigate", ".js-navigate-link", function(e) {
        var i, s = t(this), o = s.attr("href").toString().split("?"), r = "?" + o[1] || "";
        e.preventDefault(),
        e.stopPropagation(),
        e.metaKey || e.ctrlKey ? ("detail" === o[0].match(a)[3] && (r = n.setQueryParam({
            compact: "yes"
        }, {
            only_query_string: !0,
            query_string: o[1] || ""
        }) || ""),
        i = window.open(),
        i.opener = null,
        i.location = o[0] + r) : AMOCRM.router && AMOCRM.router.navigate(o.join("?"), {
            trigger: !0
        })
    }).on("click", 'a[target="_blank"]:not(.js-navigate-link)', function(e) {
        var i, s = t(this).attr("href");
        return "/" === s[0] || r.test(s) ? void 0 : (i = window.open(),
        i.opener = null,
        i.location = s,
        !1)
    }),
    t(function() {
        var e = "/frontend/images/interface/svg_sprite.svg"
          , i = Date.now();
        AMOCRM.build_hashes && (i = AMOCRM.build_hashes[e]),
        t.get(AMOCRM.static_domain + e + "?" + i, function(e) {
            var t = document.createElement("div");
            t.innerHTML = (new XMLSerializer).serializeToString(e.documentElement),
            t.childNodes[0].setAttribute("id", "svg-sprite"),
            document.body.insertBefore(t.childNodes[0], document.body.childNodes[0])
        }),
        t("html").toggleClass("touch", AMOCRM.is_touch_device).toggleClass("no-touch", !AMOCRM.is_touch_device)
    })
}),
define("lib/interface/controls/select", ["require", "jquery", "underscore"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = i(document), o = 13, r = 38, a = 40, l = 27, c = 32, d = {}, u = !1, h = !1, _ = !1, p = ".select:change", m = !1, f = "control--select--list-opened", g = "control--select--list", b = "control--select--button", v = "control--select--list--item", y = "control--select--list--item-selected", w = "control--select--list--item-key_selected", C = function() {
        AMOCRM.is_touch_device && document.activeElement && document.activeElement.blur()
    }, k = function() {
        AMOCRM.controls.$cur_select && (AMOCRM.controls.$cur_select.trigger("controls:select:hide", [AMOCRM.controls.$cur_select.find(":input").val()]).css("z-index", "").children(".control--select--list-opened").removeClass("control--select--list-to-top control--select--list-opened").addClass("control--select--list"),
        AMOCRM.controls.$cur_select = !1)
    }, x = function(e) {
        var t = e
          , i = t.closest(".control--select");
        t.addClass(f).removeClass(g),
        i.css("z-index", 60),
        t.css("z-index", 30),
        u = i,
        AMOCRM.controls.$cur_select = u
    }, M = function(e) {
        var t = i("." + f);
        t.length > 0 && j(t)
    }, A = function() {
        var e = i("." + f);
        return e.length > 0 ? !0 : void 0
    }, O = function(e) {
        var t = e.element
          , i = e.selector;
        0 == t.find("." + i).length && t.find("." + i + ":first").addClass(i)
    }, $ = function(e) {
        var t = e.$ul;
        t.hasClass(f) && E(e)
    }, T = function(e) {
        var i, s, n, o, l = e.$ul, c = e.keyCode, d = {
            params: e,
            is_closed: !0,
            step: ""
        };
        e.event.preventDefault(),
        c == r ? d.step = "prev" : d.step = "next",
        l.hasClass(f) ? (d.is_closed = !1,
        S(d),
        i = t.position().top,
        s = t.outerHeight(),
        n = l.height(),
        o = l.scrollTop(),
        c == a && (i + s > n || 0 > i) ? e.$ul.scrollTop(o + s + i - n) : c == r && (0 > i || i > n) && l.scrollTop(o + i)) : S(d)
    }, S = function(e) {
        var i, s, n, o = e.is_closed, r = e.step, a = e.params, l = {
            element: a.$ul,
            selector: ""
        }, c = {
            $ul: a.$ul,
            element: {
                current: "",
                next: "",
                selector: ""
            },
            keyCode: a.keyCode
        };
        return n = o ? y : w,
        l.selector = n,
        O(l),
        i = a.$ul.find("." + n),
        s = i[r]("." + v),
        c.element.current = i,
        c.element.next = s,
        c.element.selector = n,
        E(c) === !1 ? !1 : void (t = s)
    }, E = function(e) {
        var t, s, n = e.keyCode, o = e.$ul;
        if (n == r || n == a) {
            if (t = e.element,
            0 == t.next.length)
                return !1;
            if (!o.hasClass(f) && i("#cf_types_wrapper").length > 0)
                return t.current.trigger("click"),
                !1;
            t.current.removeClass(t.selector),
            t.next.addClass(t.selector),
            o.hasClass(f) || t.next.trigger("click")
        } else {
            if (s = o.find("." + y),
            0 != s.length && s.removeClass(y),
            s = o.find("." + w),
            s.length && s.attr("data-disabled"))
                return !0;
            s.addClass(y)
        }
        return !0
    }, j = function(e) {
        var t = e
          , i = t.closest(".control--select")
          , s = t.find("." + w);
        _ || (0 != s.length && s.removeClass(w),
        t.removeClass("control--select--list-to-top").removeClass(f).addClass(g),
        i.trigger("controls:select:hide").css("z-index", ""),
        t.css("z-index", ""),
        u = !1,
        AMOCRM.controls.$cur_select = !1)
    }, R = function(e) {
        return e[0] === document.body ? !1 : "hidden" == e.css("overflow") || "scroll" == e.css("overflow") || "scroll" == e.css("overflow-x") || "scroll" == e.css("overflow-y") || "hidden" == e.css("overflow-x") || "hidden" == e.css("overflow-y") ? e : R(e.parent())
    };
    return d[o] = function(e) {
        $(e)
    }
    ,
    d[c] = function(e) {
        $(e)
    }
    ,
    d[a] = function(e) {
        T(e)
    }
    ,
    d[r] = function(e) {
        T(e)
    }
    ,
    d[l] = function(e) {
        u && j(e.$ul)
    }
    ,
    n.on("keydown" + p, "." + b, function(e) {
        var t = i(this)
          , n = t.closest(".control--select")
          , o = n.find("ul");
        return s.isFunction(d[e.keyCode]) ? d[e.keyCode].call(this, {
            $wrapper: n,
            $ul: o,
            name: n.find("input").attr("name"),
            event: e,
            keyCode: e.keyCode
        }) : void 0
    }).on("mousedown" + p + " touchstart" + p, ".control--select--list-opened", function(e) {
        _ = !0
    }).on("mousedown" + p + " touchstart" + p, ".control--select--list--item", function() {
        h = !0
    }).on("blur" + p, "." + b, function(e) {
        h && A() === !0 ? setTimeout(M, 200) : M(),
        h = !1,
        _ = !1
    }).on(" click", function(e) {
        M()
    }).on("controls:change controls:change:visual", ".control--select--input", function(e) {
        var t, s, n = i(this), o = n.closest(".control--select"), r = o.find("ul"), a = o.find("." + b), l = n.val().toString(), c = r.find('.control--select--list--item[data-value="' + l + '"], .control--select--list--item[data-value="' + l.replace("+", " ") + '"]');
        r.find("." + y).removeClass(y),
        c.length ? (c.addClass(y),
        t = c) : (t = r.find(".control--select--list--item-default"),
        t.length || (t = r.find(".control--select--list--item:first")),
        t.addClass(y),
        n.val(t.attr("data-value"))),
        s = t.attr("data-bg-color"),
        a.css("background", s || "").attr("data-value", t.attr("data-value")).children().text(t.text()),
        "controls:change:visual" !== e.type && n.change()
    }).on("controls:change controls:select:hide", ".control--select-save-overflow", function() {
        var e = i(this);
        e.data("select") && (e.data("select").find('input[type="hidden"]').val(e.find('input[type="hidden"]').val()).trigger("controls:change"),
        m && m.off("scroll" + this.ns),
        AMOCRM.controls.$cur_select && (AMOCRM.controls.$cur_select.remove(),
        AMOCRM.controls.$cur_select = !1))
    }).on(s(["mousedown", "touchstart"]).map(function(e) {
        return e + p
    }, this).join(" "), ".control--select[data-save-overflow]", function(e) {
        var t, n = i(this).closest(".control--select"), o = n.attr("data-overflow-container"), r = n.offset(), a = R(n.parent());
        return k(),
        (m = o ? i(o) : a) ? (t = m.offset(),
        AMOCRM.controls.$cur_select = n.clone().removeAttr("data-save-overflow").addClass("control--select-save-overflow").css({
            top: r.top - t.top,
            left: r.left - t.left,
            width: n.width()
        }).data("select", n),
        a.one("scroll", s.bind(function() {
            k()
        }, this)),
        m.parent().append(AMOCRM.controls.$cur_select),
        AMOCRM.controls.$cur_select.find(".control--select--list--item-selected").trigger("click"),
        !1) : !0
    }).on("click" + p, "." + b, function(e) {
        var t = i(this)
          , s = t.closest("div.control--select")
          , n = s.find("ul");
        n.find("." + y).trigger("click"),
        e.stopPropagation()
    }).on("click" + p, ".control--select--list--item", function(e) {
        var t, s, o = i(this), r = o.closest("div.control--select"), a = r.find("." + b), l = r.find("ul"), c = o.index(), d = !1;
        return o.attr("data-disabled") || r.attr("data-save-overflow") ? !1 : (l.hasClass(f) && (r.find(".control--select--button--placeholder").hide(),
        t = r.find(':input[type="hidden"]'),
        l.find("." + y).removeClass(y),
        o.addClass(y),
        a.attr("data-value", o.attr("data-value")).children().text(o.text()),
        t.attr("data-prev-value", t.val()).val(o.attr("data-value")).trigger("controls:change"),
        _ = !1,
        j(l),
        d = !0),
        o.hasClass(y) && !d && l.hasClass(g) && (n.trigger({
            type: "controls:hide",
            target: r.get(0)
        }),
        C(),
        AMOCRM.is_touch_device && M(),
        x(l),
        l.find("." + y).addClass(w),
        l[l.visible() ? "removeClass" : "addClass"]("control--select--list-to-top").trigger("controls:select:open"),
        c = l.find("." + y).index(),
        s = c >= 0 ? l.find(".control--select--list--item:first").outerHeight() : !1,
        s && c >= 0 && l.scrollTop(s * c - 4 * s)),
        a.is(":focus") || AMOCRM.is_touch_device || a.focus(),
        e.stopPropagation(),
        void e.preventDefault())
    }),
    !0
}),
define("lib/interface/controls/pipeline/select", ["require", "underscore", "jquery", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("lib/common/fn")
      , n = i(document)
      , o = i(window)
      , r = '<div class="default-overlay pipeline-select-overlay" id="pipeline_select_overlay"></div>'
      , a = {
        wrapper: ".pipeline-select-wrapper_plain",
        inner: ".pipeline-select-wrapper__inner_plain",
        holder: ".pipeline-select-wrapper__inner__holder",
        container: ".pipeline-select-wrapper__inner__container",
        item: ".pipeline-select__dropdown__item",
        pipeline: ".pipeline-select",
        pipeline_radio: ".pipeline-select__pipeline-input",
        pipeline_caption: ".pipeline-select__caption",
        pipeline_caption_inner: ".pipeline-select__caption__inner",
        pipeline_caption_text: ".pipeline-select__caption-text",
        pipeline_selected: ".pipeline-select__pipeline-selected",
        pipeline_checkbox: '.pipeline-select__caption input[type="checkbox"]',
        status_radio: ".pipeline-select__dropdown__item__input",
        status_checkbox: '.pipeline-select__dropdown__item__label input[type="checkbox"]'
    }
      , l = {}
      , c = 27
      , d = !1
      , u = null
      , h = null
      , _ = null;
    l.reposition = function(e, t, i) {
        var s = e.offset()
          , n = o.scrollTop();
        t || (t = u),
        i || (i = t.children(a.holder)),
        i.css({
            left: s.left - 65,
            top: s.top - n,
            paddingBottom: o.height() - (s.top + e.height() + 9) + n
        }),
        i.css({
            width: e.width()
        })
    }
    ,
    l.captionCentrify = function(e) {
        var t = e.children(a.pipeline_caption)
          , i = e.closest(a.holder).find(a.pipeline)
          , s = i.map(function(t, i) {
            return this === e[0] ? t : void 0
        })[0];
        e.closest(a.inner).scrollTop(s * (t[0].offsetHeight + 5))
    }
    ,
    l.updateSelectedPipeline = function(e) {
        var t = e.find(a.pipeline_radio + ":checked");
        e.find(a.pipeline_selected).val(t.val())
    }
    ,
    l.hideSelect = function(e) {
        var s, n, o, r, l, c = h;
        h && (h.append(u),
        s = i("#pipeline_select_overlay"),
        n = c.find(a.holder),
        o = c.find(a.pipeline_radio),
        r = c.find(a.pipeline_selected),
        l = r.val(),
        l || (l = c.find(a.pipeline_radio + ":first").val()),
        c.addClass("folded"),
        n.attr("style", ""),
        s.trigger("overlay:hide", {
            instantly: !0
        }),
        o.removeProp("checked").removeAttr("checked").each(function() {
            i(this).val().toString() === l.toString() && i(this).prop("checked", !0).attr("checked", "checked").trigger({
                type: "change",
                _is_trigger: !0
            })
        }),
        r.trigger("change"),
        c.hasClass("multiple") ? c.find('input[type="checkbox"]').trigger("change") : c.find(a.status_radio + ":checked").trigger("change").closest(a.item).addClass("pipeline-select__dropdown__item_selected"),
        i(document.body).removeClass("pipeline-select-showed"),
        u.removeClass("active"),
        u = null,
        h = null,
        d = !0,
        t.delay(function() {
            d = !1
        }, 300))
    }
    ,
    l.resetSelect = function(e) {
        var t, i;
        _ && (t = _.find('[name="lead[PIPELINE_ID]"]').val(),
        i = _.find('[name="lead[STATUS]"]:checked').val(),
        _.find(".pipeline-select__dropdown__item").removeClass("pipeline-select__dropdown__item_selected"),
        _.find("input.pipeline-select__pipeline-input").removeAttr("checked").closest('[value="' + t + '"]').attr("checked", "checked").next(".pipeline-select").find('input[name="lead[STATUS]"][value="' + i + '"]').closest(".pipeline-select__dropdown__item").addClass("pipeline-select__dropdown__item_selected"))
    }
    ,
    o.on("resize", function() {
        h && l.reposition(h)
    }),
    n.on("control:select:reset", l.resetSelect).on("page:change:start page:change:stop", l.hideSelect).on("click", a.inner + ", .pipeline-select__dropdown__item_selected", l.hideSelect).on("keydown", "body.pipeline-select-showed", function(e) {
        e.keyCode === c && (e.stopPropagation(),
        e.preventDefault(),
        l.hideSelect())
    }).on("click", a.wrapper + ".folded " + a.holder, function(e) {
        var t = i(this).closest(a.wrapper)
          , s = t.children(a.inner)
          , n = s.children(a.holder)
          , o = i(r);
        d || (e.stopPropagation(),
        _ = h = t,
        u = s,
        i(document.body).addClass("pipeline-select-showed").append(s),
        u.addClass("active"),
        t.removeClass("folded"),
        l.reposition(t, s, n),
        l.captionCentrify(s.find(a.pipeline_radio + "[checked] + " + a.pipeline)),
        s.append(o),
        t.focus(),
        o.trigger("overlay:show"))
    }).on("click", ".pipeline-select-showed " + a.inner + " " + a.container, function(e) {
        e.stopPropagation()
    }).on("change", a.inner + " " + a.status_radio, function(e) {
        e.isTrigger || (i(this).closest(a.holder).find(a.status_radio + "[checked]").removeAttr("checked"),
        i(this).closest(a.holder).find(a.item).removeClass("pipeline-select__dropdown__item_selected"),
        l.updateSelectedPipeline(i(e.currentTarget).closest(a.holder)),
        l.hideSelect())
    }).on("change", a.inner + " " + a.pipeline_radio, function(e) {
        var t, s = i(this);
        e._is_trigger || (t = s.closest(a.holder),
        e.stopPropagation(),
        l.captionCentrify(s.next(a.pipeline)),
        t.find(a.pipeline_radio).not(s).removeProp("checked").removeAttr("checked"),
        "unsorted" === s.attr("data-type") && s.next().find("input").trigger("click"))
    }).on("change", a.inner + " " + a.pipeline_checkbox, function(e) {
        var t = i(this)
          , s = this.checked;
        s || t.next(".control-checkbox__helper").removeClass("icon icon-check-minus"),
        e.isTrigger || t.closest(a.pipeline).find(a.status_checkbox).each(function() {
            this.checked = s
        })
    }).on("change", a.inner + " " + a.status_checkbox, function() {
        var e, t, n, o, r = i(this), l = r.closest(a.holder), c = r.closest(a.pipeline), d = c.find(a.status_checkbox), u = c.find(a.pipeline_checkbox), h = l.find(a.pipeline_caption_text);
        switch (u.next(".control-checkbox__helper").removeClass("icon icon-check-minus"),
        d.filter(function() {
            return this.checked
        }).length) {
        case d.length:
            u[0].checked = !0;
            break;
        case 0:
            u[0].checked = !1;
            break;
        default:
            u[0].checked = !0,
            u.next(".control-checkbox__helper").addClass("icon icon-check-minus")
        }
        e = l.find(a.status_checkbox),
        t = l.find(a.pipeline_checkbox),
        n = e.filter(function() {
            return this.checked
        }).length,
        o = t.filter(function() {
            return this.checked
        }).length,
        n ? h.attr("data-statuses-count", n === e.length ? AMOCRM.lang.all : n) : h.removeAttr("data-statuses-count"),
        o ? h.attr("data-pipelines-count", o === t.length ? AMOCRM.lang.all : o) : h.removeAttr("data-pipelines-count"),
        h.attr("data-statuses-numeral", s.numeralWord(n && n !== e.length ? n : "all", AMOCRM.lang.filter_statuses_label)),
        h.attr("data-pipelines-numeral", s.numeralWord(o && o !== t.length ? o : "all", AMOCRM.lang.filter_pipelines_label))
    })
}),
define("lib/interface/controls/suggest", ["require", "jquery", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t, i, s, n, o = e("jquery"), r = e("underscore"), a = e("lib/common/fn"), l = {
        cache: {}
    }, c = {}, d = o(document), u = !1;
    return l.filterData = function(e) {
        var t = []
          , s = !0
          , n = e.val
          , o = l.cache[e.cache_id];
        return o ? (i = o,
        s = !1,
        o.expire < (new Date).getTime() && (l.cache[e.cache_id] = void 0,
        o = void 0)) : i && i.cache_type_id == e.cache_type_id && n.indexOf(i.val) >= 0 && (o = i,
        r.keys(o.result).length || (s = !1)),
        o && o.result && (t = r.filter(o.result, function(t) {
            var i = a.stripTags(t.name || "").replace(/Є/gi, "е").toLowerCase()
              , s = r.escape(n.toLowerCase()).split(" ")
              , o = [];
            switch (e.type) {
            case "email":
                return i = t.email ? (a.stripTags(r.isArray(t.email) ? t.email.join(",") : t.email) || "").toString().toLowerCase() : "",
                i.indexOf(n.toLowerCase()) >= 0;
            case "phone":
                return i = t.phone ? a.stripTags(r.isArray(t.phone) ? t.phone.join(",") : t.phone).replace(/[^\d]/gi, "") : "",
                i.indexOf(n.toLowerCase()) >= 0;
            case "leads_concat":
                return o = r.filter(s, function(e) {
                    return t.text != t.text.replace(new RegExp("(\\s|[\\>\\@\\.\\)]|^)([^a-zа-€Є0-9]*)(" + e + ")","gi"), "")
                }),
                o.length === s.length;
            default:
                return o = r.filter(s, function(e) {
                    return i != i.replace(new RegExp("(\\s|^)*([^a-zа-€Є0-9]*)(" + e + ")","gi"), "") ? !0 : !1
                }),
                o.length === s.length
            }
        }),
        t.length && (s = !1,
        l.last_ajax && l.last_ajax.abort())),
        {
            need_ajax: s,
            result: t.slice(0, 10),
            status: "ok"
        }
    }
    ,
    l.highlight = function(e, t, i) {
        if (!e || !t)
            return !1;
        var s = e.split(" ")
          , n = "";
        switch (i) {
        case "phone":
            n = e.replace(/([+*?)(=\-_&^:;%$#!{}|'"/.,@\\])/gi, ""),
            n = e.length < 50 ? n.replace(/(.)/gi, "$1[^\\d]*?").slice(0, -7) : n,
            t = t.replace(new RegExp("(" + n.toLowerCase() + ")","gi"), "<b>$1</b>");
            break;
        case "email":
            n = e.replace(/(\\)/gi, ""),
            t = t.replace(new RegExp("(" + n.toLowerCase() + ")","gi"), "<b>$1</b>");
            break;
        default:
            r.each(s, function(e) {
                t = t.replace(new RegExp("([^a-zа-€Є0-9]*)(?!<b[^>]*?>)(" + e.toLowerCase() + ")(?![^<]*?<\\/b>)","gi"), "$1<b>$2</b>")
            })
        }
        return t
    }
    ,
    l.getSuggests = function(e) {
        var t = l.filterData({
            cache_id: l.generateCacheId(e.$this, e.val),
            cache_type_id: l.generateCacheId(e.$this),
            val: e.val,
            type: e.type
        });
        (!t.need_ajax || t.result.length) && l.processData(t, e),
        t.need_ajax && l.throttledRequest(e)
    }
    ,
    l.processData = function(e, t) {
        return l.getVal(t.$this) && (t.$parent.removeClass("control--suggest-loading").children(".control--suggest--loader").remove(),
        t.$this.trigger("suggest:loaded", [e, t.$list])),
        e
    }
    ,
    l.sendRequest = function(e) {
        if (l.last_ajax && r.isUndefined(l.last_ajax.status) && l.last_ajax.abort(),
        e.$parent.hasClass("control--suggest-loading") || e.$parent.addClass("control--suggest-loading").append('<span class="control--suggest--loader spinner-icon"></span>'),
        e.$this.attr("data-widget")) {
            var t = e.$this.attr("data-widget")
              , i = {
                result: ""
            };
            r.isFunction(AMOCRM.widgets.list[t].callbacks.searchDataInCard) && AMOCRM.widgets.list[t].callbacks.searchDataInCard(e.val, AMOCRM.data.current_card.element_type, AMOCRM.data.current_card.id).then(r.bind(function(t) {
                i.result = t,
                l.prepareData(e, i)
            }, this))["catch"](r.bind(function(e) {
                console.error(e)
            }, this))
        } else
            l.last_ajax = o.ajax({
                url: e.$this.attr("data-url"),
                data: e.$this.attr("data-params").toString().replace("#q#", encodeURIComponent(e.val)),
                val: e.val,
                success: function(t, i, s) {
                    t && t.response && t.response.catalog_elements && (t = {
                        result: t.response.catalog_elements
                    }),
                    l.prepareData(e, t)
                },
                error: function() {
                    e.$parent.removeClass("control--suggest-loading").children(".control--suggest--loader").remove()
                },
                dataType: "json"
            })
    }
    ,
    l.prepareData = function(e, t) {
        var i = l.generateCacheId(e.$this, e.val)
          , s = l.generateCacheId(e.$this)
          , n = l.getVal(e.$this);
        e.no_filter ? l.processData(t, e) : (l.cache[i] = r.extend(t, {
            val: e.val,
            expire: (new Date).getTime() + 3e5
        }),
        l.processData(l.filterData({
            cache_id: i,
            cache_type_id: s,
            val: n,
            type: e.type
        }), e))
    }
    ,
    l.generateCacheId = function(e, t) {
        return e.attr("data-url") + e.attr("data-params") + (t || "")
    }
    ,
    l.keyboardHide = function() {
        AMOCRM.is_touch_device && document.activeElement && document.activeElement.blur()
    }
    ,
    l.getVal = function(e) {
        var t = o.trim(e.val()) || "";
        return "phone" === e.attr("data-type") && (t = t.replace(/[^\d]/gi, "").toString()),
        t.toLowerCase().replace(/Є/gi, "е")
    }
    ,
    l.reset = function(e, t, i, s) {
        var c = t.closest(".control--suggest")
          , d = c.find(".control--suggest--input")
          , u = d.attr("data-val")
          , h = ""
          , _ = r.template(s || '<li data-value-id="<%= data.id %>" company-id ="<%= data.company_id %>" data-contact-id="<%= data.contact_id %>" class="control--suggest--list--item <%= data.custom_class %>" <%= data.additional_data %>><span class="control--suggest--list--item-inner" title="<%= data.title %>"><%= data.highlighted_text %></span></li>');
        o.each(i, function(e, t) {
            h += _({
                data: r.extend({}, t, {
                    highlighted_text: l.highlight(u, (t.text || "").replace(/\<\/?b\>/gi, "").replace(/Є/gi, "е"), c.find(".control--suggest--input").attr("data-type")),
                    title: a.stripTags(t.title ? t.title : t.text)
                })
            })
        }),
        t.html(h),
        h.length && d.is(":focus") ? (t.removeClass("control--suggest--list").addClass("control--suggest--list-opened"),
        c.css("z-index", parseInt(c.css("z-index")) + 2),
        n = c) : (t.removeClass("control--suggest--list-opened").addClass("control--suggest--list"),
        c.css("z-index", ""))
    }
    ,
    l.throttledRequest = r.throttle(function(e) {
        l.sendRequest({
            type: e.type,
            no_filter: e.no_filter,
            $this: e.$this,
            $parent: e.$parent,
            $list: e.$list,
            val: e.val
        })
    }, 700),
    c[40] = function(e) {
        var t, i = e.$list.scrollTop();
        e.$selected.length ? e.$selected.is(":last-child") || (t = e.$selected.siblings("." + e.item_class + ":visible").andSelf().index(e.$selected),
        t < e.$list.find("." + e.item_class + ":visible").length - 1 && (e.$selected.removeClass(e.item_class + "-selected"),
        e.$selected = e.$list.find("." + e.item_class + ":visible:eq(" + (t + 1) + ")").addClass(e.item_class + "-selected"),
        i += e.$selected.outerHeight())) : e.$list.find("." + e.item_class + ":visible:first").addClass(e.item_class + "-selected"),
        e.$list.scrollTop(i)
    }
    ,
    c[38] = function(e) {
        var t, i = e.$list.scrollTop();
        return e.$selected.length ? (e.$selected.is(":first-child") || (t = e.$selected.siblings("." + e.item_class + ":visible").andSelf().index(e.$selected),
        t > 0 && (e.$selected.removeClass(e.item_class + "-selected"),
        e.$selected = e.$list.find("." + e.item_class + ":visible:eq(" + (t - 1) + ")").addClass(e.item_class + "-selected"),
        i -= e.$selected.outerHeight())),
        void e.$list.scrollTop(i)) : !1
    }
    ,
    c[13] = function(e) {
        return e.$selected.length ? (e.$selected.trigger("click"),
        !1) : void 0
    }
    ,
    c[27] = function(e) {
        l.processData({
            result: []
        }, e)
    }
    ,
    d.on("page:changed", function() {
        l.cache = {}
    }).on("keyboard:hide", l.keyboardHide).on("controls:hide:private", function(e, t) {
        !n || t && "suggest" !== t || n.hasClass("catalog-fields__search") || (n.find(".control--suggest--list-opened").removeClass("control--suggest--list-opened").addClass("control--suggest--list").css("display", ""),
        l.keyboardHide(),
        n.css("z-index", ""),
        n = !1)
    }).on("click focus", ".control--suggest--input", function(e) {
        var t, i, s, r = o(this), a = r.parent();
        a.find(".control--suggest--list--item").length && (n = a,
        a.css("z-index", parseInt(a.css("z-index")) + 1),
        t = a.find(".control--suggest--list, .control--suggest--list-opened").removeClass("at-top control--suggest--list").addClass("control--suggest--list-opened").css("display", ""),
        t.visible() || t.addClass("at-top"),
        i = t.find(".control--suggest--list--item-selected").index(),
        s = i >= 0 ? t.find(".control--suggest--list--item:first").outerHeight() : !1,
        a.find(".control--suggest--list--item").each(function() {
            o(this).show()
        }),
        s && i >= 0 && t.scrollTop(s * i - 4 * s)),
        r.trigger("controls:suggest:focus"),
        e.stopPropagation()
    }).on("input", ".js-control--suggest--input", function(e) {
        var t = o(this)
          , i = t.parent()
          , s = i.find(".control--suggest--list--item")
          , n = i.find(".js-control--suggest--list")
          , r = l.getVal(t)
          , a = !0;
        t.is(":focus") && (n.show().removeClass("control--suggest--list").addClass("control--suggest--list-opened"),
        r ? (s.each(function() {
            var e = o(this)
              , t = (o.trim(e.text()) || "").toLowerCase();
            0 === t.indexOf(r) || 0 === t.indexOf("0" + r) ? (a = !1,
            e.show()) : (e.hide(),
            e.hasClass("control--suggest--list--item-selected") && e.removeClass("control--suggest--list--item-selected"))
        }),
        a && n.hide()) : s.length ? s.show() : n.hide())
    }).on("suggest:reset", ".js-control--suggest--list", function(e, t, i) {
        l.reset(e, o(this), t, i)
    }).on("mousedown", ".control--suggest--list--item", function() {
        s = !0
    }).on("blur", ".js-control--suggest--input-ajax", function() {
        var e = o(this).parent();
        e.removeClass("control--suggest-loading").children(".control--suggest--loader").remove(),
        s || setTimeout(function() {
            o(document).trigger("controls:hide:only", ["suggest"])
        }, 100)
    }).on("input", ".js-control--suggest--input-ajax", function() {
        var e = o(this)
          , t = e.parent()
          , i = t.find(".js-control--suggest--list")
          , n = l.getVal(e);
        s = !1,
        n.length >= 3 ? (e.attr("data-val", n),
        l.getSuggests({
            type: e.attr("data-type"),
            no_filter: Boolean(e.attr("data-no-filter")) || !1,
            $this: e,
            $parent: t,
            $list: i,
            val: n
        })) : (i.html("").removeClass("control--suggest--list-opened").addClass("control--suggest--list"),
        t.css("z-index", "").children(".control--suggest--loader").remove())
    }).on("click suggest:item:click", ".control--suggest--list--item", function(e) {
        var t = o(this)
          , i = t.closest(".control--suggest");
        return e.stopPropagation(),
        t.hasClass("js--suggest-item--not-selectable") ? !1 : (i.find(".control--suggest--list--item-selected").removeClass("control--suggest--list--item-selected"),
        t.addClass("control--suggest--list--item-selected"),
        i.find(".control--suggest--input").val(o.trim(t.text())).attr("data-value-id", t.attr("data-value-id")).trigger("controls:change").trigger("suggest:changed", [t.clone()]).trigger("focus"),
        i.find(".js-control--suggest--list").removeClass("control--suggest--list-opened").addClass("control--suggest--list"),
        void t.trigger("suggest:click", [t]))
    }),
    d.on("mousemove", ".control--suggest--list-opened", function(e) {
        var t = o(this);
        u || t.removeClass("control--suggest--list-navigate-by-key").find(".control--suggest--list--item-selected").removeClass("control--suggest--list--item-selected")
    }).on("keyup", ".control--suggest--input", function(e) {
        t = setTimeout(function() {
            u = !1
        }, 100)
    }).on("keydown", ".control--suggest--input", function(e) {
        var i, s, n = o(this), a = n.hasClass("control--suggest--input") ? !1 : !0, l = a ? n.closest(".multisuggest").find(".multisuggest__suggest") : n.parent().find(".control--suggest--list-opened"), d = a ? "multisuggest__suggest__item" : "control--suggest--list--item";
        return l.length && l.is(":visible") && r.isFunction(c[e.keyCode]) ? (clearTimeout(t),
        u = !0,
        s = l.find("." + d + ":hover"),
        i = l.find("." + d + "-selected"),
        i.length || (i = s),
        l.addClass("control--suggest--list-navigate-by-key"),
        c[e.keyCode]({
            $this: n,
            $parent: n.closest("control--suggest"),
            $selected: i,
            $list: l,
            item_class: d
        }),
        !1) : void 0
    }),
    l
}),
define("lib/interface/controls/date_filter", ["require", "jquery"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = {};
    return i.getDateString = function(e, t) {
        var i = ""
          , s = e.getSelectedRaw();
        return t = t || AMOCRM.system.format.date.date,
        i = !s[1] && s[0] ? s[0].isBefore(moment().tz(AMOCRM.system.timezone)) ? s[0].format(t) + " - " + moment().format(moment().lang().calendar("today")) : s[0].format(t) : e.getSelectedAsText().join(" - ")
    }
    ,
    t(document).on("click", ".date_filter__head", function(e) {
        var i = t(this).parent().find(".date_filter__dropdown");
        e.stopPropagation(),
        t(document).trigger("controls:hide"),
        i.toggle()
    }).on("change", '.date_filter__param__toggler input[type="radio"]', function() {
        var e, s, n, o = t(this), r = o.closest("label"), a = t.trim(r.text()), l = "";
        this.checked ? (n = o.closest(".date_filter__dropdown").find(".js-date-filter-input").data("kalendae"),
        r.parent().find(".control-toggler__item-selected").removeClass("control-toggler__item-selected"),
        r.addClass("control-toggler__item-selected"),
        n && (e = n.getSelected(),
        l = i.getDateString(n),
        s = r.closest(".date_filter").find(".date_filter__period"),
        e && e.length ? (t(n.input).val(l),
        l = (a ? a + ": " : "") + l,
        s.text(l).attr("title", l)) : s.text(s.attr("data-before")))) : r.hasClass("first") || r.parent().find(".control-toggler__item.first").find("input").prop("checked", !0).trigger("change")
    }).on("controls:change", ".date_field__range_0, .date_field__range_1", function() {
        var e = t(this)
          , i = e.val()
          , s = e.parent()
          , n = s.find(".date_field")
          , o = n.trigger("controls:date").data("kalendae");
        o && (e.val(i),
        i ? o.addSelected(i) : e.hasClass("date_field__range_0") && o.setSelected(""),
        o.getSelected().toString().length ? s.find(".date_field--clear").show() : s.find(".date_field--clear").hide(),
        t(o.input).trigger("controls:change", [o.getSelected()]),
        s.closest(".date_filter__dropdown").find('input[type="radio"]:checked').trigger("change"))
    }).on("click", ".date_filter__period_item", function() {
        var e = t(this)
          , i = e.closest(".date_filter__dropdown").find(".date_field")
          , s = i.trigger("controls:date").data("kalendae")
          , n = parseInt(moment().tz(AMOCRM.system.timezone).quarter())
          , o = ""
          , r = e.closest(".date_filter");
        switch (r.find(".custom_select__input").val(""),
        e.attr("data-period")) {
        case "tomorrow":
            o = moment().tz(AMOCRM.system.timezone).add("days", 1).format(AMOCRM.system.format.date.date);
            break;
        case "current_day":
            o = moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date);
            break;
        case "current_week":
            o = moment().tz(AMOCRM.system.timezone).weekday(0).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).weekday(6).format(AMOCRM.system.format.date.date);
            break;
        case "current_month":
            o = moment().tz(AMOCRM.system.timezone).startOf("month").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).endOf("month").format(AMOCRM.system.format.date.date);
            break;
        case "current_quarter":
            o = moment().tz(AMOCRM.system.timezone).month(3 * n - 3).startOf("month").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).month(3 * n - 1).endOf("month").format(AMOCRM.system.format.date.date);
            break;
        case "current_year":
            o = moment().tz(AMOCRM.system.timezone).startOf("year").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).endOf("year").format(AMOCRM.system.format.date.date);
            break;
        case "previous_week":
            o = moment().tz(AMOCRM.system.timezone).subtract("week", 1).weekday(0).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).subtract("week", 1).weekday(6).format(AMOCRM.system.format.date.date);
            break;
        case "previous_month":
            o = moment().tz(AMOCRM.system.timezone).subtract("month", 1).startOf("month").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).subtract("month", 1).endOf("month").format(AMOCRM.system.format.date.date);
            break;
        case "previous_quarter":
            o = moment().tz(AMOCRM.system.timezone).subtract("quarter", 1).startOf("quarter").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).subtract("quarter", 1).endOf("quarter").format(AMOCRM.system.format.date.date);
            break;
        case "previous_year":
            o = moment().tz(AMOCRM.system.timezone).subtract("year", 1).startOf("year").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).subtract("year", 1).endOf("year").format(AMOCRM.system.format.date.date);
            break;
        case "next_3_days":
            o = moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).add("days", 3).format(AMOCRM.system.format.date.date);
            break;
        case "next_week":
            o = moment().tz(AMOCRM.system.timezone).add("week", 1).weekday(0).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).add("week", 1).weekday(6).format(AMOCRM.system.format.date.date);
            break;
        case "next_month":
            o = moment().tz(AMOCRM.system.timezone).add("month", 1).startOf("month").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).add("month", 1).endOf("month").format(AMOCRM.system.format.date.date);
            break;
        case "next_quarter":
            o = moment().tz(AMOCRM.system.timezone).add("quarter", 1).startOf("quarter").format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).add("quarter", 1).endOf("quarter").format(AMOCRM.system.format.date.date);
            break;
        case "0":
        case "ignore":
            o = "",
            r.find("[class ^= date_field__range_]").val(""),
            r.find(".date_filter__period").text(e.find("span").attr("title")),
            r.find(".custom_select__input").val(0);
            break;
        case "1":
        case "today":
            o = moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date);
            break;
        case "2":
        case "past_3_days":
            o = moment().tz(AMOCRM.system.timezone).subtract("days", 3).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date);
            break;
        case "3":
        case "this_week":
            o = moment().tz(AMOCRM.system.timezone).subtract("week", 1).weekday(0).add("days", 1).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date);
            break;
        case "4":
        case "this_month":
            o = moment().tz(AMOCRM.system.timezone).subtract("months", 1).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date);
            break;
        case "5":
        case "this_quarter":
            o = moment().tz(AMOCRM.system.timezone).subtract("months", 6).format(AMOCRM.system.format.date.date) + " - " + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date)
        }
        o.length && s.setSelected(o),
        t(this).closest(".date_filter").find(".date_filter__dropdown").hide()
    }),
    !0
}),
define("lib/interface/controls/overlay", ["require", "jquery", "underscore", "lib/common/fn", "pubsub", "vendor/nonbounce", "lib/interface/controls/common"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/common/fn")
      , n = e("pubsub")
      , o = t(document)
      , r = {};
    e("vendor/nonbounce"),
    e("lib/interface/controls/common"),
    r.overlay_stack = 0,
    r.getHolder = function() {
        var e = t("#page_holder");
        return e.is(":hidden") ? {} : e
    }
    ,
    r.show = function(e, i) {
        i && i.skip_fix || o.trigger("overlay:fix"),
        e instanceof jQuery || (e = t(e)),
        e.prepareTransition().addClass("default-overlay-visible")
    }
    ,
    r.hide = function(e, s) {
        var n;
        s = s || {},
        e = e instanceof jQuery ? e : t(e),
        n = function() {
            i.isFunction(s.callback) && s.callback(),
            e.remove()
        }
        ,
        s.instantly ? n() : (i.delay(n, 100),
        e.prepareTransition().removeClass("default-overlay-visible")),
        s && s.skip_fix || o.trigger("overlay:unfix")
    }
    ,
    r.checkScroll = function(e, t) {
        return e.outerHeight() > t.outerHeight()
    }
    ,
    r.fixScroll = function(e, i, n) {
        var o, a = t(".list__body-right__top"), l = a.length && s._getV3Plug();
        e.length && (n && r.checkScroll(e, i) ? (o = t(window).scrollTop(),
        e.css("overflow-y", "scroll").scrollTop(o),
        l && a.css("marginRight", s.scrollBarWidth + "px")) : (e.css("overflow-y", "").scrollTop(0),
        l && a.css("marginRight", "")))
    }
    ,
    o.on("overlay:fix", function() {
        var e = document.body
          , i = r.getHolder();
        parseInt(e.getAttribute("data-body-fixed")) || AMOCRM.is_touch_device || r.fixScroll(i, t(e), !0),
        e.setAttribute("data-body-fixed", ++r.overlay_stack),
        AMOCRM.is_touch_device ? (t.nonbounce("destroy"),
        t.nonbounce()) : e.style.overflow = "hidden"
    }).on("overlay:unfix", function() {
        var e = document.body
          , i = r.getHolder();
        --r.overlay_stack,
        r.overlay_stack < 0 && (r.overlay_stack = 0),
        0 === r.overlay_stack && (AMOCRM.is_touch_device ? t.nonbounce("destroy") : (e.style.overflow = "",
        r.fixScroll(i, t(e)))),
        e.setAttribute("data-body-fixed", r.overlay_stack),
        o.trigger("overlay:unfixed")
    }).on("touchmove", ".default-overlay", function() {
        return !1
    }).on("overlay:show", ".default-overlay", function(e, t) {
        r.show(this, t)
    }).on("overlay:hide", ".default-overlay", function(e, t) {
        r.hide(this, t)
    }),
    n.subscribe("overlay:show", function(e, t) {
        r.show(t.el, t.params)
    }),
    n.subscribe("overlay:hide", function(e, t) {
        r.hide(t.el, t.params)
    })
}),
define("lib/interface/controls/index", ["require", "jquery", "underscore", "lib/core/view"], function(e) {
    "use strict";
    function t(e) {
        return e === document.body ? !1 : document.body.contains(e)
    }
    function i(e) {
        return e ? function() {
            try {
                e.apply(this, arguments)
            } catch (t) {
                console.error(t, {
                    arguments: arguments
                }),
                setTimeout(function() {
                    throw t
                }, 0)
            }
        }
        : void 0
    }
    function s(e, t) {
        var s = e.toLowerCase();
        if (s in f)
            throw new Error("directive already registered");
        f[s] = {
            name: s,
            originalName: e,
            onload: i(t.load),
            onunload: i(t.unload)
        },
        g.push(f[s]),
        document.body && p.each(document.body.querySelectorAll("." + s), r)
    }
    function n() {
        r(document.body),
        new MutationObserver(function(e) {
            p.each(e, function(e) {
                var t, i, s;
                switch (e.type) {
                case "childList":
                    p.each(e.addedNodes, o),
                    p.each(e.removedNodes, c);
                    break;
                case "attributes":
                    t = e.target,
                    "class" === e.attributeName && (i = (e.oldValue || "").toLowerCase().split(" "),
                    s = (t.className || "").toLowerCase().split(" "),
                    p.chain(i).filter(function(e) {
                        return -1 === s.indexOf(e)
                    }).each(function(e) {
                        f[e] && u(f[e], t)
                    }),
                    p.chain(s).filter(function(e) {
                        return -1 === i.indexOf(e)
                    }).each(function(e) {
                        f[e] && l(f[e], t, "class")
                    }))
                }
            })
        }
        ).observe(document.body, {
            childList: !0,
            subtree: !0,
            attributes: !0,
            attributeFilter: ["class"]
        })
    }
    function o(e) {
        r(e),
        p.each(e.children, o)
    }
    function r(e) {
        function i(t) {
            l(t, e, "class")
        }
        var s = [];
        e.tagName && t(e) && (p.each(g, function(t) {
            e.classList && e.classList.contains(t.name) && s.push(t)
        }),
        s.length && p.each(s, i))
    }
    function a(e, t, i) {
        var s = t[b][e.name];
        return s || (s = t[b][e.name] = {
            type: i,
            directive: e,
            scope: {}
        }),
        s
    }
    function l(e, t, i) {
        var s;
        if (t[b]) {
            if (t[b][e.name])
                return
        } else
            Object.defineProperty(t, b, {
                value: {}
            });
        s = a(e, t, i),
        e.onload && e.onload.call(s.scope, t)
    }
    function c(e) {
        e && (p.each(e.children, c),
        d(e))
    }
    function d(e) {
        e[b] && p.each(e[b], function(t, i) {
            u(t.directive, e)
        })
    }
    function u(e, t) {
        var i = a(e, t);
        t[b] && t[b][e.name] && (e.onunload && e.onunload.call(i.scope, t),
        delete t[b][e.name])
    }
    var h, _ = e("jquery"), p = e("underscore"), m = e("lib/core/view"), f = {}, g = [], b = "__directives__";
    return _(function() {
        n(),
        _(document).on("controls:check-loaded", function(e, t) {
            o(t)
        })
    }),
    h = m.extend({
        controlClassName: "",
        _maxControlBodyZIndex: 1e3,
        _toggleBodyOverlay: function(e, t) {
            var i = _('<div class="default-overlay control-body-overlay" id="control_overlay"></div>');
            return e === !1 ? void (p.isFunction(this.__overlay_hide) && (this.__overlay_hide(!1),
            delete this.__overlay_hide)) : (this.__overlay_hide = p.bind(function(i) {
                var s = _("#control_overlay");
                return i !== !1 && (t || p.noop).call(this) === !1 ? !1 : void (s.length && (_("#control_overlay").off().trigger("overlay:hide"),
                this.$el.append(e)))
            }, this),
            this._$body.append(i),
            this._$body.append(e),
            i.on("click", p.bind(function(e) {
                e.stopPropagation(),
                this.__overlay_hide() !== !1 && delete this.__overlay_hide
            }, this)).trigger("overlay:show"),
            this.__overlay_hide)
        }
    }),
    h.extend = function(e) {
        var t = m.extend.apply(this, arguments);
        return e.controlClassName && s(e.controlClassName, {
            load: function(e) {
                this.view = new t({
                    el: e
                })
            },
            unload: function() {
                this.view.destroy()
            }
        }),
        t
    }
    ,
    h
}),
define("lib/interface/controls/kalendae", ["require", "jquery", "underscore", "lib/interface/controls/index", "lib/vendor/kalendae/kalendae"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/interface/controls/index")
      , n = Kalendae.prototype.draw
      , o = function() {
        0 === this.viewStartDate.year() && this.viewStartDate.add((new Date).getFullYear(), "y"),
        n.apply(this, arguments)
    }
      , r = 200
      , a = i.debounce(function(e) {
        t(e.input).trigger("controls:change", [e.getSelected()])
    }, r)
      , l = AMOCRM.system.format.date.date;
    return e("lib/vendor/kalendae/kalendae"),
    Kalendae.prototype.draw = o,
    Kalendae.Input.prototype.draw = o,
    s.extend({
        controlClassName: "js-control-date",
        _getDefaults: function() {
            return this._format = this._elem("date_field").attr("data-format") || l,
            {
                format: this._format,
                parseSplitDelimiter: /,\s*|\s*-\s*/,
                weekStart: "en" === AMOCRM.lang_id ? 0 : 1,
                months: 1,
                dayOutOfMonthClickable: !0,
                titleFormat: this._elem("date_field").attr("data-title-format") || "MMMM YYYY",
                attachTo: this.el
            }
        },
        _getKalendaeHandler: function() {
            return Kalendae.Input
        },
        _classes: function() {
            return {
                date_field: "date_field"
            }
        },
        _hideButton: i.template('<div class="date_filter__done-btn__wrapper clearfix"><button type="button" class="button-input date_filter__done-btn js-date-done" tabindex="-1"><span class="button-input-inner "><span class="button-input-inner__text">' + AMOCRM.lang.filter_done + "</span></span></button></div>"),
        events: function() {
            return {
                "click .date_field_wrapper--calendar": "clickToFocus",
                "click .date_field-js": "clickToFocus",
                "click .date_field--clear": "clickToClear",
                "input .date_field": "inputInDate",
                "blur .date_field": "reformatOnBlur",
                "controls:date:change .date_field": "inputInDate"
            }
        },
        initialize: function() {
            var e = this._elem("date_field").hasClass("range");
            s.prototype.initialize.apply(this, arguments),
            this.kalendae = this._addComponent(this._getKalendaeHandler(), this._elem("date_field").get(0), i.extend(this._getDefaults(), {
                mode: e ? "range" : "single",
                subscribe: {
                    show: e ? i.bind(this.onShowRange, this, {}) : i.bind(this.onShowSingle, this),
                    change: e ? i.bind(this.onChangeRange, this) : i.bind(this.onChangeSingle, this),
                    "date-clicked": e ? i.bind(this.onDateClickedRange, this) : i.bind(this.onDateClickedSingle, this)
                }
            })),
            this._elem("date_field").data("kalendae", this.kalendae),
            this.$container = t(this.kalendae.container),
            this.$input = this._elem("date_field"),
            e && this.$container.append(this._hideButton()),
            this.$container.on("click", ".js-date-done", i.bind(this.clickToDone, this)).on("click", i.bind(this._stopPropagationOnCalendarClick, this))
        },
        destroy: function() {
            this.$container.off(),
            this.$input.off(),
            s.prototype.destroy.apply(this, arguments)
        },
        reformatOnBlur: function() {
            var e, t, i = this.$input.val();
            8 === i.length && (e = moment(i, AMOCRM.system.format.date.date.replace("YYYY", "YY")),
            e.year() > 1e3 && (t = e.format(AMOCRM.system.format.date.date),
            this.$input.val(t).trigger("controls:change", [t])))
        },
        _stopPropagationOnCalendarClick: function(e) {
            e.stopPropagation()
        },
        clickToFocus: function(e) {
            return t(e.currentTarget).parent().children(":input").focus(),
            !1
        },
        clickToClear: function(e) {
            var i, s = t(e.currentTarget), n = s.closest(".date_filter");
            return this._elem("date_field").val("").trigger("controls:change"),
            this.$(".date_field__range_0, .date_field__range_1").val("").trigger("controls:change").trigger("change"),
            s.hide(),
            this._$document.trigger("controls:hide"),
            n.length && (i = n.find(".date_filter__period"),
            i.text(i.attr("data-before"))),
            !1
        },
        inputInDate: function(e, t) {
            var i = e.currentTarget;
            t = t || i.value,
            t ? i.classList.remove("empty") : i.classList.add("empty")
        },
        clickToDone: function() {
            this._elem("date_field").blur(),
            this._$document.trigger("controls:hide")
        },
        onShowRange: function() {
            var e, t = this.$container, i = this.$input.offset();
            this.setSelection(),
            e = t[0].offsetHeight,
            this._elem("date_field").hasClass("date-filter-in-search") ? t.addClass("kalendae-at-right").css({
                top: i.top - e / 2,
                left: i.left - t[0].offsetWidth - 15
            }) : (t.css({
                top: i.top - (AMOCRM.is_ios7 ? 20 : 0),
                left: i.left
            }),
            this._$window.height() < i.top + e ? (t.addClass("kalendae-at-top").css("left", "+=" + (this.$el.width() + 20)).css("top", i.top - (e - 46)).css("height", 270),
            t.find(".date_filter__done-btn__wrapper").css({
                position: "absolute",
                bottom: 10
            })) : t.removeClass("kalendae-at-top"),
            t.visible() || t.removeClass("kalendae-at-top").addClass("kalendae-at-bottom-ragne").css("top", i.top - 40)),
            this._$document.trigger("controls:hide:private")
        },
        onDateClickedRange: function() {
            var e, i;
            1 === this.kalendae.getSelectedRaw().length ? (this.$container.addClass("range"),
            e = this.$input.closest(".date_filter"),
            e.length && (i = this.kalendae.getSelected(),
            e.find(".date_filter__period").text(i))) : (this.$container.removeClass("range"),
            this.$el.find(".date_field__range_1").val("").trigger("change")),
            this.date_clicked = !0,
            this.setSelection(t(this.container))
        },
        onChangeRange: function() {
            var e = this.kalendae
              , s = t(e.input)
              , n = s.closest(".date_filter")
              , o = e.getSelectedRaw()
              , r = e.getSelected()
              , a = t.trim(n.find(".control-toggler__item-selected").text())
              , c = s.parent().find(".date_field__range_1")
              , d = "";
            a && (a += ": "),
            i.each(o, function(e, t) {
                s.parent().find(".date_field__range_" + t).val(moment(e._i, e._f || l).format(l)).trigger("change")
            }, e),
            o.length && (s.parent().find(".date_field--clear").show(),
            !o[1] && o[0] && (o[0].isBefore(moment().tz(AMOCRM.system.timezone)) ? (d = moment().format(l),
            r = o[0].format(e.settings.format) + " - " + moment().format(moment().lang().calendar("today"))) : (d = moment(o[0]._i, o[0]._f || l).format(l),
            r = o[0].format(e.settings.format)),
            c.val(d)),
            e.date_clicked && s.val(r),
            n.find(".date_filter__period").text(a + r).attr("title", a + r)),
            s.one("kalendae:draw", i.bind(function(t) {
                e.date_clicked && (e.date_clicked = !1,
                s.val(r))
            }, e)).trigger("controls:change controls:date:change", [e.getSelected()])
        },
        onShowSingle: function() {
            var e = this.$container
              , t = this.$input.offset()
              , i = this.$input.outerWidth()
              , s = 18;
            s > i && (t.left = t.left - s + i / 2),
            e.removeClass("kalendae-at-top").css({
                top: t.top,
                left: t.left
            }),
            e.visible() || e.addClass("kalendae-at-top"),
            this._$document.trigger("controls:hide:private")
        },
        onChangeSingle: function() {
            this.kalendae && (t(this.kalendae.input).trigger("controls:date:change", [this.kalendae.getSelected()]),
            a(this.kalendae))
        },
        onDateClickedSingle: function(e, t) {
            this.$input.attr("from", "calendar").val(e.format(AMOCRM.system.format.date.date)),
            this.$container.one("mouseup" + this.ns, i.bind(function() {
                this.$input.blur()
            }, this))
        },
        setSelection: function(e) {
            var i;
            this.$container.find(".k-selected:first").addClass("k-range"),
            this.$container.find(".k-days").find(".k-range.k-in-month.k-active:last").each(function() {
                i = t(this).next(),
                i.hasClass("k-selected") ? i.addClass("k-last-active") : t(this).addClass("k-last-active")
            })
        }
    })
}),
define("lib/interface/controls/customers/date", ["require", "underscore", "twig", "lib/interface/controls/kalendae"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/controls/kalendae")
      , n = 13
      , o = !1;
    return s.extend({
        controlClassName: "js-control-date-customers",
        _getDefaults: function() {
            return t.extend({}, s.prototype._getDefaults.apply(this, arguments), {
                selected: this._findElem("input").val()
            })
        },
        _preloadMonthsTemplate: function() {
            return o ? new Promise(function(e) {
                e()
            }
            ) : (o = !0,
            i._preload(["/tmpl/controls/select.twig"])())
        },
        _monthsTemplate: function(e) {
            var s, n = i({
                ref: "/tmpl/controls/select.twig"
            }), o = 0, r = [];
            e = e || this.kalendae.getSelectedRaw()[0],
            e && (o = e.startOf("month").diff(moment().startOf("month"), "months")),
            0 > o ? r = t.union([o], t.range(0, 58)) : (s = o - 30 > 0 ? o - 30 : 0,
            r = t.range(s, s + 59)),
            this._findElem("months_wrapper").remove(),
            this._findElem("input").after(t.template('<div class="' + this._class("months_wrapper") + '">' + n.render({
                class_name: "customers-date__months-select",
                input_special_class: "js-form-changes-skip js-customers-date-months",
                selected: o,
                items: t.map(r, function(e) {
                    return {
                        id: e,
                        option: moment().add(e, "month").format("MMMM YYYY")
                    }
                })
            }) + "</div>"))
        },
        _getKalendaeHandler: function() {
            return Kalendae
        },
        _classes: function() {
            return t.extend({}, s.prototype._classes.apply(this, arguments), {
                input: "js-customers-date-date-input",
                input_not_valid: "date_field_not-valid",
                months_wrapper: "customers-date__months",
                months_input: "js-customers-date-months"
            })
        },
        events: function() {
            var e = t.extend({}, s.prototype.events || {});
            return e["input " + this._selector("input")] = "_onDateInput",
            e["blur " + this._selector("input")] = "reformatOnBlur",
            e["controls:change " + this._selector("months_input")] = "_setCalendarMonthOnSelectChange",
            e["keyup " + this._selector("input")] = "_hideCalendarOnEnterKey",
            e
        },
        initialize: function() {
            var e, i = this;
            s.prototype.initialize.apply(this, arguments),
            e = this.kalendae.draw,
            this.kalendae.draw = function() {
                var t = e.apply(this, arguments);
                return i._addTwoWeeks(),
                t
            }
            ,
            this._preloadMonthsTemplate().then(t.bind(function() {
                var e = this._findElem("input").val();
                e && this.kalendae.setSelected(e),
                this._monthsTemplate(),
                this._addTwoWeeks()
            }, this))
        },
        destroy: function() {
            this._findElem("months_wrapper").remove(),
            this.$container.remove(),
            s.prototype.destroy.apply(this, arguments)
        },
        _hideCalendarOnEnterKey: function(e) {
            e.keyCode !== n || this._findElem("input").hasClass(this._class("input_not_valid")) || (this._findElem("input").val(this._findElem("input").val()).trigger("controls:change", [this._findElem("input").val()]),
            this._$document.trigger("controls:hide"))
        },
        _setCalendarMonthOnSelectChange: function() {
            var e = this._findElem("months_input");
            this.updateCalendarView(moment().add("months", e.val())),
            this._monthsTemplate(this.kalendae.viewStartDate)
        },
        _onDateInput: function() {
            var e = this._findElem("input").val();
            this.validateSelected() && e.length > 5 && (e = moment(e, [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date])).format(AMOCRM.system.format.date.date),
            this.kalendae.setSelected(e)),
            this._findElem("input").trigger("controls:change", [e])
        },
        onDateClickedSingle: function(e) {
            s.prototype.onDateClickedSingle.apply(this, arguments),
            this._findElem("input").trigger("controls:change", [e.format(AMOCRM.system.format.date.date)]),
            this._$document.trigger("controls:hide")
        },
        onChangeSingle: function() {
            this.kalendae && (this.validateSelected(),
            this._monthsTemplate())
        },
        updateCalendarView: function(e) {
            this.kalendae.viewStartDate = e,
            this.kalendae.draw()
        },
        validateSelected: function() {
            var e = !0
              , t = moment(this._findElem("input").val(), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date]));
            return this._findElem("input").removeClass(this._class("input_not_valid")),
            (!t.isValid() || t.format("X") < 0) && (e = !1,
            this._findElem("input").addClass(this._class("input_not_valid"))),
            e
        },
        _addTwoWeeks: function() {
            var e, i, s, n, o = $(this.kalendae.container), r = {
                prepend: t.range(1, 8, 1).reverse(),
                append: t.range(1, 8, 1)
            };
            o.find(".k-fake-date").remove(),
            e = o.find(".k-days span"),
            i = "YYYY-MM-DD",
            s = moment(e.first().attr("data-date"), i),
            s.month() === this.kalendae.viewStartDate.month() && (s.subtract(1, "month").endOf("month"),
            r.append = !1),
            n = moment(e.last().attr("data-date"), i),
            n.month() === this.kalendae.viewStartDate.month() && (s.add(1, "month").startOf("month"),
            r.prepend = !1),
            t.each(r, function(r, a) {
                r && o.find(".k-days")[a](t.map(r, function(t) {
                    var o = "prepend" === a ? s : n
                      , r = o.clone()["prepend" === a ? "subtract" : "add"](t, "days");
                    return e.first().clone().removeClass("k-in-month k-selected").addClass("k-out-of-month k-fake-date").attr("data-date", r.format(i)).text(r.format("D")).get(0).outerHTML
                }).join(""))
            }, this)
        }
    })
}),
define("lib/interface/controls/customers/purchase", ["require", "underscore", "jquery", "lib/common/fn", "lib/interface/controls/index", "lib/interface/controls/customers/date"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("lib/common/fn")
      , n = e("lib/interface/controls/index");
    return e("lib/interface/controls/customers/date"),
    n.extend({
        controlClassName: "js-control-purchase",
        _classes: function() {
            return {
                caption: "customers-date__caption",
                value: "customers-date__caption-value",
                title: "customers-date__caption-title",
                not_valid: "customers-date__caption-value_not-valid",
                date_input: "js-customers-date-date-input",
                list: "customers-date__list",
                purchase_button: "js-purchase-button"
            }
        },
        document_events: function() {
            return {
                "controls:hide:private": "_hideOnClickOutside"
            }
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("caption")] = "_openOnClick",
            e
        },
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this.$list = this._elem("list"),
            this.$list.on("controls:change", this._selector("date_input"), t.bind(this._onDateInputChange, this)).on("click", this._selector("purchase_button"), t.bind(this._hide, this)),
            this._onDateInputChange({}, this._elem("date_input").val()),
            this._$window.on("resize" + this.ns, t.bind(this._setPositions, this))
        },
        destroy: function() {
            this.$list.off(),
            n.prototype.destroy.apply(this, arguments)
        },
        _onDateInputChange: function(e, i) {
            var n, o = moment(i, [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date])), r = i && o.isBefore(moment().startOf("day")), a = s.i18n("Next purchase");
            o.isValid() && (i = o.format(AMOCRM.system.format.date.date)),
            t.each({
                yesterday: -1,
                today: 0,
                tomorrow: 1
            }, function(e, t) {
                var s = o.startOf("day").isSame(moment().startOf("day").add(e, "days"));
                s && (i = moment().format(moment().lang().calendar(t)))
            }),
            r && (a = s.i18n("Did not purchase"),
            n = Math.abs(moment().startOf("day").diff(o.startOf("day"), "days")),
            5e3 > n && (i += " (" + s.numeralWord(n, s.i18n("day,days,days,days"), !0) + ")")),
            this._elem("title").text(a),
            this._elem("value").toggleClass(this._class("not_valid"), r).text(i || "")
        },
        _openOnClick: function(e) {
            this.$list.hasClass("expanded") || this._$document.trigger("controls:hide"),
            this.$list.hasClass("expanded") ? this._hide() : this._show(),
            e.stopPropagation()
        },
        _hideOnClickOutside: function(e, t, s) {
            this.$list.hasClass("expanded") && !i.contains(this.$list.get(0), s.get(0)) && this._hide()
        },
        _show: function() {
            var e;
            this.$list.addClass("expanded"),
            this._toggleBodyOverlay(this.$list, this._hide),
            this._setPositions(),
            AMOCRM.is_touch_device || (e = this.$list.find(this._selector("date_input")),
            e.val(e.val()).focus())
        },
        _hide: function() {
            var e, t;
            this._toggleBodyOverlay(!1),
            this.$list.removeClass("expanded"),
            e = this._findElem("date_input"),
            t = moment(e.val(), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date])),
            t.isValid() && e.val(t.format(AMOCRM.system.format.date.date)),
            this.$el.find(":input").trigger("change")
        },
        _setPositions: function() {
            var e = this.$el.offset();
            this.$list.css({
                top: e.top,
                left: e.left,
                zIndex: this._maxControlBodyZIndex
            })
        }
    })
}),
define("lib/interface/controls/tip", ["require", "underscore", "jquery"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = !1
      , n = 38
      , o = 40
      , r = 13
      , a = 9
      , l = {};
    l.navigate = function(e, t) {
        var i = t.$items.index(t.$key_selected) + ("up" === e ? -1 : 1);
        0 > i && (i = t.$items.length - 1),
        i > t.$items.length - 1 && (i = 0),
        t.$key_selected.removeClass("tips-item_selected-keyboard"),
        t.$items[i].classList.add("tips-item_selected-keyboard"),
        s.addClass("tips_keyboard").removeClass("tips_mouse")
    }
    ,
    l.select = function(e) {
        e.$tip.hasClass("tips_keyboard") ? e.$key_selected.trigger("click") : e.$tip.find(".js-tips-item:hover").trigger("click")
    }
    ,
    l[n] = t.bind(l.navigate, {}, "up"),
    l[o] = t.bind(l.navigate, {}, "down"),
    l[r] = l.select,
    l[a] = l.select,
    i(document).on("controls:hide:private", function(e, t) {
        !s || t && "tip" !== t || (s.trigger("tip:show", [!1]).trigger("tip:hidden"),
        s = !1)
    }).on("tip:show", ".js-tip", function(e, t) {
        var n, o, r, a = i(this);
        a.is(":visible") || t === !1 ? (a.hide(),
        a.find(".tips-item_selected-keyboard").removeClass("tips-item_selected-keyboard"),
        s = !1) : (a.show(),
        s = a,
        s.find(".tips-item_selected").addClass("tips-item_selected-keyboard"),
        a.removeClass("tips-at-top"),
        a.removeClass("tips-to-left"),
        a.removeClass("tips-to-right"),
        n = a.offset().left,
        o = a.outerWidth(),
        r = i(window).width(),
        0 > n ? a.addClass("tips-to-right") : n + o > r && a.addClass("tips-to-left"),
        a.hasClass("tips-at-bottom") || a.visible() || a.addClass("tips-at-top")),
        a.trigger("tip:showed")
    }).on("click", ".js-tip-holder", function(e) {
        var t = i(this)
          , s = t.find(".js-tip");
        return e.stopPropagation(),
        i(document).trigger("controls:hide"),
        s.trigger("tip:show"),
        t.hasClass("js-tip-holder-links") ? void 0 : !1
    }).on("mousemove", ".js-tip", function() {
        var e = i(this);
        e.hasClass("tips_mouse") || e.removeClass("tips_keyboard").addClass("tips_mouse")
    }).on("keydown", function(e) {
        var n;
        return s && s.is(":visible") && s.find(".tips-item_selected").length && t.isFunction(l[e.keyCode]) ? (n = s.find(".js-tips-item:not(.hidden)"),
        l[e.keyCode]({
            $tip: s,
            $items: n,
            $key_selected: n.filter(function() {
                return i(this).hasClass("tips-item_selected-keyboard")
            })
        }),
        !1) : void 0
    })
}),
define("lib/interface/controls/budget", ["require", "lib/common/fn", "lib/interface/controls/index"], function(e) {
    "use strict";
    var t = e("lib/common/fn")
      , i = e("lib/interface/controls/index")
      , s = 8;
    return i.extend({
        controlClassName: "control-price",
        _classes: function() {
            return {
                input: "js-control-pretty-price",
                raw: "js-control-raw-price"
            }
        },
        events: {
            "keydown .js-control-pretty-price": "_fixCursorPosOnKeydown",
            "input .js-control-pretty-price": "_formatOnInput"
        },
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            "y" === this._elem("input").data("autosized") && this._elem("input").autosizeInput()
        },
        destroy: function() {
            this._elem("input").off(),
            i.prototype.destroy.apply(this, arguments)
        },
        _fixCursorPosOnKeydown: function(e) {
            var t = this._elem("input").get(0)
              , i = t.value || ""
              , n = t.selectionStart;
            return this._last_pos = i.length - t.selectionEnd,
            " " === i[n - 1] && e.keyCode === s ? (t.value = i.slice(0, n - 2) + i.slice(n - 1),
            this._elem("input").trigger("input"),
            !1) : void 0
        },
        _formatOnInput: function() {
            var e = this._elem("input").val()
              , i = this._elem("input").data("format-short")
              , s = e.replace(/[^0-9]+/g, "")
              , n = t.currency(s, i, 0, !1).trim();
            0 === parseInt(n) && (n = ""),
            this._elem("raw").val(s).trigger("change"),
            this._elem("input").val(n).trigger("autosize:important"),
            this._setCursorPos()
        },
        _setCursorPos: function(e) {
            var t, i = this._elem("input").get(0);
            e = (i.value || "").length - this._last_pos,
            i.createTextRange ? (t = i.createTextRange(),
            t.move("character", e),
            t.select()) : i.setSelectionRange && i.setSelectionRange(e, e)
        }
    })
}),
define("lib/interface/controls/tasks_date", ["require", "underscore", "lib/interface/controls/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/controls/index");
    return i.extend({
        controlClassName: "tasks-date",
        _classes: function() {
            return {
                time: "js-tasks-date-time-input",
                time_suggest_list: "js-control--suggest--list",
                date: "js-tasks-date-date-input",
                preset: "js-tasks-date-preset",
                list: "tasks-date__list",
                caption: "tasks-date__caption__text"
            }
        },
        events: {
            "click .tasks-date__caption": "onCaptionClick"
        },
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            this._$document.on("controls:hide:private" + this.ns, t.bind(this.onDocumentClickHide, this)),
            this.$list = this._elem("list"),
            this.$list.on("controls:suggest:focus", ".js-tasks-date-time-input", t.bind(this.onTimeSuggestFocus, this)).on("input", ".js-tasks-date-time-input", t.bind(this.onTimeSuggestChange, this)).on("controls:change", ".js-tasks-date-time-input", t.bind(this.onTimeSuggestChange, this)).on("click", ".control--suggest--list--item", t.bind(this.onTimeSuggestClick, this)).on("controls:change", ".js-tasks-date-date-input", t.bind(this.onDateInputChange, this)).on("click", ".js-tasks-date-preset", t.bind(this.onDatePresetClick, this)).on("click", ".tasks-date__done-btn", t.bind(this.hide, this)).on("click", ".tasks-date__list__item-custom", t.bind(this.onDateTimePresetClick, this))
        },
        destroy: function() {
            this.$list.off(),
            this.$overlay && this.$overlay.off(),
            i.prototype.destroy.apply(this, arguments)
        },
        onTimeSuggestFocus: function(e) {
            var t, i = $(e.currentTarget), s = i.val(), n = 262;
            s !== AMOCRM.lang.tasks_all_day && (t = this.$list.find(this._selector("time_suggest_list")).scrollTop(),
            n = (this.$el.find('.control--suggest--list--item[data-value-id="' + s + '"]').position() || {}).top,
            n = t + n),
            this.$list.find(this._selector("time_suggest_list")).scrollTop(n)
        },
        onTimeSuggestChange: function(e) {
            var t = $(e.currentTarget)
              , i = t.val()
              , s = this._elem("caption");
            t.trigger("tasks-time:changed", [i === AMOCRM.lang.tasks_all_day ? moment("23:59", "HH:mm") : moment(i, AMOCRM.system.format.date.time)]),
            s.attr("data-hide-time", i === AMOCRM.lang.tasks_all_day ? 1 : 0).attr("data-time", i).text([s.attr("data-date"), i].join(", "))
        },
        onTimeSuggestClick: function(e) {
            $(e.currentTarget).trigger("suggest:item:click")
        },
        onDateInputChange: function(e, t) {
            var i = $(e.currentTarget)
              , s = moment(t, AMOCRM.system.format.date.date)
              , n = this._elem("caption");
            s.isSame(moment().tz(AMOCRM.system.timezone), "day") ? t = s.format(moment().lang().calendar("today")) : s.isSame(moment().tz(AMOCRM.system.timezone).add(1, "days"), "day") ? t = s.format(moment().lang().calendar("tomorrow")) : s.isSame(moment().tz(AMOCRM.system.timezone).subtract(1, "days"), "day") && (t = s.format(moment().lang().calendar("yesterday"))),
            i.trigger("tasks-date:changed", [s]),
            n.attr("data-date", t).text([t, n.attr("data-time")].join(", "))
        },
        onDatePresetClick: function(e) {
            var t, i = $(e.currentTarget), s = this.$list.find(this._selector("date")).trigger("controls:date").data("kalendae"), n = !1;
            switch (e.stopPropagation(),
            e.preventDefault(),
            i.attr("data-period")) {
            case "tomorrow":
                t = moment().add(1, "day"),
                n = t.format(moment().lang().calendar("tomorrow"));
                break;
            case "next_week":
                t = moment().add(1, "week");
                break;
            case "next_month":
                t = moment().add(1, "month");
                break;
            case "next_year":
                t = moment().add(1, "year")
            }
            n || (n = t.format(AMOCRM.system.format.date.date)),
            s.setSelected(t),
            this._elem("caption").attr("data-date", n).attr("data-time", this.$list.find(this._selector("time")).val()).text([n, this.$list.find(this._selector("time")).val()].join(", ")),
            this._$document.trigger("controls:hide")
        },
        onCaptionClick: function(e) {
            this._expanded ? this._$document.trigger("controls:hide") : this.show(),
            e.stopPropagation()
        },
        onDateTimePresetClick: function(e) {
            this.$list.find(this._selector("time")).is(":focus") || this._$document.trigger("controls:hide:private", ["suggest"]),
            e.stopPropagation()
        },
        onDocumentClickHide: function(e, t) {
            (t === !1 || "tasks_date" === t) && this.hide()
        },
        show: function() {
            var e = this.$el.get(0).offsetHeight;
            this._$document.trigger("controls:hide"),
            this._expanded = !0,
            this.$el.addClass("expanded"),
            this.$list.addClass("expanded"),
            this.$list.removeClass("at-top"),
            this.$list.visible() || (this.$list.addClass("at-top"),
            e = 0),
            this.$list.css({
                width: this.$list.get(0).offsetWidth,
                top: this.$el.offset().top + e,
                left: this.$el.offset().left,
                zIndex: this._maxControlBodyZIndex
            }),
            this._toggleBodyOverlay(this.$list, this.hide)
        },
        hide: function() {
            this._toggleBodyOverlay(!1),
            this._expanded = !1,
            this.$el.removeClass("expanded").find("input").trigger("controls:change"),
            this.$list.removeClass("expanded").css({
                width: "",
                top: "",
                left: "",
                zIndex: ""
            })
        },
        _onBodyOverlayClick: function() {
            this.hide()
        }
    })
}),
define("lib/interface/controls/smart_address", ["require", "jquery", "underscore", "lib/interface/controls/index"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/interface/controls/index");
    return s.extend({
        controlClassName: "control-address",
        _in_edit: null,
        _classes: function() {
            return {
                focused: "control-address__wrapper_focused",
                blurred: "control-address__wrapper"
            }
        },
        _selectors: function() {
            return {
                field_with_input: ".control-address__field input",
                field_by_type: '.control-address__field[data-field-type="%s"]'
            }
        },
        events: {
            click: "startEdit",
            "focus :input": "startEdit",
            "address:edit": "startEdit",
            'change .control-address__field[data-field-type="country"] input': "checkChosenCountry"
        },
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this.checkChosenCountry(),
            this.delegateEvents(),
            this.$el.trigger("control_address:init"),
            this._$document.on(i(["controls:hide:private", "escape:keydown"]).map(function(e) {
                return e + this.ns
            }, this).join(" "), i.bind(this.onHideControls, this)).on("blur", ".control-address__wrapper_focused", i.bind(this.onHideControls, this))
        },
        onHideControls: function(e, i, s) {
            var n;
            switch (s = s || t(e.target),
            e.type) {
            case "focusout":
                n = e.relatedTarget ? t(e.relatedTarget).closest(".control-address") : this.$el;
                break;
            default:
                n = s.closest(".control-address")
            }
            return "suggest" !== i && (!n.length || n.length && !n.get(0).isSameNode(this.el)) ? this.stopEdit() : void 0
        },
        startEdit: function() {
            this._in_edit || (this._in_edit = !0,
            this.checkChosenCountry().changePlaceholders({
                num: 1
            }),
            this.$el.removeClass(this._classes().blurred).addClass(this._classes().focused))
        },
        stopEdit: function() {
            this._in_edit = !1,
            this.checkChosenCountry().changePlaceholders({
                num: 2
            }),
            this.$el.removeClass(this._classes().focused).addClass(this._classes().blurred)
        },
        changePlaceholders: function(e) {
            return e = e || {},
            this._findElem("field_with_input").each(function(i, s) {
                var n = t(s);
                n.attr("placeholder", n.attr("data-placeholder-" + e.num))
            }),
            this
        },
        checkChosenCountry: function() {
            var e = this._findElem("field_by_type", "country")
              , t = e.find(".control--select")
              , i = e.find("input");
            return t.toggleClass("not_empty", !!i.val()),
            this
        }
    })
}),
define("lib/interface/controls/numeric", ["require", "lib/interface/controls/budget"], function(e) {
    "use strict";
    var t, i, s, n = e("lib/interface/controls/budget");
    return t = n.extend({
        controlClassName: "js-control-allow-numeric",
        check_regex: /^[\d]+$/,
        _elem: function(e) {
            return "input" === e ? this.$el : n.prototype._elem.apply(this, arguments)
        },
        events: {
            keydown: "_fixCursorPosOnKeydown",
            input: "_formatOnInput"
        },
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this._setPrevValue()
        },
        _setPrevValue: function() {
            this._prev_value = this.$el.val()
        },
        _getPrevValue: function() {
            return this._prev_value
        },
        _prepareValue: function(e) {
            return e && !this.check_regex.test(e) ? this._getPrevValue() : e
        },
        _formatOnInput: function() {
            var e = this.$el.val()
              , t = this._prepareValue(e);
            t !== e && this.$el.val(t).trigger("change"),
            this._setPrevValue(),
            this._setCursorPos()
        }
    }),
    i = t.extend({
        controlClassName: "js-control-allow-numeric-float",
        check_regex: /^([1-9][0-9]*|0)?([.,/])?([\d]+)?$/,
        _prepareValue: function(e) {
            return e = e.replace(/[,/]/g, "."),
            "." === e && (e = "0."),
            t.prototype._prepareValue.call(this, e)
        }
    }),
    s = t.extend({
        controlClassName: "js-control-allow-zip",
        check_regex: /^[a-zA-Z0-9]+$/
    }),
    {
        Numeric: t,
        NumericFloat: i,
        Zip: s
    }
}),
define("lib/interface/controls", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/common/cookie", "lib/components/base/modal", "pubsub", "lib/interface/controls/common", "lib/vendor/plugins/jquery.autosize", "vendor/plugins/jquery.visible", "lib/interface/controls/select", "lib/interface/controls/pipeline/select", "lib/interface/controls/suggest", "lib/interface/controls/multisuggest", "lib/interface/controls/date_filter", "lib/interface/controls/overlay", "lib/interface/controls/kalendae", "lib/interface/controls/customers/purchase", "lib/interface/controls/tip", "lib/interface/controls/budget", "lib/interface/controls/tasks_date", "lib/interface/controls/smart_address", "lib/interface/controls/numeric"], function(e) {
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/common/fn")
      , o = e("lib/common/cookie")
      , r = e("lib/components/base/modal")
      , a = e("pubsub")
      , l = 60
      , c = !1
      , d = !1
      , u = t(document);
    return e("lib/interface/controls/common"),
    e("lib/vendor/plugins/jquery.autosize"),
    e("vendor/plugins/jquery.visible"),
    e("lib/interface/controls/select"),
    e("lib/interface/controls/pipeline/select"),
    e("lib/interface/controls/suggest"),
    e("lib/interface/controls/multisuggest"),
    e("lib/interface/controls/date_filter"),
    e("lib/interface/controls/overlay"),
    e("lib/interface/controls/kalendae"),
    e("lib/interface/controls/customers/purchase"),
    e("lib/interface/controls/tip"),
    e("lib/interface/controls/budget"),
    e("lib/interface/controls/tasks_date"),
    e("lib/interface/controls/smart_address"),
    e("lib/interface/controls/numeric"),
    t(function() {
        u.on("click", ".js-list-top-nav__text-button_submenu", function(e) {
            a.publish("hover_menu:show", t(e.currentTarget).data("entity"))
        }).on(AMOCRM.click_event, ".kalendae", function(e) {
            e.stopPropagation()
        }),
        t("#list_table_inner_holder").addClass("content__table__wrapper-hidden"),
        t(document).on("page:changed", function() {
            if (t("html").removeClass("no-loading"),
            !AMOCRM.is_touch_device) {
                var e = "Y" == o.get("fss") ? "addClass" : "removeClass"
                  , i = t("#sidebar");
                "addClass" == e && t(window).width() <= 1024 && (e = "removeClass"),
                t("#page_wrapper")[e]("sidebar-expanded"),
                (!i.children(".aside__inner:not(#light_filter)").length || t.inArray(AMOCRM.entity, ["stats", "settings", "authlog", "eventlog"])) && (e = "removeClass"),
                i[e]("aside-expanded")
            }
        }),
        u.on("controls:textarea:autosize", "textarea", function() {
            var e = t(this);
            e.is(":visible") && e.autosize({
                callback: function() {
                    e.trigger("controls:textarea:resized")
                }
            })
        }),
        u.on("keydown", "input.date_field", function(e) {
            -1 !== t.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) || 65 === e.keyCode && (e.ctrlKey === !0 || e.metaKey === !0) || 67 === e.keyCode && (e.ctrlKey === !0 || e.metaKey === !0) || 88 === e.keyCode && (e.ctrlKey === !0 || e.metaKey === !0) || 86 === e.keyCode && (e.ctrlKey === !0 || e.metaKey === !0) || e.keyCode >= 35 && e.keyCode <= 40 || !(e.shiftKey || e.keyCode < 48 || e.keyCode > 57) || !(e.keyCode < 96 || e.keyCode > 105) || 191 === e.keyCode || 190 === e.keyCode && e.shiftKey && 55 === e.keyCode || e.preventDefault()
        }),
        u.on("change", '.control-checkbox input[type="checkbox"]', function(e, i, s) {
            t(this).trigger("controls:change")
        }).on("custom_radio_change", '.control-radio input[type="radio"]', function(e, i, s) {
            var n = t(this)
              , o = t(this.parentNode)
              , r = this.type
              , a = t(this).attr("name")
              , l = a ? t('[name="' + a + '"]') : !1;
            l && (l.not(this).prop("checked", !1).parent().removeClass("icon-" + r + "-checked"),
            l.filter(this).prop("checked", !0).parent().addClass("icon-" + r + "-checked")),
            o.addClass("icon-" + r),
            n.trigger("controls:change").change(),
            n.trigger("controls:change:visual")
        }).on("click", ".control-radio__label", function(e) {
            var i = t(this).find(".control-radio__helper")
              , s = i.parent().find(":input");
            s.prop("disabled") || s.trigger("custom_radio_change", [!s.prop("checked")])
        }).on("controls:disable", '.control-checkbox input[type="checkbox"]', function(e, t) {
            this.disabled = i.isUndefined(t) ? !0 : t
        }).on("controls:disable", '.control-radio input[type="radio"]', function(e, s) {
            this.disabled = i.isUndefined(s) ? !0 : s,
            t(this).closest(".control-radio__label").toggleClass("control-radio__label_disabled", this.disabled).find(".control-radio__helper").toggleClass("control-radio__helper-disabled", this.disabled)
        }).on("controls:disable", ".button-input", function(e, s) {
            s = i.isUndefined(s) ? !0 : s,
            t(this)[s ? "addClass" : "removeClass"]("button-input-disabled")
        }).on("click", "#notes_visibility", function() {
            t("#filter_visibility__options").toggle()
        }).on("click", ".js-note-expander", function() {
            return t(this).parent().hide().parent().find(".note--body--content-not-sliced").show(),
            !1
        }),
        u.on("controls:change", ".checkboxes_dropdown input", function(e) {
            var i = t(this).closest(".checkboxes_dropdown")
              , s = i.find("input:checked").length
              , o = i.find(".checkboxes_dropdown__checkbox_master")
              , r = i.find(".checkboxes_dropdown__title")
              , a = i.find("input").length
              , l = i.find(".checkboxes_dropdown__selected")
              , c = "icon-checkbox";
            0 !== s && (s === a ? c = "icon-checkbox-checked" : (c = "icon-check-minus",
            i.removeClass("is_checked_dropdown"))),
            o.attr("class", "checkboxes_dropdown__checkbox_master icon " + c),
            s && s != a ? r.text(n.numeralWord(s, r.attr("data-numeral"))) : !s && !r.attr("data-title-empty") || s == a ? (s = AMOCRM.lang.all,
            r.text(n.numeralWord("all", r.attr("data-numeral")))) : (r.text(""),
            s = r.attr("data-title-empty")),
            l.html(s + "&nbsp;")
        }).on("click", ".checkboxes_dropdown__checkbox_master", function(e) {
            var i = t(this).closest(".checkboxes_dropdown")
              , s = i.find("input")
              , o = i.find(".checkboxes_dropdown__title")
              , r = i.find(".checkboxes_dropdown__selected")
              , a = i.find("input:checked").length;
            u.trigger("keyboard:hide").trigger("controls:hide"),
            (t(this).hasClass("icon-checkbox-checked") || t(this).hasClass("icon-check-minus")) && (s.prop("checked", !1).trigger("change").parent(".control-checkbox").removeClass("icon-checkbox-checked"),
            t(this).attr("class", "checkboxes_dropdown__checkbox_master icon icon-checkbox"),
            r.html(AMOCRM.lang.all + "&nbsp;"),
            o.text(n.numeralWord("all", o.attr("data-numeral")))),
            0 === a && (t(this).addClass("icon-checkbox-checked"),
            s.prop("checked", !0).trigger("change").parent(".control-checkbox").addClass("icon-checkbox-checked")),
            i.trigger("controls:wrapper:change"),
            e.stopPropagation()
        }).on("click", ".checkboxes_dropdown__item", function(e) {
            e.stopPropagation()
        }).on("click", ".checkboxes_dropdown__title_wrapper", function(e) {
            var i, s = t(this).closest(".checkboxes_dropdown"), n = s.find(".checkboxes_dropdown__list"), o = s.find(".checkboxes_dropdown_icon");
            o.hasClass("icon-v-ico-2") ? (u.trigger("keyboard:hide").trigger("controls:hide"),
            o.removeClass("icon-v-ico-2").addClass("icon-up-arrow"),
            s.addClass("expanded").css("z-index", 30),
            n.css("max-height", ""),
            i = t(document).height() < s.offset().top + s.height() + n.height() + l,
            n.toggleClass("checkboxes_dropdown__expanded-to-top", i),
            i && n.height() > s.offset().top && n.css("max-height", s.offset().top),
            c = s) : (o.removeClass("icon-up-arrow").addClass("icon-v-ico-2"),
            s.removeClass("expanded").css("z-index", ""),
            c = !1),
            n.is(":visible") ? n.hide() : n.show().trigger("controls:checkboxes_dropdown:open"),
            e.stopPropagation(),
            e.preventDefault()
        }).on("click.hide_controls controls:hide controls:hide:only", function(e, s) {
            var n = t(e.target);
            if (i.indexOf([1, 2], e.button) >= 0)
                return !0;
            if ("string" != typeof s && (s = !1),
            "controls:hide:only" !== e.type && u.trigger("controls:hide:private", [s, n]),
            !c || s && "select_checkbox" !== s || !c.hasClass("expanded") || (c.css("z-index", "").removeClass("expanded").trigger("controls:expanded:off"),
            c.find(".checkboxes_dropdown__list").hide().trigger("controls:checkboxes_dropdown:hide"),
            c.find(".checkboxes_dropdown_icon").removeClass("icon-up-arrow").addClass("icon-v-ico-2"),
            c = !1),
            d && (!s || "btn_menu" === s)) {
                if (d.removeClass("button-input-pressed").parent().removeClass("button-input-wrapper-pressed"),
                d.attr("data-context-menu"))
                    return;
                d = !1
            }
            n.closest(".date_filter").length || n.closest(".kalendae").length || s && "kalendar" !== s || t(".date_filter__dropdown").hide(),
            e.stopPropagation()
        }).on("keydown", function(e) {
            var t = 27;
            e.keyCode === t && u.trigger("controls:hide").trigger("escape:keydown")
        }),
        u.on("button:saved", ".button-input", function(e, i, s) {
            var n, o = t(this);
            s = s || AMOCRM.lang.button_saved,
            o.children(".button-input__saved").length || (o.trigger("button:load:stop").trigger("button:save:enable").append('<div class="button-input__saved">' + s + "</div>").addClass("button-input-saved").children(".button-input-inner").hide(),
            n = setTimeout(function() {
                clearTimeout(n),
                o.children(".button-input__saved").remove(),
                o.removeClass("button-input-saved").children(".button-input-inner").show(),
                o.trigger("button:save:disable"),
                "function" == typeof i && i()
            }, 1500))
        }).on("button:enable", ".button-input", function() {
            t(this).removeClass("button-input-disabled")
        }).on("button:disable", ".button-input", function() {
            t(this).addClass("button-input-disabled")
        }).on("button:save:enable", ".button-input", function() {
            t(this).removeClass("button-input-disabled").addClass("button-input_blue")
        }).on("button:save:disable", ".button-input", function() {
            t(this).removeClass("button-input_blue").addClass("button-input-disabled")
        }).on("button:save:error button:load:error", ".button-input", function() {
            var e = t(this);
            e.trigger("button:load:stop").addClass("animated shake"),
            i.delay(function() {
                e.removeClass("animated shake")
            }, 300)
        }).on("button:save:start button:load:start", ".button-input:not(.button-cancel)", function(e, i) {
            var s = t(this)
              , n = t('<div class="button-input__spinner"><span class="button-input__spinner__icon spinner-icon"></span></div>');
            "Y" !== s.attr("data-loading") && ((s.hasClass("button-input_blue") && !s.hasClass("button-input-disabled") || "white" === i) && n.children(".spinner-icon").addClass("spinner-icon-white"),
            s.attr("data-loading", "Y").append(n).children(".button-input-inner").hide())
        }).on("button:load:stop button:save:stop", ".button-input:not(.button-cancel)", function() {
            var e = t(this);
            e.removeAttr("data-loading").children(".button-input__spinner").remove(),
            e.children(".button-input-inner").show()
        }),
        u.on("click", "[data-context-menu]", function(e) {
            e.stopPropagation()
        }).on("click button:menu:toggle", ".button-input-with-menu", function(e, i) {
            var s, n = t(this), o = n.attr("data-context-menu"), r = o ? t(n.attr("data-context-menu")) : n.parent().find(".button-input__context-menu"), a = n.attr("data-context-container") ? t(n.attr("data-context-container")) : !1;
            i = i || {},
            s = void 0 !== i.visible ? i.visible : n.hasClass("button-input-pressed"),
            s ? (n.removeClass("button-input-pressed").parent().removeClass("button-input-wrapper-pressed"),
            o && r.hide(),
            d = !1) : (i.no_trigger || t(document).trigger("keyboard:hide").trigger("controls:hide"),
            o && (a && (a.append(r),
            n.removeAttr("data-context-container")),
            r.show()),
            n.addClass("button-input-pressed").parent().addClass("button-input-wrapper-pressed"),
            d = n),
            r.visible(!n.attr("data-part-visible")) || r.addClass("button-open-left-side"),
            e.stopPropagation()
        }).on("click", ".button-input__context-menu__item", function() {
            t(document).trigger("controls:hide", ["btn_menu"])
        }),
        u.on("controls:change", "#task_edit_type", function() {
            var e = t(this);
            "custom" == e.val() && (e.closest(".task-types-holder").addClass("task-types-holder-custom-active").find(".task-types-holder__custom__input").focus(),
            e.val(0).trigger("controls:change"))
        }).on("click", ".task-types-holder__custom__cancel", function() {
            t(this).closest(".task-types-holder").removeClass("task-types-holder-custom-active").find(".task-types-holder__custom__input").val("")
        }),
        u.on("click", ".button-input-disabled", function() {
            return !1
        }),
        u.on(AMOCRM.transition_event, ".js-animation-remove", function(e) {
            t(e.target).hasClass("js-animation-remove") && this.parentNode.removeChild(this)
        }).on("click", ".js-list-print", function() {
            window.print()
        }).on("click", ".js-more-widgets", function(e) {
            var i = t(this).attr("data-widget");
            e.preventDefault(),
            new r({
                class_name: "modal-list more_widget_modal",
                init: s._preload(["/tmpl/settings/widgets/more_widget_modal.twig"], function(e) {
                    e.trigger("modal:loaded").html(s({
                        ref: "/tmpl/settings/widgets/more_widget_modal.twig"
                    }).render({
                        has_add_rights: AMOCRM.constant("user_rights") && AMOCRM.constant("user_rights").is_admin,
                        widget: i
                    })).trigger("modal:centrify")
                })
            })
        }).on("click", ".js-list-caption-link", function() {
            t(this).parent().find(".js-list-caption-link").removeClass("content__top__preset__caption__list__item-active"),
            t(this).addClass("content__top__preset__caption__list__item-active")
        }).on("click", ".switcher:not(.js-disabled)", function() {
            t(this).toggleClass("switcher__on switcher__off")
        }).on("change", ".switcher__checkbox:not(.js-disabled)", function() {
            t(this).closest(".switcher_wrapper").find("label").toggleClass("switcher__on", this.checked).toggleClass("switcher__off", !this.checked)
        }).on("click", ".control-toggler__item:not(.control-toggler__item-selected)", function() {
            var e = t(this)
              , i = e.closest(".control-toggler");
            i.find(".control-toggler__item-selected").removeClass("control-toggler__item-selected"),
            e.addClass("control-toggler__item-selected")
        }).on("animate:callback", ".js-animate", function(e, i) {
            Modernizr.csstransitions ? (t(this).offset(),
            t(this).data("js-animate-callback", i).one(AMOCRM.transition_event, function(e) {
                var i = t(this).data("js-animate-callback");
                t(this).data("js-animate-callback", !1),
                this == e.target && "function" == typeof i && i.call(this),
                e.stopPropagation()
            })) : "function" == typeof i && i.call(this)
        })
    }),
    t
}),
define("lib/components/filter/filter", ["require", "jquery", "underscore", "twig", "cocktail", "backbone", "lib/core/view", "lib/components/filter/form", "lib/components/filter/presets", "lib/components/filter/tags_lib/index", "lib/common/fn", "lib/common/urlparams", "lib/components/filter/mixins/defaults", "lib/components/filter/mixins/parsing", "lib/components/filter/mixins/multifilter", "lib/components/filter/mixins/tags", "lib/components/filter/mixins/users_select", "lib/interface/account/mixins/cf_groups", "lib/interface/controls"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("backbone"), a = e("lib/core/view"), l = e("lib/components/filter/form"), c = e("lib/components/filter/presets"), d = e("lib/components/filter/tags_lib/index"), u = e("lib/common/fn"), h = e("lib/common/urlparams"), _ = e("lib/components/filter/mixins/defaults"), p = e("lib/components/filter/mixins/parsing"), m = e("lib/components/filter/mixins/multifilter"), f = e("lib/components/filter/mixins/tags"), g = e("lib/components/filter/mixins/users_select"), b = e("lib/interface/account/mixins/cf_groups"), v = 50;
    return e("lib/interface/controls"),
    t = a.extend({
        _separate_order_by: !1,
        _searching: !1,
        _classes: function() {
            return {
                cf_group: "js-cf-group",
                field_class: "filter__custom_settings__item",
                filter_manage: "filter__params_manage",
                filter_search_inner: "filter-search__inner",
                filter_search_wrapper: "filter-search__wrapper",
                group_wrapper: "filter-search__filter__group__wrapper",
                preset_selected: "filter__list__item-selected",
                presets_list: "js-filter-list"
            }
        },
        _selectors: function() {
            return {
                hidden_field: "[data-id=%s]",
                tags_field: ".filter-search__tags-holder",
                entity_wrapper: ".filter-search__entity-wrapper",
                entity_wrapper_by_type: '.filter-search__entity-wrapper[data-element-type="%s"]',
                filter_form: "#filter_form",
                filter_input: '.filter__form :input[name="%s"]',
                form_input: ':input[name="%s"]',
                tags_lib_plug_holder: ".filter-search__tags-holder_plug",
                tags_logic_input: "#filter-search__tags-logic-input_plug",
                tags_lib: "#filter-search__tags-lib",
                suggest_list: ".filter__custom_settings__item_suggest-manager ul",
                leads_status_checkbox: '.filter__custom_settings__item_statuses :input[type="checkbox"][name^="filter[pipe]"][value="%s"]',
                leads_opened_statuses: ".checkboxes_dropdown__statuses input:not(#cbx_drop_142):not(#cbx_drop_143)",
                leads_closed_statuses: "#cbx_drop_142, #cbx_drop_143",
                leads_select_opened_statuses: '.pipeline-select__dropdown input:not([value="142"]):not([value="143"])',
                leads_select_closed_statuses: '.pipeline-select__dropdown input[value^="14"]',
                todo_opened_statuses: ".checkboxes_dropdown__statuses input:not(#cbx_drop_compl)",
                todo_closed_statuses: "#cbx_drop_compl"
            }
        },
        eventsInit: function() {
            var e = s.extend({}, this.events, {
                "submit #filter_form": "apply",
                "click .js-filter__params_manage__clear": "reset",
                "click #filter_apply:not(.button-input-disabled)": "apply",
                'change [name="filter_date_switch"]': "filterDateClosedStatuses",
                "click .js-filter-field-clear": "clearField",
                "click .js-filter-search__entity-header": "onLinkedEntityHeaderClick"
            });
            this.delegateEvents(e)
        },
        preloadTemplates: n._preload(["/tmpl/filter/tags.twig", "/tmpl/filter/in_search/main.twig", "/tmpl/filter/complex.twig", "/tmpl/filter/fields.twig"]),
        initialize: function(e) {
            var t = [this.preloadTemplates()];
            this.params = e || {},
            this.checked_fields = {},
            this._separate_order_by = this.params.separate_order_by,
            a.prototype.initialize.call(this),
            this.params.el || this.setElement(i("#sidebar")),
            this.form = this._addComponent(l.View, {
                el: this.$("form"),
                model: l.Model
            }),
            Promise.all(t).then(s.bind(this.init, this))
        },
        init: function() {
            this.fill(),
            this.params._is_in_search || (this.listenTo(this.form.model, "has_changes", this.getOptionsCount),
            this.listenTo(this.form.model, "has_reverted", this.getOptionsCount),
            this.getOptionsCount()),
            s.isUndefined(this.params.disabled_users) && (this.params.disabled_users = !0),
            (this.params.is_list === !0 || "leads-pipeline" === AMOCRM.data.current_entity) && this._$document.on("filter:apply" + this.ns, s.bind(this.apply, this)),
            this.initPresets(),
            this.eventsInit(),
            s.isFunction(this.params.onInit) && this.params.onInit()
        },
        initPresets: function() {
            this._elem("presets_list").length && (this.presets = this._addComponent(c, {
                el: this._elem("presets_list"),
                filter: this,
                can_save: this.params.can_save_preset,
                onLoad: s.bind(function() {
                    this.makeFilterCaptionActive(!1),
                    s.isFunction(this.params.onPresetLoad) && this.params.onPresetLoad()
                }, this)
            }))
        },
        initTagsLib: function(e, t) {
            var i, n;
            i = e.find(":input").map(function(e, t) {
                return t.value
            }),
            this._elem("tags_logic_input").length && (this.tags_logic_input_name || (this.tags_logic_input_name = this._elem("tags_logic_input").attr("name")),
            n = {
                tags_logic_enabled: !0,
                tags_logic_input_name: this.tags_logic_input_name,
                getTagsLogicValue: s.bind(function() {
                    return this.form.model.get(this.tags_logic_input_name)
                }, this)
            }),
            (this.tags_lib = this._addComponent(d, s.extend({
                entity: AMOCRM.getBaseEntity(),
                pipeline_id: this.params.pipeline_id,
                selected_tags: i,
                $filter_scroller: this._elem("filter_search_wrapper"),
                $apply_buttons: this.params.$apply_buttons,
                checkSuggestValues: s.bind(this.checkSuggestValues, this),
                setNeedReload: s.bind(function(e) {
                    e = e || {},
                    this._need_reload = e.reload
                }, this)
            }, n || {}))).init().then(s.bind(function() {
                e.remove(),
                this._elem("tags_logic_input").remove(),
                this._elem("filter_form").append(this.tags_lib.$el),
                this.$el.addClass("filter-search_two-pane"),
                t()
            }, this))
        },
        show: function() {
            var e = this._findElem("tags_lib_plug_holder");
            new Promise(s.bind(function(t, i) {
                !this.tags_lib && e.length ? this.initTagsLib(e, t) : (this.tags_lib && this.tags_lib.checkNeedRerender(),
                t())
            }, this)).then(s.bind(this._show, this))
        },
        _show: function() {
            var e;
            if (this.params._is_in_search)
                return this.$el.hasClass("visible") || (this.presets && this.presets.highlight(),
                this.$el.removeClass("hidden").prepareTransition().addClass("visible"),
                u._getV3Plug() && (e = this._getFilterScrollbarWidth(),
                this._elem("filter_manage").css("marginRight", e),
                this.tags_lib && (this._setFilterWidth(),
                this._$window.on("resize" + this.ns, s.bind(s.debounce(this._setFilterWidth, v), this))))),
                this
        },
        hide: function() {
            return this.params._is_in_search ? (this.$el.removeClass("visible").addClass("hidden"),
            this._$window.off(this.ns),
            this) : void 0
        },
        fillClear: function(e) {
            var t = this;
            return this.form.$el.length ? (s.isUndefined(e) && (e = this.form.$(".filter__custom_settings__item :input")),
            e.length && e.reverse().each(function() {
                var e = i(this);
                switch (e.closest(t._class("field_class")).removeAttr("data-options-count").removeClass("glow"),
                e[0].type.toString().toLowerCase()) {
                case "text":
                case "hidden":
                    e.val("").trigger("controls:change");
                    break;
                case "radio":
                    e.prop("checked", !this.value).trigger("change");
                    break;
                case "checkbox":
                    e.prop("checked", !1).removeAttr("checked").trigger("change")
                }
            }),
            this) : this
        },
        fill: function(e) {
            var t, n = h.removeQueryParam(["filter[order_by]", "filter[order_type]", "clear_order", "term"]), o = h.QStoJSON(n ? n : this.getDefaultFilter(), !0), r = !1;
            o = this.parseObjectKeysForFilter(o),
            e = e || "",
            s.each(o, function(e, n) {
                if (!s.isArray(e) && !e.length)
                    return !0;
                if (s.isArray(e) || (e = [e]),
                r = !1,
                n.indexOf("[!") >= 0 && (n = n.replace("[!", "["),
                r = !0),
                this.params.has_pipelines && "filter[status_id][]" === n && s.contains(u.getLeadsWinlostStatuses(), parseInt(e)))
                    t = this._findElem("leads_status_checkbox", s.first(e)),
                    t.length && t.prop("checked", !0).trigger("change");
                else if (t = this._findElem("filter_input", n),
                t.length)
                    switch (t[0].type.toString().toLowerCase()) {
                    case "text":
                    case "hidden":
                        e[0] && t.val(e[0] || "").trigger("controls:change");
                        break;
                    case "radio":
                    case "checkbox":
                        i.each(t, function(t, n) {
                            var o = !1;
                            o = r ? -1 === s.indexOf(e, n.value) : s.indexOf(e, n.value) >= 0,
                            i(n).prop("checked", o).trigger("change")
                        })
                    }
                return !0
            }, this),
            this.form.model.updateDefaults(),
            this.form.checkChanges(),
            this._$document.trigger("filter:deserialize:callback", [o])
        },
        reset: function(e) {
            e = e || {},
            e && e.preventDefault && e.preventDefault(),
            this.makeFilterCaptionActive(!1),
            this.form.revert(),
            this.tags_lib && (this.tags_lib.destroy(),
            delete this.tags_lib),
            this._findElem("suggest_list").html(""),
            this.form.checkDeleted(),
            e.navigate !== !1 && AMOCRM.router.navigate(r.history.location.pathname, {
                trigger: !0
            })
        },
        apply: function(e) {
            var t, s, n, o, r = h.getQueryParam("term") || "", a = "", l = "";
            return this._$document.trigger("controls:hide"),
            e && e.preventDefault && (e.preventDefault(),
            "click" === e.type && this._$document.trigger("filter:apply:click")),
            this.params.is_list === !0 && this.$(".filter__list__item-selected").removeClass("filter__list__item-selected"),
            this._separate_order_by === !0 ? (t = h.getQueryParam("order_type"),
            s = h.getQueryParam("order_by")) : (t = h.getQueryParam("filter[order_type]"),
            s = h.getQueryParam("filter[order_by]")),
            t && s && (this._separate_order_by === !0 ? a += "&order_by=" + s + "&order_type=" + t : a = "&filter[order_by]=" + s + "&filter[order_type]=" + t),
            r = r.length ? "&term=" + r : "",
            n = this.form.$el.attr("action").trim(),
            o = this.form.$el.find(":input").filter(function() {
                return "" !== i(this).val()
            }).serialize(),
            "/" === n.substr(n.length - 1) ? n += "?" : (o.indexOf("element_type") > -1 && (n = n.replace("element_type=1", "").replace("element_type=2", "").replace("element_type=3", "")),
            "?" !== n.substr(n.length - 1) && (n += "&")),
            AMOCRM.data.current_view && AMOCRM.data.current_view.filterPrepareAction && (o = AMOCRM.data.current_view.filterPrepareAction(o)),
            this._getOptionsCount() && (l = o),
            AMOCRM.router.navigate(n + l + r + a + "&useFilter=y", {
                trigger: !0
            }),
            !1
        },
        filterDateClosedStatuses: function(e) {
            var t, s, n = i(e.currentTarget), o = "closed" === n.val();
            switch (AMOCRM.getBaseEntity()) {
            case "leads":
                this.params.pipeline_id ? (t = this._findElem("leads_opened_statuses"),
                s = this._findElem("leads_closed_statuses")) : (t = this._findElem("leads_select_opened_statuses"),
                s = this._findElem("leads_select_closed_statuses"));
                break;
            case "todo":
                t = this._findElem("todo_opened_statuses"),
                s = this._findElem("todo_closed_statuses");
                break;
            case "stats":
                this.$('.filter__custom_settings__item[data-tmpl="statuses"]').toggle(!o)
            }
            t && s && (t.prop("checked", !o).trigger("change"),
            s.prop("checked", o).trigger("change"))
        },
        clearField: function(e) {
            var t = i(e.currentTarget).closest(this._selector("field_class"))
              , n = t.attr("data-is-fn");
            s.isFunction(this[n]) ? this[n](!1, t) : this.fillClear(t.find(":input:not(.js-filter-clear-skip)")),
            this.unsetFilledInputName(t),
            e.stopPropagation()
        },
        onLinkedEntityHeaderClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(".filter-search__entity-wrapper")
              , n = "filter-search__entity-wrapper_contracted";
            s.hasClass(n) && s.removeClass(n).siblings(".filter-search__entity-wrapper").addClass(n)
        },
        setUrl: function(e) {
            this.form.$el.attr("action", e)
        },
        makeFilterCaptionActive: function(e) {
            var t = "addClass";
            e = s.isUndefined(e) ? !0 : e,
            e || (t = "removeClass"),
            i("#filter_show_btn")[t]("filter-show-btn-active"),
            i("#filter_caption")[t]("showed")
        },
        filterCheckValue: function(e, t) {
            var i, n = /(filter\[cf]\[\d+])\[(from|to)]/gi.exec(e);
            switch (!0) {
            case "fake" === e:
                return -1;
            case "filter_date_switch" === e:
            case "filter_date_from" === e:
            case "filter_date_to" === e:
                return this.filterDefaultValues("filter_date_switch", this.form.model.get("filter_date_switch")) ? "filter_date_from" === e ? t ? 1 : -1 : this.form.model.get("filter_date_from") ? 0 : -1 : "filter_date_switch" === e ? 1 : 0;
            case "filter[date][type]" === e:
            case "filter[date][from]" === e:
            case "filter[date][to]" === e:
                return this.filterDefaultValues("filter[date][type]", this.form.model.get("filter[date][type]")) ? "filter[date][from]" === e ? t ? 1 : -1 : this.form.model.get("filter[date][from]") ? 0 : -1 : "filter[date][type]" === e ? 1 : 0;
            case "filter[next_date][type]" === e:
            case "filter[next_date][from]" === e:
            case "filter[next_date][to]" === e:
                return "filter[next_date][from]" === e ? t ? 1 : -1 : this.form.model.get("filter[next_date][from]") ? 0 : -1;
            case "filter[tags_logic]" === e:
                return "or" === t ? 0 : 1;
            case n:
                return i = n[1] + "[from]",
                e === i ? this.form.model.get(i) ? 1 : -1 : this.form.model.get(i) ? 0 : -1;
            case /filter\[pipe]\[/gi.test(e):
                if (s.indexOf(this._values_checker, "filter[pipe]") >= 0)
                    return 0;
                if (s.filter(this.form.model.attributes, function(e, t) {
                    return /filter\[pipe]\[/gi.exec(t) && e
                }).length)
                    return this._values_checker.push("filter[pipe]"),
                    1;
                break;
            default:
                return t ? 1 : -1
            }
            return -1
        },
        _getOptionsCount: function() {
            var e, t = 0;
            return this._values_checker = [],
            s.each(this.form.model.attributes, function(i, s) {
                e = this.filterCheckValue(s, i),
                this.filterDefaultValues(s, i) || -1 === e || (t += e)
            }, this),
            t
        },
        getOptionsCount: function() {
            var e, t, i, n, o = 0, r = "", a = this.getDefaultFilter(), l = [];
            return this.hide_checker = [],
            this._values_checker = [],
            s.each(this.form.model.attributes, function(r, a) {
                e = this.filterCheckValue(a, r),
                t = this.form.$('[name="' + a + '"]').closest(this._selector("field_class")),
                i = t.closest(this._selector("group_wrapper")),
                n = i.prev(this._selector("cf_group")),
                this.filterDefaultValues(a, r) || -1 === e ? (n.attr("data-foldable", 1),
                t.removeClass("glow")) : (o += e,
                t.addClass("glow"),
                n.attr("data-foldable", 0),
                this.hide_checker[n.data("id")] = n.data("id"),
                this.cacheFilledInputName(a, t),
                i.length && "none" === i[0].style.display && n.trigger("cf-group:toggle")),
                r && (s.isArray(r) || (r = [r]),
                l = l.concat(s.map(r, function(e) {
                    return {
                        name: a,
                        value: e
                    }
                })))
            }, this),
            this._elem("cf_group").removeClass("need_hide"),
            s.each(s.values(this.hide_checker), function(e, t) {
                e && this._findElem("hidden_field", e).addClass("need_hide")
            }, this),
            r = s.map(s.sortBy(l, "value"), function(e) {
                return e.name + "=" + e.value
            }).join("&"),
            r === a && (o = 0,
            this.resetFilledInputNames(),
            this.form.$(this._selector("field_class")).removeClass("glow")),
            this.setEntityWrapperClass(),
            this.makeFilterCaptionActive(o && !h.getQueryParam("sel")),
            this._has_changes = !!o,
            o
        },
        refreshAll: function(e) {
            e = e || {},
            (e.filter || e.filters) && (i("#sidebar").replaceWith(n({
                ref: "/tmpl/filter/in_search/main.twig"
            }).render(s.extend(e, {
                pipeline_view: !!AMOCRM.data.current_view.pipeline_id
            }))),
            i(".list__body-right__top").removeClass("search-responsive"))
        },
        refreshPresets: function(e) {
            e && i("#filter_list").html(n({
                ref: "/tmpl/filter/in_search/presets.twig"
            }).render({
                pipeline_view: !!AMOCRM.data.current_view.pipeline_id,
                filter: e
            }))
        },
        refresh: function(e, t) {
            e && (i("#filter_fields").replaceWith(n({
                ref: "/tmpl/filter/common/fields.twig"
            }).render({
                pipeline_view: !!AMOCRM.data.current_view.pipeline_id,
                filter: e
            })),
            t && (t.full && e.url && i("#filter_form").attr("action", e.url),
            t.full && (this.form.initModelFromForm(),
            this.form.model.updateDefaults(),
            this.form.setUrl(),
            this.fill())))
        },
        checkSuggestValues: function(e, t) {
            var i;
            if (e.length && (t = t || e.data("input-name"),
            i = e.find(this._selector("form_input", t)).map(function(e, t) {
                return t.value
            }),
            this.form.model.get(t) || i.length)) {
                switch (i.length) {
                case 0:
                    i = "";
                    break;
                case 1:
                    i = s(i).first();
                    break;
                default:
                    i = s(i).flatten()
                }
                this.form.model.set(t, i),
                this.form.checkChanges()
            }
        },
        checkNeedReload: function() {
            return this._need_reload
        },
        _setFilterWidth: function() {
            this.$el.css("width", this.params.$container.outerWidth() + this.params.$top_acitons.outerWidth())
        },
        _getFilterScrollbarWidth: function() {
            return this._elem("filter_search_wrapper").outerWidth() - this._elem("filter_search_inner").outerWidth()
        },
        _fixFilterForSuggest: function(e) {
            var t = (e || {}).fix;
            this._elem("filter_search_inner").css("paddingRight", t ? this._getFilterScrollbarWidth() : ""),
            this._elem("filter_search_wrapper").css("overflow", t ? "hidden" : "")
        }
    }),
    i(document).on("page:changed.filter", function() {
        i("#sidebar").toggleClass("sidebar-expanded", !1),
        i("#sidebar__right").toggleClass("sidebar-expanded", !1),
        i("#sidebar_overlay, #filter_overlay").trigger("overlay:hide")
    }).on(AMOCRM.click_event, ".filter-sidebar", function() {
        i("#sidebar__right").toggleClass("sidebar-expanded"),
        i(".sidebar__button__close").css({
            "background-image": "none"
        }),
        i(document.body).append(i('<div class="default-overlay" id="filter_overlay"></div>')),
        i("#filter_overlay").trigger("overlay:show")
    }).on(AMOCRM.click_event, ".aside-toggleable #sidebar_toggler, .js-aside_toggler", function() {
        var e = i("#sidebar")
          , t = i('<div class="default-overlay" id="sidebar_overlay"></div>');
        e.toggleClass("sidebar-expanded"),
        e.hasClass("sidebar-expanded") ? (i(document.body).append(t),
        t.trigger("overlay:show")) : i("#sidebar_overlay").trigger("overlay:hide")
    }).on(AMOCRM.click_event, ".sidebar__button__close, #filter_overlay", function() {
        i("#filter_overlay").trigger("overlay:hide"),
        i("#sidebar__right").toggleClass("sidebar-expanded", !1)
    }).on(AMOCRM.click_event, "#sidebar_overlay", function() {
        i("#sidebar_overlay").trigger("overlay:hide"),
        i("#sidebar").toggleClass("sidebar-expanded", !1)
    }),
    o.mixin(t, _, p, g, f, m, b),
    t
}),
define("lib/interface/search/search", ["require", "jquery", "underscore", "elements_view", "lib/components/filter/filter", "lib/common/urlparams", "lib/common/fn", "lib/interface/controls", "vendor/plugins/jquery.mousewheel"], function(e) {
    "use strict";
    var t, i, s, n = e("jquery"), o = e("underscore"), r = e("elements_view"), a = e("lib/components/filter/filter"), l = e("lib/common/urlparams"), c = e("lib/common/fn"), d = null;
    return e("lib/interface/controls"),
    e("vendor/plugins/jquery.mousewheel"),
    i = o.debounce(function(e) {
        o.isFunction(this.options.onSearch) ? this.options.onSearch(e) : this.setTerm(e, "")
    }, 500),
    s = o.throttle(function(e) {
        var t, i = "addClass", s = c.numeralWord(e.options_count, AMOCRM.lang.filter_options_numeral), o = n(this._selector("filter_options"));
        e.is_clear && !e.term ? (i = "removeClass",
        e.$highlight = this.$(".js-filter-preset-link.filter__list__item-selected:not(.filter__list__item-default)"),
        e.options_count = n.trim(e.$highlight.text())) : (t = !e.$highlight.length && "has_changes" === e.model_event && "has_reverted" !== e.model_event,
        this._toggleClass("hidden", "filter_apply_holder", !t),
        this.toggleApplyButton({
            toggle: t
        }),
        e.term = e.term || l.getQueryParam("term"),
        e.options_count ? e.options_count += " " : e.term ? (s = "",
        e.options_count = AMOCRM.lang.all_search) : i = "removeClass",
        e.$highlight.length && (i = "addClass",
        s = "",
        e.options_count = n.trim(e.$highlight.text()))),
        o[e.$highlight.length ? "addClass" : "removeClass"]("is-preset")[i]("list-top-search__options-showed"),
        e.is_clear || o.text(e.options_count).attr("data-filter-options", s),
        this.highlight("addClass" === i ? !0 : !1)
    }, 200, {
        leading: !1
    }),
    t = r.extend({
        filter: null,
        ns: ".search-ns",
        _clicked_filter: !1,
        _$overlay: null,
        _selectors: function() {
            return {
                options: "#search_filter_options",
                default_wrapper: "#search_input_wrapper",
                clear_btn: "#search_clear_button",
                input: "#search_input",
                filter_options: "#search_filter_options",
                filter_apply: "#filter_apply"
            }
        },
        _classes: function() {
            return {
                filter: "filter-search",
                filter_apply_holder: "list-top-search__apply-block",
                filter_has_changes: "filter-search_has-changes",
                filter_manage: "filter__params_manage",
                filter_right: "filter-search__right",
                hidden: "h-hidden",
                hs: "js-hs-wrapper",
                options_showed: "list-top-search-options-showed",
                responsive: "search-responsive",
                search_active: "search-is-active",
                top_wrapper: "list__body-right__top"
            }
        },
        events: {
            "click #search_clear_button": "clearClick",
            "click .js-search-hide": "searchHide",
            click: "filterShow",
            "click .filter-search": "clickInSearchFilter",
            "click .js-filter-apply": "filterApplyClick",
            "click .js-search-filter-clear": "filterClearClick",
            "controls:select:open .control--select": "onControlsListOpen",
            "controls:select:hide .control--select": "onControlsListHide",
            "controls:checkboxes_dropdown:open .checkboxes_dropdown__list": "onControlsListOpen",
            "controls:checkboxes_dropdown:hide .checkboxes_dropdown__list": "onControlsListHide"
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.options.el || this.setElement(n(this._selector("default_wrapper"))),
            (AMOCRM.data.entity_changed || "catalogs" === AMOCRM.data.current_entity) && this._elem("input").val((l.getQueryParam("term") || "").replace(/\+/gi, " ")),
            this.options.filter ? this.filter = new a(o.extend(e.filter, {
                _is_in_search: !0,
                $container: this.$el,
                $top_acitons: this.$el.siblings(".list__top__actions"),
                $apply_buttons: this._findElem("filter_manage"),
                onPresetLoad: o.bind(this.clearSearch, this),
                onInit: o.bind(function() {
                    this.listenTo(this.filter.form.model, "has_changes", this.renderOptions),
                    this.listenTo(this.filter.form.model, "has_reverted", this.renderOptions),
                    this.renderOptions(),
                    this.filter.$el.hasClass("hidden") || (this._filter_showed = !0)
                }, this)
            })) : this.highlight(l.getQueryParam("term")),
            this._$document.on("keydown" + this.ns, o.bind(this.checkFocus, this)).on("filter:apply:click" + this.ns, o.bind(this.filterHide, this)),
            d = this
        },
        destroy: function() {
            this._$body.off(this.ns),
            this._$document.off(this.ns),
            this.filter && (this.filter.destroy(),
            this._filter_showed && c._getV3Plug() && this._$document.trigger("overlay:unfix")),
            this.remove(!1)
        },
        clearClick: function(e) {
            e.stopPropagation(),
            this.clear()
        },
        filterClearClick: function(e) {
            e.stopPropagation(),
            this.clear(!0)
        },
        checkFocus: function(e) {
            var t, i, s = n(".modal");
            s.length || !document.activeElement || -1 !== o.indexOf(["INPUT", "TEXTAREA"], document.activeElement.tagName) || n(document.activeElement).is("[contenteditable]") || !/\w/gi.test(String.fromCharCode(e.keyCode)) || e.metaKey || e.ctrlKey || (i = document.getElementById("search_input"),
            i && (t = (i.value || "").length,
            i.focus(),
            i.setSelectionRange(t, t)))
        },
        setTerm: function(e, t) {
            this.filter && (this.filter._searching = !1),
            AMOCRM.router.navigate(l.setParam({
                page: ""
            }, {
                only_path: !0
            }) + l.setQueryParam({
                term: e,
                typing: t
            }, {
                only_query_string: !0
            }), {
                trigger: !t && (!this.filter || this.filter && !this.filter.form.hasChanges()),
                replace: t || this.filter && this.filter.form.hasChanges()
            }),
            !t && this.filter && this.filter.form.hasChanges() && this.filter.apply()
        },
        searchInput: function(e, t) {
            var s = n.trim(e.currentTarget.value) && e.currentTarget.value
              , o = l.getQueryParam("term") || "";
            s !== o && (t = t || {},
            this._$document.trigger("search:query_notify:hide"),
            this.filter && (this.filter._searching = !!s),
            this.renderOptions({
                term: s
            }),
            s && this.filterHide(),
            0 !== s.length && s.length < 3 || (this.highlight(!0),
            t.silent !== !0 && (this.setTerm(s, "y"),
            i.call(this, s))))
        },
        filterShow: function(e) {
            this._$document.trigger("controls:hide", ["tip"]),
            n(e.currentTarget).closest(this._selector("top_wrapper")).addClass(this._class("responsive")),
            this._filter_showed || (this._elem("input").focus(),
            this.clickInSearchFilter()),
            this.filter && !this._filter_showed && (this._filter_showed = !0,
            this.filter.show(),
            c._getV3Plug() && this._$document.trigger("overlay:fix"),
            n(this._selector("hs")).trigger("hs:pause"),
            this._$body.on("swipe" + this.ns, o.bind(function(e, t, i, s) {
                (0 !== i || 0 !== s) && this._elem("input").blur()
            }, this)),
            this._$overlay || this.$el.closest(".list__body-right").prepend(this._$overlay = n('<div class="filter-search-overlay" id="search_filter_overlay"></div>')))
        },
        highlight: function(e) {
            n(this.options.filter && this.options.filter.active_selector || "#search_input_wrapper").prepareTransition()[e ? "addClass" : "removeClass"](this.options.filter && this.options.filter.active_class || "list-top-search-options-showed"),
            n(this._selector("clear_btn"))[e ? "show" : "hide"]()
        },
        toggleApplyButton: function(e) {
            var t = (e || {}).toggle;
            this._findElem("filter_apply").trigger("button:" + (t ? "enable" : "disable")),
            c._getV3Plug() && this._toggleClass("filter_has_changes", "filter", t),
            this._has_changes = t
        },
        filterApplyClick: function(e) {
            e.stopPropagation(),
            this.filterHide(),
            this.filterApply()
        },
        filterHide: function() {
            this.filter && (this._$body.off("swipe" + this.ns),
            this._filter_showed = !1,
            this.filter.hide(),
            n(this._selector("hs")).trigger("hs:resume"),
            this._$overlay && (this._$overlay.remove(),
            delete this._$overlay),
            c._getV3Plug() && this._$document.trigger("overlay:unfix"))
        },
        clickInSearchFilter: function() {
            this._clicked_filter = !0,
            this.filterClickDelay()
        },
        filterClickDelay: function() {
            o.delay(o.bind(function() {
                this._clicked_filter = !1
            }, this), 300)
        },
        filterApply: function(e) {
            if (this.filter)
                switch (!0) {
                case this.filter.form.hasChanges():
                    return this.filter.apply();
                case this.filter.checkNeedReload():
                    return this._$document.trigger("page:reload")
                }
        },
        clear: function(e) {
            var t = l.getQueryParam("term") || ""
              , i = t ? "?term=" + t : ""
              , s = l.setParam({
                page: ""
            }, {
                only_path: !0
            });
            if (e = void 0 === e ? !1 : e,
            this.filter) {
                if (this.filter.presets && this.filter.presets.$preset_in_edit)
                    return;
                this.filter.reset({
                    navigate: !1
                })
            }
            t || this.highlight(!1),
            this.renderOptions({
                is_clear: !0,
                term: e ? t : ""
            }),
            this.$el.closest(this._selector("top_wrapper")).removeClass(this._class("responsive")),
            this._addClass("hidden", "filter_apply_holder"),
            this.toggleApplyButton({
                toggle: !1
            }),
            this._$document.trigger("search:query_notify:hide"),
            this._$body.removeClass(this._class("search_active")),
            e ? this.filterHide() : this.clearSearch(),
            this.options.no_reload_page || AMOCRM.router.navigate(s.replace("/trash/", "/list/") + (e ? i : ""), {
                trigger: !0
            })
        },
        clearSearch: function() {
            this._filter_showed && this.filterHide(),
            this._elem("input").val(""),
            o.isFunction(this.options.onClear) && this.options.onClear()
        },
        renderOptions: function(e) {
            var t = [];
            e = e || {},
            this.filter && (e && this.filter.presets && (this.filter.form.hasChanges() ? this.filter.presets.highlightSave(this.filter._getOptionsCount() ? !0 : !1) : t = this.filter.presets.highlight()),
            s.call(this, {
                is_clear: e.is_clear,
                options_count: this.filter.getOptionsCount(),
                term: e.term,
                $highlight: t,
                model_event: e.type
            }))
        },
        onControlsListOpen: function(e) {
            var t, i, s, o, r = n(e.target), a = this._has_changes ? this._elem("filter_manage").outerHeight() + 10 : 0, l = r.get(0).getBoundingClientRect(), d = this._elem("filter").get(0).getBoundingClientRect();
            switch (e.type) {
            case "controls:checkboxes_dropdown:open":
                t = "checkboxes_dropdown__expanded-to-top";
                break;
            case "controls:select:open":
                t = "control--select--list-to-top"
            }
            c._getV3Plug() && r.length && l.bottom > d.bottom - a && (i = l.top - 45 - d.top,
            s = d.bottom - a - l.top,
            i > s && (r.addClass(t),
            o = l.top - d.top - l.height - 10,
            0 > o && r.height(l.height + o - r.parent().outerHeight())))
        },
        onControlsListHide: function(e) {
            n(e.target).height("")
        }
    }),
    n(document).on("page:entity_changed", function() {
        d = null
    }).on("input", "#search_input", function(e) {
        d && d.searchInput(e)
    }).on("click.search:filter:hide", "#search_filter_overlay", function(e) {
        0 === e.button && ((!d._filter_showed || n(window).width() > 900) && d.$el.closest(d._selector("top_wrapper")).removeClass(d._class("responsive")),
        d._filter_showed && !d._clicked_filter && (e.preventDefault(),
        e.stopPropagation(),
        d.filterHide(),
        d.filterApply()),
        d._clicked_filter = !1)
    }),
    t
}),
define("lib/interface/unsorted/pipeline/model", ["require", "underscore", "backbone"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("backbone"), n = s.sync;
    return t = s.Model.extend({
        idAttribute: "uid",
        url: function(e) {
            return "/api/unsorted/" + (e || "list") + "/?" + t.prototype.getCredentials()
        },
        sync: function(e, t, i) {
            i = i || {},
            i.beforeSend = function(e) {
                e.setRequestHeader("Accept", "application/json")
            }
            ,
            n.call(this, e, t, i)
        },
        getCredentials: function() {
            return this.user || (this.user = AMOCRM.constant("user")),
            ["api_key=" + this.user.api_key, "login=" + this.user.login].join("&")
        },
        accept: function(e) {
            this.proceed("accept", "accepted", {
                data: e
            })
        },
        decline: function() {
            this.proceed("decline", "declined")
        },
        link: function(e) {
            var t = {}
              , s = this.get("uid");
            e = e || [],
            i.each(e, function(e) {
                t[s] = e
            }),
            this.proceed("link", "linked", {
                data: {
                    links: t
                }
            })
        },
        proceed: function(e, t, s) {
            var n, o = {};
            this.user || (this.user = AMOCRM.constant("user")),
            o.user_id = this.user.id,
            o[e] = [this.get("uid")],
            s = s || {},
            this.trigger(e + ":start", s),
            this.sync("create", this, {
                url: this.url(e),
                data: $.param({
                    request: {
                        unsorted: i.extend({
                            lang: AMOCRM.lang_id
                        }, o, s.data || {})
                    }
                }),
                success: i.bind(function(s) {
                    if (s && s.response && s.response.unsorted) {
                        if (s = s.response.unsorted,
                        s[e] && "success" === s[e].status)
                            return n = s[e].data[this.get("uid")],
                            n = i.isEmpty(n) ? !0 : n,
                            void this.trigger(t + ":success", n, this)
                    } else
                        this.trigger(t + ":failed", [s]);
                    this.trigger(e + ":finished", s)
                }, this),
                error: i.bind(function(e) {
                    this.trigger(t + ":failed", [e])
                }, this)
            })
        }
    })
}),
define("lib/interface/unsorted/pipeline/collection", ["require", "backbone", "lib/interface/unsorted/pipeline/model", "underscore", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t = e("backbone")
      , i = e("lib/interface/unsorted/pipeline/model")
      , s = t.sync
      , n = e("underscore")
      , o = e("lib/common/fn")
      , r = e("lib/core/users");
    return t.Collection.extend({
        model: i,
        url: i.prototype.url,
        syncEnded: function(e) {
            this._is_fetching = !1,
            e.apply({}, Array.prototype.slice.call(arguments, 1))
        },
        sync: function(e, t, i) {
            return i = i || {},
            this._is_fetching ? void 0 : (this._is_fetching = !0,
            i.data = n.extend(i.data || {}, {
                "order_by[date_create]": "desc"
            }),
            i.beforeSend = function(e) {
                e.setRequestHeader("Accept", "application/json")
            }
            ,
            i.success = n.wrap(i.success, n.bind(this.syncEnded, this)),
            i.error = n.wrap(i.error, n.bind(this.syncEnded, this)),
            i.remove = !1,
            s.call(this, e, t, i))
        },
        parse: function(e) {
            n.each(e.response.unsorted.list, function(e) {
                if (e.source_data && "chats" == e.category) {
                    var t = r.get()
                      , i = AMOCRM.constant("amojo_origins")
                      , s = i[e.source_data.service]
                      , a = n.findWhere(t, {
                        login: e.source_data.to
                    });
                    e.manager_name = "",
                    s ? e.source_data.service_icon = s.icon : e.manager_name = a ? a.title : e.source_data.to,
                    e.user_name = e.source_data.name || e.source_data.from,
                    e.source_data.data = o.mergeChatsMessages(e.source_data.data)
                }
            });
            var t = e.response && e.response.unsorted;
            return this.summary = t.summary,
            t.list
        }
    })
}),
define("lib/interface/unsorted/mixins/settings", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        getUnsortedSettings: function(e) {
            var i, s = AMOCRM.constant("unsorted");
            return e = e || {},
            i = !t.isEmpty(e) && e || s || {},
            t.extend({}, this.unsorted_settings || {}, i)
        }
    }
}),
define("twigjs", ["require", "underscore", "vendor/twig", "lib/common/fn", "lib/common/cookie"], function(e) {
    var t = e("underscore")
      , i = e("vendor/twig")
      , s = e("lib/common/fn");
    e("lib/common/cookie");
    return i.extend(function(e) {
        var i = e.Template.prototype.render;
        e.Template.prototype.render = function(e, s) {
            return i.call(this, t.extend({
                lang: AMOCRM.lang,
                lang_id: AMOCRM.lang_id,
                _time_format: AMOCRM.system.format.time
            }, e), s)
        }
    }),
    i.extendFilter("task_text", function(e) {
        return e == AMOCRM.lang.tasks_follow_up ? "" : e
    }),
    i.extendFilter("i18n", function(e) {
        return s.i18n(e)
    }),
    i.extendFilter("parse_urls", function(e) {
        if (!e)
            return "";
        var t, i, s, n;
        return i = /(\b([a-z]{3,8}):\/\/[-a-zа-€0-9+&@#\/%?=~_|!:,.;]*[-a-zа-€0-9+&@#\/%=~_|])/gim,
        t = e.replace(i, '<a href="$1" target="_blank" rel="nofollow">$1</a>'),
        s = /(^|[^\/])(www\.[-a-zа-€0-9+&@#\/%?=~_|!:,.;]*[-a-zа-€0-9+&@#\/%=~_|])/gim,
        t = t.replace(s, '$1<a href="http://$2" target="_blank" rel="nofollow">$2</a>'),
        n = /([-a-zа-€0-9!#$%&'*+\/=?^_`{|}~]+(?:\.[-а-€a-z0-9!#$%&'*+\/=?^_`{|}~]+)*@(?:[a-zа-€0-9]([-a-zа-€0-9]{0,61}[а-€a-z0-9])?\.)*([a-zа-€]{2,8}))/gim,
        t = t.replace(n, '<a href="mailto:$1' + (AMOCRM.lang.mail ? "?bcc=" + AMOCRM.lang.mail : "") + '">$1</a>'),
        t || ""
    }),
    i.extendFilter("period", function(e) {
        var t, i;
        return t = Math.floor(e % 31536e3 / 86400),
        t > 0 ? (i = (AMOCRM.lang_id = "ru") ? t % 10 == 1 && 11 != t ? "дн€" : "дней" : 1 == t ? "day" : "days",
        t + " " + i) : !1
    }),
    i.extendFilter("random_string", function(e) {
        return s.randString(e)
    }),
    i.extendFilter("raw", function(e) {
        return e = e || "",
        e.toString().replace(/\&amp\;/g, "&")
    }),
    i.extendFilter("time", function(e) {
        var t, i, s;
        return e ? (t = Math.floor(e / 60),
        60 > e ? (t = "00",
        s = parseInt(e, 10)) : (t = parseInt(t, 10),
        t = (10 > t ? "0" : "") + t,
        s = parseInt(e - 60 * t, 10)),
        s = (10 > s ? ":0" : ":") + s,
        i = t + s) : ""
    }),
    i.extendFilter("raw", function(e) {
        return e = e || "",
        e.toString().replace(/\&amp\;/g, "&")
    }),
    i.extendFilter("fn_escape", function(e) {
        return e = e || "",
        s.escapeHTML(e.toString())
    }),
    i.extendFunction("random", function(e) {
        var t, i, s = 0;
        return t = e ? "string" == typeof e || "object" == typeof e && e.length ? e.length : parseInt(t, 10) : 2147483647,
        i = Math.floor(Math.random() * (t - s + 1)) + s,
        "string" == typeof e || "object" == typeof e && e.length ? e[i] : i
    }),
    i.extendFilter("nl2br", function(e) {
        return e = e || "",
        e.toString().replace(/\n/g, "<br/>")
    }),
    i.extendFilter("by_paragraphs", function(e, t) {
        return "[object Array]" !== Object.prototype.toString.call(e) && (e = (e || "").toString().split("\n\n").join("\n")),
        t = t || "split",
        e[t]("\n")
    }),
    i.extendFilter("nl2p", function(e) {
        var t, i = "";
        e = (e || "").split("\n");
        for (t in e)
            "" != s.trim(e[t]) && (i += "<p>" + e[t] + "</p>");
        return i
    }),
    i.extendFilter("count", function(e) {
        return s.prettyNumber(e)
    }),
    i.extendFilter("price", function(e, t) {
        var i, n, o;
        return t = t || [],
        e = e || 0,
        i = t[0] || !1,
        n = t[1] || 0,
        o = t[2] || !1,
        s.currency(e, i, n, !1, o)
    }),
    i.extendFilter("plug_price", function(e) {
        var t;
        return e = e || 3,
        t = "" + s.currency(new Array(++e).join("1")),
        s.replaceAll("1", "0", t)
    }),
    i.extendFilter("round", function(e) {
        return Math.round(e)
    }),
    i.extendFilter("date", s.twigFilterDate),
    i.extendFilter("element_type", function(e, t) {
        return s.convertElementType(e, t)
    }),
    i.extendFilter("relative_date", function(e, t) {
        var i, n = [], o = e;
        if (e)
            return "number" == typeof e && (e = moment.unix(e)),
            i = moment(e, AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time),
            i.isSame(new Date, "day") ? (n.push(i.format(moment().lang().calendar("today"))),
            n.push(i.format(AMOCRM.system.format.date.time))) : i.isSame(moment().add("days", 1), "day") ? (n.push(i.format(moment().lang().calendar("tomorrow"))),
            n.push(i.format(AMOCRM.system.format.date.time))) : i.isSame(moment().subtract("days", 1), "day") ? (n.push(i.format(moment().lang().calendar("yesterday"))),
            n.push(i.format(AMOCRM.system.format.date.time))) : t && t.length ? 1 == t.length && "full_with_year" == t[0] ? n.push(i.format(AMOCRM.system.format.date.calendar)) : (t.unshift(o),
            n.push(s.formatDate.apply(this, t))) : i.isSame(moment(), "year") ? n.push(i.format(AMOCRM.system.format.date.calendar_no_year)) : n.push(i.format(AMOCRM.system.format.date.calendar)),
            n.join(", ")
    }),
    i.extendFilter("task_date", function() {
        return s.formatDate.apply(this, arguments)
    }),
    i.extendFilter("unesc", function(e) {
        return void 0 === e ? e : e.toString().replace(/\&amp\;/g, "&").replace(/\&lt\;/g, "<").replace(/\&gt\;/g, ">").replace(/\&quot\;/g, '"').replace(/\&\#039\;/g, "'").replace(/\&#040\;/g, "(").replace(/\&#041\;/g, ")").replace(/\&#043\;/g, "+").replace(/\&#037\;/g, "%")
    }),
    i.extendFilter("numeral", function(e, t) {
        e = e || "";
        var i = e.toString().split(",");
        if ("ru" == moment.lang()) {
            if ("all" == t)
                return i[3];
            var s = Math.abs(t) % 100
              , n = s % 10;
            return s > 10 && 20 > s ? i[2] : n > 1 && 5 > n ? i[1] : 1 == n ? i[0] : i[2]
        }
        return 1 != t || "all" == t ? i[1] : i[0]
    }),
    i.extendFilter("format", function() {
        var e, t = arguments[0] || "";
        for (e = 1; e < arguments.length && "undefined" != typeof arguments[e]; ++e)
            t = t.replace("%s", arguments[e]);
        return t
    }),
    function(e) {
        var t = e.base_path || "/twig/"
          , s = e.v || +new Date
          , n = {
            allowInlineIncludes: e.allowInlineIncludes || !1,
            base: t,
            href: t + e.href + "?v=" + s,
            data: e.data,
            async: e.async || !0,
            id: e.id || void 0,
            load: e.load || void 0,
            ref: e.ref || void 0
        };
        return i.twig(n)
    }
}),
define("lib/interface/controls/responsive_toggler_b", ["require", "jquery", "underscore", "twig", "lib/common/urlparams", "elements_view"], function(e) {
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = (e("lib/common/urlparams"),
    e("elements_view"))
      , o = n.extend({
        cropped: !1,
        ns: ".rt",
        items: {},
        defaults: {
            leave: t.noop,
            enter: t.noop
        },
        options: null,
        currentItem: null,
        events: {
            "click .control-toggler__button": "showHideTogglerItems"
        },
        setCollection: function(e) {
            var t = this
              , s = 0;
            if (!e)
                throw "Collection must be defined!";
            i.each(e, function(e) {
                var n = i.isFunction(e.get) && e.get("id") || e.id || s++;
                t.items[n] = e
            })
        },
        initialize: function(e) {
            e = e || {},
            this.options = i.extend({}, this.defaults, e),
            this.$el.find(".responsive_toggler").show(),
            e.no_init_click || (e.active ? this.itemClick({
                active: e.active
            }) : this.selectFirst()),
            this._$document.on("resize" + this.ns, ".list__body-right__top", this.throttedResize().bind(this)).on("click" + this.ns, ".js-list-sidebar-toggler", this.throttedResize().bind(this)).on("click hide:toggler" + this.ns, this.hideTogglerItems.bind(this)).on("toggler:form:new" + this.ns, this.reinit().bind(this)).on("toggler:render" + this.ns, this.reinit().bind(this)),
            this._$window.on("resize" + this.ns, this.throttedResize().bind(this))
        },
        getUrl: function(e) {
            var e = e || {}
              , t = e.newPipeline && e.newPipeline.id || e.id
              , s = ""
              , n = "";
            if (t && (s = t + "/"),
            AMOCRM.data.is_card)
                n = window.location.pathname + window.location.search;
            else {
                var o = window.location.pathname
                  , r = i.compact(o.split("/"))
                  , a = 3 == r.length ? i.first(r, r.length - 1) : r;
                n = "/" + a.join("/") + "/" + s
            }
            return n
        },
        destroy: function() {
            this.remove(),
            this._$window.off(this.ns),
            this._$document.off(this.ns)
        },
        remove: function() {
            this.undelegateEvents().stopListening()
        },
        reload: function(e) {
            e = e || {};
            var i = e.newPipeline && e.newPipeline.id || e.id || "";
            t.ajax({
                url: "/ajax/leads/pipeline/" + i,
                type: "POST",
                success: s._preload(["/tmpl/controls/responsive_toggler.twig"], function(e) {
                    e.response.filter.pipelines || (e.response.filter.pipelines = {
                        items: [{
                            link: "/leads/pipeline/",
                            selected: !0,
                            title: AMOCRM.lang.leads_pipeline_toggler_default
                        }],
                        name: "filter[pipeline_id]"
                    });
                    var i = t(s({
                        ref: "/tmpl/controls/responsive_toggler.twig"
                    }).render({
                        class_name: "list__top__preset__toggler list__top__preset__toggler_before-list",
                        item_class_name: "js-list-caption-link",
                        responsive_toggler_modify: "pipelines-responsive-toggler",
                        items: e.response.filter.pipelines.items,
                        expandable: !0
                    }));
                    t(".list__top__preset .responsive-toggler-container").html(i)
                })
            })
        },
        showHideTogglerItems: function(e) {
            if (!i.isFunction(this.options.needStopShow) || this.options.needStopShow(e) !== !1) {
                i.isFunction(this.options.onToggle) && this.options.onToggle(),
                e = e || {};
                var t = this.$el.find(".hidden-toggler-items");
                t.toggle(),
                this.$el.find(".control-toggler__button").toggleClass("control-toggler__button_expanded"),
                e.stopPropagation && (e.stopPropagation(!0),
                e.preventDefault())
            }
        },
        hideTogglerItems: function(e) {
            var i = t(".hidden-toggler-items");
            i.hide(),
            t(".control-toggler__button").removeClass("control-toggler__button_expanded"),
            e.stopPropagation && e.stopPropagation()
        },
        itemClick: function(e, s) {
            e = e || {},
            s = s || {};
            var n = this
              , o = e.currentTarget ? t(e.currentTarget) : this.$el.find(".control-toggler .control-toggler__item").closest('[href="/leads/pipeline/' + e.active + '"], [data-id="' + e.active + '"]') || this.$el.find(".control-toggler .control-toggler__item")[e.active]
              , r = this.$el.find(".responsive_toggler .control-toggler__item")
              , a = this.$el.find(".control-toggler__button")
              , l = o.find("input").attr("name") || o.find("span").text();
            o.length && (r.removeClass("control-toggler__item-selected"),
            o.addClass("control-toggler__item-selected"),
            s.callback && i.isFunction(s.callback) && s.callback(),
            n.$el.find(".hidden-toggler-items").hide(),
            a.removeClass("control-toggler__button_expanded"),
            a.find(".control-toggler__button-name").text(l))
        },
        selectFirst: function() {
            var e = this
              , t = this.$el.find(".responsive_toggler .control-toggler__item")
              , i = t.first()
              , s = this.$el.find(".control-toggler__button")
              , n = i.find("input").attr("name") || i.find("span").text();
            t.removeClass("control-toggler__item-selected"),
            i.addClass("control-toggler__item-selected"),
            e.$el.find(".hidden-toggler-items").hide(),
            s.removeClass("control-toggler__button_expanded"),
            s.find(".control-toggler__button-name").text(n)
        },
        resizeToggler: function(e) {
            this.$el.find(".responsive_toggler").show(),
            this.$el.find(".control-toggler__button").removeClass("control-toggler__button_expanded"),
            this.$el.find(".hidden-toggler-item").unwrap();
            var i = this.$el
              , s = this.$el.find(".responsive_toggler .control-toggler__item")
              , n = this.$el.closest(".responsive-toggler__wrapper").length ? this.$el.closest(".responsive-toggler__wrapper") : t(".list__body-right__top")
              , o = n.width()
              , r = this.$el.find(".control-toggler__button")
              , n = t(".list__body-right__top")
              , a = n.find(".content__top__sidebar__toggler, .js-list-sidebar-toggler, .list-toggler, .list__top__actions, .list-top-search, .todo-top-toggler, .list-top-toggler")
              , l = n.find(".list-top-search").outerWidth() + 30
              , c = 200
              , d = 0
              , u = this.$el.find(".responsive_toggler:not(.list-toggler) .control-toggler__item")
              , h = 50
              , _ = this;
            this.options.withIcons || s.find(".icon").remove(),
            a.each(function() {
                d += t(this).outerWidth(!0)
            }),
            this.cropped || (this.elementSumWidth = 0,
            s.each(function() {
                _.elementSumWidth += t(this).outerWidth()
            }));
            var p = o - d;
            if (l > c && (p += l - c),
            (this.elementSumWidth >= (this.options.useMinWidth ? o / 3 : p) || s.length > 1 && AMOCRM.is_touch_device && !this.options.notFoldOnTouchDevice || this.options.no_resize) && !this.options.neverFold) {
                s.addClass("hidden-toggler-item"),
                this.cropped = !0,
                this.$el.find(".hidden-toggler-item").wrapAll('<div class="hidden-toggler-items"></div>'),
                r.show();
                var m = this.$el.find(".responsive_toggler .control-toggler__item-selected");
                m.length || (m = s.first());
                var f = m.find("input").attr("name") || m.attr("title");
                r.find(".control-toggler__button-name").text(f)
            } else
                s.removeClass("hidden-toggler-item"),
                this.cropped = !1,
                this.$el.find(".hidden-toggler-item").unwrap(),
                r.hide();
            t(window).width() <= 900 && !this.options.no_compact ? (r.addClass("control-toggler__button_compact"),
            this.compact = !0) : (r.removeClass("control-toggler__button_compact"),
            this.compact = !1),
            h = 0,
            i.css({
                opacity: "1"
            }).find(".need-expand-icon").removeClass("need-expand-icon"),
            u.css({
                position: "relative",
                left: "0",
                opacity: "1"
            })
        },
        throttedResize: function() {
            var e = i.throttle(this.resizeToggler, 100);
            return e
        },
        reinit: function() {
            return this.delegateEvents(),
            this.throttedResize()
        }
    });
    return o
}),
define("lib/common/hs", ["require", "jquery", "underscore", "lib/common/fn", "lib/interface/left_menu/index"], function(e) {
    "use strict";
    function t(e) {
        var t = o(e);
        return t.hasClass("draggable_text") ? !1 : t.contents().filter(function() {
            return 3 == this.nodeType
        }).text().trim().length
    }
    var i, s, n, o = e("jquery"), r = e("underscore"), a = e("lib/common/fn"), l = e("lib/interface/left_menu/index"), c = !1, d = !1, u = !1, h = {
        x: 0,
        y: 0
    }, _ = !1, p = ".hs:hand_scroll", m = [];
    return n = function(e) {
        var t;
        return e = e || {},
        t = e.static_width !== !0 ? a.getScrollBarWidth("scrollbar-tester") : a.scrollBarWidth,
        this.options = e || {},
        this.$scroller = this.options.scroller,
        this.$wrapper = this.options.wrapper,
        this.$wrapper.addClass("js-hs-wrapper"),
        this.options.selectable_content && this.$scroller.addClass("content-touch-selectable"),
        !this.$scroller.length || this.$scroller.data("hs") || AMOCRM.is_touch_device ? !1 : (this.$pane = o('<div class="hs__pane"><div class="hs__bar"></div></div>'),
        this.$bar = this.$pane.children(".hs__bar"),
        this.options.hide_scrollbar && this.$pane.addClass("hs__pane_hidden"),
        this.options.no_boundary && this.$wrapper.addClass("hs-wrapper_hide-boundary"),
        0 === t && a.isFFWithBuggyScrollbar() ? (i = parseInt(this.$scroller.css("paddingBottom")),
        s = parseInt(this.$scroller.css("marginBottom")),
        this.$scroller.css("marginBottom", s - 15),
        this.$scroller.css("paddingBottom", i + 15)) : this.$scroller.css("marginBottom", -t),
        this.dragged = !1,
        this.$bar.draggable({
            axis: "x",
            containment: "parent",
            start: r.bind(function() {
                this.dragged = !0,
                this.$pane.addClass("active")
            }, this),
            drag: r.bind(function(e, t) {
                var i = (e.clientX - e.clientX - parseInt(this.$bar.css("left"))) * (this.$scroller[0].scrollWidth - this.$scroller[0].clientWidth);
                this.pos(i / this.kpos())
            }, this),
            stop: r.bind(function() {
                this.dragged = !1,
                this.$pane.removeClass("active")
            }, this)
        }),
        this.$wrapper.addClass("hs-wrapper").append(this.$pane),
        this.updatePane(),
        this.options.hide_scrollbar || this.onScroll(!1, 0),
        this.handScroll(),
        this.$scroller.data("hs", this),
        m.push(this),
        this)
    }
    ,
    n.prototype.refresh = function() {
        this.updatePane(),
        this.options.hide_scrollbar || this.onScroll()
    }
    ,
    n.prototype.onScroll = function(e, t) {
        var i = this.$wrapper[0];
        return t = void 0 !== t ? t : this.rpos() * this.kpos(),
        e || this.$bar[0].style.setProperty("left", t + "px"),
        0 === Math.abs(t) ? (i.classList.add("hs-at-start"),
        r.isFunction(this.options.onReachStart) && this.options.onReachStart()) : (i.classList.remove("hs-at-start"),
        r.isFunction(this.options.onLeaveStart) && this.options.onLeaveStart()),
        this.bar_width + t === this.pane_width ? (i.classList.add("hs-at-end"),
        r.isFunction(this.options.onReachEnd) && this.options.onReachEnd()) : (i.classList.remove("hs-at-end"),
        r.isFunction(this.options.onLeaveEnd) && this.options.onLeaveEnd()),
        this
    }
    ,
    n.prototype.pos = function(e) {
        var t = "pageXOffset"
          , i = this.$scroller[0][t] ? t : "scrollLeft";
        return void 0 !== e && (this.$scroller[0][i] = Math.abs(e)),
        this.$scroller[0][i]
    }
    ,
    n.prototype.kpos = function(e) {
        return this.$pane[0].clientWidth - this.$bar[0].offsetWidth
    }
    ,
    n.prototype.rpos = function() {
        return this.pos() / (this.$scroller[0].scrollWidth - this.$scroller[0].clientWidth || 1)
    }
    ,
    n.prototype.updatePane = function() {
        o.isFunction(this.options.beforeUpdate) && this.options.beforeUpdate.call(this);
        var e = parseInt(Math.pow(this.$scroller[0].clientWidth, 2) / this.$scroller[0].scrollWidth, 0);
        return this.$bar.width(e),
        e >= this.$scroller[0].clientWidth ? (this.$pane.hide(),
        this.$wrapper.addClass("hs__wrapper_no-boundary"),
        this.$scroller.addClass("hs-wrapper_no-hand")) : (this.$pane.show(),
        this.$wrapper.removeClass("hs__wrapper_no-boundary"),
        this.$scroller.removeClass("hs-wrapper_no-hand")),
        this.bar_width = this.$bar[0].offsetWidth,
        this.pane_width = this.$pane[0].offsetWidth,
        this
    }
    ,
    n.prototype.isDragged = function() {
        return u
    }
    ,
    n.prototype.handScroll = function(e) {
        var i;
        this.$scroller.off(p).one("mousemove", r.bind(this.updatePane, this)).on("mousedown" + p, ".js-hs-prevent", function() {
            d = !0
        }).on("mousedown" + p, r.bind(function(e) {
            return l.stopHoverMenu(),
            t(e.target) || (this.selection_prevented = !0,
            o("body").addClass("block-selection-prepended"),
            this.$scroller.find(".block-selectable").removeClass("block-selectable").addClass("block-selection-prepended")),
            o(e.target).is(":input") ? !0 : void (d || (h = {
                x: e.pageX,
                y: e.pageY
            },
            c = !0,
            i = e.clientX,
            this.options.selectable_content && t(e.target) || this.$scroller.addClass("hand-cursor-dragging")))
        }, this)).on("click" + p, function(e) {
            return u ? (u = !1,
            !1) : void (_ || o(e.target).is(":input") || t(e.target) ? _ = !1 : window.getSelection ? window.getSelection().empty ? window.getSelection().empty() : window.getSelection().removeAllRanges && window.getSelection().removeAllRanges() : document.selection && document.selection.empty())
        }).on("mousemove" + p, r.bind(function(e) {
            if (c === !0 && (_ = !0),
            this.selection_prevented && !o(e.currentTarget).closest(".js-hs-scroll-stop").length) {
                if (c === !0) {
                    var t = this.$scroller.scrollLeft() + (i - e.clientX);
                    (Math.abs(h.x - e.pageX) > 5 || Math.abs(h.y - e.pageY)) && (u = !0),
                    this.$scroller.scrollLeft(t),
                    i = e.clientX
                }
                o(e.target).is(":input") || e.preventDefault()
            }
        }, this)),
        this.options.hide_scrollbar || this.$scroller.on("scroll" + p, r.bind(function() {
            this.onScroll(this.dragged)
        }, this)),
        o(document).on("mouseup" + p, r.bind(function(e) {
            l.startHoverMenu(),
            this.selection_prevented && (this.selection_prevented = !1,
            o("body").removeClass("block-selection-prepended"),
            this.$scroller.find(".block-selection-prepended").removeClass("block-selection-prepended").addClass("block-selectable")),
            c && (c = !1),
            u && (u = !1)
        }, this))
    }
    ,
    n.prototype.scrollPause = function() {
        this._hide_scrollbar_margin = parseInt(this.$scroller.css("marginBottom")),
        this.$scroller.off(p).addClass("h-scroll-blocked").css("marginBottom", 0)
    }
    ,
    n.prototype.scrollResume = function() {
        this.$scroller.removeClass("h-scroll-blocked").css("marginBottom", this._hide_scrollbar_margin),
        this.handScroll()
    }
    ,
    n.prototype.destroy = function() {
        var e = m.indexOf(this);
        !AMOCRM.is_touch_device && this.$scroller.length && (o(document).off(p),
        this.$bar && this.$bar.data("ui-draggable") && this.$bar.draggable("destroy"),
        this.$pane && this.$pane.off().remove(),
        this.$scroller.removeData().off(),
        e > -1 && m.splice(e, 1))
    }
    ,
    o(function() {
        o("html").addClass("scrollbar-width-" + a.scrollBarWidth),
        o(document).on("mouseup" + p + ":up", function(e) {
            c = !1,
            d = !1,
            o(".js-hs-scroller").removeClass("hand-cursor-dragging")
        }).on("hs:pane:hide", ".js-hs-wrapper", function() {
            o(this).children(".hs__pane").hide()
        }).on("hs:pane:show", ".js-hs-wrapper", function() {
            o(this).children(".hs__pane").show()
        }).on("hs:pause", ".js-hs-wrapper", function() {
            o(this).children(".js-hs-scroller").addClass("h-scroll-blocked")
        }).on("hs:resume", ".js-hs-wrapper", function() {
            o(this).children(".js-hs-scroller").removeClass("h-scroll-blocked")
        }),
        o(window).on("resize.hs", r.debounce(function() {
            m.length && r.each(m, function(e) {
                e.updatePane(),
                e.$scroller.trigger("scroll.hs")
            })
        }, 200))
    }),
    n
}),
define("lib/interface/dashboard/filter", ["require", "underscore", "lib/common/urlparams"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = (e("lib/common/urlparams"),
    {}), n = {}, o = {};
    return t = function(e) {
        n = e || {},
        this.initialize.apply(this, arguments)
    }
    ,
    i.extend(t.prototype, {
        initialize: function(e) {},
        destroy: function() {
            s = {},
            n = {},
            o = {}
        },
        get: function(e) {
            return e ? s[e] : s
        },
        set: function(e, t, n) {
            var o = {
                silent: !1
            }
              , r = {}
              , a = [];
            return i.isObject(e) ? (n = t,
            r = e) : r[e] = t,
            n = i.extend(o, n || {}),
            i.mapObject(r, function(e, t) {
                var n = s[t];
                i.isEqual(e, n) || (s[t] = e,
                a.push({
                    key: t,
                    oldValue: n,
                    newValue: e
                }))
            }),
            i.isEmpty(a) ? !1 : (n.silent || this.onChange(a),
            !0)
        },
        unset: function(e) {
            throw "Not yet completely implemented!"
        },
        has: function(e) {
            return !i.isEmpty(s[e])
        },
        onChange: function(e) {
            this.fire(e)
        },
        on: function(e, t) {
            var s;
            i.isString(e) && (e = e.split(" ")),
            1 == arguments.length && i.isFunction(arguments[0]) && (e = ["all"],
            t = arguments[0]),
            i.each(e, function(e) {
                i.isArray(o[e]) || (o[e] = []),
                s = {
                    key: e,
                    handler: t
                },
                o[e].push(s)
            })
        },
        off: function() {
            throw "Not yet implemented"
        },
        fire: function(e) {
            var t = [];
            e = e || {},
            i.each(e, function(s) {
                var n = s.key;
                i.each(o[n], function(s) {
                    i.contains(t, s.handler) || (s.handler(e),
                    t.push(s.handler))
                }),
                i.each(o.all, function(s) {
                    i.contains(t, s.handler) || (s.handler(e),
                    t.push(s.handler))
                })
            })
        }
    }),
    new t
}),
define("lib/interface/dashboard/unsorted", ["require", "jquery", "underscore", "lib/interface/dashboard/filter"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/interface/dashboard/filter"), o = function() {
        var e = this;
        t = setInterval(s.bind(function() {
            this.localStorage = null
        }, this), this.cacheLifeTime),
        n.on(function() {
            e.localStorage = null
        })
    };
    return s.extend(o.prototype, {
        localStorage: null,
        user: AMOCRM.constant("user"),
        loading: !1,
        loadingDeferred: !1,
        cacheLifeTime: 6e4,
        filter: {},
        fetchData: function(e) {
            if (this.filter = e || {},
            this.loading)
                return this.loadingDeferred;
            var t = this.loadingDeferred = i.Deferred()
              , o = {
                login: this.user.login,
                api_key: this.user.api_key,
                data: {
                    filter: {
                        date: {
                            from: n.get("date_from") || this.filter.date_from,
                            to: n.get("date_to") || this.filter.date_to
                        }
                    }
                }
            };
            return this.loading = !0,
            this.fetchRequest = i.ajax({
                url: "/api/unsorted/get_incoming_requests/",
                type: "GET",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json; charset=UTF-8"
                },
                data: o
            }).done(s.bind(function(e) {
                e.response || t.reject(),
                this.localStorage = e,
                t.resolve(e)
            }, this)).fail(function() {
                t.reject()
            }).always(s.bind(function() {
                this.loading = !1,
                this.fetchRequest = null
            }, this)),
            t
        },
        getData: function(e, t) {
            var s = AMOCRM.constant("unsorted") || {}
              , n = s.show && s.enabled;
            return t = "undefined" != typeof t ? t : !1,
            n ? t || !this.localStorage ? this.fetchData(e) : i.Deferred().resolve(this.localStorage) : i.Deferred().resolve({
                no_rights: !0
            })
        },
        destroy: function() {
            t && clearInterval(t),
            this.fetchRequest && this.fetchRequest.abort()
        }
    }),
    new o
}),
define("lib/interface/dashboard/charts/conversion", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/common/urlparams", "lib/common/browserdetect", "lib/core/view", "lib/common/hs", "lib/interface/dashboard/unsorted", "lib/interface/dashboard/filter"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = (e("lib/common/urlparams"),
    e("lib/common/browserdetect")), a = e("lib/core/view"), l = e("lib/common/hs"), c = e("lib/interface/dashboard/unsorted"), d = e("lib/interface/dashboard/filter");
    return t = a.extend({
        template: "/tmpl/dashboard/charts/conversion.twig",
        options: {},
        hs: null,
        ns: ".conversion_chart",
        pipeline_changed: !1,
        showUnsorted: !1,
        isFF: !1,
        initialize: function(e) {
            this.isFF = "Firefox" == r.browser && "Mac" == r.OS,
            a.prototype.initialize.apply(this, arguments),
            this.options = e || {};
            var t = this.$el.find("#show_unsorted");
            t.length ? this.showUnsorted = !!(["1", "true"].indexOf(t.val()) >= 0) : this.showUnsorted = this.options.data.unsorted.enabled && this.options.data.unsorted.show,
            this.renderChart(),
            this.bindResizeEvent()
        },
        destroy: function() {
            this._$window.off(this.ns),
            a.prototype.destroy.apply(this, arguments)
        },
        bindResizeEvent: function() {
            var e = this;
            this._$window.on("resize" + this.ns, function(t) {
                e.hs ? e.hs.refresh() : e.initHS()
            })
        },
        render: function(e) {
            var t = n({
                ref: this.template
            }).render({
                params: e
            });
            if (this.$el.html(t),
            e.plug || !e.access) {
                var i = this.$el.find(".conversion-chart__body-inner")
                  , s = i.closest(".top-chart__wrapper")
                  , o = i.position().left
                  , r = s.width() - i.width()
                  , a = (o + r) / 2;
                this.$el.addClass("top-chart__wrapper_plugged"),
                this.$el.append(n({
                    ref: "/tmpl/dashboard/charts/top_chart_plug.twig"
                }).render({
                    params: e
                })),
                a > 0 && this.$el.find(".conversion-chart__body-inner").css({
                    "margin-left": a + "px"
                }),
                this._$window.on("resize" + this.ns, this.setPlugSideOffset.bind(this))
            } else
                this._$window.off("resize" + this.ns),
                this.$el.removeClass("top-chart__wrapper_plugged"),
                this.hs && this.hs.destroy(),
                this.initHS();
            this.bindResizeEvent()
        },
        setPlugSideOffset: function() {
            var e = this.$el.find(".conversion-chart__body-inner")
              , t = e.closest(".top-chart__wrapper")
              , i = e.position().left
              , s = t.width() - e.width()
              , n = (i + s) / 2;
            n > 0 && this.$el.find(".conversion-chart__body-inner").css({
                "margin-left": n + "px"
            })
        },
        insertUnsorted: function(e) {
            e = e || {};
            var t = o.prettyNumber(e.count || 0)
              , s = e.transfer_percentage || 0
              , n = o.prettyNumber(e.transfer_count)
              , r = e.transfer_link;
            this.$el.find(".top-chart").each(function() {
                var e = i(this);
                e.find(".leads-transfer").removeClass("leads-transfer_first").first().addClass("leads-transfer_first")
            }),
            this.$el.find(".conversion-chart__unsorted-count").text(t),
            this.setUnsortedCountFontSize(),
            this.$el.find(".leads-transfer_first .leads-transfer__percentage-value").text(s),
            this.$el.find(".leads-transfer_first .leads-transfer__count-value").text(n),
            this.$el.find(".leads-transfer_first .leads-transfer__percentage > a").attr("href", r),
            this.$el.find(".leads-transfer_first .leads-transfer__count > a").attr("href", r),
            this.$el.find(".leads-transfer_first").removeClass("leads-transfer_preload"),
            this.$el.find(".leads-transfer__inner_hidden").removeClass("leads-transfer__inner_hidden"),
            this.$el.find(".conversion-chart__separator").removeClass("conversion-chart__separator_hidden")
        },
        setUnsortedCountFontSize: function() {
            this.$el.find(".conversion-chart__unsorted-count").css({
                "font-size": ""
            });
            var e, t = this.$el.find(".conversion-chart__unsorted-count").width(), i = this.$el.find(".conversion-chart__unsorted-inner").width(), s = 60, n = -3;
            t > i && (e = s / (t / i),
            50 > e && e >= 35 ? n = -2 : 35 > e && (n = -1),
            this.$el.find(".conversion-chart__unsorted-count").css({
                "font-size": e + "px",
                "letter-spacing": n + "pt"
            }))
        },
        animateBack: function() {
            var e = this
              , t = 1
              , s = 100
              , n = i.Deferred()
              , o = [];
            return this.$el.find(".top-chart").addClass("top-chart_hidden"),
            this.$el.find(".conversion-chart__transfers").removeClass("conversion-chart__transfers_shadowed"),
            this.$el.find(".top-chart__plug-text").addClass("top-chart__plug-text_hidden"),
            this.$el.find(".conversion-chart__transfers .conversion-chart__transfer-wrapper").each(function() {
                var n = i(this)
                  , r = n.find(".leads-transfer")
                  , a = i.Deferred();
                o.push(a.promise()),
                setTimeout(function() {
                    (e.showUnsorted || t != e.$el.find(".leads-transfer").length) && r.addClass("leads-transfer_hidden"),
                    a.resolve()
                }, t * s),
                t++
            }),
            i.when(o).done(function() {
                n.resolve()
            }),
            n.promise()
        },
        animate: function() {
            var e = this
              , t = this.$el.find(".leads-transfer")
              , s = t.length
              , n = 100
              , o = i.Deferred()
              , r = [];
            return this.showUnsorted && this.$el.find(".conversion-chart__unsorted").removeClass("conversion-chart__unsorted_hidden"),
            this.$el.find(".top-chart__plug-text").removeClass("top-chart__plug-text_hidden"),
            this.$el.find(".conversion-chart__custom-status").each(function() {
                var e = i(this)
                  , t = e.find(".conversion-chart__status-leads-count")
                  , o = i.Deferred();
                r.push(o.promise()),
                setTimeout(function() {
                    t.removeClass("conversion-chart__status-leads-count_only"),
                    o.resolve()
                }, s * n),
                s--
            }),
            s = t.length,
            this.$el.find(".conversion-chart__transfers .conversion-chart__transfer-wrapper").each(function() {
                var t = i(this)
                  , o = t.find(".leads-transfer")
                  , a = i.Deferred();
                r.push(a.promise()),
                setTimeout(function() {
                    (e.showUnsorted || s != e.$el.find(".leads-transfer").length) && o.removeClass("leads-transfer_hidden"),
                    a.resolve()
                }, s * n),
                s--
            }),
            i.when(r).done(function() {
                setTimeout(function() {
                    e.$el.find(".top-chart").removeClass("top-chart_hidden"),
                    e.isFF || e.$el.find(".conversion-chart__transfers").addClass("conversion-chart__transfers_shadowed"),
                    o.resolve()
                }, 100)
            }),
            o.promise()
        },
        resetAnimation: i.noop,
        initHS: function() {
            this.hs = this._addComponent(l, {
                wrapper: this.$el,
                scroller: this.$el.find("#conversion-chart")
            })
        },
        renderChart: function(e) {
            var t, n = this, o = s.isEmpty(this.options.data), r = o || this.options.chart_changed || this.pipeline_changed || !AMOCRM.first_load && AMOCRM.data.entity_changed || this.options.force_reload, a = this.showUnsorted, l = {
                response: {
                    total: 0,
                    unsorted: 0
                }
            };
            i.when(r ? this.getPipelineData.call(this) : this.options.data).done(function(s) {
                var c = {};
                d.set({
                    date_from: s.params.date_from,
                    date_to: s.params.date_to
                }, {
                    silent: !0
                }),
                c = n.preparePipelineData.call(n, s),
                t = c.plug,
                (r || !o) && (e ? e.done(function() {
                    n.render.call(n, c)
                }) : n.render.call(n, c)),
                n.$el.parent().find("#chart-loader").hide(),
                t || n.showUnsortedLoader(),
                n.animate().done(function() {
                    n.hs && n.hs.refresh()
                }),
                i.when(a && !t ? n.getUnsortedData.call(n) : t ? l : null).done(function(e) {
                    var i = n.prepareUnsortedData.call(n, e, s, {
                        isPlugMode: t
                    });
                    if (e) {
                        var e = e ? e.response : {}
                          , o = 0
                          , r = {};
                        o = t ? 0 : 100 * i.statuses.custom[0].transfer_count_unsorted / (i.statuses.custom[0].transfer_count_unsorted + e.declined),
                        r = {
                            count: e.total,
                            transfer_percentage: o ? Math.round(o) : 0,
                            transfer_count: i.statuses.custom[0].transfer_count_unsorted,
                            transfer_link: i.statuses.custom[0].transfer_link_unsorted
                        },
                        n.insertUnsorted(r)
                    }
                    n.hideUnsortedLoader()
                })
            })
        },
        preparePipelineData: function(e) {
            var t = {};
            return e = e || (s.isEmpty(this.options.data) ? {} : this.options.data) || {},
            e.widgets && (t = e.widgets.top_chart),
            this.showUnsorted || (t.statuses.custom[0].transfer_count = t.statuses.custom[0].transfer_count_total,
            t.statuses.custom[0].transfer_percentage = 100,
            t.statuses.custom[0].transfer_link = t.statuses.custom[0].transfer_link_total),
            e.unsorted && (this.showUnsorted = e.unsorted.show && e.unsorted.enabled),
            t.show_unsorted = this.showUnsorted,
            this.pipeline_changed && (this.pipeline_changed = !1),
            t
        },
        prepareUnsortedData: function(e, t, i) {
            i = i || {};
            var n, o = {};
            return t = t || (s.isEmpty(this.options.data) ? {} : this.options.data) || {},
            t.widgets && (o = t.widgets.top_chart),
            e = e ? e.response : {},
            this.showUnsorted && (n = i.isPlugMode ? 0 : 100 * o.statuses.custom[0].transfer_count_unsorted / e.total,
            o.statuses.custom[0].transfer_count = o.statuses.custom[0].transfer_count_unsorted,
            o.statuses.custom[0].transfer_percentage = n ? Math.round(n) : 0,
            o.statuses.custom[0].transfer_link = o.statuses.custom[0].transfer_link_unsorted),
            o.unsorted = e.unsorted,
            o
        },
        getPipelineData: function() {
            var e = this
              , t = i.Deferred();
            return i.ajax({
                url: "/ajax/dashboard/show/",
                type: "GET",
                data: {
                    pipeline_id: this.options.pipeline_id,
                    view: "conversion",
                    period: d.get("period"),
                    only: "top_chart",
                    sel: ("custom" == d.get("sel") ? d.get("selected_users") : d.get("sel")) || "all"
                }
            }).done(function(i) {
                e.options.data = i.response,
                s.isFunction(e.options.onload) && e.options.onload(e.options.data),
                t.resolve(i.response)
            }).fail(function() {
                t.reject()
            }),
            t
        },
        getUnsortedData: function() {
            return c.getData(this.options.filter, !0)
        },
        refresh: function(e) {
            e = e || {},
            this.options = s.extend({}, this.options, e);
            var t = this
              , i = this.animateBack();
            i.done(function() {
                s.isFunction(e.callback) && e.callback(),
                t.renderChart(i)
            })
        },
        showUnsortedLoader: function() {
            var e = this.$el.find("#unsorted-loader");
            e.length ? this.$el.find("#unsorted-loader").show() : (e = i('<div class="default-overlay" id="unsorted-loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            this.$el.find(".conversion-chart__unsorted-inner").append(e)),
            e.addClass("visible")
        },
        hideUnsortedLoader: function() {
            var e = this.$el.find("#unsorted-loader")
              , t = this.$el.find(".conversion-chart__unsorted-info");
            e.removeClass("visible"),
            e.hide(),
            t.removeClass("conversion-chart__unsorted-info_hidden")
        },
        onPeriodChanged: function() {
            this.period_changed = !0,
            this.refresh()
        }
    })
}),
define("lib/interface/dashboard/charts/pie", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/common/urlparams", "lib/interface/controls/responsive_toggler_b", "chartjs", "lib/interface/dashboard/filter", "lib/core/view", "lib/common/hs"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = (e("lib/common/urlparams"),
    e("lib/interface/controls/responsive_toggler_b"),
    e("chartjs").noConflict()), a = e("lib/interface/dashboard/filter"), l = e("lib/core/view"), c = e("lib/common/hs");
    return t = l.extend({
        template: "/tmpl/dashboard/charts/pie.twig",
        url: "",
        options: {},
        hs: null,
        ns: ".pie_chart",
        leftChart: null,
        rightChart: null,
        pipeline_changed: !1,
        initialize: function(e) {
            l.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.init(),
            this.bindResizeEvent()
        },
        destroy: function() {
            this.leftChart && this.leftChart.destroy(),
            this.rightChart && this.rightChart.destroy(),
            this._$window.off(this.ns),
            l.prototype.destroy.apply(this, arguments)
        },
        bindResizeEvent: function() {
            var e = this;
            this._$window.on("resize" + this.ns, function(t) {
                e.hs ? e.hs.refresh() : e.initHS()
            })
        },
        render: function(e) {
            var t = n({
                ref: this.template
            }).render({
                params: e
            });
            this.$el.empty().html(t),
            e.plug || !e.access ? (this.$el.addClass("top-chart__wrapper_plugged"),
            this.$el.append(n({
                ref: "/tmpl/dashboard/charts/top_chart_plug.twig"
            }).render({
                params: e
            })),
            this.setPlugSideOffset(),
            this._$window.on("resize" + this.ns, this.setPlugSideOffset.bind(this))) : (this._$window.off("resize" + this.ns),
            this.$el.removeClass("top-chart__wrapper_plugged")),
            this.bindResizeEvent(),
            this.initCharts(e)
        },
        setPlugSideOffset: function() {
            this.$el.find(".pie-chart__columns").css({
                width: this.$el.width() + "px"
            })
        },
        animateBack: function() {
            var e = i.Deferred()
              , t = this.$el.find(".pie-chart__statuses-column .pie-chart__row")
              , n = this.$el.find(".pie-chart__managers-column .pie-chart__row")
              , o = []
              , r = []
              , a = 100
              , l = 0;
            return this.$el.find(".top-chart").addClass("top-chart_hidden"),
            this.$el.find(".pie-chart__summary").addClass("pie-chart__summary_hidden-after"),
            this.$el.find(".top-chart__plug-text").addClass("top-chart__plug-text_hidden"),
            t.each(function() {
                var e, t, n = i(this), c = a * l;
                e = new Promise(s.bind(function(e, i) {
                    t = setTimeout(function() {
                        n.addClass("pie-chart__row_hidden-after"),
                        e()
                    }, c)
                }, this)),
                o.push(e),
                r.push(t),
                l++
            }),
            l = 0,
            n.each(function() {
                var e, t, n = i(this), c = a * l;
                e = new Promise(s.bind(function(e, i) {
                    t = setTimeout(function() {
                        n.addClass("pie-chart__row_hidden-after"),
                        e()
                    }, c)
                }, this)),
                o.push(e),
                r.push(t),
                l++
            }),
            Promise.all(o).then(function() {
                e.resolve()
            }),
            e.promise()
        },
        animate: function() {
            var e = i.Deferred()
              , t = this.$el.find(".pie-chart__statuses-column .pie-chart__row")
              , n = this.$el.find(".pie-chart__managers-column .pie-chart__row")
              , o = []
              , r = []
              , a = 100
              , l = 0;
            return this.$el.find(".top-chart").removeClass("top-chart_hidden"),
            this.$el.find(".pie-chart__summary").removeClass("pie-chart__summary_hidden"),
            this.$el.find(".top-chart__plug-text").removeClass("top-chart__plug-text_hidden"),
            t.each(function() {
                var e, t, n = i(this), c = a * l;
                e = new Promise(s.bind(function(e, i) {
                    t = setTimeout(function() {
                        n.removeClass("pie-chart__row_hidden"),
                        e()
                    }, c)
                }, this)),
                o.push(e),
                r.push(t),
                l++
            }),
            l = 0,
            n.each(function() {
                var e, t, n = i(this), c = a * l;
                e = new Promise(s.bind(function(e, i) {
                    t = setTimeout(function() {
                        n.removeClass("pie-chart__row_hidden"),
                        e()
                    }, c)
                }, this)),
                o.push(e),
                r.push(t),
                l++
            }),
            Promise.all(o).then(function() {
                e.resolve()
            }),
            e.promise()
        },
        resetAnimation: function() {
            var e = this.$el.find(".pie-chart__statuses-column .pie-chart__row")
              , t = this.$el.find(".pie-chart__managers-column .pie-chart__row");
            this.$el.find(".pie-chart__summary").removeClass("pie-chart__summary_hidden-after").addClass("pie-chart__summary_hidden"),
            e.each(function() {
                i(this).removeClass("pie-chart__row_hidden-after").addClass("pie-chart__row_hidden")
            }),
            t.each(function() {
                i(this).removeClass("pie-chart__row_hidden-after").addClass("pie-chart__row_hidden")
            })
        },
        initHS: function() {
            this.hs = this._addComponent(c, {
                wrapper: this.$el,
                scroller: this.$el.find("#pie-chart")
            })
        },
        init: function(e) {
            var t = this;
            i.when(this.getData(), this.options.animation || null).done(function(i) {
                var s = t.prepareData(i.widgets.top_chart);
                t.$el.parent().find("#chart-loader").hide(),
                e ? e.done(function() {
                    t.render(s)
                }) : t.render(s),
                t.animate().done(function() {
                    t.pipeline_changed && t.hs && (t.hs.destroy(),
                    t.hs = null),
                    s.plug || (t.hs ? t.hs.refresh() : t.initHS())
                })
            })
        },
        getData: function() {
            var e = this
              , t = i.Deferred();
            return i.ajax({
                url: "/ajax/dashboard/show/",
                type: "GET",
                data: {
                    pipeline_id: this.options.pipeline_id,
                    view: "pie",
                    only: "top_chart",
                    sel: ("custom" == a.get("sel") ? a.get("selected_users") : a.get("sel")) || "all",
                    period: a.get("period") || "week"
                },
                success: function(i) {
                    e.options.data = i.response,
                    s.isFunction(e.options.onload) && e.options.onload(e.options.data),
                    t.resolve(i.response)
                },
                error: function() {
                    t.reject()
                }
            }),
            t.promise()
        },
        prepareData: function(e) {
            var t = e || {}
              , i = e.plug
              , s = this.getPlugData();
            return i ? (t.statuses = s.statuses,
            t.managers = s.managers) : (this._sortRows(t.statuses.top),
            this._sortRows(t.managers.top),
            t.total.budget_str = o.reductNumericValue({
                value: t.total.price,
                isCurrency: !0
            }),
            t.total.leads_count_str = o.reductNumericValue({
                value: t.total.leads_count
            })),
            t
        },
        _sortRows: function(e) {
            e.sort(function(e, t) {
                var i = 0;
                return e.leads_percentage > t.leads_percentage ? i = -1 : e.leads_percentage < t.leads_percentage ? i = 1 : +e.price > +t.price ? i = -1 : +e.price < +t.price && (i = 1),
                i
            })
        },
        refresh: function(e) {
            e = e || {},
            this.options = s.extend({}, this.options, e);
            var t = this
              , i = this.animateBack();
            i.done(function() {
                s.isFunction(e.callback) && e.callback(),
                t.init(i)
            })
        },
        initCharts: function(e) {
            var t = this
              , i = e || this.options.data.widgets.top_chart
              , n = ["#1c69b4", "#2478c5", "#2B87D8", "#3396e7", "#3da6f1", "#66c2f9"]
              , o = i.statuses.top
              , a = i.statuses.others
              , l = i.managers.top
              , c = i.managers.others
              , d = []
              , u = []
              , h = 0
              , _ = 0;
            s.each(o, function(e) {
                h += e.leads_percentage;
                var t = {
                    value: e.leads_percentage,
                    color: e.color,
                    highlight: e.color
                };
                d.push(t)
            }),
            s.isEmpty(a) || (h += a.leads_percentage,
            d.push({
                value: a.leads_percentage,
                color: "#f3a581",
                highlight: "#f3a581"
            })),
            d = d.reverse(),
            d.push({
                value: h,
                color: "transparent",
                highlight: "transparent"
            }),
            s.each(document.getElementsByClassName("left-pie-chart"), function(i) {
                t.leftChart = new r(i.getContext("2d")).Doughnut(d, {
                    percentageInnerCutout: 92,
                    showTooltips: !1,
                    segmentStrokeWidth: 0,
                    segmentStrokeColor: "transparent",
                    animationEasing: "linear",
                    animationSteps: e.plug ? 1 : AMOCRM.is_touch_device ? 40 : 60
                })
            }),
            s.each(l, function(e, t) {
                _ += e.leads_percentage;
                var i = {
                    value: e.leads_percentage,
                    color: n[t],
                    highlight: n[t]
                };
                u.push(i)
            }),
            s.isEmpty(c) || (_ += c.leads_percentage,
            u.push({
                value: c.leads_percentage,
                color: n[n.length - 1],
                highlight: n[n.length - 1]
            })),
            u.push({
                value: _,
                color: "transparent",
                highlight: "transparent"
            }),
            s.each(document.getElementsByClassName("right-pie-chart"), function(i) {
                t.rightChart = new r(i.getContext("2d")).Doughnut(u, {
                    percentageInnerCutout: 92,
                    showTooltips: !1,
                    segmentStrokeWidth: 0,
                    segmentStrokeColor: "transparent",
                    animationEasing: "linear",
                    animationSteps: e.plug ? 1 : AMOCRM.is_touch_device ? 40 : 60
                })
            })
        },
        getPlugData: function() {
            return {
                statuses: {
                    top: [{
                        color: "#b3d6f2",
                        leads_percentage: 30
                    }, {
                        color: "#fff474",
                        leads_percentage: 25
                    }, {
                        color: "#ffbd41",
                        leads_percentage: 20
                    }, {
                        color: "#f799c2",
                        leads_percentage: 15
                    }, {
                        color: "#be63cd",
                        leads_percentage: 5
                    }, {
                        color: "#b2e989",
                        leads_percentage: 3
                    }],
                    others: {
                        color: "#f9a683",
                        leads_percentage: 2
                    }
                },
                managers: {
                    top: [{
                        leads_percentage: 30
                    }, {
                        leads_percentage: 25
                    }, {
                        leads_percentage: 20
                    }, {
                        leads_percentage: 15
                    }, {
                        leads_percentage: 5
                    }, {
                        leads_percentage: 3
                    }],
                    others: {
                        leads_percentage: 2
                    }
                }
            }
        }
    })
}),
define("lib/interface/dashboard/top_chart", ["require", "jquery", "underscore", "twigjs", "lib/common/fn", "lib/common/urlparams", "lib/interface/controls/responsive_toggler_b", "lib/core/view", "lib/common/hs", "lib/interface/dashboard/filter", "lib/interface/dashboard/charts/conversion", "lib/interface/dashboard/charts/pie"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twigjs"), o = (e("lib/common/fn"),
    e("lib/common/urlparams")), r = e("lib/interface/controls/responsive_toggler_b"), a = e("lib/core/view"), l = (e("lib/common/hs"),
    e("lib/interface/dashboard/filter")), c = {
        conversion: e("lib/interface/dashboard/charts/conversion"),
        pie: e("lib/interface/dashboard/charts/pie")
    }, d = {
        type: "conversion",
        pipeline_id: null,
        data: null
    };
    return t = a.extend({
        template: "/tmpl/dashboard/charts/charts.twig",
        events: {
            "click .top-chart__chart-switcher-item:not(.control-toggler__item-selected)": "chartSwitcherClick"
        },
        initialize: function(e) {
            a.prototype.initialize.apply(this, arguments),
            this.options = e || {};
            var t = this
              , i = o.getQueryParam("view");
            if (s.defaults(this.options, i ? {
                type: i
            } : {}, d),
            !i) {
                var n = o.setQueryParam({
                    view: this.options.type
                });
                AMOCRM.router.navigate(n, {
                    trigger: !1,
                    replace: !0
                })
            }
            this.pipelineTogglerInit(),
            this.chartsTogglerInit(),
            this.initChart(s.extend({}, this.options, {
                onload: s.bind(function(e) {
                    this.options.data = e || {}
                }, this)
            })),
            l.on(["pipeline_id"], function() {
                t.chart.pipeline_changed = !0,
                t.refresh(l.get())
            })
        },
        destroy: function() {
            this.chart.destroy(),
            a.prototype.destroy.apply(this, arguments)
        },
        render: function() {
            var e = n({
                ref: this.template
            }).render({
                pipelines: this.options.data.pipelines || [],
                type: this.options.type
            });
            this.$el.html(e)
        },
        refresh: function(e) {
            e = e || {},
            e.pipeline_id && (this.options.pipeline_id = e.pipeline_id),
            e.callback = this.showLoader.bind(this),
            this.chart.refresh(e),
            this.respToggler.itemClick({
                active: this.options.pipeline_id
            })
        },
        initChart: function(e) {
            e = e || {},
            e.el = this.$el.find(".top-chart__wrapper");
            var t = this.getChartView();
            this.chart = new t(e)
        },
        switchChart: function(e) {
            var t, i = this;
            this.chart && (t = this.chart.animateBack().done(function() {
                i.chart.destroy(),
                i.$el.find(".top-chart__wrapper").removeClass("top-chart__" + i.options.type + "-wrapper").addClass("top-chart__" + e + "-wrapper"),
                i.showLoader()
            })),
            this.options.type = e || "conversion",
            this.initChart({
                el: this.$el,
                pipeline_id: this.options.pipeline_id,
                data: this.options.data,
                chart_changed: !0,
                animation: t,
                onload: s.bind(function(e) {
                    this.options.data = e || {}
                }, this)
            })
        },
        chartSwitcherClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("id")
              , n = o.setQueryParam({
                view: s
            });
            AMOCRM.router.navigate(n, {
                trigger: !1,
                replace: !0
            }),
            this.switchChart(s),
            this.chartToggler.itemClick({
                active: s
            })
        },
        pipelineTogglerInit: function() {
            this.respToggler = this._addComponent(r, {
                el: this.$el.find(".top-chart__pipeline-switcher .responsive-toggler-container"),
                active: this.options.pipeline_id,
                no_compact: !0,
                notFoldOnTouchDevice: !0
            }),
            this.$el.find(".top-chart__pipeline-switcher").css({
                visibility: "visible"
            }),
            this.respToggler.resizeToggler()
        },
        chartsTogglerInit: function() {
            this.chartToggler = this._addComponent(r, {
                el: this.$el.find(".top-chart__chart-switcher .responsive-toggler-container"),
                withIcons: !0,
                neverFold: !0,
                active: this.options.type
            }),
            this.chartToggler.resizeToggler(),
            this.$el.find(".top-chart__chart-switcher").removeClass("top-chart__cart-switcher_hidden")
        },
        getChartView: function() {
            return c[this.options.type]
        },
        showLoader: function() {
            var e = this.$el.find("#chart-loader");
            e.length ? this.$el.find("#chart-loader").show() : (e = i('<div class="default-overlay" id="chart-loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            this.$el.append(e))
        },
        animate: function(e) {
            return e ? this.chart.animateBack() : this.chart.animate()
        },
        resetAnimation: function() {
            this.chart.resetAnimation()
        },
        show: function() {
            this.$el.show(),
            this.chartToggler && this.chartToggler.resizeToggler(),
            this.respToggler && this.respToggler.resizeToggler(),
            this.animate()
        },
        hide: function(e) {
            this.animate(!0).done(s.bind(function() {
                this.resetAnimation()
            }, this)),
            this.$el.hide()
        }
    })
}),
define("lib/common/font_resize", ["require", "jquery", "underscore"], function(e) {
    var t, i = e("jquery"), s = e("underscore");
    return t = function(e, t) {
        s.extend(this, {
            defaultConfig: {
                minFontSize: 14,
                maxFontSize: 72,
                group: null
            },
            options: {},
            selector: null,
            groupFontSize: [],
            groupItems: {}
        }),
        this.init(e, t)
    }
    ,
    s.extend(t.prototype, {
        init: function(e, t) {
            if (this.selector = i(e),
            this.options = s.extend({}, this.defaultConfig, t),
            this.id = "font-resize-" + Math.random(),
            !s.isEmpty(this.options.group)) {
                var n = this;
                this.selector.each(function() {
                    n.groupItems[n.options.group] = n.groupItems[n.options.group] || [],
                    n.groupItems[n.options.group].push(i(this))
                })
            }
            this.bindEvents(),
            this.resizeFont()
        },
        createTester: function() {
            return i('<span class="js-font-resize-tester"></span>').insertAfter("body")
        },
        destroy: function() {
            this.unbindEvents()
        },
        resizeFont: function() {
            var e = this.createTester()
              , t = this;
            this.selector.each(function() {
                var n, o, r = i(this), a = r.data("font-size") || t.options.maxFontSize, l = r.data("font-size-min") || t.options.minFontSize, c = t.options.container ? r.find(t.options.container) : r, d = c.text(), u = r.width();
                for (n = o = a,
                e.css("font", c.css("font")),
                e.css("font-size", n + "px"),
                e.text(d); e.width() > u && o > l; )
                    o--,
                    n = o,
                    e.css("font-size", o + "px");
                s.isEmpty(t.options.group) ? r.css("font-size", n + "px") : t.groupFontSize.push(n)
            }),
            e.remove(),
            s.isEmpty(t.options.group) || (s.each(t.groupItems[t.options.group], function(e) {
                i(e).css("font-size", s.min(t.groupFontSize) + "px")
            }),
            t.groupFontSize = [])
        },
        bindEvents: function() {
            i(window).on("resize." + this.id, s.bind(this.onWindowResize, this)),
            i(this.selector).on("change." + this.id, s.bind(this.resizeFont, this))
        },
        unbindEvents: function() {
            i(window).off("resize." + this.id),
            i(this.selector).off("change." + this.id)
        },
        onWindowResize: function(e) {
            if (e.target === window) {
                var t = this;
                this.resizeHideState || (this.resizeHideState = !0,
                i(this.selector).each(function() {
                    i(this).css("opacity", .1)
                })),
                clearTimeout(this.resizeTimer),
                this.resizeTimer = setTimeout(function() {
                    t.resizeFont(),
                    i(t.selector).each(function() {
                        i(this).css("opacity", 1)
                    }),
                    t.resizeHideState = !1
                }, 250)
            }
        }
    }),
    i.fn.fontResize = function(e) {
        return new t(this,e)
    }
    ,
    t
}),
define("lib/interface/dashboard/tiles/item", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/common/fn", "lib/common/font_resize"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/common/fn"), a = (e("lib/common/font_resize"),
    !1), l = 20, c = .7, d = function(e) {
        if (e = e || {},
        s.isUndefined(e.top) || s.isUndefined(e.left)) {
            var t = document.body || document.getElementsByTagName("body")[0]
              , i = document.documentElement.clientTop || t.clientTop || 0
              , n = document.documentElement.clientLeft || t.clientLeft || 0
              , o = window.pageYOffset || document.documentElement.scrollTop || t.scrollTop
              , r = window.pageXOffset || document.documentElement.scrollLeft || t.scrollLeft;
            return {
                top: e.top + o - i,
                left: e.left + r - n
            }
        }
        return e
    };
    return t = o.extend({
        id: null,
        defaults: {
            height: 175,
            draggable: !1,
            mouse_leaved: !1
        },
        editing: !1,
        events: s.extend({}, o.prototype.events, {
            "click .js-tile-edit": "onEditClick",
            "click .js-tile-delete-icon": "onDeleteClick",
            "click .js-settings-cancel-widget": "onCancelClick",
            "click .js-settings-save-widget": "onSaveClick"
        }),
        initialize: function(e, t) {
            if (!e || s.isEmpty(e))
                throw new Error("No data provided");
            o.prototype.initialize.apply(this, arguments),
            this.options = s.extend({}, this.defaults, t || {}),
            this.data = e,
            this.options.class_name && this.el.classList.add(this.options.class_name),
            this.el.style.position = "absolute",
            this.el.style[Modernizr.prefixed("boxSizing")] = "border-box",
            this.updateStyle(),
            this.id = this.options.id,
            this.options.init(this, this.options.id)
        },
        destroy: function() {
            this.makeDraggable(a),
            this.fontResize && this.fontResize.destroy(),
            o.prototype.destroy.apply(this, arguments)
        },
        makeDraggable: function(e) {
            e === !0 ? i(this.el).draggable({
                start: s.bind(this.dragStart, this),
                drag: s.bind(this.drag, this),
                stop: s.bind(this.dragStop, this),
                helper: this.draggableHelper,
                zIndex: 1e3,
                scroll: !1
            }) : this.options.draggable && i(this.el).draggable("destroy"),
            this.options.draggable = e
        },
        draggableHelper: function() {
            var e = i(this).clone();
            return e[0].style[Modernizr.prefixed("transition")] = "",
            e[0].style[Modernizr.prefixed("transform")] = "",
            e
        },
        setXY: function(e, t) {
            s.isNumber(e) && (this.data.position.x = e),
            s.isNumber(t) && (this.data.position.y = t),
            this.updateStyle()
        },
        getHeight: function() {
            return this.data.settings.height * this.options.height
        },
        updateStyle: function() {
            var e = this.data.position.y * this.options.height + "px"
              , t = this.data.position.x * this.options.getWidth() + "px";
            this.el.style.width = Math.floor(this.options.getWidth() * this.data.settings.width) + "px",
            this.el.style.height = this.getHeight() + "px",
            Modernizr.csstransforms3d ? this.el.style[Modernizr.prefixed("transform")] = "translate3d(" + t + "," + e + ", 0)" : (this.el.style.left = t,
            this.el.style.top = e)
        },
        calcXY: function(e, t) {
            var i, s, n = this.options.cols;
            return i = Math.round(t / this.options.getContainerWidth() * n),
            s = Math.round(e / this.options.height),
            i = Math.max(Math.min(i, n), 0),
            s = Math.max(s, 0),
            i = Math.min(i, n - this.data.settings.width),
            {
                x: i,
                y: s
            }
        },
        dragHandler: function(e, t) {
            var i, s, n, o = {
                top: 0,
                left: 0
            };
            switch (e) {
            case "onDragStart":
                s = d(this.el.offsetParent.getBoundingClientRect()),
                n = d(this.el.getBoundingClientRect()),
                o.top = n.top - s.top,
                o.left = n.left - s.left,
                this.coords = {
                    pageX: t.pageX,
                    pageY: t.pageY
                },
                this.dragging = o;
                break;
            case "onDrag":
                if (!this.dragging)
                    throw new Error("onDrag called before onDragStart");
                o.left = this.dragging.left + (t.pageX - this.coords.pageX),
                o.top = this.dragging.top + (t.pageY - this.coords.pageY);
                break;
            case "onDragStop":
                if (!this.dragging)
                    throw new Error("onDragStop called before onDragStart");
                o.left = this.dragging.left,
                o.top = this.dragging.top,
                this.dragging = null
            }
            i = this.calcXY(o.top, o.left),
            this.options[e](this, i.x, i.y)
        },
        dragStart: function(e, t) {
            this.cursor = {
                x: e.clientX,
                y: e.clientY
            },
            Modernizr.csstransforms3d ? this.el.style[Modernizr.prefixed("transition")] = r.prefixedHyphenate(Modernizr.prefixed("transform")) + " .3s" : this.el.style[Modernizr.prefixed("transition")] = "left .3s, top .3s",
            this.el.classList.add(this.options.class_name + "-dragged"),
            this.dragHandler("onDragStart", e),
            this.scroll_int = setInterval(s.bind(this.setScrollPosition, this), 10)
        },
        drag: function(e, t) {
            this.cursor = {
                x: e.clientX,
                y: e.clientY
            },
            this.dragHandler("onDrag", e)
        },
        setScrollPosition: function(e) {
            var t, i;
            this.options.mouse_leaved !== !0 && (t = this.cursor.y,
            i = this._$window.scrollTop(),
            l >= t && (0 > t && (t = 0),
            this._$window.scrollTop(i - (l - t) * c)),
            t >= this.options.getWindowHeight() - l && (t > this.options.getWindowHeight() && (t = this.options.getWindowHeight()),
            this._$window.scrollTop(i + (t - (this.options.getWindowHeight() - l)) * c)))
        },
        render: function(e) {
            var t = this;
            e = s.extend({}, e, {
                has_settings: !s.isEmpty(s.omit(t.data.settings, ["height", "width", "name"]))
            }),
            this.el.innerHTML = n({
                ref: this.getTemplate()
            }).render(e),
            this.fontResize && this.fontResize.destroy(),
            this.fontResize = this.$el.find(".js-resize-txt").fontResize({
                group: t.id
            })
        },
        getTemplate: function() {
            return "/tmpl/dashboard/widgets/" + this.id + ".twig"
        },
        dragStop: function(e) {
            this.cursor = null,
            clearInterval(this.scroll_int),
            this.scroll_int = null,
            this.el.style[Modernizr.prefixed("transition")] = "",
            this.el.classList.remove(this.options.class_name + "-dragged"),
            this.dragHandler("onDragStop", e)
        },
        onDeleteClick: function(e) {
            s.isFunction(this.options.onDelete) && this.options.onDelete(this.id, e)
        },
        onSaveClick: function() {
            this.edit(!1)
        },
        onCancelClick: function(e) {
            this.edit(!1)
        },
        onEditClick: function() {
            this.edit(!0, {
                single: !0
            })
        },
        edit: function(e, t) {
            t = t || {},
            e ? this.turnSettingsModeOn(t) : this.turnSettingsModeOff(),
            this.editing = !!e
        },
        turnSettingsModeOn: function(e) {
            this.editing && this.turnSettingsModeOff();
            var t = i(n({
                ref: "/tmpl/dashboard/widget_settings.twig"
            }).render(s.extend({}, e, {
                id: this.id
            })));
            this.$el.addClass("grid-item_edit"),
            this.$el.find(".tile__settings-icon").prepareTransition().addClass("tile__settings-icon_hidden"),
            this.$el.append(t),
            this.$el.find(".dashboard-tile__settings").prepareTransition().addClass("dashboard-tile__settings_visible"),
            this.$el.find(".dashboard-tile__editable-area").prepareTransition().addClass("dashboard-tile__editable-area_editing-mode"),
            this.$el.find(".tile__drag-icon").prepareTransition().addClass("tile__drag-icon_visible")
        },
        turnSettingsModeOff: function() {
            this.$el.removeClass("grid-item_edit"),
            this.$el.find(".dashboard-tile__settings").prepareTransition().removeClass("dashboard-tile__settings_visible"),
            this.$el.find(".dashboard-tile__editable-area").prepareTransition().removeClass("dashboard-tile__editable-area_editing-mode"),
            this.$el.find(".tile__drag-icon").prepareTransition().removeClass("tile__drag-icon_visible"),
            this.$el.find(".tile__settings-icon").prepareTransition().removeClass("tile__settings-icon_hidden"),
            setTimeout(s.bind(function() {
                this.$el.find(".dashboard-tile__settings").remove()
            }, this), 500)
        },
        animate: function(e) {
            e ? this.$el.addClass("grid-item_hidden") : this.$el.removeClass("grid-item_hidden")
        },
        show: function() {
            this.animate()
        },
        hide: function() {
            this.animate(!0)
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/custom_item", ["require", "lib/interface/dashboard/tiles/item", "underscore", "jquery", "lib/common/urlparams"], function(e) {
    "use strict";
    var t, i = e("lib/interface/dashboard/tiles/item"), s = (e("underscore"),
    e("jquery")), n = e("lib/common/urlparams");
    return t = i.extend({
        _selectors: function() {
            return {
                iframeContainer: ".dashboard-tile-custom__i",
                iframe: "iframe",
                loader: ".dashboard-tile-custom__loader"
            }
        },
        draggableHelper: function() {
            var e = i.prototype.draggableHelper.call(this);
            return e.find("iframe").remove(),
            e
        },
        render: function(e) {
            var t = this;
            this._dropElemCache(),
            i.prototype.render.apply(this, arguments),
            e.settings.iframe = this.addParameterToURL(e.settings.iframe, "t=" + Math.random()),
            e.settings.iframe = this.addParameterToURL(e.settings.iframe, "lang=" + AMOCRM.constant("account").language),
            e.settings.iframe = this.addParameterToURL(e.settings.iframe, "currency=" + AMOCRM.constant("account").currency),
            e.settings.iframe = this.addParameterToURL(e.settings.iframe, "period=" + n.getQueryParam("period") || "week");
            var o = document.createElement("iframe");
            o.onload = function() {
                t._elem("loader").hide(),
                s(o).show()
            }
            ,
            s(o).attr({
                src: e.settings.iframe,
                width: "100%",
                height: "100%"
            }).insertAfter(this._elem("loader")),
            this._dropElemCache("iframe")
        },
        addParameterToURL: function(e, t) {
            return e += (e.split("?")[1] ? "&" : "?") + t
        },
        getTemplate: function() {
            return "/tmpl/dashboard/widgets/custom.twig"
        }
    })
}),
define("lib/interface/dashboard/tiles/index", ["require", "underscore", "lib/core/view", "lib/interface/dashboard/tiles/item", "lib/interface/dashboard/tiles/widgets/custom_item", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/core/view"), n = e("lib/interface/dashboard/tiles/item"), o = e("lib/interface/dashboard/tiles/widgets/custom_item");
    e("lib/common/fn");
    return t = s.extend({
        createElement: function(e, t, i) {
            var s;
            return new (s = 0 == e.indexOf("custom") ? o : this.options.types[e] || n)(t,i)
        },
        initialize: function(e) {
            if ($.extend(this, {
                elemsIndex: {},
                elems: [],
                source_items: {},
                available_items: {},
                template_data: {},
                defaults: {
                    cols: 6,
                    row_height: 185,
                    editing: !1
                }
            }),
            this.options = i.extend({}, this.defaults, e || {}),
            this.available_items = $.extend(!0, {}, this.options.available),
            this.source_items = $.extend(!0, {}, this.options.items),
            !this.options.container)
                throw new Error("Container was not passed");
            s.prototype.initialize.apply(this, arguments),
            this.calcWidths(),
            this._$window.on("resize" + this.ns, i.bind(this.calcWidths, this)),
            this.initGridItems(),
            this.setEditing(this.options.editing)
        },
        destroy: function() {
            this._$window.off(this.ns),
            this.destroyGridItems(),
            s.prototype.destroy.apply(this, arguments)
        },
        initGridItems: function() {
            i.each(this.options.items, function(e, t) {
                this.addGridItem(t, e)
            }, this)
        },
        addGridItem: function(e, t, s) {
            s = s || !1;
            var n = this.createElement(e, t, i.extend({
                class_name: "grid-item",
                cols: this.options.cols,
                id: e,
                height: this.options.row_height,
                getContainerWidth: i.bind(function() {
                    return this.containerWidth
                }, this),
                getWidth: i.bind(function() {
                    return this.cellWidth
                }, this),
                getWindowHeight: i.bind(function() {
                    return this.windowHeight
                }, this),
                onDragStart: i.bind(this.onDragStart, this),
                onDrag: i.bind(this.onDrag, this),
                onDragStop: i.bind(this.onDragEnd, this),
                onDelete: i.bind(this.onDelete, this),
                init: i.bind(this.options.initIterator || i.noop, this)
            }));
            return this.elems.push(n),
            s && this.determineItemPosition(n),
            this.options.container.appendChild(n.el),
            this.available_items = i.omit(this.available_items, e),
            this.elemsIndex[e] = n,
            this.options.items[e] = t,
            n
        },
        determineItemPosition: function(e) {
            var t = this.getMaxYandH();
            e.data.position = {};
            for (var i = 0; i < t.y + 3; i++)
                for (var s = 0; s < this.options.cols; s++)
                    if (this.moveElement(e, s, i, !0))
                        return this.max = this.getMaxYandH(),
                        void this.calcHeight()
        },
        destroyGridItems: function() {
            i.each(this.elems, function(e) {
                e.destroy()
            })
        },
        removeGridItems: function() {
            i.each(this.elems, function(e) {
                e.$el.remove()
            }),
            this.elems = []
        },
        refreshGridItems: function() {
            this.destroyGridItems(),
            this.removeGridItems(),
            this.initGridItems(),
            this.renderGridItems(this.template_data)
        },
        renderGridItems: function(e) {
            e = e || {},
            this.template_data = e,
            i.mapObject(e.widgets, i.bind(function(e, t) {
                this.renderGridItem(t, e)
            }, this))
        },
        renderGridItem: function(e, t) {
            var s = this.elemsIndex[e];
            s && s.render(i.extend(t, {
                lang: this.template_data.response.lang,
                params: this.template_data.response.params,
                unsorted: this.template_data.unsorted
            }))
        },
        setEditing: function(e) {
            this.options.editing = e,
            this.max = this.getMaxYandH(),
            this.calcHeight(),
            e ? this.drawGrid() : this.removeGrid(),
            i.each(this.elems, function(t) {
                t.makeDraggable(e)
            }, this)
        },
        calcHeight: function() {
            var e = this.max.y * this.options.row_height + this.max.h * this.options.row_height;
            this.containerHeight != e && (this.containerHeight = e,
            this.options.container.style.height = this.containerHeight + "px",
            this.drawGrid())
        },
        removeGrid: function() {
            this.grid_el && (this.grid_el.parentNode.removeChild(this.grid_el),
            this.grid_el = null)
        },
        drawGrid: function() {
            var e;
            this.grid_el && this.removeGrid(),
            this.grid_el = document.createElement("DIV"),
            this.grid_el.style.cssText = "position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: -1;";
            for (var t = 0; t <= this.options.cols; t++)
                e = document.createElement("div"),
                e.className = "grid-line grid-line--vertical",
                e.style.left = t * this.cellWidth + "px",
                this.grid_el.appendChild(e);
            for (var i = 0; i <= this.max.y + this.max.h + 3; i++)
                e = document.createElement("div"),
                e.className = "grid-line grid-line--horizontal",
                e.style.top = i * this.options.row_height + "px",
                this.grid_el.appendChild(e);
            this.options.container.appendChild(this.grid_el)
        },
        calcWidths: function() {
            this.windowHeight = this._$window.height(),
            this.containerWidth = this.options.container.offsetWidth,
            this.cellWidth = Math.floor(this.containerWidth / this.options.cols),
            i.each(this.elems, function(e) {
                e.updateStyle()
            })
        },
        collides: function(e, t, s) {
            return e === t ? !1 : (i.isObject(s) && (t = {
                data: i.extend({}, t.data, s)
            }),
            e.data.position.x + e.data.settings.width <= t.data.position.x ? !1 : e.data.position.x >= t.data.position.x + t.data.settings.width ? !1 : e.data.position.y + e.data.settings.height <= t.data.position.y ? !1 : e.data.position.y >= t.data.position.y + t.data.settings.height ? !1 : !0)
        },
        getFirstCollision: function(e, t) {
            return i.find(this.elems, function(i) {
                return this.collides(i, e, t)
            }, this)
        },
        getAvailableItems: function() {
            return this.available_items
        },
        moveElement: function(e, t, i, s) {
            return s = s || !1,
            e.data.position.y === i && e.data.position.x === t ? !1 : this.checkTileAvailability(e, {
                position: {
                    x: t,
                    y: i
                }
            }, s) ? (e.setXY(t, i),
            !0) : !1
        },
        checkTileAvailability: function(e, t, i) {
            var s = this.getFirstCollision(e, t);
            return !i && t.position.y > this.max.y + this.max.h - e.data.settings.height ? !1 : t.position.x > this.options.cols - e.data.settings.width ? !1 : !s
        },
        getMaxYandH: function() {
            var e, t = i.isEmpty(this.elems) ? !1 : i.max(this.elems, function(e) {
                return e.data.position.y + e.data.settings.height
            });
            return e = t ? {
                y: t.data.position.y,
                h: t.data.settings.height
            } : {
                y: 0,
                h: 0
            },
            this.options.editing && i.extend(e, {
                y: e.y + e.h,
                h: 3
            }),
            e
        },
        resetPositions: function() {
            this.options.items = $.extend(!0, {}, this.source_items)
        },
        savePositions: function() {
            this.source_items = $.extend(!0, {}, this.options.items)
        },
        resetGridItems: function() {
            this.hasPositionChanges() && (this.resetPositions(),
            this.refreshGridItems())
        },
        getGridItemsSettings: function() {
            return i.mapObject(this.options.items || {}, function(e, t) {
                return {
                    settings: e.settings,
                    position: e.position
                }
            })
        },
        hasPositionChanges: function() {
            return !i.isEqual(this.options.items, this.source_items)
        },
        onDragStart: function() {
            this.max = this.getMaxYandH()
        },
        onDrag: function(e, t, i) {
            this.moveElement(e, t, i, this.max) && this.calcHeight()
        },
        onDragEnd: function() {
            this.max = this.getMaxYandH(),
            this.calcHeight(),
            i.isFunction(this.options.onDrop) && this.options.onDrop()
        },
        onDelete: function(e, t) {
            this.elems = i.reject(this.elems, function(t) {
                return t.id == e ? (t.destroy(),
                t.$el.remove(),
                !0) : !1
            }),
            -1 == e.indexOf("custom") && (this.available_items[e] = $.extend({}, this.options.items[e])),
            this.options.items = i.omit(this.options.items, e),
            this.max = this.getMaxYandH(),
            this.calcHeight(),
            i.isFunction(this.options.onItemRemoved) && this.options.onItemRemoved(e, this.elemsIndex[e]),
            this.elemsIndex = i.omit(this.elemsIndex, e)
        },
        turnSettingsModeOn: function() {
            i.each(this.elems, function(e) {
                e.edit(!0)
            })
        },
        turnSettingsModeOff: function() {
            i.each(this.elems, function(e) {
                e.edit(!1)
            })
        },
        show: function() {
            this.$el.show(),
            i.each(this.elems, function(e) {
                e.show()
            })
        },
        hide: function() {
            i.each(this.elems, function(e) {
                e.hide()
            }),
            this.$el.hide()
        }
    })
}),
define("lib/interface/dashboard/add_widget", ["require", "jquery", "underscore", "twig", "elements_view", "lib/components/base/modal", "lib/vendor/plugins/jquery.autosize"], function(e) {
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view"), r = e("lib/components/base/modal");
    return e("lib/vendor/plugins/jquery.autosize"),
    t = o.extend({
        _selectors: function() {
            return {
                nameEditArea: "#dashboard_add_widget_name_edit_area",
                url: "#dashboard_add_widget_url",
                width: "#dashboard_add_widget_width",
                height: "#dashboard_add_widget_height",
                error: ".dashbord_save_error_widget_custom",
                url_error: ".dashbord_save_error_url",
                width_error: ".dashbord_save_error_width",
                height_error: ".dashbord_save_error_height"
            }
        },
        events: {
            "focusin #dashboard_add_widget_name": "toggleEditModeOn",
            "focusout #dashboard_add_widget_name": "toggleEditModeOff",
            "click .js-modal-accept": "save",
            "focus .validate-has-error": "unvalidate"
        },
        initialize: function(e) {
            this.options = e || {},
            this.modal = this.initModal(),
            this.setElement(this.modal.$modal),
            AMOCRM.is_touch_device || setTimeout(s.bind(function() {
                this._findElem("url").focus()
            }, this), 1)
        },
        destroy: function() {
            this.undelegateEvents().stopListening(),
            this.$el.removeData().off()
        },
        unvalidate: function(e) {
            i(e.currentTarget).removeClass("validate-has-error"),
            this._elem(e.currentTarget.id.split("_").pop() + "_error").addClass("dashbord_hidden_error-save")
        },
        setFocus: function() {
            AMOCRM.is_touch_device || this._elem("url").focus()
        },
        validateWidgetOptions: function(e) {
            var t = 6;
            s.each(e, function(e, i) {
                "url" === i && /^((https:)?\/\/)?[\w\d\-]+\.[a-z\d]{2,}/.test(e) || "url" !== i && Number(e) && t >= e || (0 === this.$el.find(".dashbord_save_error_" + i).length ? this._elem("error").append('<div class="dashbord_save_error_' + i + '"> ' + AMOCRM.lang["dashbord_widgets_error_option_validate_" + i] + " </div>") : this._elem(i + "_error").removeClass("dashbord_hidden_error-save"),
                this._elem(i).addClass("validate-has-error"))
            }, this)
        },
        save: function() {
            var e = this._elem("url").val() || ""
              , t = this._elem("width").val() || 2
              , i = this._elem("height").val() || 1;
            this.validateWidgetOptions({
                width: t,
                height: i,
                url: e
            }),
            this.$el.find(".validate-has-error").length > 0 || s.isFunction(this.options.save) && (e = /^(https:)/.test(e) ? e.slice(6) : e,
            this.options.save({
                url: e,
                width: t,
                height: i
            }),
            this.modal.saved = !0,
            this.modal.destroy())
        },
        initModal: function() {
            var e = this;
            return new r({
                class_name: "modal-list add-widget-modal",
                init: n._preload(["/tmpl/common/modal/dashboard_widget.twig"], function(t) {
                    t.trigger("modal:loaded").html(n({
                        ref: "/tmpl/common/modal/dashboard_widget.twig"
                    }).render({
                        lang: AMOCRM.lang,
                        example_link: AMOCRM.lang.dashboard_add_widget_example.replace("#EXAMPLE_URL#", "/example/test_widget_" + AMOCRM.lang_id + ".html.zip")
                    })).trigger("modal:centrify"),
                    e.setElement(this.$modal),
                    e.setFocus()
                }),
                destroy: function() {
                    e.destroy(),
                    this.saved || e.options.cancel()
                }
            })
        },
        toggleEditModeOn: function() {
            this._elem("nameEditArea").addClass("modal-body__caption__edit")
        },
        toggleEditModeOff: function() {
            this._elem("nameEditArea").removeClass("modal-body__caption__edit")
        }
    })
}),
define("lib/interface/dashboard/settings", ["require", "jquery", "twig", "underscore", "lib/common/hs", "lib/components/base/form", "lib/interface/dashboard/add_widget"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/hs"), r = e("lib/components/base/form"), a = e("lib/interface/dashboard/add_widget");
    return t = r.View.extend({
        template: "/tmpl/dashboard/settings.twig",
        events: n.extend({}, r.View.prototype.events || {}, {
            "click .js-dashboard-settings-cancel": "onCancelClick",
            "click .theme__wrapper": "onThemeClick",
            "click .js-settings-statuses-save.button-input_blue": "onSaveClick",
            "input #company_name": "onAccountNameChange",
            "click #color-scheme-switcher": "onColorSchemeSwitch",
            "click .js-settings-add-widget": "onAddWidgetClick",
            "click .widgets-list__item": "onWidgetClick"
        }),
        options: {},
        settings: {},
        ns: ".dashboard-settings",
        currentTheme: null,
        currentColorScheme: null,
        initialize: function(e) {
            this.options = e || {},
            this.initSettings(this.options.data.selected_theme),
            this._oldSettings = n.clone(this.settings),
            this.currentTheme = this.options.data.selected_theme,
            this.currentColorScheme = this.options.data.selected_color_scheme,
            this.render(e.data || {}),
            this.initHS(),
            r.View.prototype.initialize.apply(this, arguments),
            this.initWidgetsList(this.options.getAvailableWidgets()),
            this.model.on("has_changes", n.bind(function() {
                this.refreshSaveButton()
            }, this)).on("has_reverted", n.bind(function() {
                this.refreshSaveButton()
            }, this)),
            this._$document.on("click" + this.ns, n.bind(function() {
                this.$el.find(".widgets__list-wrapper").removeClass("widgets__list-wrapper_visible")
            }, this))
        },
        onDropTile: function(e) {
            this.refreshSaveButton(e)
        },
        onTilesItemRemoved: function() {
            this.refreshSaveButton(this.options.hasTilesPositionChanges()),
            this.initWidgetsList(this.options.getAvailableWidgets())
        },
        destroy: function() {
            this.$el.find(".dashboard-settings").prepareTransition().addClass("dashboard-settings_hidden"),
            this.hs && this.hs.destroy(),
            this._$document.off(this.ns),
            r.View.prototype.destroy.apply(this, arguments)
        },
        refreshSaveButton: function(e) {
            var t = this.$el.find(".js-settings-statuses-save");
            this.hasChanges() || e ? t.addClass("button-input_blue").removeClass("button-input-disabled") : t.removeClass("button-input_blue").addClass("button-input-disabled")
        },
        initSettings: function(e) {
            this.settings.theme = this.options.data.themes[e],
            this.settings.theme.code = e,
            n.isEmpty(this.settings.theme) || (this.settings.color_scheme = this.options.data.selected_color_scheme)
        },
        initWidgetsList: function(e) {
            var t = s({
                ref: "/tmpl/dashboard/widgets_list.twig"
            }).render({
                widgets: e
            });
            this.$el.find(".widgets__list-wrapper").html(t)
        },
        applySettings: function() {
            this.applyBackgroundImage(),
            this.applyColorScheme()
        },
        rollbackSettings: function() {
            this.settings = this._oldSettings,
            this.applySettings(),
            n.isFunction(this.options.onRollbackSettings) && this.options.onRollbackSettings()
        },
        initHS: function() {
            this.hs = new o({
                wrapper: this.$el.find(".themes-gallery__wrapper"),
                scroller: this.$el.find(".themes-gallery__scroller")
            })
        },
        animate: function(e) {
            var t = this.$el.find(".theme__wrapper")
              , s = i.Deferred();
            return e && (t = t.reverse()),
            n.isFunction(this.options.onAnimate) && this.options.onAnimate(e),
            e ? t.addClass("theme__wrapper_hidden") : t.removeClass("theme__wrapper_hidden"),
            s.resolve(),
            s.promise()
        },
        render: function(e) {
            var t = s({
                ref: this.template
            }).render({
                account_name: this.options.data.account_name.replace(/"/g, "&quot;"),
                themes: this.options.data.themes,
                selected_theme: this.options.data.selected_theme,
                color_scheme: this.settings.color_scheme
            });
            this.$el.html(t),
            this.preparePreviews(),
            n.isFunction(this.options.onRender) && this.options.onRender(),
            this.$el.find(".dashboard-settings").prepareTransition().removeClass("dashboard-settings_hidden"),
            this.animate()
        },
        preparePreviews: function() {
            var e = this;
            n.each(this.options.data.themes, function(t, i) {
                var s = new Image
                  , n = e.$el.find(".theme__wrapper_" + i);
                s.onload = function() {
                    n.find(".theme").css({
                        "background-image": "url(" + s.src + ")"
                    }),
                    n.removeClass("theme__wrapper_loading").find(".theme-loader").trigger("overlay:hide")
                }
                ,
                s.src = t.image_preview_url
            })
        },
        loadFullImage: function(e) {
            var t = i.Deferred();
            return this.fullImage ? this.fullImage.src = "" : this.fullImage = new Image,
            this.fullImage.onload = function() {
                t.resolve(e)
            }
            ,
            this.fullImage.src = e,
            t.promise()
        },
        applyBackgroundImage: function(e) {
            e = e || {};
            var t = e.reset ? this.settings.theme.image_url : this.settings.theme.image_preview_url
              , s = this.options.$imagePreviewContainer
              , n = this.options.$imageContainer
              , o = i.Deferred()
              , r = new Image;
            return this.fullImageLoading = this.loadFullImage(this.settings.theme.image_url),
            r.onload = function() {
                n.css({
                    "background-image": "url(" + r.src + ")"
                }),
                e.reset ? (s.removeClass("dashboard-main-bg_animated").prepareTransition().addClass("dashboard-main-bg_hidden dashboard-main-bg_scaled").prepareTransition().addClass("dashboard-main-bg_animated").show(),
                n.removeClass("dashboard-main-bg_animated").prepareTransition().addClass("dashboard-main-bg_scaled").prepareTransition().addClass("dashboard-main-bg_animated")) : (s.css({
                    "background-image": "url(" + r.src + ")"
                }),
                s.removeClass("dashboard-main-bg_animated").prepareTransition().removeClass("dashboard-main-bg_hidden dashboard-main-bg_scaled").prepareTransition().addClass("dashboard-main-bg_animated").show(),
                n.removeClass("dashboard-main-bg_animated").prepareTransition().removeClass("dashboard-main-bg_scaled").prepareTransition().addClass("dashboard-main-bg_animated")),
                o.resolve()
            }
            ,
            r.src = t,
            o.promise()
        },
        applyColorScheme: function() {
            this.$el.closest(".dashboard-main-holder").addClass(this.getUIStyleClasses())
        },
        resetColorScheme: function() {
            this.$el.closest(".dashboard-main-holder").removeClass(this.getUIStyleClasses())
        },
        getUIStyleClasses: function() {
            return "dashboard-color-scheme__" + this.settings.color_scheme + " dashboard-theme__" + this.settings.theme.code
        },
        onAccountNameChange: function(e) {
            var t = i(e.currentTarget)
              , s = (this.$el.closest(".dashboard-main-holder").find(".dashboard__title .title"),
            t.val());
            this.settings.account_name = s
        },
        onThemeClick: function(e) {
            var t = this
              , s = i(e.currentTarget)
              , o = s.data("theme-code")
              , r = this.$el.find("input#theme")
              , a = this.settings.theme.code
              , l = this.options.data.themes[o].color_scheme
              , c = this.$el.find("#color-scheme-switcher");
            s.hasClass("js-add-custom-background") || o == a || (this.showLoader(),
            this.resetColorScheme(),
            this.initSettings(o),
            this.applyBackgroundImage().done(function() {
                n.isFunction(t.options.onThemeChange) && t.options.onThemeChange(),
                t.$el.find(".theme__wrapper_" + a).removeClass("theme__wrapper_selected"),
                s.addClass("theme__wrapper_selected"),
                r.val(o).trigger("change"),
                c.prop("checked", "black" == l),
                c.trigger("change"),
                t.applyColorScheme()
            }).always(function() {
                t.hideLoader.call(t)
            }))
        },
        onColorSchemeSwitch: function(e) {
            var t = i(e.currentTarget)
              , s = t.is(":checked")
              , n = s ? "black" : "white"
              , o = this.$el.find("input#color_scheme");
            o.val(n).trigger("change"),
            this.resetColorScheme(),
            this.settings.color_scheme = n,
            this.applyColorScheme()
        },
        onImageUpload: function(e) {},
        onAddWidgetClick: function(e) {
            e.stopPropagation(),
            this.$el.find(".widgets__list-wrapper").toggleClass("widgets__list-wrapper_visible")
        },
        onWidgetClick: function(e) {
            var t = i(e.currentTarget)
              , s = i(e.currentTarget).data("value");
            "custom" == s ? new a({
                save: n.bind(function(e) {
                    var t = {
                        position: {
                            x: 0,
                            y: 0
                        },
                        settings: {
                            iframe: e.url,
                            width: parseInt(e.width) || 2,
                            height: parseInt(e.height) || 1,
                            name: e.name || ""
                        }
                    }
                      , i = s + Math.random();
                    n.isFunction(this.options.onWidgetAdd) && this.options.onWidgetAdd(i, t),
                    this.refreshSaveButton(this.options.hasTilesPositionChanges())
                }, this),
                cancel: function() {
                    t.val("").trigger("controls:change:visual")
                }
            }) : (n.isFunction(this.options.onWidgetAdd) && this.options.onWidgetAdd(s),
            t.remove()),
            this.refreshSaveButton(this.options.hasTilesPositionChanges())
        },
        onSaveClick: function(e) {
            if (this.hasChanges() || n.isFunction(this.options.hasTilesPositionChanges) && this.options.hasTilesPositionChanges()) {
                var t = this
                  , s = this.getFormData();
                this.showLoader(),
                i.ajax({
                    url: "/private/ajax/dashboard/edit.php",
                    type: "POST",
                    data: s
                }).done(n.bind(function(e) {
                    n.isFunction(this.options.onSave) && (this.options.onSave(s, this.fullImageLoading),
                    this.animate(!0),
                    this.destroy(),
                    setTimeout(function() {
                        n.isFunction(t.options.onClose) && (t.options.onClose(),
                        t.$el.find(".dashboard-settings").hide())
                    }, 500))
                }, this)).fail(n.bind(function(e) {
                    n.isFunction(this.options.onSaveError) && this.options.onSaveError()
                }, this)).always(n.bind(function() {
                    this.hideLoader()
                }, this))
            }
        },
        onCancelClick: function(e) {
            var t = this;
            this.animate(!0),
            this.destroy(),
            this.resetColorScheme(),
            this.rollbackSettings(),
            this.applyColorScheme(),
            this.applyBackgroundImage({
                reset: !0
            }),
            setTimeout(function() {
                n.isFunction(t.options.onClose) && (t.options.onClose(),
                t.$el.find(".dashboard-settings").hide())
            }, 500)
        },
        getFormData: function() {
            var e, t = this.model.toJSON();
            return e = {
                account_name: t.account_name,
                theme: {
                    code: this.settings.theme.code,
                    color_scheme: this.settings.color_scheme || this.settings.theme.color_scheme
                },
                widgets: n.isFunction(this.options.getTilesSettings) ? this.options.getTilesSettings() : []
            }
        },
        showLoader: function() {
            var e = i("#page_change_loader");
            e.length || (e = i('<div class="default-overlay list__overlay" id="page_change_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            i("#page_holder").append(e)),
            e.trigger("overlay:show")
        },
        hideLoader: function() {
            i("#page_change_loader").trigger("overlay:hide")
        }
    })
}),
define("lib/interface/unsorted/mixins/integrations", ["require", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn");
    return {
        initIntegrations: function(e) {
            var s = !1;
            return e = t.extend({}, e),
            i.has_keys(e, ["pipeline", "response", "unsorted"]) ? s = e.pipeline.response.unsorted : e.settings ? s = e.settings : AMOCRM.constant("unsorted") && (s = AMOCRM.constant("unsorted")),
            s ? (this.settings = t.extend({}, this.settings, {
                integration: t.extend({}, s.integration),
                show: !!s.show,
                defaults: {}
            }),
            this.settings.integration.forms.enabled || $(document).one("amoforms:init" + this.ns, t.bind(function() {
                this.changeIntegrationState("forms")
            }, this)),
            void (this.settings.defaults = $.extend(!0, {}, this.settings))) : !1
        },
        changeIntegrationState: function(e) {
            this.settings.integration[e].enabled = !0,
            this.settings.defaults.integration[e].enabled = !0,
            this.applyIntegrationsMenu()
        },
        applyIntegrationsMenu: function() {
            var e = $(".unsorted__hook_up")
              , i = !1
              , s = $("#leads_custom_more");
            t.each(this.settings.integration, function(t, s) {
                i = i || !t.enabled,
                e.filter(".unsorted__hook_up_" + s).toggleClass("hidden", t.enabled),
                t.enabled && $("#box-unsorted-off__small__item_" + s).remove()
            }),
            $(e.not(".hidden").get(1)).addClass("middle"),
            s.find(".big-menu__more").toggleClass("without_integrations", !i).toggleClass("has_integrations", i),
            AMOCRM.constant("unsorted") && s.find("#mail-integration").toggleClass("unsorted-big-menu-item--is-enable", AMOCRM.constant("unsorted").integration.mail.enabled)
        },
        revertIntegrations: function() {
            this.settings.integration = $.extend(!0, {}, this.settings.defaults.integration)
        },
        actualizeIntegrations: function(e) {
            t.each(e, function(t, i) {
                return this.settings && !this.settings.integration[i] ? void delete e[i] : ("mail" === i && (this.settings.integration[i].enabled = AMOCRM.constant("amomail").enabled),
                void (this.settings.integration[i].enabled = this.settings.integration[i].enabled || t > 0))
            }, this),
            this.applyIntegrationsMenu()
        },
        checkCBH: function() {
            var e = $.Deferred();
            return "ru" === AMOCRM.lang_id ? $.ajax({
                url: "/ajax/widgets/edit",
                type: "POST",
                dataType: "json"
            }).done(t.bind(function(t) {
                i.has_keys(t, ["response", "widgets", "all", "amo_callbackhunter"]) && "installed" === t.response.widgets.all.amo_callbackhunter.status && (this.settings.integration.sip.enabled = !0,
                this.settings.integration.chats.enabled = !0),
                e.resolve()
            }, this)).fail(function() {
                e.resolve()
            }) : e.resolve(),
            e.promise()
        }
    }
}),
define("lib/interface/dashboard/tiles/widgets/leads_sources", ["require", "lib/interface/dashboard/tiles/item", "lib/interface/dashboard/unsorted", "underscore", "lib/common/browserdetect", "cocktail", "lib/interface/unsorted/mixins/integrations", "jquery"], function(e) {
    "use strict";
    var t, i = e("lib/interface/dashboard/tiles/item"), s = e("lib/interface/dashboard/unsorted"), n = e("underscore"), o = (e("lib/common/browserdetect"),
    e("cocktail")), r = {
        Integrations: e("lib/interface/unsorted/mixins/integrations")
    }, a = e("jquery");
    return t = i.extend({
        defaultResponse: {
            response: {
                category: {
                    mail: {
                        total: 6
                    },
                    sip: {
                        total: 5
                    },
                    forms: {
                        total: 4
                    },
                    api: {
                        total: 0
                    },
                    chats: {
                        total: 2
                    }
                }
            }
        },
        defaultSettingsIntegration: {
            mail: {
                enabled: !0
            },
            chats: {
                enabled: !0
            },
            forms: {
                enabled: !0
            },
            sip: {
                enabled: !0
            }
        },
        initialize: function(e, t) {
            i.prototype.initialize.call(this, e, t)
        },
        render: function(e) {
            this.initIntegrations({
                settings: e.unsorted
            }),
            this.settings.integration.mail.enabled = AMOCRM.constant("amomail").enabled,
            i.prototype.render.call(this, e),
            this.getUnsortedData(e).done(n.bind(function(t) {
                t = t || {},
                (t.no_rights || 0 == t.response.total) && (e.plug = !0),
                e.plug && (this.settings.integration = a.extend(!0, {}, this.defaultSettingsIntegration),
                t = this.defaultResponse),
                e = n.extend(e, {
                    sources: [{
                        value: t.response.category.mail.total,
                        element: ".js-source-deals",
                        stroke: "#e9c94d",
                        text: e.lang.dashboard_leads_sources_mail,
                        isEnable: this.settings.integration.mail.enabled
                    }, {
                        value: t.response.category.sip.total,
                        element: ".js-source-deals",
                        stroke: "#398ad3",
                        text: e.lang.dashboard_leads_sources_phone,
                        isEnable: this.settings.integration.sip.enabled
                    }, {
                        value: t.response.category.forms.total,
                        element: ".js-source-deals",
                        stroke: "#b695c3",
                        text: e.lang.dashboard_leads_sources_form,
                        isEnable: this.settings.integration.forms.enabled
                    }, {
                        value: 0,
                        element: ".js-source-deals",
                        stroke: "#de815a",
                        text: "API",
                        isEnable: !0
                    }, {
                        value: t.response.category.chats.total,
                        element: ".js-source-deals",
                        stroke: "#7dda8a",
                        text: e.lang.dashboard_leads_sources_chat,
                        isEnable: this.settings.integration.chats.enabled
                    }]
                }),
                i.prototype.render.apply(this, [e]),
                this.chartsAnimate(e)
            }, this))
        },
        getUnsortedData: function(e) {
            return s.getData({
                date_from: e.params.date_from,
                date_to: e.params.date_to
            })
        },
        chartsAnimate: function(e) {
            for (var t = e.sources.length, i = this.sortDataDescending(e.sources), s = 0; t > s; s += 1)
                this.addAnimateForChart({
                    currentElement: i[s].element,
                    currentValue: i[s].value,
                    index: s,
                    mostValue: i[0].value,
                    stroke: i[s].stroke,
                    text: i[s].text,
                    isEnable: i[s].isEnable
                })
        },
        addAnimateForChart: function(e) {
            var t = document.querySelectorAll(e.currentElement)[e.index]
              , i = this.getPathLength(t)
              , s = e.currentValue
              , n = e.currentElement
              , o = e.index
              , r = e.mostValue
              , a = e.stroke
              , l = e.text
              , c = e.isEnable
              , d = this.calculateDataValuesForCharts({
                index: o,
                pathLength: i,
                currentValue: s,
                mostValue: r
            });
            this.checkIE() ? this.jqueryAnimateCharts({
                pathLength: i,
                path: t,
                currentElement: n,
                calculateValuesResult: d,
                index: o,
                stroke: a,
                text: l,
                animateTime: 1e3
            }) : this.cssAnimateCharts({
                pathLength: i,
                path: t,
                index: o,
                calculateValuesResult: d,
                stroke: a,
                text: l,
                isEnable: c
            })
        },
        getPathLength: function(e) {
            return e.getTotalLength()
        },
        calculateDataValuesForCharts: function(e) {
            var t;
            return 0 === e.index && 0 != e.currentValue ? Math.ceil(e.pathLength - 100 * e.pathLength / 100) : (t = Math.round(e.currentValue / e.mostValue * 100),
            Math.ceil(e.pathLength - e.pathLength * t / 100))
        },
        sortDataDescending: function(e) {
            return e.sort(this.compareValuesData)
        },
        compareValuesData: function(e, t) {
            return t.value + t.isEnable > e.value + e.isEnable ? 1 : t.value + t.isEnable < e.value + e.isEnable ? -1 : void 0
        },
        checkIE: function() {
            var e = void 0 !== document.body.style.msTouchAction
              , t = Modernizr.smil;
            return e || !t
        },
        jqueryAnimateCharts: function(e) {
            var t = a(".js-source-deals").eq(e.index)
              , i = Math.ceil(e.pathLength)
              , s = document.querySelectorAll(".js-source-deals")[e.index];
            this.setTextForDealsSourceCategories({
                text: e.text,
                index: e.index,
                stroke: e.stroke
            }),
            s.style.stroke = e.stroke,
            s.style.display = "block",
            s.style.strokeDasharray = i + " " + i,
            s.style.strokeDashoffset = i - .5,
            t.animate({
                "stroke-dashoffset": e.calculateValuesResult - .5
            }, e.animateTime)
        },
        cssAnimateCharts: function(e) {
            var t = Math.ceil(e.pathLength)
              , i = e.path
              , s = e.calculateValuesResult
              , n = e.text
              , o = e.index
              , r = e.isEnable;
            r ? (this.setTextForDealsSourceCategories({
                text: n,
                index: o,
                stroke: e.stroke
            }),
            i.style.stroke = e.stroke) : (this.setTextForDealsSourceCategories({
                text: n,
                index: o,
                stroke: "gainsboro"
            }),
            i.style.stroke = "gainsboro"),
            i.style.display = "block",
            i.style[Modernizr.prefixed("transition")] = i.style[Modernizr.prefixed("transition")] = "none",
            i.style.strokeDasharray = t + " " + t,
            i.style.strokeDashoffset = t - .5,
            i.getBoundingClientRect(),
            i.style[Modernizr.prefixed("transition")] = i.style[Modernizr.prefixed("transition")] = "stroke-dashoffset 1s linear",
            i.style.strokeDashoffset = s - .5
        },
        setTextForDealsSourceCategories: function(e) {
            var t = document.querySelectorAll(".js-deals-source-txt")[e.index]
              , i = e.stroke;
            this.setColorForDealsCategories({
                element: t,
                stroke: i
            }),
            t.innerHTML = e.text
        },
        setColorForDealsCategories: function(e) {
            e.element.style.color = e.stroke
        }
    }),
    o.mixin(t, r.Integrations),
    t
}),
define("lib/interface/dashboard/tiles/widgets/leads_tags", ["require", "lib/interface/dashboard/tiles/item", "underscore", "jquery"], function(e) {
    "use strict";
    var t, i = e("lib/interface/dashboard/tiles/item"), s = e("underscore"), n = e("jquery");
    return t = i.extend({
        defaultTags: [{
            link: "#",
            value: 1
        }, {
            link: "#",
            value: 1
        }, {
            link: "#",
            value: 1
        }, {
            link: "#",
            value: 6
        }, {
            link: "#",
            value: 6
        }, {
            link: "#",
            value: 2
        }, {
            link: "#",
            value: 2
        }],
        render: function(e) {
            s.isEmpty(e.tags) && (e.plug = !0),
            e.plug && (e.tags = this.defaultTags),
            i.prototype.render.apply(this, [e]);
            var t = this
              , o = this.findMostValue(e.tags);
            setTimeout(function() {
                var i = n(".js-categories-lead");
                t.checkDataLength(e.tags) >= 1 && t.checkDataLength(e.tags) <= 3 && t.setContainerCssStyles({
                    elem: ".js-tags-list",
                    what: "justify-content",
                    param: "space-around"
                }),
                i.each(function(i) {
                    var s = n(this);
                    t.doAnimateCategoriesColumn({
                        elem: s,
                        index: i,
                        currentValue: e.tags[i].value,
                        mostValue: o
                    })
                })
            }, 10)
        },
        doAnimateCategoriesColumn: function(e) {
            var t = this.calculateDataValuesForColumn({
                currentValue: e.currentValue,
                mostValue: e.mostValue
            });
            e.elem.css("height", "0"),
            e.elem.css("transition", "height 2s ease-in-out"),
            e.elem.css("height", t + "%"),
            e.elem.css("transition")
        },
        setContainerCssStyles: function(e) {
            var t = n(e.elem);
            t.css(e.what, e.param)
        },
        checkDataLength: function(e) {
            return e.length
        },
        calculateDataValuesForColumn: function(e) {
            return e.currentValue / e.mostValue * 100
        },
        findMostValue: function(e) {
            return s.max(e, function(e) {
                return e.value
            }).value
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/sales_forecast", ["require", "jquery", "underscore", "lib/interface/dashboard/tiles/item"], function(e) {
    "use strict";
    var t, i = (e("jquery"),
    e("underscore")), s = e("lib/interface/dashboard/tiles/item");
    return t = s.extend({
        defaultData: [{
            period: 0,
            forecast: {
                count: 1240,
                price: 104500
            }
        }, {
            period: 20,
            forecast: {
                count: 1350,
                price: 154500
            }
        }, {
            period: 40,
            forecast: {
                count: 1600,
                price: 200500
            }
        }, {
            period: 60,
            forecast: {
                count: 1820,
                price: 254500
            }
        }],
        draggableHelper: function() {
            var e = s.prototype.draggableHelper.call(this);
            return e.find("linearGradient").attr("id", "gradient_shadow"),
            e.find("polygon_gradient").attr("fill", "url(#gradient_shadow)"),
            e
        },
        render: function(e) {
            (!i.isArray(e.forecast) || e.forecast.length < 2) && (e.plug = !0),
            e.plug && (e.forecast = this.defaultData),
            s.prototype.render.call(this, e)
        }
    })
}),
define("lib/interface/element_model", ["require", "underscore", "lib/components/base/form", "lib/core/users", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/form")
      , s = e("lib/core/users")
      , n = e("lib/common/fn")
      , o = {
        create: "add",
        update: "update",
        patch: "update",
        "delete": "delete",
        read: "list"
    };
    return i.Model.extend({
        _editable: !0,
        _fields: null,
        _type: null,
        _editable_attributes: ["id", "name", "custom_fields"],
        isNew: function() {
            var e = this.get(this.idAttribute);
            return e ? parseInt(e) <= 0 : !0
        },
        save: function(e) {
            return this._editable ? i.Model.prototype.save.call(this, null, e) : !1
        },
        sync: function(e, s, n) {
            var r = o[e]
              , a = this.extractAttributesForRequest(s.attributes);
            return n = n || {},
            "delete" !== e ? (n.attrs = {
                request: {}
            },
            (n.attrs.request[this._type] = {})[r] = [t.pick(a, this._editable_attributes)]) : (n.data = {
                request: {}
            },
            (n.data.request[this._type] = {})[r] = [a.id],
            n.data = JSON.stringify(n.data)),
            n.emulateHTTP = !0,
            n.request_for_create_model = "add" === r,
            n.contentType = "application/json",
            i.Model.prototype.sync.call(this, e, s, n)
        },
        extractAttributesForRequest: function(e) {
            return e.custom_fields = this.extractCustomFieldsForRequest(e),
            e.date && (e.date = n.getMoment(e.date).format("X")),
            e.budget && (e.price = parseInt(e.budget)),
            e.main_contact && e._element_id && (e.name = e.main_contact),
            e
        },
        parse: function(e, i) {
            var s;
            if (!n.has_keys(e, ["response", this._type]))
                return e;
            if (s = t.first(t.values(e.response[this._type])),
            s.errors = t.values(s.errors),
            s.errors.length && "return" === this.holdSaveErrors(s.errors, i))
                return t.clone(this.attributes);
            if (t.isEmpty(s[this._type]) || (s = s[this._type]),
            !s)
                throw new Error("Invalid response from server: " + JSON.stringify([e]));
            if (s = t.first(t.values(s)),
            !s)
                throw new Error("Invalid response from server: " + JSON.stringify([e]));
            return s
        },
        holdSaveErrors: function(e, i) {
            var s = t.first(e);
            if (i = i || {},
            i.request_for_create_model && 404 === s.code)
                return this.set("id", s.id),
                "return";
            throw new Error("Got errors from server: " + JSON.stringify(e))
        },
        setFromAPI: function(e) {
            var t = this.parseFromAPI(e);
            return this.set(t, {
                skip_check_editable: !0
            }),
            this.updateDefaults(),
            this
        },
        parseFromAPI: function(e) {
            var i = t.extend({}, e, this.parseCustomFieldsFromResponse(e.custom_fields));
            return i.name && i.name.text && (i.name = i.name.text),
            i
        },
        parseCustomFieldsFromResponse: function(e) {
            var i = {};
            return t.each(this.getFields(), function(s) {
                var n, o, r, a, l = s.name;
                if (n = l.match(/cfv\[(\d+)\](\[(\d+)\])?/),
                n && (o = s.stripped_id))
                    switch (r = t.findWhere(e, {
                        id: o
                    }) || {},
                    s.template) {
                    case "text":
                    case "numeric":
                    case "url":
                    case "address":
                    case "textarea":
                    case "checkbox":
                    case "radio":
                    case "select":
                        if (i[l] = "",
                        !r)
                            return;
                        if (a = t.first(r.values),
                        !a)
                            return;
                        a["enum"] ? i[l] = a["enum"] : Object.prototype.toString.call(a.value).length && (i[l] = t.unescape(a.value));
                        break;
                    case "date":
                        if (i[l] = "",
                        !r)
                            return;
                        if (a = t.first(r.values),
                        !a)
                            return;
                        a["enum"] ? i[l] = a["enum"] : Object.prototype.toString.call(a.value).length && (i[l] = a.value),
                        i[l] && (i[l] = this.getMomentFromAPI(i[l]),
                        i[l] = i[l].format(AMOCRM.system.format.date.date));
                        break;
                    case "multiselect":
                        t.each(s.enums, function(e) {
                            var s = l + "[%d]".replace("%d", e.id);
                            i[s] = "",
                            r && (a = t.findWhere(r.values, {
                                "enum": e.id
                            }),
                            a && Object.prototype.toString.call(a.value).length && (i[s] = a.value))
                        });
                        break;
                    case "pei":
                        var c, d = s.sub_code && this.getEnumID(s.enums, s.sub_code), u = function(e) {
                            e = e || "0",
                            i[l + "[%d][enum]".replace("%d", e)] = s.sub_code ? d : t.first(t.values(s.enums)).id,
                            i[l + "[%d][value]".replace("%d", e)] = ""
                        };
                        r && r.values && r.values.length ? (t.each(r.values, function(e, s) {
                            i[l + "[%d][enum]".replace("%d", s)] = e["enum"],
                            i[l + "[%d][value]".replace("%d", s)] = t.unescape(e.value)
                        }),
                        c = t.any(r.values, function(e) {
                            return e["enum"] === d
                        }),
                        d && !c && u.call(this, r.values.length)) : u.call(this);
                        break;
                    case "smart_address":
                        s.enums && t.each(s.enums, function(e, s) {
                            var n = t.findWhere(r.values, {
                                "enum": e
                            }) || {};
                            i[l + "[%d]".replace("%d", e)] = t.unescape(n.value || "")
                        })
                    }
            }, this),
            i
        },
        extractCustomFieldsForRequest: function(e) {
            var i = {};
            return t.each(e, function(e, t) {
                var s, n, o, r, a;
                if (s = t.match(/cfv\[(\d+)\](\[(\d+)\])?(\[(\w+)\])?/i),
                s && (n = s[1],
                o = s[3],
                a = s[5],
                n)) {
                    if (r = {
                        id: n,
                        values: []
                    },
                    !o && !a)
                        return r.values.push({
                            value: e
                        }),
                        void (i[n] = r);
                    if (i[n] || (i[n] = r),
                    !a || !o)
                        return a && !o ? void i[n].values.push({
                            subtype: a,
                            value: e
                        }) : void (e.length && i[n].values.push(o));
                    if (i[n].values[o])
                        i[n].values[o][a] = e;
                    else {
                        var l = {};
                        l[a] = e,
                        i[n].values.push(l)
                    }
                }
            }, this),
            t.each(i, function(e) {
                var i = t.findWhere(this._fields, {
                    stripped_id: e.id
                }) || {};
                switch (i.template) {
                case "pei":
                    e.values = t.filter(e.values, function(e) {
                        return e.value.length
                    })
                }
            }, this),
            t.values(i)
        },
        setFields: function(e) {
            this._fields = t.map(e, this.convertField, this),
            this._fields = t.reject(this._fields, function(e) {
                return -1 !== ["date_create", "date_modify"].indexOf(e.id)
            })
        },
        getFields: function() {
            if (!this._fields)
                throw new Error("Fields not defined yet!");
            return this._fields
        },
        convertField: function(e) {
            var i = {
                id: e.id,
                sub_code: e.sub_code,
                stripped_id: e.stripped_id,
                title: e.title,
                name: "",
                default_code: e.default_code ? e.default_code : !1
            };
            switch (e.custom_field ? i.name = "cfv[" + e.id.replace("_" + e.sub_code, "") + "]" : i.name = e.id,
            e.type_code) {
            case "streetaddress":
                i.template = "address";
                break;
            case "textarea":
                i.template = "textarea";
                break;
            case "url":
                i.template = "url";
                break;
            case "checkbox":
                i.template = "checkbox";
                break;
            case "date":
            case "birthday":
                i.template = "date";
                break;
            case "multiselect":
                i.enums = e.enums,
                i.template = "multiselect";
                break;
            case "numeric":
                i.template = "numeric";
                break;
            case "radiobutton":
                i.enums = e.enums,
                i.template = "radio";
                break;
            case "select":
                i.enums = e.enums,
                i.template = "select";
                break;
            case "text":
                i.template = "text";
                break;
            case "smart_address":
                i.template = e.type_code,
                i.enums = e.enums,
                i.variants = e.variants;
                break;
            case "multitext":
                i.template = "pei",
                i.enums = e.enums,
                i.enums_names = e.enums_names,
                i.multiple = !0,
                t.each(i.enums, function(t) {
                    t.option = (e.enums_names[t.value.toLowerCase()] || {}).medium
                });
                break;
            default:
                i.template = e.type_code
            }
            switch (e.id) {
            case "name":
                i.template = "name";
                break;
            case "main_user_id":
                i.template = "manager";
                break;
            case "status":
                i.template = "status";
                break;
            case "budget":
                i.template = "budget";
                break;
            case "next_price":
                i.template = "price";
                break;
            case "main_contact":
            case "company_name":
            case "contact_company_name":
                i.template = "linked"
            }
            if (!i.template)
                throw new Error("Can't resolve template name for field " + JSON.stringify(e));
            return i
        },
        findCustomFieldValue: function(e, i, s) {
            var n = t.findWhere((i || {}).custom_fields, {
                id: e
            })
              , o = n && n.values ? n.values : "";
            switch (s) {
            case "text":
            case "numeric":
            case "url":
            case "address":
            case "textarea":
            case "date":
                o = t.first(o),
                o = o && o.value ? o.value : "";
                break;
            case "checkbox":
                o = !!o;
                break;
            case "select":
            case "radio":
                o = t.first(o),
                o = o && o["enum"] ? o["enum"] : "";
                break;
            case "multiselect":
                o = t.map(o, function(e) {
                    return e["enum"].toString()
                })
            }
            return o
        },
        getValues: function() {
            var e, i, o = {}, r = this.isNew();
            return e = r ? {} : t.clone(this.attributes),
            t.each(this.getFields(), function(r) {
                var a = [];
                switch (i = "undefined" == typeof e[r.id] ? this.findCustomFieldValue(r.stripped_id, e, r.template) : t.escape(e[r.id]) || "",
                r.template) {
                case "text":
                case "name":
                case "numeric":
                case "url":
                case "address":
                case "textarea":
                case "linked":
                    t.isObject(i) && (i = i.text || ""),
                    o[r.id] = {
                        value: i,
                        default_code: r.default_code ? r.default_code : !1
                    };
                    break;
                case "date":
                    t.isObject(i) && (i = i.text || ""),
                    i && (i = this.getMomentFromAPI(i),
                    i = i.format(AMOCRM.system.format.date.date)),
                    o[r.id] = {
                        value: i
                    };
                    break;
                case "checkbox":
                    o[r.id] = {
                        value: "1",
                        checked: !!i
                    };
                    break;
                case "radio":
                    o[r.id] = {
                        selected: i,
                        enums: t.map(r.enums, function(e) {
                            return {
                                id: e.id,
                                value: e.value,
                                prefix: "cfv_" + r.id + "_" + e.id
                            }
                        }, this)
                    };
                    break;
                case "select":
                    o[r.id] = {
                        selected: i,
                        placeholder: n.i18n("Select"),
                        enums: r.enums
                    };
                    break;
                case "multiselect":
                    o[r.id] = {
                        selected: i,
                        placeholder: n.i18n("Select"),
                        enums: t.map(r.enums, function(e) {
                            return {
                                id: e.id,
                                value: e.value,
                                prefix: "cfv_" + r.id + "_" + e.id,
                                name: r.name + "[" + e.id + "]"
                            }
                        }, this)
                    };
                    break;
                case "pei":
                    var l, c = r.sub_code && this.getEnumID(r.enums, r.sub_code), d = function(e) {
                        return e = e || "0",
                        {
                            placeholder: "...",
                            enum_name: r.name + "[%d][enum]".replace("%d", e),
                            name: r.name + "[%d][value]".replace("%d", e),
                            "enum": r.sub_code ? c : null,
                            disabled_select: !!r.sub_code
                        }
                    };
                    t.isArray(i) && i.length ? (a = t.map(i, function(e, t) {
                        return {
                            "enum": e["enum"],
                            value: e.value,
                            placeholder: "...",
                            enum_name: r.name + "[%d][enum]".replace("%d", t),
                            name: r.name + "[%d][value]".replace("%d", t),
                            hidden: r.sub_code ? this.getEnumName(r.enums, e["enum"]) !== r.sub_code : !1,
                            disabled_select: !!r.sub_code
                        }
                    }, this),
                    l = t.any(a, function(e) {
                        return e["enum"] === c
                    }),
                    c && !l && a.push(d.call(this, a.length))) : (a = []).push(d.call(this)),
                    o[r.id] = {
                        values: a
                    };
                    break;
                case "smart_address":
                    if (r.enums = r.enums || [],
                    r.sub_code)
                        switch (o[r.id] = {
                            name: r.name + "[%d]".replace("%d", r.sub_code),
                            placeholder: AMOCRM.lang[r.sub_code + "_placeholder"],
                            value: (t.findWhere(i, {
                                "enum": r.sub_code
                            }) || {}).value || ""
                        },
                        r.sub_code) {
                        case "country":
                            r.template = "select",
                            o[r.id] = t.extend(o[r.id], {
                                selected: o[r.id].value,
                                placeholder: o[r.id].placeholder,
                                enums: t.map(r.variants.country, function(e, t) {
                                    return {
                                        id: t.toUpperCase(),
                                        value: e
                                    }
                                })
                            });
                            break;
                        case "zip":
                            r.template = "zip";
                            break;
                        default:
                            r.template = "text"
                        }
                    else
                        a = t.map(r.enums, function(e) {
                            var s = t.findWhere(i, {
                                "enum": e
                            }) || {};
                            return {
                                "enum": e,
                                value: s.value || "",
                                placeholder: "...",
                                name: r.name + "[%d]".replace("%d", e)
                            }
                        }, this),
                        o[r.id] = {
                            values: a
                        };
                    break;
                case "budget":
                case "price":
                    o[r.id] = {
                        value: i,
                        placeholder: "0"
                    };
                    break;
                case "manager":
                    o[r.id] = {
                        value: [t.findWhere(s.get(), {
                            id: i
                        }) || {
                            id: "not_assigned",
                            title: n.i18n("User deleted")
                        }]
                    }
                }
                o[r.id] && (o[r.id].placeholder = o[r.id].placeholder || "...",
                o[r.id].name = o[r.id].name || r.name,
                this._editable || (o[r.id].disabled = !0))
            }, this),
            o
        },
        getDefaults: function() {
            var e = t.clone(this.defaults);
            return t.each(this.getFields(), function(t) {
                switch (t.template) {
                case "text":
                case "numeric":
                case "url":
                case "address":
                case "textarea":
                    break;
                case "date":
                    e[t.name] && parseInt(e[t.name]) == e[t.name] && (e[t.name] = n.getMoment(e[t.name]).format(AMOCRM.system.format.date.date));
                    break;
                case "checkbox":
                    break;
                case "radio":
                    break;
                case "select":
                    break;
                case "multiselect":
                }
            }, this),
            e
        },
        getEnumID: function(e, i) {
            return e ? (t.findWhere(e, {
                value: i.toUpperCase()
            }) || {}).id : i
        },
        getEnumName: function(e, i) {
            return e ? (t.findWhere(e, {
                id: i
            }) || {}).value.toLowerCase() : i
        },
        set: function(e, t, s) {
            var n = ("object" == typeof e ? t : s) || {};
            return n.skip_check_editable === !0 || this._editable ? i.Model.prototype.set.apply(this, arguments) : this
        },
        editable: function(e) {
            return "undefined" != typeof e && (this._editable = !!e),
            this._editable
        },
        getMomentFromAPI: function(e) {
            var t;
            return t = "string" == typeof e && parseInt(e) != e ? moment(e, "YYYY-MM-DD HH:mm:ss") : moment.unix(e)
        },
        hasRightsFor: function(e) {
            return !0
        }
    })
}),
define("lib/components/lists/base/tip", ["require", "jquery", "underscore", "twig", "lib/core/view"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/core/view");
    return n.extend({
        _class_name: null,
        initialize: function(e) {
            if (e = e || {},
            this.options = e,
            !e.$elem)
                throw new Error("No DOM element provided in options: " + JSON.stringify(e));
            return n.prototype.initialize.call(this),
            this._$document.trigger("controls:hide"),
            this.tip_params = {
                class_name: [this._class_name, e.class_name || ""].join(" "),
                items: e.items || []
            },
            this.setTipParams(),
            this
        },
        setTipParams: i.noop,
        render: function() {
            return t(".list__body-right").append(this.setElement(t(s({
                ref: "/tmpl/common/tip.twig"
            }).render(this.tip_params))).$el),
            this.$el.addClass(this.options.class_name || "").show(),
            this.setPosition(),
            i.isFunction(this.options.onRender) && this.options.onRender(),
            this._$window.on("resize" + this.ns, i.bind(i.debounce(this.setPosition, 50), this)),
            this._$document.one(i(["click", "escape:keydown", "controls:hide"]).map(function(e) {
                return e + this.ns
            }, this).join(" "), i.bind(this.destroy, this)).on("list:column:resized" + this.ns, i.bind(this.setPosition, this)),
            this
        },
        setPosition: function() {
            var e = this.options.$elem.get(0).getBoundingClientRect()
              , i = this._$window.scrollTop();
            this.$el.css({
                left: e.left - t("#left_menu").outerWidth(),
                top: e.top + i
            })
        },
        destroy: function() {
            this._destroyed = !0,
            i.isFunction(this.options.onDestroy) && this.options.onDestroy(),
            this._$window.off(this.ns),
            n.prototype.destroy.call(this, !0)
        },
        removeTip: function() {
            return this._destroyed ? void 0 : (this.destroy(),
            this._destroyed)
        }
    })
}),
define("lib/components/lists/actions/tip", ["require", "jquery", "underscore", "lib/components/lists/base/tip"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/lists/base/tip");
    return s.extend({
        _class_name: "multiactions-tip",
        events: function() {
            var e = i.extend({}, i.result(s.prototype, "events"), {
                "click .js-tips-item-multiaction": "onMultiactionsTipClick",
                "click .js-tips-item-widgets": "onMultiactionsWidgetTipClick"
            });
            return e
        },
        setPosition: function() {
            var e = this.options.$elem
              , i = e.get(0).getBoundingClientRect()
              , s = this._$window.scrollTop();
            this.$el.css({
                left: i.left - t("#left_menu").outerWidth() + parseFloat(e.css("paddingLeft")),
                top: i.top + i.height + s - 5
            })
        },
        onMultiactionsTipClick: function(e) {
            e.stopPropagation(),
            e.preventDefault(),
            this.destroy(),
            i.isFunction(this.options.onActionsClick) && this.options.onActionsClick.apply(this, arguments)
        },
        onMultiactionsWidgetTipClick: function(e) {
            var s, n = t(e.currentTarget), o = t("#widgets_block"), r = n.attr("data-id"), a = AMOCRM.widgets.list[r] || {};
            e.stopPropagation(),
            e.preventDefault(),
            a.params.selected_without_block || (o.find(".card-widgets__top").hide(),
            o.find(".card-widgets__widget__caption__arrow").hide(),
            o.find(".js-card-widgets-on").css("top", "0px"),
            o.find(".card-widgets__widget").hide(),
            s = o.find(".card-widgets__widget-" + r),
            s.show(),
            t("#nano-card-widgets").addClass("in_list"),
            t("#widgets_block").find(".card-widgets__widget").addClass("single-widget"),
            s.find(".card-widgets__widget__caption .card-widgets__widget__caption__logo").show(),
            s.find(".card-widgets__widget__caption .card-widgets__widget__caption__logo_min").hide(),
            this._$document.trigger("widgets_body:change_state", [{
                state: !0,
                $el: s
            }]),
            o.show().addClass("js-widgets-active"),
            i.isFunction(a.widgetsOverlay) && a.widgetsOverlay(!0)),
            i.isObject(a.callbacks) && i.isFunction(a.callbacks[AMOCRM.getWidgetsArea()].selected) && (a.callbacks[AMOCRM.getWidgetsArea()].selected(),
            this._$document.trigger("rows:uncheck-all")),
            this.destroy()
        }
    })
}),
define("lib/components/lists/actions/reassign", ["require", "jquery", "twig", "underscore", "lib/components/base/modal", "lib/interface/users_select", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/components/base/modal"), r = e("lib/interface/users_select"), a = e("lib/core/users");
    return t = function(e) {
        var r = this
          , l = AMOCRM.constant("user") || {};
        this.ns = ".reassign:multiply",
        this.options = i.extend({}, e),
        this.vars = {},
        this.managers = a.get(),
        this.user_id = this.options.user_id || l.id || "",
        this.user_name = this.options.user_name || l.name || "",
        i(document).on("modal:centrify" + this.ns, function(e) {
            r.reassign_select && r.reassign_select.setPositions()
        }),
        this.managers || (this.managers_xhr = i.ajax({
            url: "/ajax/get_managers/"
        }).done(function(e) {
            AMOCRM.constant("managers", e),
            r.managers = e,
            r.vars.$modal_body && r.vars.template && r.init()
        })),
        this.modal = new o({
            class_name: "modal-list " + this.options.class_name,
            init: s._preload([r.options.template || "/tmpl/common/modal/reassign.twig"], function(e) {
                r.vars.$modal_body = e,
                r.vars.template = s({
                    ref: r.options.template || "/tmpl/common/modal/reassign.twig"
                }),
                (!r.managers_xhr || 200 == r.managers_xhr.status && 4 == r.managers_xhr.readyState) && r.init(),
                n.isFunction(r.options.init) && r.options.init.call(r),
                e.on("click", ".js-modal-accept", function() {
                    "function" == typeof r.options.confirm ? r.options.confirm.call(r) : r.options.from_list ? (r.modal.hide(),
                    t.linkedReassign({
                        linkeds_text: [AMOCRM.lang.change_main_user_all],
                        main_user: r.vars.$modal_body.find("input:hidden").val(),
                        confirm: function() {
                            this.linked_change_accepted = !0,
                            this.modal.destroy()
                        },
                        destroy: function() {
                            r.modal.show(),
                            r.doAjax({
                                with_linked: this.linked_change_accepted === !0
                            })
                        }
                    })) : this.save_xhr = r.doAjax()
                })
            }),
            destroy: function() {
                i(document).off("modal:centrify" + this.ns),
                r.reassign_select && r.reassign_select.destroy(),
                n.isFunction(r.options.destroy) && r.options.destroy.call(r),
                r.vars.$modal_body && r.vars.$modal_body.off(),
                this.save_xhr && "undefined" != typeof this.save_xhr.status && this.save_xhr.abort()
            }
        })
    }
    ,
    t.linkedReassign = function(e) {
        return new t({
            template: "/tmpl/common/modal/reassign_linked.twig",
            template_params: {
                button_text: AMOCRM.lang.button_yes,
                cancel_text: AMOCRM.lang.button_no,
                title_before: AMOCRM.lang.change_main_user_title + " " + e.linkeds_text.join(", ") + " ",
                title_after: AMOCRM.lang.change_main_user_right_postfix
            },
            user_id: e.main_user,
            confirm: function() {
                n.isFunction(e.confirm) && e.confirm.call(this)
            },
            destroy: function() {
                n.isFunction(e.destroy) && e.destroy.call(this)
            }
        })
    }
    ,
    t.prototype.init = function() {
        var e = this
          , t = this.managers
          , i = n.without(e.options.exclude, e.user_id.toString());
        i && i.length && (t = n.filter(t, function(e, t) {
            return -1 === n.indexOf(i, t)
        })),
        this.vars.$modal_body.trigger("modal:loaded").html(this.vars.template.render(n.extend({
            title: this.options.title,
            managers: {
                class_name: "control--select-white modal-body__inner__managers-select",
                selected: this.user_id,
                bg_color: "#fff",
                items: t
            }
        }, this.options.template_params))).trigger("modal:centrify"),
        this.vars.$modal_body.on("click", "#reassign-users_select_holder", n.bind(e.initReassignUsersSelect, e))
    }
    ,
    t.prototype.initReassignUsersSelect = function(e, t) {
        var s = i(e.currentTarget);
        e.stopPropagation(),
        this.reassign_select = new r(n.extend({
            el: s,
            id: "reassign-users_select_holder",
            class_name: "modal-reassign__users-select",
            suggest_class_name: "modal-reassign__users-select-suggest",
            input_name: "reassign_user_id",
            select_one: !0,
            not_remove: !0,
            in_modal: !0,
            existing_items: i.map(s.find(".js-multisuggest-item"), function() {
                return {
                    id: i(this).attr("data-id"),
                    title: n.escape(i.trim(i(this).text()))
                }
            }),
            onInit: function() {
                this.$list.css({
                    zIndex: 1001
                })
            }
        }, t))
    }
    ,
    t.prototype.doAjax = function(e) {
        var t = this;
        return e = e || {},
        e.entity = e.entity || this.options.entity,
        e.id = e.id || this.options.id,
        t.vars.$modal_body.hide(),
        i.ajax({
            url: "/ajax/" + e.entity + "/multiple/reassign/",
            type: "POST",
            data: {
                NEW_MAIN_USER_ID: t.vars.$modal_body.find('[name="reassign_user_id"]').val() || e.new_main_user_id,
                parties: {
                    id: e.id,
                    with_linked: e.with_linked ? 1 : 0
                }
            },
            dataType: "json"
        }).always(function() {
            t.vars.$modal_body.show()
        }).done(function(s) {
            "fail" == s.status ? t.modal.showError() : (n.isFunction(e.callback) ? e.callback() : i(document).trigger("list:reload"),
            t.modal.showSuccess(s.message))
        }).fail(function() {
            t.modal.showError()
        })
    }
    ,
    t
}),
define("lib/components/lists/actions/customers/reassign_linked", ["require", "underscore", "lib/components/modals/action", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/action")
      , s = e("lib/common/fn");
    return i.extend({
        _elements_ids: [],
        _main_user: {},
        _url: "/ajax/contacts/multiple/reassign/",
        setParams: function(e) {
            var s = i.prototype.setParams.apply(this, arguments);
            if (!(e && e.id && t.isArray(e.id) && e.id.length))
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            if (!(e && e.main_user && e.main_user.id))
                throw new Error("Params.main_user_id is empty: " + JSON.stringify({
                    params: e
                }));
            if (this._elements_ids = t.map(e.id, function(e) {
                var t = parseInt(e);
                if (!t || 0 > t)
                    throw new Error("Id must be positive number, given: " + e);
                return t
            }),
            this._main_user = {
                id: parseInt(e.main_user.id),
                title: String(e.main_user.title).trim()
            },
            !this._main_user.id || !t.isFinite(this._main_user.id))
                throw new Error("Main user id must be positive number, given: " + e.main_user.id);
            if (!this._main_user.title.length)
                throw new Error("Main user title must be not empty: " + e.main_user.title);
            return s
        },
        getDataForRequest: function() {
            return {
                NEW_MAIN_USER_ID: this._main_user.id,
                parties: {
                    id: this._elements_ids,
                    with_linked: 0
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.status && "success" === e.status
        },
        _template: "/tmpl/common/modal/reassign_linked.twig",
        getTemplateParams: function() {
            var e;
            return e = "Would you like to make %s responsible in related elements according to your rights?",
            e = s.i18n(e),
            e = e.replace("%s", s.capitalize(this._main_user.title)),
            {
                title_after: e,
                title_before: "",
                button_text: s.i18n("Yes"),
                cancel_text: s.i18n("No")
            }
        }
    })
}),
define("lib/components/lists/actions/customers/reassign", ["require", "jquery", "underscore", "lib/components/modals/action", "lib/interface/users_select", "lib/common/fn", "lib/components/lists/actions/customers/reassign_linked", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/modals/action")
      , n = e("lib/interface/users_select")
      , o = e("lib/common/fn")
      , r = e("lib/components/lists/actions/customers/reassign_linked")
      , a = e("lib/core/users");
    return s.extend({
        _elements_ids: [],
        _elements_collection: null,
        _url: "/ajax/v1/customers/set/",
        _users_select: null,
        _complete: !1,
        setParams: function(e) {
            var t = s.prototype.setParams.apply(this, arguments);
            if (!(e && e.id && i.isArray(e.id) && e.id.length))
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            return this._elements_ids = i.map(e.id, function(e) {
                var t = parseInt(e);
                if (!t || 0 > t)
                    throw new Error("Id must be positive number, given: " + e);
                return t
            }),
            e.collection && i.isFunction(e.collection.toJSON) ? this._elements_collection = e.collection.toJSON() : e.collection && i.isArray(e.collection) && (this._elements_collection = e.collection),
            t
        },
        wrapCallback: function(e, t) {
            var n;
            return t = s.prototype.wrapCallback.apply(this, arguments),
            n = "complete" === e ? i.bind(function() {
                this._complete = !0,
                t()
            }, this) : "afterDestroy" === e ? i.bind(function() {
                this._complete ? this.initReassignLinked(t) : t()
            }, this) : "destroy" === e ? i.bind(function() {
                this._users_select && i.isFunction(this._users_select.destroy) && (this._users_select.destroy(),
                this._users_select = null),
                t()
            }, this) : t
        },
        initReassignLinked: function(e) {
            var t, s = [];
            i.each(this._elements_collection, function(e) {
                t = e.linked,
                t.company && t.company.id && s.push(t.company.id),
                s = s.concat(i.collect(t.contacts, "id"))
            }),
            s.length > 0 ? this._initReassignLinked(e, s) : e()
        },
        _initReassignLinked: function(e, t) {
            new r({
                main_user: a.get(this.getNewMainUser()),
                id: t,
                destroy: e
            })
        },
        getNewMainUser: function() {
            return parseInt(this.$("input:hidden").val())
        },
        getDataForRequest: function() {
            var e = parseInt(this.$("input:hidden").val());
            return {
                request: {
                    customers: {
                        update: i.map(this._elements_ids, function(t) {
                            return {
                                id: t,
                                main_user_id: e
                            }
                        })
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.customers && e.customers.update && !i.isEmpty(e.customers.update.customers)
        },
        events: function() {
            var e = s.prototype.events.apply(this, arguments) || {};
            return i.extend(e, {
                "click #reassign-users_select_holder": "initUserSelect",
                "modal:centrify": "onCentrify"
            })
        },
        preventClicks: i.noop,
        initUserSelect: function(e, s) {
            var o, r;
            e.stopPropagation(),
            o = t(e.currentTarget),
            r = i.extend({
                el: o,
                id: "reassign-users_select_holder",
                class_name: "modal-reassign__users-select",
                suggest_class_name: "modal-reassign__users-select-suggest",
                input_name: "reassign_user_id",
                select_one: !0,
                not_remove: !0,
                in_modal: !0,
                existing_items: o.find(".js-multisuggest-item").map(function() {
                    var e = t(this);
                    return {
                        id: e.attr("data-id"),
                        title: i.escape(t.trim(e.text()))
                    }
                }),
                onInit: function() {
                    this.$list.css({
                        zIndex: 9999
                    })
                }
            }, s),
            this._users_select = new n(r)
        },
        onCentrify: function() {
            this._users_select && this._users_select.setPositions()
        },
        _template: "/tmpl/common/modal/reassign.twig",
        getTemplateParams: function() {
            return {
                title: o.i18n("Change responsible user to"),
                action: "reassign",
                managers: {
                    selected: a.current("id"),
                    items: a.get()
                }
            }
        }
    })
}),
define("lib/components/lists/actions/customers/in_list/reassign", ["require", "underscore", "lib/components/lists/actions/customers/reassign", "lib/common/fn", "lib/components/base/modal"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/actions/customers/reassign")
      , s = e("lib/common/fn")
      , n = e("lib/components/base/modal")
      , o = 288
      , r = 404;
    return i.extend({
        wrapCallback: function(e, a) {
            var l;
            return l = "afterDestroy" === e ? t.bind(function() {
                this._complete && (this._$document.trigger("list:reload", !1),
                (new n).showSuccess(s.i18n("The responsible user has been successfully changed"))),
                t.isFunction(a) && a()
            }, this) : "failed" === e ? t.bind(function(e) {
                var i = e && e.error_code && parseInt(e.error_code) === o;
                i || s.has_keys(e, ["customers", "update", "errors"]) && (i = t.any(e.customers.update.errors, {
                    code: r
                })),
                i && (new n).showError(s.i18n("Unfortunately, you do not have the right to change this"), !1),
                t.isFunction(a) && a()
            }, this) : a,
            i.prototype.wrapCallback.call(this, e, l)
        }
    })
}),
define("lib/interface/leads/change_status", ["require", "underscore", "lib/common/fn", "lib/core/view", "lib/components/base/form", "lib/components/base/confirm", "lib/components/leads/api"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/view")
      , n = e("lib/components/base/form")
      , o = e("lib/components/base/confirm")
      , r = e("lib/components/leads/api");
    return s.extend({
        initialize: function(e) {
            e = e || {},
            this.options = e,
            s.prototype.initialize.call(this, arguments),
            r.getPipelines().done(t.bind(function(i) {
                this.has_pipelines = t.keys(i.pipelines).length > 1,
                this.pipelines = i.pipelines,
                this.setParams(e),
                t.isFunction(e.onInit) && e.onInit()
            }, this))
        },
        getTemplateParams: function() {
            var e = {
                multiple: !1,
                has_pipelines: this.has_pipelines,
                class_name: "control--select-white modal-body__inner__managers-select",
                selected: this.options.selected_status,
                name: "status_id"
            };
            return e.items = this.has_pipelines ? t.values(this.pipelines) : t.each(t.first(t.values(this.pipelines)).statuses, function(e) {
                e.option = e.name,
                e.bg_color = e.color
            }),
            this.has_pipelines && (t.each(e.items, function(e) {
                e.statuses = t.toArray(e.statuses)
            }),
            e.selected_pipe = {
                name: "pipeline_id"
            },
            this.options.selected_pipeline && (e.selected_pipe.id = this.options.selected_pipeline)),
            e
        },
        setParams: function(e) {
            var i, s, n, o = 1 === e.id.length ? AMOCRM.data.current_list.get(e.id[0]) : !1, r = null;
            return o ? (r = o.get("status") || "",
            i = o.get("pipeline_id")) : (s = t.uniq(t.map(e.collection.models, function(e) {
                return e.get("pipeline_id")
            })),
            1 === s.length && (i = s[0],
            n = t.uniq(t.map(t.filter(e.collection.models, function(e) {
                return e.get("pipeline_id") == i
            }), function(e) {
                return e.get("status")
            })),
            1 === n.length && (r = n[0]))),
            this.options = t.extend(this.options, {
                selected_pipeline: i,
                selected_status: r
            }),
            this
        },
        initForm: function(e) {
            e = e || {},
            this._form = e.form || this._addComponent(n.View, {
                el: e.el
            })
        },
        _callbacks: {
            onSave: t.noop,
            onBeforeConfirm: t.noop
        },
        onClickSave: function(e) {
            var i = this
              , s = parseInt(this._form.model.get("status_id"));
            e = e || {},
            t.each(this._callbacks, function(i, s) {
                this._callbacks[s] = t.isFunction(e[s]) ? e[s] : t.noop
            }, this),
            142 === s || 143 === s ? (this._callbacks.onBeforeConfirm(),
            this._addComponent(o, {
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.card_page_save_complete_tasks_button_decline,
                accept_text: AMOCRM.lang.card_page_save_complete_tasks_button_accept,
                button_class: "button-input_blue",
                text: AMOCRM.lang.card_page_save_complete_tasks,
                destroy: function() {
                    i._callbacks.onSave({
                        accepted: this.accepted
                    })
                }
            })) : this._callbacks.onSave({
                accepted: !1
            })
        },
        getDataForRequest: function(e) {
            var t, i;
            return e = e || {},
            this.has_pipelines ? (t = this._form.model.get("status_id"),
            i = this._form.model.get("pipeline_id")) : t = this._form.model.get("status_id"),
            {
                close_tasks: e.accepted ? 1 : 0,
                STATUS_ID: t,
                PIPELINE_ID: i,
                parties: {
                    id: this.options.id
                }
            }
        },
        showErrorMessage: function(e) {
            var s, n;
            if (e = e || {},
            n = e.response,
            e.from_cell_edit)
                s = AMOCRM.lang.single_change_status_error + ". " + AMOCRM.lang.multiple_change_status_error2;
            else
                switch (AMOCRM.lang_id) {
                case "ru":
                    s = AMOCRM.lang.multiple_change_status_error0.replace("#PLACEHOLDER#", i.numeralWord(n.good_count, AMOCRM.lang.work_numeral)).replace("#PLACEHOLDER2#", n.good_count).replace("#PLACEHOLDER3#", i.numeralWord(n.good_count, AMOCRM.lang.leads_numeral)).replace("#PLACEHOLDER4#", n.total_count) + " " + AMOCRM.lang.multiple_change_status_error.replace("#PLACEHOLDER#", i.numeralWord(n.bad_count, AMOCRM.lang.work_numeral)) + " " + n.bad_count + " " + i.numeralWord(n.bad_count, AMOCRM.lang.leads_numeral) + ". " + AMOCRM.lang.multiple_change_status_error2;
                    break;
                case "en":
                case "es":
                    s = AMOCRM.lang.multiple_change_status_error0.replace("#PLACEHOLDER#", n.good_count).replace("#PLACEHOLDER2#", n.total_count) + " " + i.numeralWord(n.total_count, AMOCRM.lang.leads_numeral) + " " + i.numeralWord(n.good_count, AMOCRM.lang.work_numeral) + ". " + n.bad_count + " " + i.numeralWord(n.bad_count, AMOCRM.lang.leads_numeral) + " " + AMOCRM.lang.multiple_change_status_error.replace("#PLACEHOLDER#", i.numeralWord(n.bad_count, AMOCRM.lang.work_numeral_negative)) + ". " + AMOCRM.lang.multiple_change_status_error2
                }
            t.isFunction(e.callback) && e.callback(),
            this._addComponent(o, {
                class_name: "modal-list change-status-error-modal",
                accept_text: "OK",
                text: s,
                destroy: t.bind(function() {
                    n.total_count !== n.bad_count && this._$document.trigger("list:reload")
                }, this)
            })
        }
    })
}),
define("lib/components/lists/actions/change_status", ["require", "underscore", "lib/core/view", "lib/interface/leads/change_status", "lib/components/modals/action", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/core/view")
      , s = e("lib/interface/leads/change_status")
      , n = e("lib/components/modals/action")
      , o = e("lib/common/fn");
    return n.extend({
        initialize: function(e) {
            this.options = t.extend({}, e),
            i.prototype.initialize.call(this, arguments),
            this._status_change = this._addComponent(s, t.extend({}, e, {
                onInit: t.bind(function() {
                    this.initModal()
                }, this)
            }))
        },
        _initModal: function(e) {
            n.prototype._initModal.apply(this, arguments),
            this._status_change.initForm({
                el: e
            })
        },
        _url: "/ajax/leads/multiple/change_status/",
        _template: "/tmpl/common/modal/change_status.twig",
        getTemplateParams: function() {
            return {
                title: AMOCRM.lang.multiple_change_status_label_modal,
                statuses: this._status_change.getTemplateParams()
            }
        },
        preventClicks: t.noop,
        clickSaveBtn: function(e) {
            this._status_change.onClickSave({
                onSave: t.bind(this.save, this),
                onBeforeConfirm: t.bind(function() {
                    this.modal.hide()
                }, this)
            })
        },
        getDataForRequest: function(e) {
            return this._status_change.getDataForRequest(e)
        },
        actionComplete: function(e) {
            this.modal.show(),
            e = o.cleanResponse(e),
            this._elem("save_btn").trigger("button:load:stop"),
            this.isValidResponse(e) ? (this._xhr = null,
            this._callbacks.complete.call(this, e)) : (this._xhr = null,
            this._callbacks.failed.call(this, e))
        },
        isValidResponse: function(e) {
            return e.status && "fail" !== e.status
        },
        _callbacks: {
            complete: function(e) {
                "error" === e.status ? this._status_change.showErrorMessage({
                    response: e,
                    callback: t.bind(this.destroy, this)
                }) : (this._$document.trigger("list:reload"),
                this.modal.showSuccess(e.message))
            },
            failed: function() {
                this.modal.showError()
            },
            afterDestroy: t.noop,
            destroy: t.noop
        }
    })
}),
define("lib/components/lists/actions/delete", ["require", "jquery", "twig", "lib/components/base/modal"], function(e) {
    var t, i = e("jquery"), s = e("twig"), n = e("lib/components/base/modal");
    return t = function(e) {
        var t = this
          , o = AMOCRM.data.current_list.where({
            is_checked: !0
        });
        this.options = i.extend({}, e),
        this.modal = new n({
            class_name: "modal-list",
            init: s._preload(["/tmpl/common/modal/delete.twig"], function(e) {
                var i = AMOCRM.lang.multiple_delete_invite
                  , n = AMOCRM.lang.multiple_delete_description
                  , r = [{
                    text: i.replace("#PLACEHOLDER#", o.length > 1 ? AMOCRM.lang.multiple_delete_these_items : "Ђ" + o[0].get("name").text + "ї")
                }];
                t.$modal_body = e,
                "todo" !== AMOCRM.getBaseEntity() && r.push({
                    text: n.replace("#PLACEHOLDER#", o.length > 1 ? AMOCRM.lang.multiple_delete_these_items2 : " Ђ" + o[0].get("name").text + "ї")
                }),
                t.$modal_body.trigger("modal:loaded").html(s({
                    ref: "/tmpl/common/modal/delete.twig"
                }).render({
                    caption: AMOCRM.lang["delete_" + AMOCRM.data.current_entity + (o.length > 1 ? "s" : "")],
                    message: r,
                    accept_text: AMOCRM.lang.multiple_delete_confirm,
                    lang: AMOCRM.lang
                })).trigger("modal:centrify"),
                t.$modal_body.on("click", ".js-modal-accept", function() {
                    t.doDelete()
                })
            }),
            destroy: function() {
                t.$modal_body && t.$modal_body.off(),
                this.delete_xhr && "undefined" != typeof this.delete_xhr.status && this.delete_xhr.abort()
            }
        })
    }
    ,
    t.prototype.successCallback = function() {
        i(document).trigger("list:reload", ["todo" === AMOCRM.data.current_entity ? "todo" : !1]),
        this.modal.showSuccess(AMOCRM.lang.multiple_delete_success_msg)
    }
    ,
    t.prototype.doDelete = function() {
        var e = this;
        this.$modal_body.hide(),
        this.delete_xhr = i.ajax({
            url: "/ajax/" + this.options.entity + "/multiple/delete/",
            type: "POST",
            data: {
                ACTION: "DELETE",
                ID: this.options.id
            },
            dataType: "json"
        }).always(function() {
            e.$modal_body.show()
        }).done(function(t) {
            "fail" === t.status ? e.modal.showError(t.message) : e.successCallback()
        }).fail(function() {
            e.modal.showError()
        })
    }
    ,
    t
}),
define("lib/components/lists/actions/delete_catalog_elements", ["require", "underscore", "lib/components/modals/delete", "twig", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/delete")
      , s = (e("twig"),
    e("lib/common/fn"));
    return i.extend({
        _elements_ids: [],
        _elements_collection: null,
        _url: "/ajax/v1/catalog_elements/set/",
        actionComplete: function() {
            var e = i.prototype.actionComplete.apply(this, arguments);
            return this._$document.trigger("list:reload"),
            e
        },
        setParams: function(e) {
            var s = i.prototype.setParams.apply(this, arguments);
            if (!(e && e.id && t.isArray(e.id) && e.id.length))
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            return this._elements_ids = t.map(e.id, function(e) {
                var t = parseInt(e, 10);
                if (!t || 0 > t)
                    throw new Error("Id must be positive number, given: " + e);
                return t
            }),
            this._elements_collection = e.collection,
            s
        },
        getDataForRequest: function() {
            return {
                request: {
                    catalog_elements: {
                        "delete": this._elements_ids
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.catalog_elements && e.catalog_elements["delete"]
        },
        getTemplateParams: function() {
            var e, i, n, o = AMOCRM.lang, r = [];
            return this._elements_ids.length > 1 ? (e = s.i18n("Delete elements"),
            r.push(s.i18n("Are you sure you want to delete selected elements?")),
            r.push(s.i18n("All data associated with selected elements, will be deleted. Removed data recovery is impossible."))) : (i = this._elements_collection.findWhere({
                id: t.first(this._elements_ids)
            }),
            n = i.get("name") || "",
            n && n.text && (n = n.text),
            e = s.i18n("Delete element"),
            r.push(s.i18n("Are you sure you want to delete Ђ%sї?").replace("%s", n)),
            r.push(s.i18n("All data associated with Ђ%sї, will be deleted. Removed data recovery is impossible.").replace("%s", n))),
            {
                lang: o,
                caption: e,
                message: t.map(r, function(e) {
                    return {
                        text: e
                    }
                }),
                accept_text: s.i18n("Confirm")
            }
        }
    })
}),
define("lib/components/lists/actions/customers/delete", ["require", "underscore", "lib/components/modals/delete", "backbone", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/delete")
      , s = e("backbone")
      , n = e("lib/common/fn");
    return i.extend({
        _elements_ids: [],
        _elements_collection: null,
        _url: "/ajax/v1/customers/set/",
        setParams: function(e) {
            var s = i.prototype.setParams.apply(this, arguments);
            if (!(e && e.id && t.isArray(e.id) && e.id.length))
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            return this._elements_ids = t.map(e.id, function(e) {
                var t = parseInt(e);
                if (!t || 0 > t)
                    throw new Error("Id must be positive number, given: " + e);
                return t
            }),
            e.collection && t.isFunction(e.collection.toJSON) ? this._elements_collection = e.collection.toJSON() : e.collection && t.isArray(e.collection) && (this._elements_collection = e.collection),
            s
        },
        getDataForRequest: function() {
            return {
                request: {
                    customers: {
                        "delete": this._elements_ids
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.customers && e.customers["delete"]
        },
        getTemplateParams: function() {
            var e, i, o, r = AMOCRM.lang, a = [];
            return this._elements_ids.length > 1 ? (e = n.i18n("Delete customers"),
            a.push(n.i18n("Are you sure you want to delete selected elements?")),
            a.push(n.i18n("All data associated with selected elements, will be deleted. Removed data recovery is impossible."))) : (i = t.findWhere(this._elements_collection, {
                id: t.first(this._elements_ids)
            }),
            i && (i instanceof s.Model ? o = i.get("name") : t.has(i, "name") ? o = i.name : t.isString(i) && (o = i)),
            o && o.text && (o = o.text),
            o = o || "",
            e = n.i18n("Delete customer"),
            a.push(n.i18n("Are you sure you want to delete Ђ%sї?").replace("%s", o)),
            a.push(n.i18n("All data associated with Ђ%sї, will be deleted. Removed data recovery is impossible.").replace("%s", o))),
            {
                lang: r,
                caption: e,
                message: t.map(a, function(e) {
                    return {
                        text: e
                    }
                }),
                accept_text: n.i18n("Confirm")
            }
        }
    })
}),
define("lib/components/lists/actions/customers/in_list/delete", ["require", "underscore", "lib/components/lists/actions/customers/delete", "lib/common/fn", "lib/components/base/modal"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/actions/customers/delete")
      , s = e("lib/common/fn")
      , n = e("lib/components/base/modal");
    return i.extend({
        wrapCallback: function(e, o) {
            var r;
            return o = i.prototype.wrapCallback.apply(this, arguments),
            r = "complete" === e ? t.bind(function() {
                this._$document.trigger("list:reload", !1),
                (new n).showSuccess(s.i18n("multiple_delete_success_msg")),
                o()
            }, this) : o
        }
    })
}),
define("lib/components/lists/actions/manage_tags", ["require", "jquery", "underscore", "lib/components/modals/action", "lib/interface/fast_tags", "lib/common/fn", "lib/common/user_rights", "lib/components/tags/api"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/modals/action")
      , n = e("lib/interface/fast_tags")
      , o = e("lib/common/fn")
      , r = e("lib/common/user_rights")
      , a = e("lib/components/tags/api");
    return s.extend({
        _classes: function() {
            return i.extend(i.result(s.prototype, "_classes"), {
                modal: "modal-list-tags",
                multisuggest: "js-multisuggest",
                multisuggest_input: "js-multisuggest-input",
                multisuggest_suggest: "multisuggest__suggest"
            })
        },
        _selectors: function() {
            return i.extend(i.result(s.prototype, "_selectors"), {
                multisuggest_items: ".js-multisuggest-list .js-multisuggest-item"
            })
        },
        initialize: function(e) {
            e = e || {},
            this.options = e,
            this.cant_add = "D" === r.getRights("tags", "add"),
            a.getFullTagsList({
                entity: e.entity
            }).then(i.bind(function(t) {
                this._render_params = {
                    all_tags: t.items,
                    existed_tags: this.getCommonTags(e.collection, t.items)
                },
                s.prototype.initialize.call(this, i.extend(e, this._callbacks))
            }, this))
        },
        _preload: ["/tmpl/common/tags/index.twig", "/tmpl/common/tags/item.twig"],
        _template: "/tmpl/common/tags/index.twig",
        render: function() {
            return s.prototype.render.apply(this, arguments),
            this._elem("multisuggest").data("values-hash", t.extend({}, this._render_params.all_tags)).trigger("multisuggest:set_suggest", [!1]).find(".js-multisuggest-input").focus(),
            this.center(),
            this
        },
        getTemplateParams: function() {
            return i.extend(this._render_params, {
                caption: AMOCRM.lang[1 === this.options.id.length ? "tags_manage_caption" : "tags_common_caption"],
                cant_add: this.cant_add
            })
        },
        preventClicks: i.noop,
        save: function() {
            var e = this._elem("multisuggest_input")
              , s = this._render_params.existed_tags
              , o = [];
            if (!this._xhr) {
                if (e.val() && !this.cant_add && (this._elem("multisuggest").trigger("multisuggest:item:choose", {
                    title: e.val()
                }),
                e.val("")),
                !this.options.id.length && 0 === this.options.id[0])
                    return !1;
                if (o = this.getSelectedTags(),
                i.isEqual(i.sortBy(i(o).pluck("id")), i.sortBy(i(s).pluck("id"))))
                    return this.destroy();
                this._elem("save_btn").trigger("button:load:start"),
                this.$el.hide(),
                n.prototype.createNewTags.call(this, o, this.options.entity).then(i.bind(function(e) {
                    return o = e,
                    this._xhr = a.setTags({
                        entity: this.options.entity,
                        ids: this.options.id,
                        tags: n.prototype.prepareTagsForRequest(i.values(t.extend(!0, {}, e)), s)
                    })
                }, this)).then(i.bind(this._callbacks.complete, this))["catch"](i.bind(this._callbacks.failed, this))
            }
        },
        _callbacks: {
            afterRequest: function() {
                this._xhr = null,
                this._elem("save_btn").trigger("button:load:stop")
            },
            complete: function() {
                this._callbacks.afterRequest.call(this),
                this._$document.trigger("list:reload"),
                this.modal.showSuccess(o.i18n("The common tags have been successfully edited!"))
            },
            failed: function() {
                this.modal.showError(),
                this._callbacks.afterRequest.call(this)
            },
            afterDestroy: i.noop,
            destroy: i.noop
        },
        getCommonTags: function(e, t) {
            var s, n;
            return s = e.map(function(e) {
                return i((e.get("tags") || {}).items).pluck("id")
            }),
            n = i.intersection.apply(i, s),
            i(n).map(function(e) {
                return i(t).findWhere({
                    id: e
                })
            })
        },
        getSelectedTags: function() {
            return t.makeArray(this._findElem("multisuggest_items").map(function(e, i) {
                var s = t(i);
                return {
                    id: parseInt(s.attr("data-id")) || 0,
                    raw_title: s.text(),
                    title: s.text().trim()
                }
            }))
        }
    })
}),
define("lib/components/lists/actions/restore", ["require", "jquery", "lib/components/base/confirm"], function(e) {
    var t, i = e("jquery"), s = e("lib/components/base/confirm");
    return t = function(e) {
        var t = e.entity.toString().split("-").shift();
        new s({
            class_name: "modal-list",
            text: AMOCRM.lang.tasks_open_confirm,
            init: function() {
                this.$modal_body.find(".modal-body__actions").hide(),
                this.options.accept.call(this)
            },
            accept: function() {
                var s = this;
                s.requestStart().xhr = i.ajax({
                    url: "/ajax/restore/" + t + "/",
                    type: "POST",
                    dataType: "json",
                    data: {
                        IDS: e.id
                    },
                    success: function(e) {
                        "OK" == e.status ? (i(document).trigger("list:reload", [AMOCRM.data.current_entity]),
                        s.requestSuccess()) : s.requestFail()
                    },
                    error: function() {
                        s.requestFail()
                    }
                })
            }
        })
    }
}),
define("lib/components/lists/actions/open_close", ["require", "jquery", "lib/components/base/confirm", "lib/components/lists/actions/todo_result"], function(e) {
    var t, i = e("jquery"), s = e("lib/components/base/confirm"), n = e("lib/components/lists/actions/todo_result");
    return t = function(e) {
        var t;
        t = e.params.is_close ? "/ajax/todo/multiple/close/" : "/ajax/todo/multiple/open/",
        new s({
            class_name: "modal-list",
            text: AMOCRM.lang.tasks_open_confirm,
            init: function() {
                e.params.is_close && (this.$modal_body.find(".modal-body__actions").hide(),
                this.options.accept.call(this))
            },
            accept: function() {
                var s = this;
                s.requestStart().xhr = i.ajax({
                    url: t,
                    type: "POST",
                    dataType: "json",
                    data: {
                        ID: e.id
                    },
                    success: function(t) {
                        "success" == t.status ? e.params.is_close && 1 == e.id.length ? (s.destroy(),
                        new n({
                            id: e.id[0],
                            skip: function() {
                                i(document).trigger("list:reload")
                            }
                        })) : (i(document).trigger("list:reload"),
                        s.requestSuccess()) : s.requestFail()
                    },
                    error: function() {
                        s.requestFail()
                    }
                })
            }
        })
    }
}),
define("lib/components/lists/actions/merge", ["require", "jquery", "underscore", "twig", "backbone", "lib/common/hs", "lib/components/base/modal", "elements_view", "lib/components/base/confirm"], function(e) {
    function t(e) {
        var t = this;
        this.id.length > 0 && i.ajax(this.link + "info", {
            method: "POST",
            data: {
                id: this.id
            },
            timeout: 4e4,
            success: function(i) {
                i.response ? (t.template_data = i.response,
                t.template_data.titleLang = t.titleLang,
                t.template_data.doubles_counter = t.doubles_counter || "",
                t._setInitialValues(),
                e.resolve()) : (t.modal.showError("", !1),
                e.reject())
            },
            error: function(i) {
                t.modal.showError("", !1),
                e.reject()
            }
        })
    }
    var i = e("jquery")
      , s = e("underscore")
      , n = e("twig")
      , o = (e("backbone"),
    e("lib/common/hs"))
      , r = e("lib/components/base/modal")
      , a = e("elements_view");
    e("lib/components/base/confirm");
    n._preload(["/tmpl/common/modal/merge.twig", "/tmpl/common/modal/merge/pipeline_status_view.twig"]);
    var l = a.extend({
        id: null,
        link: "",
        template_data: {},
        type: "",
        titleLang: "",
        successLang: "",
        modal: null,
        _modalReady: !1,
        _scroller: null,
        _changed: !1,
        _targetCell: null,
        _hoveredCell: null,
        _requestAnimationFrame: null,
        _cancelAnimationFrame: null,
        _animationId: null,
        _throttledHoverHandler: function() {},
        template: function() {
            return n({
                ref: "/tmpl/common/modal/merge.twig"
            })
        },
        events: {
            "click .js-merge-start": "_onSaveClick",
            "form:changed input": "_onFormChange",
            "modal:centrify": "_onModalOpen",
            "click .merge-form__table-cell:not(.super-cell) input": "_onElementChecked",
            "input:checked .merge-form__table-cell:not(.super-cell) input": "_onElementChecked",
            "mouseenter .merge-form__table .merge-form__table-cell_contracted": "_throttledHoverHandler",
            "mouseover .merge-form__table .merge-form__table-cell_contracted": "_throttledHoverHandler",
            "mouseleave .super-cell": "_onCellLeave",
            "touchstart *:not(.merge-form__table .merge-form__table-cell_contracted)": "_onCellLeave",
            wheel: "_onCellLeave",
            "change .js-merge-status-input": "_statusInputChange"
        },
        _confirmModalConfig: null,
        _selectors: function() {
            return {
                resultSpots: ".js-merge-form div.form-result",
                rows: ".merge-form__table-row",
                base_rows: ".merge-form__row-container .merge-form__table-row",
                form: ".js-merge-form",
                tableContainer: ".merge-form__table-container",
                table: ".merge-form__table",
                row: ".merge-form__table-row",
                cell: ".merge-form__table-cell",
                inputByValue: 'input[data-value="%s"]',
                scrollerPane: ".merge-form__container .hs__pane",
                secret: ".merge-form__table-secret",
                rowByIndex: '.merge-form__table-row[data-row-index="%s"]',
                inputsByContactId: '.merge-form__table-cell[data-contact-id="%s"] input',
                radioByName: 'input[type="radio"][name="%s"][checked]',
                resultCellByRowIndex: '.merge-form__table-headcol .merge-form__table-row[data-row-index="%s"] .merge-form__table-cell',
                result_row: '.merge-form__table-headcol .merge-form__table-row[data-row-index="%s"]',
                inputById: 'input[id="%s"]',
                inputByValue: 'input[data-value="%s"]',
                cellsByRowIndex: '.merge-form__table-cell[data-row-index="%s"]'
            }
        },
        initialize: function(e) {
            this._throttledHoverHandler = s.noop,
            this._initAnimation();
            var n = i.Deferred()
              , o = i.Deferred();
            this.type = e.type,
            this.is_doubles_search = e.is_doubles_search,
            this.titleLang = e.titleLang || "multiple_merge_title_" + this.type,
            this.doubles_counter = e.doubles_counter || !1,
            this.successLang = "multiple_merge_success_" + this.type,
            this.link = "/ajax/" + this.type + "/merge/",
            this.id = e.id || [],
            this.success_callback = "function" == typeof e.success_callback ? e.success_callback : function() {}
            ,
            this._openModal(o, e.restart),
            t.call(this, n),
            n.done(s.bind(function() {
                this.render(o)
            }, this)),
            o.done(s.bind(function() {
                this.$el.find(".merge-form__table-cell").on("click.merge", ".merge-form__link_select-all", s.bind(function(e) {
                    this._onSelectAllClick(e)
                }, this)).on("click.merge", ".js-open_card", s.bind(function(e) {
                    var t, s = i(e.currentTarget);
                    t = window.open(),
                    t.opener = null,
                    t.location = "/" + this.type + "/detail/" + s.attr("data-contact-id") + "?compact=yes"
                }, this)),
                this._showInitialValues(),
                this._setCellsHeight(),
                this._setScroller()
            }, this)),
            i(window).on("modal:centrify scroll.merge wheel.merge touchmove.merge", this._setArrowPosition.bind(this)),
            this._confirmModalConfig = {
                accept_text: AMOCRM.lang.modal_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: s.bind(function(e) {
                    this._saveMerge({
                        success: e,
                        stop_merge: !0
                    }),
                    this._changed = !1
                }, this),
                decline: s.bind(function(e) {
                    this._changed = !1,
                    this.modal.destroy(),
                    e()
                }, this)
            },
            AMOCRM.router.registerPreventConfig(this._confirmModalConfig),
            AMOCRM.router.preventPageChange(!0)
        },
        render: function(e) {
            var t = this.template();
            return this.$el.html(t.render(i.extend(this.template_data, {
                lang: AMOCRM.lang,
                no_second_button: !this.is_doubles_search
            }))),
            this.$el.trigger("modal:loaded").trigger("modal:centrify"),
            e.resolve(),
            this
        },
        destroy: function() {
            return AMOCRM.router.preventPageChange(!1),
            this._animationId && (this._cancelAnimationFrame(this._animationId),
            null == this._animationId),
            this._scroller && this._scroller.destroy(),
            this._dropElemCache(),
            this._hoveredCell && (this._hoveredCell.off().remove(),
            this._hoveredCell = null),
            i(".super-cell").off().remove(),
            i(window).off("modal:centrify scroll.merge wheel.merge touchmove.merge", this._setArrowPosition),
            this.remove()
        },
        _openModal: function(e, t) {
            var i = this;
            this.modal = new r({
                class_name: "modal-list modal-entity-merge merge-form__modal",
                can_centrify: !1,
                can_destroy: !1,
                show_loader: !t,
                init: function(t) {
                    var s = this;
                    e.done(function() {
                        s.disable_overlay_click = !0,
                        t.trigger("modal:loaded").html(i.$el).addClass("merge-modal__body").trigger("modal:centrify")
                    })
                },
                destroy: function() {
                    return i._changed ? (AMOCRM.router.confirmPageChange(i._confirmModalConfig, function() {
                        i.destroy()
                    }),
                    !1) : void i.destroy()
                }
            })
        },
        _showInitialValues: function() {
            var e = this;
            this._elem("resultSpots").each(function() {
                var t = i(this)
                  , s = t.attr("id")
                  , o = e._getFormValue({
                    key: s
                })
                  , r = e._getFormColor({
                    key: s
                })
                  , a = e._getFormPipelineName({
                    key: s
                })
                  , l = "";
                l = a ? n({
                    ref: "/tmpl/common/modal/merge/pipeline_status_view.twig"
                }).render({
                    pipeline_title: a,
                    status_title: o.join(""),
                    color: r
                }) : '<div class="cell__body"><span class="form-result__text">' + o.join('</span><span class="form-result__text">') + "</span></div>",
                t.html(l),
                r && t.find(".form-result__text").css({
                    background: r
                }).addClass("form-result__text_painted")
            })
        },
        _saveMerge: function(e) {
            var e = e || {}
              , t = this._elem("form").serialize()
              , s = this;
            s.modal.$modal.find(".modal-body").hide(),
            this.id.length > 0 && i.ajax(this.link + "save", {
                method: "POST",
                data: t,
                timeout: 4e4,
                success: function(t, n, o) {
                    t.response && "success" == t.response ? (e.success && e.success(),
                    s.modal.showSuccess(AMOCRM.lang[s.successLang], function() {
                        s.modal.destroy(),
                        e.stop_merge || (i(document).trigger("page:reload"),
                        s.id.splice(s.id.indexOf(t.base_id), 1),
                        s.success_callback({
                            deleted_items: s.id,
                            restart: !0
                        }))
                    }),
                    s._changed = !1) : (s.modal.$modal.find(".modal-body").show(),
                    s.modal.showError(""))
                },
                error: function(e, t, i) {
                    s.modal.showError("")
                },
                complete: function(e, t) {}
            })
        },
        _statusInputChange: function(e) {
            var t = i(e.currentTarget)
              , s = t.next("input");
            this.$('[name="' + s.attr("name") + '"]').removeProp("checked"),
            s.prop("checked", !0)
        },
        _sizeRow: s.noop,
        _setCellsHeight: function() {
            var e, t, n = this._elem("base_rows");
            s.each(n, function(n, o) {
                e = i(n).data("row-index"),
                s.isUndefined(e) || (t = i(n).outerHeight(),
                this._elem("result_row", e).css({
                    height: t + "px"
                }))
            }, this)
        },
        _setScroller: function() {
            var e = this._elem("table")
              , t = this._elem("tableContainer");
            this._elem("scrollerPane");
            this._scroller = new o({
                wrapper: t,
                scroller: e
            }),
            e.css({
                "overflow-x": "scroll"
            })
        },
        _setArrowPosition: function() {
            var e = this._elem("secret");
            if (e.length) {
                var t = window.scrollY || window.pageYOffset
                  , s = i(window).height()
                  , n = e.parent()
                  , o = n.offset().top
                  , r = n.height()
                  , a = t - o
                  , l = a + s
                  , c = 0;
                0 > a && (a = 0),
                l > r && (l = r),
                c = a + (l - a) / 2 - 25,
                e.css({
                    top: c
                })
            }
        },
        _setInitialValues: function() {
            var e = this.template_data.controls
              , t = this;
            s.each(this.template_data.compare_values, function(i, n) {
                var o = e[n];
                if ("LEADS" == n) {
                    var r = 0;
                    s.each(i, function(e) {
                        r += e.values[0].value
                    }),
                    t._setFormValue({
                        key: n,
                        value: r.toString()
                    })
                } else
                    "CONTACTS" === n ? t._setContactsValues(i) : s.each(i, function(e, i) {
                        if ("text" != o.object) {
                            var r = e.values;
                            s.each(r, function(e) {
                                if (e.selected || e.checked) {
                                    var s = {};
                                    "STATUS" == n && (s.color = e.color,
                                    t.template_data.compare_values.PIPELINE_ID && (s.pipeline_name = t.template_data.compare_values.PIPELINE_ID[i].values[0].label)),
                                    t._setFormValue({
                                        key: n,
                                        value: e.label || e.text,
                                        props: s
                                    })
                                }
                            })
                        } else if ("text" == o.object) {
                            var a = {};
                            return "STATUS" == n && (a.color = e.values[0].color,
                            t.template_data.compare_values.PIPELINE_ID && (a.pipeline_name = t.template_data.compare_values.PIPELINE_ID[i].values[0].label)),
                            t._setFormValue({
                                key: n,
                                value: e.values[0].label,
                                props: a
                            }),
                            !1
                        }
                    })
            })
        },
        _setContactsValues: function(e) {
            var t = this;
            s.each(e, function(e) {
                s.each(e.values[0].value, function(e) {
                    t._setFormValue({
                        key: "CONTACTS",
                        value: e.name
                    })
                })
            }, this)
        },
        _getFormValue: function(e) {
            var t = this.template_data.compare_fields
              , i = e.key;
            return i && t && t[i] ? t[i].selected_values || [] : []
        },
        _getFormColor: function(e) {
            var e = e || {}
              , t = this.template_data.compare_fields
              , i = e.key;
            return i && t && t[i] ? t[i].color || "" : !1
        },
        _getFormPipelineName: function(e) {
            e = e || {};
            var t = this.template_data.compare_fields
              , i = e.key;
            return i && t && t[i] ? t[i].pipeline_name || "" : !1
        },
        _setFormValue: function(e) {
            var t = this.template_data.compare_fields
              , i = e.key
              , s = e.value
              , n = e.unset || !1
              , o = e.props || {};
            if (!(i && t && t[i] && s))
                return !1;
            var r = t[i].selected_values
              , a = r.indexOf(s)
              , l = -1 != a;
            return l ? n ? r.splice(a, 1) : r[a] = s : a = r.push(s),
            o.color && (t[i].color = o.color),
            o.pipeline_name && (t[i].pipeline_name = o.pipeline_name),
            !0
        },
        _clearFormValue: function(e) {
            var t = this.template_data.compare_fields
              , i = e.key;
            i && t && t[i] && (t[i].selected_values.length = 0)
        },
        _initAnimation: function() {
            this._requestAnimationFrame = function() {
                return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e, t) {
                    window.setTimeout(e, 1e3 / 60)
                }
            }
            .bind(window),
            this._cancelAnimationFrame = (window.cancelAnimationFrame || window.mozCancelAnimationFrame).bind(window)
        },
        _onModalOpen: function() {
            this._modalReady = !0
        },
        _onSaveClick: function() {
            this._saveMerge()
        },
        _onSelectAllClick: function(e) {
            var t = this
              , s = i(e.target)
              , n = s.parents(this._selector("cell"))
              , o = (n.parents(this._selector("row")),
            n.data("contact-id"))
              , r = (this.$el.find(this._selector("table")),
            this.$el.find(this._selector("inputsByContactId", o)));
            r.each(function() {
                var e = i(this)
                  , s = e.attr("type")
                  , n = e.parents(t._selector("row"))
                  , o = (n.data("row-index"),
                e.data("field-id"));
                e.data("value"),
                e.data("color");
                if ("radio" == s) {
                    var r = i(this).attr("name")
                      , a = n.find(t._selector("radioByName", r));
                    a.removeAttr("checked"),
                    i(this).attr("checked", "checked"),
                    i(this).prop("checked", !0),
                    this.checked = !0,
                    t._clearFormValue({
                        key: o
                    })
                } else
                    this.checked = !0;
                i(this).trigger("input:checked")
            })
        },
        _onElementChecked: function(e) {
            e.stopPropagation();
            var t = i(e.target)
              , s = t.data("value").toString()
              , n = t.data("field-id")
              , o = t.data("color")
              , r = t.next("input").attr("data-value") || ""
              , a = e.target.checked
              , l = !a
              , c = t.attr("type")
              , d = t.parents(this._selector("row"))
              , u = d.data("row-index")
              , h = {};
            o && (h.color = o),
            r && (h.pipeline_name = r),
            "radio" == c && this._clearFormValue({
                key: n
            });
            var _ = this._setFormValue({
                key: n,
                value: s,
                unset: l,
                props: h
            });
            if ("checkbox" == c) {
                var p = d.find(this._selector("inputByValue", s));
                p.each(function() {
                    this.checked = a
                })
            } else
                t.attr("checked", "checked"),
                t.prop("checked", !0),
                e.target.checked = !0;
            if (_) {
                var m = {
                    rowIndex: u,
                    changedId: n,
                    changedIndex: s,
                    target: this
                };
                t.trigger("form:changed", m)
            }
        },
        _onFormChange: function(e, t) {
            var s = (i(t.target),
            t.changedId)
              , o = t.rowIndex
              , r = this.$el.find('.merge-form__table-headcol .merge-form__table-row[data-row-index="' + o + '"] .merge-form__table-cell')
              , a = this._getFormValue({
                key: s
            })
              , l = '<span class="form-result__text">' + a.join('</span><span class="form-result__text">') + "</span>"
              , c = this._getFormColor({
                key: s
            })
              , d = this._getFormPipelineName({
                key: s
            });
            d && (l = n({
                ref: "/tmpl/common/modal/merge/pipeline_status_view.twig"
            }).render({
                pipeline_title: d,
                status_title: a.join(""),
                color: c
            })),
            r.find(".form-result").html('<div class="cell__body">' + l + "</div>"),
            c && !d && r.find(".form-result__text").css({
                background: c,
                padding: "2px 6px",
                "border-radius": "3px"
            }),
            this._changed || (this._changed = !0)
        },
        _onCellHover: function(e) {
            if (e.stopPropagation(),
            this._modalReady && (1 != e.which || 1 != e.button)) {
                this._onCellLeave();
                var t = i(e.currentTarget)
                  , s = (t.hasClass("first-row__cell"),
                t.attr("id"),
                this.modal.$modal.find(".modal-body").hasClass("modal-body-relative"))
                  , n = i("html").hasClass("firefox")
                  , o = t.offset().left - (s ? 1 : n ? 9 : 4)
                  , r = t.offset().top
                  , a = this;
                this._targetCell = t,
                this._hoveredCell = t.clone(),
                this._hoveredCell.removeClass("merge-form__table-cell_contracted").addClass("super-cell"),
                this._hoveredCell.find("input").each(function() {
                    var e = i(this).attr("id");
                    e && (i(this).attr("id", e + "_clone"),
                    i(this).data("origin", e.toString()))
                }),
                this.$el.find(".merge-form__container").append(this._hoveredCell),
                this._hoveredCell.offset({
                    left: o,
                    top: r
                });
                var l = Math.floor(this._hoveredCell.css("left").replace(/[^-\d\.]/g, ""));
                this._hoveredCell.css({
                    left: l
                }),
                this._hoveredCell.on("click", "input", function(e) {
                    a._onClickHovered(e)
                })
            }
        },
        _onCellLeave: s.noop,
        _onClickHovered: function(e) {
            var t = i(e.target)
              , s = t.attr("id");
            s = s.substring(0, s.length - 1 - 5);
            var n = this._targetCell.find(this._selector("inputById", s))
              , o = this._targetCell.parents(this._selector("row"))
              , r = o.data("row-index")
              , a = n.data("value").toString()
              , l = n.data("field-id")
              , c = t.attr("type")
              , d = t[0].checked
              , u = !d;
            "radio" == c && this._clearFormValue({
                key: l
            });
            var h = this._setFormValue({
                key: l,
                value: a,
                unset: u
            });
            if ("radio" == c)
                t.attr("checked", "checked"),
                t.prop("checked", !0),
                t[0].checked = !0,
                n.attr("checked", "checked"),
                n.prop("checked", !0),
                n[0].checked = !0;
            else {
                var _ = o.find(this._selector("inputByValue", a));
                _.each(function() {
                    this.checked = d
                }),
                n[0].checked = d
            }
            if (h) {
                var p = {
                    rowIndex: r,
                    changedId: l,
                    changedIndex: a,
                    target: n[0]
                };
                n.trigger("form:changed", p)
            }
        }
    });
    return l
}),
define("lib/components/mail/base_api", ["require", "underscore", "jquery", "lib/common/cookie"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("lib/common/cookie")
      , n = function(e, i) {
        this.base_path = e,
        this.headers = t.extend({
            "X-Requested-With": "XMLHttpRequest"
        }, i | {})
    };
    return t.extend(n.prototype, {
        loadBackendVersion: function() {
            var e;
            e = s.get("amomail_backend"),
            e && (e = JSON.parse(e),
            t.isString(e.backend) && (this.headers["X-App-Api-Backend"] = e.backend),
            this.headers["X-App-Version"] = e.version)
        },
        setBackendVersion: function(e, i) {
            if (t.isUndefined(e) && t.isUndefined(i) || t.isUndefined(i) && "current" === e)
                return s.set({
                    name: "amomail_backend",
                    value: "{}",
                    expiredays: -1
                }),
                delete this.headers["X-App-Api-Backend"],
                void delete this.headers["X-App-Version"];
            e = e || "current",
            this.headers["X-App-Version"] = e;
            var n = {
                backend: null,
                version: e
            };
            t.isString(i) && (this.headers["X-App-Api-Backend"] = i,
            n.backend = i),
            s.set({
                name: "amomail_backend",
                expiredays: 1,
                value: JSON.stringify(n)
            })
        },
        getParams: function() {
            var e = AMOCRM.constant("amomail") || {};
            return {
                enabled: e.enabled,
                account_id: AMOCRM.constant("account").id,
                base_url: e.server_base + this.base_path,
                auth_token: e.auth_token || ""
            }
        },
        getAjaxDefaults: function(e) {
            var i = {
                headers: {
                    "X-Auth-Token": this.getParams().auth_token
                },
                contentType: "application/json; charset=UTF-8"
            };
            return i.headers = t.extend(i.headers, this.headers, e || {}),
            i
        },
        checkAccount: function() {
            var e, s, n, o, r, a, l = this.getParams(), c = AMOCRM.constant("amomail");
            return l.enabled ? (e = i.Deferred(),
            e.resolve(),
            e.promise()) : (s = c.server_base + "/api/v2/register",
            n = AMOCRM.constant("account"),
            o = {
                account_id: n.id,
                domain: n.subdomain
            },
            a = t.extend(this.getAjaxDefaults(), {
                url: s,
                data: JSON.stringify(o),
                type: "POST",
                dataType: "json"
            }),
            r = i.ajax(a),
            r.done(function() {
                c.enabled = !0
            }),
            r)
        },
        makeUrl: function(e, i) {
            var s = this.getParams();
            return i = i || {},
            s.account_id && (i.account_id = s.account_id),
            t.each(i, function(t, i) {
                e = e.replace(i, t)
            }),
            s.base_url + e
        },
        _request: function(e, s, n, o, r) {
            var a;
            return o = o || {},
            n = n || {},
            "GET" !== e && (n = JSON.stringify(n),
            "GETJSON" === e ? o["X-Http-Method-Override"] = "GET" : "POST" !== e && (o["X-Http-Method-Override"] = e),
            e = "POST"),
            a = t.extend(this.getAjaxDefaults(o), {
                url: s,
                data: n,
                type: e,
                dataType: "json"
            }, r || {}),
            i.ajax(a)
        },
        requestRaw: function(e, s, n, o, r) {
            o = o || {},
            n = n || {};
            var a = t.extend({
                url: s,
                data: n,
                type: e,
                headers: o,
                dataType: "json"
            }, r || {});
            return i.ajax(a)
        },
        request: function(e, i, s, n, o) {
            var r = this;
            return this.checkAccount().always(function() {
                r.request = r._request
            }).then(t.bind(r._request, this, e, i, s, n, o))
        }
    }),
    n
}),
define("lib/components/mail/api_v2", ["require", "underscore", "FileAPI", "uuid-js", "lib/components/mail/base_api"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("FileAPI"), n = e("uuid-js"), o = e("lib/components/mail/base_api"), r = function() {
        t = new o("/api/v2"),
        t.loadBackendVersion(),
        this.setBackendVersion = i.bind(t.setBackendVersion, t)
    };
    return i.extend(r.prototype, {
        registerAccount: function(e, i) {
            var s = t.makeUrl("/register")
              , n = {
                account_id: +e,
                domain: i
            };
            return t.request("POST", s, n)
        },
        sendMessageFromEntity: function(e, s, n, o, r, a, l, c, d) {
            var u = t.makeUrl("/account_id/messages/send")
              , h = {
                subject: r,
                entity_id: +s,
                entity_type: n,
                attachments: c || {},
                content_type: l || "text",
                content: a,
                template_fields: d || {}
            };
            return i.isObject(e) ? h.from = e : h.from = {
                mailbox_id: +e
            },
            h = i.extend(h, o),
            t.request("POST", u, h)
        },
        getComposeDataForEntity: function(e, i) {
            var s = t.makeUrl("/account_id/type/entity_id/compose", {
                entity_id: e,
                type: i
            });
            return t.request("GET", s)
        },
        createEntitiesFromThreads: function(e, i, s) {
            var n = t.makeUrl("/account_id/type/create", {
                type: i
            })
              , o = {
                thread_id: e,
                fields: s
            };
            return t.request("POST", n, o)
        },
        getThread: function(e, i) {
            var s = t.makeUrl("/account_id/threads/thread_id", {
                thread_id: e
            });
            return t.request("GET", s, null, null, i)
        },
        shareThreads: function(e) {
            var i = t.makeUrl("/account_id/threads/share");
            return t.request("POST", i, e || [])
        },
        getExternalAddresses: function() {
            var e = t.makeUrl("/account_id/whitelist/external");
            return t.request("GET", e)
        },
        updateExternalAddresses: function(e) {
            var s = t.makeUrl("/account_id/whitelist/external")
              , n = i.isEmpty(e) ? "DELETE" : "POST";
            return t.request(n, s, e || [])
        },
        shareThread: function(e, s, n) {
            s = i.isObject(s) ? s : {};
            var o = t.makeUrl("/account_id/threads/thread_id/share", {
                thread_id: e
            })
              , r = i.extend(s, {
                note: n
            });
            return t.request("POST", o, r)
        },
        resendThreads: function(e) {
            var i = t.makeUrl("/account_id/threads/resend");
            return t.request("POST", i, e || [])
        },
        getMessages: function(e, i, s, n) {
            var o = t.makeUrl("/account_id/threads/thread_id/messages", {
                thread_id: e
            });
            return t.request("GET", o, {
                page: i,
                limit: s
            }, null, n)
        },
        resendMessage: function(e, i) {
            var s = t.makeUrl("/account_id/threads/thread_id/messages/message_id/resend", {
                thread_id: e,
                message_id: i
            });
            return t.request("POST", s)
        },
        resendThread: function(e) {
            var i = t.makeUrl("/account_id/threads/thread_id/resend", {
                thread_id: e
            });
            return t.request("POST", i)
        },
        unlinkThread: function(e) {
            var i = t.makeUrl("/account_id/threads/thread_id/unlink", {
                thread_id: e
            });
            return t.request("POST", i)
        },
        linkThread: function(e, i, s) {
            var n = t.makeUrl("/account_id/threads/thread_id/link", {
                thread_id: e
            })
              , o = {
                entity_type: i,
                entity_id: s
            };
            return t.request("POST", n, o)
        },
        requestOAuthConnect: function(e, i) {
            var s = {
                provider: e,
                back_url: i
            }
              , n = t.makeUrl("/account_id/mailboxes/oauth");
            return t.request("GETJSON", n, s)
        },
        completeOAuthConnect: function(e, i, s, n) {
            var o = {
                name: e,
                token: i
            };
            n && (o.user_id = n),
            s && (o.settings = s);
            var r = t.makeUrl("/account_id/mailboxes/oauth");
            return t.request("POST", r, o)
        },
        requestOAuthMailboxConnect: function(e, i) {
            var s = t.makeUrl("/account_id/mailboxes/mailbox_id/oauth", {
                mailbox_id: e
            })
              , n = {
                back_url: i
            };
            return t.request("GETJSON", s, n)
        },
        enableOAuthMailbox: function(e, t) {
            return this.enableMailbox(e, {
                token: t
            })
        },
        getUploadSandbox: function() {
            var e = t.makeUrl("/account_id/upload");
            return t.request("GET", e)
        },
        uploadFiles: function(e, i) {
            var o = $.Deferred()
              , r = {
                "X-Upload-Version": 2,
                "X-Upload-Token": i.token,
                "X-Upload-Key": i.key
            };
            return s.upload({
                cache: !0,
                url: i.url,
                headers: r,
                complete: function(e, s, n) {
                    return e !== !1 ? void o.reject({
                        error_code: "upload_failed",
                        message: e
                    }, s) : void t.requestRaw("GET", i.url, {}, r).done(function(e) {
                        o.resolve(e)
                    }).fail(function(e) {
                        o.reject(e.responseJSON || {
                            error_code: "complete_failed"
                        }, e)
                    })
                },
                fileupload: function(e, t, i) {
                    o.notify.apply(o, arguments)
                },
                fileprogress: function(e, t, i, s) {
                    o.notify(e, i, t, s)
                },
                filecomplete: function(e, t, i, s) {
                    o.notify(e, t, i, s)
                },
                prepare: function(e, t) {
                    t.headers["X-Upload-Id"] = n.create(4).toString(),
                    e.uuid = t.headers["X-Upload-Id"]
                },
                files: e,
                chunkSize: +s.MB,
                chunkUploadRetry: 3
            }),
            o
        },
        getTemplates: function(e) {
            var s = t.makeUrl("/account_id/templates")
              , n = {};
            return i.isUndefined(e) || (n.type = e),
            t.request("GET", s, n)
        },
        addTemplate: function(e, i) {
            var s = t.makeUrl("/account_id/templates")
              , n = {
                name: e,
                fields: i || {}
            };
            return t.request("POST", s, n)
        },
        updateTemplate: function(e, i) {
            var s = t.makeUrl("/account_id/templates/" + e);
            return t.request("PATCH", s, i)
        },
        getTemplate: function(e) {
            var i = t.makeUrl("/account_id/templates/" + e);
            return t.request("GET", i)
        },
        removeTemplate: function(e) {
            var i = t.makeUrl("/account_id/templates/" + e);
            return t.request("DELETE", i)
        },
        sortTemplate: function(e, t) {
            return this.updateTemplate(e, {
                sort: {
                    after: t
                }
            })
        },
        getTemplateMarkers: function() {
            var e = $.Deferred()
              , t = [{
                name: "contact_name",
                code: "{{contact.name}}"
            }, {
                name: "profile_name",
                code: "{{profile.name}}"
            }, {
                name: "profile_phone",
                code: "{{profile.phone}}"
            }];
            return e.resolve(t),
            e.promise()
        },
        getMailboxes: function(e) {
            var i = t.makeUrl("/account_id/mailboxes");
            return t.request("GET", i, {
                mode: e
            })
        },
        getMailbox: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/" + e);
            return t.request("GET", i)
        },
        getMailboxStatus: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/mailbox_id/status", {
                mailbox_id: e
            });
            return t.request("GET", i)
        },
        getMailboxesStatus: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/status");
            return t.request("GET", i, {
                id: e || []
            })
        },
        enableMailbox: function(e, s) {
            var n = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            })
              , o = i.extend({
                active: !0
            }, s || {});
            return t.request("PATCH", n, o)
        },
        cancelConnection: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/mailbox_id/cancel", {
                mailbox_id: e
            });
            return t.request("POST", i)
        },
        addMailbox: function(e, i, s) {
            var n = t.makeUrl("/account_id/mailboxes");
            return i = i || {},
            i.email = e,
            s && (i.user_id = +s),
            t.request("POST", n, i)
        },
        updateMailbox: function(e, i) {
            var s = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            });
            return i = i || {},
            t.request("PATCH", s, i)
        },
        changeMailboxAuth: function(e, i) {
            var s = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            })
              , n = {
                auth: i
            };
            return t.request("PATCH", s, n)
        },
        changeMailboxOwner: function(e, s) {
            var n, o = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            });
            if (i.isUndefined(s))
                throw new Error("Logic error user_id must be set");
            return n = {
                user_id: s
            },
            t.request("PATCH", o, n)
        },
        disableMailbox: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            })
              , s = {
                active: !1
            };
            return t.request("PATCH", i, s)
        },
        deleteMailbox: function(e) {
            var i = t.makeUrl("/account_id/mailboxes/mailbox_id", {
                mailbox_id: e
            });
            return t.request("DELETE", i)
        }
    }),
    new r
}),
define("lib/components/lists/actions/add_entity", ["require", "jquery", "twig", "underscore", "elements_view", "lib/components/base/modal", "lib/components/base/confirm", "lib/interface/users_select", "lib/components/mail/api_v2", "lib/core/users", "lib/components/base/scroll_saver"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("elements_view"), r = e("lib/components/base/modal"), a = e("lib/components/base/confirm"), l = e("lib/interface/users_select"), c = e("lib/components/mail/api_v2"), d = e("lib/core/users"), u = e("lib/components/base/scroll_saver");
    return t = o.extend({
        options: null,
        vars: {},
        managers: d.get(),
        user_id: null,
        managers_xhr: null,
        modal: null,
        initialize: function(e) {
            var t = this
              , o = AMOCRM.constant("user") || {};
            this.options = i.extend({}, e),
            this.user_id = this.options.user_id || o.id || "",
            this.managers || this.getManagers(),
            this.options.from_list ? this.list = AMOCRM.data.current_view : this.options.from_card && (this.card = AMOCRM.data.card_page),
            this.modal = new r({
                class_name: "modal-list " + this.options.class_name,
                init: s._preload([t.options.template || "/tmpl/common/modal/add_entity/add_entity.twig"], function(e) {
                    t.vars.$modal_body = e,
                    t.vars.template = s({
                        ref: t.options.template || "/tmpl/common/modal/add_entity/add_entity.twig"
                    }),
                    (!t.managers_xhr || 200 == t.managers_xhr.status && 4 == t.managers_xhr.readyState) && t.init(),
                    n.isFunction(t.options.init) && t.options.init.call(t),
                    e.on("change", "[name=next_date]", function() {
                        var t = i(this)
                          , s = moment(t.val(), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date]));
                        s.isValid() ? e.find(".js-modal-accept").removeClass("button-input-disabled") : e.find(".js-modal-accept").addClass("button-input-disabled")
                    }).on("click", ".js-modal-accept:not(.button-input-disabled)", function() {
                        u.savePosition(),
                        "function" == typeof t.options.confirm ? t.options.confirm.call(t) : t.options.from_list || t.options.from_card ? t.options.needConfirm ? t.onModalAccept.apply(t, arguments) : t.doAjax() : this.save_xhr = t.doAjax()
                    })
                }),
                destroy: function() {
                    t.reassign_select && n.isFunction(t.reassign_select.destroy) && t.reassign_select.destroy(),
                    n.isFunction(t.options.destroy) && t.options.destroy.call(t),
                    t.vars.$modal_body && t.vars.$modal_body.off(),
                    this.save_xhr && "undefined" != typeof this.save_xhr.status && this.save_xhr.abort()
                }
            })
        },
        initReassignUsersSelect: function(e, t) {
            var s = i(e.currentTarget);
            e.stopPropagation(),
            this.reassign_select = new l(n.extend({
                el: s,
                id: "reassign-users_select_holder",
                class_name: "modal-reassign__users-select",
                suggest_class_name: "modal-reassign__users-select-suggest",
                input_name: "reassign_user_id",
                select_one: !0,
                not_remove: !0,
                in_modal: !0,
                existing_items: i.map(s.find(".js-multisuggest-item"), function(e) {
                    return {
                        id: i(e).attr("data-id"),
                        title: n.escape(i.trim(i(e).text()))
                    }
                }),
                onInit: function() {
                    this.$list.css({
                        zIndex: 9999
                    })
                }
            }, t))
        },
        onModalAccept: function() {
            var e = this;
            this.modal.hide(),
            this.confirm = new a({
                text: AMOCRM.lang["multiple_modal_add_" + this.options.subEntity + "_confirm_text"],
                accept_text: AMOCRM.lang.button_yes,
                decline_text: AMOCRM.lang.button_no,
                accept: function(t) {
                    e.modal.show(),
                    e.doAjax(),
                    this.destroy()
                }
            })
        },
        getManagers: function() {
            var e = this;
            this.managers_xhr = i.ajax({
                url: "/ajax/get_managers/"
            }).done(function(t) {
                AMOCRM.constant("managers", t),
                e.managers = t,
                e.vars.$modal_body && e.vars.template && e.init()
            })
        },
        init: function() {
            var e = this
              , t = this.managers
              , s = n.without(e.options.exclude, e.user_id.toString());
            s && s.length && (t = n.filter(t, function(e, t) {
                return -1 === n.indexOf(s, t)
            })),
            this.vars.$modal_body.trigger("modal:loaded").html(this.vars.template.render(i.extend({
                title: this.options.title,
                managers: {
                    class_name: "control--select-white modal-body__inner__managers-select",
                    selected: this.user_id,
                    bg_color: "#fff",
                    items: t
                },
                lang: AMOCRM.lang,
                subentity: e.options.subEntity,
                next_date: moment().format(AMOCRM.system.format.date.date)
            }, this.options.template_params))).trigger("modal:centrify"),
            this.vars.$modal_body.on("click", "#reassign-users_select_holder", n.bind(e.initReassignUsersSelect, e))
        },
        doAjax: function(e) {
            var t, i = this, s = {
                responsible_id: i.vars.$modal_body.find("input:hidden").val()
            };
            return e = e || {},
            e.entity = e.entity || this.options.entity,
            e.subEntity = e.subEntity || this.options.subEntity,
            e.id = e.id || this.options.id,
            "customers" === e.subEntity && (s = n.extend(s, {
                next_date: moment(i.vars.$modal_body.find("[name=next_date]").val(), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date])).format("X")
            })),
            i.vars.$modal_body.hide(),
            i.options.id ? n.isArray(i.options.id) ? t = i.options.id : (t = [],
            t.push(i.options.id)) : t = n.map(AMOCRM.data.current_list.where({
                is_checked: !0
            }), function(e) {
                return e.get("id")
            }),
            c.createEntitiesFromThreads(t, e.subEntity, s).done(function(t) {
                n.isFunction(e.callback) ? e.callback() : i.options.from_list ? i._$document.trigger("list:reload") : i.card && i.card.reload ? i.card.reload() : i._$document.trigger("page:reload"),
                i.modal.show(),
                i.modal.showSuccess(),
                i.options.in_modal && i.options.done.resolve(),
                i.options.changing && i.options.changing.resolve()
            }).fail(function() {
                i.modal.showError()
            })
        }
    })
}),
define("lib/components/mail/api", ["require", "underscore", "lib/components/mail/base_api"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/components/mail/base_api"), n = function() {
        t = new s("/ui/api/v1.1"),
        t.loadBackendVersion()
    };
    return i.extend(n.prototype, {
        linkLead: function(e, i) {
            var s = t.makeUrl("/ajax/mail/leads/link")
              , n = {
                lead_id: i,
                thread_id: e
            };
            return t.request("POST", s, n)
        },
        unlinkLead: function(e) {
            var i = t.makeUrl("/ajax/mail/leads/unlink")
              , s = {
                thread_id: e
            };
            return t.request("POST", i, s)
        },
        fetchAttachment: function(e) {
            var i = t.makeUrl("/ajax/mail/attach/" + e);
            return t.request("POST", i)
        },
        getAttachment: function(e) {
            var i = t.makeUrl("/ajax/mail/attach/" + e);
            return t.request("GET", i)
        },
        getAddressesWithoutContact: function(e) {
            var i = t.makeUrl("/ajax/mail/address")
              , s = {
                thread_ids: e,
                type: "without_contact"
            };
            return t.request("GET", i, s)
        },
        linkAddress: function(e, i) {
            var s = t.makeUrl("/ajax/mail/address/link")
              , n = {
                id: i,
                address_id: e
            };
            return t.request("POST", s, n)
        },
        listThreads: function(e, i, s, n) {
            var o = t.makeUrl("/ajax/mail/list")
              , r = {
                page: i || 1,
                folder: e,
                mailbox_id: s
            };
            return t.request("GET", o, r, {}, n || {})
        },
        restoreThreads: function(e) {
            var i = t.makeUrl("/ajax/mail/threads/restore")
              , s = {
                threads: e
            };
            return t.request("POST", i, s)
        },
        deleteThreads: function(e) {
            var s = t.makeUrl("/ajax/mail/threads/delete")
              , n = i.extend({}, {
                threads: e
            });
            return t.request("POST", s, n)
        },
        createEntitiesFromThreads: function(e, s, n) {
            var o = t.makeUrl("/ajax/mail/" + s)
              , r = i.extend({}, n, {
                threads: e
            });
            return t.request("POST", o, r)
        },
        deleteMailbox: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes/" + e + "/delete");
            return t.request("POST", i)
        },
        enableMailbox: function(e, i) {
            var s = t.makeUrl("/ajax/mail/mailboxes/" + e + "/connect");
            return t.request("POST", s, i)
        },
        disableMailbox: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes/" + e + "/disconnect");
            return t.request("POST", i)
        },
        syncMailbox: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes/" + e + "/sync");
            return t.request("POST", i)
        },
        addMailbox: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes");
            return t.request("POST", i, e)
        },
        saveMailbox: function(e, i, s) {
            var n = t.makeUrl("/ajax/mail/mailboxes/" + e + "?save=" + s);
            return t.request("POST", n, i)
        },
        getMailbox: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes/" + e);
            return t.request("GET", i)
        },
        getMailboxes: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes");
            return t.request("GET", i, e)
        },
        getMailboxStatus: function(e) {
            var i = t.makeUrl("/ajax/mail/mailboxes/status")
              , s = {
                id: e
            };
            return t.request("GET", i, s)
        },
        getCounters: function() {
            var e = t.makeUrl("/ajax/mail/mailboxes/counters");
            return t.request("GET", e)
        },
        getThread: function(e, i, s) {
            var n = t.makeUrl("/ajax/mail/threads/" + e);
            return t.request("GET", n, i || {}, {}, s)
        },
        getMessage: function(e) {
            var i = t.makeUrl("/ajax/mail/messages/" + e);
            return t.request("GET", i)
        },
        readThread: function(e, i) {
            var s = t.makeUrl("/ajax/mail/threads/view")
              , n = {
                threads: e
            };
            return t.request("POST", s, n, {}, i)
        },
        shareThread: function(e, s) {
            var n = t.makeUrl("/ajax/mail/threads/share")
              , o = i.extend(s, {
                threads: e
            });
            return t.request("POST", n, o)
        },
        findSettings: function(e) {
            var i = t.makeUrl("/ajax/mail/settings")
              , s = {
                email: e
            };
            return t.request("GET", i, s)
        },
        getThreadReplyData: function(e) {
            var i = t.makeUrl("/ajax/mail/threads/" + e + "/reply");
            return t.request("GET", i)
        },
        composeReply: function(e, i) {
            var s = e ? "threads/" + e + "/reply" : "reply"
              , n = t.makeUrl("/ajax/mail/" + s);
            return t.request("POST", n, i)
        },
        composeMailing: function(e) {
            var i = t.makeUrl("/ajax/mail/compose");
            return t.request("POST", i, e)
        },
        getRecipients: function(e) {
            var i = t.makeUrl("/ajax/mail/threads/recipients");
            return t.request("GET", i, e)
        },
        getMailTemplates: function(e) {
            var i = t.makeUrl("/ajax/mail/templates");
            return t.request("GETJSON", i, e)
        },
        createMailTemplate: function(e) {
            var i = t.makeUrl("/ajax/mail/templates");
            return t.request("POST", i, e)
        },
        updateMailTemplate: function(e) {
            var i = t.makeUrl("/ajax/mail/templates/" + e.id);
            return t.request("POST", i, e)
        },
        removeMailTemplate: function(e) {
            var i = t.makeUrl("/ajax/mail/templates/" + e.id + "/delete");
            return t.request("POST", i, e)
        },
        updateMailTemplatesSort: function(e) {
            var i = t.makeUrl("/ajax/mail/templates/sort");
            return t.request("POST", i, e)
        }
    }),
    new n
}),
define("lib/interface/mail/common/modals", ["require", "jquery", "underscore", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    var t, i = (e("jquery"),
    e("underscore"),
    e("lib/components/base/modal")), s = e("lib/components/base/confirm");
    return t = {
        threadCommonFailModal: function(e) {
            var s, n;
            if (e.responseJSON && e.responseJSON.error_code && (n = e.responseJSON.error_code,
            AMOCRM.lang["mail_error_" + n] && (s = AMOCRM.lang["mail_error_" + n])),
            !s && e.status)
                switch (e.status) {
                case 410:
                    s = AMOCRM.lang.mail_letter_deleted;
                    break;
                case 403:
                    s = AMOCRM.lang.mail_letter_view_forbidden;
                    break;
                case 404:
                    s = AMOCRM.lang.page_404_caption
                }
            s ? (new i).showError(s, !1) : t.commonErrorConfirm()
        },
        commonErrorConfirm: function() {
            new s({
                class_name: "modal-list",
                template: "/tmpl/mail/modal/connection_error.twig"
            })
        }
    }
}),
define("lib/interface/mail/mailbox_suggest", ["require", "jquery", "lib/common/fn", "underscore", "twig", "backbone", "lib/core/view", "lib/components/mail/api_v2", "lib/interface/mail/common/modals"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/common/fn"), n = e("underscore"), o = e("twig"), r = e("backbone"), a = e("lib/core/view"), l = e("lib/components/mail/api_v2"), c = e("lib/interface/mail/common/modals"), d = 13, u = 32, h = 9, _ = 8, p = 46, m = 37, f = 39, g = 27, b = {}, v = /[?:\<+](.*)[?:\>+]/g, y = /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[\da-z](?:[\da-z-_]*[\da-z])?\.)+[a-z]{2,}$/i;
    return b[u] = function(e, t) {
        var i = t.$input.prop("selectionStart") === t.value.length;
        return (y.test(t.value.trim()) || t.value.match(v)instanceof Array) && i ? (e.preventDefault(),
        this.parseMailboxInput({
            id: t.cmid || ++this.counter,
            value: t.value,
            edit: !!t.cmid
        })) : void 0
    }
    ,
    b[_] = function(e, t) {
        var s = i(e.target)
          , n = s.closest(".mail-suggest__list__item")
          , o = n.data("id");
        t.value.length || this.deletion_blocked || (n.hasClass("multiple-suggest__list__input") ? this.items_collection.remove(this.items_collection.last()) : (this.items_collection.remove(this.items_collection.get(o)),
        this.onSuggestFocus()),
        this.deletion_blocked = !0)
    }
    ,
    b[g] = function(e, t) {
        var s = i(e.target)
          , n = s.closest(".mail-suggest__list__item");
        n.hasClass("mail-suggest__list__item_in-edit") && (e.stopImmediatePropagation(),
        this.active_edits = !1,
        this.updateMailboxItem(this.items_collection.get(t.cmid)),
        this._findElem("mail_suggest__list_item_by_id", t.cmid).focus())
    }
    ,
    b[m] = function(e, t) {
        var s = i(e.target)
          , n = s.closest(".mail-suggest__list__item");
        t.value.length || n.prev(".mail-suggest__list__item").focus()
    }
    ,
    t = a.extend({
        enter_keys: [d, h],
        mailbox_item_template: {
            ref: "/tmpl/mail/modal/mailbox_suggest_item.twig"
        },
        mailbox_input_template: {
            ref: "/tmpl/controls/suggest.twig"
        },
        events: {
            "click .multiple-suggest__list": "onSuggestFocus",
            "click .mail-suggest__list__item:not(.multiple-suggest__list__input)": "clickToEditMailbox",
            "keydown .mail-suggest__list__item:focus": "onListItemKeydown",
            "click .tag-close": "clickToRemoveMailbox",
            "keydown .mail-suggest__input": "onMailboxKeydown",
            "keyup .mail-suggest__input": "onMailboxKeyup",
            "paste .mail-suggest__input": "onMailboxPaste",
            "input .mail-suggest__input": "autoStretchInput",
            "blur .mail-suggest__input": "onMailboxBlur",
            "input .mail-suggest__input:not(.mail-suggest__input_in-edit)": "onMailboxInput",
            "mousedown .js-control--suggest--list": "onControlSuggestClickDown",
            "touchstart .js-control--suggest--list": "onControlSuggestClickDown",
            "suggest:changed .control--suggest--input": "onSuggestChanged",
            "suggest:loaded .js-suggest-contact-company-pei": "peiSuggestLoaded"
        },
        _selectors: function() {
            return {
                mail_suggest__input: ".mail-suggest__input",
                multiple_suggest__list__input: ".multiple-suggest__list__input",
                mail_suggest__list_items: ".mail-suggest__list__item[data-id]",
                mail_suggest__list_item_by_id: ".mail-suggest__list__item[data-id=%s]",
                error_tooltip: ".js-error-tooltip",
                error_element: ".mail-suggest__list__item_invalid:first"
            }
        },
        initialize: function(e) {
            a.prototype.initialize.call(this),
            this.options = e || {},
            this.items_collection = new r.Collection,
            this.options.items && this.setItems(this.options.items),
            this._$window.on("resize" + this.ns, n.bind(function() {
                this.autoStretchInput(),
                this.processEmailInputError()
            }, this)),
            this.counter = this.items_collection.length,
            this.listenTo(this.items_collection, "add", this.renderMailboxItem),
            this.listenTo(this.items_collection, "remove", this.removeMailboxItem),
            this.listenTo(this.items_collection, "reset", this.resetMailboxItems),
            this.listenTo(this.items_collection, "model:change", this.updateMailboxItem),
            this.listenTo(this.items_collection, "all", this.autoStretchInput),
            this.render().then(n.bind(function() {
                this.autoStretchInput(),
                this.autoStretchTooltip()
            }, this))
        },
        destroy: function() {
            this.items_collection.reset(),
            a.prototype.destroy.call(this, !0)
        },
        setItems: function(e) {
            var t = [];
            n.each(e, function(i) {
                i.id = n.indexOf(e, i) + 1,
                i.name = i.name ? i.name : "",
                t.push(new r.Model(i))
            }),
            this.items_collection.reset(t)
        },
        render: o._preload(["/tmpl/common/modal/mailbox_suggest.twig"], "_render"),
        _render: function() {
            var e, t = void 0 === this.options.search_contacts ? !0 : this.options.search_contacts, s = {
                placeholder: this.options.placeholder || "",
                input_class_name: "js-suggest-contact-company-pei mail-suggest__input js-form-changes-skip",
                data_type: this.options.data_type,
                mailboxes: this.items_collection.toJSON(),
                class_name: this.options.class_name
            };
            t && (s.ajax = {
                url: "/private/ajax/search.php",
                params: "type=contacts&q=#q#&query_type=email"
            }),
            e = i(o({
                ref: "/tmpl/mail/modal/mailbox_suggest.twig"
            }).render(s)),
            this.setElement(e),
            this.options.$container.append(e),
            this._elem("mail_suggest__input").autosizeInput()
        },
        onSuggestFocus: function(e) {
            var t = e ? i(e.target) : null;
            e && (t.closest(".mail-suggest__list__item").length || t.hasClass("mail-suggest__list__item") || this.active_edits) ? t.hasClass("js-error-tooltip") && this._elem("mail_suggest__input").focus() : this._elem("mail_suggest__input").focus()
        },
        processEmailInputError: function() {
            var e = this._findElem("error_element")
              , t = this._elem("error_tooltip")
              , i = e.position();
            e.length && !e.hasClass("mail-suggest__list__item_in-edit") ? (i.left += e.outerWidth(),
            i.top += t.outerHeight() - e.outerHeight(),
            t.css(i),
            t.visible() ? t.removeClass("left") : (i.left = e.position().left - t.outerWidth(),
            i.left -= parseInt(t.css("margin-right")),
            t.css("left", i.left).addClass("left")),
            t.show().addClass("showed")) : t.removeClass("showed").hide()
        },
        onMailboxKeydown: function(e) {
            var t = i(e.target)
              , s = t.closest(".mail-suggest__list__item")
              , o = s.find(".control--suggest--list--item-selected")
              , r = s.data("id")
              , a = t.val();
            return n.indexOf(this.enter_keys, e.keyCode) >= 0 ? (e.preventDefault(),
            e.stopPropagation(),
            o.length ? this.onSuggestChanged(e, o) : this.parseMailboxInput({
                id: r || ++this.counter,
                value: a,
                edit: !!r
            })) : n.isFunction(b[e.keyCode]) ? b[e.keyCode].call(this, e, {
                value: a,
                cmid: r,
                $input: t
            }) : void 0
        },
        onMailboxKeyup: function(e) {
            e.keyCode === _ && (this.deletion_blocked = !1)
        },
        onMailboxInput: function(e) {
            var t = i(e.target);
            this.clipboard_paste && t.val().length && (this.clipboard_paste = !1,
            this._elem("mail_suggest__input").val("").trigger("input"))
        },
        onMailboxPaste: function(e) {
            var t, s, o = this, r = i(e.target), a = r.val(), l = e.originalEvent.clipboardData.getData("Text");
            a.length || (this.clipboard_paste = !0,
            n.each(this.parseClipboardInput(l), function(e) {
                t = o.items_collection.any(function(t) {
                    return t.get("email").toLowerCase() === e.email.toLowerCase()
                }),
                t || (s = !y.test(e.email),
                o.items_collection.add({
                    id: ++o.counter,
                    name: e.name || "",
                    email: e.email,
                    invalid: s
                }),
                s && o.processEmailInputError())
            }),
            "ext_addresses" === this.options.data_type && o.saveChanges(),
            AMOCRM.is_touch_device || this.onSuggestFocus())
        },
        onControlSuggestClickDown: function(e) {
            this.click_down = !0,
            setTimeout(n.bind(function() {
                this.click_down = !1
            }, this), 100)
        },
        onMailboxBlur: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(".mail-suggest__list__item")
              , n = t.val().trim()
              , o = s.data("id");
            return !this.click_down && (s.hasClass("mail-suggest__list__item_in-edit") && this.active_edits || s.hasClass("multiple-suggest__list__input")) ? this.parseMailboxInput({
                id: o || ++this.counter,
                value: n,
                edit: !!o,
                blur: !0
            }) : void 0
        },
        parseClipboardInput: function(e) {
            for (var t, i = /(?:"?([A-Z][^<"]+)"?\s*)?<?([^>\s,;]+)/g, s = []; t = i.exec(e); )
                t[1] && (t[1] = t[1].trim()),
                s.push({
                    name: t[1],
                    email: t[2]
                });
            return s
        },
        parseMailboxInput: function(e) {
            var t = e.value.trim()
              , i = t.match(v)instanceof Array ? t.match(v).shift().replace(/[\<\>]/gi, "") : ""
              , s = i.length ? i : t
              , n = i.length ? t.replace(t.match(v).shift(), "").trim() : ""
              , o = y.test(s);
            return this.processMailboxInput({
                id: e.id,
                name: n,
                email: s,
                len: t.length,
                invalid: !o,
                edit: e.edit,
                blur: e.blur
            })
        },
        processMailboxInput: function(e) {
            var t, i;
            this.active_edits = !1,
            t = this.items_collection.any(function(t) {
                return t.id !== e.id ? t.get("email").toLowerCase() === e.email.toLowerCase() : void 0
            }),
            e.edit ? (i = this.items_collection.get(e.id),
            t || !e.len ? this.items_collection.remove(i) : (i.set(e),
            this.items_collection.trigger("model:change", i))) : t || !e.len ? this._elem("mail_suggest__input").val("").trigger("input") : this.items_collection.add(e),
            this.processEmailInputError(),
            "ext_addresses" === this.options.data_type && this.old_value !== e.email && this.saveChanges(),
            AMOCRM.is_touch_device || e.blur || this.onSuggestFocus()
        },
        saveChanges: function() {
            var e = this
              , t = [];
            this.items_collection.each(function(e) {
                e.get("invalid") || t.push(e.get("email"))
            }),
            l.updateExternalAddresses(t).done(n.bind(function(t) {
                e.items_collection.each(function(i) {
                    t && n.has(t, "invalid_emails") && !n.isEmpty(t.invalid_emails) && n.each(t.invalid_emails, function(t) {
                        t === i.get("email") && (i.set("invalid", !0),
                        e.items_collection.trigger("model:change", i))
                    }),
                    i.get("invalid") || i.set("saved", !0)
                })
            })).fail(n.bind(function() {
                c.commonErrorConfirm()
            }))
        },
        clickToEditMailbox: function(e) {
            var t, s, n = i(e.currentTarget), r = n.closest(".mail-suggest__list__item"), a = r.data("id"), l = this.items_collection.get(a), c = l.get("name"), d = c ? c + " <" + l.get("email") + ">" : l.get("email");
            this.old_value = d,
            this.active_edits = !0,
            this.edit_cmid = a,
            r.hasClass("mail-suggest__list__item_in-edit") || r.hasClass("multiple-suggest__list__input") || (t = void 0 === this.options.search_contacts ? !0 : this.options.search_contacts,
            s = {
                placeholder: "",
                input_class_name: "js-suggest-contact-company-pei mail-suggest__input js-form-changes-skip",
                type: "email",
                styled_input: !0
            },
            t && (s.ajax = {
                url: "/private/ajax/search.php",
                params: "type=contacts&q=#q#&query_type=email"
            }),
            r.html(o(this.mailbox_input_template).render(s)).addClass("mail-suggest__list__item_in-edit").find("input").val(d).select().autosizeInput(),
            this.processEmailInputError(),
            this.autoStretchInput())
        },
        clickToRemoveMailbox: function(e) {
            var t = i(e.target).closest(".mail-suggest__list__item")
              , s = this.items_collection.get(t.data("id"));
            e.stopPropagation(),
            this.items_collection.remove(s)
        },
        renderMailboxItem: function(e, t) {
            n.isUndefined(t) && (t = !0),
            this._elem("multiple_suggest__list__input").before(o(this.mailbox_item_template).render(e.toJSON())),
            t && this._elem("mail_suggest__input").val("").trigger("input")
        },
        updateMailboxItem: function(e) {
            this._findElem("mail_suggest__list_item_by_id", e.id).replaceWith(o(this.mailbox_item_template).render(e.toJSON())),
            this.autoStretchInput()
        },
        removeMailboxItem: function(e) {
            this._findElem("mail_suggest__list_item_by_id", e.id).remove(),
            this.processEmailInputError(),
            "ext_addresses" === this.options.data_type && e.get("saved") && this.saveChanges(),
            this.active_edits = !1
        },
        resetMailboxItems: function() {
            this._findElem("mail_suggest__list_items").remove(),
            this.items_collection.each(function(e) {
                this.renderMailboxItem(e, !1)
            }, this),
            this.active_edits = !1,
            this._elem("mail_suggest__input").val("").trigger("input")
        },
        onListItemKeydown: function(e) {
            var t, s = i(e.target);
            e.keyCode === m ? s.prev(".mail-suggest__list__item").focus() : e.keyCode === f ? this.focusNext(s) : e.keyCode === d ? (e.preventDefault(),
            e.stopImmediatePropagation(),
            s.click()) : (e.keyCode === p || e.keyCode === _) && (e.preventDefault(),
            e.stopImmediatePropagation(),
            this.focusNext(s),
            t = this.items_collection.get(s.data("id")),
            this.items_collection.remove(t))
        },
        focusNext: function(e) {
            var t = e.next(".mail-suggest__list__item");
            t.hasClass("multiple-suggest__list__input") ? t.find("input").focus() : t.focus()
        },
        autoStretchInput: function() {
            var e, t, i, n, o, r, a, l = this._elem("mail_suggest__input");
            l.css("min-width", 5),
            e = l.offset() || {},
            t = e.left,
            i = this.$el.offset().left,
            n = this.$el.outerWidth(),
            o = n - (t - i) - 15,
            r = l.attr("placeholder"),
            r && (a = s.getTextWidth(r, l.css("font")),
            a > o && (o = a)),
            this._elem("mail_suggest__input").css("min-width", o)
        },
        autoStretchTooltip: function() {
            var e = this._elem("error_tooltip");
            e.css("width", e.outerWidth() + 1)
        },
        peiSuggestLoaded: function(e, t, s) {
            var n = []
              , o = ""
              , r = "email";
            "ok" === t.status ? (i.each(t.result, function(e, t) {
                o = t.name + (t.company_name ? ', <span style="color: rgba(103,110,121,0.502)">' + t.company_name + "</span>" : ""),
                t[r] && t[r].length && (o += '<div class="suggest-item-pei">' + t[r].join(", ") + "</div>"),
                n.push({
                    id: t.id,
                    title: t.name,
                    text: o
                })
            }),
            s.trigger("suggest:reset", [n])) : s.trigger("suggest:reset", [[]])
        },
        onSuggestChanged: function(e, t) {
            var i = t.closest(".mail-suggest__list__item")
              , s = this.active_edits ? this.edit_cmid : i.data("id")
              , n = t.find(".suggest-item-pei").text()
              , o = t.children(".control--suggest--list--item-inner").prop("title");
            return this.processMailboxInput({
                id: s || ++this.counter,
                name: o || "",
                email: n,
                invalid: !y.test(n),
                len: !0,
                edit: !!s
            })
        }
    })
}),
define("lib/interface/mail/mixins/insert_marker", ["require", "jquery", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("lib/common/fn");
    return {
        insertMarker: function(e, s) {
            var n = t(e.target)
              , o = n.text()
              , r = s || t(this._selector("template_content"));
            if (r) {
                var a = r.prop("selectionStart")
                  , l = r.val()
                  , c = l.substring(0, a)
                  , d = l.substring(a, l.length);
                r.val(c + o + d).trigger("change"),
                i.setCursorPosition(r, c.length + o.length)
            }
        }
    }
}),
define("lib/components/lists/actions/write_mail", ["require", "jquery", "underscore", "twig", "lib/components/base/form", "cocktail", "backbone", "lib/common/fn", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/mail/api", "lib/components/base/scroll_saver", "lib/interface/mail/mailbox_suggest", "lib/interface/mail/mixins/insert_marker"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/base/form"), r = e("cocktail"), a = e("backbone"), l = e("lib/common/fn"), c = e("lib/components/base/modal"), d = e("lib/components/base/confirm"), u = e("lib/components/mail/api"), h = e("lib/components/base/scroll_saver"), _ = e("lib/interface/mail/mailbox_suggest"), p = e("lib/interface/mail/mixins/insert_marker"), m = "write_mail";
    return t = o.View.extend({
        options: null,
        modal: null,
        send_locked: !1,
        subviews: {},
        defaults: {},
        events: s.extend({}, o.View.prototype.events || {}, {
            "click .js-modal-accept": "onSendClick",
            "controls:change .modal_write-mail__templates-select": "changeTemplate",
            "controls:change .modal_write-mail__mailboxes-select": "onMailboxChange",
            "click .modal_write-mail__templates-select .control--select--list-opened": "onTemplateSelect",
            "click .mail-action__tag": "insertMarker",
            "click .js-navigate-mailboxes": "openMailboxSettings"
        }),
        _selectors: function() {
            return {
                templates_select: ".modal_write-mail__templates-select",
                templates_select_input: ".modal_write-mail__templates-select input",
                mailboxes_select_input: ".modal_write-mail__mailboxes-select input",
                mailbox_form__error_select: ".mailbox-form__error-select",
                controls_select_input: ".control--select--input",
                template_content: ".mail-action__template-content",
                template_subject: "#template-subject",
                template_content_html: "#template-content-html",
                recipients_container: ".mail-action__settings-item_recipients .mail-action__settings-input",
                ccopy_container: ".mail-action__settings-item_ccopy .mail-action__settings-input",
                mail_suggest: ".mail-suggest",
                send_button: ".js-modal-accept"
            }
        },
        initialize: function(e) {
            o.View.prototype.initialize.apply(this, arguments),
            this.options = s.extend({}, e),
            this.sub_entity = this.options.subEntity || this.options.sub_entity,
            this.thread_id = this.options.id || [],
            this.options.from_list ? (this.list = AMOCRM.data.current_view,
            this.selected_mailbox = this.list.mailbox_id) : this.options.from_card && (this.card = AMOCRM.data.card_page,
            this.sub_entity = "reply",
            this.selected_mailbox = e.box_id),
            this.initModal()
        },
        initModal: function() {
            var e = this;
            this.modal = new c({
                class_name: "modal-list modal_write-mail modal_mail-action",
                init: function(t) {
                    e.setElement(t),
                    e._makeRequest()
                },
                destroy: function(t) {
                    return e.force_exit || !e.form_modified && !e.recipients_modified ? (e.destroy(),
                    s.invoke(e.subviews, "destroy"),
                    AMOCRM.router.preventPageChange(!1, m),
                    e.compose_xhr && "undefined" != typeof e.compose_xhr.status && e.compose_xhr.abort(),
                    s.isFunction(t) && t(),
                    void (e.options.in_modal && s.isFunction(e.options.threadModalShow) && e.options.threadModalShow())) : (i(".modal.modal-list.modal-leave-confirm.js-modal-confirm").length || AMOCRM.router.confirmPageChange(e._confirmModalConfig, s.noop),
                    !1)
                }
            })
        },
        _makeRequest: function() {
            this.preInit()
        },
        preInit: function() {
            i.when(this.templates_xhr = this.getTemplatesList(), this.mailboxes_xhr = this.getMailboxesList(), this.reply_data_xhr = "reply" === this.sub_entity ? this.getReplyData() : this.getRecipientsList()).then(s.bind(function() {
                this.init()
            }, this))
        },
        init: function() {
            var e = ["recipients"];
            this.initCollections(),
            this.render().then(s.bind(function() {
                this.watchForm(),
                this.changeTemplate(),
                this.onMailboxChange(),
                this.$el.trigger("modal:centrify"),
                this.initPagePreventer(),
                AMOCRM.router.preventPageChange(!1, m),
                "reply" === this.sub_entity && e.push("ccopy"),
                s.each(e, s.bind(function(e) {
                    this.subviews[e] = new _({
                        $container: this._findElem(e + "_container"),
                        items: this[e],
                        class_name: "mail-suggest_" + e,
                        data_type: e
                    }),
                    this.defaults[e] = JSON.stringify(this.subviews[e].items_collection.toJSON()),
                    this.listenTo(this.subviews[e].items_collection, "remove", this.onMailboxCollectionChange),
                    this.listenTo(this.subviews[e].items_collection, "add", this.onMailboxCollectionChange)
                }, this))
            }, this))
        },
        initCollections: function() {
            var e, t, i = this, n = "reply" === this.sub_entity;
            this.templates_collection = new a.Collection,
            this.mailboxes_collection = new a.Collection,
            (n || !this.templates.length) && (e = {
                name: AMOCRM.lang.mail_template_empty_name,
                id: "blank",
                subject: n ? this.reply_data.subject : "",
                content: n ? this.reply_data.content : ""
            },
            this.templates.unshift(e)),
            this.templates && s.each(i.templates, function(e) {
                e.option = e.name,
                i.templates_collection.push(new a.Model(e))
            }),
            this.mailboxes.length || (t = {
                id: 0,
                email: AMOCRM.lang.no_available_mailboxes
            },
            this.mailboxes = [t]),
            this.mailboxes && s.each(i.mailboxes, function(e) {
                e.option = e.email,
                i.mailboxes_collection.push(new a.Model(e))
            })
        },
        render: n._preload(["/tmpl/mail/modal/write_mail.twig"], "_render"),
        _render: function() {
            var e = 0
              , t = this.mailboxes_collection.get(this.selected_mailbox)
              , i = this.mailboxes_collection.first();
            s.isUndefined(t) ? s.isUndefined(i) || (e = i.get("id")) : e = t.get("id"),
            this.$el.trigger("modal:loaded").html(n({
                ref: "/tmpl/mail/modal/write_mail.twig"
            }).render({
                markers: this.markers,
                reply: "reply" === this.sub_entity,
                templates: {
                    class_name: "modal_write-mail__templates-select",
                    items: this.templates_collection.toJSON()
                },
                mailboxes: {
                    class_name: "modal_write-mail__mailboxes-select",
                    selected: e,
                    items: this.mailboxes_collection.toJSON()
                }
            }))
        },
        initPagePreventer: function() {
            this._confirmModalConfig = {
                message: AMOCRM.lang.write_mail_on_modal_close,
                gray_button: !0,
                accept: s.bind(function(e) {
                    this.force_exit = !0,
                    this.modal.destroy(),
                    s.isFunction(e) && e()
                }, this)
            },
            AMOCRM.router.registerPreventConfig(this._confirmModalConfig, m)
        },
        watchForm: function() {
            var e = this;
            this._findElem("controls_select_input").addClass("js-form-changes-skip"),
            this.initModelFromForm(),
            this._elem("send_button").trigger("button:save:enable"),
            this.model.on("has_changes", function() {
                e.form_modified = !0,
                AMOCRM.router.preventPageChange(!0, m)
            }).on("has_reverted", function() {
                e.form_modified = !1,
                AMOCRM.router.preventPageChange(!1, m)
            })
        },
        getTemplatesList: function() {
            var e = this
              , t = {
                render: !0,
                mode: this.sub_entity,
                template_params: {
                    "contact.name": this.options.recipient_name
                }
            };
            return u.getMailTemplates(t).done(function(t) {
                e.templates = t.items,
                e.markers = t.markers
            }).fail(function(t) {
                e.renderErrorModal(t, !1)
            })
        },
        getMailboxesList: function() {
            var e = this;
            return u.getMailboxes({
                list: "short",
                active: 1
            }).done(function(t) {
                e.mailboxes = t.items
            }).fail(function(t) {
                e.renderErrorModal(t, !1)
            })
        },
        getRecipientsList: function() {
            var e = this
              , t = {
                type: "income",
                threads: this.thread_id
            };
            return u.getRecipients(t).done(function(t) {
                e.recipients = t
            }).fail(function(t) {
                e.renderErrorModal(t, !1)
            })
        },
        getReplyData: function() {
            var e, t = this, i = this.options.recipient_name, s = this.options.recipient_email;
            return i && s ? (e = {
                subject: "",
                content: "",
                ccopy: [],
                to: [{
                    email: s,
                    name: i
                }]
            },
            this.resolveRecipients(e)) : u.getThreadReplyData(this.thread_id).done(function(e) {
                t.resolveRecipients(e)
            }).fail(function(e) {
                t.renderErrorModal(e, !1)
            })
        },
        resolveRecipients: function(e) {
            this.recipients = e.to,
            this.ccopy = e.cc,
            this.reply_data = e
        },
        onMailboxCollectionChange: function() {
            var e = this
              , t = this.subviews.recipients.items_collection.length
              , i = "reply" === this.sub_entity ? this.subviews.ccopy.items_collection.length : null
              , n = t + i
              , o = ["recipients"];
            "reply" === this.sub_entity && o.push("ccopy"),
            this._elem("send_button").trigger("button:save:" + (n ? "enable" : "disable")),
            this.send_locked = !n,
            s.every(o, function(t) {
                return e.defaults[t] === JSON.stringify(e.subviews[t].items_collection.toJSON())
            }) ? (this.recipients_modified = !1,
            AMOCRM.router.preventPageChange(!(!this.recipients_modified && !this.form_modified), m)) : (this.recipients_modified = !0,
            AMOCRM.router.preventPageChange(!0, m))
        },
        onMailboxChange: function() {
            var e = +this._elem("mailboxes_select_input").val()
              , t = this.mailboxes_collection.get(e);
            s.isUndefined(t) && (t = this.mailboxes_collection.first());
            var i = t.get("smtp");
            "undefined" != typeof e && 0 === e ? (this._elem("send_button").trigger("button:save:disable"),
            this.send_locked = !0) : (this._elem("mailbox_form__error_select").toggle(!i),
            this.send_locked = !i,
            this._elem("send_button").trigger("button:save:" + (i ? "enable" : "disable")))
        },
        changeTemplate: function() {
            var e, t;
            e = this._findElem("controls_select_input").val(),
            t = this.templates_collection.get(e),
            this._elem("template_subject").val(l.unescapeHTML(t.get("subject"))).trigger("input"),
            this._elem("template_content").val(t.get("content")).trigger("input").trigger("controls:textarea:autosize"),
            t.get("content_html") ? this._elem("template_content_html").prop("checked", !0).trigger("change") : this._elem("template_content_html").attr("checked", !1).trigger("change"),
            this.form_modified = !1,
            this.model.updateDefaults()
        },
        onTemplateSelect: function(e) {
            var t = i(e.target)
              , n = t.closest(".control--select--list--item").data("value");
            return this.form_modified ? (this.confirm = new d({
                text: AMOCRM.lang.write_mail_on_template_select,
                accept: s.bind(function() {
                    this.confirm.destroy(),
                    this._elem("templates_select_input").val(n).trigger("controls:change:visual").trigger("controls:change")
                }, this),
                decline: s.bind(function() {
                    return this.confirm.destroy(),
                    !1
                }, this)
            }),
            !1) : void 0
        },
        onSendClick: function(e) {
            if (this.send_locked)
                return !1;
            var t = "reply" === this.sub_entity ? this.subviews.ccopy.items_collection.where({
                invalid: !0
            }).length : !1;
            if (this.subviews.recipients.items_collection.where({
                invalid: !0
            }).length || t)
                return this.modal.showError(AMOCRM.lang.write_mail_incorrect_recipients);
            var i = s.extend(this.model.toJSON(), {
                from: +this._elem("mailboxes_select_input").val(),
                to: this.subviews.recipients.items_collection.toJSON()
            });
            "reply" === this.sub_entity && (i.cc = this.subviews.ccopy.items_collection.toJSON()),
            h.savePosition(),
            this._elem("send_button").trigger("button:load:start"),
            this.send_locked = !0,
            this.compose_xhr = this.composeReply(e, i)
        },
        composeReply: function(e, t) {
            var i, n = this, o = "reply" === this.sub_entity ? !0 : !1;
            if (o) {
                var r = this.thread_id.length ? this.thread_id.pop() : null;
                i = u.composeReply(r, t)
            } else
                i = u.composeMailing(t);
            return i.always(function() {
                n.$el.show(),
                n._elem("send_button").trigger("button:load:stop")
            }).done(function(t) {
                n.force_exit = !0,
                AMOCRM.router.preventPageChange(!1, m),
                t.message = AMOCRM.lang.write_mail_sent_success,
                n.modal.show(),
                n.modal.showSuccess(t.message),
                s.isFunction(e.callback) ? e.callback() : n.options.in_modal ? s.isFunction(n.options.destroyFromReply) && n.options.destroyFromReply() : n.options.from_list ? n._$document.trigger("list:reload") : n.card && n.card.reload ? n.card.reload() : n._$document.trigger("page:reload"),
                s.isFunction(e.success) && (n.force_exit = !0)
            }).fail(function(e) {
                n.renderErrorModal(e),
                n.send_locked = !1
            })
        },
        openMailboxSettings: function() {
            var e = +this._elem("mailboxes_select_input").val();
            this.force_exit = !0,
            this.modal.destroy(),
            s.isFunction(this.options.setNeedReload) && this.options.setNeedReload(),
            this._$document.trigger("mailbox:view:settings", e)
        },
        renderErrorModal: function(e, t) {
            var i;
            if (t = "boolean" != typeof t ? !0 : t,
            e.responseJSON)
                switch (e.responseJSON.error) {
                case 410:
                    i = AMOCRM.lang.mail_letter_deleted,
                    t = !1;
                    break;
                case 403:
                    i = AMOCRM.lang.mail_letter_view_forbidden,
                    t = !1
                }
            this.modal.showError(i, t)
        }
    }),
    r.mixin(t, p),
    t
}),
define("lib/components/lists/actions/accept_unsorted", ["require", "jquery", "underscore", "elements_view", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    var t, i = (e("jquery"),
    e("underscore")), s = e("elements_view");
    e("lib/components/base/modal"),
    e("lib/components/base/confirm");
    return t = s.extend({
        initialize: function(e) {
            e = i.extend({
                entity: "unsorted",
                from_list: !0,
                id: [],
                params: {},
                collection: {}
            }, e),
            this.collection = e.collection,
            this.collection.accept && i.isFunction(this.collection.accept) && this.collection.accept()
        }
    })
}),
define("lib/components/lists/actions/decline_unsorted", ["require", "jquery", "underscore", "elements_view", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    var t, i = (e("jquery"),
    e("underscore")), s = e("elements_view");
    e("lib/components/base/modal"),
    e("lib/components/base/confirm");
    return t = s.extend({
        initialize: function(e) {
            e = i.extend({
                entity: "unsorted",
                from_list: !0,
                id: [],
                params: {},
                collection: {}
            }, e),
            this.collection = e.collection,
            this.collection.decline && i.isFunction(this.collection.decline) && this.collection.decline()
        }
    })
}),
define("lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up", ["require", "underscore", "twig", "lib/components/base/modal"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/components/base/modal");
    return {
        linkClick: function(e) {
            var n, e = e || this.model, o = e.get("data") || {};
            this.$el.trigger("unsorted:link:click"),
            o.contacts = o.contacts || [],
            o.contacts[0] = o.contacts[0] || {},
            n = new s({
                class_name: "modal-list",
                focus_element: "#unsorted_link_suggest",
                init: function(s) {
                    var n, o, r, a, l = i({
                        ref: "/tmpl/common/modal/unsorted_linking_up/modal.twig"
                    }), c = i({
                        ref: "/tmpl/common/modal/unsorted_linking_up/suggest_list_item.twig"
                    }), d = {}, u = this;
                    d.lang = AMOCRM.lang || {},
                    d.suggest = {
                        name: "unsorted_leads_search",
                        id: "unsorted_link_suggest",
                        class_name: " linkup-unsorted-suggest ",
                        type: "leads_concat",
                        ajax: {
                            url: "/ajax/unsorted/linkup/",
                            params: "t=unsorted&q=#q#"
                        }
                    },
                    s.trigger("modal:loaded").html(l.render(d)).on("suggest:changed #unsorted_link_suggest", function(t, i) {
                        var n = i.data("value-id")
                          , o = i.data("contact-id")
                          , r = i.data("value-type");
                        s.hide(),
                        s.find("#unsorted--linkup-block").hide(),
                        e.link([{
                            id: n,
                            contact_id: o,
                            type: r
                        }]),
                        u.destroy()
                    }).on("suggest:loaded #unsorted_link_suggest", function(e, i, s) {
                        o = [],
                        i = i || {},
                        "ok" === i.status && i.result.length > 0 && (n = 0,
                        t.each(i.result, function(e) {
                            r = {
                                2: AMOCRM.lang.Leads,
                                12: AMOCRM.lang.Customers
                            },
                            e.type !== n && (n = e.type,
                            o.push({
                                id: 0,
                                title: r[n],
                                text: c.render({
                                    text: r[n],
                                    type: "head"
                                }),
                                custom_class: "js--suggest-item--not-selectable"
                            })),
                            e.contact = e.contact || {},
                            a = e.contact,
                            d = {
                                id: e.id,
                                title: [e.name, a.name, a.phone, a.email].join(", "),
                                custom_class: e.custom_class,
                                contact_id: a.id,
                                type: e.type,
                                text: c.render({
                                    text: e.name,
                                    type: "item",
                                    contact: a
                                })
                            },
                            o.push(d),
                            s.trigger("suggest:reset", [o, '<li data-value-id="<%= data.id %>" data-value-type="<%= data.type %>" data-contact-id="<%= data.contact_id %>" class="control--suggest--list--item <%= data.custom_class %>">                       <span class="control--suggest--list--item-inner" title="<%= data.title %>"><%= data.highlighted_text %></span>                       </li>'])
                        }))
                    }).trigger("modal:centrify")
                }
            })
        },
        linkFailed: function(e) {
            this.failedModal(e),
            this.loadStop(),
            this.$el.trigger("unsorted:link:failed")
        }
    }
}),
define("lib/components/lists/actions/link_unsorted", ["require", "underscore", "lib/core/view", "cocktail", "lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/core/view"), n = e("cocktail"), o = e("lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up");
    return t = s.extend({
        initialize: function(e) {
            e = i.extend({
                entity: "unsorted",
                from_list: !0,
                id: [],
                params: {},
                collection: {}
            }, e),
            this.collection = e.collection,
            i.each(e.id, function(t) {
                this.model = e.collection.findWhere({
                    id: t
                })
            }, this),
            n.mixin(this, o),
            this.linkClick(this.model)
        }
    })
}),
define("lib/components/lists/actions/delete_thread", ["require", "jquery", "twig", "lib/components/base/modal", "lib/components/mail/api", "lib/components/base/scroll_saver"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("lib/components/base/modal"), o = e("lib/components/mail/api"), r = e("lib/components/base/scroll_saver");
    return t = function(e) {
        var t = this
          , o = AMOCRM.data.current_list.where({
            is_checked: !0
        });
        this.options = i.extend({}, e),
        this.modal = new n({
            class_name: "modal-list",
            init: s._preload(["/tmpl/common/modal/delete.twig"], function(e) {
                var i = AMOCRM.lang.multiple_delete_thread_invite
                  , n = AMOCRM.lang.multiple_delete_thread_description
                  , a = [];
                t.$modal_body = e,
                a.push({
                    text: i.replace("#PLACEHOLDER#", o.length > 1 ? AMOCRM.lang.multiple_delete_this_mails : "Ђ" + o[0].get("subject") + "ї")
                }),
                a.push({
                    text: n.replace("#PLACEHOLDER#", o.length > 1 ? AMOCRM.lang.multiple_delete_this_mails2 : " Ђ" + o[0].get("subject") + "ї")
                }),
                t.$modal_body.trigger("modal:loaded").html(s({
                    ref: "/tmpl/common/modal/delete.twig"
                }).render({
                    caption: AMOCRM.lang["delete_" + AMOCRM.data.current_entity + (o.length > 1 ? "s" : "")],
                    message: a,
                    accept_text: AMOCRM.lang.delete_mails_confirm,
                    lang: AMOCRM.lang
                })).trigger("modal:centrify"),
                t.$modal_body.on("click", ".js-modal-accept", function() {
                    r.savePosition(),
                    t.doDelete()
                })
            }),
            destroy: function() {
                t.$modal_body && t.$modal_body.off(),
                this.delete_xhr && "undefined" != typeof this.delete_xhr.status && this.delete_xhr.abort()
            }
        })
    }
    ,
    t.prototype.successCallback = function() {
        i(document).trigger("list:reload", ["todo" === AMOCRM.data.current_entity ? "todo" : !1]),
        this.modal.showSuccess(AMOCRM.lang.multiple_delete_success_msg)
    }
    ,
    t.prototype.doDelete = function() {
        var e = this
          , t = this.options.id;
        o.deleteThreads(t).always(function() {
            e.$modal_body.show()
        }).done(function(t) {
            "fail" === t.status ? e.modal.showError(t.message) : e.successCallback()
        }).fail(function() {
            e.modal.showError()
        })
    }
    ,
    t
}),
define("lib/components/lists/actions/restore_thread", ["require", "jquery", "lib/components/base/confirm", "lib/components/mail/api", "lib/components/base/scroll_saver"], function(e) {
    var t, i = e("jquery"), s = e("lib/components/base/confirm"), n = e("lib/components/mail/api"), o = e("lib/components/base/scroll_saver");
    return t = function(e) {
        this.options = i.extend({}, e);
        var t = this.options.id;
        AMOCRM.constant("mail_server"),
        AMOCRM.constant("account").id,
        AMOCRM.constant("user").id,
        AMOCRM.constant("mailauth_token"),
        AMOCRM.lang_id;
        new s({
            class_name: "modal-list",
            text: AMOCRM.lang.tasks_open_confirm,
            init: function() {
                this.$modal_body.find(".modal-body__actions").hide(),
                this.options.accept.call(this)
            },
            accept: function() {
                var e = this;
                e.requestStart().xhr = n.restoreThreads(t).done(function(t) {
                    o.savePosition(),
                    "success" == t.result ? (i(document).trigger("list:reload", [AMOCRM.data.current_entity]),
                    e.requestSuccess()) : e.requestFail()
                }).fail(function() {
                    e.requestFail()
                })
            }
        })
    }
}),
define("lib/components/lists/actions/multi_read", ["require", "jquery", "lib/components/base/confirm", "lib/components/mail/api", "lib/components/base/scroll_saver"], function(e) {
    var t, i = e("jquery"), s = e("lib/components/base/confirm"), n = e("lib/components/mail/api"), o = e("lib/components/base/scroll_saver");
    return t = function(e) {
        this.options = i.extend({}, e);
        var t = this.options.id;
        new s({
            class_name: "modal-list",
            text: AMOCRM.lang.tasks_open_confirm,
            init: function() {
                this.$modal_body.find(".modal-body__actions").hide(),
                this.options.accept.call(this)
            },
            accept: function() {
                var e = this;
                e.requestStart().xhr = n.readThread(t, {
                    no_page_change: !0
                }).success(function() {
                    o.savePosition(),
                    i(document).trigger("mail:update:counter").trigger("list:reload", [AMOCRM.data.current_entity]),
                    e.requestSuccess()
                }).error(function() {
                    e.requestFail()
                })
            }
        })
    }
}),
define("lib/components/lists/actions/chat_send", ["require", "jquery", "lib/common/fn", "twig", "underscore", "lib/common/urlparams", "lib/components/base/modal", "lib/components/base/confirm", "lib/interface/fast_tags"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/common/fn"), n = e("twig"), o = e("underscore"), r = e("lib/common/urlparams"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = e("lib/interface/fast_tags");
    return t = function(e) {
        var t = this;
        this.ns = ".chat_send:multiply",
        this.options = i.extend({}, e),
        this.vars = {},
        this.$modal_scroller = "",
        this.modal = new a({
            class_name: "modal-list " + this.options.class_name,
            init: n._preload(["/tmpl/common/modal/chats.twig"], function(e) {
                t.$modal_scroller = e.closest(".modal-scroller"),
                t.vars.$modal_body = e,
                e.trigger("modal:loaded").html(n({
                    ref: "/tmpl/common/modal/chats.twig"
                }).render({})).trigger("modal:centrify"),
                e.on("click", ".js-modal-accept", function() {
                    t.tags && t.tags.saveSuccess(),
                    this.save_xhr = t.doAjax({
                        message: e.find("#chat_message").val(),
                        to_all: e.find(".control-checkbox").find("#to_all").prop("checked"),
                        tags: e.find("#tags").val()
                    })
                }),
                e.on("click", "#add_tags", function() {
                    t.tags = new c({
                        $el: i(this),
                        $input_container: i(this),
                        $container: i(this).closest(".modal-scroller"),
                        id: [],
                        tags: t.existed_tags || [],
                        entity: "chat_send",
                        replace: !0,
                        items_template: "/tmpl/cards/common/fast_tags.twig",
                        onSetPositions: function() {
                            var e = this.$el.offset();
                            this.$list.addClass("fast-tags-suggest_amoforms").css({
                                top: e.top + t.$modal_scroller.scrollTop() + this.el.offsetHeight + 5,
                                left: e.left - 65
                            })
                        },
                        onInit: function() {
                            this.setPositions()
                        },
                        onRenderItemsParams: function() {
                            return {
                                can_add: !0
                            }
                        },
                        onDestroy: function() {
                            t.tags = null
                        },
                        onSaveSuccess: function(i) {
                            var s = e.find("#tags");
                            t.existed_tags = i,
                            s.val(o.map(i, function(e) {
                                return e.raw_title || e.name
                            }).join(", "))
                        }
                    })
                })
            }),
            destroy: function() {
                t.vars.$modal_body && t.vars.$modal_body.off(),
                this.save_xhr && "undefined" != typeof this.save_xhr.status && this.save_xhr.abort()
            }
        })
    }
    ,
    t.prototype.doAjax = function(e) {
        function t(t) {
            switch (o.invert(AMOCRM.element_types)[n]) {
            case "companies":
                c = "chat_modal_companies";
                break;
            case "contacts":
                c = "chat_modal_contacts";
                break;
            case "leads":
                c = "chat_modal_leads";
                break;
            case "customers":
                c = "chat_modal_customers";
                break;
            default:
                c = "element,elements,elements"
            }
            a = s.i18n("Message will be sent to %s ").replace("%s", t) + s.numeralWord(t, s.i18n(c)),
            d.vars.conf_modal = new l({
                class_name: "modal-list",
                text: a,
                accept_text: s.i18n("Send message"),
                decline_text: s.i18n("Back"),
                init: function() {
                    d.$modal_scroller.hide(),
                    d.vars.$modal_body.show()
                },
                accept: function() {
                    d.modal.destroy(),
                    d.doFinalAjax({
                        json: u,
                        entity: e.entity
                    })
                },
                destroy: function() {
                    d.$modal_scroller.show()
                }
            })
        }
        var n, a, c, d = this, u = {};
        return e = e || {},
        e.entity = e.entity || this.options.entity,
        e.id = e.id || this.options.id,
        d.vars.$modal_body.hide(),
        u.message = e.message,
        u.tags = e.tags,
        AMOCRM.data.current_view.pipeline_id && (u.pipeline_id = AMOCRM.data.current_view.pipeline_id),
        n = s.convertElementType(e.entity, "int"),
        "contacts" === o.invert(AMOCRM.element_types)[n] && (n = s.convertElementType(window.location.pathname.split("/")[3], "int")),
        u.entity = {
            type: n
        },
        e.to_all ? (o.extend(u, r.QStoJSON(r.getQueryString(), !0)),
        i.ajax({
            url: "/ajax/v2/multiple/" + e.entity + "/count/",
            type: "POST",
            data: {
                filter: r.QStoJSON(r.getQueryString(), !0),
                entity: u.entity
            },
            dataType: "json"
        }).done(function(e) {
            t(e.response.count)
        }).fail(function() {
            d.modal.showError()
        })) : (u.entity.parties = {
            id: this.options.id
        },
        t(Object.keys(u.entity.parties.id).length))
    }
    ,
    t.prototype.doFinalAjax = function(e) {
        var t = this
          , n = e.json;
        return i.ajax({
            url: "/ajax/v2/multiple/" + e.entity + "/chat_send/",
            type: "POST",
            data: n,
            dataType: "json"
        }).always(function() {
            t.$modal_scroller.show()
        }).done(function(n) {
            n.response.status ? (o.isFunction(e.callback) ? e.callback() : i(document).trigger("list:reload"),
            t.vars.conf_modal.requestSuccess(s.i18n("Message sent"))) : t.vars.conf_modal.requestFail()
        }).fail(function() {
            t.vars.conf_modal.requestFail()
        })
    }
    ,
    t
}),
define("lib/components/lists/actions/handlers", ["require", "lib/components/lists/actions/reassign", "lib/components/lists/actions/customers/in_list/reassign", "lib/components/lists/actions/add_task", "lib/components/lists/actions/change_status", "lib/components/lists/actions/delete", "lib/components/lists/actions/delete_catalog_elements", "lib/components/lists/actions/customers/in_list/delete", "lib/components/lists/actions/manage_tags", "lib/components/lists/actions/restore", "lib/components/lists/actions/open_close", "lib/components/lists/actions/merge", "lib/components/lists/actions/add_entity", "lib/components/lists/actions/write_mail", "lib/components/lists/actions/accept_unsorted", "lib/components/lists/actions/decline_unsorted", "lib/components/lists/actions/link_unsorted", "lib/components/lists/actions/delete_thread", "lib/components/lists/actions/restore_thread", "lib/components/lists/actions/multi_read", "lib/components/lists/actions/chat_send"], function(e) {
    "use strict";
    var t = {
        Reassign: e("lib/components/lists/actions/reassign"),
        ReassignCustomers: e("lib/components/lists/actions/customers/in_list/reassign"),
        AddTask: e("lib/components/lists/actions/add_task"),
        ChangeStatus: e("lib/components/lists/actions/change_status"),
        Delete: e("lib/components/lists/actions/delete"),
        DeleteCatalogElements: e("lib/components/lists/actions/delete_catalog_elements"),
        DeleteCustomers: e("lib/components/lists/actions/customers/in_list/delete"),
        ManageTags: e("lib/components/lists/actions/manage_tags"),
        Restore: e("lib/components/lists/actions/restore"),
        OpenClose: e("lib/components/lists/actions/open_close"),
        Merge: e("lib/components/lists/actions/merge"),
        AddEntity: e("lib/components/lists/actions/add_entity"),
        WriteMail: e("lib/components/lists/actions/write_mail"),
        AcceptUnsorted: e("lib/components/lists/actions/accept_unsorted"),
        DeclineUnsorted: e("lib/components/lists/actions/decline_unsorted"),
        LinkUnsorted: e("lib/components/lists/actions/link_unsorted"),
        DeleteThread: e("lib/components/lists/actions/delete_thread"),
        RestoreThread: e("lib/components/lists/actions/restore_thread"),
        MultiRead: e("lib/components/lists/actions/multi_read"),
        ChatSend: e("lib/components/lists/actions/chat_send")
    };
    return {
        accept: {
            handler: t.AcceptUnsorted,
            svg_icon: "leads--unsorted-accept"
        },
        add_contacts: {
            handler: t.AddEntity,
            icon: "add-user"
        },
        add_customers: {
            handler: t.AddEntity,
            icon: "add-lead"
        },
        add_leads: {
            handler: t.AddEntity,
            icon: "add-lead"
        },
        add_task: {
            handler: t.AddTask,
            icon: "clock-blue"
        },
        change_status: {
            handler: t.ChangeStatus,
            icon: "status-change"
        },
        chat_send: {
            handler: t.ChatSend,
            svg_icon: "multiactions--chats"
        },
        decline: {
            handler: t.DeclineUnsorted,
            svg_icon: "leads--unsorted-decline"
        },
        "delete": {
            handler: t.Delete,
            icon: "delete-trash"
        },
        delete_catalog_elements: {
            handler: t.DeleteCatalogElements,
            icon: "delete-trash"
        },
        delete_customers: {
            handler: t.DeleteCustomers,
            icon: "delete-trash"
        },
        delete_thread: {
            handler: t.DeleteThread,
            icon: "delete-trash"
        },
        link: {
            handler: t.LinkUnsorted,
            svg_icon: "common--linking-chain"
        },
        mailing: {
            handler: t.WriteMail,
            icon: "mailing"
        },
        manage_tags: {
            handler: t.ManageTags,
            icon: "tags"
        },
        merge: {
            handler: t.Merge,
            icon: "merge-action"
        },
        multi_read: {
            handler: t.MultiRead,
            icon: "multi-read"
        },
        open: {
            handler: t.OpenClose,
            icon: "open-tasks"
        },
        close: {
            handler: t.OpenClose,
            icon: "close-tasks"
        },
        reassign: {
            handler: t.Reassign,
            icon: "reassign"
        },
        reassign_customers: {
            handler: t.ReassignCustomers,
            icon: "reassign"
        },
        reply: {
            handler: t.WriteMail,
            icon: "mail-reply"
        },
        restore: {
            handler: t.Restore,
            icon: "restore"
        },
        restore_thread: {
            handler: t.RestoreThread,
            icon: "restore"
        }
    }
}),
define("lib/components/lists/multiactions", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/view", "lib/interface/element_model", "lib/components/lists/actions/tip", "lib/components/lists/actions/handlers", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("twig")
      , s = e("underscore")
      , n = e("lib/common/fn")
      , o = e("lib/core/view")
      , r = e("lib/interface/element_model")
      , a = e("lib/components/lists/actions/tip")
      , l = e("lib/components/lists/actions/handlers")
      , c = e("lib/common/user_rights")
      , d = 0
      , u = {};
    return i._preload(["/tmpl/common/multiple_actions.twig"])(),
    o.extend({
        id: "list_multiple_actions",
        className: "list-multiple-actions",
        events: {
            "change .multiple-actions__top-checkbox": "toggleChecked",
            "click .js-list-multiple-actions__item": "initAction",
            "click .js-list-multiple-actions__item-more": "onMultiactionsMoreClick"
        },
        _selectors: function() {
            return {
                item: ".list-multiple-actions__item",
                more_item: ".list-multiple-actions__item-more"
            }
        },
        features: {
            leads: {
                reassign: !0,
                add_task: !0,
                change_status: !0,
                "delete": !0,
                manage_tags: !0,
                merge: !0,
                chat_send: !0
            },
            "leads-trash": {
                restore: !0
            },
            contacts: {
                reassign: !0,
                add_task: !0,
                "delete": !0,
                manage_tags: !0,
                merge: !0,
                chat_send: !0
            },
            "contacts-trash": {
                restore: !0
            },
            todo: {
                open: {
                    action: "open"
                },
                close: {
                    action: "close",
                    params: {
                        is_close: !0
                    }
                },
                "delete": !0
            },
            "todo-trash": {
                restore: !0
            },
            mail: {
                reply: !0,
                mailing: !0,
                add_contacts: !0,
                add_leads: !0,
                add_customers: !0,
                delete_thread: !0,
                restore_thread: !0,
                multi_read: !0
            },
            unsorted: {
                accept: !0,
                link: !0,
                decline: !0
            },
            catalogs: {
                "delete": {
                    action: "delete_catalog_elements",
                    params: {}
                }
            },
            customers: {
                reassign: {
                    action: "reassign_customers",
                    params: {}
                },
                "delete": {
                    action: "delete_customers",
                    params: {}
                }
            }
        },
        initialize: function(e) {
            var a, l;
            if (o.prototype.initialize.call(this),
            this.options = e,
            AMOCRM.constant("user_rights").is_admin && (this.features.customers.chat_send = {
                action: "chat_send",
                params: {}
            }),
            "unsorted" === e.current_entity ? this.current_entity = e.current_entity : this.current_entity = AMOCRM.data.current_entity,
            "undefined" != typeof this.features[this.current_entity] && AMOCRM.constant("user_rights") && AMOCRM.constant("user_rights")[this.current_entity]) {
                if (e.hasMarkers && (this.className += " marked-list__multiple-actions"),
                e.class_name && (this.className += " " + e.class_name),
                e.elements && e.elements.$list_all_checker ? this.$list_all_checker = e.elements.$list_all_checker : this.$list_all_checker = t("#list_all_checker"),
                a = void 0 !== e.ur ? e.ur : n.getUserRights(AMOCRM.constant("user_rights")[this.current_entity]),
                this.collection = e.collection || AMOCRM.data.current_list,
                this.collection && (l = this.collection.filter(function(t) {
                    return t.get("is_checked") || e.all_checked
                }),
                l.length && (s.each(l, function(e) {
                    e.get("actions")
                }),
                a.add_contacts = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.add_contacts
                }),
                a.add_leads = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.add_lead
                }),
                a.add_customers = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.add_customers
                }),
                a.chat_send = AMOCRM.constant("user_rights").is_admin,
                "contacts" !== this.current_entity || AMOCRM.data.element_type || (a.chat_send = !1),
                a.reply = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.reply ? l.length > 1 ? !1 : !0 : void 0
                }),
                a.mailing = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.mailing
                }),
                a.delete_thread = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.delete_thread
                }),
                a.restore_thread = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.restore_thread
                }),
                a.multi_read = s.any(l, function(e) {
                    var t = e.get("actions");
                    return t && t.multi_read
                }),
                a.link = s.any(l, function(e) {
                    var t = e.get("category");
                    return "unsorted" === this.current_entity && 1 === l.length && "chats" === t
                }, this),
                "mail" == this.current_entity))) {
                    this.recipients = l.map(function(e) {
                        return e.get("recipients")
                    });
                    var h = 20
                      , _ = this.recipients.reduce(function(e, t) {
                        return e + t
                    }, 0);
                    a.mailing = h > _ ? a.mailing : !1
                }
                e.elements = e.elements || {},
                this.$list_holder = e.elements.$list_holder || t("#list_holder"),
                this._$document.one("multiactions:destroy" + this.ns, s.bind(this.destroy, this));
                var p = this.$list_holder.find(".list__table")
                  , m = u[this.current_entity]
                  , f = function() {
                    m.destroy(!0)
                }
                  , g = 1e3
                  , b = Modernizr.csstransforms ? Modernizr.prefixed("transform") : "left"
                  , v = Modernizr.csstransforms ? "translateX(-" + g + "px)" : -g
                  , y = !1
                  , w = l && l[0]instanceof r
                  , C = {
                    "delete": "delete",
                    reassign: "edit"
                }
                  , k = t.map(this.features[this.current_entity], function(e, t) {
                    var i, n = {}, o = C[t] || t;
                    return w ? (i = s.all(l, function(e) {
                        return e.hasRightsFor(o)
                    }),
                    i && (n.type = t)) : a[t] === !0 && (n.type = t),
                    void 0 !== n.type && (y = !0),
                    n
                })
                  , x = {
                    entity: "unsorted" !== this.current_entity ? AMOCRM.getBaseEntity() : this.current_entity,
                    rights: t.makeArray(k),
                    more_actions: []
                }
                  , M = [];
                if ("unsorted" !== this.current_entity && s.each(AMOCRM.widgets.list, function(e, t) {
                    return e.callbacks[AMOCRM.getWidgetsArea()] ? void ("function" == typeof e.callbacks[AMOCRM.getWidgetsArea()].selected && M.push({
                        text: e.langs.widget.selected_text || e.langs.widget.name,
                        class_name: "js-tips-item-widgets",
                        id: t,
                        icon: t
                    })) : !0
                }),
                x.more_actions = M,
                this.widgets_actions_list = M,
                this.data = e.data,
                this.checked = [],
                this.collection) {
                    e.all_checked ? this.checked = this.collection.map(function(e) {
                        return e.get("id")
                    }) : this.checked = this.collection.where({
                        is_checked: !0
                    }).map(function(e) {
                        return e.get("id")
                    }),
                    l = this.collection.where({
                        is_checked: !0
                    });
                    var A, O, $, T = !1;
                    if (!l.length && this.checked.length && (l = this.collection.models),
                    A = s.size(s.groupBy(l, function(e) {
                        return e.get("entity")
                    })),
                    s.isEmpty(l) || ($ = s.first(l).get("element_type"),
                    T = c.getRights(n.convertElementType($, "string"), "merge")),
                    O = this.checked.length >= 2 && this.checked.length <= 5 && !n.endsWith(this.current_entity, "-trash") && 1 == A && T,
                    O && l.length) {
                        var S = s.invert(AMOCRM.element_types);
                        this.entityType = S[l[0].get("element_type")]
                    }
                }
                x.more_actions_length = x.more_actions.length,
                "undefined" != typeof u[this.current_entity] && (Modernizr.csstransforms && e.need_anim ? u[this.current_entity].$el.css(b, Modernizr.csstransforms ? "translateX(-" + g + "px)" : -g).one(AMOCRM.transition_event, function() {
                    f()
                }) : f()),
                !e.only_remove && (y || M.length > 0) ? (x.is_top = this.checked.length > 1 || 1 == this.collection.length,
                x.all_checked = this.checked.length == this.collection.length,
                x.selected_count = this.checked.length,
                x.mergeAllowed = O,
                x.has_markers = e.hasMarkers || "",
                x.skip_multiple_total = "unsorted" === this.current_entity,
                this.$el.html(i({
                    ref: "/tmpl/common/multiple_actions.twig"
                }).render(x)).addClass(this.className).toggleClass("list-multiple-actions_has-more", !!x.more_actions_length),
                e.need_anim && this.$el.css(b, v),
                1 == this.checked.length && this.collection.length > 1 && (p = t("#list_item_" + this.checked[0]).find(".list-row__cell-id .content-table__item__inner")),
                p.append(this.$el),
                u[this.current_entity] = this,
                e.need_anim && u[this.current_entity].$el.prepareTransition().css(b, ""),
                d || (d = this._findElem("more_item").width() + 2),
                this._findElem("item").slice(1).css("marginLeft", -1 * d),
                u[this.current_entity].sum_xhr && "undefined" != typeof u[this.current_entity].sum_xhr.status && u[this.current_entity].sum_xhr.abort(),
                "leads" === AMOCRM.getBaseEntity() && this.checked.length > 1 && "unsorted" !== this.current_entity && (this.sum_xhr = t.ajax({
                    url: "/ajax/leads/sum",
                    type: "post",
                    data: {
                        ID: this.checked
                    },
                    dataType: "json",
                    success: function(e) {
                        t("#actions__total__sum").html("&nbsp;" + n.currency(e.sum))
                    }
                }))) : e.only_remove && 0 === this.checked.length && this.$list_all_checker.prop("checked", !1)
            }
        },
        onMultiactionsMoreClick: function(e) {
            var i, o = this.$el.offset(), r = this.options.tip_params, c = [];
            e.stopPropagation(),
            this.actions_tip || (i = this._findElem("item").filter(function(e, i) {
                return t(i).offset().top > o.top
            }).map(function(e, i) {
                return t(i).attr("data-type")
            }),
            (i.length || this.widgets_actions_list.length) && (i.length && (c = s(i).map(function(e) {
                return {
                    class_name: "js-tips-item-multiaction",
                    svg_icon: l[e].svg_icon,
                    icon: l[e].icon,
                    text: (AMOCRM.lang["multiple_" + e + "_label"] || n.i18n(e)).toLowerCase(),
                    additional_data: 'data-type="%s"'.replace("%s", e)
                }
            })),
            this.actions_tip = this._addComponent(a, s.extend({}, r, {
                $elem: t(e.currentTarget),
                class_name: "cell-tip-multiactions",
                items: c.concat(this.widgets_actions_list),
                onActionsClick: s.bind(this.initAction, this),
                onDestroy: s.bind(s.wrap(r.onDestroy, function(e) {
                    e.call(this),
                    delete this.actions_tip
                }), this)
            })).render()))
        },
        toggleChecked: function(e) {
            this.$list_all_checker.prop("checked", !1).trigger("change"),
            e.stopPropagation()
        },
        initAction: function(e) {
            var i, n, o, r, a = t(e.currentTarget), c = a.attr("data-type"), d = this.features[this.current_entity][c], u = s.clone(this.collection);
            if (!a.attr("data-loading")) {
                switch (a.attr("data-loading", !0),
                i = d === !0 ? {} : d.params,
                i = t.extend({}, this.data, i),
                n = l[d === !0 ? c : d.action].handler,
                c) {
                case "add_contacts":
                    o = "contacts";
                    break;
                case "add_leads":
                    o = "leads";
                    break;
                case "add_customers":
                    r = "/tmpl/common/modal/add_entity/add_entity_customer.twig",
                    o = "customers";
                    break;
                case "reply":
                    o = "reply";
                    break;
                case "mailing":
                    o = "mailing"
                }
                u.reset(this.collection.filter(function(e) {
                    return s.indexOf(this.checked, e.get("id")) > -1
                }, this), {
                    silent: !0
                }),
                new n({
                    id: this.checked,
                    entity: this.current_entity,
                    params: i,
                    from_list: !0,
                    type: this.entityType,
                    subEntity: o,
                    collection: u,
                    template: r || ""
                }),
                a.removeAttr("data-loading"),
                this._$document.trigger("rows:uncheck-all")
            }
            return !1
        }
    })
}),
define("lib/components/lists/base/settings", ["require", "jquery", "underscore", "twig", "backbone"], function(e) {
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("backbone"), r = function(e, t, i) {
        var s, n, o, r = document.getElementById("list_table").children, a = function(e, t, i, s, n) {
            e = r[n],
            t = r[n].children,
            i > s ? e.insertBefore(t[i], t[s]) : e.insertBefore(t[i], t[s].nextSibling)
        };
        if (i)
            a(s, n, e, t, i);
        else
            for (o = 0; o < r.length; o += 1)
                1 != o && a(s, n, e, t, o)
    }, a = {
        table_column_item: "",
        table_head_cell_item: "",
        table_cell_item: ""
    };
    return t = o.View.extend({
        events: {
            "click #column_settings__submit": "save",
            "click #columns_settings_cancel_btn": "exit"
        },
        initialize: function(e) {
            this.$el.length && (e = e || {},
            n._preload(["/tmpl/list/column_settings/item.twig", "/tmpl/list/header_cell.twig", "/tmpl/list/cell.twig"], function() {
                a = {
                    table_column_item: n({
                        ref: "/tmpl/list/column_settings/item.twig"
                    }).render(),
                    table_head_cell_item: n({
                        ref: "/tmpl/list/header_cell.twig"
                    }).render(),
                    table_cell_item: n({
                        ref: "/tmpl/list/cell.twig"
                    }).render({
                        field: {
                            template: "text"
                        },
                        item: {}
                    })
                }
            })(),
            this.options = e,
            this.$settings_holder = i("#list_column_settings_holder"),
            this.$submit_btn = this.$("#column_settings__submit"),
            this.$list_wrapper = i("#list_table").parent(),
            this.header = e.header,
            i("#list_holder").addClass("content__table-show-settings content__table-show-settings-showed"),
            this.listenTo(this.model, "change:has_changes", this.setChanges),
            this.init(),
            s.isFunction(e.callbacks.onListSettingsInit) && e.callbacks.onListSettingsInit())
        },
        setChanges: function() {
            this.model.get("has_changes") ? this.$submit_btn.removeClass("button-input-disabled").addClass("button-input_blue") : this.$submit_btn.addClass("button-input-disabled").removeClass("button-input_blue")
        },
        destroy: function() {
            this.$el.droppable() && this.$el.droppable("destroy"),
            this.undelegateEvents(),
            i("#list_holder").removeClass("content__table-show-settings content__table-show-settings-showed"),
            i(document).trigger("overlay:unfix").trigger("list:settings:destroy"),
            this.makeDraggable(!1),
            s.isFunction(this.options.callbacks.onListSettingsDestroy) && this.options.callbacks.onListSettingsDestroy()
        },
        init: function() {
            var e = this;
            this.makeDraggable(),
            this.$el.droppable({
                over: function(e, t) {
                    t.draggable.hasClass("js-list-row__cell") && "name" !== t.draggable.attr("data-field-code") && i(this).addClass("column_settings-droppable")
                },
                out: function() {
                    i(this).removeClass("column_settings-droppable")
                },
                drop: function(t, n) {
                    if (n.draggable.hasClass("js-list-row__cell") && "name" !== n.draggable.attr("data-field-code")) {
                        var o = n.draggable.siblings(":visible").andSelf().index(n.draggable)
                          , r = n.helper.offset()
                          , l = i(a.table_column_item);
                        l.attr("data-field-template", n.draggable.attr("data-field-template")).attr("data-field-code", n.draggable.attr("data-field-code")).find(".column_settings__columns_item__title").text(n.draggable.find(".list-row__cell-head__title").text()),
                        e.$settings_holder.append(l.clone()),
                        i(document.body).append(l.css({
                            zIndex: 1e3,
                            top: r.top,
                            left: r.left,
                            position: "absolute",
                            width: n.helper.width()
                        })),
                        n.draggable.remove(),
                        e.header.$table.css({
                            "min-width": e.header.$table.width() - e.header.$table.find(".js-list-row").not(e.header.$el).find(".js-list-row__cell:visible:eq(" + o + ")").width()
                        }).find(".js-list-row").not(e.header.$el).find(".js-list-row__cell:visible:eq(" + o + ")").remove(),
                        e.header.$cols.find(".js-list-column:eq(" + (o + 1) + ")").remove(),
                        l.addClass("js-animation-remove"),
                        e.model.set({
                            has_changes: !0
                        }),
                        e.makeDraggable(),
                        i(this).removeClass("column_settings-droppable"),
                        s.delay(function() {
                            l && l.length && l.remove()
                        }, 500)
                    }
                }
            }),
            i(window).scrollTop(0),
            i(document).trigger("overlay:fix"),
            this.$scrollable = this.header.$table.parent(),
            this.container_width = 0,
            this.container_left = 0,
            this.header.$el.sortable({
                items: ".list-row__cell:visible",
                cursor: "move",
                tolerance: "pointer",
                containment: i("#list_holder"),
                helper: function(t, s) {
                    var n = i(a.table_column_item);
                    return n.css({
                        maxWidth: e.header.$table_holder.width() - 16,
                        height: 40
                    }).find(".column_settings__columns_item__title").text(s.find(".list-row__cell-head__title").text()),
                    n
                },
                placeholder: {
                    element: function(e) {
                        var t = i(a.table_head_cell_item);
                        return t.attr("data-field-template", e.attr("data-field-template")).attr("data-field-code", e.attr("data-field-code")).find(".list-row__cell-head__title", e.find(".column_settings__columns_item__title").text()),
                        t.addClass("ui-placeholder").css({
                            width: 150,
                            visibility: "hidden"
                        })
                    },
                    update: function() {}
                },
                distance: 0,
                cursorAt: {
                    top: 20
                },
                appendTo: document.body,
                scroll: !1,
                refreshPositions: !0,
                receive: function(t, s) {
                    var n = e.header.$(".column_settings__columns_item")
                      , o = n.siblings(":visible").andSelf().index(n)
                      , r = s.item.attr("data-field-code")
                      , l = i(a.table_head_cell_item).attr("data-field-code", r).removeClass("list-row__cell-").addClass("list-row__cell-" + r)
                      , c = i(a.table_cell_item).attr("data-field-code", r).removeClass("list-row__cell-").addClass("list-row__cell-" + r)
                      , d = i('<div class="js-list-column-code-' + r + ' js-list-column list__col-group__column" data-field-code="' + r + '" style="width: 150px"></div>')
                      , u = i(".js-list-row", e.header.$table).not(e.header.$el);
                    l.find(".list-row__cell-head__title").text(s.item.find(".column_settings__columns_item__title").text()),
                    n.replaceWith(l),
                    c.children("div").remove(),
                    u[0] && o != i(u[0]).find(".js-list-row__cell:visible").length ? (e.header.$cols.find(".js-list-column:eq(" + (o + 1) + ")").before(d),
                    u.find(".js-list-row__cell:visible:eq(" + o + ")").before(c)) : (e.header.$cols.append(d),
                    u.append(c)),
                    s.item[0].parentNode.removeChild(s.item[0]),
                    e.model.set({
                        has_changes: !0
                    }),
                    e.header.$el.css("min-width", "+=150px"),
                    e.header.syncWidth(),
                    e.header.initResize()
                },
                start: function(t, s) {
                    var n = s.placeholder.siblings().index(s.item);
                    s.item.attr("data-start-index", n),
                    s.item.attr("data-stop-index", n),
                    e.container_width = i("#list_table_inner_holder").width(),
                    e.container_left = e.$scrollable.offset().left
                },
                change: function(t, s) {
                    e.model.set({
                        has_changes: !0
                    }),
                    s.item.attr("data-stop-index", s.placeholder.siblings().andSelf().not(s.item).index(s.placeholder)),
                    e.container_width = i("#list_table_inner_holder").width(),
                    e.container_left = e.$scrollable.offset().left
                },
                beforeStop: function(e, t) {
                    var i = parseInt(t.item.attr("data-start-index"))
                      , s = parseInt(t.item.attr("data-stop-index"));
                    t.item.hasClass("column_settings__columns_item") || i === s || (r(i, s),
                    t.item.attr("data-start-index", s))
                }
            }),
            i(document).trigger("list:settings:shown")
        },
        makeDraggable: function(e) {
            var t = this;
            e !== !1 ? this.$settings_holder.find(".column_settings__columns_item").draggable({
                connectToSortable: this.header.$el,
                revert: "invalid",
                revertDuration: 100,
                cursor: "move",
                cursorAt: {
                    top: 10
                },
                appendTo: document.body,
                scroll: !1,
                helper: function(e, t) {
                    var s = i(a.table_column_item);
                    return s.find(".column_settings__columns_item__title").text(i(this).find(".column_settings__columns_item__title").text()),
                    s
                },
                start: function(e, s) {
                    i(e.target).css("visibility", "hidden"),
                    t.header.$table[0].style.maxWidth = t.header.el.offsetWidth + "px"
                },
                stop: function(e, s) {
                    i(e.target).css("visibility", ""),
                    t.header.$table[0].style.maxWidth = ""
                },
                zIndex: 100
            }) : this.$settings_holder.find(".column_settings__columns_item").draggable() && this.$settings_holder.find(".column_settings__columns_item").draggable("destroy")
        },
        save: function(e) {
            this.model.get("has_changes") && (this.exit(!1),
            this.model.get("has_changes") && (this.model.set({
                has_changes: !1
            }),
            this.$submit_btn.trigger("button:saved"),
            this.header.convertWidth().saveColumns({
                for_all: i("#columns_settings_for_all").is(":checked") ? "Y" : "N",
                reload: !0
            }),
            i(document).trigger("list:column:resized")))
        },
        exit: function(e) {
            this.destroy(),
            this.header.$table_holder.removeClass("content__table-show-settings"),
            this.header.$table_holder.removeClass("content__table-show-settings-showed"),
            this.model.get("has_changes") && e !== !1 && i(document).trigger("list:reload")
        }
    })
}),
define("lib/components/lists/base/header", ["require", "jquery", "underscore", "twig", "backbone", "elements_view", "lib/common/fn", "lib/common/urlparams", "lib/components/lists/multiactions", "lib/components/lists/base/settings"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("backbone"), r = e("elements_view"), a = e("lib/common/fn"), l = e("lib/common/urlparams"), c = e("lib/components/lists/multiactions"), d = e("lib/components/lists/base/settings");
    return t = r.extend({
        initialize: function(e) {
            var t = this;
            this.options = i.extend({
                entity: AMOCRM.getBaseEntity(),
                elements: {
                    $list_all_checker: !1,
                    $list_holder: !1,
                    $list_col_group: !1,
                    $list_table: !1,
                    $column_settings: !1
                }
            }, e),
            this.entity = e.entity,
            this.$checkbox = this.options.elements.$list_all_checker || i("#list_all_checker"),
            this.$checkbox_wrapper = this.$checkbox.parent(),
            this.$table_holder = this.options.elements.$list_holder || i("#list_holder"),
            this.$cols = this.options.elements.$list_col_group || i("#list_col_group"),
            this.$table = this.options.elements.$list_table || i("#list_table"),
            this.$column_settings = this.options.elements.$column_settings || i("#column_settings"),
            this.table_offset = -1 * parseInt(this.$table.css("paddingRight")),
            this.$sort_tip = !1,
            this.initResize(),
            this._$document.on("click.list:sort:dialog controls:hide.list:sort:dialog", function() {
                t.$sort_tip && (t.$sort_tip.remove(),
                t.$sort_tip = !1)
            }).on("click.list:settings", ".js-list-settings", function() {
                t.$column_settings && t.$column_settings.length && (t.settings = new d({
                    el: t.$column_settings,
                    header: t,
                    model: new o.Model,
                    callbacks: e.list_settings_options || {}
                }))
            }).on("scroll.list:drag-to-top", ".js-scroll-container", function(e) {
                e.stopPropagation()
            }).on("rows:uncheck-all", function() {
                t.toggleAll(!1)
            })
        },
        events: function() {
            var e = this.$checkbox.attr("id")
              , t = {
                "list:head:drag-to-top": "dragToTop",
                "click .js-list-row__cell-sortable .list-row__cell-head__inner": "sortDialog",
                "click .js-list-sort": "sortList"
            };
            return t["change #" + e] = "toggleAll",
            t
        },
        destroy: function() {
            this._$window.off("scroll.list:head:drag-to-top:mobile").off(".list:drag-to-top"),
            this._$document.off("rows:uncheck-all").off(".list:drag-to-top").off("click.list:settings").off("click.list:sort:dialog"),
            this.setMultiActions(!1),
            this.settings && (this.settings.exit(!1),
            delete this.settings),
            this.$el.length && this.$(".js-resizable-cell").each(function() {
                i(this).data("ui-resizable") && i(this).resizable("destroy")
            }),
            this.remove(!1)
        },
        sortList: function(e) {
            var t, n = i(e.currentTarget), o = s.find(this.model.data.fields, function(e) {
                return e.code == n.closest(".js-list-row__cell").attr("data-field-code")
            }), r = n.attr("data-sort");
            n.hasClass("list-sort-dialog__item-current") ? (t = l.removeQueryParam(["filter[order_by]", "order_by", "filter[order_type]", "order_type"]),
            AMOCRM.router.navigate(l.setQueryParam({
                clear_order: "yes"
            }, {
                query_string: t
            }), {
                trigger: !0
            })) : o && (t = l.removeQueryParam(["clear_order"]),
            AMOCRM.router.navigate(l.setQueryParam({
                "filter[order_by]": o.sort,
                "filter[order_type]": r,
                order_by: o.sort,
                order_type: r
            }, {
                query_string: t
            }), {
                trigger: !0
            }))
        },
        sortPrevent: function(e) {
            e.stopPropagation()
        },
        sortDialog: function(e) {
            var t, s, o, r = i(e.currentTarget).parent(), a = "list-sort-dialog__item js-list-sort";
            return this.options.sortable === !1 ? !1 : (o = r.closest(".list-row__cell").data("current-sort"),
            s = "date" === r.data("field-template") || "date_closed_at" === r.data("field-code") || "date_of_nearest_task" === r.data("field-code") || "task_date" === r.data("field-template"),
            t = i(n({
                ref: "/tmpl/common/tip.twig"
            }).render({
                class_name: "list-sort-dialog",
                items: [{
                    class_name: a + ("ASC" === o ? " list-sort-dialog__item-current" : ""),
                    text: AMOCRM.lang["list_sort_" + (s ? "old_first" : "asc")],
                    additional_data: 'data-sort="ASC"'
                }, {
                    class_name: a + ("DESC" === o ? " list-sort-dialog__item-current" : ""),
                    text: AMOCRM.lang["list_sort_" + (s ? "new_first" : "desc")],
                    additional_data: 'data-sort="DESC"'
                }]
            })),
            void (this.$sort_tip && this.$sort_tip.length ? this.removeSortDialog() : (i(document).trigger("controls:hide"),
            this.$sort_tip = t,
            this.$table_holder.find(".list__table__holder").css("minHeight", 190),
            r.find(".list-row__cell-head__inner").append(this.$sort_tip),
            this.$sort_tip.focus().addClass("list-sort-dialog-visible"),
            e.stopPropagation())))
        },
        removeSortDialog: function() {
            this.$sort_tip && (this.$table_holder.find(".list__table__holder").css("minHeight", ""),
            this.$sort_tip.remove(),
            this.$sort_tip = !1)
        },
        dragToTop: function(e, t) {
            var s, n = i("#list_multiple_actions");
            t = document.body.scrollTop || i("body, html").scrollTop(),
            s = t - this.$el.offset().top,
            t > this.$el.offset().top ? (this.last_ma_top !== s && n.addClass("transition"),
            this._$window.one("scroll.list:drag-to-top", function(e) {
                n.removeClass("transition"),
                i("#list_multiple_actions").css("top", "")
            }),
            n.css("top", s + "px"),
            this.last_ma_top = s) : (n.css("top", ""),
            this.last_ma_top = 0)
        },
        setMultiActions: function(e) {
            this._multiactions && (this._multiactions.destroy(),
            delete this._multiactions),
            e && (this._multiactions = new c(e))
        },
        toggleAll: function(e, t, n) {
            var o, r, a, l = s.isBoolean(e) ? !e : this.$checkbox_wrapper.hasClass("control-checkbox-dash") || !this.$checkbox.get(0).checked, c = {};
            this.model && void 0 !== this.model.findWhere({
                disableCheckbox: !0
            }) && (a = this.model.findWhere({
                disableCheckbox: void 0
            }),
            void 0 !== a && (o = a.get("entity"),
            r = "lead" !== o ? AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()][o.toUpperCase()] : AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()])),
            l ? (this.$checkbox.prop("checked", !1),
            c = {
                only_remove: !0,
                need_anim: !0
            }) : c = {
                only_remove: !1,
                need_anim: !0,
                data: this.model.data,
                all_checked: !0,
                ur: r,
                tip_params: this.options.tip_params,
                collection: this.model,
                mailbox_id: this.options.mailbox_id
            },
            s.isUndefined(t) || (c.hasMarkers = t),
            s.isUndefined(n) || (c.class_name = n),
            c.elements = {
                $list_holder: this.$table_holder,
                $list_all_checker: this.$checkbox
            },
            c.current_entity = this.entity,
            this.setMultiActions(c),
            i('.js-list-row:not(".list-row-head")').removeClass("js-nobackground-row"),
            this.$table.find('.list-row__cell-id input[type="checkbox"]:not([disabled])').not(this.$checkbox).prop("checked", !l),
            this.$checkbox_wrapper.removeClass("control-checkbox-dash"),
            this.model && this.model.each(function(e) {
                (s.isUndefined(o) || e.get("entity") === o) && e.set("is_checked", !l, {
                    silent: !0
                })
            })
        },
        initResize: function() {
            var e, t, s, n, o, r, l, c = this, d = this.$table.find(".js-resizable-cell"), u = 0, h = !1, _ = 0, p = 0, m = 0, f = 0, g = this.table_offset, b = !1, v = parseInt(this.$table.css("paddingRight")), y = i(".list__table__holder").get(0);
            d.length && d.resizable({
                handles: "e",
                minWidth: 100,
                start: function() {
                    h === !1 && (h = c.$table_holder.get(0).offsetWidth + (a._getV3Plug() ? -30 : 0)),
                    c.$table.addClass("list__table-resizing"),
                    c.syncWidth(),
                    e = i(this),
                    t = e.siblings(":visible:not(.list-row__cell-id)").andSelf(),
                    s = c.$cols.find(".js-list-column:not(.js-list-column-code-id):not([style *= 'display: none'])"),
                    n = t.length,
                    n > 1 && (o = t.index(e),
                    r = o === n - 1 ? n - 2 : o + 1,
                    c.removeSortDialog(),
                    e.find(".list-row__cell-head__resize-ghost").show(),
                    u = c.$table[0].offsetWidth + g,
                    m = parseInt(s[r].style.width),
                    f = parseInt(s[o].style.width))
                },
                resize: function(e, i) {
                    l = i.size.width - i.originalSize.width,
                    _ = u + l,
                    p = f + l,
                    b = b || y.offsetWidth === y.scrollWidth - y.scrollLeft,
                    n > 1 && (n - 1 !== o && (h >= _ && (_ = h),
                    i.size.width < i.originalSize.width && h >= _ && (s[r].style.width = (m - (l + (u - h))).toString() + "px")),
                    b && _ > h && c.$table.css("paddingRight", v + (0 > l ? Math.abs(l) : 0)),
                    t.get(o).style.width = "",
                    s.get(o).style.width = p + "px",
                    c.$table.get(0).style.width = _ + g + "px")
                },
                stop: function(t, i) {
                    b = !1,
                    e.find(".list-row__cell-head__resize-ghost").hide(),
                    c.$table.css("paddingRight", v),
                    c.convertWidth(),
                    c.saveColumns(),
                    c.$table.removeClass("list__table-resizing"),
                    c._$document.trigger("list:column:resized")
                }
            })
        },
        syncWidth: function() {
            var e = this
              , t = this.$table[0].offsetWidth + this.table_offset;
            this.$table.get(0).style.width = t.toString() + "px",
            this.$cols.find('.js-list-column:not([style *= "display: none"])').each(function(t) {
                "id" !== i(this).attr("data-field-code") && (this.style.width = e.$table.find('.list-row__cell-head:not([style *= "display: none"])').get(t).offsetWidth.toString() + "px")
            }),
            this.$table.get(0).style.minWidth = ""
        },
        convertWidth: function(e) {
            var t = this
              , s = this.$table.get(0).offsetWidth
              , n = 0
              , o = "";
            return s > this.$table_holder.width() && (o = s + this.table_offset + "px"),
            this.$table.get(0).style.minWidth = o,
            this.$table.get(0).style.width = "",
            this.$cols.find(".js-list-column").each(function(e) {
                var o;
                "id" !== i(this).attr("data-field-code") && (o = this.style.width.toString(),
                n = "%" === o.charAt(o.length - 1) ? parseInt(o) : 100 * parseInt(t.$table.find(".list-row__cell-head").get(e).offsetWidth) / (s + t.table_offset),
                this.style.width = n + "%")
            }),
            this
        },
        saveColumns: function(e) {
            e = e || {},
            i.ajax({
                url: "/ajax/columns_settings/",
                data: {
                    settings: {
                        for_all: e.for_all || "N",
                        width: this.$table.get(0).style.minWidth || 0,
                        columns: i.makeArray(this.$cols.find(".js-list-column").map(function(e, t) {
                            var s = i(t).attr("data-field-code");
                            return {
                                code: s,
                                width: "id" === s ? "" : t.style.width
                            }
                        })),
                        entity: this.options.entity
                    }
                },
                type: "POST",
                dataType: "json",
                success: s.bind(function(t) {
                    e.reload === !0 && "success" === t.status && this._$document.trigger("list:reload")
                }, this)
            })
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/leads", ["require", "jquery", "underscore", "lib/interface/dashboard/tiles/item", "lib/components/lists/base/header", "lib/common/hs"], function(e) {
    "use strict";
    var t, i = (e("jquery"),
    e("underscore"),
    e("lib/interface/dashboard/tiles/item")), s = e("lib/components/lists/base/header"), n = e("lib/common/hs");
    return t = i.extend({
        render: function(e) {
            i.prototype.render.call(this, e),
            this.initTable()
        },
        initTable: function() {
            this._destroyComponent(this.list_header),
            this._destroyComponent(this.contacts_hs);
            var e = this.$el.find("#list_table").parent();
            this.list_header = this._addComponent(s, {
                el: this.$el.find("#list_head"),
                entity: "leads",
                sortable: !1,
                list_holder: this.$el.find(".list__table__holder")
            }),
            this.contacts_hs = this._addComponent(n, {
                wrapper: e.parent(),
                scroller: e
            })
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/goals", ["require", "jquery", "underscore", "lib/common/fn", "lib/interface/dashboard/tiles/item", "lib/interface/controls/responsive_toggler_b"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/interface/dashboard/tiles/item"), r = e("lib/interface/controls/responsive_toggler_b"), a = {
        _lang: {
            last_period: AMOCRM.lang.dashboard_widgets_goals_last_month
        },
        result: {
            current: {
                leads_price: 75e5,
                leads_count: 6500
            },
            last: {
                leads_price: 5e6,
                leads_count: 4e3
            }
        },
        goals: {
            current: {
                leads_price: 1e7,
                leads_count: 1e4
            }
        },
        links: {
            current: {
                goals: "",
                leads: ""
            },
            last: {
                leads: ""
            }
        }
    };
    return t = o.extend({
        scale_values_count: 4,
        events: s.extend({}, o.prototype.events || {}, {
            "click .goals-switcher .control-toggler__item:not(.control-toggler__item-selected)": "onTogglerClick"
        }),
        _selectors: function() {
            return s.extend({}, (o.prototype.selectors || s.noop)() || {}, {
                switcher: "#goals-switcher"
            })
        },
        switcher_values: {
            price: {
                id: "price",
                state: "by_price",
                property_suffix: "price",
                selected: !0
            },
            count: {
                id: "count",
                state: "by_count",
                property_suffix: "count",
                selected: !1
            }
        },
        render: function(e, t) {
            t = t || {},
            (e.plug || !e.access || !e.goals.current.leads_price && !e.goals.current.leads_count) && (e = s.extend({}, e, a)),
            this.template_data || s.each(this.switcher_values, function(e) {
                e.title = AMOCRM.lang["dashboard_widgets_goals_by_" + e.id]
            }),
            this.template_data = e;
            var i = (this.$el.find("#goals-switcher"),
            {})
              , r = {}
              , l = 0
              , c = 0
              , d = 0
              , u = 0
              , h = !1
              , _ = t.id || null;
            _ || (e.goals.current.leads_price || e.goals.current.leads_count ? (e.goals.current.leads_price && e.goals.current.leads_count || (h = !0),
            _ = e.goals.current.leads_price ? "price" : "count") : (e.plug = !0,
            _ = "price")),
            s.each(this.switcher_values, function(e) {
                e.selected = !1
            }),
            this.switcher_values[_].selected = !0,
            i = s.findWhere(this.switcher_values, {
                selected: !0
            }),
            c = e.result.current["leads_" + i.property_suffix],
            d = e.goals.current["leads_" + i.property_suffix],
            e.result.last && (u = e.result.last["leads_" + i.property_suffix]),
            d >= c ? l = c / (d / 180) : c > d ? l = 180 : 0 > c && (l = 0),
            r = {
                state: i.state,
                last_period_lang: e._lang.last_period,
                plug: e.plug,
                access: e.access,
                access_paid: e.access_paid,
                without_switcher: h,
                sections: h ? {} : this.switcher_values,
                current: {
                    result: n.reductNumericValue({
                        value: c,
                        isCurrency: "by_price" == i.state,
                        maxValue: 9999999
                    }),
                    goal: n.reductNumericValue({
                        value: d,
                        isCurrency: "by_price" == i.state
                    }),
                    links: {
                        goals: e.links.current.goals,
                        leads: e.links.current.leads
                    }
                },
                last: {
                    difference: u ? Math.round(c / (u / 100) - 100) : 0,
                    result: n.reductNumericValue({
                        value: u,
                        isCurrency: "by_price" == i.state,
                        maxValue: "by_price" == i.state ? 999 : null
                    }),
                    links: {
                        leads: u ? e.links.last.leads : ""
                    }
                }
            },
            o.prototype.render.call(this, r),
            h || this.togglerInit(i.property_suffix),
            this.animate({
                angle: l
            })
        },
        togglerInit: function(e) {
            this.respToggler = this._addComponent(r, {
                el: this.$el.find(".goals-switcher .responsive-toggler-container"),
                active: e,
                no_compact: !0,
                notFoldOnTouchDevice: !0
            }),
            this.respToggler.resizeToggler()
        },
        animate: function(e) {
            e = e || {};
            var t = {}
              , i = Modernizr.prefixed("transform");
            o.prototype.animate.call(this, e.reverse),
            t[i] = "rotateZ(" + e.angle + "deg)",
            this.$el.find(".goals-o-meter__scale, .goals-o-meter__arrow-wrapper").prepareTransition().css(t)
        },
        onTogglerClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("id");
            this.render(this.template_data, {
                id: s,
                toggled: !0
            }),
            e.stopPropagation()
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/last_attachments", ["require", "jquery", "underscore", "lib/interface/dashboard/tiles/item"], function(e) {
    "use strict";
    var t, i = (e("jquery"),
    e("underscore")), s = e("lib/interface/dashboard/tiles/item");
    return t = s.extend({
        render: function(e) {
            var t = e
              , n = {
                doc: ["doc", "docx"],
                xls: ["xls", "xlsx"],
                pdf: ["pdf"],
                img: ["jpg", "jpeg", "gif", "png", "bmp"]
            };
            i.each(t.files, function(e) {
                var t = e.attachment.split(".")
                  , s = t[t.length - 1].toLowerCase();
                i.each(n, function(t, i) {
                    -1 != t.indexOf(s) && (e.extension = i)
                }),
                e.extension || (e.extension = "other"),
                e.name = t[0],
                e.true_extension = s
            }),
            s.prototype.render.call(this, t)
        }
    })
}),
define("lib/interface/dashboard/tiles/widgets/activity", ["require", "jquery", "underscore", "lib/interface/dashboard/tiles/item", "lib/interface/dashboard/filter"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/interface/dashboard/tiles/item"), o = e("lib/interface/dashboard/filter"), r = {
        task_types: [{
            name: "",
            link: "",
            count: 100
        }, {
            name: "",
            link: "",
            count: 85
        }, {
            name: "",
            link: "",
            count: 60
        }, {
            name: "",
            link: "",
            count: 45
        }, {
            name: "",
            link: "",
            count: 30
        }, {
            name: "",
            link: "",
            count: 15
        }]
    };
    return t = n.extend({
        defaultData: {
            current: {}
        },
        _selectors: function() {
            return s.extend({}, n.prototype._selectors() || {}, {
                bars: ".dashboard-tile-activity__row",
                barValues: ".dashboard-tile-activity__value"
            })
        },
        render: function(e) {
            e = e || {};
            var t = e.plug ? s.extend({}, e, r) : e
              , i = s.max(t.task_types, function(e) {
                return e.count
            }).count;
            s.each(t.task_types, function(e) {
                e.width = Math.round(e.count / i * 100)
            }),
            t.period = o.get("period"),
            n.prototype.render.call(this, t),
            this._dropElemCache("bars"),
            this.animate(s.pluck(t.task_types, "width"))
        },
        animate: function(e, t) {
            n.prototype.animate.call(this, t),
            e = e || [];
            var s = this
              , o = this._elem("bars");
            o.each(function(t, n) {
                var o = i(this);
                o.prepareTransition().css({
                    width: e[t] + "%"
                }).next(s._selector("barValues")).css({
                    left: e[t] + "%"
                })
            })
        }
    })
}),
define("lib/pages/dashboard", ["require", "jquery", "twig", "underscore", "cocktail", "lib/common/urlparams", "lib/common/fn", "lib/common/cookie", "lib/core/page", "lib/components/base/autoload", "lib/components/lists/actions/add_task", "lib/components/base/player", "lib/interface/search/search", "lib/interface/unsorted/pipeline/collection", "lib/interface/unsorted/mixins/settings", "lib/interface/dashboard/top_chart", "lib/interface/dashboard/tiles/index", "lib/interface/dashboard/filter", "lib/interface/users_select", "lib/interface/dashboard/settings", "lib/interface/dashboard/unsorted", "lib/core/users", "lib/common/windowWidthController", "lib/interface/dashboard/tiles/widgets/leads_sources", "lib/interface/dashboard/tiles/widgets/leads_tags", "lib/interface/dashboard/tiles/widgets/sales_forecast", "lib/interface/dashboard/tiles/widgets/leads", "lib/interface/dashboard/tiles/widgets/goals", "lib/interface/dashboard/tiles/widgets/last_attachments", "lib/interface/dashboard/tiles/widgets/activity"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("cocktail"), r = e("lib/common/urlparams"), a = e("lib/common/fn"), l = e("lib/common/cookie"), c = e("lib/core/page"), d = e("lib/components/base/autoload"), u = e("lib/components/lists/actions/add_task"), h = e("lib/components/base/player"), _ = e("lib/interface/search/search"), p = e("lib/interface/unsorted/pipeline/collection"), m = e("lib/interface/unsorted/mixins/settings"), f = e("lib/interface/dashboard/top_chart"), g = e("lib/interface/dashboard/tiles/index"), b = e("lib/interface/dashboard/filter"), v = e("lib/interface/users_select"), y = e("lib/interface/dashboard/settings"), w = e("lib/interface/dashboard/unsorted"), C = e("lib/core/users");
    return e("lib/common/windowWidthController"),
    t = c.extend({
        unsorted_settings: {},
        filter: {
            pipeline_id: null,
            period: null
        },
        user_select: null,
        ns: ".dashboard",
        $background_preview: null,
        $background_full: null,
        endpoint: "/ajax/dashboard/show/",
        template: "/tmpl/dashboard/page.twig",
        preload: ["/tmpl/cards/notes/note_wrapper.twig", "/tmpl/dashboard/events/list.twig"],
        _selectors: function() {
            return {
                eventsTips: "#dashboard_events_filter_tips",
                eventsFilter: ".dashboard_wrapper__events__caption__filter",
                eventsList: "#dashboard_events_list",
                eventsWrapper: "#dashboard_events_wrapper",
                eventsLoadMore: "#dashboard_events_load_more",
                stats: "#dashboard_stats_wrapper",
                topChart: "#top-chart",
                searchResults: "#dashboard-search-results-wrapper"
            }
        },
        _classes: function() {
            return {
                events_list_visible: "is-dashboard-events-visible"
            }
        },
        events: {
            "click .js-dashboard-sel": "modeToggle",
            "click .js-dashboard-manager-filter": "modeToggle",
            "click #dashboard_events_overlay": "eventsPanelToggle",
            "click .js-events-toggler": "eventsPanelToggle",
            "click #dashboard_events_load_more": "eventsLoadMore",
            "click .js-dashboard-add-todo": "showTodoFormModal",
            "click .js-tip.dashboard_wrapper__events__caption__filter__tips": "stopClickOnEventsFilter",
            'change input[name="checkbox_notes_filter"]': "changeEventsFilter",
            "tip:hidden .dashboard_wrapper__events__caption__filter__tips": "filterEvents",
            "click #setup_tiles": "tilesEditingClick",
            "click .js-dashboard-period-filter": "onPeriodClick",
            "click #managers-selector": "initUserSelect",
            "click .responsive_toggler .control-toggler__item": "onPipelineTogglerClick",
            "click #dashborad_pipe_toggler .cubestats-toggler__item": "onPipelineTogglerClick",
            "click .note-chat:not(note-chat-expanded)": "expandChatNote",
            "click .note-chat.note-chat-expanded": "contractChatNote"
        },
        construct: function(e) {
            var t = r.getQueryParam("term") || ""
              , s = !!t;
            i(document.body).addClass("dashboard"),
            this.initSearch(),
            b.set({
                term: t,
                search_mode: s
            }),
            b.on(["sel", "term"], n.bind(function() {
                var e = b.get("search_mode");
                e ? this.refreshSearchResults() : (this.destroySearchResults(),
                this.searchModeOff())
            }, this)),
            e = e || {},
            this.params = e.response || {},
            this.params = n.extend({}, {
                widgets: {
                    top_chart: AMOCRM.constant("top_chart")
                },
                params: AMOCRM.constant("params"),
                themes: AMOCRM.constant("themes")
            }, this.params),
            !this.params.unsorted && s && (this.params.unsorted = n.extend({}, this.params.unsorted || {}, AMOCRM.constant("unsorted") || {})),
            this.$background_preview = this.$el.find(".dashboard-main-bg__preload"),
            this.$background_full = this.$el.find(".dashboard-main-bg__full"),
            this.applyUISettings(),
            o.mixin(this, m),
            this.unsorted_settings = this.getUnsortedSettings(this.params.unsorted || {}),
            this.pipeline_id = r.getQueryParam("pipeline_id"),
            this.user_rights = AMOCRM.constant("user_rights") || {},
            this.$holder = i("#dashboard_holder"),
            this.notes_page = 3;
            var a = r.getQueryParam("sel") || l.get("dash_state") || "all"
              , c = r.getQueryParam("period") || l.get("dash_stats_period") || "week";
            "custom" == a && (a = "all"),
            AMOCRM.router.navigate(r.setQueryParam({
                sel: a,
                period: c
            }), {
                trigger: !1,
                replace: !0
            }),
            this.$el.find('#dashboard_manager_toggler .js-dashboard-manager-filter[data-manager="' + a + '"]').addClass("active"),
            this.$el.find("#dashboard_period_toggler .js-dashboard-period-filter").removeClass("active"),
            this.$el.find('#dashboard_period_toggler .js-dashboard-period-filter[data-period="' + c + '"]').addClass("active"),
            b.set({
                sel: a,
                period: c,
                pipeline_id: this.pipeline_id,
                selected_users: []
            }, {
                silent: !0
            }),
            l.set({
                dash_stats: a,
                dash_stats_period: c
            }),
            s ? this.onSearch(r.getQueryParam("term")) : (this.initTopChart(),
            this.initWidgets(this.params.params.all_available_widgets, n.omit(this.params.params.widgets, "top_chart"))),
            this.initFilters()
        },
        destruct: function() {
            b.destroy(),
            w.destroy(),
            this.top_chart && this.top_chart.destroy(),
            this.dashboard_settings && this.dashboard_settings.destroy(),
            this._$window.off(this.ns),
            i(document.body).removeClass("dashboard")
        },
        _getEndpointData: function() {
            var e = b.get();
            return e.term = r.getQueryParam("term") || "",
            "custom" == e.sel && (e.sel = e.selected_users || [],
            delete e.selected_users),
            e
        },
        _renderPage: function(e) {
            e = e || {};
            var t = !!r.getQueryParam("term");
            this.params = e.response,
            this.params.unsorted && AMOCRM.constant("unsorted", this.params.unsorted),
            e.container = !AMOCRM.data.entity_changed && t ? "#list_holder" : "#page_holder",
            c.prototype._renderPage.call(this, e)
        },
        components: function(e) {
            return [[h, {
                $container: this.$el,
                check_if_chats: !0
            }]]
        },
        initTopChart: function(e) {
            e = e || {};
            var t = this.pipeline_id || r.getQueryParam("pipeline_id")
              , i = {};
            i = {
                period: this.$el.find("#filter_period").val(),
                date_from: +this.$el.find("#filter_date_from").val(),
                date_to: +this.$el.find("#filter_date_to").val()
            },
            this.top_chart = this._addComponent(f, n.extend({}, {
                el: this._elem("topChart"),
                pipeline_id: t,
                data: this.params,
                filter: i
            }, e))
        },
        onUsersSelectSave: function(e) {
            this.user_select.destroy()
        },
        onUsersSelectCancel: function(e) {
            this.user_select.destroy(e, {
                cancel: !0
            }),
            this.$el.find('.js-dashboard-manager-filter[data-manager="all"]').trigger("click")
        },
        initUserSelect: function(e) {
            e.stopPropagation();
            var t = {}
              , s = b.get("selected_users") || [];
            n.each(C.get(), function(e) {
                -1 != s.indexOf(e.id) && (t[e.id] = e)
            });
            var o = this
              , a = i(e.currentTarget)
              , c = a.closest("#dashboard_manager_toggler").find(".active")
              , d = a.parent()
              , u = a.clone()
              , h = this.$el.find("#dashborad_manager_toggler-active")
              , _ = {
                el: a,
                id: "managers-selector",
                class_name: "dashboard__users-select",
                input_name: "test_input",
                select_one: !1,
                not_remove: !1,
                disabled_users: !1,
                existing_items: t,
                items_template: "/tmpl/dashboard/users_select/users_select_selected_items.twig",
                actions: {
                    accept: {
                        class_name: "js-filter-save-managers",
                        text: AMOCRM.lang.dashboard_filter_manager_apply
                    },
                    decline: {
                        class_name: "button-cancel js-filter-cancel-managers",
                        text: AMOCRM.lang.dashboard_filter_manager_reset
                    }
                },
                onSaveClick: o.onUsersSelectSave.bind(o),
                onCancelClick: o.onUsersSelectCancel.bind(o),
                onRenderParams: function() {
                    return {
                        id: ""
                    }
                },
                onInit: function() {
                    h.addClass("dashboard-toggler_active-hidden"),
                    c.removeClass("active")
                },
                onDestroy: function(e, t, s) {
                    s = s || {},
                    d.append(u);
                    var a, c = n.pluck(e, "id") || [], _ = b.get("sel");
                    o.$el.css({
                        "z-index": "auto"
                    }),
                    c.length || "custom" != _ || (_ = "all"),
                    a = c.length ? "custom" : _,
                    l.set({
                        name: "dash_state",
                        value: a
                    }),
                    AMOCRM.router.navigate(r.setQueryParam({
                        sel: a
                    }), {
                        trigger: !1,
                        replace: !0
                    }),
                    b.set({
                        sel: a,
                        selected_users: c.sort()
                    }, {
                        silent: s.cancel
                    }),
                    n.delay(function() {
                        h.removeClass("dashboard-toggler_active-hidden"),
                        o.setMarkerPosition(i("#managers-selector").find('.js-dashboard-manager-filter[data-manager="' + a + '"]'))
                    }, 100)
                }
            };
            this.user_select = new v(_)
        },
        resetCustomManagers: function() {
            this.$el.find("#managers-selector").replaceWith(s({
                ref: "/tmpl/dashboard/users_select/users_select_selected_items.twig"
            }).render())
        },
        onPipelineTogglerClick: function(e) {
            e.preventDefault();
            var t = i(e.currentTarget)
              , s = t.data("id")
              , n = s ? r.setQueryParam({
                pipeline_id: s
            }) : window.location.search;
            t.hasClass("control-toggler__item-selected") || (AMOCRM.router.navigate(n, {
                trigger: !1,
                replace: !0
            }),
            this.pipeline_id = t.data("id"),
            this.filter.pipeline_id = this.pipeline_id,
            b.set({
                pipeline_id: this.pipeline_id
            }))
        },
        onPeriodClick: function(e) {
            e.stopPropagation(),
            e.preventDefault();
            var t, s = i(e.currentTarget), n = s.closest(".dashboard-toggler").find(".active"), o = s.closest(".dashboard-toggler").find(".js-toggler-active-marker"), a = s.data("filter"), c = s.data(a), d = {};
            n.removeClass("active"),
            s.addClass("active"),
            o.css({
                width: s.width(),
                left: s.position().left
            }),
            l.set({
                name: "dash_stats_period",
                value: c
            }),
            d[a] = c,
            this.filter[a] = c,
            t = a ? r.setQueryParam(d) : window.location.search,
            AMOCRM.router.navigate(t, {
                trigger: !1,
                replace: !0
            }),
            b.set(a, c)
        },
        initSearch: function() {
            var e = this;
            this.search = this._addComponent(_, {
                onSearch: function(t) {
                    e.onSearch.call(e, t),
                    t || (e.search.highlight(!1),
                    AMOCRM.router.navigate("/dashboard/?" + r.removeQueryParam(["term", "typing"]))),
                    b.set({
                        term: t || "",
                        search_mode: !!t
                    })
                },
                onClear: n.bind(function() {
                    e.search.highlight(!1),
                    AMOCRM.router.navigate("/dashboard/?" + r.removeQueryParam(["term", "typing"])),
                    b.set({
                        term: "",
                        search_mode: !1
                    })
                }, e),
                no_reload_page: !0
            })
        },
        onSearch: function(e) {
            var t = e && e.length > 3;
            b.set({
                term: e,
                search_mode: t
            })
        },
        searchModeOn: function() {
            var e = this.$el.find("#dashborad_date_toggler")
              , t = this.$el.find("#setup_tiles")
              , i = this.$el.find(".list__top__actions")
              , s = this.$el.find(".dashboard_wrapper__events__toggler")
              , n = this.$el.find(".list__top__preset");
            n.hide(),
            i.hide(),
            s.hide(),
            e.css({
                visibility: "hidden"
            }),
            t.hide(),
            this.top_chart && this.top_chart.hide(),
            this.tiles && this.tiles.hide()
        },
        searchModeOff: function() {
            var e = this.$el.find("#dashborad_date_toggler")
              , t = this.$el.find("#setup_tiles")
              , i = this.$el.find(".list__top__actions")
              , s = this.$el.find(".dashboard_wrapper__events__toggler")
              , o = this.$el.find(".list__top__preset");
            o.show(),
            i.show(),
            s.show(),
            e.css({
                visibility: "visible"
            }),
            t.show(),
            this.top_chart || this.initTopChart({
                force_reload: !0
            }),
            this.top_chart.show(),
            this.tiles ? this.tiles.show() : (this.$el.find("#dashboard_tiles").show(),
            this.initWidgets(this.params.params.all_available_widgets, n.omit(this.params.params.widgets, "top_chart")))
        },
        refreshSearchResults: function() {
            this.sendSearchRequest().done(n.bind(function(e) {
                this.params = e,
                this.searchModeOn(),
                this.renderSearchResults(e)
            }, this))
        },
        sendSearchRequest: function(e) {
            var t = this
              , s = i.Deferred()
              , n = e || b.get("term") || ""
              , o = b.get("sel") || "";
            return "custom" == o && (o = b.get("selected_users") || []),
            this.showLoader(),
            i.ajax({
                url: "/ajax/dashboard/show/",
                type: "GET",
                data: {
                    term: n,
                    sel: o
                }
            }).done(function(e) {
                s.resolve(e.response)
            }).fail(function() {
                s.reject()
            }).always(function() {
                t.hideLoader()
            }),
            s.promise()
        },
        showLoader: function() {
            var e = i("#page_change_loader");
            e.length || (e = i('<div class="default-overlay list__overlay" id="page_change_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            this.$el.append(e)),
            this.loader_shown || (e.trigger("overlay:show"),
            this.loader_shown = !0)
        },
        hideLoader: function() {
            this.loader_shown && (i("#page_change_loader").trigger("overlay:hide"),
            this.loader_shown = !1)
        },
        renderSearchResults: function(e) {
            var t = this._elem("searchResults")
              , i = s({
                ref: "interface/dashboard/search.twig"
            }).render({
                contacts: {
                    items: e.contacts.items,
                    fields: e.contacts.fields
                },
                leads: {
                    items: e.leads.items,
                    fields: e.leads.fields,
                    filter: e.leads.filter
                }
            });
            t.html(i)
        },
        destroySearchResults: function() {
            var e = this._elem("searchResults");
            e.empty()
        },
        applyUISettings: function() {
            var e = this.params.themes[this.params.params.theme];
            this.setBackgroundImage(e.image_url)
        },
        setBackgroundImage: function(e) {
            var t = this
              , i = new Image;
            i.onload = function() {
                t.insertBackgroundImage.call(t, i.src)
            }
            ,
            i.src = e
        },
        insertBackgroundImage: function(e) {
            var t = this
              , i = AMOCRM.is_touch_device ? 5e3 : 15e3;
            this.$background_full.css({
                "background-image": "url(" + e + ")"
            }).prepareTransition().addClass("dashboard-main-bg_scaled"),
            this.$background_preview.prepareTransition().addClass("dashboard-main-bg_hidden dashboard-main-bg_scaled"),
            this.backgroundChangeTimer = setTimeout(function() {
                t.$background_preview.hide().removeClass("dashboard-main-bg_hidden")
            }, i)
        },
        hideTopPanel: function() {
            var e = this.$el.find(".dashboard-top-block");
            this.top_chart.hide(),
            e.addClass("dashboard-top-block_hidden").prepareTransition(),
            this.$el.find(".dashboard-main-holder").addClass("dashboard-main-holder_settings-mode"),
            this.$el.find(".dashboard_wrapper__events__toggler").removeClass("js-events-toggler")
        },
        showTopPanel: function() {
            var e = this.$el.find(".dashboard-top-block");
            this.$el.find(".dashboard-main-holder").removeClass("dashboard-main-holder_settings-mode"),
            this.$el.find(".dashboard_wrapper__events__toggler").addClass("js-events-toggler"),
            this.top_chart.show(),
            e.show().prepareTransition().removeClass("dashboard-top-block_hidden"),
            this.tiles_edit = !1,
            this.tiles.setEditing(this.tiles_edit)
        },
        tilesEditingClick: function() {
            var e = this
              , t = this.$el.find(".dashboard-top-block")
              , i = e.$el.find(".dashboard__title .title")
              , s = e.params.params.theme
              , o = e.params.params.color_scheme || e.params.themes[s].color_scheme;
            this.tiles_edit || (this.tiles_edit = !0,
            this.tiles.setEditing(this.tiles_edit),
            setTimeout(function() {
                var r = {
                    account_name: i.text(),
                    selected_theme: s,
                    themes: e.params.themes,
                    selected_color_scheme: o
                };
                e.dashboard_settings = new y({
                    el: e.$el.find("#dashboard-settings-wrapper"),
                    data: r,
                    $imageContainer: e.$background_full,
                    $imagePreviewContainer: e.$background_preview,
                    onClose: function() {
                        e.showTopPanel.call(e)
                    },
                    onAnimate: function(t) {
                        t ? e.tiles.turnSettingsModeOff() : e.tiles.turnSettingsModeOn()
                    },
                    onRollbackSettings: function() {
                        e.tiles.resetGridItems()
                    },
                    hasTilesPositionChanges: function() {
                        return e.tiles.hasPositionChanges()
                    },
                    getTilesSettings: function() {
                        return e.tiles.getGridItemsSettings()
                    },
                    getAvailableWidgets: function() {
                        return e.tiles.getAvailableItems()
                    },
                    onRender: function() {
                        e.hideTopPanel(),
                        t.hide()
                    },
                    onSave: function(t, s) {
                        t = t || {},
                        e.params.params.color_scheme = t.theme.color_scheme,
                        e.params.params.theme = t.theme.code,
                        i.text(t.account_name),
                        e.tiles.savePositions(),
                        e.refreshWidgets(n.keys(e.tiles.elemsIndex), b.get()),
                        s && s.done(function(t) {
                            e.insertBackgroundImage.call(e, t)
                        })
                    },
                    onWidgetAdd: function(t, i) {
                        i = i || e.tiles.getAvailableItems()[t],
                        i.plug = !0;
                        var s = e.tiles.addGridItem(t, i, !0);
                        try {
                            e.tiles.renderGridItem(t, i)
                        } catch (n) {}
                        s.edit(!0),
                        s.makeDraggable(!0)
                    },
                    onThemeChange: function() {
                        clearTimeout(e.backgroundChangeTimer)
                    }
                })
            }, 500))
        },
        initWidgets: function(t, i) {
            var s = this
              , o = document.getElementById("dashboard_tiles");
            this.tiles = this._addComponent(g, {
                el: o,
                container: o,
                items: i,
                available: t,
                types: {
                    leads_sources: e("lib/interface/dashboard/tiles/widgets/leads_sources"),
                    leads_tags: e("lib/interface/dashboard/tiles/widgets/leads_tags"),
                    sales_forecast: e("lib/interface/dashboard/tiles/widgets/sales_forecast"),
                    leads: e("lib/interface/dashboard/tiles/widgets/leads"),
                    goals: e("lib/interface/dashboard/tiles/widgets/goals"),
                    last_attachments: e("lib/interface/dashboard/tiles/widgets/last_attachments"),
                    activity: e("lib/interface/dashboard/tiles/widgets/activity")
                },
                onDrop: function() {
                    s.dashboard_settings && s.dashboard_settings.onDropTile(s.tiles.hasPositionChanges())
                },
                onItemRemoved: function() {
                    s.dashboard_settings.onTilesItemRemoved()
                }
            }),
            this.refreshWidgets(n.keys(this.tiles.elemsIndex), b.get()),
            b.on(["period", "sel", "selected_users"], function() {
                var e = b.get("search_mode");
                e || s.refreshWidgets(n.union(n.keys(s.tiles.elemsIndex), ["top_chart"]), b.get())
            })
        },
        refreshWidgets: function(e, t) {
            var s = i.Deferred();
            i.ajax({
                url: "/ajax/dashboard/show/",
                type: "GET",
                data: {
                    view: this.top_chart.options.type,
                    sel: ("custom" == t.sel ? t.selected_users || [] : t.sel) || "all",
                    selected_users: b.get("selected_users"),
                    period: t.period || "week",
                    only: e.join(",")
                }
            }).done(n.bind(function(e, t) {
                s.resolve(e.response),
                this.tiles.renderGridItems({
                    widgets: n.omit(e.response.widgets, "top_chart"),
                    response: e.response,
                    unsorted: this.unsorted_settings
                })
            }, this)),
            n.contains(e, "top_chart") && this.top_chart.refresh({
                data: s.promise()
            })
        },
        initFilters: function() {
            var e = this.$el.find(".dashboard-toggler");
            e.each(function() {
                var e = i(this)
                  , t = e.find(".active")
                  , s = e.find(".js-toggler-active-marker");
                t.length && s.css({
                    width: t.width(),
                    left: t.position().left
                }).show()
            })
        },
        insertNote: function(e, t) {
            var n = this.getNoteBy(e, !0)
              , o = s({
                ref: "/tmpl/cards/notes/note_wrapper.twig"
            }).render({
                note: t,
                page_context: "dashboard"
            });
            if (n)
                n.before(o);
            else {
                var r = i(this._selector("eventsLoadMore"));
                r && r.length ? r.before(o) : this._elem("eventsList").append(o)
            }
            return n && n.length > 0
        },
        clearUnsortedData: function() {
            return this.unsorted_used = !1,
            this
        },
        getEventsFromUnsorted: function(e) {
            if (!this.unsorted_settings.denied && this.unsorted_settings.show) {
                this._dropElemCache("eventsList");
                var t, i, s, o = this._addComponent(p), r = "10", l = this._elem("eventsList").find(".dashboard_wrapper__events__plug").length > 0, c = [];
                e = n.extend({
                    repeat: !1
                }, e),
                this.cant_load_more_unsorted || this.events_filter && -1 === n.indexOf(this.events_filter.split(","), r) || (this.unsorted_used = this.unsorted_used || [],
                s = e.repeat ? 100 : 20,
                i = Math.floor(this.unsorted_used.length / s) + 1,
                o.fetch({
                    data: {
                        PAGEN_1: i,
                        page_size: s,
                        categories: ["sip"]
                    },
                    success: n.bind(function(i) {
                        return i.each(function(i) {
                            if (!(e.repeat && t || n.indexOf(this.unsorted_used, i.get("uid")) >= 0)) {
                                var s = i.get("source_data")
                                  , o = a.getMoment(s.date).unix()
                                  , r = {
                                    type: "call_in_out",
                                    id: n.uniqueId(),
                                    icon: 0,
                                    user: s.to,
                                    timestamp: o,
                                    date: o,
                                    editable: 0,
                                    deletable: 0,
                                    linked: 0,
                                    params: {
                                        text: "",
                                        direction: "IN",
                                        call_text: AMOCRM.lang.incoming_call,
                                        phone: s.from,
                                        from: a.getUserName(s.to) || a.getUserName(s.to),
                                        duration: a.time(s.duration),
                                        link: s.link,
                                        src: s.service,
                                        element: 0
                                    }
                                };
                                l ? c.push(r) : t = !this.insertNote(o, r),
                                this.unsorted_used.push(i.get("uid"))
                            }
                        }, this),
                        t || l || e.repeat ? (this.cant_load_more_unsorted = i.length < 1,
                        this.unsorted_used.length || this.hideTip(r, !0),
                        l ? void this.updateEvents(c, {
                            from_unsorted: !0
                        }) : void 0) : void this.getEventsFromUnsorted({
                            repeat: !0
                        })
                    }, this)
                }))
            }
        },
        hideTip: function(e, t) {
            var s = i(this._selector("eventsTips")).find('.js-tips-item[data-value="' + e + '"]');
            t && 1 !== parseInt(s.data("forced")) || s.hide()
        },
        getNoteBy: function(e, t) {
            var s = this._elem("eventsList").find(".note-wrapper")
              , n = !1;
            return s.each(function(s, o) {
                var r = i(o)
                  , a = parseInt(r.data("timestamp"));
                n || (t && e > a ? n = r : !t && a > e && (n = r))
            }),
            n
        },
        setMarkerPosition: function(e) {
            if (e.length) {
                var t = e.closest(".dashboard-toggler").find(".active")
                  , i = e.closest(".dashboard-toggler").find(".js-toggler-active-marker");
                t.removeClass("active"),
                e.addClass("active"),
                i.css({
                    width: e.outerWidth(),
                    left: e.position().left
                })
            }
        },
        modeToggle: function(e) {
            var t = this
              , s = i(e.currentTarget)
              , n = s.attr("data-manager");
            if (i(window).off("resize" + this.ns),
            "custom" == n)
                this.initUserSelect(e);
            else {
                var o = b.get("sel");
                "custom" == o && b.set({
                    selected_users: []
                }, {
                    silent: !0
                }),
                this.resetCustomManagers(),
                l.set({
                    name: "dash_state",
                    value: n
                }),
                AMOCRM.router.navigate(r.setQueryParam({
                    sel: n
                }), {
                    trigger: !1,
                    replace: !0
                }),
                b.set({
                    sel: n,
                    selected_users: []
                }),
                this.setMarkerPosition(s)
            }
            i(window).on("resize" + this.ns, function() {
                t.setMarkerPosition(s)
            }),
            e.preventDefault()
        },
        eventsPanelToggle: function(e) {
            var t = n.isBoolean(e) ? e ? "removeClass" : "addClass" : "toggleClass";
            this.$holder[t](this._class("events_list_visible")),
            e = n.isBoolean(e) ? e : !this.$holder.hasClass(this._class("events_list_visible")),
            this.makeEventsOverlay(!e),
            this.filterEvents()
        },
        eventsLoadMore: function() {
            this.loadMoreEvents()
        },
        showTodoFormModal: function() {
            new u({
                entity: "todo",
                need_linked_input: !0,
                onSaveSuccess: function() {
                    i(document).trigger("page:reload", ["dashboard"])
                }
            })
        },
        stopClickOnEventsFilter: function(e) {
            e.stopPropagation()
        },
        filterEvents: function() {
            var e = i(this._selector("eventsFilter"))
              , t = this.getEventsFilter();
            if (!(this.notes_filter_loading || this.events_filter && this.events_filter == t)) {
                this.events_filter = t,
                this.notes_filter_loading = !0,
                e.addClass("loading");
                var s = this.events_filter
                  , o = s.split(",")
                  , r = "types[]=";
                s ? (JSON && JSON.stringify && l.set({
                    name: "dash_types",
                    value: JSON.stringify(o)
                }),
                r += o.join("&types[]=")) : r = "",
                i.ajax({
                    url: "/private/ajax/dashboard/notes.php",
                    data: r,
                    dataType: "json"
                }).always(n.bind(function() {
                    e.removeClass("loading"),
                    this.notes_filter_loading = !1
                }, this)).done(n.bind(function(e) {
                    this.updateEvents(e.response.notes, {
                        has_pipelines: e.response.has_pipelines
                    }),
                    this.notes_page = 1
                }, this))
            }
        },
        checkSearch: function(e) {
            i("#dashboard_stats_wrapper")[e ? "hide" : "show"]()
        },
        makeEventsOverlay: function(e) {
            var t;
            e ? (i("#dashboard_intro").append(t = i('<div class="default-overlay" id="dashboard_events_overlay" style="z-index: 22; position: absolute;"></div>')),
            t.trigger("overlay:show")) : i("#dashboard_events_overlay").trigger("overlay:hide", {
                instantly: !0
            })
        },
        makeAutoload: function(e) {
            return e ? this.loader = this._addComponent(d, {
                element: document.getElementById("dashboard_events_list"),
                onLoadMore: n.bind(this.loadMoreEvents, this)
            }) : this._destroyComponent(this.loader),
            this
        },
        loadMoreEvents: function() {
            var e = i(this._selector("eventsLoadMore"))
              , t = n.bind(function() {
                e.removeClass("leads-pipeline__autoload-load-more-shown").one(AMOCRM.transition_event, function() {
                    i(this).remove()
                })
            }, this);
            return this.cant_load_more && this.cant_load_more_unsorted && t.call(this),
            this.more_loading || this.cant_load_more ? (this.cant_load_more && this.getEventsFromUnsorted(),
            !1) : (this.more_loading = !0,
            e.addClass("pipeline_leads__load_more-loading"),
            void i.ajax({
                url: "/private/ajax/dashboard/notes.php",
                data: {
                    page: ++this.notes_page
                },
                dataType: "json"
            }).always(n.bind(function() {
                this.more_loading = !1,
                e.removeClass("pipeline_leads__load_more-loading")
            }, this)).done(n.bind(function(e) {
                var t = "";
                e.response && e.response.notes && !n.isArray(e.response.notes) ? (n.each(e.response.notes, function(e) {
                    t += s({
                        ref: "/tmpl/cards/notes/note_wrapper.twig"
                    }).render({
                        lang: AMOCRM.lang,
                        note: e,
                        page_context: "dashboard"
                    })
                }, this),
                i(this._selector("eventsLoadMore")).before(t),
                this.getEventsFromUnsorted()) : this.cant_load_more = !0
            }, this)).fail(n.bind(function() {
                this.cant_load_more = !0
            }, this)))
        },
        getEventsFilter: function() {
            return i.makeArray(i(this._selector("eventsTips")).find("input:checked").map(function() {
                return parseInt(i(this).val())
            })).join(",")
        },
        updateEvents: function(e, t) {
            e && (t = n.extend({
                from_unsorted: !1,
                has_pipelines: !1
            }, t),
            this._dropElemCache("eventsList"),
            this._elem("eventsList").replaceWith(s({
                ref: "/tmpl/dashboard/events/list.twig"
            }).render({
                lang: AMOCRM.lang,
                notes: e,
                has_pipelines: t.has_pipelines
            })),
            this.cant_load_more = !1,
            this.$holder.hasClass(this._class("events_list_visible")) && this._$document.trigger("overlay:unfix").trigger("overlay:fix"),
            this.makeAutoload(!1).makeAutoload(!0, !AMOCRM.notSmall),
            t.from_unsorted || this.clearUnsortedData().getEventsFromUnsorted())
        },
        expandChatNote: function(e) {
            var t = i(e.target).closest(".note-chat");
            t.addClass("note-chat-expanded")
        },
        contractChatNote: function(e) {
            var t = i(e.target).closest(".note-chat");
            t.removeClass("note-chat-expanded")
        }
    })
}),
define("lib/pages/base/pipeline_list", ["require", "jquery", "underscore", "twig", "lib/core/page", "lib/components/filter/filter", "lib/common/fn", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/core/page")
      , o = e("lib/components/filter/filter")
      , r = e("lib/common/fn")
      , a = e("lib/common/urlparams")
      , l = {
        leads: {
            full: {
                template: "/tmpl/leads/list.twig"
            },
            partial: {
                template: "/tmpl/leads/inner.twig"
            }
        },
        "leads-pipeline": {
            full: {
                template: "/tmpl/leads/pipeline/index.twig"
            },
            partial: {
                template: "/tmpl/leads/pipeline/inner.twig"
            }
        },
        contacts: {
            full: {
                template: "/tmpl/contacts/list.twig"
            },
            partial: {
                template: "/tmpl/list/inner.twig"
            }
        },
        todo: {
            full: {
                template: "/tmpl/todo/list.twig"
            },
            partial: {
                template: "/tmpl/list/inner.twig"
            }
        },
        events: {
            full: {
                template: "/tmpl/events/list.twig"
            },
            partial: {
                template: "/tmpl/events/inner.twig"
            }
        },
        authlog: {
            full: {
                template: "/tmpl/authlog/list.twig"
            },
            partial: {
                template: "/tmpl/authlog/inner.twig"
            }
        },
        customers: {
            full: {
                template: "/tmpl/customers/list.twig"
            },
            partial: {
                template: "/tmpl/list/inner.twig"
            }
        },
        "customers-pipeline": {
            full: {
                template: "/tmpl/customers/pipeline/page.twig"
            },
            partial: {
                template: "/tmpl/customers/pipeline/inner.twig"
            }
        }
    };
    return n.extend({
        _prepareFilter: function(e) {
            var t = AMOCRM.constant("default_filter") || {};
            e = r.cleanResponse(e),
            e && e.default_filter && (t[AMOCRM.data.current_entity] = e.default_filter,
            AMOCRM.constant("default_filter", t)),
            this._needPartialRender() && e ? (this._renderPagination(e.pagination),
            this._renderSummary(e),
            o.prototype.refreshAll({
                entity: AMOCRM.getBaseEntity(),
                filter: (i.first(e.filters) || {}).params || e.filter,
                filters: e.filters || []
            })) : this.fillSearchFilterInput()
        },
        _renderPagination: function(e) {
            var i;
            e && (i = e.total > 1,
            t(".list__body-right").toggleClass("list__body-right_has-footer", i),
            i ? t("#list__footer").replaceWith(s({
                ref: "/tmpl/list/common/footer.twig"
            }).render({
                pagination: e
            })) : t("#list__footer").remove())
        },
        _renderSummary: function(e) {
            var t = "/tmpl/%s/common/search_summary.twig".replace("%s", AMOCRM.getBaseEntity())
              , i = this.$("#list-top-search__summary")
              , n = e && e.summary;
            n && i.length && i.html(s({
                ref: t
            }).render({
                summary: n
            }))
        },
        fillSearchFilterInput: function() {
            var e = t("#search_input")
              , i = a.getQueryParam("term") || "";
            i.length && "" === e.val() && e.val(i).focus()
        },
        _getTemplateAndHolder: function() {
            var e = AMOCRM.data.current_entity.replace(/-trash$/g, "")
              , t = this._needPartialRender() ? "partial" : "full"
              , i = l[e][t]
              , s = i.holder;
            if (!s)
                switch (t) {
                case "full":
                    s = "#page_holder";
                    break;
                case "partial":
                    s = "#list_holder"
                }
            return {
                container: s,
                template: i.template
            }
        },
        _needPartialRender: function() {
            return !AMOCRM.first_load && !AMOCRM.data.entity_changed && this._isSearchWithinPage()
        },
        _isSearchWithinPage: function() {
            var e = AMOCRM.router.paths && AMOCRM.router.paths.length > 1 && AMOCRM.router.paths[1].replace(/\?.*$/g, "");
            return e && e === i(AMOCRM.router.paths).first().replace(/\?.*$/g, "") && !!a.getQueryParam("term").length
        }
    })
}),
define("lib/interface/card/mixins/tip_actions", ["require", "lib/components/base/modal", "twig"], function(e) {
    "use strict";
    var t = e("lib/components/base/modal")
      , i = e("twig");
    return {
        tipActions: {
            company: function(e) {
                var t = e.find(":input:visible").attr("data-value-id");
                t && AMOCRM.router.navigate("/companies/detail/" + t, {
                    trigger: !0
                })
            },
            edit: function(e) {
                this.focusAndSetCursorToEnd(e.find(":input:visible"))
            },
            map: function(e, t) {
                window.open("//maps.google.com/?q=" + encodeURIComponent(t), "_blank")
            },
            editUS: function(e) {
                var t = e.find(".control-address");
                t.trigger("address:edit")
            },
            mapUS: function(e, t) {
                t = e.find(".js-google-maps-link").val(),
                window.open("//maps.google.com/?q=" + encodeURIComponent(t), "_blank")
            },
            phone: function(e, t) {
                window.location = "callto:" + t
            },
            email: function(e, t) {
                window.open("mailto:" + t + "?bcc=" + AMOCRM.lang.mail, "_blank")
            },
            email_with_template: function(e, t) {
                $(document).trigger("notes:compose:switch", ["email", {
                    email: t,
                    name: this.model.get("contact[NAME]")
                }])
            },
            link: function(e, t) {
                var i = (t || "").toString().match(/^([\w]{0,}\:\/\/)([\S\s]+)$/);
                i && i.length ? window.open(i[1] + i[2], "_blank") : window.open("//" + t, "_blank")
            },
            set_main_profile: function(e, s) {
                var n = new t
                  , o = this.$el
                  , r = {}
                  , a = 0
                  , l = "contacts" === AMOCRM.getBaseEntity();
                l ? (r = o.find(".card-entity-form__top-cover"),
                a = this.id) : (r = o.find(".linked-form__field-userpic"),
                a = e.closest(".linked-form").find('input[name="ID"]').val()),
                $.ajax({
                    url: "/ajax/v2/profiles/set_main/",
                    method: "POST",
                    contentType: "application/x-www-form-urlencoded",
                    dataType: "json",
                    data: {
                        profile_id: s,
                        contact_id: a
                    },
                    success: function(t) {
                        if (t.success) {
                            if (l)
                                t.data && t.data["new"] && t.data["new"].profile_avatar ? r.attr("style", "background-image: url(" + t.data["new"].profile_avatar + ")") : r.removeAttr("style");
                            else if (t.data && t.data["new"]) {
                                var s = i({
                                    ref: "/tmpl/cards/forms/userpic.twig"
                                }).render({
                                    contact_id: a,
                                    profile: t.data["new"]
                                });
                                r.html(s)
                            }
                            e.find('.js-tips-item[data-type="set_main_profile"]').remove();
                            var c = o.find('input[name="profiles[' + t.data.old.id + ']"]')
                              , d = i({
                                ref: "/tmpl/cards/forms/fields/profiles.twig"
                            }).render({
                                profile: t.data.old,
                                value: c.val(),
                                name: c.attr("name")
                            });
                            c.parent().html(d),
                            n.showSuccess(AMOCRM.lang.modal_success)
                        } else
                            n.showError(AMOCRM.lang.modal_error_caption)
                    },
                    error: function(e) {
                        n.showError(AMOCRM.lang.modal_error_caption)
                    }
                })
            },
            unlink_profile: function(e, s) {
                var n = new t
                  , o = this.$el
                  , r = {}
                  , a = 0
                  , l = ""
                  , c = "contacts" === AMOCRM.getBaseEntity()
                  , d = 0 === e.find('.js-tips-item[data-type="set_main_profile"]').length;
                c ? (r = o.find(".card-entity-form__top-cover"),
                a = this.id) : (r = o.find(".linked-form__field-userpic"),
                a = e.closest(".linked-form").find('input[name="ID"]').val()),
                $.ajax({
                    url: "/ajax/v2/profiles/unlink/",
                    method: "POST",
                    contentType: "application/x-www-form-urlencoded",
                    dataType: "json",
                    data: {
                        profile_id: s,
                        contact_id: a,
                        is_main: d ? 1 : 0
                    },
                    success: function(t) {
                        if (t.success) {
                            if (t.new_main) {
                                var s = o.find('input[name="profiles[' + t.new_main.id + ']"]');
                                s.parent().html(i({
                                    ref: "/tmpl/cards/forms/fields/profiles.twig"
                                }).render({
                                    profile: t.new_main,
                                    value: s.val(),
                                    name: s.attr("name")
                                })),
                                c ? t.new_main.profile_avatar ? r.attr("style", "background-image: url(" + t.new_main.profile_avatar + ")") : r.removeAttr("style") : t.new_main && (l = i({
                                    ref: "/tmpl/cards/forms/userpic.twig"
                                }).render({
                                    contact_id: a,
                                    profile: t.new_main
                                }),
                                r.replaceWith(l))
                            } else
                                c ? r.removeAttr("style") : d && (l = i({
                                    ref: "/tmpl/cards/forms/userpic.twig"
                                }).render({
                                    contact_id: a,
                                    profile: {}
                                }),
                                r.replaceWith(l));
                            e.closest(".linked-form__field-profiles").remove(),
                            n.showSuccess(AMOCRM.lang.modal_success)
                        } else
                            n.showError(AMOCRM.lang.modal_error_caption)
                    },
                    error: function(e) {
                        n.showError(AMOCRM.lang.modal_error_caption)
                    }
                })
            }
        }
    }
}),
define("lib/components/lists/edit/cell/tip", ["require", "jquery", "underscore", "cocktail", "lib/components/lists/base/tip", "lib/common/fn", "lib/interface/card/mixins/tip_actions"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("cocktail")
      , n = e("lib/components/lists/base/tip")
      , o = e("lib/common/fn")
      , r = e("lib/interface/card/mixins/tip_actions");
    return n.extend({
        _class_name: "cell-tip",
        events: function() {
            var e = i.extend({}, i.result(n.prototype, "events"), {
                "click .js-tips-item:not(.js-tips-item-widget)": "onCellTipClick",
                "click .js-tips-item-widget": "onCellWidgetTipClick"
            });
            return e
        },
        initialize: function() {
            return n.prototype.initialize.apply(this, arguments),
            s.mixin(this, r),
            this
        },
        setTipParams: function() {
            return AMOCRM.is_touch_device && this.tip_params.items.push({
                icon: "pencil",
                text: o.i18n("Edit"),
                class_name: "js-tips-item-edit",
                additional_data: 'data-type="edit"'
            }),
            this
        },
        onCellTipClick: function(e) {
            var s = t(e.currentTarget)
              , n = s.data("type");
            if (n) {
                switch (e.stopPropagation(),
                e.preventDefault(),
                n) {
                case "edit":
                    return this.triggerCellEdit();
                case "close-task":
                    return this.triggerCellEdit({
                        close_task: !0
                    })
                }
                return i.isFunction(this.tipActions[n]) ? (this.destroy(),
                this.tipActions[n].call(this, null, this.options.value)) : void 0
            }
        },
        onCellWidgetTipClick: function(e) {
            var s = t(e.currentTarget)
              , n = s.data("id")
              , o = this.options.value || ""
              , r = s.data("cf_code")
              , a = AMOCRM.widgets.cf_actions[r][n] || !1;
            switch (r) {
            case "phone":
                o = o.toString().replace(/([^0-9+])/g, "")
            }
            if (i.isFunction(a))
                try {
                    a({
                        model: this.options.model,
                        value: o
                    })
                } catch (l) {
                    i.isFunction(this.options.showWidgetErrorNotification) && this.options.showWidgetErrorNotification(n)
                } finally {
                    this.destroy()
                }
        },
        triggerCellEdit: function(e) {
            i.isFunction(this.options.triggerCellEdit) && (this.destroy(),
            this.options.triggerCellEdit(e))
        }
    })
}),
define("lib/components/lists/base/mixins/fast_tags", ["require", "underscore", "lib/interface/fast_tags"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/fast_tags")
      , s = 2
      , n = 23
      , o = 100;
    return {
        initFastTags: function(e) {
            var i, s = $(e.currentTarget), n = s.closest(".js-list-row__cell"), o = this.model.get("entity");
            this.model.get("is_deleted") || (i = "lead" === o ? this.user_rights : this.model && t.isFunction(this.model.hasRightsFor) ? {
                manage_tags: this.model.hasRightsFor("edit")
            } : this.user_rights[o.toUpperCase()],
            e.stopPropagation(),
            i && i.manage_tags && t.isFunction(this.options.scrollIntoView) && this.options.scrollIntoView(n, 0, t.bind(this._initFastTags, this, s)))
        },
        _initFastTags: function(e) {
            var r = this
              , a = e.closest(".content-table__item__inner")
              , l = this.model.get("tags")
              , c = AMOCRM.getBaseEntity()
              , d = $("#left_menu").width()
              , u = a.find(".list-row__template-name__table-wrapper__tags__inner__wrapper");
            return this._$document.trigger("controls:hide.fast_tags"),
            u.hide(),
            this._addComponent(i, {
                $el: a,
                $container: $("#list_page_holder"),
                class_name: "custom-scroll",
                id: [this.model.id],
                tags: l.items,
                area: "list",
                entity: c,
                onInit: function() {
                    $(document).trigger("overlay:fix"),
                    t.isFunction(r.options.pauseHS) && r.options.pauseHS(),
                    this.setPositions()
                },
                onDestroy: function() {
                    $(document).trigger("overlay:unfix"),
                    t.isFunction(r.options.resumeHS) && r.options.resumeHS(),
                    this.$el.remove(),
                    u.show()
                },
                onSetPositions: function() {
                    var e = a[0].offsetWidth
                      , t = n * e / o
                      , i = this.$el.find(".js-multisuggest-input");
                    this.$el.css({
                        position: "absolute",
                        top: a.offset().top + s,
                        left: a.offset().left - d + t,
                        width: a[0].offsetWidth - t
                    }),
                    this.$list.css({
                        left: i.offset().left - d
                    })
                },
                onSaveSuccess: function(e) {
                    r.model.set({
                        tags: {
                            items: e
                        }
                    }),
                    t.isFunction(r.options.updateFilterTagsLib) && r.options.updateFilterTagsLib(this._tags_for_addition, this._tags_for_deletion)
                }
            }),
            !1
        }
    }
}),
define("lib/components/lists/base/view", ["require", "jquery", "underscore", "twig", "cocktail", "lib/core/view", "lib/components/base/form", "lib/components/lists/multiactions", "lib/components/lists/edit/cell/tip", "lib/interface/card/mixins/tip_actions", "lib/components/lists/base/mixins/fast_tags", "vendor/plugins/jquery.visible"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("cocktail")
      , o = e("lib/core/view")
      , r = e("lib/components/base/form")
      , a = e("lib/components/lists/multiactions")
      , l = e("lib/components/lists/edit/cell/tip")
      , c = e("lib/interface/card/mixins/tip_actions")
      , d = e("lib/components/lists/base/mixins/fast_tags")
      , u = {};
    return e("vendor/plugins/jquery.visible"),
    u.Model = r.Model.extend({}),
    u.View = o.extend({
        tagName: "div",
        className: "list-row js-list-row",
        _desktop_events: {
            "click .js-show-data-actions": "showTipActions"
        },
        _common_events: {
            'change input[type="checkbox"]': "showMultiactions",
            "show:actions": "spaceKeyPressed",
            "click.hideactions": "hideActions",
            "click .list-row__cell-id": "stopActions",
            "click .js-tag-add": "initFastTags",
            "click .js-list-tag": "initFastTags",
            "click.draghead": "dragHead",
            "show:card": "enterKeyPressed",
            dblclick: "showCard"
        },
        events: function() {
            var e = AMOCRM.is_touch_device ? {} : this._desktop_events;
            return i.extend(this._common_events, e)
        },
        _templates: ["/tmpl/list/cells.twig", "/tmpl/controls/tags.twig"],
        _current_entity: function() {
            return AMOCRM.data.current_entity
        },
        _selectors: function() {
            return {
                tags_add: ".list-row__template-name__table-add_tag.tag.tag-add.js-tag-add",
                checkbox_cell_input: '.list-row__cell-id input[type="checkbox"]'
            }
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            e = e || {},
            this.options = e,
            this.current_entity = i.result(this, "_current_entity"),
            this.user_rights = AMOCRM.constant("user_rights")[this.current_entity] || {},
            this.el.id = "list_item_" + this.model.id,
            this.$el.attr("data-id", this.model.id),
            this._setListElemsCache(),
            s._preload(this._templates, i.bind(this.onTemplatesPreload, this))(),
            this.listenTo(this.model, "change:tags", this.renderTags),
            this.listenTo(this.model, "destroy", i.bind(this.destroy, this, !0)),
            this.listenTo(this.model, "destroy:silent", i.bind(this.destroy, this, !1)),
            this.listenTo(this.model, "hide_tags", this.hideTags),
            this.listenTo(this.model, "disable_checkbox", this.disableCheckbox),
            this.listenTo(this.model, "render:full", this.render)
        },
        onTemplatesPreload: i.noop,
        _setListElemsCache: function() {
            this._elems = {
                $list_head: t("#list_head"),
                $list_table: t("#list_table"),
                $list_holder: t("#list_holder"),
                $list_all_checker: t("#list_all_checker"),
                $list_multiple_actions: t("#list_multiple_actions")
            }
        },
        render: function(e) {
            return e = t.extend({}, {
                item: t.extend({}, this.model.toJSON(), e, {
                    is_checked: 1 == this._elems.$list_all_checker.data("all-checked")
                })
            }, e),
            this.$el.html(s({
                ref: "/tmpl/list/cells.twig"
            }).render(e)),
            this
        },
        hideTags: function() {
            this._findElem("tags_add").remove()
        },
        disableCheckbox: function() {
            this._findElem("checkbox_cell_input").trigger("controls:disable"),
            this.model.set("disableCheckbox", !0)
        },
        enterKeyPressed: function(e) {
            var t = this.$el;
            this.showCard({
                target: t,
                currentTarget: t
            })
        },
        showCard: function(e) {
            var i, s, n = t(e.target);
            return n.closest(".list-row__cell-id").length || n.hasClass("js-navigate-link") || n.closest("#list_table").hasClass("list-body-is-trash") ? void 0 : (i = t(e.currentTarget),
            s = i.find(".list-row__template-name__table-wrapper__name-link").attr("href"),
            !s && i.length > 0 && void 0 !== i.data("url") && i.data("url").length > 3 && (s = i.data("url")),
            "todo" === AMOCRM.getBaseEntity() ? void n.trigger(AMOCRM.click_event) : (AMOCRM.router.navigate(s, {
                trigger: !0
            }),
            !1))
        },
        renderTags: function() {
            var e = this.model.get("tags") || {
                items: []
            }
              , t = this.$(".content-table__item__inner-template-name")
              , n = e.items && e.items.length;
            t.toggleClass("has-tags", n).find(".list-row__template-name__tags").html(s({
                ref: "/tmpl/controls/tags.twig"
            }).render({
                items: i.map(e.items, function(e) {
                    return i.extend({
                        label: e.title
                    }, e)
                })
            }))
        },
        dragHead: function() {
            var e = this.model.collection && this.model.collection.where({
                is_checked: !0
            }) || [];
            e.length > 1 && this._elems.$list_head.trigger("list:head:drag-to-top", [!0])
        },
        hideActions: function(e) {
            var t = this.model.collection && this.model.collection.where({
                is_checked: !0
            }) || [];
            1 === t.length && t[0].id == this.model.id && "todo" !== AMOCRM.getBaseEntity() && (this._findElem("checkbox_cell_input").prop("checked", !1).trigger("change"),
            e.stopPropagation())
        },
        stopActions: function(e) {
            e.stopPropagation()
        },
        spaceKeyPressed: function(e, i, s) {
            var n = t(e.target).find('input[type="checkbox"]');
            n.prop("checked", !n.prop("checked")),
            this.showMultiactions({
                currentTarget: n,
                target: n
            }, i, s)
        },
        showMultiactions: function(e, s, n) {
            if (t(e.target).closest(".list-row__cell-id").length) {
                var o, r = t(e.currentTarget), l = this.model.collection.length, c = r.is(":checked"), d = this._elems.$list_all_checker, u = d.parent(), h = "js-nobackground-row", _ = 'js-list-row:not(".list-row-head")';
                this.model.set("is_checked", c, {
                    silent: !0
                }),
                o = this.model.collection.where({
                    is_checked: !0
                }).length;
                var p = i.keys(this.user_rights).length;
                switch (p) {
                case 1:
                    var m = i.keys(this.user_rights)
                      , f = "restore" != m ? this.user_rights[m] : this.user_rights;
                    break;
                case 2:
                    var g = i.keys(this.model.collection.where({
                        is_checked: !0
                    })).length;
                    if (g > 1) {
                        for (var b = !1, v = this.model.collection.where({
                            is_checked: !0
                        })[0].attributes.entity, y = g; y--; )
                            this.model.collection.where({
                                is_checked: !0
                            })[y].attributes.entity != v && (b = !0);
                        if (1 == b) {
                            var m = i.keys(this.user_rights)
                              , f = [];
                            for (var w in this.user_rights.CONTACT)
                                f[w] = this.user_rights[m[1]][w] && this.user_rights[m[0]][w]
                        } else
                            var f = this.user_rights[v.toUpperCase()]
                    } else if (1 == i.keys(this.model.collection.where({
                        is_checked: !0
                    })).length && g > 0)
                        var v = this.model.collection.where({
                            is_checked: !0
                        })[0].attributes.entity
                          , f = this.user_rights[v.toUpperCase()]
                }
                var C = {
                    only_remove: !o,
                    need_anim: 1 == o && c || !o,
                    data: this.model.collection.data,
                    $el: this.$el.find(".list-row__cell-id .content-table__item__inner"),
                    ur: f,
                    collection: this.model.collection,
                    tip_params: this.options.tip_params
                };
                switch (void 0 != s && (C.hasMarkers = s),
                void 0 != n && (C.class_name = n),
                C.elements = {
                    $list_holder: this._elems.$list_holder,
                    $list_all_checker: this._elems.$list_all_checker
                },
                C.current_entity = this.current_entity,
                this._addComponent(a, C),
                o > 1 && this._elems.$list_head.trigger("list:head:drag-to-top"),
                o) {
                case 0:
                case l:
                    u.removeClass("control-checkbox-dash"),
                    t("." + _).removeClass(h);
                    break;
                default:
                    u.addClass("control-checkbox-dash"),
                    t("." + _).removeClass(h),
                    this._elems.$list_multiple_actions.parents("." + _).addClass(h)
                }
                e && i.isFunction(e.stopPropagation) && e.stopPropagation()
            }
        },
        showTipActions: function(e) {
            var s = t(e.currentTarget)
              , n = s.text().toString()
              , o = s.data("action-code")
              , r = AMOCRM.widgets.cf_actions[o] || {}
              , a = i.keys(r);
            if (a.length <= 0)
                return i.isFunction(this.tipActions[o]) && this.tipActions[o].call(this, null, n),
                !1;
            if (e.stopPropagation(),
            e.preventDefault(),
            1 === a.length)
                try {
                    AMOCRM.widgets.cf_actions[o][i.first(a)]({
                        model: this.model,
                        value: n
                    })
                } catch (e) {
                    i.isFunction(this.options.tip_params.showWidgetErrorNotification) && this.options.tip_params.showWidgetErrorNotification(i.first(a))
                }
            else
                this.showTip(i.extend({
                    $elem: s,
                    value: n
                }, this._getWidgetTipParams(o)))
        },
        showTip: function(e) {
            var t = this.options.tip_params;
            e = e || {},
            t = i.extend({}, t, {
                onDestroy: i.bind(i.wrap(t.onDestroy, function(e) {
                    e.call(this),
                    delete this.cell_tip
                }), this)
            }),
            this.cell_tip = this._addComponent(l, i.extend({}, e, t)).render()
        },
        _getWidgetTipParams: function(e) {
            var t = [];
            return i.each(AMOCRM.widgets.cf_actions[e], function(i, s) {
                var n = AMOCRM.widgets.list[s] || !1;
                n && t.push({
                    text: n.langs.widget.call_action || n.langs.widget.name || "---",
                    icon: "phone" === e ? "phone-dark" : "mail-dark",
                    id: s,
                    class_name: "js-tips-item-widget",
                    additional_data: 'data-cf_code="%s"'.replace("%s", e)
                })
            }),
            {
                class_name: "widget_actions_tip",
                items: t
            }
        }
    }),
    n.mixin(u.View, d, c),
    u
}),
define("lib/components/lists/base/collection", ["require", "lib/components/lists/base/view", "backbone", "underscore"], function(e) {
    "use strict";
    var t, i = e("lib/components/lists/base/view"), s = e("backbone"), n = e("underscore");
    return t = s.Collection.extend({
        model: i.Model,
        toJSON: function() {
            return this.map(function(e) {
                return e.toJSON()
            })
        },
        sync: function(e, t, i) {
            var s = i.load;
            $.ajax(n.extend({
                page_xhr: !0,
                destroy_view: !1,
                type: "GET",
                url: t.url,
                data: this.parseDataForAjax(i),
                success: function(e) {
                    e && e.response && (e = e.response),
                    e && (n.isFunction(i.fetched) ? i.fetched([e, s]) : t.trigger("list:fetched", [e, s]))
                },
                error: function(e, t, i) {},
                dataType: "json"
            }, i.sync_params))
        },
        parseDataForAjax: function(e) {
            return e.data
        }
    })
}),
define("lib/components/lists/base/list", ["require", "jquery", "underscore", "twig", "elements_view", "lib/interface/search/search", "lib/components/lists/base/view", "lib/components/lists/base/header", "lib/components/lists/base/collection", "lib/common/urlparams", "lib/common/browserdetect", "lib/components/base/player", "lib/common/cookie", "lib/common/fn", "lib/common/hs"], function(e) {
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view"), r = e("lib/interface/search/search"), a = e("lib/components/lists/base/view"), l = e("lib/components/lists/base/header"), c = e("lib/components/lists/base/collection"), d = e("lib/common/urlparams"), u = e("lib/common/browserdetect"), h = e("lib/components/base/player"), _ = e("lib/common/cookie"), p = e("lib/common/fn"), m = e("lib/common/hs"), f = "Mac" === u.OS ? "altKey" : "ctrlKey", g = {
        left: 37,
        right: 39
    }, b = {
        up: 38,
        down: 40
    }, v = "32", y = "13";
    return t = o.extend({
        _last_render_params_of_cells: null,
        _RowView: a.View,
        events: {
            "list:destroy": "destroy",
            "click .js-list-row a": "trashPreventClick",
            keydown: "handleKeydown",
            "list:checkbox": "checkCheckboxes"
        },
        ns: ".list:base",
        initialize: function(e) {
            e = e || {},
            e.elements || (e.elements = {}),
            this.params = e,
            this.createCollection(),
            this.setListGlobal(),
            this.setListItemsUrl(e.url),
            this.$scroller = this.$el.parent(),
            this.$pagination = e.elements.$pagination || i("#list_pagination"),
            this.max_page = parseInt(this.$pagination.attr("data-max-page")),
            this.page = d.getParam("page") || 1,
            this.entity = e.list_entity || AMOCRM.data.current_entity,
            this.$list_all_checker = e.elements.$list_all_checker || i("#list_all_checker"),
            this.keyEventsOn(this.$list_all_checker.length > 0),
            this.checkWidgets(),
            this.checkTrash(),
            this.initHS(),
            this.initListHeader(),
            this.initFilter(e.has_pipelines),
            this.listenTo(this.list_items, "list:fetched", this.fetched),
            this.listenTo(this.list_items, "list:render", this.render),
            this.listenTo(this.list_items, "list:reset", this.reset),
            this.initPlayer()
        },
        createCollection: function() {
            this.list_items = new c
        },
        setListGlobal: function() {
            AMOCRM.data.current_list = this.list_items
        },
        checkWidgets: function() {
            1 == _.get("crd_wdgt") && i("#card_holder").addClass("js-widget-active")
        },
        setListItemsUrl: function(e) {
            this.list_items.url = e,
            ("contacts" === AMOCRM.data.element_type || "companies" === AMOCRM.data.element_type) && (this.list_items.url += AMOCRM.data.element_type + "/")
        },
        initListHeader: function(e) {
            this.list_header && this.list_header.destroy(),
            this.list_header = new l(s.extend({
                el: i("#list_head"),
                model: this.list_items,
                tip_params: this._getListTipDefaultParams()
            }, e))
        },
        checkTrash: function() {
            this.is_trash = "trash" === AMOCRM.data.current_entity.toString().split("-").pop(),
            this.is_trash && (i("#work_area").find(".content__top__preset__caption").html(AMOCRM.lang[AMOCRM.data.current_entity[0] + "_trash_caption"]),
            this.$el.addClass("list-body-is-trash"))
        },
        initPlayer: function() {
            this.player = new h({
                $container: this.$el
            })
        },
        initHS: function() {
            this.hs && this.hs.destroy(),
            this.scrollerObject = this.hs = new m({
                wrapper: this.$scroller.parent(),
                scroller: this.$scroller,
                hide_scrollbar: p._getV3Plug(),
                no_boundary: p._getV3Plug()
            })
        },
        initFilter: function(e, t) {
            var n = i("#sidebar__right").length
              , o = "todo" !== AMOCRM.data.current_entity;
            t = t || {},
            this.search = new r({
                filter: s.extend({
                    el: i("#sidebar"),
                    is_list: !n,
                    active_selector: n ? "#filter_show_btn" : !1,
                    active_class: n ? "filter-show-btn-active" : !1,
                    disabled_users: o,
                    has_pipelines: e,
                    can_save_preset: s.contains(["customers", "leads", "contacts"], AMOCRM.getBaseEntity())
                }, this.params.filter_options || {}, t)
            }),
            s.indexOf(["events", "authlog"], AMOCRM.getBaseEntity()) >= 0 && this.search.filter.$el.removeClass("hidden")
        },
        getUsersSelectInputName: function() {
            return "authlog" === AMOCRM.data.current_entity ? "f_users[]" : "filter[main_user][]"
        },
        sidebarToggle: function(e) {
            this._$document.trigger("list:sidebar:toggle")
        },
        destroy: function() {
            this.keyEventsOff(),
            s.chain([this.list_header, this.search, this.player, this.hs]).filter(function(e) {
                return s.isObject(e)
            }).invoke("destroy"),
            this.list_items.each(function(e) {
                e.trigger("destroy:silent")
            }),
            this.list_items.reset(),
            this.remove(!1)
        },
        navigatePage: function(e, t, i) {
            var s = i || parseInt(this.page) + (e || 1);
            s > 0 && this.max_page >= s && (this.$pagination.find(".pagination-link__wrapper-active").removeClass("pagination-link__wrapper-active"),
            this.$pagination.find('.pagination-link[data-page="' + s + '"]').parent().addClass("pagination-link__wrapper-active"),
            AMOCRM.router.navigate(d.setParam({
                page: 1 === s ? "" : s
            }), {
                replace: !0,
                trigger: t
            }),
            this.loadPage({
                page: s,
                query_string: d.getQueryString()
            }))
        },
        trashPreventClick: function() {
            return this.is_trash ? !1 : void 0
        },
        fetchedItems: function(e) {
            var t, i = [];
            return this.reset(),
            s.each(e.items, function(e) {
                t = new this._RowView(s.extend({
                    model: this.itemsPush(e)
                }, this.getRowItemViewOptions() || {})),
                i.push(t)
            }, this),
            this._views = i,
            {
                views: i,
                params: {
                    pipelines: e.filter.pipelines && e.filter.pipelines.items || [],
                    statuses: p.has_keys(e, ["filter", "statuses", "items"]) ? e.filter.statuses.items : [],
                    fields: e.fields
                }
            }
        },
        getRowItemViewOptions: function() {
            return {
                pauseHS: s.bind(this.hs.scrollPause, this.hs),
                resumeHS: s.bind(this.hs.scrollResume, this.hs),
                removeCellTips: s.bind(this.removeCellTips, this),
                scrollIntoView: s.bind(this.scrollIntoView, this),
                tip_params: this._getListTipDefaultParams(),
                updateFilterTagsLib: s.bind(function() {
                    this.search && this.search.filter && this.search.filter.tags_lib && this.search.filter.tags_lib.updateTags.apply(this.search.filter.tags_lib, arguments)
                }, this)
            }
        },
        fetched: function(e) {
            var t = e[0]
              , i = this.fetchedItems(t);
            t && t.filter && (i.params.filter = t.filter),
            this.list_items.trigger("list:render", [{
                views: i.views,
                params: i.params,
                pagination: {
                    max_page: t.pagination.total,
                    page: t.pagination.current
                },
                summary: t.summary,
                load: e[1]
            }])
        },
        loadPage: function(e) {
            this._$document.trigger("page:overlay:show"),
            this.list_items.fetch({
                page: e.page,
                data: (e.query_string.length ? e.query_string + "&" : "") + "json=1&PAGEN_1=" + e.page,
                fetched: e.fetched,
                load: s.bind(function() {
                    this._$document.trigger("page:overlay:hide"),
                    s.isFunction(e.load) && e.load()
                }, this),
                sync_params: s.extend({}, e.sync_params)
            }),
            this.list_header && this.list_header.toggleAll(!1),
            this.page = e.page
        },
        setData: function(e) {
            this.list_items.data = e
        },
        bindExistingItems: function(e, t) {
            return this._views = [],
            s.each(e, function(e, t) {
                this._views.push(new this._RowView(s.extend({
                    el: document.getElementById("list_item_" + e.id),
                    model: this.itemsPush(e)
                }, this.getRowItemViewOptions() || {})))
            }, this),
            this.needTags(),
            this.checkCheckboxes(),
            this.setData(t),
            this
        },
        itemsPush: function(e, t) {
            return this.list_items.add(e, s.extend({
                silent: !0
            }, t))
        },
        reset: function() {
            this.list_items.each(function(e) {
                e.trigger("destroy")
            }),
            this.list_items.reset()
        },
        render: function(e) {
            var t = e[0]
              , i = AMOCRM.getBaseEntity()
              , n = "events" === i || "authlog" === i
              , o = document.createDocumentFragment()
              , r = s.extend({
                entity: i,
                enable_checkboxes: s.contains(["customers", "leads", "contacts"], i),
                user_rights: AMOCRM.constant("user_rights") || {},
                not_show_chbx: n
            }, t.params);
            this._last_render_params_of_cells = r,
            s.each(t.views, function(e) {
                o.appendChild(e.render(r).el)
            }, this),
            this.el.appendChild(o),
            this.renderSummary(this._search_summary = t.summary),
            this.renderPagination(t),
            t.load && s.isFunction(t.load) && t.load(),
            this.needTags(),
            this.checkCheckboxes()
        },
        renderPagination: n._preload(["/tmpl/list/common/pagination.twig"], "_renderPagination"),
        _renderPagination: function(e) {
            var t = s.result(e, "pagination");
            t && this.$pagination.length && this.$pagination.html(n({
                ref: "/tmpl/list/common/pagination.twig"
            }).render(t))
        },
        renderSummary: s.noop,
        need_checkboxes: function() {
            var e = !1;
            return i.each(AMOCRM.widgets.list, function(t, i) {
                return i.callbacks[AMOCRM.getWidgetsArea()] ? void ("function" == typeof i.callbacks[AMOCRM.getWidgetsArea()].selected && (e = !0)) : !0
            }),
            e
        },
        getIDblock: function(e) {
            var t;
            return Boolean(AMOCRM.constant("user_rights")[AMOCRM.data.current_entity]) !== !1 ? (t = {
                contact: AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()].CONTACT,
                company: AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()].COMPANY,
                lead: AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()],
                catalogs: AMOCRM.constant("user_rights")[AMOCRM.getBaseEntity()]
            },
            this.list_items.filter(function(i) {
                return t[i.get("entity")] && t[i.get("entity")][e] !== !0
            })) : []
        },
        needTags: function() {
            var e = this.getIDblock("manage_tags");
            e.forEach(function(e) {
                e.trigger("hide_tags")
            })
        },
        checkCheckboxes: function() {
            var e;
            this.need_checkboxes() ? this.$('.list-row__cell-id input[type="checkbox"]').trigger("controls:disable", !1) : (e = this.getIDblock("has_multi"),
            e.forEach(function(e) {
                e.trigger("disable_checkbox")
            }),
            this.list_items.length === e.length && this.$list_all_checker.trigger("controls:disable"))
        },
        keyEventsOn: function(e) {
            var t = this
              , s = 'js-list-row:not(".list-row-head"):not(".table_separator")'
              , n = "js-choosed-row";
            e && this._$document.on("keydown" + t.ns, function(e) {
                var o = e.keyCode
                  , r = t._$window.height()
                  , a = i("body, html")
                  , l = t.$el.find("." + s).height()
                  , c = i(".list__body-right").height() - i(".list__table__holder").height()
                  , d = i("#search_input_wrapper")
                  , u = ":focus"
                  , h = t.$el.find("." + n);
                if (!i(document.activeElement).is(":focus")) {
                    if (document.activeElement && (!t.$el.is(":visible") || i(".modal").length || "text" == document.activeElement.type || "textarea" == document.activeElement.type))
                        return !0;
                    if ("todo" == AMOCRM.getBaseEntity() && i("#todo_form").hasClass("expanded"))
                        return;
                    if (o == b.up || o == b.down || o == v || o == y) {
                        if (e.preventDefault(),
                        0 == h.length && o != v)
                            return void t.$el.find("." + s + ":first").addClass(n);
                        if (o == b.down) {
                            if (h.attr("id") == t.$el.find("." + s + ":last").attr("id"))
                                return void a.scrollTop(i("#list_holder").height() - r + c + l);
                            h.nextAll("." + s + ":first").addClass(n),
                            h.removeClass(n),
                            row_position = t.$el.find("." + n).offset().top,
                            row_position - t._$window.scrollTop() + l > r ? a.scrollTop(row_position - r + l) : row_position - t._$window.scrollTop() < 0 && !h.visible(!0) && a.scrollTop(row_position)
                        } else if (o == b.up) {
                            if (h.attr("id") == t.$el.find("." + s + ":first").attr("id"))
                                return void a.scrollTop(0);
                            h.prevAll("." + s + ":first").addClass(n),
                            h.removeClass(n),
                            row_position = t.$el.find("." + n).offset().top,
                            row_position - t._$window.scrollTop() < 0 ? a.scrollTop(row_position) : row_position - t._$window.scrollTop() + l > r && !h.visible(!0) && a.scrollTop(row_position - r + l)
                        } else
                            o == v && !d.is(u) && h.length > 0 ? ($choosed_row_checkbox = h.find(".list-row__cell-id"),
                            i("." + s).removeClass("js-nobackground-row"),
                            $choosed_row_checkbox.trigger("show:actions")) : o == y && h.trigger("show:card")
                    } else
                        o == v && !d.is(u) && h.length > 0 ? ($choosed_row_checkbox = h.find(".list-row__cell-id"),
                        i("." + s).removeClass("js-nobackground-row"),
                        $choosed_row_checkbox.trigger("show:actions")) : o == y && h.trigger("show:card")
                }
            }),
            this._$document.on("keyup" + this.ns, function(e) {
                e[f] && e.keyCode === g.right && i("#page_holder").is(":visible") && "INPUT" !== document.activeElement.tagName && (t.navigatePage(1),
                e.preventDefault())
            }).on("keyup" + this.ns, function(e) {
                e[f] && e.keyCode === g.left && i("#page_holder").is(":visible") && "INPUT" !== document.activeElement.tagName && (t.navigatePage(-1),
                e.preventDefault())
            }).on("click" + this.ns, ".js-pagination-prev", function() {
                t.navigatePage(-1)
            }).on("click" + this.ns, ".js-pagination-next", function() {
                t.navigatePage(1)
            }).on("click" + this.ns, ".js-pagination-link", function(e) {
                t.navigatePage(null, !1, parseInt(i(this).data("page"))),
                e.preventDefault(),
                e.stopPropagation()
            })
        },
        keyEventsOff: function() {
            this._$document.off(this.ns),
            this._$window.off(this.ns)
        },
        _getListTipDefaultParams: function() {
            return {
                onRender: s.bind(this.hs.scrollPause, this.hs),
                onDestroy: s.bind(this.hs.scrollResume, this.hs),
                showWidgetErrorNotification: s.bind(this.showWidgetErrorNotification, this)
            }
        },
        _scrollIntoView: function(e, t) {
            return this.$scroller.animate({
                scrollLeft: "+=" + e
            }, {
                duration: 200,
                complete: t
            })
        },
        removeCellTips: function() {
            var e = s.find(this._views, function(e) {
                return !s.isEmpty(e.cell_tip)
            }, this) || {};
            return e.cell_tip && e.cell_tip.removeTip()
        },
        scrollIntoView: function(e, t, i) {
            var n = e.outerWidth()
              , o = window.innerWidth
              , r = Math.max(t, n)
              , a = r + 30
              , l = e.offset().left
              , c = l + a - o
              , d = l - 65 - 120;
            i = s.isFunction(i) ? i : s.noop,
            c > 0 ? this._scrollIntoView(c, i) : 0 > d ? this._scrollIntoView(d, i) : i()
        },
        showWidgetErrorNotification: function(e) {
            var t = AMOCRM.widgets.list[e].langs.widget.name;
            AMOCRM.notifications.show_message_error({
                header: p.i18n("%s widget error").replace("%s", t),
                text: p.i18n("Action failed")
            })
        }
    })
}),
define("lib/pages/list", ["require", "jquery", "underscore", "lib/pages/base/pipeline_list", "lib/components/lists/base/list", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/pages/base/pipeline_list")
      , n = e("lib/components/lists/base/list")
      , o = e("lib/common/urlparams");
    return s.extend({
        _ListHandler: n,
        _getEndpoint: function() {
            return "/ajax/" + AMOCRM.data.current_entity + "/list/"
        },
        _getEndpointData: function(e) {
            var t = o.getQueryString()
              , i = [];
            return (AMOCRM.data.entity_changed || AMOCRM.data.current_card) && i.push("need_filter=Y"),
            e[0] && i.push("PAGEN_1=" + e[0]),
            t + (i.length ? "&" : "") + i.join("&")
        },
        template: function() {
            return this._getTemplateAndHolder().template
        },
        preload: ["/tmpl/list/common/pagination.twig"],
        _renderPage: function(e) {
            var t, i;
            e = e || {},
            t = e.response || {},
            i = e.template,
            s.prototype._renderPage.call(this, {
                response: t,
                template: i,
                container: this._getTemplateAndHolder().container
            }),
            this._checkUserRights(t)
        },
        _checkUserRights: i.noop,
        _getResponseData: function(e) {
            var t, i;
            return e = e || {},
            i = this._getResponseFilter(e),
            t = e.fields && i ? {
                fields: e.fields,
                statuses: i.statuses && i.statuses.items || [],
                pipelines: i.pipelines && i.pipelines.items || []
            } : AMOCRM.constant("existed_data") || {},
            {
                unsorted_settings: e.unsorted || AMOCRM.constant("unsorted"),
                existed_items: e.items || AMOCRM.constant("existed_items"),
                existed_data: t,
                max_page: e.max_page || "",
                has_pipelines: e.has_pipelines || t.has_pipelines
            }
        },
        _getResponseFilter: function(e) {
            return e.filter || (i.first(e.filters) || {}).params
        },
        construct: function(e) {
            var s = this._getResponseData(e && e.response);
            this._prepareFilter(e && e.response),
            AMOCRM.data.current_view = new this._ListHandler(i.extend({}, {
                url: this._getEndpoint(),
                el: document.getElementById("list_table"),
                max_page: s.max_page,
                has_pipelines: s.has_pipelines
            }, e.list_handler_options || {})),
            AMOCRM.data.current_view._getInstance = i.bind(function() {
                return this
            }, this),
            AMOCRM.data.current_view.bindExistingItems(s.existed_items, s.existed_data).list_items.on("list:reset", this.destroy, this),
            AMOCRM.data.current_view._last_render_params = e.response,
            AMOCRM.data.card_page && AMOCRM.data.current_view ? AMOCRM.data.card_page.cardBack(function(e) {
                e && t(document).trigger("list:reload")
            }) : AMOCRM.data.card_page && AMOCRM.data.card_page.destroy()
        },
        destruct: function() {
            AMOCRM.data.current_view && i.isFunction(AMOCRM.data.current_view._getInstance) && AMOCRM.data.current_view.destroy(),
            s.prototype.destruct.apply(this, arguments)
        }
    })
}),
define("lib/components/fields/mixins/parser", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        _fields: null,
        setFields: function(e) {
            if (!e)
                throw new Error("Invalid fields given: " + JSON.stringify([e]));
            this._fields = [],
            t.each(e.base_fields, function(e) {
                var t = this.convertBaseField(e);
                this._fields.push(t)
            }, this),
            t.each(t.first(t.values(e.custom_fields)), function(e) {
                var t = this.convertField(e);
                this._fields.push(t)
            }, this)
        },
        getFields: function() {
            return this._fields
        },
        convertField: function(e) {
            var i = {
                code: "",
                custom_field: !0,
                default_code: "",
                disabled: e.disabled,
                element_type: e.element_type,
                filterable: e.filterable,
                format: !1,
                id: e.id,
                shown: !0,
                sort: "",
                sortable: e.sortable,
                sorted: !1,
                shared: e.shared,
                sub_code: t(e.id.match(/[^0-9_][a-z_0-9]+/) || []).first(),
                template: "text",
                template_params: {},
                title: e.name || e.title,
                type_code: e.type_code,
                width: !1
            };
            switch (e.code && (i.default_code = e.code.toLowerCase()),
            e.format && (i.format = e.format),
            i.stripped_id = i.id.replace("_" + i.sub_code, ""),
            i.code = i.sort = "cf" + e.id,
            e.type_code) {
            case "url":
                i.template = "blank_link";
                break;
            case "checkbox":
                i.template = "checkbox";
                break;
            case "date":
            case "birthday":
                i.template = "date";
                break;
            case "multiselect":
                i.enums = e.enums,
                i.template = "multiselect";
                break;
            case "radiobutton":
            case "select":
                i.enums = e.enums,
                i.template = "text";
                break;
            case "textarea":
            case "streetaddress":
            case "text":
            case "numeric":
                break;
            case "multitext":
                i.enums = e.enums,
                i.enums_names = e.enums_names;
                break;
            case "smart_address":
                i.enums = ["address_line_1", "address_line_2", "city", "state", "zip", "country"],
                i.variants = e.variants,
                i.template = "smart_address";
                break;
            default:
                throw new Error('Unknown field type "' + e.type_code + '"' + JSON.stringify(e))
            }
            return "PRICE" === e.code && (i.template = "budget"),
            "TAX" === e.code && (i.template = "budget"),
            i
        },
        convertBaseField: function(e) {
            var t = {
                id: e.id_name || e.id,
                custom_field: !1,
                default_code: e.code.toLowerCase(),
                element_type: e.element_type,
                code: e.code,
                title: e.name || e.title,
                shown: "name" === e.code,
                sort: e.id_name || e.id,
                sortable: e.sortable,
                filterable: e.filterable,
                sorted: !1,
                width: !1,
                template: "text",
                template_params: null,
                format: !1,
                type_code: e.type_code
            };
            switch (e.format && (t.format = e.format),
            e.type_code) {
            case "name":
                t.template = "name";
                break;
            case "date":
                t.template = "date";
                break;
            case "text":
            case "numeric":
                t.template = "text";
                break;
            case "textarea":
                t.template = "textarea";
                break;
            case "link":
                t.template = "link";
                break;
            case "contacts_status":
                t.template = "contacts_status";
                break;
            default:
                throw new Error('Unknown field type "' + e.type_code + '"' + JSON.stringify(e))
            }
            switch (t.id) {
            case "manager":
                t.id = "main_user_id",
                t.id_name = "main_user_id",
                t.sort = "main_user_id"
            }
            return t
        }
    }
}),
define("lib/components/lists/edit/updatable_list", ["require", "underscore", "twig", "cocktail", "lib/components/lists/base/list", "lib/common/fn", "lib/core/users", "lib/components/fields/mixins/parser"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("twig"), n = e("cocktail"), o = e("lib/components/lists/base/list"), r = e("lib/common/fn"), a = e("lib/core/users"), l = e("lib/components/fields/mixins/parser");
    return t = o.extend({
        _entities_map: function() {
            return i(AMOCRM.element_types).invert()
        }(),
        updateModel: function(e, t) {
            var s, n;
            return e && e.id || r.log({
                msg: "Element must not be empty and has the id attribute"
            }),
            n = t && i.isFunction(t.getModelIds) ? t.getModelIds(e, this.list_items) : [e.id],
            s = this.list_items.filter(function(e) {
                return i.contains(n, e.id)
            }),
            s.length ? (i.each(s, function(s) {
                var n = $.extend(!0, {}, e);
                t && i.isFunction(t.onBeforeSet) && (n = t.onBeforeSet(n, s)),
                s.set(this.parseElementFromResponse(n, s.toJSON())),
                s.trigger("render:full", this._last_render_params_of_cells)
            }, this),
            t && i.isFunction(t.onAfterSet) && t.onAfterSet(),
            !0) : !1
        },
        getRowItemViewOptions: function() {
            return i.extend({}, o.prototype.getRowItemViewOptions.call(this), {
                updateModel: i.bind(this.updateModel, this),
                updateSearchSummary: i.bind(this.updateSearchSummary, this)
            })
        },
        updateSearchSummary: function(e) {
            var t, i;
            if (e && (this._$search_summary || (this._$search_summary = $("#list-top-search__summary")),
            this._search_summary || (this._search_summary = (this._last_render_params || {}).summary || (AMOCRM.constant("existed_data") || {}).summary),
            t = this._search_summary || {},
            t.template)) {
                switch (i = "/tmpl/" + t.template + "/common/search_summary.twig",
                t.template) {
                case "leads":
                    t.budget = +t.budget + e.budget;
                    break;
                case "customers":
                    t.total && (t.total.next_price = +t.total.next_price + e.next_price)
                }
                this._$search_summary.html(s({
                    ref: i
                }).render({
                    summary: t
                }))
            }
        },
        parseElementFromResponse: function(e, t) {
            var s = [];
            return i.has(e, "name") && !i.isObject(e.name) && (e.name = {
                id: t.id || e.id || !1,
                text: i.escape(e.name),
                url: t.element_type ? "/" + this._entities_map[t.element_type] + "/detail/" + t.id : !1
            }),
            i.each(["date_create", "date_modify", "next_date"], function(t) {
                var i, s = "next_date" === t ? "date" : null;
                e[t] && (i = moment(e[t], "X"),
                e[t] = r.formatDate(i, s))
            }),
            e.responsible_user_id && (e.manager = (i.findWhere(a.get(), {
                id: e.responsible_user_id
            }) || {}).title),
            i.has(t, "editor") && (e.editor = e.modified_by),
            e.status_id && (e.status = e.status_id),
            i.each(this.getFields(), function(t) {
                t.custom_field && i.has(e, t.id) && (e[t.code] = "")
            }),
            i.each(e.custom_fields, function(t) {
                var n, o, r = [], a = "cf" + t.id, l = i.findWhere(this.getFields(), {
                    code: a
                }), c = !l && i.findWhere(this.getFields(), {
                    stripped_id: t.id
                });
                if (l || c) {
                    switch (c && (l = c),
                    l.type_code) {
                    case "multiselect":
                        t.values = i.each(t.values, function(e, s) {
                            i.isObject(e) || (t.values[s] = {
                                "enum": e,
                                value: (i.findWhere(l.enums, {
                                    id: e
                                }) || {}).value
                            })
                        }),
                        s.push(t);
                        break;
                    case "select":
                    case "radiobutton":
                        t.values = i.each(t.values, function(e, s) {
                            e.value && !i.has(e, "enum") && (t.values[s] = {
                                "enum": e.value,
                                value: (i.findWhere(l.enums, {
                                    id: e.value
                                }) || {}).value
                            })
                        }),
                        s.push(t);
                        break;
                    case "multitext":
                        t.values = i.chain(t.values).sortBy(function(e) {
                            return e["enum"]
                        }).filter(function(e) {
                            return e.value.trim().length
                        }).value(),
                        t.values.length && s.push(t);
                        break;
                    case "smart_address":
                        t.values = i.map(t.values, function(e) {
                            return {
                                "enum": e["enum"] || e.subtype,
                                value: e.value
                            }
                        }),
                        s.push(t);
                        break;
                    default:
                        s.push(t)
                    }
                    switch (i.each(t.values, function(e) {
                        switch (n = e && i(e).has("value") ? e.value : e,
                        l.template) {
                        case "date":
                            n = this.getMomentFromValue(n),
                            n = n.format(AMOCRM.system.format.date.date);
                            break;
                        case "blank_link":
                            n = {
                                name: n,
                                url: n
                            }
                        }
                        r.push(n)
                    }, this),
                    l.template) {
                    case "multiselect":
                        e[a] = r;
                        break;
                    case "budget":
                        e[a] = parseInt(r);
                        break;
                    case "smart_address":
                        o = {},
                        o[a] = {},
                        i.each(t.values, function(e) {
                            var t = e.value;
                            "country" === e["enum"] && (t = t.length ? l.variants.country[t.toLowerCase()] : ""),
                            o[a + "_" + e["enum"]] = t,
                            o[a][e["enum"]] = t
                        }),
                        e = i.extend(e, o);
                        break;
                    case "blank_link":
                    case "checkbox":
                    case "date":
                    case "text":
                        if ("multitext" === l.type_code)
                            return void (c ? (o = {},
                            i.each(t.values, function(e) {
                                var t = (i.findWhere(l.enums, {
                                    id: e["enum"]
                                }) || {}).value.toLowerCase()
                                  , s = a + "_" + t;
                                i.isArray(o[s]) ? o[s].push(e.value) : (o[s] = []).push(e.value)
                            }),
                            i.each(l.enums, function(e) {
                                var t = a + "_" + e.value.toLowerCase();
                                i.has(o, t) || (o[t] = "")
                            }),
                            e = i.extend(e, o)) : e[a] = r);
                        "undefined" != typeof r[0] && (e[a] = r[0])
                    }
                }
            }, this),
            e.custom_fields = s,
            i.isArray(e.tags) && (e.tags = {
                items: e.tags
            }),
            e
        },
        getMomentFromValue: function(e) {
            var t, i;
            return "string" == typeof e && parseInt(e) != e ? (i = e.match(/^\d{4}-\d{2}-\d{2}/) ? "YYYY-MM-DD" : AMOCRM.system.format.date.date,
            t = moment(e, i + " HH:mm:ss")) : t = moment.unix(e),
            t
        }
    }),
    n.mixin(t, l),
    t
}),
define("lib/components/lists/edit/rights_checker", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = {
        main_contact: "contacts",
        company_name: "companies"
    }
      , s = t.invert(AMOCRM.element_types)
      , n = ["checkbox"]
      , o = ["budget", "company_name", "contact_company_name", "date_of_nearest_task", "main_contact", "manager", "name", "next_price", "status"];
    return {
        checkBaseFields: function(e, n) {
            var r, a, l = [], c = n.rights || {};
            if (t.contains(o, e))
                switch (r = n[e],
                e) {
                case "main_contact":
                case "company_name":
                    switch (n.element_type) {
                    case AMOCRM.element_types.leads:
                    case AMOCRM.element_types.contacts:
                        if (a = s[n.element_type],
                        (c[a] || {}).edit && (c[i[e]] || {}).edit || !(c[a] || {}).edit && (c[i[e]] || {}).edit && !t.isEmpty(r))
                            return l.push(e),
                            l
                    }
                    break;
                case "contact_company_name":
                    if (n.element_type !== AMOCRM.element_types.leads)
                        return;
                    if (n._linked && !n._linked.main_contact)
                        return;
                    if ((c.contacts || {}).edit && (c.companies || {}).edit || !(c.contacts || {}).edit && (c.companies || {}).edit && !t.isEmpty(r))
                        return l.push(e),
                        l;
                    break;
                default:
                    if ((c[s[n.element_type]] || {}).edit)
                        return l.push(e),
                        l
                }
            return l
        },
        checkCustomFields: function(e, i) {
            var o, r = [], a = this.options.parsed_fields || [], l = t.findWhere(a, {
                code: e
            }), c = i.rights || {};
            if (l && l.custom_field && !l.disabled && !t.contains(n, l.type_code)) {
                if (i.element_type !== l.element_type && !l.shared) {
                    if (i.element_type !== AMOCRM.element_types.leads)
                        return;
                    switch (l.element_type) {
                    case AMOCRM.element_types.contacts:
                        if (i._linked && !i._linked.main_contact)
                            return;
                        break;
                    case AMOCRM.element_types.companies:
                        if (i._linked && !i._linked.company_name)
                            return
                    }
                }
                if (o = l.shared ? i.element_type : l.element_type,
                !(c[s[o]] || {}).edit)
                    return;
                return r.push(e),
                r
            }
            return r
        }
    }
}),
define("lib/components/lists/edit/cell/index", ["require", "jquery", "underscore", "lib/core/view", "lib/components/base/modal", "lib/components/base/confirm", "lib/core/users", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/core/view")
      , n = e("lib/components/base/modal")
      , o = e("lib/components/base/confirm")
      , r = e("lib/core/users")
      , a = e("lib/common/fn")
      , l = 50;
    return s.extend({
        className: "cell-edit",
        _element: null,
        _row_model: null,
        options: null,
        field_id: null,
        save_blocked: null,
        _error_modal: null,
        _confirm_modal: null,
        _selectors: function() {
            return {
                label_multiple: ".linked-form__field:not(.h-hidden) .linked-form__field__label-multiple"
            }
        },
        initialize: function(e) {
            return e = e || {},
            s.prototype.initialize.call(this),
            this._$document.trigger("controls:hide"),
            this.options = e,
            this.field = e.field_params,
            this.field_id = this.field.id,
            this._row_model = this.options.model,
            this._element = this._row_model.toJSON(),
            this.scrollIntoView = i.isFunction(e.scrollIntoView) ? e.scrollIntoView : i.noop,
            this
        },
        destroy: function() {
            i.isFunction(this.options.onDestroy) && this.options.onDestroy(),
            s.prototype.destroy.call(this, !0)
        },
        bindGlobalEvents: function() {
            this._$window.on("resize" + this.ns, i.bind(i.debounce(this.setPosition, l), this)),
            this._$document.on(i(["click", "escape:keydown"]).map(function(e) {
                return e + this.ns
            }, this).join(" "), i.bind(this.onHideControls, this)).on("list:column:resized" + this.ns, i.bind(this.setPosition, this))
        },
        getTemplateData: function() {
            return {
                element: this._element || {},
                field: {},
                values: {}
            }
        },
        _getCellEditOffsets: function() {
            var e = {
                base_w: 200,
                left: 0,
                width: 0,
                top: 0,
                margin: 0
            };
            switch (this.field.type_code) {
            case "name":
                e = i.extend(e, {
                    left: -2,
                    width: 2
                });
                break;
            case "radiobutton":
                e = i.extend(e, {
                    left: -23,
                    width: 23
                });
                break;
            case "multiselect":
                e = i.extend(e, {
                    left: -27,
                    width: 27
                });
                break;
            case "textarea":
            case "streetaddress":
                e = i.extend(e, {
                    base_w: 300
                })
            }
            switch (this.field.code) {
            case "status":
            case "main_contact":
            case "company_name":
            case "contact_company_name":
                e = i.extend(e, {
                    base_w: 330
                });
                break;
            case "date_of_nearest_task":
                e = i.extend(e, {
                    base_w: 500
                });
                break;
            case "manager":
            case "main_user_id":
                e = i.extend(e, {
                    base_w: 250
                })
            }
            return e
        },
        setPosition: function() {
            var e = this.options.$cell
              , i = !e.next().length
              , s = e.get(0).getBoundingClientRect()
              , n = s.width
              , o = this.render_params.field.multiple ? this._findElem("label_multiple").outerWidth() + 1 : 1
              , r = this._$window.scrollTop()
              , a = this._getCellEditOffsets();
            return this.$el.css({
                width: Math.max(a.base_w, n) + o + a.width,
                left: i ? "auto" : s.left - t("#left_menu").outerWidth() + a.left,
                right: i ? parseFloat(t("#list_table").css("paddingRight")) : "auto",
                top: s.top + r + a.top,
                marginLeft: -1 * o + a.margin
            }),
            this
        },
        onHideControls: function(e) {
            var i = t(e.target);
            i.closest(".cell-edit").length || this.cancelCellEdit()
        },
        cancelCellEdit: function(e) {
            return this.save_blocked ? !1 : !this.has_changes || (e || {}).force_exit ? (this.destroy(),
            !0) : this._confirm_modal ? !1 : (this._confirm_modal = this._addComponent(o, this.getConfirmModalParams()),
            !1)
        },
        getConfirmModalParams: function() {
            var e = this;
            return {
                text: a.i18n("You didn't save any changes. Save or exit without saving?"),
                accept_text: a.i18n("Save"),
                decline_text: a.i18n("Close without save"),
                button_class: "button-input_blue",
                destroy: function() {
                    this.accepted !== !1 || this._destroyed || (this._destroyed = !0,
                    e.cancelCellEdit({
                        force_exit: !0
                    })),
                    delete e._confirm_modal
                }
            }
        },
        triggerRowRerender: function(e) {
            i.isFunction(this.options.onSave) && this.options.onSave(e, this.getRowRerenderCallbacks())
        },
        getRowRerenderCallbacks: function() {
            return {
                onAfterSet: i.bind(function() {
                    t("#list_table").trigger("list:checkbox")
                }, this)
            }
        },
        showErrorModal: function() {
            this._error_modal || (this._error_modal = this._addComponent(n, {
                destroy: i.bind(function() {
                    delete this._error_modal
                }, this)
            }).showError(null, !1))
        },
        _getModelUpdateParams: function(e) {
            return i.extend({
                last_modified: this.save_timestamp = moment().unix(),
                date_modified: a.formatDate(moment()),
                modified_by: r.current("name")
            }, e || {})
        }
    })
}),
define("lib/components/lists/edit/cell/model", ["require", "lib/interface/element_model"], function(e) {
    "use strict";
    var t = e("lib/interface/element_model");
    return t.extend({
        _editable_attributes: t.prototype._editable_attributes.concat(["company_name", "last_modified", "linked_company_id", "linked_leads_id", "next_price", "price", "responsible_user_id"]),
        initialize: function(e) {
            return e = e || {},
            this._fields = e.parsed_fields,
            t.prototype.initialize.apply(this, arguments)
        },
        setEntity: function(e) {
            return this.url = "/ajax/v1/%s/set".replace("%s", e),
            this._type = e,
            this
        },
        getMomentFromAPI: function(e) {
            var t, i;
            return "string" == typeof e && parseInt(e) != e ? (i = e.match(/^\d{4}-\d{2}-\d{2}/) ? "YYYY-MM-DD" : AMOCRM.system.format.date.date,
            t = moment(e, i + " HH:mm:ss")) : t = moment.unix(e),
            t
        }
    })
}),
define("lib/components/lists/edit/cell/base", ["require", "jquery", "underscore", "twig", "lib/components/lists/edit/cell/index", "lib/components/base/form", "lib/components/lists/edit/cell/model", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/components/lists/edit/cell/index")
      , o = e("lib/components/base/form")
      , r = e("lib/components/lists/edit/cell/model")
      , a = e("lib/common/fn")
      , l = 13;
    return n.extend({
        _empty_multiple: null,
        _linked_entity_map: {
            contacts: "main_contact",
            companies: "company_name"
        },
        linked_entity_edit: null,
        has_changes: null,
        save_timestamp: null,
        form: null,
        model: null,
        _classes: function() {
            return {
                cancel_button: "js-cell-edit__button-cancel",
                control_select_button: "control--select--button",
                edit_buttons: "cell-edit__buttons",
                save_button: "js-cell-edit__button-save",
                suggest_opened: "control--suggest--list-opened",
                textarea: "text-input-textarea"
            }
        },
        _selectors: function() {
            return i.extend(n.prototype._selectors.apply(this, arguments), {
                first_visible_input: ".linked-form__field:not(.h-hidden) .linked-form__field__value:first input",
                form_field: ".linked-form__field:not(.linked-form__field-buttons)",
                input: ".linked-form__field__value input",
                safe_save_button: '.js-cell-edit__button-save:not([data-loading="Y"]):not(.button-input-disabled)',
                select_input: ".linked-form__field__label .control--select--input",
                text_input: ".linked-form__field__value .text-input"
            })
        },
        events: function() {
            var e = i.extend({}, i.result(n.prototype, "events"), {
                "change .control--select--input": "setPosition"
            });
            return e["click " + this._selector("cancel_button")] = "onCancelClick",
            e["click " + this._selector("safe_save_button")] = "saveCellEdit",
            e["keydown " + this._selector("input")] = "onCellEditInputKeydown",
            e["keydown " + this._selector("textarea")] = "onCellEditTextareaKeydown",
            e["focus " + this._selector("text_input")] = "onInputFocus",
            e["blur " + this._selector("text_input")] = "onInputBlur",
            e
        },
        initialize: function() {
            return n.prototype.initialize.apply(this, arguments),
            this.initForm()
        },
        initForm: function() {
            var e = this.options.parsed_fields
              , t = [this.field.code]
              , s = {};
            return this._setLinkedEditableFields(this.field.code),
            this.form = this._addComponent(o.View, {
                model: r,
                parsed_fields: e
            }),
            this.model = this.form.model.setEntity(this._getEntityInEdit()),
            this.model.setFields(i.filter(e, function(e) {
                return i.contains(t, e.code)
            }, this)),
            this.model._fields && (s = i.pick(this._element, i.pluck(this.model._fields, "default_code"))),
            this.model.setFromAPI(this.parseFromModelAttributes(s)).on("has_changes", i.bind(this._setChanges, this, {
                change: !0
            })).on("has_reverted", i.bind(this._setChanges, this, {
                change: !1
            })),
            this
        },
        _setLinkedEditableFields: function(e) {
            var t, i = this._row_model.get("element_type");
            switch (!0) {
            case i === AMOCRM.element_types.leads:
                this.field.element_type !== i && (t = this._linked_entity_map[this._getEntityName(this.field.element_type)],
                this.linked_entity_edit = this._row_model.get("_linked")[t])
            }
        },
        _getEntityInEdit: function() {
            var e, t = this._row_model.get("element_type");
            switch (this.field_id) {
            case "name":
                e = this._getEntityName(t);
                break;
            default:
                e = this._getEntityName(this.field.shared ? t : this.field.element_type)
            }
            return e
        },
        parseFromModelAttributes: function(e) {
            var t, s = ["name", "main_contact", "company_name", "contact_company_name"];
            return i.each(s, function(t) {
                i.isObject(e[t]) && (i.has(e[t], "text") && (e[t] = i.unescape(e[t].text)),
                i.has(e[t], "name") && (e[t] = i.unescape(e[t].name)))
            }),
            t = i.extend(e, {
                custom_fields: this._element.custom_fields,
                id: this.linked_entity_edit ? this.linked_entity_edit : this._element.id,
                _element_id: this.linked_entity_edit && this._element.id
            }),
            i.isFunction(this.onParseFromModelAttributes) && (t = this.onParseFromModelAttributes(t)),
            t
        },
        _setChanges: function(e) {
            var t = (e || {}) && e.change;
            return "name" === this.field_id && this._element.element_type !== AMOCRM.element_types.leads && (t = this.model.get(this.field_id).trim().length ? t : !1),
            this.has_changes = t,
            this._empty_multiple && this._elem("add_multiple").toggle(t),
            this._elem("save_button").trigger("button:save:" + (t ? "enable" : "disable")),
            t
        },
        _cell_edit_tmpl: function() {
            return s({
                ref: "/tmpl/list/cells_edit/index.twig"
            })
        },
        render: function() {
            return this.render_params = this.getTemplateData(),
            this.$el.attr("id", "cell-edit-" + this.field_id),
            this.$el.addClass("cell-edit-" + this.render_params.field.template),
            this.$el.toggleClass("cell-edit_last-cell", !this.options.$cell.next().length),
            this.render_params.field.multiple && this.$el.addClass("cell-edit_multiple"),
            this.scrollIntoView(this.options.$cell, this._getCellEditOffsets().base_w, i.bind(function() {
                this.options.$container.append(this.$el.html(this._cell_edit_tmpl().render(this.render_params))),
                this.form.setElement(this.$el),
                this.setPosition(),
                this._empty_multiple = this.render_params.field.multiple && !this.render_params.values.values.length,
                i.isFunction(this.options.onRender) && this.options.onRender(),
                this.focus().bindGlobalEvents()
            }, this)),
            this
        },
        focus: function() {
            switch (this.field.type_code) {
            case "textarea":
            case "streetaddress":
                this._findElem("textarea").trigger("controls:textarea:autosize").focus();
                break;
            case "select":
                this._findElem("control_select_button").focus();
                break;
            case "multiselect":
            case "smart_address":
                break;
            default:
                this._findElem("first_visible_input").focus()
            }
            return i.isFunction(this.onFocus) && this.onFocus(),
            this
        },
        getTemplateData: function() {
            var e = this.field_id;
            return {
                element: this._element || {},
                field: i.findWhere(this.model.getFields(), {
                    id: e
                }),
                values: this.model.getValues()[e]
            }
        },
        getConfirmModalParams: function() {
            var e = this;
            return i.extend(n.prototype.getConfirmModalParams.call(this), {
                accept: function() {
                    e.saveCellEdit(),
                    this.destroy()
                }
            })
        },
        onCancelClick: function(e) {
            e.stopPropagation(),
            this.cancelCellEdit({
                force_exit: !0
            })
        },
        onSaveClick: function(e) {
            e.stopPropagation(),
            this.saveCellEdit()
        },
        onCellEditInputKeydown: function(e) {
            switch (e.keyCode) {
            case l:
                if (this._findElem("suggest_opened").length)
                    return;
                this.saveCellEdit()
            }
        },
        onCellEditTextareaKeydown: function(e) {
            switch (e.keyCode) {
            case l:
                (e.ctrlKey || e.metaKey) && this.saveCellEdit()
            }
        },
        onInputFocus: function(e) {
            var i, s = t(e.target);
            i = (s.val() || "").length,
            s.closest(".linked-form__field").addClass("linked-form__field-focused").end().get(0).setSelectionRange(i, i)
        },
        onInputBlur: function(e) {
            var i = t(e.target);
            i.closest(".linked-form__field").removeClass("linked-form__field-focused")
        },
        saveCellEdit: function() {
            this.save_blocked || (this.has_changes || this.options.quick_save) && (this._elem("save_button").trigger("button:save:start"),
            this.save_blocked = !0,
            this.model.set(this._getModelUpdateParams()),
            this._saveCellEdit())
        },
        _saveCellEdit: function() {
            this.model.save({
                success: i.bind(function(e, t, i) {
                    this.isValidUpdateResponse(t) ? this.onUpdateSuccess(e) : this.onUpdateRequest().showErrorModal()
                }, this),
                error: i.bind(function() {
                    this.onUpdateRequest().showErrorModal()
                }, this)
            })
        },
        isValidUpdateResponse: function(e) {
            var t, s = this.model._type;
            if (!a.has_keys(e, ["response", s, "update"]) || i.isEmpty(e.response[s].update))
                return !1;
            switch (s) {
            case "leads":
            case "contacts":
            case "companies":
                return (i.first(e.response[s].update) || {}).last_modified === this.save_timestamp;
            case "customers":
                return t = e.response[s].update[s],
                !i.isEmpty(t) && !i.isEmpty(i.first(i.values(t)))
            }
        },
        onUpdateSuccess: function(e) {
            this.model.updateDefaults(),
            this.form.checkChanges(),
            this.triggerRowRerender(e.toJSON()),
            i.isFunction(this.onAfterSave) && this.onAfterSave(e.toJSON()),
            this.onUpdateRequest().cancelCellEdit()
        },
        onUpdateRequest: function() {
            return this.save_blocked = !1,
            this._elem("save_button").trigger("button:load:stop"),
            this
        },
        getRowRerenderCallbacks: function() {
            return i.extend(n.prototype.getRowRerenderCallbacks.call(this), {
                onBeforeSet: i.bind(this.onBeforeRowModelSet, this),
                getModelIds: i.bind(this.getModelIds, this)
            })
        },
        getModelIds: function(e, t) {
            var s, n = [];
            return this.linked_entity_edit ? (s = this._getLinkedFieldName(),
            t.each(function(t) {
                i.isEmpty(t.get("_linked")) || t.get("_linked")[s] != e.id || n.push(t.get("id"))
            }, this)) : n.push(e.id),
            n
        },
        _getLinkedFieldName: function() {
            return this._linked_entity_map[this.model._type]
        },
        onBeforeRowModelSet: function(e, t) {
            var s, n, o = e.custom_fields, r = t.get("custom_fields");
            return s = i.pluck(o, "id"),
            n = i.pluck(r, "id"),
            n = i.difference(n, s),
            i.each(o, function(e) {
                var t = i.findWhere(this.options.parsed_fields, {
                    stripped_id: e.id
                }) || {};
                if (t)
                    switch (t.type_code) {
                    case "text":
                    case "textarea":
                    case "streetaddress":
                    case "multitext":
                    case "smart_address":
                        i.each(e.values, function(e) {
                            e.value = i.escape(e.value)
                        });
                        break;
                    case "url":
                        i.each(e.values, function(e) {
                            e.value = e.value.trim(),
                            e.value && 0 !== e.value.indexOf("http://") && (e.value = "http://" + e.value),
                            e.value = i.escape(e.value)
                        })
                    }
            }, this),
            i.each(n, function(e) {
                o.push(i.findWhere(r, {
                    id: e
                }))
            }),
            delete e.id,
            e
        },
        _getEntityName: function() {
            var e = i(AMOCRM.element_types).invert();
            return function(t) {
                return e[t]
            }
        }()
    })
}),
define("lib/components/lists/edit/cell/price/index", ["require", "underscore", "lib/components/lists/edit/cell/base"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/base");
    return i.extend({
        onParseFromModelAttributes: function(e) {
            return e[this.field_id] = (e[this.field_id] || 0).toString(),
            e
        },
        onBeforeRowModelSet: function(e, s) {
            var n = +s.get(this.field_id)
              , o = +e[this.field_id]
              , r = {};
            return t.isFunction(this.options.updateSearchSummary) && (r[this.field_id] = o - n,
            this.options.updateSearchSummary(r)),
            i.prototype.onBeforeRowModelSet.apply(this, arguments)
        }
    })
}),
define("lib/components/lists/edit/cell/price/budget", ["require", "lib/components/lists/edit/cell/price/index", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/components/lists/edit/cell/price/index")
      , i = e("lib/common/fn");
    return t.extend({
        setPosition: function() {
            var e = this.options.$cell
              , t = !e.next().length
              , s = e.get(0).getBoundingClientRect()
              , n = s.width
              , o = 1
              , r = this._$window.scrollTop()
              , a = this._getCellEditOffsets()
              , l = $("#page_holder").outerHeight() > window.innerHeight ? i.scrollBarWidth : 0;
            return this.$el.css({
                width: Math.max(a.base_w, n) + o + a.width,
                left: "auto",
                right: t ? parseFloat($("#list_table").css("paddingRight")) : window.innerWidth - (s.left + n) - l,
                top: s.top + r + a.top,
                marginLeft: -1 * o + a.margin
            }),
            this
        }
    })
}),
define("lib/components/lists/edit/cell/checkbox", ["require", "underscore", "lib/components/lists/edit/cell/base"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/base");
    return i.extend({
        onParseFromModelAttributes: function(e) {
            var i, s = this.field_id, n = e.custom_fields, o = t.findWhere(n, {
                id: s
            });
            return o && (i = n.indexOf(o),
            n.splice(i, 1)),
            (n = n || []).push({
                id: s,
                name: (t.findWhere(this.options.parsed_fields, {
                    id: s
                }) || {}).title,
                values: [{
                    value: this.options.checkbox_value
                }]
            }),
            e.custom_fields = n,
            e
        }
    })
}),
define("lib/components/lists/edit/cell/linked/index", ["require", "jquery", "underscore", "twig", "lib/common/user_rights", "lib/components/base/confirm", "lib/components/lists/edit/cell/base", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/common/user_rights")
      , o = e("lib/components/base/confirm")
      , r = e("lib/components/lists/edit/cell/base")
      , a = e("lib/common/fn");
    return r.extend({
        _unlink_url: null,
        _link_new: null,
        _link_existed: null,
        subentity_edit: !1,
        events: function() {
            var e = i.extend({}, i.result(r.prototype, "events"), {
                "click .js-cell-edit__input-icon_unlink": "onUnlinkClick",
                "suggest:loaded .linked-form__ajax-input": "onSuggestLoaded",
                "suggest:changed .linked-form__ajax-input": "onSuggestChanged"
            });
            return e
        },
        destroy: function() {
            r.prototype.destroy.apply(this, arguments),
            this.need_reload && this._$document.trigger("list:reload")
        },
        initForm: function() {
            switch (r.prototype.initForm.apply(this, arguments),
            this.field_id) {
            case "contact_company_name":
                this.subentity_edit = !0;
                break;
            default:
                this.subentity_edit = !1
            }
            return this
        },
        _getEntityInEdit: function() {
            throw new Error("Must be implemented by subclass!")
        },
        _setLinkedEditableFields: function(e) {
            this.linked_entity_edit = this._row_model.get("_linked")[e]
        },
        _setChanges: function(e) {
            var t, i = (e || {}) && e.change, s = n.getRights(this.model._type, "add");
            return this._link_new ? (t = this.model.get(this.field_id).trim().length,
            this.$el.toggleClass("cell-edit-linked_new", !!t && !this._link_existed && s),
            s || (i = !!t && !!this.model.get("id"))) : i = this.model.get(this.field_id).trim().length ? i : !1,
            this.has_changes = i,
            this._elem("save_button").trigger("button:save:" + (i ? "enable" : "disable")),
            i
        },
        _suggest_tmpl: function() {
            return s({
                ref: "/tmpl/controls/suggest/dropdown.twig"
            })
        },
        getTemplateData: function() {
            var e = r.prototype.getTemplateData.call(this);
            return i.extend(e, {
                unlink_allowed: this._isUnlinkAllowed(),
                entity: this._getEntityInEdit()
            })
        },
        onFocus: function() {
            this._row_model.get("_linked")[this.field_id] ? this.$el.toggleClass("cell-edit-linked_unlink", this.render_params.unlink_allowed) : (this.model.set({
                _element_id: this._row_model.get("id")
            }),
            this.renderUnlinked())
        },
        renderUnlinked: function() {
            var e = i.extend({}, this.render_params)
              , t = {
                id: ""
            };
            e.field.template = "linked_new",
            e.values = i.extend(e.values, {
                value: "",
                placeholder: a.i18n("Attach a " + this._getEntityTypeLang(this.model._type))
            }),
            this.$el.html(this._cell_edit_tmpl().render(e)),
            this.$el.toggleClass("cell-edit-linked_no-add", !n.getRights(this._getEntityInEdit(), "add")),
            this._dropElemCache()._findElem("first_visible_input").focus(),
            t[this.field_id] = "",
            this.model.set(t).updateDefaults(),
            this.form.checkChanges(),
            this._link_new = !0
        },
        onUnlinkClick: function(e) {
            var t = i.bind(this.unlinkEntity, this)
              , s = this._getEntityTypeLang(this.model._type);
            e.stopPropagation(),
            this._addComponent(o, {
                class_name: "modal-list modal-leave-confirm",
                text: AMOCRM.lang["are_you_sure_to_unlink_" + s].replace("#MARKER#", (this._row_model.get(this.field_id) || {}).name),
                destroy: function() {
                    this.accepted && t()
                }
            })
        },
        onSuggestLoaded: function(e, t, s) {
            var n = [];
            "ok" === t.status ? (i.each(t.result, i.bind(function(e) {
                n.push({
                    id: e.id,
                    text: this._suggest_tmpl().render(e),
                    title: e.name
                })
            }, this)),
            s.trigger("suggest:reset", [n]).show()) : s.trigger("suggest:reset", [[]])
        },
        onSuggestChanged: function(e, i) {
            this.model.set({
                id: t(e.target).data("value-id")
            }),
            this._link_existed = !0,
            this.form.checkChanges(),
            this.saveCellEdit()
        },
        unlinkEntity: function() {
            return t.ajax({
                url: this._unlink_url,
                type: "POST",
                dataType: "json",
                data: {
                    element_id: (this._row_model.get(this.field_id) || {}).id,
                    element_type: AMOCRM.element_types[this.model._type],
                    main_id: this._getMainEntityId()
                }
            }).done(i.bind(function(e) {
                e.response ? (this.need_reload = !0,
                this.renderUnlinked()) : this.onUpdateRequest().showErrorModal()
            }, this)).fail(i.bind(function() {
                this.onUpdateRequest().showErrorModal()
            }, this))
        },
        _saveCellEdit: function() {
            throw new Error("Must be implemented by subclass!")
        },
        onUpdateSuccess: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        isValidUpdateResponse: function(e) {
            var t = this.model._type
              , s = this._getLinkedUpdateMethod();
            if (a.has_keys(e, ["response", t, s]) && !i.isEmpty(e.response[t][s]))
                switch (s) {
                case "add":
                    return !0;
                case "update":
                    return (i.first(e.response[t].update) || {}).last_modified === this.save_timestamp
                }
            return !1
        },
        _getLinkedFieldName: function() {
            return this.field_id
        },
        onAfterSave: function(e) {
            return e.company_name ? (this.field_id = "contact_company_name",
            e.contact_company_name = e.company_name,
            delete e.company_name,
            this.triggerRowRerender(e)) : e.contact_company_name ? (this.field_id = "company_name",
            e.company_name = e.contact_company_name,
            delete e.contact_company_name,
            this.triggerRowRerender(e)) : void 0
        },
        onBeforeRowModelSet: function() {
            var e, t = r.prototype.onBeforeRowModelSet.apply(this, arguments);
            return this.linked_entity_edit && (e = this.linked_entity_edit,
            t[this.field_id] = {
                id: e,
                name: i.escape(t[this.field_id]),
                url: "/" + this.model._type + "/detail/" + e
            },
            delete t.name),
            t
        },
        _getLinkedUpdateMethod: function() {
            throw new Error("Must be implemented by subclass!")
        },
        _getEntityTypeLang: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        _isUnlinkAllowed: function() {
            throw new Error("Must be implemented by subclass!")
        },
        _getMainEntityId: function() {
            throw new Error("Must be implemented by subclass!")
        }
    })
}),
define("lib/components/lists/edit/cell/linked/contacts", ["require", "underscore", "lib/components/lists/edit/cell/base", "lib/components/lists/edit/cell/linked/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/base")
      , s = e("lib/components/lists/edit/cell/linked/index");
    return s.extend({
        _unlink_url: "/ajax/contacts/linked/remove/",
        _getEntityInEdit: function() {
            return "companies"
        },
        _saveCellEdit: function() {
            this._link_new ? this.model.get("id") || this.model.get(this.field_id) ? !this.model.get("id") && this.model.get(this.field_id) ? i.prototype._saveCellEdit.apply(this, arguments) : i.prototype._saveCellEdit.apply(this, arguments) : (this.need_reload = !0,
            this.destroy()) : i.prototype._saveCellEdit.apply(this, arguments)
        },
        onUpdateSuccess: function(e) {
            this._link_new ? (this.need_reload = !0,
            this.destroy()) : i.prototype.onUpdateSuccess.apply(this, arguments)
        },
        _getModelUpdateParams: function() {
            var e = {};
            return this._link_new ? (this.model.setEntity("contacts"),
            e.id = this.subentity_edit ? this._row_model.get("_linked").main_contact : this._row_model.get("id"),
            this.model.get("id") ? (e.linked_company_id = this.model.get("id"),
            this.model.unset(this.field_id)) : this.model.get(this.field_id) && (e.company_name = this.model.get(this.field_id))) : e.name = this.model.get(this.field_id),
            t.extend(i.prototype._getModelUpdateParams.apply(this, arguments), e)
        },
        _getLinkedUpdateMethod: function() {
            return "update"
        },
        _getEntityTypeLang: function(e) {
            return "company"
        },
        _isUnlinkAllowed: function() {
            return (this._row_model.get("rights").contacts || {}).edit
        },
        _getMainEntityId: function() {
            return this.subentity_edit ? this._row_model.get("_linked").main_contact : this._row_model.get("id")
        }
    })
}),
define("lib/components/lists/edit/cell/linked/leads", ["require", "jquery", "underscore", "lib/components/lists/edit/cell/base", "lib/components/lists/edit/cell/linked/index"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/lists/edit/cell/base")
      , n = e("lib/components/lists/edit/cell/linked/index");
    return n.extend({
        _unlink_url: "/ajax/leads/linked/remove/",
        _getEntityInEdit: function() {
            var e;
            switch (this.field_id) {
            case "main_contact":
                e = this._getEntityName(AMOCRM.element_types.contacts);
                break;
            case "company_name":
                e = this._getEntityName(AMOCRM.element_types.companies)
            }
            return e
        },
        setMainEntity: function(e) {
            return t.ajax({
                url: "/ajax/leads/set/main/" + this.model._type,
                type: "POST",
                dataType: "json",
                data: {
                    main_id: this._row_model.get("id"),
                    linked_id: e.get("id")
                }
            }).done(i.bind(function(e) {
                e.response && "success" === e.response.result ? (this.need_reload = !0,
                this.destroy()) : this.onUpdateRequest().showErrorModal()
            }, this)).fail(i.bind(function() {
                this.onUpdateRequest().showErrorModal()
            }, this))
        },
        _saveCellEdit: function() {
            if (this._link_new)
                if (this.model.get("id") || this.model.get(this.field_id)) {
                    if (this.model.get("id") || !this.model.get(this.field_id))
                        return this.setMainEntity(this.model);
                    s.prototype._saveCellEdit.apply(this, arguments)
                } else
                    this.need_reload = !0,
                    this.destroy();
            else
                s.prototype._saveCellEdit.apply(this, arguments)
        },
        onUpdateSuccess: function(e) {
            this._link_new ? this.setMainEntity(e) : s.prototype.onUpdateSuccess.apply(this, arguments)
        },
        _getModelUpdateParams: function() {
            var e = {};
            return this._link_new ? (e.linked_leads_id = this.model.get("_element_id"),
            this.model.get("id") && this.model.unset(this.field_id)) : e.name = this.model.get(this.field_id),
            i.extend(s.prototype._getModelUpdateParams.apply(this, arguments), e)
        },
        _getLinkedUpdateMethod: function() {
            return this._link_new && !this._link_existed ? "add" : "update"
        },
        _getEntityTypeLang: function(e) {
            return {
                contacts: "contact",
                companies: "company"
            }[e]
        },
        _isUnlinkAllowed: function() {
            var e = this._getEntityName(this._row_model.get("element_type"));
            return (this._row_model.get("rights")[e] || {}).edit
        },
        _getMainEntityId: function() {
            return this._row_model.get("id")
        }
    })
}),
define("lib/components/lists/edit/cell/multitext", ["require", "jquery", "underscore", "twig", "lib/components/lists/edit/cell/base"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/components/lists/edit/cell/base");
    return n.extend({
        _selectors: function() {
            return i.extend(n.prototype._selectors.apply(this, arguments), {
                pei_input: ".linked-form__field-pei .linked-form__cf"
            })
        },
        _classes: function() {
            return i.extend(n.prototype._classes.apply(this, arguments), {
                add_multiple: "js-cell-edit__field-add-multiple",
                action_buttons: "linked-form__field-buttons"
            })
        },
        events: function() {
            var e = i.extend({}, i.result(n.prototype, "events"));
            return e["click " + this._selector("add_multiple")] = "addNewPeiInput",
            e
        },
        addNewPeiInput: function(e) {
            var n, o = this._findElem("pei_input"), r = o.last(), a = o.length;
            return r.val() ? (n = t.extend(!0, {}, this.render_params),
            (n.values.values = []).push({
                placeholder: "...",
                enum_name: n.field.name + "[%d][enum]".replace("%d", a),
                name: n.field.name + "[%d][value]".replace("%d", a),
                "enum": this.field.sub_code ? this.model.getEnumID(this.field.enums, this.field.sub_code) : null,
                disabled_select: !!this.field.sub_code
            }),
            t(s({
                ref: "/tmpl/list/cells_edit/multiple/item.twig"
            }).render(i.extend(n, {
                item: i.first(n.values.values)
            }))).insertBefore(this._elem("action_buttons")).find(this._selector("input")).focus(),
            this.setPosition(),
            void this.form.setTrackingInputs(this._findElem("form_field").last())) : (r.focus(),
            !1)
        }
    })
}),
define("lib/interface/mail/add_contacts", ["require", "jquery", "underscore", "backbone", "twig", "lib/components/base/modal", "lib/components/base/confirm", "elements_view", "lib/components/base/form", "lib/common/hs", "lib/common/fn", "lib/components/mail/api"], function(e) {
    var t, i, s, n, o, r = e("jquery"), a = (e("underscore"),
    e("backbone")), l = e("twig"), c = e("lib/components/base/modal"), d = (e("lib/components/base/confirm"),
    e("elements_view")), u = e("lib/components/base/form"), h = (e("lib/common/hs"),
    e("lib/common/fn")), _ = e("lib/components/mail/api"), p = "/tmpl/mail/modal/add_contacts.twig", m = "/tmpl/mail/modal/contacts_list_view.twig";
    return i = a.Model.extend({
        onSave: null,
        save: function(e) {
            var t = this;
            return this.onSave = r.Deferred(),
            _.linkAddress().done(function(e) {
                t.onSave.resolve()
            }).fail(function(e, i, s) {
                var n = {
                    req_obj: e,
                    msg: i,
                    error: s
                };
                t.onSave.reject(n)
            }),
            this.onSave.promise()
        }
    }),
    t = a.Collection.extend({
        onFetch: null,
        model: i,
        fetch: function(e) {
            var t = this
              , i = e.threadIds || [];
            return this.onFetch = r.Deferred(),
            _.getAddressesWithoutContact(i).done(function(e) {
                t.add(e.items),
                t.onFetch.resolve(e)
            }).error(function(e, i, s) {
                var n = {
                    req_obj: e,
                    msg: i,
                    error: s
                };
                t.onFetch.reject(n)
            }),
            this.onFetch.promise()
        }
    }),
    s = d.extend({
        template: p,
        modal: null,
        subview: null,
        threadIds: [],
        _selectors: function() {
            return {
                subviewContainer: ".add-contact-view__subview-container"
            }
        },
        initialize: function(e) {
            e.threadIds instanceof Array ? this.threadIds = e.threadIds : "number" == typeof e.threadIds && (this.threadIds = [e.threadIds]),
            this.render()
        },
        render: l._preload([p], "_render"),
        _render: function() {
            var e = this;
            this.$el.html(l({
                ref: this.template
            }).render({
                title: AMOCRM.lang.multiple_modal_add_contacts_title
            })),
            this.modal = new c({
                init: function(t) {
                    t.trigger("modal:loaded").html(e.$el).trigger("modal:centrify")
                }
            }),
            this.showList()
        },
        showList: function() {
            this.subview = new n({
                threadIds: this.threadIds,
                container: this._findElem("subviewContainer"),
                modal: this.modal,
                parent: this
            })
        },
        showForm: function() {}
    }),
    n = d.extend({
        template: m,
        threadIds: null,
        dataLoaded: null,
        collection: null,
        parent: null,
        events: {
            "click #contact-list__checkbox-all": "onToggleAll",
            "click .js-contact-checkbox input": "onCheckboxChange"
        },
        _selectors: function() {
            return {
                footer: ".contacts-list__footer",
                checkboxes: ".js-contact-checkbox input",
                mainCheckbox: "#contact-list__checkbox-all",
                buttonCreate: "#add-contacts-create-button",
                buttonCreateLabel: ".button-input-inner__text",
                buttonNext: "",
                buttonSkip: ""
            }
        },
        initialize: function(e) {
            var i = this;
            this.threadIds = e.threadIds,
            this.$container = e.container,
            this.modal = e.modal,
            this.parent = e.parent,
            this.collection = new t,
            this.collection.fetch({
                threadIds: this.threadIds
            }).done(function(e) {
                i.render.call(i, e)
            })
        },
        render: l._preload([m], "_render"),
        _render: function(e) {
            var t = {
                all_contacts: AMOCRM.lang.mail_modal_all_contacts_checkbox,
                count: e.items.length,
                items: e.items,
                button_text_start: AMOCRM.lang.mail_modal_add_button_text_create,
                button_text_end: AMOCRM.lang.mail_letter_contacts_more_contacts
            };
            this.$el.html(l({
                ref: this.template
            }).render(t)),
            this.$container.html(this.$el),
            this._findElem("mainCheckbox").trigger("click"),
            this.setButtonTitle()
        },
        destroy: function() {
            this.collection.reset(),
            this.collection = null,
            this.remove()
        },
        onToggleAll: function(e) {
            this.toggleAll(r(e.currentTarget))
        },
        onCheckboxChange: function(e) {
            var t, i = e.currentTarget.checked, s = +r(e.currentTarget).val(), n = this._findElem("mainCheckbox"), o = n.closest(".control-checkbox");
            this.collection.findWhere({
                address_id: s
            }).set("checked", i),
            t = this.collection.where({
                checked: !0
            }).length,
            t == this.collection.length ? (n.prop("checked", !0),
            o.removeClass("control-checkbox-dash")) : (t > 0 ? o.addClass("control-checkbox-dash") : o.removeClass("control-checkbox-dash"),
            n.prop("checked", !1)),
            this.setButtonTitle()
        },
        toggleAll: function(e) {
            var t = e.prop("checked")
              , i = this.collection.where({
                checked: !0
            }).length
              , s = e.closest(".control-checkbox");
            i > 0 && (t = !1,
            e.prop("checked", !1)),
            this.collection.each(function(e) {
                e.set("checked", t)
            }),
            this._findElem("checkboxes").each(function() {
                this.checked = t
            }),
            s.removeClass("control-checkbox-dash"),
            this.setButtonTitle()
        },
        setButtonTitle: function() {
            var e = this.$container.find(this._selector("buttonCreate"))
              , t = this.collection.where({
                checked: !0
            }).length
              , i = AMOCRM.lang.mail_modal_add_button_text_create + " " + t + " " + h.numeralWord(t, AMOCRM.lang.mail_letter_contacts_more_contacts);
            e.find(this._selector("buttonCreateLabel")).text(i),
            t > 0 ? (e.addClass("button-input_blue"),
            e.removeClass("button-input-disabled"),
            e.prop("disabled", !1)) : (e.removeClass("button-input_blue"),
            e.addClass("button-input-disabled"),
            e.prop("disabled", !0))
        }
    }),
    o = u.View.extend({
        initialize: function(e) {}
    }),
    s
}),
define("lib/interface/mail/thread", ["require", "jquery", "vendor/underscore", "twig", "vendor/backbone", "lib/components/base/modal", "lib/components/base/confirm", "elements_view", "lib/common/hs", "lib/components/lists/actions/add_entity", "lib/interface/mail/add_contacts", "lib/components/lists/actions/write_mail", "lib/components/mail/api", "lib/components/mail/api_v2", "lib/common/fn"], function(e) {
    "use strict";
    var t, i, s, n, o, r = e("jquery"), a = e("vendor/underscore"), l = e("twig"), c = e("vendor/backbone"), d = e("lib/components/base/modal"), u = e("lib/components/base/confirm"), h = e("elements_view"), _ = e("lib/common/hs"), p = e("lib/components/lists/actions/add_entity"), m = e("lib/interface/mail/add_contacts"), f = e("lib/components/lists/actions/write_mail"), g = e("lib/components/mail/api"), b = e("lib/components/mail/api_v2"), v = e("lib/common/fn");
    return i = c.Collection.extend({
        initialize: function() {
            this.on("letter:collection:destroy", this.letterDestroy)
        },
        destroy: function() {
            this.each(function(e) {
                e.trigger("letter:model:destroy")
            }, this)
        },
        letterDestroy: function(e) {
            this.remove({
                id: e
            })
        }
    }),
    s = c.Model.extend({
        initialize: function() {},
        destroy: function() {}
    }),
    n = h.extend({
        events: {
            "click .thread_letter__message a": "checkOuterHref",
            "click .js-letter-show-line-contacts": "showContactsInline",
            "click .js-letter-show-all-contacts": "showHiddenContacts",
            "click .js-letter-hide-all-contacts": "hideShownContacts",
            "click .js-letter-show-all-contacts-to": "showAllContactsTo",
            "click .js-letter-show-all-copies": "showAllCopies",
            "click .js-letter-remove": "removeLetter",
            "click .thread_letter__attachment": "getFile"
        },
        errorFlag: !1,
        _selectors: function() {
            return {
                contacts: ".js-letter-contacts-table",
                fromShort: ".thread-letter__contacts-from_short",
                fromFull: ".thread-letter__contacts-from_full",
                toShort: ".thread-letter__contacts-to_short",
                toLine: ".thread-letter__contacts-to_line",
                toFull: ".thread-letter__contacts-to_full",
                toAll: ".thread-letter__contacts-to_all",
                copies: ".thread_letter__copy",
                copiesAll: ".thread-letter__copy_all",
                attachment: ".thread_letter__attachment",
                attachment_loader: ".thread_letter__attachment-loader"
            }
        },
        initialize: function(e) {
            this.in_modal = e.in_modal
        },
        destroy: function() {},
        checkOuterHref: function(e) {
            var t = r(e.currentTarget)
              , i = t.attr("href");
            i.indexOf(window.location.host) < 0 && !t.attr("target") && (e.preventDefault(),
            window.open(i, "_blank"))
        },
        getFile: function(e) {
            if (e.preventDefault(),
            !r(e.currentTarget).hasClass("thread_letter__attachment_blocked")) {
                var t, i = r(e.currentTarget), s = i.parents(".thread_letter__attachment-container").find(".thread_letter__attachment-loader"), n = i.data("id") + "", o = this, l = function(e) {
                    var t = new u({
                        class_name: "modal-list file_error_modal",
                        accept_text: "ќ ",
                        text: '<span class="file_error">' + e + "</span>",
                        destroy: function() {
                            o.errorFlag = !1
                        }
                    });
                    return t
                };
                s.show();
                var c = function(e, i, n) {
                    if (e.responseJSON) {
                        var r = e.responseJSON;
                        if ("fail" === r.status)
                            return s.hide(),
                            void (o.errorFlag || (t = AMOCRM.lang["file_error_" + r.code],
                            l(t),
                            o.errorFlag = !0))
                    }
                    o.errorFlag || (t = AMOCRM.lang.file_error_load_failed,
                    l(t),
                    o.errorFlag = !0),
                    s.hide()
                }
                  , d = 0
                  , h = function() {
                    g.getAttachment(n).done(function(e) {
                        switch (e.status) {
                        case "not_downloaded":
                            g.fetchAttachment(n).done(function() {
                                d > 1 ? l(AMOCRM.lang.file_error_load_failed) : (d++,
                                setTimeout(h, 3e3))
                            }).fail(c);
                            break;
                        case "processing":
                            setTimeout(h, 3e3);
                            break;
                        case "complete":
                            s.hide(),
                            window.open(e.url, "_self");
                            break;
                        case "fail":
                            s.hide(),
                            o.errorFlag || (t = AMOCRM.lang["file_error_" + e.code],
                            l(t),
                            o.errorFlag = !0)
                        }
                    }).fail(c)
                };
                return h = a.bind(h, o),
                h(),
                !1
            }
        },
        showContactsInline: function() {
            var e = this._findElem("toShort")
              , t = this._findElem("toLine");
            e.hide(),
            t.css({
                display: "inline-block"
            }),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        showHiddenContacts: function(e) {
            var t = this._elem("fromShort")
              , i = this._elem("fromFull")
              , s = this._elem("contacts")
              , n = this._findElem("toLine");
            s.css({
                display: "table"
            }),
            t.hide(),
            i.css({
                display: "inline-block"
            }),
            n.hide(),
            this.showFullContactsTo(),
            this.showFullCopies(),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        hideShownContacts: function() {
            var e = this._elem("fromShort")
              , t = this._elem("fromFull")
              , i = this._elem("contacts");
            i.hide(),
            e.css({
                display: "inline-block"
            }),
            t.hide(),
            this.hideFullContactsTo(),
            this.hideFullCopies(),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        showFullContactsTo: function() {
            var e = this._elem("toShort")
              , t = this._elem("toFull");
            e.hide(),
            t.css({
                display: "inline-block"
            }),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        showAllContactsTo: function() {
            var e = this._elem("toFull")
              , t = this._elem("toAll");
            e.hide(),
            t.css({
                display: "inline-block"
            }),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        hideFullContactsTo: function() {
            var e = this._elem("toShort")
              , t = this._elem("toFull")
              , i = this._elem("toAll");
            e.css({
                display: "inline-block"
            }),
            t.hide(),
            i.hide(),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        showFullCopies: function() {
            var e = this._elem("copies")
              , t = this._elem("copiesAll");
            e.css({
                display: "inline-block"
            }),
            t.hide(),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        showAllCopies: function() {
            var e = this._elem("copies")
              , t = this._elem("copiesAll");
            e.hide(),
            t.css({
                display: "inline-block"
            }),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        hideFullCopies: function() {
            var e = this._elem("copies")
              , t = this._elem("copiesAll");
            e.hide(),
            t.hide(),
            this.in_modal && r(".modal-body").trigger("modal:centrify")
        },
        removeLetter: function(e) {
            var t = this;
            new u({
                text: AMOCRM.lang.mail_letter_remove_confirm,
                destroy: function() {
                    this.accepted && t.$el.trigger("letter:field:remove", t.id).remove()
                }
            })
        }
    }),
    o = h.extend({
        modal: null,
        ready: !1,
        ns: ".thread",
        list: null,
        events: {
            "click .js-mail_thread__create_contact": "createLinkedEntity",
            "click .js-mail_thread__create_lead": "createLinkedEntity",
            "click .js-mail_thread__create_customer": "createLinkedEntity",
            "click .js-mail_thread__link_lead": "onClickLinkLead",
            "click #search_clear_button": "onClickCloseSearch",
            "click .js-mail_thread__delete_thread": "onClickDeleteThread",
            "click .js-mail_thread__restore_thread": "onClickRestoreThread",
            "click .js-linked-entity-unlink": "unlinkLead",
            "click .js-thread-letter-email": "createLinkedEntity",
            "click .js-thread-letter-email-blocked": "createLinkedEntityBlocked",
            "click .js-mail_thread__write_mail": "writeMail",
            "letter:field:remove .thread_letter__holder": "removeLetter",
            "input .js-control--suggest--input-ajax": "onSuggestInput",
            "click .control--suggest--list--item": "onItemClick"
        },
        _selectors: function() {
            return {
                actions: ".mail_thread__actions",
                buttons: ".mail_thread__action_buttons",
                thread_caption: ".mail_thread__caption",
                thread_wrapper: ".mail_thread__wrapper",
                letter_wrapper: ".thread_letter__holder",
                close_search_button: "#search_clear_button",
                link_button_action: "#link-button-action",
                suggest_action: "#suggest-action",
                suggest_input: ".js-control--suggest--input-ajax",
                suggest_list: ".js-control--suggest--list",
                card_scroller_fake: ".card-scroller-fake",
                modal_body: ".modal-body",
                delete_button_action: "#mail_thread__delete_thread",
                restore_button_action: "#mail_thread__restore_thread",
                overlay: "#thread_change_loader",
                spinner: "#thread_spinner"
            }
        },
        parent: null,
        hasChanges: function() {
            return t
        },
        initialize: function(e) {
            var i = this;
            r(window).on("scroll.thread wheel.thread touchmove.thread", function() {
                i.setSpinnerPosition.call(i)
            }),
            t = e.needReloadList || !1,
            this.parent = e.parent,
            this.initOptions(e),
            this.getAjaxLetters()
        },
        showOverlay: function() {
            this.hideOverlay(),
            this.options.params.in_modal ? (this.$el.find("#thread_change_loader").length ? this.$page_change_overlay = r("#thread_change_loader") : (this.$page_change_overlay = r('<div class="default-overlay" id="thread_change_loader" style="background: rgba(255,255,255,0.4);z-index: 22;"><span id="thread_spinner" class="spinner-icon spinner-icon-abs-center"></span></div>'),
            this.$el.append(this.$page_change_overlay),
            this.$page_change_overlay.addClass(this.overlay_class_name)),
            this.setSpinnerPosition(),
            this.$page_change_overlay.trigger("overlay:show")) : r(document).trigger("page:show:overlay")
        },
        hideOverlay: function() {
            this.options.params.in_modal ? this.$page_change_overlay && this.$page_change_overlay.trigger("overlay:hide") : r(document).trigger("page:hide:overlay")
        },
        setSpinnerPosition: function() {
            var e = this._findElem("spinner");
            if (e.length) {
                var t = window.scrollY || window.pageYOffset
                  , i = r(window).height()
                  , s = e.parent()
                  , n = s.offset().top
                  , o = s.height()
                  , a = t - n
                  , l = a + i
                  , c = 0;
                0 > a && (a = 0),
                l > o && (l = o),
                c = a + (l - a) / 2 - 25,
                e.css({
                    top: c
                })
            }
        },
        setListChanged: function() {
            t = !0
        },
        onItemClick: function(e) {
            var t = this
              , i = r(e.currentTarget)
              , s = i.data("value-id")
              , n = this.options.params.id;
            this.showOverlay(),
            g.linkLead(n, s).done(function(e) {
                t.setListChanged(),
                t.reload.call(t),
                (new d).showSuccess()
            }).fail(function(e, i, s) {
                var n = JSON.parse(e.responseText) || {};
                n.message_code && "api_unavailable" === n.message_code && (new d({
                    init: t.reload.bind(t)
                }).showError(AMOCRM.lang["mail_error_" + n.message_code], !1),
                t.setListChanged())
            })
        },
        onSuggestInput: function(e) {
            var t = this
              , i = r(e.currentTarget).parent()
              , s = i.find(this._selector("suggest_list"))
              , n = this._findElem("suggest_input")
              , o = n.val().trim()
              , a = this._findElem("close_search_button");
            o.length > 3 ? (i.hasClass("control--suggest-loading") || (a.hide(),
            i.addClass("control--suggest-loading").append('<span class="control--suggest--loader spinner-icon"></span>')),
            r.ajax({
                url: n.data("url"),
                type: "GET",
                data: {
                    term: o
                },
                success: function(e) {
                    var n = e.response.items;
                    n.length && s.removeClass("control--suggest--list").addClass("control--suggest--list-opened").css("display", ""),
                    n.length > 15 && (n = n.splice(0, 15)),
                    t.renderSuggest.call(t, n),
                    i.removeClass("control--suggest-loading").children(".control--suggest--loader").remove(),
                    a.show()
                }
            })) : (s.html("").removeClass("control--suggest--list-opened").addClass("control--suggest--list"),
            i.css("z-index", "").children(".control--suggest--loader").remove())
        },
        renderSuggest: function(e) {
            var t = []
              , i = this._findElem("suggest_list");
            e.length ? (r.each(e, function(e, i) {
                t.push({
                    id: i.id,
                    text: i.name.text
                })
            }),
            i.trigger("suggest:reset", [t])) : i.trigger("suggest:reset", [[]])
        },
        checkAsRead: function() {
            var e = this
              , t = this.id;
            g.readThread(t, {
                no_page_change: !0
            }).success(function() {
                r(document).trigger("mail:update:counter"),
                e.setListChanged()
            })
        },
        destroy: function() {
            r(window).off(this.ns),
            r(document).off("controls:hide:only"),
            this.letters_collection && this.letters_collection.destroy()
        },
        reload: function(e) {
            e && this.setListChanged(),
            this.getAjaxLetters()
        },
        initOptions: function(e) {
            e = a.extend({
                filter: {}
            }, e),
            this.options = {
                params: e,
                items: {}
            }
        },
        getAjaxLetters: function() {
            var e, t, i = this, s = {
                page_xhr: !this.options.params.in_modal,
                page_is_card: !0,
                no_loader: this.options.params.in_modal,
                no_page_change: this.options.params.in_modal
            };
            Promise.all([b.getThread(this.options.params.id), b.getMessages(this.options.params.id, 1, 200, s)]).then(function(s) {
                e = s[0],
                t = s[1],
                i.options.params.in_modal || AMOCRM.first_load ? i.onSuccess(e, t) : i.options.params.animationEnd.done(function() {
                    i.onSuccess(e, t)
                })
            })["catch"](function(e) {
                i.options.params.in_modal ? (i.renderError(e),
                r("#card_fake").hide()) : i.options.params.animationEnd.done(function() {
                    i.renderError(e),
                    r("#card_fake").hide()
                })
            })
        },
        onSuccess: l._preload(["/tmpl/mail/thread/card.twig"], "_onSuccess"),
        _onSuccess: function(e, t) {
            e.unread && this.checkAsRead(),
            this.options.actions = e.actions,
            this.options.items = t.items,
            this.options.thread_id = e.id,
            this.options.thread_name = e.name,
            this.options.entity = e.entity,
            this.renderLetters()
        },
        renderLetters: function() {
            var e, t;
            this.options.params.in_modal || (r("title").html(v.escapeHTML(this.options.thread_name)),
            e = r("title").html(),
            AMOCRM.setTitle(e),
            this.options.params.onload.call(this, !0)),
            t = {
                to_card: {
                    icon: "to-card",
                    text: AMOCRM.lang.card_to_card,
                    class_name: "js-linked-entity-show",
                    link_class_name: "js-navigate-link",
                    href: this.options.entity ? this.options.entity.url : "#"
                }
            },
            this.options.entity && this.options.actions.unlink && (t = a.extend(t, {
                unlink: {
                    icon: "unlink",
                    class_name: "js-linked-entity-unlink",
                    text: AMOCRM.lang.card_unlink,
                    enabled: this.options.actions.unlink || !1
                }
            }));
            var i = {
                lang: AMOCRM.lang,
                items: this.options.items,
                name: this.options.thread_name,
                template: this.options.params,
                in_modal: this.options.params.in_modal,
                entity: this.options.entity,
                actions: this.options.actions,
                more_items: t,
                ajax: {
                    url: "/ajax/leads/list/",
                    params: ""
                },
                leads: []
            }
              , s = r(l({
                ref: "/tmpl/mail/thread/card.twig"
            }).render(i));
            s.find(".thread_letter__message_container a").each(function(e) {
                r(e).attr({
                    rel: "nofollow",
                    target: "_blank"
                })
            }),
            this.$el.empty().append(s),
            this.parent && this.parent.fakeCardHide(),
            this.initCollection(),
            this.options.params.in_modal && this.options.params.onload.call(this, !0),
            this._findElem("card_scroller_fake").hide(),
            this.$el.find(".thread_letter__message_inner").each(function() {
                var e = r(this);
                new _({
                    wrapper: e.parent(),
                    scroller: e,
                    selectable_content: !0
                })
            }),
            this.delegateEvents(),
            this.onClickCloseSearch(),
            this.options.params.in_modal || (r(document).trigger("thread:ready"),
            this.hideOverlay()),
            this.ready = !0
        },
        renderError: function(e) {
            var t, i, s = r("#card_holder");
            switch (e.status) {
            case 403:
                i = AMOCRM.lang.mail_letter_view_forbidden,
                t = "/tmpl/mail/thread/403page.twig";
                break;
            case 410:
                i = AMOCRM.lang.mail_letter_deleted,
                t = "/tmpl/mail/thread/404page.twig";
                break;
            default:
                i = AMOCRM.lang.page_404_caption,
                t = "/tmpl/mail/thread/403page.twig"
            }
            this.options.params.in_modal ? this.options.params.modalShowError(i, !1) : (l._preload([t], function() {
                s.html(l({
                    ref: t
                }).render({
                    title: i,
                    text: AMOCRM.lang.page_404_mail_text
                }))
            })(),
            this.options.params.onload.call(this, !0)),
            this.hideOverlay()
        },
        onClickLinkLead: function(e) {
            var t = this._findElem("close_search_button")
              , i = this._findElem("link_button_action")
              , s = this._findElem("suggest_action");
            this.$el.addClass("search-active"),
            t.show(),
            i.addClass("hidden-block"),
            s.removeClass("hidden-block"),
            this._findElem("suggest_input").focus()
        },
        onClickCloseSearch: function() {
            var e = this._findElem("link_button_action")
              , t = this._findElem("suggest_action");
            this.$el.removeClass("search-active"),
            e.removeClass("hidden-block"),
            t.addClass("hidden-block"),
            this._findElem("suggest_input").val(""),
            this._findElem("suggest_list").empty().hide()
        },
        unlinkLead: function(e) {
            var t = this
              , i = this.options.params.id;
            this.showOverlay(),
            b.unlinkThread(i).done(function(e) {
                t.setListChanged(),
                t.reload.call(t)
            }).fail(function(e, i, s) {
                var n = JSON.parse(e.responseText) || {};
                n.error_code && "api_unavailable" == n.error_code && (new d({
                    init: t.reload.bind(t)
                }).showError(AMOCRM.lang["mail_error_" + n.error_code], !1),
                t.setListChanged())
            })
        },
        initCollection: function() {
            var e = this.options.items;
            this.letters_collection = new i,
            a.each(e, function(e) {
                this.letters_collection.push(this.addLetter(r("#thread_letter_" + e.id), e).model)
            }, this)
        },
        addLetter: function(e, t) {
            return new n({
                el: e,
                model: new s(t),
                id: t.id,
                unread: t.unread ? !0 : !1,
                sent: t.sent ? !0 : !1,
                in_modal: this.options.params.in_modal
            })
        },
        createLinkedEntity: function(e) {
            var t = r(e.currentTarget).attr("data-entity");
            this.callLinkModal(t)
        },
        createLinkedEntityBlocked: function() {
            (new d).showError(AMOCRM.lang.mail_letter_create_contact_blocked, !1)
        },
        callLinkModal: function(e, t) {
            var i = this
              , s = r.Deferred()
              , n = r.Deferred()
              , t = t || this.id
              , o = {
                id: i.id,
                entity: e,
                from_list: !1,
                from_card: !0,
                subEntity: e + "s",
                in_modal: this.options.params.in_modal,
                done: s,
                changing: n
            };
            "customer" === e && (o = a.extend(o, {
                template: "/tmpl/common/modal/add_entity/add_entity_customer.twig"
            })),
            this.onClickCloseSearch(),
            s.done(this.reload.bind(this)),
            n.done(function() {
                i.setListChanged()
            }),
            t instanceof Array || (t = [+t]),
            new p(o)
        },
        createLinkedContact: function() {
            this.modal = new m({
                threadIds: this.options.thread_id,
                card: this
            })
        },
        removeLetter: function(e, t) {
            this.letters_collection.trigger("letter:collection:destroy", t)
        },
        writeMail: function() {
            this.options.params.in_modal && this.options.params.modalHide(),
            this.modal = new f({
                entity: AMOCRM.data.current_entity,
                sub_entity: "reply",
                from_card: !0,
                id: [this.options.thread_id],
                box_id: this.mailbox,
                in_modal: this.options.params.in_modal,
                setNeedReload: a.bind(function() {
                    this.setListChanged()
                }, this),
                destroyFromReply: a.bind(function() {
                    this.options.params.destroyFromReply()
                }, this),
                threadModalShow: a.bind(function() {
                    this.options.params.modalShow()
                }, this)
            },this)
        }
    })
}),
define("lib/interface/notes/views/types/mail", ["require", "underscore", "lib/components/base/modal", "lib/components/base/confirm", "lib/interface/mail/common/modals", "lib/interface/notes/views/note", "lib/interface/mail/thread", "lib/components/mail/api_v2"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/modal")
      , s = e("lib/components/base/confirm")
      , n = e("lib/interface/mail/common/modals")
      , o = e("lib/interface/notes/views/note")
      , r = e("lib/interface/mail/thread")
      , a = e("lib/components/mail/api_v2");
    return o.extend({
        events: t.extend({}, o.prototype.events || {}, {
            "click .js-note-mail-share": "shareThread",
            "click .js-note-mail-message": "clickLink",
            "click .js-note-mail-resend": "resendOnClick"
        }),
        resendOnClick: function(e) {
            var t = this.model.get("data");
            e.preventDefault(),
            a.resendMessage(t.params.link_data.thread_id, t.params.link_data.message_id),
            t.params.delivery.status = "queued",
            this.model.set("data", t),
            this._render()
        },
        shareThread: function(e) {
            var i = {
                id: +$(e.currentTarget).attr("data-note_id"),
                entity_type: +$(e.currentTarget).attr("data-element_type")
            }
              , o = +$(e.currentTarget).attr("data-thread_id");
            i.entity_type = t.invert(AMOCRM.element_types)[i.entity_type],
            i.entity_type = i.entity_type.substring(0, i.entity_type.length - 1),
            a.getThread(o).done(function(e) {
                new s({
                    class_name: "modal-list",
                    text: AMOCRM.lang.mail_confirm_share_access,
                    accept: function() {
                        var e = this
                          , t = {
                            contacts: [],
                            companies: [],
                            leads: [],
                            customers: []
                        }
                          , s = {};
                        s[AMOCRM.element_types.contacts] = "contacts",
                        s[AMOCRM.element_types.leads] = "leads",
                        s[AMOCRM.element_types.companies] = "companies",
                        s[AMOCRM.element_types.customers] = "customers",
                        t[AMOCRM.data.current_entity].push(+AMOCRM.data.current_card.id),
                        AMOCRM.data.current_card && AMOCRM.data.current_card.linked_forms && AMOCRM.data.current_card.linked_forms.form_models && AMOCRM.data.current_card.linked_forms.form_models.each(function(e) {
                            e.get("ID") && t[s[e.get("ELEMENT_TYPE")]].push(+e.get("ID"))
                        }),
                        a.shareThread(o, t, i).done(function(t) {
                            e.requestSuccess(AMOCRM.lang.mail_share_success),
                            $(document).trigger("page:reload")
                        }).fail(n.threadCommonFailModal)
                    }
                })
            }).fail(n.threadCommonFailModal)
        },
        clickLink: function(e) {
            var s, n, o = this, a = $(e.currentTarget), l = a.attr("data-thread_id"), c = a.attr("data-contact_id");
            return this.thread_modal = new i({
                class_name: "modal-list thread_modal",
                init: function(e) {
                    this.threadView = new r({
                        id: l,
                        filter: {
                            contact_id: c
                        },
                        el: e,
                        in_modal: !0,
                        destroyFromReply: t.bind(function() {
                            this.destroy()
                        }, this),
                        modalHide: t.bind(function() {
                            this.hide()
                        }, this),
                        modalShow: t.bind(function() {
                            this.show()
                        }, this),
                        modalShowError: t.bind(function(e, t) {
                            this.showError(e, t)
                        }, this),
                        onload: function() {
                            e.trigger("modal:loaded").trigger("modal:centrify"),
                            e.on("click", ".thread_letter__contacts a, .mail_thread__linked_lead a", function(e) {
                                e.preventDefault(),
                                s = window.location.pathname,
                                n = $(e.currentTarget).attr("href"),
                                o.thread_modal.destroy(),
                                s !== n && (AMOCRM.router.navigate(n, {
                                    trigger: !0
                                }),
                                $(document).trigger("page:show:overlay"),
                                $("#card_change_loader").trigger("overlay:show"))
                            })
                        }
                    })
                },
                destroy: function() {
                    $("#card_change_loader").trigger("overlay:hide"),
                    o.thread_modal.threadView.destroy()
                }
            }),
            !1
        }
    })
}),
define("lib/interface/notes/views/mixins/task_complete", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        events: {
            "click .js-task-complete-btn": "complete",
            "click .js-todo-result:not(.button-input-disabled)": "setResult",
            "click .js-todo-result-skip": "skipResultClick",
            "click .js-task-result-button": "completeClick",
            "touchstart .card-task__clone__dates__preset label": "_onDateCloneChange",
            "click .card-task__clone__dates__preset label": "_onDateCloneChange",
            "focus .card-task__actions__inner__textarea": "_showCloneControls",
            "focus .card-task__clone__dates__preset-date-input": "_changeCloneDateRadio",
            "controls:change .card-task__clone__dates__preset-date-input": "_changeCloneDateRadio"
        },
        completeClick: function(e) {
            var i = $.Deferred()
              , s = this._form.model.get("result")
              , n = this.$(".js-task-result-button");
            if ("Y" !== n.attr("data-loading"))
                return e && e.stopPropagation && e.stopPropagation(),
                n.trigger("button:load:start", ["white"]),
                this._cloneThis(this._getCloneDate(this.$(".card-task__clone__dates__preset input:checked").val())).then(t.bind(function(e) {
                    this.model.set({
                        date_modify: moment().unix(),
                        status: 1,
                        result_form: !0,
                        result_text: s
                    }),
                    e && this.model.collection.add(e),
                    this.model.complete({
                        silent: Boolean(s) || !t.isUndefined(e)
                    }).then(t.bind(this._setResult, this, s), t.bind(this._loadStop, this)).then(t.bind(function() {
                        e && (this.$el.addClass("hidden"),
                        this.options.onAdd([e]).then(t.bind(function() {
                            this.cancel(),
                            this.$el.removeClass("hidden"),
                            this._scrollOnEdit()
                        }, this)))
                    }, this)).then(i.resolve)
                }, this)),
                i.promise()
        },
        _setResult: function(e, t) {
            t = t || {},
            this.is_open = !1,
            this.model.set("result_form", !1),
            e && (this._setChanges(!1),
            this.model.resultNotSync(e, t)),
            this.cancel()
        },
        _onDateCloneChange: function(e) {
            var i = $(e.currentTarget)
              , s = i.parent()
              , n = s.find('input[type="radio"]');
            return this.$('[name="clone_task"]').prop("checked", !0).trigger("change"),
            -1 === t.indexOf(["tomorrow", "next_week"], n[0].value) ? (e.stopPropagation(),
            i.find("span").hide(),
            s.find(".card-task__clone__dates__preset-date-input").removeClass("hidden").focus(),
            this._changeCloneDateRadio(),
            !1) : void 0
        },
        _changeCloneDateRadio: function() {
            var e = this.$(".card-task__clone__dates__preset-date-input").val();
            this.$(".js-task-clone-preset-custom").val(e).prop("checked", !0).trigger("change")
        },
        _getCloneDate: function(e) {
            switch (e) {
            case "tomorrow":
                return moment().tz(AMOCRM.system.timezone).add(1, "day").format(AMOCRM.system.format.date.date);
            case "next_week":
                return moment().tz(AMOCRM.system.timezone).add("week", 1).format(AMOCRM.system.format.date.date);
            default:
                return e
            }
        },
        _cloneThis: function(e) {
            var i = $.Deferred()
              , s = this.model.clone()
              , n = this.model.get("complete_till");
            return this.$(".card-task__clone__checkbox input:checked").length ? (n = t.isString(n) ? moment(e + " " + moment(n, AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time).format(AMOCRM.system.format.date.time), AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time).format(AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time) : e + " " + moment.unix(n).format(AMOCRM.system.format.date.time),
            s.set({
                complete_till: n,
                id: void 0,
                result_form: !1,
                status: 0
            }),
            s.save().then(function() {
                i.resolve(s.toJSON())
            })) : i.resolve(),
            i.promise()
        },
        _showCloneControls: function() {
            this.$el.css("height", "").find(".card-task__clone").css("display", Modernizr.prefixed("flex")),
            this.model.trigger("notes:update-sticky")
        },
        _loadStop: function() {
            this.$(".js-task-result-button").trigger("button:load:stop")
        },
        complete: function(e) {
            return e && (e.stopPropagation(),
            $(e.currentTarget).find(".js-task-complete-icon").addClass("animated tada")),
            this.model.set({
                date_modify: moment().unix(),
                status: 1,
                result_form: !0
            }),
            this.model.complete().then(t.bind(function() {
                this.cancel(),
                AMOCRM.is_touch_device || this.$(".task-complete__textarea-input").focus()
            }, this))
        },
        skipResultClick: function() {
            this.model.set("result_form", !1),
            this.cancel()
        },
        setResult: function(e) {
            var i = this._form.model.get("task_result");
            return e && e.stopPropagation(),
            t.isEmpty(this.validate()) ? this.model._pending ? this.model._loading : (this.model.set({
                result_form: !1
            }),
            this._findElem("submit").trigger("button:load:start", ["white"]),
            this.model.result(i).then(t.bind(this.cancel, this))) : new Promise(function(e, t) {
                t("Empty result text")
            }
            )
        }
    }
}),
define("lib/interface/card/controls/task_comment", ["require", "underscore", "twig", "lib/common/fn", "lib/interface/controls/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/common/fn")
      , n = e("lib/interface/controls/index")
      , o = 13;
    return n.extend({
        controlClassName: "card-task__comment-wrapper",
        _selectors: function() {
            return {
                text: "textarea",
                type_name: 'input[name="task_type_name"]',
                type: 'input[name="type"]:checked',
                icon: ".card-task__comment__icon",
                preview: ".card-task__comment",
                opened: ".card-task__comment-opened"
            }
        },
        document_events: {
            "controls:hide:private": "_hide",
            "input .card-task__comment-opened": "_setPositions",
            "click .card-task__comment-opened": "_stopPropagation",
            'change .card-task__comment__types__type input[name="type"]': "_customTypeChange",
            "click .card-task__text__ok": "_hide",
            toggleWidgetPanel: "_setPositions",
            "touchstart .card-task__comment__types__type__label": "_checkTaskTypeCheckedOnClick",
            "mouseup .card-task__comment__types__type__label": "_checkTaskTypeCheckedOnClick",
            "keydown .card-task__text__area": "_onCtrlEnterKey"
        },
        events: {
            click: "_open",
            "task-comment:refresh": "_refresh",
            "task-comment:type-save": "_saveCustomType"
        },
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this._$opened_node = null,
            this._$window.on("resize" + this.ns, t.bind(this._setPositions, this))
        },
        destroy: function() {
            this._$opened_node && (this.$el.append(this._$opened_node),
            this._$opened_node = null),
            n.prototype.destroy.apply(this, arguments)
        },
        _customTypeChange: function(e) {
            var t = $(e.currentTarget);
            this._$opened_node && ("custom" === t.val() ? this._$opened_node.find(this._selector("type_name")).show().focus() : this._$opened_node.find(this._selector("type_name")).hide())
        },
        _open: function(e) {
            this._$opened_node || (e && e.stopPropagation && e.stopPropagation(),
            this._$document.trigger("controls:hide"),
            this._$opened_node = this._elem("opened"),
            this._toggleBodyOverlay(this._$opened_node, this._hide),
            this._setPositions(),
            $("textarea", this._$opened_node).trigger("controls:textarea:autosize").focus(),
            this.$el.trigger("task-comment:show"))
        },
        _hide: function() {
            var e, t, s, n = "clock-blue-big", o = "";
            if (this._$opened_node) {
                if (s = this._$opened_node.find(this._selector("type_name")).val(),
                t = this._$opened_node.find(this._selector("type")).val(),
                !s && "custom" === t)
                    return this._shakeCustomTypeOnError(),
                    !1;
                switch (parseInt(t)) {
                case 1:
                    n = "follow-up";
                    break;
                case 2:
                    n = "case-red"
                }
                this._elem("icon").attr("class", "card-task__comment__icon icon icon-inline icon-" + n),
                e = this._$opened_node.find(this._selector("text")).val(),
                o = s ? s : this._$opened_node.find(".card-task__comment__types__type input:checked + .card-task__comment__types__type__label").text(),
                this.$(".card-task__comment__content").html(i({
                    ref: "/tmpl/cards/tasks/controls/comment_text.twig"
                }).render({
                    type_name: o,
                    text: e
                })),
                this._toggleBodyOverlay(!1),
                this._$opened_node.hide().find('textarea, input[type="hidden"], input:checked').trigger("change"),
                this.$el.removeClass("opened"),
                this._$opened_node = null,
                this.$el.trigger("task-comment:hide")
            }
        },
        _refresh: function() {
            this._open(),
            this._hide()
        },
        _shakeCustomTypeOnError: function() {
            var e = this._$opened_node.find('[name="task_type_name"]').closest(".card-task__comment__types__type");
            e.addClass("animated shake"),
            t.delay(t.bind(function() {
                e.removeClass("animated shake")
            }), 400)
        },
        _setPositions: function() {
            var e, t, i;
            this._$opened_node && (e = this._elem("preview").get(0).getBoundingClientRect(),
            t = e.right - e.left,
            i = this._$window.scrollTop(),
            this._$opened_node.css({
                display: "",
                top: e.top + i,
                left: e.left,
                width: t - parseInt(this._$opened_node.css("margin-left")),
                zIndex: this._maxControlBodyZIndex
            }).css(Modernizr.prefixed("transform"), ""),
            this._$opened_node.visible() || this._$opened_node.css("top", e.bottom + i).css(Modernizr.prefixed("transform"), "translateY(-100%)"))
        },
        _toggleBodyOverlay: function(e) {
            return n.prototype._toggleBodyOverlay.call(this, e, this._hide)
        },
        _stopPropagation: function(e) {
            e.stopPropagation()
        },
        _checkTaskTypeCheckedOnClick: function(e) {
            var t = e.currentTarget.parentNode.querySelector("input:checked");
            e.stopPropagation(),
            t && "custom" !== t.value && this._hide()
        },
        _saveCustomType: function() {
            var e, i = this._findElem("type_name").val(), n = this._findElem("type").val(), o = function(e) {
                this.$el.trigger("task-comment:type-saved", [e])
            };
            return i ? void $.ajax({
                url: "/private/tasks/ajax_task_status_edit.php",
                data: {
                    ACTION: "ADD",
                    NAME: i
                },
                dataType: "json",
                type: "POST"
            }).done(t.bind(function(t) {
                "OK" === t.status ? (e = AMOCRM.constant("task_types") || {},
                e["key_" + t.data.ID] = {
                    id: t.data.ID,
                    option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + s.escapeHTML(i)
                },
                AMOCRM.constant("task_types", e),
                n = t.data.ID) : (this._shakeCustomTypeOnError(),
                n = !1),
                o.call(this, n)
            }, this)).fail(t.bind(o, this, !1)) : ("custom" === n && (this._shakeCustomTypeOnError(),
            n = !1),
            void o.call(this, n))
        },
        _onCtrlEnterKey: function(e) {
            e.keyCode === o && (e.ctrlKey || e.metaKey) && (this._hide(),
            this.$el.trigger({
                type: "keydown",
                ctrlKey: !0,
                metaKey: !0,
                keyCode: o
            }))
        }
    })
}),
define("lib/interface/notes/views/task", ["require", "underscore", "cocktail", "vendor/moment/tz", "lib/common/fn", "lib/interface/notes/views/note", "lib/interface/notes/views/types/mail", "lib/interface/notes/views/mixins/task_complete", "lib/interface/notes/views/add/mixins/users_select", "lib/interface/notes/templates", "lib/core/users", "lib/interface/card/controls/task_comment"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("cocktail"), n = e("vendor/moment/tz"), o = e("lib/common/fn"), r = e("lib/interface/notes/views/note"), a = e("lib/interface/notes/views/types/mail"), l = e("lib/interface/notes/views/mixins/task_complete"), c = e("lib/interface/notes/views/add/mixins/users_select"), d = e("lib/interface/notes/templates"), u = e("lib/core/users"), h = i.invert(AMOCRM.element_types), _ = function(e) {
        var t = e - 60 * (new Date).getTimezoneOffset();
        return t + 60 * n.tz.zone(AMOCRM.system.timezone).offset(n())
    }, p = null;
    return e("lib/interface/card/controls/task_comment"),
    t = r.extend({
        _selectors: function() {
            return i.extend({}, r.prototype._selectors.apply(this, arguments), {
                comment: ".card-task__comment-wrapper"
            })
        },
        events: i.extend({}, r.prototype.events || {}, {
            "click .js-task-edit-cancel": "cancel",
            "click .js-task-submit:not(.button-input-disabled)": "save",
            "click .card-task__inner": "editClick",
            "mousedown .js-task-result-textarea": "_saveScrollPosBeforeFocus",
            "touchstart .js-task-result-textarea": "_saveScrollPosBeforeFocus",
            "focus .js-task-result-textarea": "_resetScrollPosAfterFocus",
            "task-comment:hide .card-task__comment-wrapper": "_updateSticky",
            "input .js-task-result-textarea": "_updateSticky"
        }),
        initialize: function() {
            r.prototype.initialize.apply(this, arguments),
            this.model.get("is_add") || s.mixin(this, l),
            this.models.length > 1 && s.mixin(this, a.prototype),
            this.listenTo(this.model, "sync", this._startFutureTimer, this),
            this.listenTo(this.model, "task:complete-after-chat", this._focusCompleteAfterChat, this),
            this._startFutureTimer()
        },
        destroy: function() {
            this._check_complete_interval && clearInterval(this._check_complete_interval),
            r.prototype.destroy.apply(this, arguments)
        },
        _setEditClick: function(e) {
            $(e.target).closest(".tasks-date").length && (e.stopPropagation = i.noop),
            r.prototype._setEditClick.apply(this, arguments)
        },
        cancel: function() {
            return this.is_open ? (this.is_open = !1,
            this.$(".card-task").removeClass("expanded"),
            this._updateSticky(),
            void (this._form && this._form.destroy())) : (this.model.set("result_form", !1),
            this._$body.off("click" + this.ns),
            void r.prototype.cancel.apply(this, arguments))
        },
        _render: function(e) {
            var t = this._isFutureTask();
            r.prototype._render.apply(this, arguments),
            t && this.el.parentNode && this.el.parentNode.classList["edit" === e ? "add" : "remove"]("editing"),
            "edit" === e || t || this._initForm()
        },
        _afterRender: function(e) {
            r.prototype._afterRender.apply(this, arguments),
            "edit" === e || this._isFutureTask() || this.$("textarea").trigger("controls:textarea:autosize")
        },
        _isFutureTask: function() {
            var e = this.model.get("complete_till");
            switch (!0) {
            case i.isUndefined(e):
                e = n().hour(23).minutes(59).format("X");
                break;
            case i.isString(e):
                e = this._getTimeStampFromString(e)
            }
            return n.utc(e, "X").tz(AMOCRM.system.timezone).isAfter(n())
        },
        _focusCompleteAfterChat: function() {
            this.is_open || this.edit(),
            i.delay(i.bind(function() {
                this.$el.addClass("animated js-complete-after-chat").one(AMOCRM.animation_event + this.ns, i.bind(function() {
                    this.$el.removeClass("animated js-complete-after-chat")
                }, this))
            }, this), 150)
        },
        edit: function() {
            var e = this.is_open
              , t = !1;
            this.model.get("status") ? (t = !0,
            this.model.set("result_form", !0),
            this._render(),
            this.el.classList.add(this.className + "-in-edit")) : !e && this._isFutureTask() && (t = !0,
            this.is_open = !0,
            this.$(".card-task").addClass("expanded"),
            this._updateSticky()),
            t ? (this._initForm(),
            this.$("textarea").trigger("controls:textarea:autosize").focus()) : this.enterEditMode()
        },
        editClick: function(e) {
            this.is_open && (e.stopPropagation(),
            this.enterEditMode())
        },
        enterEditMode: function() {
            this.is_open = !1,
            this._editing = !0,
            this._form && (this._form.destroy(),
            this._form = null),
            this._$body.on("click" + this.ns, i.bind(function(e) {
                this.$(".card-task__comment-opened").is(":visible") && (e.stopPropagation(),
                this._$document.trigger("controls:hide"))
            }, this)),
            r.prototype.edit.apply(this, arguments),
            this._scrollOnEdit(),
            this._updateSticky()
        },
        _scrollOnEdit: function() {
            this._isFutureTask() && i.isFunction(this.options.scrollToEnd) && this.options.scrollToEnd(this.$el)
        },
        _getRenderParams: function(e) {
            var t = this.model.get("complete_till")
              , s = AMOCRM.constant("task_types") || {}
              , o = AMOCRM.todo_types[this.model.get("type")]
              , r = this.model._getResult();
            return o || (o = (s["key_" + this.model.get("type")] || {}).option),
            i.isString(t) && (t = this._getTimeStampFromString(t)),
            i.extend(this.model.toJSON(), {
                is_edit: "edit" === e || this.model.get("result_form"),
                template: this._getTemplateName(),
                _templates: d,
                main_element_type: this.options.element_type,
                element_type_code: h[this.model.get("element_type")],
                type_name: o,
                expired: t < n().unix(),
                expired_diff: Math.abs(n().diff(n(t, "X"), "days")),
                is_not_exist: !this.model.get("element_id"),
                is_today: n.utc(t, "X").tz(AMOCRM.system.timezone).isSame(n(), "day"),
                is_future: n.utc(t, "X").tz(AMOCRM.system.timezone).isAfter(n()),
                next_date: n().tz(AMOCRM.system.timezone).add(1, "day").format(AMOCRM.system.format.date.date),
                task_types: i.extend({
                    1: {
                        id: 1,
                        option: '<span class="task_type_select__icon icon icon-inline icon-follow-up"></span>' + AMOCRM.todo_types[1]
                    },
                    2: {
                        id: 2,
                        option: '<span class="task_type_select__icon icon icon-inline icon-case-red"></span>' + AMOCRM.todo_types[2]
                    }
                }, s, {
                    custom: {
                        id: "custom",
                        option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + AMOCRM.lang.tasks_custom
                    }
                }),
                presets: [{
                    value: this._getCloneDate("tomorrow"),
                    title: AMOCRM.lang.tasks_period_tomorrow
                }, {
                    value: this._getCloneDate("next_week"),
                    title: AMOCRM.lang.tasks_period_next_week
                }],
                joined: i.map(i.without(this.models, this.model), function(e) {
                    return i.extend(e.toJSON(), {
                        _links: e.links,
                        element_id: e.get("element_id"),
                        element_type_code: h[e.get("element_type")],
                        extra: i.extend(this.options.getExtraData(e), {
                            users: this._getUsers()
                        })
                    })
                }, this),
                result: r && r.toJSON(),
                extra: i.extend(this.options.getExtraData(this.model), {
                    users: this._getUsers()
                })
            })
        },
        _getExistingUsers: function() {
            var e = this._getUsers()[this.model.get("responsible_user")] || {};
            return [i.extend({
                id: this.model.get("responsible_user"),
                title: e.full_name || o.i18n("notes_user_deleted")
            }, e)]
        },
        _getTemplateName: function() {
            return "task"
        },
        _getTemplate: function(e) {
            return this.model.get("status") ? "/tmpl/notes/types/task_completed.twig" : "edit" === e ? "/tmpl/cards/tasks/edit.twig" : "/tmpl/cards/tasks/view.twig"
        },
        _copyFormToModel: function() {
            var e, t, s = AMOCRM.constant("user") || {}, o = parseInt(this._form.model.get("type")), r = this._form.model.get("time"), a = AMOCRM.system.format.date.time;
            r = r === AMOCRM.lang.tasks_all_day ? n("23:59", "HH:mm").format(a) : n(r, a).format(a),
            e = this._getCloneDate(this._form.model.get("date")) + " " + r,
            t = this._getTimeStampFromString(e),
            this.model.set({
                complete_till: e,
                type: o,
                data: i.extend({}, this.model.get("data"), {
                    text: this._form.model.get("body") || AMOCRM.lang.tasks_follow_up
                }),
                responsible_user: this._form.model.get("main_user"),
                created_by: s.id,
                expired: n(t, "X").tz(AMOCRM.system.timezone).isBefore(n().tz(AMOCRM.system.timezone))
            })
        },
        _getTimeStampFromString: function(e) {
            return _(n(e, AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time).unix())
        },
        validate: function(e) {
            return e = e || {},
            !this._form.model.get("task_result") && this.model.get("status") && (e = i.extend(e || {}, {
                task_result: !1
            })),
            i.isEmpty(e) || this.$el.addClass("note-has-error"),
            e
        },
        _saveScrollPosBeforeFocus: function() {
            p = i.compose(function() {
                p = null
            }, this.options.scrollUpdate()),
            this.$(".js-note").addClass(this._class("no_outside_animation"))
        },
        _resetScrollPosAfterFocus: function() {
            i.isFunction(p) && (p(),
            this._afterRender())
        },
        save: function() {
            return new Promise(i.bind(function(e, t) {
                var s = this.validate();
                if (this.model._pending)
                    return void t("model already saving");
                switch (!0) {
                case !this._editing && !this.model.get("status"):
                    this.completeClick().then(e, t);
                    break;
                case parseInt(this.model.get("status")) > 0:
                    this.setResult().then(e, t);
                    break;
                case !i.isEmpty(s):
                    t(s);
                    break;
                default:
                    if (this._custom_type_pending === !0)
                        return void t("custom todo type saving");
                    this._findElem("submit").trigger("button:load:start", ["white"]),
                    this._custom_type_pending = !0,
                    this.$el.one("task-comment:type-saved" + this.ns, this._selector("comment"), i.bind(function(i, s) {
                        return this._custom_type_pending = !1,
                        s === !1 ? void t() : (this._form.model.set("type", s),
                        this.model.set("type", s),
                        void r.prototype.save.call(this).then(e, t))
                    }, this)),
                    this._findElem("comment").trigger("task-comment:type-save")
                }
            }, this))
        },
        _onUserChanged: function(e) {
            e && !e.is_new ? this.$(".js-task-main_user").val(e.id).trigger("change") : e = u.get(this.model.get("responsible_user"))
        },
        _startFutureTimer: function() {
            this._isFutureTask() && !this.model.get("is_new") && (clearInterval(this._check_complete_interval),
            this._check_complete_interval = setInterval(i.bind(this._checkIsComplete, this), 6e3))
        },
        _checkIsComplete: function() {
            this._isFutureTask() || (this.render(),
            this.model.trigger("note:view:update", this.model),
            clearInterval(this._check_complete_interval))
        },
        _updateSticky: function() {
            this.model.trigger("notes:update-sticky")
        }
    }),
    s.mixin(t, c),
    t
}),
define("lib/interface/notes/views/add/task", ["require", "underscore", "lib/interface/notes/model", "lib/interface/notes/views/task"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/model")
      , s = e("lib/interface/notes/views/task");
    return s.extend({
        _important_save: !1,
        _getTemplate: function(e) {
            return "/tmpl/notes/adding/task.twig"
        },
        _generateEmptyModel: function(e) {
            var t;
            return e = e || this.options,
            t = new i({
                is_new: !0,
                object_type: {
                    code: "tasks",
                    id: 4
                },
                element_id: e.element_id,
                element_type: e.element_type,
                editable: !0,
                visible: !0
            })
        },
        getExistingText: function() {
            return this._form.model.get("body")
        },
        setExistingText: function() {
            this.$("textarea").val(this.options.text).trigger("change"),
            this._findElem("comment").trigger("task-comment:refresh")
        },
        setParamsOnSwitch: t.noop,
        initialize: function(e) {
            e.models = [this._generateEmptyModel(e)],
            s.prototype.initialize.apply(this, arguments),
            this.options = t.extend({
                onToggleClassModificator: t.noop
            }, this.options || {}),
            this.models = []
        },
        destroy: function() {
            s.prototype.cancel.apply(this, arguments),
            s.prototype.destroy.apply(this, arguments)
        },
        onAddDateTimeChange: function() {
            var e = moment([this._form.model.get("date"), this._form.model.get("time") !== AMOCRM.lang.tasks_all_day ? this._form.model.get("time") : moment().hour(23).minutes(59).format(AMOCRM.system.format.date.time)].join(" "), AMOCRM.system.format.date.full).tz(AMOCRM.system.timezone);
            switch (this.options.onToggleClassModificator("feed-compose_task-future", 0),
            this.options.onToggleClassModificator("feed-compose_task-today", 0),
            this.options.onToggleClassModificator("feed-compose_task-expired", 0),
            this.options.onToggleClassModificator("feed-compose_task-new", 0),
            !0) {
            case e.isSame(moment(), "day"):
                this.options.onToggleClassModificator("feed-compose_task-today", 1);
                break;
            case e.isAfter(moment(), "day"):
                this.options.onToggleClassModificator("feed-compose_task-future", 1);
                break;
            case e.isBefore(moment()):
                this.options.onToggleClassModificator("feed-compose_task-expired", 1);
                break;
            default:
                this.options.onToggleClassModificator("feed-compose_task-new", 1)
            }
        },
        cancel: t.noop,
        _setEditClick: t.noop,
        _render: function() {
            s.prototype._render.apply(this, arguments),
            this.$el.attr("class", "js-note feed-compose_task expanded")
        },
        edit: function() {
            var e = s.prototype.enterEditMode.apply(this, arguments);
            return this.onAddDateTimeChange(),
            this.listenTo(this._form.model, "has_changes", this.onAddDateTimeChange),
            this.listenTo(this._form.model, "has_reverted", this.onAddDateTimeChange),
            e
        },
        save: function() {
            return this._important_save = !0,
            s.prototype.save.apply(this, arguments).then(t.bind(function() {
                this._important_save = !1,
                this.model.set({
                    is_new: !1,
                    is_yellow: !1,
                    deletable: !0
                }),
                this.options.onAdd(this.model.toJSON(), {
                    need_cancel: !1
                }),
                this.resetCompose()
            }, this))
        },
        _highlightSave: function() {
            s.prototype._highlightSave.apply(this, [!0])
        },
        hasChanges: function() {
            return this._important_save ? !0 : s.prototype.hasChanges.apply(this, arguments)
        },
        resetCompose: function() {
            this._findElem("comment").trigger("task-comment:refresh"),
            this._form.revert(),
            this._setChanges(!1),
            this.$("textarea").val("").trigger("change"),
            this.model = this._generateEmptyModel(),
            this.models = []
        }
    })
}),
define("lib/components/lists/edit/cell/task/note_views/add", ["require", "underscore", "lib/interface/notes/views/add/task"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/add/task");
    return i.extend({
        cancel: function() {
            i.prototype.cancel.apply(this, arguments),
            t.isFunction(this.options.onCancel) && this.options.onCancel()
        },
        _generateEmptyModel: function() {
            var e, t, s;
            return e = i.prototype._generateEmptyModel.apply(this, arguments),
            t = moment().tz(AMOCRM.system.timezone).add(1, "day").format(AMOCRM.system.format.date.date),
            s = moment("23:59", "HH:mm").format(AMOCRM.system.format.date.time),
            e.attributes.complete_till = this._getTimeStampFromString(t + " " + s),
            e
        },
        resetCompose: function() {
            this._form && this._form.revert()
        }
    })
}),
define("lib/interface/notes/results_collection", ["require", "backbone.hal", "lib/interface/notes/model"], function(e) {
    "use strict";
    var t = e("backbone.hal")
      , i = e("lib/interface/notes/model");
    return t.Collection.extend({
        model: i
    })
}),
define("lib/interface/notes/collection", ["require", "underscore", "backbone.hal", "lib/interface/notes/results_collection", "lib/interface/notes/model"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone.hal")
      , s = e("lib/interface/notes/results_collection")
      , n = e("lib/interface/notes/model")
      , o = t.invert(AMOCRM.element_types);
    return i.Collection.extend({
        url: function(e) {
            var i = o[this.element_type];
            switch (!0) {
            case "stats" === e && !t.isUndefined(this.element_id):
                return "/v3/" + i + "/" + this.element_id + "/stats";
            case !this.links && !t.isUndefined(this.element_id):
                return "/v3/" + i + "/" + this.element_id + "/timeline";
            case this.hasNextPage() && !t.isUndefined(this.links):
                return this.links.next;
            default:
                return ""
            }
        },
        model: n,
        initialize: function(e, t) {
            this.tasks_results = new s,
            this.element_id = t.element_id,
            this.element_type = t.element_type,
            this.on("add", this._setVisible, this)
        },
        parse: function(e) {
            var s, n = [];
            return !e || t.isArray(e) && !e.length ? (this.links = {},
            []) : (e = JSON.parse(e),
            this._pending = !1,
            n = t.clone(e._embedded.items),
            this.tasks_results.add(t.values(e._embedded.tasks_results)),
            s = i.Collection.prototype.parse.apply(this, [e]),
            this.trigger("fetched", n),
            s)
        },
        hasNextPage: function() {
            return t.isUndefined(this.links) || this.links && this.links.next
        },
        _fetch: function(e) {
            return e = t.extend(e || {}, {
                remove: !1,
                dataType: "text"
            }),
            i.Collection.prototype.fetch.call(this, e)
        },
        fetch: function(e) {
            var i = $.Deferred()
              , s = t.bind(function() {
                this._pending = !1,
                i.resolve()
            }, this);
            return this.url() ? (this._pending = !0,
            this._fetch(e).then(s, t.bind(function() {
                $.ajax({
                    url: "/private/ping.php",
                    dataType: "json"
                }).then(t.bind(this._fetch, this, e)).then(s, s)
            }, this)),
            i.promise()) : i.resolve()
        },
        _prepareModel: function(e, s) {
            return s = t.extend(s || {}, {
                parse: !1
            }),
            i.Collection.prototype._prepareModel.call(this, e, s)
        },
        getStats: function() {
            return $.ajax({
                url: this.url("stats"),
                type: "GET",
                dataType: "json"
            }).then(function(e) {
                return [{
                    id: this.element_id,
                    count: e.notes || 0,
                    users: t.map(e._embedded.users, function(e) {
                        return {
                            id: e.id,
                            count: e.notes
                        }
                    })
                }]
            })
        }
    })
}),
define("lib/components/lists/edit/cell/task/index", ["require", "underscore", "lib/interface/notes/collection", "lib/components/lists/edit/cell/index"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/interface/notes/collection"), n = e("lib/components/lists/edit/cell/index"), o = i.invert(AMOCRM.element_types);
    return t = s.extend({
        url: function(e) {
            var t = o[this.element_type];
            switch (!0) {
            case !this.links && !i.isUndefined(this.element_id):
                return "/v3/%s/%d/due".replace("%s", t).replace("%d", this.element_id);
            case this.hasNextPage() && !i.isUndefined(this.links):
                return this.links.next;
            default:
                return ""
            }
        },
        getOriginCollection: function() {
            return this
        }
    }),
    n.extend({
        _page: 1,
        initialize: function(e) {
            return n.prototype.initialize.apply(this, arguments),
            this.field_id = "date_of_nearest_task",
            this._new_task = !!this._row_model.get(this.field_id).id,
            this._notes = new t([],{
                element_id: this._element.id,
                element_type: this._element.element_type
            }),
            this
        },
        render: function() {
            return this.$el.attr("id", "cell-edit-" + this.field_id),
            this.$el.addClass("cell-edit-" + this.field_id),
            this.$el.toggleClass("cell-edit_last-cell", !this.options.$cell.next().length),
            this.render_params = this.getTemplateData(),
            this
        },
        _render: function() {
            this.listenTo(this.task_view.model, "sync", this.onTaskModelSync),
            this.listenTo(this.task_view.model, "error", this.showErrorModal),
            this.scrollIntoView(this.options.$cell, this._getCellEditOffsets().base_w, i.bind(function() {
                this.options.$container.append(this.$el.html(this.task_view.el)),
                this.setPosition().bindGlobalEvents(),
                i.isFunction(this.options.onRender) && this.options.onRender(),
                this.$(".js-task-result-textarea").trigger("controls:textarea:autosize").focus()
            }, this))
        },
        getTaskViewParams: function(e) {
            return {
                onCancel: i.bind(this.destroy, this),
                onDestroy: i.noop,
                onEdit: i.noop,
                scrollUpdate: i.noop,
                scrollToEnd: i.noop,
                scrollToEl: i.noop,
                onAdd: function() {
                    return Promise.resolve()
                },
                getExtraData: i.bind(function() {
                    var e = this._notes.embedded || {};
                    return {
                        leads: e.leads || {},
                        customers: e.customers || {},
                        transactions: e.transactions || {},
                        contacts: e.contacts || {},
                        companies: e.companies || {},
                        users: e.account && e.account._embedded ? e.account._embedded.users : {},
                        statuses: e.account && e.account._embedded ? e.account._embedded.status_pipeline : {},
                        pipelines: e.account && e.account._embedded ? e.account._embedded.pipelines : {}
                    }
                }, this)
            }
        },
        cancelCellEdit: function() {
            return this.has_changes = (this.task_view && this.task_view._changes || {}).form || !1,
            n.prototype.cancelCellEdit.apply(this, arguments)
        },
        getConfirmModalParams: function() {
            var e = this;
            return i.extend(n.prototype.getConfirmModalParams.call(this), {
                accept: function() {
                    e.task_view && e.task_view.save(),
                    this.destroy()
                }
            })
        },
        onTaskModelSync: function(e) {
            throw new Error("Must be implemented by subclass!")
        },
        _listRowRerender: function(e) {
            this.triggerRowRerender(i.extend({}, this._getModelUpdateParams(), {
                id: this._element.id,
                date_of_nearest_task: {
                    id: e ? e.get("id") : !1,
                    date: e ? e.get("complete_till") : !1,
                    failed: e ? e.get("complete_till") < moment().unix() : !1
                }
            }))
        }
    })
}),
define("lib/components/lists/edit/cell/task/add", ["require", "underscore", "lib/components/lists/edit/cell/task/note_views/add", "lib/components/lists/edit/cell/task/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/task/note_views/add")
      , s = e("lib/components/lists/edit/cell/task/index");
    return s.extend({
        render: function() {
            return s.prototype.render.apply(this, arguments),
            this.$el.addClass("cell-edit-" + this.field_id + "_add"),
            this.task_view = this._addComponent(i, t.extend({
                element_id: this._element.id,
                element_type: this._element.element_type
            }, this.getTaskViewParams())),
            this.task_view.edit(),
            this.task_view.$el.addClass("feed-compose feed-compose_task-today"),
            this._render(),
            this
        },
        onTaskModelSync: function(e) {
            this._listRowRerender(e),
            this.has_changes = !1
        }
    })
}),
define("lib/components/lists/edit/cell/task/note_views/edit", ["require", "underscore", "lib/interface/notes/views/task"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/task");
    return i.extend({
        force_edit: function() {
            this.is_open = !0,
            this.$(".card-task").addClass("expanded"),
            this.$(".js-task-result-textarea").trigger("controls:textarea:autosize").focus(),
            this._initForm()
        },
        cancel: function() {
            i.prototype.cancel.apply(this, arguments),
            t.isFunction(this.options.onCancel) && this.options.onCancel()
        },
        editClick: t.noop,
        _updateSticky: t.noop,
        _saveScrollPosBeforeFocus: t.noop,
        _resetScrollPosAfterFocus: t.noop
    })
}),
define("lib/components/lists/edit/cell/task/edit", ["require", "underscore", "lib/components/lists/edit/cell/task/note_views/edit", "lib/components/lists/edit/cell/task/index", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/task/note_views/edit")
      , s = e("lib/components/lists/edit/cell/task/index")
      , n = e("lib/common/fn")
      , o = 100;
    return s.extend({
        render: function() {
            return s.prototype.render.apply(this, arguments),
            this.$el.addClass("cell-edit-" + this.field_id + "_edit"),
            this.fetchTasks({
                data: {
                    page: 1,
                    limit: o
                }
            }),
            this
        },
        fetchTasks: function(e) {
            e = e || {},
            this._notes.fetch(e).then(t.bind(function() {
                var e = this._getNearestTask();
                return e ? (e.set("visible", !0),
                void this.initTask(e)) : this._notes.hasNextPage() ? this.fetchTasks() : (n.log({
                    msg: "Oops, no task found! " + JSON.stringify(this._element)
                }),
                this.destroy(!0),
                this.showErrorModal())
            }, this))
        },
        initTask: function(e) {
            this.task_view = this._addComponent(i, t.extend({
                element_id: parseInt(e.get("element_id")),
                element_type: parseInt(e.get("element_type")),
                models: [e]
            }, this.getTaskViewParams())),
            this.options.close_task ? this.task_view.render().then(t.bind(this.task_view.force_edit, this.task_view)) : this.task_view.enterEditMode(),
            this._render()
        },
        onTaskModelSync: function(e) {
            var t = !this._notes.get(e.id);
            this._listRowRerender(this._getNearestTask()),
            this.cancelCellEdit({
                force_exit: t
            })
        },
        _getNearestTask: function() {
            var e, i, s, n;
            return e = t.chain(this._notes.models).filter(function(e) {
                return !e.get("status") && e.get("element_type") === this._element.element_type
            }, this).sortBy(function(e) {
                return e.get("complete_till")
            }).value(),
            i = t(e).first(),
            e.length > 1 && (s = i.get("complete_till"),
            n = t.chain(e).map(function(e) {
                return e.toJSON()
            }).where({
                complete_till: s
            }).value(),
            n.length > 1 && (i = t.chain(n).sortBy(function(e) {
                return e.date_create
            }).first().value(),
            i = this._notes.get(i.id))),
            i
        }
    })
}),
define("lib/components/lists/edit/cell/responsible", ["require", "jquery", "underscore", "lib/components/base/confirm", "lib/components/lists/edit/cell/base", "lib/interface/users_select", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/base/confirm")
      , n = e("lib/components/lists/edit/cell/base")
      , o = e("lib/interface/users_select")
      , r = e("lib/core/users");
    return n.extend({
        _selectors: function() {
            return i.extend(n.prototype._selectors.apply(this, arguments), {
                manager_reassign_holder: "#lead_main_user-users_select_holder"
            })
        },
        events: function() {
            var e = i.extend({}, i.result(n.prototype, "events"));
            return e["click " + this._selector("manager_reassign_holder")] = "reassignManagerSelect",
            e
        },
        onFocus: function() {
            this._findElem("manager_reassign_holder").trigger("click")
        },
        reassignManagerSelect: function(e) {
            var s = t(".list__body-right__top");
            e.preventDefault(),
            e.stopPropagation(),
            this._addComponent(o, {
                el: t(e.currentTarget),
                $container: this.$el,
                topbar_offset: s.outerHeight(),
                $relative_to: t("#page_holder"),
                id: "lead_main_user-users_select_holder",
                class_name: "card-fields__fields-block__users-select",
                input_name: this.field_id,
                select_one: !0,
                not_remove: !0,
                no_absolute_positioning: !0,
                in_modal: !0,
                existing_items: this.model.getValues()[this.field_id].value,
                onSetPositions: function() {
                    var e, t, i, n, o, r, a = 10;
                    "none" !== this.$list.css(Modernizr.prefixed("transform")) && (e = this.$list.find(".js-multisuggest-suggest"),
                    t = e.offset(),
                    i = s.outerHeight(),
                    n = s.outerHeight() - t.top,
                    o = e.outerHeight(),
                    t.top < i && (r = o - n,
                    e.css("height", r - a)))
                },
                onDestroy: i.bind(function(e) {
                    var t;
                    e.length && (t = i.first(e),
                    this.model.set(this.field_id, t.id))
                }, this)
            })
        },
        onParseFromModelAttributes: function(e) {
            return i.extend(e, {
                main_user_id: (i.findWhere(this._getManagers(), {
                    title: e.manager
                }) || {}).id || "not_assigned"
            })
        },
        _saveCellEdit: function() {
            var e = this._row_model
              , t = this.model.get(this.field_id)
              , n = this._hasLinkedEntities(e)
              , o = i.bind(this.reassignManagerSave, this)
              , r = {
                elem_id: e.get("id"),
                responsible_user_id: t
            };
            this.model.set(this._getModelUpdateParams({
                responsible_user_id: t
            })),
            n ? this._addComponent(s, {
                template: "/tmpl/common/modal/reassign_linked.twig",
                button_text: AMOCRM.lang.button_yes,
                cancel_text: AMOCRM.lang.button_no,
                title_before: AMOCRM.lang.change_main_user_title + " " + AMOCRM.lang.change_main_user_all + " ",
                title_after: AMOCRM.lang.change_main_user_right_postfix,
                managers: {
                    selected: t,
                    items: this._getManagers()
                },
                destroy: function() {
                    o(i.extend(r, {
                        with_linked: this.accepted
                    }))
                }
            }) : o(r)
        },
        reassignManagerSave: function(e) {
            return e = e || {},
            t.ajax({
                url: "/ajax/" + AMOCRM.getBaseEntity() + "/multiple/reassign/",
                type: "POST",
                dataType: "json",
                data: {
                    NEW_MAIN_USER_ID: e.responsible_user_id,
                    parties: {
                        id: [e.elem_id],
                        with_linked: e.with_linked ? 1 : 0
                    }
                }
            }).always(i.bind(this.onUpdateRequest, this)).fail(i.bind(this.showErrorModal, this)).done(i.bind(function(e) {
                "fail" === e.status ? this.showErrorModal() : this.onUpdateSuccess(this.model)
            }, this))
        },
        _getManagers: function() {
            return this._managers || (this._managers = r.get()),
            this._managers
        },
        _hasLinkedEntities: function(e) {
            return e ? !i.isEmpty(e.get("leads")) || !i.isEmpty(e.get("main_contact")) || !i.isEmpty(e.get("contact_company_name")) || !i.isEmpty(e.get("company_name")) && e.get("company_name").name : !1
        }
    })
}),
define("lib/components/lists/edit/cell/smart_address", ["require", "underscore", "lib/components/lists/edit/cell/base"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/cell/base");
    return i.extend({
        _classes: function() {
            return t.extend(i.prototype._classes.apply(this, arguments), {
                address_input: "control-address__field",
                control_address: "control-address"
            })
        },
        onFocus: function() {
            switch (this.field.sub_code) {
            case void 0:
                this._findElem("control_address").one("control_address:init", t.bind(function() {
                    this._findElem("address_input").eq(0).find("input").focus()
                }, this));
                break;
            case "country":
                this._findElem("control_select_button").focus();
                break;
            default:
                this._findElem("first_visible_input").focus()
            }
        }
    })
}),
define("lib/components/lists/edit/cell/status", ["require", "jquery", "underscore", "lib/interface/leads/change_status", "lib/components/lists/edit/cell/base"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/interface/leads/change_status")
      , n = e("lib/components/lists/edit/cell/base");
    return n.extend({
        _selectors: function() {
            return i.extend(n.prototype._selectors.apply(this, arguments), {
                multiple_pipelines_select: ".pipeline-select-wrapper_plain.folded .pipeline-select-wrapper__inner__holder",
                pipelines_select: ".control--select--button"
            })
        },
        render: function() {
            this._status_change = this._addComponent(s, {
                id: [this._row_model.get("id")],
                onInit: i.bind(function() {
                    n.prototype.render.call(this),
                    this._status_change.initForm({
                        el: this.$el,
                        form: this.form
                    })
                }, this)
            })
        },
        onFocus: function() {
            var e = this._status_change.has_pipelines ? this._findElem("multiple_pipelines_select") : this._findElem("pipelines_select");
            e.trigger("click")
        },
        getTemplateData: function() {
            var e = n.prototype.getTemplateData.call(this);
            return i.extend(e, {
                statuses: this._status_change.getTemplateParams(),
                reset_styles: !0
            })
        },
        onParseFromModelAttributes: function(e) {
            return i.extend(e, {
                status_id: this._row_model.get("status") || "",
                pipeline_id: this._row_model.get("pipeline_id")
            })
        },
        _saveCellEdit: function() {
            this._status_change.onClickSave({
                onSave: i.bind(this.saveStatusChange, this)
            })
        },
        saveStatusChange: function(e) {
            return e = e || {},
            t.ajax({
                url: "/ajax/leads/multiple/change_status/",
                type: "POST",
                dataType: "json",
                data: this._status_change.getDataForRequest(e)
            }).always(i.bind(this.onUpdateRequest, this)).fail(i.bind(this.showErrorModal, this)).done(i.bind(function(e) {
                return "fail" === e.status ? this.showErrorModal() : void ("error" === e.status ? (this.destroy(),
                this._status_change.showErrorMessage({
                    response: e,
                    from_cell_edit: !0
                })) : this._checkNeedListReload() ? (this.destroy(),
                this._$document.trigger("list:reload")) : this.onUpdateSuccess(this.model))
            }, this))
        },
        _checkNeedListReload: function() {
            var e, t;
            return e = AMOCRM.data.current_view.pipeline_id && AMOCRM.data.current_view.pipeline_id !== this.model.get("pipeline_id"),
            t = "142" === this.model.get("status_id") || "143" === this.model.get("status_id"),
            e || t
        }
    })
}),
define("lib/components/lists/edit/cell/handlers", ["require", "lib/components/lists/edit/cell/base", "lib/components/lists/edit/cell/price/budget", "lib/components/lists/edit/cell/checkbox", "lib/components/lists/edit/cell/linked/contacts", "lib/components/lists/edit/cell/linked/leads", "lib/components/lists/edit/cell/multitext", "lib/components/lists/edit/cell/task/add", "lib/components/lists/edit/cell/task/edit", "lib/components/lists/edit/cell/price/index", "lib/components/lists/edit/cell/responsible", "lib/components/lists/edit/cell/smart_address", "lib/components/lists/edit/cell/status"], function(e) {
    "use strict";
    var t = {
        Base: e("lib/components/lists/edit/cell/base"),
        Budget: e("lib/components/lists/edit/cell/price/budget"),
        Checkbox: e("lib/components/lists/edit/cell/checkbox"),
        ContactsLinked: e("lib/components/lists/edit/cell/linked/contacts"),
        LeadsLinked: e("lib/components/lists/edit/cell/linked/leads"),
        Multitext: e("lib/components/lists/edit/cell/multitext"),
        AddTask: e("lib/components/lists/edit/cell/task/add"),
        EditTask: e("lib/components/lists/edit/cell/task/edit"),
        Price: e("lib/components/lists/edit/cell/price/index"),
        Responsible: e("lib/components/lists/edit/cell/responsible"),
        SmartAddress: e("lib/components/lists/edit/cell/smart_address"),
        Status: e("lib/components/lists/edit/cell/status")
    };
    return function(e, i) {
        if (e = e || {},
        e.custom_field)
            switch (e.type_code) {
            case "multitext":
                return t.Multitext;
            case "smart_address":
                return t.SmartAddress;
            case "checkbox":
                return t.Checkbox;
            default:
                return t.Base
            }
        else
            switch (e.id) {
            case "manager":
            case "main_user_id":
                return t.Responsible;
            case "status":
                return t.Status;
            case "budget":
                return t.Budget;
            case "next_price":
                return t.Price;
            case "date_of_nearest_task":
            case "task_last_date":
                return i.date ? t.EditTask : t.AddTask;
            case "main_contact":
            case "company_name":
                switch (e.element_type) {
                case AMOCRM.element_types.leads:
                    return t.LeadsLinked;
                case AMOCRM.element_types.contacts:
                    return t.ContactsLinked
                }
                break;
            case "contact_company_name":
                return t.ContactsLinked;
            default:
                return t.Base
            }
    }
}),
define("lib/components/lists/edit/item", ["require", "jquery", "underscore", "twig", "lib/components/lists/base/view", "lib/common/fn", "lib/components/lists/edit/rights_checker", "lib/components/lists/edit/cell/handlers"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/components/lists/base/view")
      , o = e("lib/common/fn")
      , r = e("lib/components/lists/edit/rights_checker")
      , a = e("lib/components/lists/edit/cell/handlers");
    return n.View.extend({
        _templates: n.View.prototype._templates.concat(["/tmpl/list/cells_edit/buttons.twig"]),
        _cached_fields: null,
        _selectors: function() {
            var e = i.extend({}, i.result(n.View.prototype, "_selectors"), {
                cell: ".list-row__cell",
                cell_by_type: '.list-row__cell[data-field-code="%s"]'
            });
            return e
        },
        _desktop_events: {
            "mouseenter .js-list-row__cell:not(.list-row__cell-template-id)": "onCellHover",
            "mouseleave .js-list-row__cell:not(.list-row__cell-template-id)": "onCellHover",
            "click .js-list-row__cell-edit": "onEditClick",
            "click .js-list-row__cell-close-task": "onCloseTaskClick"
        },
        _tablet_events: {
            "click .js-list-row__cell:not(.list-row__cell-template-id):not(.list-row__cell-template-checkbox)": "onTabletEditClick"
        },
        initEvents: function() {
            this.events = i.extend({}, i.result(n.View.prototype, "events"), {
                'change .list-row__cell-template-checkbox input[type="checkbox"]': "onCheckboxChange"
            }, AMOCRM.is_touch_device ? this._tablet_events : this._desktop_events),
            this.delegateEvents()
        },
        onTemplatesPreload: function() {
            this.cacheFields(),
            this.initEvents()
        },
        cacheFields: function() {
            var e = this.model.toJSON()
              , t = [];
            return i.each(e, function(i, s) {
                t = t.concat(r.checkBaseFields.call(this, s, e)),
                t = t.concat(r.checkCustomFields.call(this, s, e))
            }, this),
            this._cached_fields = i.sortBy(t, function(e) {
                return e
            })
        },
        positionEditButton: function(e) {
            var t, s, n, r = e.value, a = e.$cell, l = e.$button, c = l.outerWidth(), d = parseFloat(l.css("right")), u = a.outerWidth(), h = u - 10 - d, _ = (i.findWhere(this.options.parsed_fields, {
                code: e.field_code
            }) || {}).template, p = this.model.get("element_type"), m = 0, f = 0, g = {};
            switch (!0) {
            case i.isArray(r) === !0:
                n = "multiselect" === _ ? ", " : " ",
                r = i.values(r).join(n);
                break;
            case i.isObject(r) === !0:
                switch (!0) {
                case "date_of_nearest_task" === e.field_code:
                    r = r.date ? o.formatDate(r.date) : "";
                    break;
                case "smart_address" === _:
                    r = i.chain(r).values().filter(function(e) {
                        return e
                    }).value().join(", ");
                    break;
                default:
                    r = i.has(r, "text") ? r.text : r.name || "",
                    p === AMOCRM.element_types.leads && (r = o.leadName(r, e.value.id))
                }
            }
            switch (!0) {
            case r && "date" === _:
                r = moment(r).format(AMOCRM.system.format.date.date);
                break;
            case "budget" === e.field_code:
                r = r || "0",
                r = o.currency(r, !0, 0, !1).trim();
                break;
            case "next_price" === e.field_code:
                r = r || "0",
                r = o.currency(r, !1, 0, !1)
            }
            switch (a.toggleClass("list-row__cell_empty-value", !r.length),
            r = r || "...",
            s = o.getTextWidth(i.unescape(r.replace("  ", " "))),
            e.field_code) {
            case "name":
                switch (p) {
                case AMOCRM.element_types.companies:
                    m = 23;
                    break;
                case AMOCRM.element_types.leads:
                case AMOCRM.element_types.customers:
                    var b = this.model.get("todo_marker");
                    m = i.isObject(b) ? 12 : 0,
                    f = i.isObject(b) && b.days || "",
                    f = f ? o.getTextWidth(f + " " + AMOCRM.lang.todo_marker_days, 'normal 12px "PT Sans"') : 0
                }
                s += f;
                break;
            case "status":
                s = a.find(".leads__status-label").outerWidth() || a.find(".note-lead__container").outerWidth();
                break;
            case "budget":
                t = !a.next().length,
                d = parseFloat(l.css("left")),
                h = u - (t ? 15 : 10) - d,
                g = {
                    right: s + (t ? 20 : 15),
                    left: "auto"
                }
            }
            return h - m - c - 5 > s && (g = i.isEmpty(g) ? {
                left: s + m + 15,
                right: "auto"
            } : g,
            l.css(g)),
            this
        },
        enterKeyPressed: function() {
            this._checkHasEdits() || n.View.prototype.enterKeyPressed.apply(this, arguments)
        },
        onCellHover: function(e) {
            var n = t(e.currentTarget)
              , o = n.data("field-code")
              , r = this.model.get(o);
            if (i.contains(this._cached_fields, o) && (!i.isFunction(this.options.isEditingPrepended) || this.options.isEditingPrepended() !== !0))
                switch (e.type) {
                case "mouseenter":
                    n.append(this._$edit_button = t(s({
                        ref: "/tmpl/list/cells_edit/buttons.twig"
                    }).render({
                        field_code: o,
                        value: r
                    }))),
                    this.positionEditButton({
                        $cell: n,
                        $button: this._$edit_button,
                        value: r,
                        field_code: o
                    });
                    break;
                case "mouseleave":
                    n.removeClass("list-row__cell_empty-value"),
                    this._$edit_button && (this._$edit_button.remove(),
                    delete this._$edit_button)
                }
        },
        onTabletEditClick: function(e) {
            var s, n, r = t(e.currentTarget), a = t(e.target), l = r.data("field-code"), c = a.data("action-code"), d = {
                $elem: a,
                triggerCellEdit: i.bind(function(t) {
                    return this.onEditClick(e, t)
                }, this)
            };
            if (i.contains(this._cached_fields, l)) {
                if (n = this._checkActiveEdits(),
                s = this._removeTips(),
                "name" === l)
                    return;
                if (e.stopPropagation(),
                e.preventDefault(),
                !i.isBoolean(n) && s !== !0)
                    switch (!0) {
                    case a.hasClass("js-navigate-link") === !0:
                        switch (l) {
                        case "main_contact":
                        case "company_name":
                        case "contact_company_name":
                            return this.showTip(i.extend(d, {
                                class_name: "cell-tip_linked",
                                value: a.attr("href"),
                                items: [{
                                    icon: "to-card",
                                    text: o.i18n("Open detail"),
                                    class_name: "js-tips-item-detail",
                                    link_class_name: "js-navigate-link",
                                    href: a.attr("href")
                                }]
                            }));
                        default:
                            return this.showTip(i.extend(d, {
                                class_name: "cell-tip_linked",
                                value: a.attr("href"),
                                items: [{
                                    icon: "in-new-window",
                                    text: o.i18n("Follow"),
                                    class_name: "js-tips-item-follow",
                                    href: a.attr("href"),
                                    additional_data: 'data-type="link"'
                                }]
                            }))
                        }
                    case a.hasClass("js-show-data-actions") === !0:
                        switch (d = i.extend(d, this._getWidgetTipParams(c), {
                            value: a.text().toString(),
                            class_name: "cell-tip_pei-actions",
                            model: this.model
                        }),
                        c) {
                        case "phone":
                            d.items.unshift({
                                icon: "phone-dark",
                                text: o.i18n("Call"),
                                class_name: "js-tips-item-call",
                                additional_data: 'data-type="phone"'
                            });
                            break;
                        case "email":
                            d.items.unshift({
                                icon: "mail-dark",
                                text: o.i18n("Mail (to)"),
                                class_name: "js-tips-item-mail",
                                additional_data: 'data-type="email"'
                            })
                        }
                        return this.showTip(d);
                    case "date_of_nearest_task" === l:
                        return this.model.get(l).date ? this.showTip(i.extend(d, {
                            class_name: "cell-tip_nearest-task",
                            items: [{
                                icon: "close-tasks",
                                text: o.i18n("Close task"),
                                additional_data: 'data-type="close-task"'
                            }]
                        })) : this.onEditClick.apply(this, arguments);
                    default:
                        return this.onEditClick.apply(this, arguments)
                    }
            }
        },
        onEditClick: function(e, s) {
            var n = t(e.currentTarget)
              , o = n.closest(".js-list-row__cell")
              , r = o.data("field-code").toString()
              , l = i.findWhere(this.options.parsed_fields, {
                code: r
            }) || {}
              , c = a(l, this.model.get(r));
            e.stopPropagation(),
            r && this._checkActiveEdits() !== !1 && (this.edit_view = this._addComponent(c, i.extend({
                $cell: o,
                $holder: this._elems.$list_table,
                $container: this.$el.closest(".list__body-right"),
                model: this.model,
                field_params: l,
                parsed_fields: this.options.parsed_fields,
                onRender: i.bind(function() {
                    i.isFunction(this.options.pauseHS) && this.options.pauseHS(),
                    AMOCRM.is_touch_device || o.trigger("mouseleave")
                }, this),
                onDestroy: i.bind(function() {
                    i.isFunction(this.options.resumeHS) && this.options.resumeHS(),
                    delete this.edit_view
                }, this),
                onSave: this.options.updateModel,
                updateSearchSummary: this.options.updateSearchSummary,
                scrollIntoView: this.options.scrollIntoView
            }, s || {})).render())
        },
        onCloseTaskClick: function(e) {
            this.onEditClick(e, {
                close_task: !0
            })
        },
        onCheckboxChange: function(e) {
            var s = t(e.currentTarget)
              , n = s.closest(".js-list-row__cell")
              , o = n.data("field-code").toString()
              , r = i.findWhere(this.options.parsed_fields, {
                code: o
            }) || {}
              , l = a(r);
            o && (s.prop("disabled", !0),
            this._checkActiveEdits() !== !1 && (this.edit_view = this._addComponent(l, {
                model: this.model,
                field_params: r,
                parsed_fields: this.options.parsed_fields,
                quick_save: !0,
                checkbox_value: s.prop("checked") ? "on" : "",
                onDestroy: i.bind(function() {
                    delete this.edit_view
                }, this),
                onSave: i.bind(this.options.updateModel, this)
            }).saveCellEdit()))
        },
        _checkActiveEdits: function() {
            var e = this.options.checkActiveCellEdits;
            return i.isFunction(e) && e() && e().cancelCellEdit()
        },
        _checkHasEdits: function() {
            var e = this.options.checkActiveCellEdits;
            return i.isFunction(e) && !!e()
        },
        _removeTips: function() {
            var e = this.options.removeCellTips;
            return i.isFunction(e) && e()
        },
        render: function(e) {
            var t;
            return t = AMOCRM.data.current_view._last_render_params || {
                fields: (AMOCRM.constant("existed_data") || {}).fields,
                items: AMOCRM.constant("existed_items") || {},
                filter: {
                    pipelines: (AMOCRM.constant("existed_data") || {}).pipelines,
                    statuses: (AMOCRM.constant("existed_data") || {}).statuses
                }
            },
            e = e || i.extend({}, t, {
                entity: AMOCRM.getBaseEntity(),
                enable_checkboxes: !0,
                user_rights: AMOCRM.constant("user_rights")
            }),
            n.View.prototype.render.call(this, e)
        }
    })
}),
define("lib/components/lists/edit/editable_list", ["require", "underscore", "lib/components/lists/edit/updatable_list", "lib/components/lists/edit/item"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/edit/updatable_list")
      , s = e("lib/components/lists/edit/item");
    return i.extend({
        _RowView: s,
        bindExistingItems: function() {
            var e = arguments[1];
            return this.setFields(this.prepareFieldsParams(e.fields)),
            i.prototype.bindExistingItems.apply(this, arguments)
        },
        getRowItemViewOptions: function() {
            return t.extend({}, i.prototype.getRowItemViewOptions.call(this), {
                checkActiveCellEdits: t.bind(this.checkActiveCellEdits, this),
                isEditingPrepended: t.bind(function() {
                    return this.editing_prepended
                }, this),
                parsed_fields: this.getFields()
            })
        },
        initListHeader: function(e) {
            i.prototype.initListHeader.call(this, t.extend(e || {}, {
                list_settings_options: {
                    onListSettingsInit: t.bind(this.prependCellEditing, this, {
                        prepend: !0
                    }),
                    onListSettingsDestroy: t.bind(this.prependCellEditing, this, {
                        prepend: !1
                    })
                }
            }))
        },
        prependCellEditing: function(e) {
            this.editing_prepended = (e || {}).prepend
        },
        prepareFieldsParams: function(e) {
            var i = this.entity
              , s = {
                custom_fields: {},
                base_fields: t.reject(e, function(e) {
                    return e.custom_field
                })
            };
            return s.custom_fields[i] = t.filter(e, function(e) {
                return e.custom_field
            }),
            s
        },
        checkActiveCellEdits: function() {
            var e = t.find(this._views, function(e) {
                return !t.isEmpty(e.edit_view)
            }, this) || {};
            return e.edit_view
        }
    })
}),
define("lib/components/unsorted/api", ["require", "underscore", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = function() {};
    return t.extend(n.prototype, {
        categories: {
            sip: {
                active: !0,
                name: "sip",
                lang: AMOCRM.lang["(Of) Calls"]
            },
            mail: {
                active: !0,
                name: "mail",
                lang: AMOCRM.lang["(Of) Emails"]
            },
            forms: {
                active: !0,
                name: "forms",
                lang: AMOCRM.lang["(Of) Web forms"]
            },
            chats: {
                active: !0,
                name: "chats",
                lang: AMOCRM.lang["(Of) Chats"]
            }
        },
        getCategories: function() {
            return $.extend(!0, {}, this.categories)
        },
        getListQs: function(e) {
            var i, s, n = AMOCRM.constant("user");
            return e = e || {},
            i = ["order_by[date_create]=desc", "PAGEN_1=" + (e.page || 1), "page_size=" + (e.page_size || 50)],
            s = t.isEmpty(e.categories) ? this.categories : e.categories,
            t.isUndefined(e.uid) || i.push("uid=" + e.uid),
            t.each(s, function(e) {
                e.active && i.push("categories[]=" + e.name)
            }),
            i.push("login=" + n.login),
            i.push("api_key=" + n.api_key),
            i.join("&")
        },
        getList: function(e) {
            return $.ajax(t.extend({
                url: "/api/unsorted/list/",
                data: this.getListQs(e),
                type: "GET",
                dataType: "json",
                headers: {
                    Accept: "application/json"
                }
            }, e && e.ajax_params || {}))
        },
        getTotal: function(e) {
            var s = $.Deferred()
              , n = t.bind(this._countTotal, this);
            return t.isEmpty(e) ? this.getList().done(t.bind(function(e) {
                var t = i.has_keys(e, ["response", "unsorted", "summary"]) ? e.response.unsorted.summary : {};
                s.resolve(n(t))
            }, this)) : s.resolve(n(e)),
            s.promise()
        },
        _countTotal: function(e) {
            return t.reduce(e, function(e, t) {
                return e + t
            }, 0)
        },
        link: function(e) {
            var i = s.current()
              , n = {
                request: {
                    unsorted: {}
                }
            };
            return e = e || {},
            n.request.unsorted = {
                lang: AMOCRM.constant("account").language,
                user_id: i.id,
                link: [],
                links: {}
            },
            t.each(e, function(e) {
                n.request.unsorted.link.push(e.id),
                n.request.unsorted.links[e.id] = {
                    id: e.lead_id,
                    contact_id: e.contact_id,
                    type: e.type
                }
            }),
            $.ajax({
                url: "/api/unsorted/link/?api_key=" + i.api_key + "&login=" + i.login,
                data: n,
                type: "POST",
                dataType: "json",
                headers: {
                    Accept: "application/json"
                }
            })
        }
    }),
    new n
}),
define("lib/interface/leads/cbh_modal", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/components/base/modal");
    return t = o.extend({
        events: {
            "click .js-cbh-install-save": "saveClick",
            "change input[name=check-install]": "installedCheck"
        },
        _selectors: function() {
            return {
                response_reg: ".cbh-install-modal_response#cbh-response_1",
                response_set: ".cbh-install-modal_response#cbh-response_2",
                modal_body: ".cbh-install-modal_modal-body",
                save_btn: ".js-cbh-install-save",
                installed_radios: ".cbh-install-modal_is-installed",
                register_form: ".cbh-install-modal_registration",
                settings_form: ".cbh-install-modal_input-fields",
                code: ".cbh-install-modal_tracker-code",
                api_img: ".cbh-install-modal_api-img",
                buttons: ".cbh-install-modal_buttons"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this),
            this.modal = new r({
                init: s.bind(function(e) {
                    this.setElement(e)
                }, this),
                destroy: s.bind(function() {
                    this.destroy()
                }, this)
            }),
            i.ajax({
                method: "POST",
                url: "/ajax/widgets/edit",
                data: {},
                dataType: "json",
                success: s.bind(function(e) {
                    void 0 == e.response.widgets.all.amo_callbackhunter && this.modal.destroy(),
                    this.widget_info = e.response.widgets.all.amo_callbackhunter,
                    0 == this.widget_info.first_load ? (void 0 == this.widget_info.settings.hunter_code && (this.widget_info.settings.hunter_code = {
                        value: ""
                    }),
                    void 0 == this.widget_info.settings.sync_chats && (this.widget_info.settings.sync_chats = {
                        value: "false"
                    }),
                    this.installed = !0) : this.installed = !1,
                    this.render()
                }, this)
            })
        },
        render: n._preload(["/tmpl/list/more_cbh_modal.twig"], "_render"),
        _render: function() {
            var e = this.widget_info.settings;
            this.$el.trigger("modal:loaded").html(i(n({
                ref: "/tmpl/list/more_cbh_modal.twig"
            }).render({
                wlang: this.widget_info.langs,
                installed: this.installed,
                settings: {
                    active: this.widget_info.active,
                    cbh_id: e.cbh_id.value,
                    cbh_key: e.cbh_key.value,
                    save_records: 1 == e.save_records.value || "true" == e.save_records.value ? !0 : !1,
                    sync_chats: 1 == e.sync_chats.value || "true" == e.sync_chats.value ? !0 : !1
                },
                udata: {
                    name: AMOCRM.constant("user").name,
                    login: AMOCRM.constant("user").login,
                    personal_mobile: AMOCRM.constant("user").personal_mobile || "+7"
                }
            }))).trigger("modal:centrify"),
            void 0 !== e.hunter_code.value && "" !== e.hunter_code.value && null !== e.hunter_code.value && "changed_by_user" !== e.hunter_code.value && this.showCode(e.hunter_code.value)
        },
        installedCheck: function() {
            this.inst_check = this.$el.find("input[name=check-install]:checked").val(),
            1 == this.inst_check ? (this._elem("register_form").hide(),
            this._elem("settings_form").show()) : 0 == this.inst_check && (this._elem("settings_form").hide(),
            this._elem("register_form").show()),
            this._elem("buttons").show()
        },
        saveClick: function() {
            1 == this.installed || 1 == this.inst_check ? this.saveSettings() : 0 == this.inst_check && this.registerCheck()
        },
        registerCheck: function() {
            var e = {}
              , t = this
              , s = !1;
            this._elem("register_form").find("input").each(function() {
                return "" === i(this).val() ? (t.showResponse(t.widget_info.langs["errors.empty_input"], 1),
                void (s = !0)) : void (e[i(this).attr("name")] = i(this).val())
            }),
            s || (this._elem("save_btn").trigger("button:save:start"),
            this._elem("response_reg").html(""),
            this.registerRequest({
                usite: e.cbh_site,
                uname: e.cbh_name,
                upass: e.cbh_pass,
                umail: e.cbh_email,
                uphone: e.cbh_phone,
                wsite: e.cbh_site,
                wphone: e.cbh_phone,
                wmail: e.cbh_email,
                sms_phone: e.cbh_phone
            }))
        },
        registerRequest: function(e) {
            var t = "https://callbackhunter.com/api/create_widget_fast?key=a043b277b4e903992b43af66c3be8b24";
            i.each(e, function(e, i) {
                t += "&" + e + "=" + encodeURIComponent(i)
            }),
            i.ajax({
                type: "GET",
                dataType: "json",
                data: {
                    target: t
                },
                url: "/private/widget/proxy.php",
                success: s.bind(function(e) {
                    if (!e.status || s.isUndefined(e) || s.isUndefined(e.status))
                        this.showResponse(AMOCRM.lang.cbh_install_empty_response, 1);
                    else if ("success" === e.status) {
                        var t = {
                            cbh_id: e.user_id,
                            cbh_key: e.api_key,
                            save_records: !0,
                            widget_active: !0,
                            sync_chats: !0,
                            hunter_code: e.tracker_code,
                            amouser: AMOCRM.widgets.system.amouser,
                            amohash: AMOCRM.widgets.system.amohash,
                            domain: AMOCRM.widgets.system.subdomain
                        };
                        this.sendSettings(t, !1),
                        this.showCode(e.tracker_code),
                        this._elem("installed_radios").remove(),
                        this.fillInputs(t),
                        this._elem("api_img").hide(),
                        this._elem("settings_form").show()
                    } else
                        "read0" === e.error_code ? this.showResponse(AMOCRM.lang.cbh_install_no_rights, 1) : this.showResponse(e.error_descr, 1)
                }, this),
                error: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, 1)
                }, this),
                fail: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, 1)
                }, this)
            })
        },
        saveSettings: function() {
            var e = {
                cbh_id: this.$el.find("input[name=cbh_id]").val(),
                cbh_key: this.$el.find("input[name=cbh_key]").val(),
                save_records: this.$el.find("input[name=save_records]").closest(".switcher_wrapper").find("label").hasClass("switcher__on"),
                widget_active: this.$el.find("input[name=widget_active]").closest(".switcher_wrapper").find("label").hasClass("switcher__on"),
                sync_chats: this.$el.find("input[name=sync_chats]").closest(".switcher_wrapper").find("label").hasClass("switcher__on"),
                amouser: AMOCRM.constant("user").login,
                amohash: AMOCRM.constant("user").api_key,
                domain: AMOCRM.constant("account").subdomain
            };
            e.cbh_id != this.widget_info.settings.cbh_id.value || e.cbh_key != this.widget_info.settings.cbh_key.value ? ("" !== this.widget_info.settings.hunter_code.value || void 0 !== this.widget_info.settings.hunter_code.value) && (e.hunter_code = "changed_by_user") : e.hunter_code = this.widget_info.settings.hunter_code.value,
            this._elem("save_btn").trigger("button:save:start"),
            this._elem("response_set").html(""),
            e.widget_active ? i.ajax({
                url: "/private/widget/proxy.php",
                type: "GET",
                dataType: "json",
                data: {
                    target: "https://callbackhunter.com/api/get_user_settings?id=" + encodeURIComponent(e.cbh_id) + "&key=" + encodeURIComponent(e.cbh_key)
                },
                success: s.bind(function(t) {
                    !t.status || s.isUndefined(t) || s.isUndefined(t.status) ? this.showResponse(AMOCRM.lang.cbh_install_empty_response, 2) : "success" === t.status ? this.sendSettings(e, !0) : "read0" === t.error_code ? this.showResponse(AMOCRM.lang.cbh_install_no_rights, 2) : this.showResponse(t.error_descr, 2)
                }, this),
                fail: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, 2)
                }, this),
                error: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, 2)
                }, this)
            }) : this.sendSettings(e, !0)
        },
        sendSettings: function(e, t) {
            e.widget_active = e.widget_active ? 1 : 0,
            e.save_records = e.save_records ? 1 : 0,
            e.sync_chats = e.sync_chats ? 1 : 0;
            var n = t ? 2 : 1;
            "dev" == AMOCRM.environment ? e.target = "http://cbh.amocrm2.saas/add_user.php" : e.target = "https://callbackhunter.amocrm.ru/add_user.php",
            i.ajax({
                type: "POST",
                dataType: "json",
                url: "/private/widget/proxy.php",
                data: e,
                success: s.bind(function(i) {
                    1 == i.status ? this.updateWidget(e, t, n) : this.showResponse(AMOCRM.lang.cbh_install_empty_response)
                }, this),
                fail: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response)
                }, this),
                error: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, n)
                }, this)
            })
        },
        updateWidget: function(e, t, n) {
            i.ajax({
                url: "/ajax/widgets/edit",
                type: "POST",
                data: {
                    action: "edit",
                    id: this.widget_info.id,
                    code: this.widget_info.code,
                    widget_active: e.widget_active ? "Y" : "N",
                    settings: {
                        cbh_id: e.cbh_id,
                        cbh_key: e.cbh_key,
                        hunter_code: e.hunter_code,
                        save_records: e.save_records ? !0 : !1,
                        sync_chats: e.sync_chats ? !0 : !1
                    },
                    is_base_integration: "Y"
                },
                dataType: "json",
                success: s.bind(function(s) {
                    var n = i(".js-cbh-install").parent(".unsorted-big-menu-item");
                    e.widget_active ? n.addClass("unsorted-big-menu-item--is-enable") : n.removeClass("unsorted-big-menu-item--is-enable"),
                    1 == t ? this.modal.destroy() : (this._elem("save_btn").trigger("button:load:stop"),
                    this.installed = !0),
                    AMOCRM.widgets.clear_cache()
                }, this),
                fail: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, n)
                }, this),
                error: s.bind(function() {
                    this.showResponse(AMOCRM.lang.cbh_install_empty_response, n)
                }, this)
            })
        },
        showResponse: function(e, t) {
            var i = 1 == t ? "reg" : "set";
            this._elem("response_" + i).html(e).show(),
            this.$el.trigger("modal:centrify"),
            this._elem("save_btn").trigger("button:load:stop")
        },
        showCode: function(e) {
            var t = '&ltscript type="text/javascript" src="//cdn.callbackhunter.com/cbh.js?hunter_code=' + e + '" charset="UTF-8"&gt&lt/script&gt';
            this._elem("code").html(this.widget_info.langs["registration.code_label"] + "<br>" + t),
            this._elem("code").show()
        },
        fillInputs: function(e) {
            this.$el.find("input[name=cbh_id]").val(e.cbh_id),
            this.$el.find("input[name=cbh_key]").val(e.cbh_key),
            this.widget_info.settings.cbh_id.value = e.cbh_id,
            this.widget_info.settings.cbh_key.value = e.cbh_key,
            this.widget_info.settings.hunter_code.value = e.hunter_code,
            this.$el.find("input[name=widget_active]").closest(".cbh-install-modal_input-fields_item").show(),
            this.$el.find("input[name=widget_active]").closest(".switcher_wrapper").find("label").addClass("switcher__on").removeClass("switcher__off")
        }
    })
}),
define("lib/interface/leads/duplicate_search_modal", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/components/lists/actions/merge", "lib/components/base/modal", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("twig"),
    e("lib/core/view")), o = e("lib/components/lists/actions/merge"), r = e("lib/components/base/modal"), a = e("lib/common/fn");
    return t = n.extend({
        events: {},
        _selectors: function() {
            return {}
        },
        initialize: function(e) {
            this.options = e || {},
            this.doubles = [],
            n.prototype.initialize.apply(this),
            this.modal = new r({}),
            this.getElements(s.bind(function() {
                this.startMerge()
            }, this))
        },
        getElements: function(e) {
            i.get("/ajax/v2/doubles/show", {}, s.bind(function(t) {
                t = t || {},
                t = t.response || {};
                var i;
                i = t.doubles || [],
                this.total = i.length,
                this.total > 0 ? (this.doubles = i,
                e()) : this.showSuccess(),
                this.modal.destroy()
            }, this))
        },
        startMerge: function(e) {
            if (e = e || {},
            e.deleted_items && this.deleteNotExistElement(e.deleted_items),
            this.doubles.length > 0) {
                var t = this.doubles.shift();
                if (t.length > 0) {
                    var i = new o({
                        id: t,
                        type: "leads",
                        is_doubles_search: !0,
                        doubles_counter: this.total - this.doubles.length + "/" + this.total,
                        titleLang: "duplicate_search",
                        restart: e.restart,
                        success_callback: s.bind(function(e) {
                            this.startMerge(e)
                        }, this)
                    });
                    i.$el.on("click", ".js-merge-next", s.bind(function() {
                        i.modal.destroy(),
                        this.markAsUnique(t),
                        this.startMerge()
                    }, this))
                } else
                    this.startMerge()
            } else
                this.destroy(),
                this.showSuccess()
        },
        deleteNotExistElement: function(e) {
            this.doubles.length > 0 && e.length > 0 && (this.doubles = s.filter(this.doubles, function(t) {
                var i = s.find(t, function(t) {
                    return e.indexOf(t) > -1
                });
                return void 0 === i
            }),
            this.total = this.doubles.length)
        },
        showSuccess: function() {
            (new r).showSuccess(a.i18n("No more duplicates"), !1, 800)
        },
        markAsUnique: function(e) {
            i.post("/ajax/v2/doubles/mark_unique", {
                elements: e
            }),
            e = e || []
        }
    })
}),
define("lib/interface/leads/mixins/leads_more", ["require", "underscore", "lib/interface/leads/cbh_modal", "lib/interface/leads/duplicate_search_modal"], function(e) {
    "use strict";
    var t = (e("underscore"),
    e("lib/interface/leads/cbh_modal"))
      , i = e("lib/interface/leads/duplicate_search_modal");
    return {
        events: {
            "click .js-cbh-install": "showCbhModal",
            "click .js-duplicate-search": "showDuplicateSearchModal"
        },
        showCbhModal: function() {
            this._addComponent(t)
        },
        showDuplicateSearchModal: function() {
            this._addComponent(i)
        }
    }
}),
define("lib/components/lists/actions/import", ["require", "jquery", "twig", "underscore", "backbone", "lib/components/base/modal", "FileAPI", "lib/common/hs", "lib/components/base/form", "lib/interface/fast_tags", "lib/common/urlparams", "lib/common/fn"], function(e) {
    "use strict";
    var t, i, s, n = e("jquery"), o = e("twig"), r = e("underscore"), a = e("backbone"), l = e("lib/components/base/modal"), c = e("FileAPI"), d = e("lib/common/hs"), u = e("lib/components/base/form"), h = e("lib/interface/fast_tags"), _ = e("lib/common/urlparams"), p = e("lib/common/fn"), m = 13, f = [4, 5, 10], g = {
        leads: ["deal_title_2"],
        customers: ["customer_name_12"],
        contacts: ["person_first_name_1", "person_second_name_1", "person_last_name_1", "person_full_name_1"],
        companies: ["company_name_3"],
        catalogs: ["catalog_element_name_"]
    }, b = function(e) {
        return e === p.convertElementType(AMOCRM.element_types.catalogs, "string")
    };
    return s = u.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            n.ajax({
                url: "/ajax/settings/custom_fields/",
                type: "POST",
                dataType: "json",
                data: n.extend({
                    action: "apply_changes"
                }, this.toJSON())
            }).always(r.bind(function() {
                this.is_saving = !1
            }, this)).done(r.bind(function(t) {
                t.response && t.response.error ? (this.trigger("cf_max_reached", t.response.error),
                e.error.call(this)) : e.success.call(this, t)
            }, this)).fail(r.bind(function() {
                e.error.call(this)
            }, this)))
        },
        hasChanges: function() {
            var e = u.Model.prototype.hasChanges.call(this);
            return e ? this.validate() : !1
        },
        validate: function() {
            return n.trim(this.get("cf[add][0][name]")) && (!(r.indexOf(f, parseInt(this.get("cf[add][0][type_id]"))) >= 0) || n.trim(n("#import_cf_form_variant_1").val()) && n.trim(n("#import_cf_form_variant_2").val())) ? !0 : !1
        }
    }),
    i = a.View.extend({
        tagName: "div",
        className: "new-import__cf-form",
        ns: ".import:cf",
        events: {
            "click .button-cancel": "cancelClick",
            "click .js-import-cf-save:not(.button-input-disabled)": "saveClick",
            "change #import_cf_form_type": "cfTypeChange",
            "keypress input": "onInput",
            "focus input": "validateClear"
        },
        initialize: function(e) {
            return this.options = e || {},
            this.options.$container ? (this.options.$container.parent().append(this.$el.hide()),
            this.toggleContainerScroll(!1),
            this.render(),
            this.makeForm(!0),
            void this.setPositions()) : !1
        },
        destroy: function() {
            this.saved || this.options.$field_cell.find(".new-import__settings__field").find(".control--select--input").val("do_not_import").trigger("controls:change:visual"),
            n("#import_cf_max_count").hide(),
            this.options.$container.parent().off(this.ns),
            this.toggleContainerScroll(!0),
            this.makeForm(!1),
            this.remove()
        },
        render: function() {
            var e = r.map(this.options.cf_types, function(e, t) {
                return {
                    id: t,
                    option: e.name,
                    additional_data: 'data-code="' + e.code + '" data-type="' + e.tag + '"'
                }
            })
              , t = [AMOCRM.element_types.contacts, AMOCRM.element_types.leads, AMOCRM.element_types.companies, AMOCRM.element_types.customers]
              , i = AMOCRM.element_types[this.options.entity];
            b(this.options.entity) && (t = [AMOCRM.data.current_view.catalog.id],
            i = AMOCRM.data.current_view.catalog.id),
            this.$el.html(o({
                ref: "/tmpl/common/modal/import_beta/cf_form.twig"
            }).render({
                lang: AMOCRM.lang,
                cf_types: e,
                element_type: i,
                entities_items: r.map(t, function(e, t) {
                    return {
                        id: e,
                        option: AMOCRM.lang["import_element_type_" + e]
                    }
                }),
                hide_entity: -1 === r.indexOf(t, p.convertElementType(this.options.entity, "int"), !0)
            })).slideDown(200, r.bind(function() {
                var e = n("#import_cf_form_name");
                AMOCRM.is_touch_device || e.focus(),
                n("#first_names_input").is(":checked") && e.val(n("#new_import_table_header").find(".field_cell:nth-child(" + (this.options.$field_cell.index() + 1) + ")").text() || "").trigger("change")
            }, this))
        },
        makeForm: function(e) {
            e ? (this.form = new u.View({
                model: s,
                el: this.el
            }),
            this.form.model.on("has_changes", function() {
                this.$(".js-import-cf-save").trigger("button:save:enable")
            }, this).on("has_reverted", function() {
                this.$(".js-import-cf-save").trigger("button:save:disable")
            }, this).on("cf_max_reached", function(e) {
                n("#import_cf_max_count").text(e).show()
            })) : this.form && this.form.destroy()
        },
        cancelClick: function() {
            return this.destroy(),
            !1
        },
        saveClick: function(e) {
            var t = n(e && e.currentTarget || this.$(".js-import-cf-save"));
            return this.validate() ? (t.trigger("button:save:start"),
            void this.form.save({
                success: r.bind(function(e) {
                    this.saved = !0,
                    this.options.onSave.call(this, {
                        id: e.response.id.join(""),
                        type_id: this.form.model.get("cf[add][0][type_id]"),
                        element_type: this.form.model.get("cf[add][0][element_type]"),
                        name: p.escapeTags(this.form.model.get("cf[add][0][name]")),
                        $field_cell: this.options.$field_cell
                    }),
                    t.trigger("button:saved"),
                    this.destroy()
                }, this),
                error: r.bind(function() {
                    this.$el.one(AMOCRM.animation_event, r.bind(function() {
                        this.$el.removeClass("animated shake")
                    }, this)).addClass("animated shake"),
                    t.trigger("button:save:error")
                }, this)
            })) : !1
        },
        cfTypeChange: function(e) {
            var t = n(e.currentTarget)
              , i = r.indexOf(["SELECT", "MULTISELECT", "RADIOBUTTON"], t.closest(".control--select").find('li[data-value="' + t.val() + '"]').attr("data-code")) >= 0
              , s = i ? "slideDown" : "slideUp"
              , o = this.$(".new-import__cf-form__variants input");
            i && this.checkVariantsInPreview(this.options.$field_cell.index()),
            n("#import_cf_form_variants")[s](200),
            i ? o.removeAttr("disabled") : o.attr("disabled", "disabled")
        },
        onInput: function(e) {
            this.validateClear(),
            e.keyCode === m && this.saveClick()
        },
        validateClear: function(e) {
            n(e && e.currentTarget || this.$("input")).removeClass("validate-has-error")
        },
        toggleContainerScroll: function(e) {
            e ? n("#import_cf_overlay").remove() : this.options.$container.parent().one("click" + this.ns, "#import_cf_overlay", r.bind(function() {
                return this.destroy(),
                !1
            }, this)).append('<div class="default-overlay default-overlay-visible" id="import_cf_overlay" style="background: none; z-index: 5;"></div>')
        },
        setPositions: function() {
            var e = this.options.$field_cell && this.options.$field_cell.offset()
              , t = this.options.$container.offset();
            this.$el.css({
                top: e.top - t.top,
                left: e.left - t.left
            })
        },
        checkVariantsInPreview: function(e) {
            var t = []
              , i = ""
              , s = 0;
            this.options.$container.find(".import_list__table_row .field_cell:nth-child(" + (e + 1) + ")").each(r.bind(function(e, o) {
                return i = n.trim(n(o).text()).replace(/^\"(.*)\"$/, "$1").replace(/\",\s\"/g, '","').split('","')[0] || "",
                i && -1 === r.indexOf(t, i.toLowerCase()) && (s++,
                n("#import_cf_form_variant_" + s).val(i).trigger("change"),
                t.push(i.toLowerCase())),
                2 === s ? !1 : void 0
            }, this))
        },
        validate: function() {
            var e = n("#import_cf_form_name");
            return n.trim(e.val()) ? !0 : (e.addClass("validate-has-error"),
            !1)
        }
    }),
    t = a.View.extend({
        timeout: 5e3,
        events: {
            "click #show_imported_list": "showImportedList",
            "controls:change .new-import__settings__field:not(.control--select-save-overflow) .control--select--input": "fieldSelectChange",
            "controls:change #delimiter_select": "changeDelimiterAndRefresh",
            "controls:change #template_select": "changeTemplateAndRefresh",
            "click .js-settings-next": "submitImport",
            "click .js-processing-cont-to-work": "continueToWork",
            "click .js_import__try_again": "initModal",
            "change #first_names_input": "toggleFirstLineCaption",
            "change #template_id_checkbox": "checkKeepChanges",
            "click #autotag_input": "initTags",
            "click .import_proc__show_prev__link": "showImportedData",
            "click #import_show_old": "showOldImport"
        },
        initialize: function(e) {
            if (this.options = e || {},
            this.template = -1,
            this.need_reload = !1,
            this.trigger_entity = this.options.entity,
            "contacts" === this.options.entity)
                switch (AMOCRM.data.element_type) {
                case "companies":
                    this.trigger_entity = "companies"
                }
            this.initModal()
        },
        destroy: function() {
            clearInterval(this.processing_interval),
            this.settingsDestroy(),
            this.$("iframe").off(),
            this.makeFileAPI(!1),
            this.$el.removeData().off(),
            this.need_reload && n(document).trigger("page:reload")
        },
        continueToWork: function() {
            this.modal.destroy()
        },
        showImportedList: function(e) {
            var t = this;
            e.preventDefault(),
            this.overlay(!0),
            n.ajax({
                url: "/ajax/import/list/",
                dataType: "json"
            }).done(r.bind(function(e) {
                this.overlay(!1),
                this.modal.hide(),
                new l({
                    class_name: "modal-list modal-import_list",
                    init: function(i) {
                        i.trigger("modal:loaded").html(o({
                            ref: "/tmpl/common/modal/import_beta/import_list.twig"
                        }).render({
                            lang: AMOCRM.lang,
                            rows: e.response.imports
                        })).trigger("modal:centrify"),
                        t.imports_modal = this,
                        t.checkListForRequests()
                    },
                    destroy: r.bind(function() {
                        clearInterval(this.processing_interval),
                        this.modal.show()
                    }, this)
                })
            }, this))
        },
        fieldSelectChange: function(e) {
            var t = n(e.currentTarget)
              , i = t.val()
              , s = t.closest(".field_settings_cell")
              , o = s.find('li[data-value="' + i + '"]')
              , r = s.find(".field_settings_cell__add-list");
            "multi" !== i.split("_").shift() || o.attr("data-value-fixed") || (i = i + "_" + s.index(),
            o.attr("data-value", i).attr("data-value-fixed", !0),
            t.val(i)),
            1 == parseInt(o.attr("data-addable")) ? r.slideDown(200) : r.slideUp(200),
            this.checkForNewCustomField(i, s)
        },
        checkForNewCustomField: function(e, t) {
            "add_new_cf" === e && new i({
                $field_cell: t,
                $container: n("#new_import_settings_scroller_wrapper"),
                cf_types: this.cf_types,
                entity: this.options.entity,
                onSave: r.bind(this.onSaveCustomField, this)
            })
        },
        onSaveCustomField: function(e) {
            var t, i, s, o, a = r.indexOf(f, parseInt(e.type_id)) > -1 ? 1 : 0, l = '<li data-value="CF_' + e.id + "_" + e.element_type + '" class="control--select--list--item" data-addable="' + a + '"><span class="control--select--list--item-inner" title="' + e.name + '">' + e.name + '</span><b class="control--select--down-icon icon icon-v-ico-2"></b></li>';
            this.cf_types[e.type_id] && this.cf_types[e.type_id].sub_types && (l = "",
            r.each(this.cf_types[e.type_id].sub_types_options, function(t, i) {
                s = e.name + ": " + t.title,
                l += '<li data-value="sub_CF_' + e.id + "_" + i + "_" + e.element_type + '" class="control--select--list--item" data-addable="0"><span class="control--select--list--item-inner" title="' + s + '">' + s + '</span><b class="control--select--down-icon icon icon-v-ico-2"></b></li>'
            }, this)),
            this.$(".field_settings_cell").each(r.bind(function(s, r) {
                i = n(l),
                t = n(r),
                o = t.find('li[data-cf-add-before="' + e.element_type + '"]'),
                o.length ? o.before(i) : t.find(".control--select--list").append(i),
                t[0] === e.$field_cell[0] && (t.find(".control--select--input").val(i[0].getAttribute("data-value")).trigger("controls:change").trigger("controls:change:visual"),
                t.find(".field_settings_cell__add-list input").attr("checked", "checked").trigger("change"))
            }, this))
        },
        changeDelimiterAndRefresh: function(e) {
            this.template = -1,
            this.delimiter = n(e.currentTarget).val(),
            this.showSettings()
        },
        changeTemplateAndRefresh: function(e) {
            this.template = n(e.currentTarget).val(),
            this.templates && (this.delimiter = "dot-comma",
            this.templates[this.template] && (this.delimiter = this.templates[this.template].data.delimiter),
            this.showSettings())
        },
        submitImport: function(e) {
            var t, i = this.tag_name || "", s = [], o = n("#new_import_settings_form").serialize(), a = r.invert(_.QStoJSON(o)), l = this.emptyFileError() || this.nameIssetError(a) || this.fieldsFillError(a);
            return l ? void this.modal.showError(l) : (i && (i += ","),
            this.$(".field_settings_cell").each(r.bind(function(e, i) {
                t = n(i),
                t.find('input[type="checkbox"]').is(":checked") && s.push("addable[" + t.find(".control--select--input").val() + "]=true")
            }, this)),
            o += "&line_num=" + n("#new_import_settings_scroller").find(".import_list__table_std-row").length,
            o += "&URL_DATA_FILE=" + this.file,
            o += "&autotag=" + i,
            o += "&lang=" + AMOCRM.lang_id,
            o += n("#template_id_checkbox").is(":checked") ? "&template_id=" + this.template : "&template_name=" + n("#template_name_input").val(),
            o += s.length ? "&" + s.join("&") : "",
            o += "&trigger_entity=" + this.options.entity,
            b(this.options.entity) && (o += "&catalog_id=" + AMOCRM.data.current_view.catalog.id),
            this.overlay(!0),
            n.ajax({
                url: "/ajax/import/run/",
                data: o,
                dataType: "json",
                type: "POST"
            }).always(r.bind(function() {
                this.overlay(!1)
            }, this)).done(r.bind(function(t) {
                t.response && (t.response.params && t.response.params.errors ? this.modal.showError(r.values(t.response.params.errors).join("<br>")) : (this.settingsDestroy(),
                this.overlay(!0),
                this.requestProcessing(t.response.run.job_id, r.bind(function(e) {
                    this.renderProcessing(e)
                }, this), r.bind(function() {
                    this.overlay(!1)
                }, this)),
                this.timeoutProcessing(t.response.run.job_id, this.renderProcessing),
                r.isFunction(e) && e.call(this)))
            }, this)).fail(r.bind(function() {
                this.modal.showError()
            }, this)),
            !1)
        },
        toggleFirstLineCaption: function(e) {
            var t = n(e.currentTarget).is(":checked");
            n("#new_import_table_header").toggleClass("import_list__table_header", t).toggleClass("import_list__table_row", !t)
        },
        checkKeepChanges: function(e) {
            var t = n(e.currentTarget).is(":checked") ? "slideUp" : "slideDown";
            n("#new_import_template_save")[t](150)
        },
        showImportedData: function(e) {
            var t = n(e.currentTarget);
            AMOCRM.router.navigate(window.location.pathname + "?" + decodeURI("tag[]=" + t.attr("data-system-tag")), {
                replace: !0,
                trigger: !1
            }),
            this.need_reload = !0,
            this.modal.destroy()
        },
        overlay: function(e, t) {
            e ? (this.$(".modal-body").append(this.$overlay = n('<div class="default-overlay" style="background:rgba(255,255,255,.6); z-index: 99;"><span class="spinner-icon spinner-icon-abs-center"></span></div>')),
            this.$overlay.trigger("overlay:show")) : this.$overlay && this.$overlay.trigger("overlay:hide", {
                instantly: t
            })
        },
        initModal: o._preload(["/tmpl/common/modal/import.twig", "/tmpl/common/modal/import_beta/settings.twig", "/tmpl/common/modal/import_beta/processing.twig", "/tmpl/common/modal/import_beta/list_status_cell.twig", "/tmpl/common/modal/import_beta/cf_form.twig", "/tmpl/common/modal/import_beta/import_list.twig"], "_initModal"),
        _initModal: function() {
            var e = [this.options.entity]
              , t = b(this.options.entity) || "customers" === this.options.entity
              , i = this.options.entity;
            if ("contacts" === i)
                switch (AMOCRM.data.element_type) {
                case "companies":
                    e = ["companies"]
                }
            this.modal && this.modal.destroy(),
            this.modal = new l({
                class_name: "modal-list modal-list-import",
                init: function(s) {
                    this.$modal_body = s,
                    s.trigger("modal:loaded").html(o({
                        ref: "/tmpl/common/modal/import.twig"
                    }).render({
                        element_type: i,
                        subdomain: (AMOCRM.constant("account") || {}).subdomain,
                        example: e,
                        lang: AMOCRM.lang,
                        lang_id: AMOCRM.lang_id,
                        hide_old_import: t,
                        entity: i
                    })).trigger("modal:centrify")
                },
                destroy: r.bind(this.destroy, this)
            }),
            this.setElement(this.modal.$modal),
            this.$upload_btn = n("#new_import_load_btn"),
            this.$input_file = n("#new_import_load"),
            this.makeFileAPI(!0)
        },
        showOldImport: function(e) {
            var t, i = n(e.currentTarget), s = n("#new_import_iframe_wrapper"), o = n('<span class="spinner-icon spinner-icon-abs-center"></span>'), r = this.modal.$modal.find(".modal-body");
            e.preventDefault(),
            this.$el.hasClass("new-import-show-old") ? (n("#csv_iframe").remove(),
            s.css("height", "").addClass("new-import__in-modal__loading"),
            this.$el.removeClass("new-import-show-old"),
            r.trigger("modal:centrify")) : (this.$el.addClass("new-import-show-old").find("#new_import_iframe_wrapper").append(t = n('<iframe id="csv_iframe" src="/ajax/' + this.options.entity + '/import/" frameborder="0" style="width: 100%; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;"></iframe>')),
            s.height(250).append(o),
            r.trigger("modal:centrify"),
            t.length > 0 && (i.hide(),
            t.on("load", function() {
                r.show(),
                s.removeClass("new-import__in-modal__loading").add(t).height(t[0].contentWindow.document.body.scrollHeight),
                o.remove(),
                r.trigger("modal:centrify"),
                i.show()
            })))
        },
        filterFileAPIFiles: function(e) {
            e && e.length && this.startLoad(e[0])
        },
        makeFileAPI: function(e) {
            e ? (c.event.on(this.$input_file[0], "change", r.bind(function(e) {
                this.filterFileAPIFiles(c.getFiles(e))
            }, this)),
            c.event.dnd(window, r.bind(function(e, t) {
                this.$el.toggleClass("new-import__in-modal__dnd", e)
            }, this), r.noop),
            c.event.dnd(this.$(".new-import__in-modal")[0], r.bind(function(e) {
                this.$el.toggleClass("new-import__in-modal__dnd new-import__in-modal__dnd-drop", e)
            }, this), r.bind(function(e) {
                e.length && (this.$el.removeClass("new-import__in-modal__dnd new-import__in-modal__dnd-drop"),
                this.filterFileAPIFiles(e))
            }, this))) : (c.event.off(this.$input_file[0], "change"),
            c.event.dnd.off(document.body),
            c.event.dnd.off(this.$(".new-import__in-modal")[0]))
        },
        startLoad: function(e) {
            this.$upload_btn.trigger("button:load:start"),
            c.upload({
                url: "/ajax/import/upload/file/",
                files: {
                    DATA_FILE: e
                },
                complete: r.bind(function(e, t) {
                    var i = {};
                    try {
                        i = n.parseJSON(t.response).response
                    } catch (s) {}
                    AMOCRM.addLang(i.lang),
                    this.$upload_btn.trigger("button:load:stop"),
                    i.params && i.params.errors ? this.modal.showError(r.values(i.params.errors).join("<br>")) : (this.file = i.upload.file,
                    this.delimiter = i.upload.delimiter,
                    this.showSettings())
                }, this)
            })
        },
        showSettings: function() {
            var e, t = !1;
            this.tag_name = "",
            this._existed_tags = [],
            this.modal.disable_overlay_click = !0,
            this.overlay(!0),
            e = {
                URL_DATA_FILE: this.file,
                delimiter: this.delimiter,
                trigger_entity: this.trigger_entity
            },
            b(this.options.entity) && (t = !0,
            e.catalog_id = AMOCRM.data.current_view.catalog.id),
            n.ajax({
                url: "/ajax/import/preview/" + (this.template > -1 ? this.template : ""),
                type: "POST",
                dataType: "json",
                data: e
            }).always(r.bind(function() {
                this.overlay(!1)
            }, this)).done(r.bind(function(e) {
                var i, s;
                e.response && e.response.preview ? (i = r.map(e.response.preview.available_fields, function(e) {
                    return {
                        option: e.name,
                        id: e.value,
                        additional_data: 'data-addable="' + (e.addable ? "1" : "0") + '" data-cf-add-before="' + e.cf_add_before + '"',
                        disabled: "disabled" === e.value
                    }
                }),
                s = {
                    a: {
                        id: -1,
                        option: AMOCRM.lang.new_import_modal_choose_template
                    }
                },
                r.each(e.response.preview.templates, function(e, t) {
                    s["t," + t] = {
                        id: t,
                        option: e.name
                    }
                }),
                this.templates = e.response.preview.templates,
                this.cf_types = e.response.preview.cf_types,
                this.template && this.templates && this.templates[this.template] && (this.tag_name = this.templates[this.template].data.autotag,
                this._existed_tags = this.extractTags()),
                this.settingsDestroy(),
                AMOCRM.router.registerPreventConfig({
                    message: AMOCRM.lang.new_import_modal_page_change_confirm,
                    accept_text: AMOCRM.lang.button_yes,
                    decline_text: AMOCRM.lang.button_no,
                    gray_button: !0,
                    accept: r.bind(function(e) {
                        e()
                    }, this),
                    decline: r.noop
                }),
                AMOCRM.router.preventPageChange(!0),
                this.$el.addClass("modal-list-import-settings"),
                this.$(".modal-body").html(o({
                    ref: "/tmpl/common/modal/import_beta/settings.twig"
                }).render(n.extend({
                    lang: AMOCRM.lang,
                    first_line_is_caption: !0,
                    fields: i,
                    delimiter: this.delimiter,
                    template: this.template,
                    tags: this.extractTags(),
                    tmpls: s,
                    hide_tags: t
                }, e.response.preview))).trigger("modal:centrify"),
                this.settingsInit()) : this.modal.showError(r.values(e.response.params.errors).join("<br>"))
            }, this))
        },
        settingsDestroy: function() {
            this.hs && this.hs.destroy(),
            this.makeForm(!1),
            AMOCRM.router.preventPageChange(!1),
            AMOCRM.router.removePreventConfig()
        },
        settingsInit: function() {
            this.$scroller = n("#new_import_settings_scroller"),
            this.hs = new d({
                wrapper: this.$scroller.parent(),
                scroller: this.$scroller
            }),
            this.makeForm(!0),
            this.checkMultiFieldsOnInit()
        },
        getTags: function() {
            return r.isUndefined(this._existed_tags) ? [] : this._existed_tags
        },
        extractTags: function() {
            var e = [];
            return this.tag_name && (e = r.chain(this.tag_name.split(",")).filter(function(e) {
                return e.trim().length > 0
            }).map(function(e) {
                return {
                    name: e
                }
            }).value()),
            e
        },
        initTags: function(e) {
            var t = this
              , i = this.modal.$modal_body.closest(".modal-scroller")
              , s = n(e.currentTarget);
            e.stopPropagation(),
            new h({
                $input_container: s,
                $container: i,
                entity: "import",
                replace: !0,
                tags: this.getTags(),
                suggest_class_name: "fast-tags-suggest-import",
                items_template: "/tmpl/filter/tags/items.twig",
                onInit: function() {
                    this.setPositions()
                },
                onSetPositions: function() {
                    var e = this.$el.offset();
                    this.$list.addClass("fast-tags-suggest_amoforms").css({
                        top: e.top + i.scrollTop() + this.el.offsetHeight + 5,
                        left: e.left - 65
                    })
                },
                onSaveSuccess: function(e) {
                    t._existed_tags = e,
                    t.tag_name = r.map(e, function(e) {
                        return e.title || e.name
                    }).join(",")
                }
            })
        },
        checkMultiFieldsOnInit: function() {
            this.$(".new-import__settings__field .control--select--input").each(r.bind(function(e, t) {
                this.fieldSelectChange({
                    currentTarget: t
                })
            }, this))
        },
        makeForm: function(e) {
            this.template < 0 || (e ? (this.settings_form = new u.View({
                el: n("#new_import_settings_form")
            }),
            this.settings_form.model.on("has_changes", r.bind(function() {
                this.checkTemplateSave(!0)
            }, this)).on("has_reverted", r.bind(function() {
                this.checkTemplateSave(!1)
            }, this))) : this.settings_form && this.settings_form.destroy())
        },
        checkTemplateSave: function(e) {
            var t = e ? "slideDown" : "slideUp";
            n("#import_keep_changes")[t](150)
        },
        requestProcessing: function(e, t, i) {
            r.isArray(e) || (e = [e]),
            n.ajax({
                url: "/ajax/import/stat/",
                dataType: "json",
                type: "GET",
                data: n.param({
                    jobs_ids: e
                })
            }).always(r.bind(function() {
                r.isFunction(i) && i.call(this)
            }, this)).done(r.bind(function(e) {
                r.isFunction(t) && t.call(this, e)
            }, this))
        },
        renderProcessing: function(e) {
            this.$el.addClass("modal-list-import-processing"),
            this.modal.disable_overlay_click = !1,
            this.$(".modal-body").html(o({
                ref: "/tmpl/common/modal/import_beta/processing.twig"
            }).render(n.extend({
                lang: AMOCRM.lang
            }, e.response.stat[0]))).trigger("modal:centrify"),
            3 == e.response.stat[0].status && (this.need_reload = !0),
            (3 == e.response.stat[0].status || e.response.stat[0].messages && e.response.stat[0].messages.errors.length) && clearInterval(this.processing_interval)
        },
        timeoutProcessing: function(e, t) {
            this.processing_interval && clearInterval(this.processing_interval),
            this.processing_interval = setInterval(r.bind(function() {
                this.requestProcessing(e, r.bind(function(e) {
                    e.response && e.response.stat ? t.call(this, e) : clearInterval(this.processing_interval)
                }, this))
            }, this), this.timeout)
        },
        getListJobs: function() {
            var e, t, i = [];
            return this.imports_modal.$modal.find(".status_cell").each(r.bind(function(s, o) {
                e = n(o),
                t = parseInt(e.attr("data-status")),
                r.indexOf([0, 1], t) > -1 && i.push(e.attr("data-job-id"))
            }, this)),
            i
        },
        checkListForRequests: function() {
            var e = this.getListJobs();
            e.length && this.timeoutProcessing(e, this.updateList)
        },
        updateList: function(e) {
            e.response && e.response.stat && r.each(e.response.stat, function(e) {
                this.imports_modal.$modal.find('.status_cell[data-job-id="' + e.job_id + '"]').attr("data-status", e.status).html(o({
                    ref: "/tmpl/common/modal/import_beta/list_status_cell.twig"
                }).render(n.extend(e, {
                    lang: AMOCRM.lang
                })))
            }, this),
            this.getListJobs().length || clearInterval(this.processing_interval)
        },
        nameIssetError: function(e, t) {
            var i = []
              , s = !1
              , n = t;
            return t = t || this.options.entity,
            i = g[t],
            "contacts" !== t || n || (i = i.concat(g.companies)),
            b(this.options.entity) && (i = r.map(i, function(e) {
                return e + AMOCRM.data.current_view.catalog.id
            })),
            s = r.find(i, function(t) {
                return e[t]
            }),
            s ? !1 : AMOCRM.lang["import_name_not_specified_" + this.options.entity]
        },
        fieldsFillError: function(e) {
            var t, i, s = [];
            return r.each(r.invert(AMOCRM.element_types), function(n, o) {
                i = new RegExp("[a-z0-9]{2,}_" + o + "(_[d]{1,2})?$"),
                t = r.find(e, function(e, t) {
                    return 0 === t.indexOf("multi_") && (t = t.split("_"),
                    t.splice(-1),
                    t = t.join("_")),
                    i.test((t || "").toString())
                }),
                t && this.nameIssetError(e, n) && s.push(AMOCRM.lang["import_filled_but_no_name_" + n])
            }, this),
            s.length ? s.join("<br><br>") : !1
        },
        emptyFileError: function() {
            var e = n("#new_import_settings_scroller").find(".import_list__table_std-row").length;
            return 1 === e && n("#first_names_input").is(":checked") ? AMOCRM.lang.import_empty_file_error : !1
        }
    }),
    {
        events: {
            "click .js-list-import": "onImportClick"
        },
        onImportClick: function(e) {
            e && e.preventDefault(),
            new t({
                id: "import",
                entity: AMOCRM.getBaseEntity()
            })
        },
        checkImportHash: function() {
            "#show_import" === window.location.hash && (window.location.hash = "",
            this.onImportClick())
        }
    }
}),
define("lib/components/lists/actions/export", ["require", "jquery", "twig", "lib/components/base/modal", "lib/common/urlparams", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("lib/components/base/modal"), o = e("lib/common/urlparams"), r = e("lib/common/fn");
    return t = function(e) {
        var t = this;
        e = i.extend({}, e),
        r.has_keys(AMOCRM, ["data", "current_list", "data", "fields"]) ? t.count_fields = _.countBy(AMOCRM.data.current_list.data.fields, function(e) {
            return e.code && 0 === e.code.toLowerCase().indexOf("cf") ? "cf" : "other"
        }) : t.count_fields = 0,
        t.getMaxPage().then(_.bind(t.exportModal, t))
    }
    ,
    t.prototype.exportModal = function(e) {
        var t = AMOCRM.getBaseEntity()
          , i = this.count_fields;
        new n({
            class_name: "modal-list modal-list-export",
            init: s._preload(["/tmpl/common/modal/export/" + t + ".twig"], function(n) {
                var r, a = AMOCRM.data.current_view.page, l = "", c = !1;
                switch (this.modal_body = n,
                t) {
                case "leads":
                    c = parseInt(o.getParam("pipeline")),
                    (0 >= c || o.getQueryParam("filter[pipe][" + c + "][]")) && (c = !1);
                    break;
                case "contacts":
                    "contacts" == AMOCRM.data.element_type ? l = "&element_type=2" : "companies" == AMOCRM.data.element_type && (l = "&element_type=3")
                }
                r = o.getQueryString() + l,
                c && (r += "&filter[pipe][" + c + "]=1&pipeline_id=" + c),
                n.trigger("modal:loaded").html(s({
                    ref: "/tmpl/common/modal/export/" + t + ".twig"
                }).render({
                    query_string: "?" + r,
                    entity: t,
                    rss_link: AMOCRM.lang.rss_link,
                    rand: Math.random().toString(36).substr(2, 4),
                    type: AMOCRM.data.element_type,
                    host: window.location.host,
                    current_page: a > e ? e : a,
                    max_page: e,
                    only_list: i.cf > 60 ? "&only_list=Y" : ""
                })).trigger("modal:centrify")
            }),
            destroy: function() {
                this.modal_body && this.modal_body.off()
            }
        })
    }
    ,
    t.prototype.getEntityType = function(e) {
        var t;
        switch (e) {
        case "leads":
            t = AMOCRM.element_types.leads;
            break;
        case "contacts":
            switch (AMOCRM.data.element_type) {
            case "contacts":
                t = AMOCRM.element_types.contacts;
                break;
            case "companies":
                t = AMOCRM.element_types.companies;
                break;
            case "":
                t = AMOCRM.element_types.contacts_and_companies
            }
        }
        return t
    }
    ,
    t.prototype.getMaxPage = function() {
        var e, s, n = AMOCRM.getBaseEntity(), r = t.prototype.getEntityType(n), a = "", l = o.getParam("pipeline");
        return new Promise(function(t) {
            o.getQueryParam("ELEMENT_COUNT").length >= 1 ? (l && (a = "&pipeline_id=" + l),
            e = o.QStoJSON(o.getQueryString() + a, !0),
            i.ajax({
                url: "/ajax/v2/multiple/" + n + "/count/",
                type: "POST",
                data: {
                    entity: {
                        type: r
                    },
                    filter: e
                },
                dataType: "json"
            }).done(function(e) {
                s = Math.ceil(e.response.count / 500),
                t(s)
            }).fail(function() {
                s = Math.ceil(parseInt(o.getQueryParam("ELEMENT_COUNT")) * AMOCRM.data.current_view.max_page / 500),
                t(s)
            })) : (s = Math.ceil(50 * parseInt(AMOCRM.data.current_view.max_page || 1, 10) / 500),
            t(s))
        }
        )
    }
    ,
    {
        events: {
            "click .js-list-export": "onExportClick"
        },
        onExportClick: function(e) {
            e.preventDefault(),
            new t({
                id: "export"
            })
        }
    }
}),
define("lib/components/lists/mixins/navigation", ["require", "jquery", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("lib/common/urlparams");
    return {
        events: {
            "click .js-list-caption-link": "onTopNavigationButtonClick"
        },
        onTopNavigationButtonClick: function(e) {
            var s = i.getQueryString();
            return t(e.currentTarget).addClass("list-top-nav__icon-button_active").siblings(".js-list-caption-link").removeClass("list-top-nav__icon-button_active"),
            AMOCRM.router.navigate(e.currentTarget.getAttribute("href") + (s ? "?" + s : ""), {
                trigger: !0,
                no_loading: !0
            }),
            !1
        }
    }
}),
define("lib/pages/leads/list", ["require", "underscore", "cocktail", "lib/pages/list", "lib/components/lists/base/list", "lib/components/lists/edit/editable_list", "lib/components/unsorted/api", "lib/interface/leads/mixins/leads_more", "lib/components/lists/actions/import", "lib/components/lists/actions/export", "lib/components/lists/mixins/navigation"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("cocktail"), n = e("lib/pages/list"), o = e("lib/components/lists/base/list"), r = e("lib/components/lists/edit/editable_list"), a = e("lib/components/unsorted/api"), l = e("lib/interface/leads/mixins/leads_more"), c = e("lib/components/lists/actions/import"), d = e("lib/components/lists/actions/export"), u = e("lib/components/lists/mixins/navigation");
    return t = n.extend({
        events: i.extend({}, n.prototype.events || {}),
        _selectors: function() {
            return {
                list__table__holder: ".list__table__holder",
                list__tabs: ".list__tabs",
                unsorted_counter: "#list__tab-counter_unsorted"
            }
        },
        construct: function(e) {
            this.options = e || {},
            this.response = e.response || AMOCRM.constant("leads_list_template_params") || {},
            e.list_handler_options = {
                filter_options: {
                    pipeline_id: this.pipeline_id
                }
            },
            i.isEmpty(AMOCRM.constant("unsorted")) && AMOCRM.constant("unsorted", this.response.unsorted),
            this._ListHandler = this.response.is_trash ? o : r,
            n.prototype.construct.apply(this, arguments),
            AMOCRM.data.current_view.pipeline_id = this.pipeline_id,
            this.checkImportHash(),
            this.renderUnsortedCount(this.response.unsorted)
        },
        destruct: function() {
            this._$window.off(this.ns),
            n.prototype.destruct.apply(this, arguments)
        },
        renderUnsortedCount: function(e) {
            !e.denied && e.show && a.getTotal().done(i.bind(function(e) {
                this._findElem("unsorted_counter").text(e || 0).removeClass("h-hidden")
            }, this))
        }
    }),
    s.mixin(t, l, u, c, d),
    t
}),
define("lib/pages/leads/pipeline_in_list", ["require", "lib/common/urlparams", "underscore", "lib/pages/leads/list"], function(e) {
    "use strict";
    var t = e("lib/common/urlparams")
      , i = e("underscore")
      , s = e("lib/pages/leads/list");
    return s.extend({
        pipeline_id: 0,
        construct: function(e) {
            e = e || {},
            this.pipeline_id = i.first(e.route_args),
            s.prototype.construct.apply(this, arguments)
        },
        _getEndpoint: function(e) {
            var i = s.prototype._getEndpoint.apply(this, arguments);
            return e = t.getParam("pipeline"),
            e && (i += "pipeline/" + e + "/"),
            i
        },
        _getEndpointData: function(e) {
            var t = e && (i.isArguments(e) || i.isArray(e)) ? [i.last(e)] : [];
            return s.prototype._getEndpointData.call(this, t)
        }
    })
}),
define("lib/interface/unsorted/list/model", ["require", "underscore", "lib/common/fn", "lib/components/lists/base/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/components/lists/base/view");
    return s.Model.extend({
        idAttribute: "uid",
        initialize: function() {
            this.set("id", this.get("uid"))
        },
        accept: function() {
            this.proceed("accept")
        },
        decline: function() {
            this.proceed("decline")
        },
        link: function(e) {
            var i = {}
              , s = this.get("uid");
            e = e || [],
            t.each(e, function(e) {
                i[s] = e
            }),
            this.proceed("link", {
                data: {
                    links: i
                }
            })
        },
        proceed: function(e, i) {
            var s = t.clone(this.collection)
              , n = this.get("id");
            i = i || {},
            s.reset(this.collection.filter(function(e) {
                return e.get("id") === n
            }), {
                silent: !0
            }),
            t.isFunction(s[e]) && s[e](i)
        },
        getUserName: function(e) {
            var t = AMOCRM.constant("account");
            return this.users || (this.users = {},
            t && t.users && (this.users = t.users)),
            this.users[e]
        },
        parse: function(e) {
            var s, n, o, r, a, l = "source";
            switch (e = t.extend({
                uid: "",
                category: "",
                date_create: "",
                source_data: {}
            }, e),
            e.category) {
            case "sip":
                e.source_data = t.extend({
                    from: "",
                    duration: "",
                    to: "",
                    link: "",
                    service: ""
                }, e.source_data),
                s = e.source_data.from,
                l = this.getUserName(e.source_data.to) || e.source_data.to,
                n = e.source_data.duration,
                o = AMOCRM.lang.inc + ":",
                r = AMOCRM.lang.to + ":",
                n = {
                    duration: e.source_data.duration,
                    link: e.source_data.link,
                    src: e.source_data.service
                };
                break;
            case "mail":
                e.source_data = t.extend({
                    from: {},
                    subject: "",
                    thread_id: 0,
                    content: "",
                    date: ""
                }, e.source_data),
                e.source_data.from = t.extend({
                    email: "",
                    name: ""
                }, e.source_data.from),
                s = e.source_data.from.email,
                l = e.source_data.subject;
                break;
            case "forms":
                e.source_data = t.extend({
                    from: "",
                    data: [],
                    origin: {}
                }, e.source_data),
                l = (a = i.make_lead_name_from_wordpress_form(e.source_data)) ? a : e.source_data.from,
                s = e.source_data.form_name || AMOCRM.lang.feedback_form,
                n = e.source_data,
                n.from = l;
                break;
            case "chats":
                var c = e.source_data.site ? ": " + e.source_data.site : "";
                e.source_data = t.extend({
                    from: "",
                    data: []
                }, e.source_data),
                s = e.source_data.origin && "amojo" === e.source_data.origin.provider ? AMOCRM.lang.unsorted_chat_title + " " + c : AMOCRM.lang.unsorted_chat_title + " " + e.source_data.service,
                l = AMOCRM.lang.unsorted_request_from_website + c + " " + AMOCRM.lang.from + " " + e.source_data.from,
                n = e.source_data
            }
            return {
                uid: e.uid,
                entity: "unsorted",
                category: e.category,
                from: {
                    prefix: o,
                    text: s
                },
                source: {
                    text_pref: {
                        prefix: r,
                        text: l
                    },
                    detail: n
                },
                date_create: e.date_create,
                accept: {
                    action: "accept",
                    icon: "checkmark-green"
                },
                decline: {
                    action: "decline",
                    icon: "clear"
                },
                original_data: e
            }
        }
    })
}),
define("lib/interface/unsorted/list/collection", ["require", "underscore", "backbone", "lib/common/fn", "lib/interface/unsorted/list/model", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("backbone"), n = e("lib/common/fn"), o = e("lib/interface/unsorted/list/model"), r = e("lib/core/users");
    return t = s.Collection.extend({
        model: o,
        user: {},
        sync: function(e, t, n) {
            return "read" === e ? void this.readUnsorted(t, n) : (n = i.extend({
                headers: {
                    Accept: "application/json"
                },
                action: ""
            }, n),
            n.action && (n.url = i.result(this, "url") + n.action + "/"),
            n.data && (n.data = {
                request: {
                    unsorted: n.data
                }
            }),
            "object" == typeof n.data && (n.data = $.param(n.data)),
            n.url += "?" + this.getCredentials(),
            void s.Collection.prototype.sync.call(this, e, t, n))
        },
        getCredentials: function() {
            var e = ["login=" + this.user.login, "api_key=" + this.user.api_key];
            return e.join("&")
        },
        accept: function() {
            this.proceed("accept")
        },
        decline: function() {
            this.proceed("decline")
        },
        link: function(e) {
            this.proceed("link", e)
        },
        waitForJobComplete: function(e) {
            var t = "job_status";
            this.on(t + ":failed", i.bind(function() {
                var s = setTimeout(i.bind(function() {
                    clearTimeout(s),
                    this.proceed(t, e)
                }, this), 300)
            }, this)),
            this.proceed(t, e)
        },
        proceed: function(e, t) {
            var s = {
                user_id: this.user.id,
                lang: this.lang_id,
                status_id: this.accept_status || ""
            };
            t = t || {},
            s[e] = this.pluck("id"),
            i.extend(s, t.data || {}),
            s[e] && s[e][0] && (this.trigger(e + ":start"),
            this.sync("create", this, {
                action: e,
                data: s,
                success: i.bind(function(t) {
                    return t.response && (t = t.response),
                    t.unsorted && (t = t.unsorted),
                    this.trigger(e + ":finished", t),
                    t[e] && "success" === t[e].status ? void this.trigger(e + ":success", [e, t[e].data, s[e]]) : void this.trigger(e + ":failed", [t])
                }, this),
                error: i.bind(function(t) {
                    this.trigger(e + ":failed", [t])
                }, this)
            }))
        },
        readUnsorted: function(e, t) {
            $.ajax(i.extend({
                type: "GET",
                url: e.url + "list/",
                data: t.data,
                dataType: "json"
            }, t.sync_params)).done(i.bind(function(i) {
                i && i.response && e.trigger("list:fetched", [this.updateResponseData(i.response), t.load])
            }, this)).fail(function(t, i, s) {
                e.trigger("list:fetch:failed", t.status)
            })
        },
        updateResponseData: function(e) {
            var t, s = r.get();
            return i.each(e.unsorted.list, function(e) {
                e.source_data && "chats" === e.category && (t = i.findWhere(s, {
                    login: e.source_data.to
                }),
                e.source_data.origin && "amojo" === e.source_data.origin.provider ? e.manager_name = "" : e.manager_name = t ? t.title : e.source_data.to,
                e.user_name = e.source_data.name || e.source_data.from,
                e.source_data.data = n.mergeChatsMessages(e.source_data.data))
            }),
            e
        }
    })
}),
define("lib/interface/unsorted/list/view", ["require", "underscore", "cocktail", "lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up", "lib/components/lists/base/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("cocktail")
      , s = e("lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up")
      , n = e("lib/components/lists/base/view");
    return n.View.extend({
        _current_entity: "unsorted",
        initialize: function() {
            n.View.prototype.initialize.call(this, arguments),
            this.listenTo(this.model, "accepted:success", t.bind(this.destroy, this)),
            this.listenTo(this.model, "declined:success", t.bind(this.destroy, this)),
            i.mixin(this, s)
        },
        events: function() {
            return t.extend({}, t.result(n.View.prototype, "events"), {
                "click .js-cell-action-accept": "accept",
                "click .js-cell-action-decline": "decline",
                "click .js-cell-action-link": "_linkClick"
            })
        },
        _linkClick: function() {
            this.linkClick(this.model)
        },
        accept: function() {
            this.model.accept()
        },
        decline: function() {
            this.model.decline()
        }
    })
}),
define("lib/components/lists/unsorted", ["require", "jquery", "underscore", "twig", "cocktail", "lib/components/lists/base/list", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/mail/api", "lib/components/base/player", "lib/common/urlparams", "lib/common/fn", "lib/interface/unsorted/mixins/integrations", "lib/interface/unsorted/mixins/settings", "lib/components/unsorted/api", "lib/interface/unsorted/list/collection", "lib/interface/unsorted/list/view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/components/lists/base/list"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = e("lib/components/mail/api"), d = e("lib/components/base/player"), u = e("lib/common/urlparams"), h = e("lib/common/fn"), _ = {
        Integrations: e("lib/interface/unsorted/mixins/integrations"),
        UnsortedSettings: e("lib/interface/unsorted/mixins/settings")
    }, p = e("lib/components/unsorted/api"), m = e("lib/interface/unsorted/list/collection"), f = e("lib/interface/unsorted/list/view");
    return t = r.extend({
        overlay_class_name: "unsorted_list__overlay",
        unsorted_settings: {},
        fields: [{
            code: "from",
            default_code: "from",
            format: !1,
            shown: !0,
            sort: !1,
            sortable: !1,
            sorted: !1,
            template: "text_pref",
            template_params: [],
            title: h.i18n("Unsorted"),
            unsorted_title: !0
        }, {
            code: "source",
            default_code: "source",
            format: !1,
            shown: !0,
            sort: !1,
            sortable: !1,
            sorted: !1,
            template: "unsorted_forms",
            template_params: [],
            title: ""
        }, {
            code: "date_create",
            default_code: "date_create",
            format: !1,
            shown: !0,
            sort: !1,
            sortable: !1,
            sorted: !1,
            template: "relative_date_with_actions",
            template_params: [],
            title: ""
        }],
        _selectors: function() {
            return {
                list_holder: "#list_holder",
                unsorted_filter: "#unsorted-list__filter",
                unsorted_filter_item: "#unsorted-list__filter .unsorted-list__filter-item",
                unsorted_counter: "#list__tab-counter_unsorted",
                plug_rows: ".list-row_plug",
                form_detail: "#form-detail__inner",
                wrapper: "#unsorted_list_elements_holder",
                player_wrapper: ".js-audio_wrapper"
            }
        },
        _template_detail: {
            forms: "/tmpl/list/cells/form_detail.twig",
            mail: "/tmpl/list/cells/email_detail.twig",
            chats: "/tmpl/list/cells/chat_detail.twig"
        },
        events: function() {
            return s.extend({
                "click .unsorted-list__filter-item:not(.unsorted-list__filter-item_active):not(.unsorted-list__filter-item_empty)": "onUnsortedFilterClick",
                "click .js-show-detail": "showDetail"
            }, r.prototype.events)
        },
        ns: ".list:unsorted",
        initialize: function(e) {
            e = e || {},
            e.list_entity = "unsorted",
            this.options = e,
            r.prototype.initialize.call(this, e),
            this.categories = p.getCategories(),
            this.list_items.lang_id = AMOCRM.lang_id,
            this.list_items.user = AMOCRM.constant("user"),
            this.listenTo(this.list_items, "decline:start", this.showOverlay),
            this.listenTo(this.list_items, "accept:start", this.showOverlay),
            this.listenTo(this.list_items, "accept:success", this.successHandler),
            this.listenTo(this.list_items, "link:start", this.showOverlay),
            this.listenTo(this.list_items, "link:success", this.successHandler),
            this.listenTo(this.list_items, "link:failed", this.failHandler),
            this.listenTo(this.list_items, "decline:success", this.successHandler),
            this.listenTo(this.list_items, "accept:failed", this.failHandler),
            this.listenTo(this.list_items, "decline:failed", this.failHandler),
            this.listenTo(this.list_items, "list:fetch:failed", this.failHandler),
            this.settings = s.extend({
                items_per_page: 50,
                show_pagination_from: 20,
                hide_keys: !0,
                integration: {},
                show: !0,
                fields: this.fields
            }, e.settings),
            this.unsorted_settings = this.getUnsortedSettings(e.settings || {}),
            this.initIntegrations(e),
            this.bindDOMEvents(),
            this.setPlayer(!1),
            this.summary = {},
            this.$tabs = i("#list__tabs"),
            this.$footer = i(".list__footer"),
            this.detail_popup = {
                $element: i('<div class="unsorted__form-detail unsorted__form-detail--hidden" id="form-detail__inner"></div>').appendTo("#list_holder")
            }
        },
        destroy: function() {
            this.setPlayer(!1),
            this._$document.off(this.ns),
            r.prototype.destroy.call(this),
            this.detail_popup && this.detail_popup.$element.off()
        },
        bindDOMEvents: function() {
            this._$document.on("list:settings:shown" + this.ns, s.bind(this.hide, this)).on("list:settings:destroy" + this.ns, s.bind(function() {
                this.toggle(AMOCRM.constant("unsorted").show)
            }, this)).on("controls:hide:private" + this.ns, s.bind(this.hideDetail, this))
        },
        successHandler: function(e) {
            var t = e[1]
              , i = e[2]
              , n = s.bind(this.reloadList, this);
            this.showOverlay(),
            "undefined" != typeof t[i[0]] ? (this.hideOverlay(),
            (new a).showSuccess(null, n)) : (this.listenToOnce(this.list_items, "job_status:success", function() {
                (new a).showSuccess(null, n)
            }),
            this.list_items.waitForJobComplete(t))
        },
        failHandler: function(e) {
            var t = s.isArray(e) ? e[0].status : e
              , i = {
                "default": "unsorted_error_unavailable",
                400: "unsorted_error_no_rights",
                403: "unsorted_error_blocked"
            }
              , e = e && s.indexOf(s.keys(i), e.toString()) >= 0 ? e : "default"
              , n = i[e]
              , o = {
                text: h.i18n(n),
                button: AMOCRM.lang.unsorted_notification_error_button
            }
              , r = window.location.host
              , a = r.split(".")
              , c = a[a.length - 1];
            403 === +e && (o.link = "//developer.amocrm." + c),
            404 === +t ? new l({
                class_name: "modal-unsorted-fail",
                text: AMOCRM.lang.unsorted_accept_request_error,
                accept_text: "ќ "
            }) : (this.hideOverlay(),
            AMOCRM.notifications.show_message_error(o)),
            this.reloadList()
        },
        keyEventsOn: function() {
            r.prototype.keyEventsOn.call(this, !1)
        },
        show: function() {
            return this.toggle(!0)
        },
        hide: function() {
            return this.toggle(!1)
        },
        hideDetail: function(e, t, i) {
            i && i.length && this.detail_popup.uid && (i.closest(".unsorted__form-detail").length || i.closest(".js-show-detail").length || (this.toggleDetail(!1),
            this._$window.off(this.ns)))
        },
        showDetail: function(e) {
            var t = i(e.target).closest(".js-show-detail")
              , n = t.closest(".js-list-row")
              , o = n.data("id");
            if (o) {
                if (this.detail_popup.uid === o)
                    return void this.toggleDetail(!this.detail_popup.showed);
                this.toggleDetail(!1),
                this.detail_popup.uid = o,
                this.detail_popup.$target = t,
                t.parents(".content-table__item__inner").append('<div class="unsorted-detail-email__loader"><span class="spinner-icon"></span></div>'),
                t.css("visibility", "hidden"),
                this.renderDetail(this.list_items.get(o), t).done(s.bind(function() {
                    this._setPosition(t),
                    this.toggleDetail(!0),
                    this._checkNeedPlayer()
                }, this)),
                this.detail_popup.$element.on("click mousedown", function(e) {
                    e.stopPropagation()
                })
            }
        },
        _setPosition: function(e) {
            this._positionDetail(e),
            this._positionPointer(e),
            this._$window.on("resize" + this.ns, s.bind(s.debounce(function() {
                this._positionDetail(e),
                this._positionPointer(e)
            }, 50), this))
        },
        _checkNeedPlayer: function() {
            var e = this.detail_popup.$element.find(".js-audio_wrapper");
            return e.length ? this.setPlayer(!0) : this
        },
        setPlayer: function(e) {
            return this.detail_popup ? (!e && this.detail_popup.player && (this.detail_popup.player.destroy(),
            this.detail_popup.player = null),
            e && !this.detail_popup.player && (this.detail_popup.player = new d({
                ns: s.uniqueId(".player"),
                $container: this.detail_popup.$element,
                append_to: this.detail_popup.$element,
                check_if_chats: !0
            })),
            this) : this
        },
        toggleDetail: function(e) {
            return this.detail_popup.showed = e,
            this.detail_popup.$element.toggleClass("unsorted__form-detail--hidden", !e).toggleClass("unsorted__form-detail--visible", e),
            this.detail_popup.$target && this.detail_popup.$target.toggleClass("inactive", e),
            this
        },
        _positionPointer: function(e) {
            var t = this.detail_popup.$element
              , i = t.find(".unsorted__external-pointer")
              , s = e.offset()
              , n = i.offset();
            return n.top = s.top - i.outerHeight(!0) / 2 + e.outerHeight(!0) / 4,
            i.offset(n),
            this
        },
        _positionDetail: function(e) {
            var t, i = this.detail_popup.$element, s = i.find(".unsorted__external-pointer"), n = i[0].getBoundingClientRect(), o = e.offset(), r = {
                top: o.top - n.height / 2,
                left: o.left - n.width - s.outerWidth(!0)
            };
            return r.top < 80 && (r.top = 100),
            i.offset(r),
            document.body.scrollHeight === document.body.scrollTop + window.innerHeight && (n = i[0].getBoundingClientRect(),
            t = window.innerHeight - (this.$footer.outerHeight() || 65) - n.bottom,
            0 > t && (r.top = r.top + t,
            i.offset(r))),
            this
        },
        renderDetail: function(e, t) {
            var n = i.Deferred()
              , o = e.attributes.category
              , r = {}
              , a = '<h2 class="modal-body__caption head_2"><span class="file_error">%s</span></h2>'
              , l = s.bind(function() {
                this.renderDetailHelper(e).then(function() {
                    n.resolve(),
                    i(".unsorted-detail-email__loader").remove(),
                    t.css({
                        visibility: "visible"
                    })
                })
            }, this);
            return "mail" === o ? (r = e.get("original_data").source_data,
            c.getMessage(r.message_id).done(s.bind(function(t) {
                r.content = t.content,
                e.set("source_data", r),
                l()
            }, this)).fail(s.bind(function(t) {
                404 === +t.status ? r.content = a.replace("%s", AMOCRM.lang.mail_letter_deleted) : r.content = a.replace("%s", AMOCRM.lang.modal_error_caption),
                e.set("source_data", r),
                l()
            }, this))) : l(),
            n
        },
        renderDetailHelper: function(e) {
            var t = s.extend({
                date_create: e.get("date_create")
            }, e.get("source"), e.get("original_data"))
              , i = e.attributes.category;
            return n._preload([this._template_detail[i]], s.bind(function() {
                this.detail_popup.$element.html(n({
                    ref: this._template_detail[i]
                }).render(t)),
                "mail" === i && this.detail_popup.$element.find(".email-detail__body").height() >= 380 && this.detail_popup.$element.find(".email-detail__body").addClass("need_shadow")
            }, this))()
        },
        showOverlay: function() {
            this._$document.trigger("page:overlay:show")
        },
        hideOverlay: function() {
            this._$document.trigger("page:overlay:hide")
        },
        initListHeader: function() {
            r.prototype.initListHeader.call(this, {
                elements: {
                    $column_settings: !0
                },
                entity: this.entity
            })
        },
        onUnsortedFilterClick: function(e) {
            var t = i(e.currentTarget)
              , n = t.data("category");
            this._findElem("unsorted_filter_item").removeClass("unsorted-list__filter-item_active"),
            t.addClass("unsorted-list__filter-item_active"),
            s.each(this.categories, function(e) {
                e.active = !("total" !== n),
                e.name === n && (e.active = !0)
            }, this),
            this.reloadList()
        },
        reloadList: function() {
            AMOCRM.router.navigate(u.setParam({
                page: ""
            }), {
                replace: !0,
                trigger: !1
            }),
            this.loadPage({
                page: 1
            })
        },
        reset: function() {
            r.prototype.reset.call(this, arguments),
            this.$(".unsorted_list__no-items").show()
        },
        loadPage: function(e) {
            return this.unsorted_settings.denied || !this.unsorted_settings.show ? (this.reset(),
            void this.render([{
                views: []
            }])) : (this.list_header && this.list_header.toggleAll(!1),
            this.showOverlay(),
            this.page = e.page,
            void this.list_items.fetch({
                data: p.getListQs({
                    page: e.page,
                    categories: this.categories
                }),
                load: s.bind(this.hideOverlay, this),
                sync_params: {
                    headers: {
                        Accept: "application/json"
                    },
                    destroy_view: !1,
                    page_xhr: !0
                }
            }))
        },
        createCollection: function() {
            var e = this.options.pipeline_id
              , t = this.options.pipelines_list;
            this.list_items = new m,
            e && t && t[e] && (this.list_items.accept_status = s.first(s.chain(t[e].statuses).filter(function(e) {
                return 142 !== e.id && 143 !== e.id
            }).sortBy(function(e) {
                return e.sort
            }).value()).id)
        },
        setListGlobal: s.noop,
        checkWidgets: s.noop,
        initFilter: s.noop,
        checkCheckboxes: s.noop,
        fetchedItems: function(e) {
            var t, i = [], n = {
                parse: !0
            };
            return e = s.extend({
                list: {},
                summary: {
                    sip: 0,
                    mail: 0,
                    forms: 0,
                    chats: 0
                }
            }, e),
            this.reset(),
            s.each(e.list, function(e) {
                t = new f({
                    model: this.itemsPush(e, n)
                }),
                "chats" === t.model.attributes.category && (t.model.attributes.url = "/unsorted/detail/" + t.model.attributes.uid),
                i.push(t)
            }, this),
            {
                views: i,
                params: {
                    fields: this.settings.fields
                }
            }
        },
        fetched: function(e) {
            var t = e[0].unsorted
              , n = this.fetchedItems(t)
              , o = s.reduce(s.filter(t.summary, function(e, t) {
                return this.categories[t].active
            }, this), function(e, t) {
                return e + t
            })
              , r = s.reduce(t.summary, function(e, t) {
                return e + t
            });
            i("#list__tab-counter_unsorted").text(r || 0).removeClass("h-hidden"),
            r || (i(".list__no-items").show(),
            i("#list_all_checker").trigger("controls:disable")),
            t.summary && (this.summary = t.summary,
            this.summary.total = o),
            this.actualizeIntegrations(t.summary),
            this.list_items.trigger("list:render", [{
                views: n.views,
                params: n.params,
                summary: t.summary,
                pagination: s.bind(function() {
                    return this.max_page = Math.ceil(o / this.settings.items_per_page),
                    {
                        page: this.page,
                        max_page: this.max_page
                    }
                }, this),
                load: s.bind(function() {
                    this.summary = t.summary,
                    e[1] && s.isFunction(e[1]) && e[1].call(this)
                }, this)
            }])
        },
        render: function(e) {
            this._findElem("plug_rows").remove(),
            r.prototype.render.call(this, e)
        },
        setListItemsUrl: function(e) {
            this.list_items.url = e.replace("list/", "")
        },
        renderSummary: function(e) {
            s.each(this.categories, function(t) {
                t.count = e[t.name]
            }),
            this._findElem("unsorted_filter").html(n({
                ref: "/tmpl/list/header_cells/unsorted_filter.twig"
            }).render({
                categories: this.categories,
                total: s.reduce(e, function(e, t) {
                    return e + t
                }, 0),
                show_all: s.every(this.categories, function(e) {
                    return e.active
                })
            }))
        }
    }),
    o.mixin(t, _.UnsortedSettings, _.Integrations),
    t
}),
define("lib/pages/unsorted/list", ["require", "jquery", "underscore", "cocktail", "lib/core/view", "lib/pages/list", "lib/components/lists/unsorted", "lib/components/unsorted/api", "lib/components/leads/api", "lib/common/user_rights", "lib/components/lists/actions/import", "lib/components/lists/actions/export"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("cocktail"), o = e("lib/core/view"), r = e("lib/pages/list"), a = e("lib/components/lists/unsorted"), l = e("lib/components/unsorted/api"), c = e("lib/components/leads/api"), d = e("lib/common/user_rights"), u = e("lib/components/lists/actions/import"), h = e("lib/components/lists/actions/export");
    return t = r.extend({
        page_size: 50,
        preload: (r.prototype.preload || []).concat(["/tmpl/list/header_cells/unsorted_filter.twig"]),
        _ListHandler: a,
        _getEndpoint: function() {
            return "/api/unsorted/list/"
        },
        _getEndpointType: function() {
            return "GET"
        },
        _getEndpointData: function(e) {
            return this.pipeline_id = +e[0] || "",
            this.page = e[1] || 1,
            l.getListQs({
                page: this.page,
                page_size: this.page_size
            })
        },
        _getTemplateAndHolder: function() {
            return {
                template: "/tmpl/unsorted/list.twig",
                container: "#page_holder"
            }
        },
        _prepareFilter: s.noop,
        _makeRequest: function(e) {
            var t = i.Deferred();
            return this._getPipelines().done(s.bind(function() {
                return i.ajax({
                    url: this._getEndpoint(),
                    data: this._getEndpointData(e.route_args),
                    type: this._getEndpointType(),
                    dataType: "json",
                    headers: {
                        Accept: "application/json"
                    }
                }).done(function(e) {
                    t.resolve(e)
                })
            }, this)),
            t.promise()
        },
        _updateResponseData: function(e) {
            var t;
            return e.unsorted && (s.extend(e.unsorted, AMOCRM.constant("unsorted") || {}),
            t = s.reduce(e.unsorted.summary, function(e, t) {
                return e + t
            }, 0)),
            this.pipeline_id && this.pipelines_list && this.pipelines_list[this.pipeline_id] && (this.pipelines_list[this.pipeline_id].selected = !0),
            s.extend(e, {
                user_rights: d.getRights(),
                pipeline_id: this.pipeline_id,
                pipelines: this.pipelines_list,
                pagination: {
                    current: this.page,
                    total: Math.ceil(t / this.page_size)
                },
                filter: {}
            })
        },
        _getPipelines: function() {
            return c.getPipelines().done(s.bind(function(e) {
                this.pipelines_list = e.pipelines
            }, this))
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this._request({
                construct_options: e
            })
        },
        construct: function(e) {
            var t;
            this.options = this.options || {},
            this.response = s.isEmpty(e.response) ? AMOCRM.constant("leads_list_template_params") || {} : e.response,
            r.prototype.construct.call(this, s.extend(e, {
                list_handler_options: {
                    pipeline_id: this.pipeline_id || "",
                    pipelines_list: this.pipelines_list || {}
                }
            })),
            this._list = AMOCRM.data.current_view,
            this._list.pipeline_id = this.pipeline_id,
            t = this._list.list_items,
            t.trigger("list:fetched", [t.updateResponseData(this.response)])
        },
        destruct: function() {
            this._$window.off(this.ns),
            r.prototype.destruct.apply(this, arguments)
        }
    }),
    n.mixin(t, u, h),
    t
}),
define("lib/components/base/delete", ["require", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t, i = e("lib/components/base/confirm");
    return t = function(e) {
        var t, s = [], n = AMOCRM.getBaseEntity(), o = AMOCRM.lang[n + "_delete_confirm_1"], r = AMOCRM.lang[n + "_delete_confirm_2"], a = AMOCRM.lang["delete_" + n], l = "/tmpl/common/modal/delete.twig", c = AMOCRM.lang[n + "_remove_item_confirm"];
        e = e || {},
        t = e.entity_name,
        s = [{
            text: o.replace("#PLACEHOLDER#", "Ђ" + t + "ї")
        }, {
            text: r.replace("#PLACEHOLDER#", "Ђ" + t + "ї")
        }],
        new i({
            caption: a,
            template: l,
            accept_text: c,
            message: s,
            accept: e.accept,
            destroy: e.destroy
        })
    }
}),
define("lib/components/base/pipeline", ["require", "vendor/jquery-ui-sortable-animation/jquery.ui.sortable-animation", "underscore", "lib/common/hs", "lib/common/fn"], function(e) {
    var t, i = e("vendor/jquery-ui-sortable-animation/jquery.ui.sortable-animation"), s = e("underscore"), n = e("lib/common/hs"), o = e("lib/common/fn"), r = o.delay();
    return t = function(e) {
        this.options = i.extend({
            appendTo: i(document.body)
        }, e || {}),
        this.$el = i(this.options.el),
        this.$page_holder = i("#page_holder"),
        this.$manage = this.options.manage ? i(this.options.manage.el) : [],
        this.$scrollable = this.$el.find(".js-scroll-x-container"),
        this.$window = i(window),
        this.$body = i("body"),
        this.makeSortable(),
        this.makeDroppable(),
        this.hs = new n(s.extend({
            wrapper: this.$scrollable.parent(),
            scroller: this.$scrollable
        }, this.options.hs_options))
    }
    ,
    t.prototype.holding = null,
    t.prototype.freezScroll = !1,
    t.prototype.setPipelinePosition = function(e, t, s) {
        var n = this
          , o = 0
          , r = 10
          , a = n.$scrollable.scrollLeft()
          , l = n.$scrollable.width()
          , c = s.item.outerWidth()
          , d = {
            left: n.$scrollable.offset().left,
            right: n.$scrollable.offset().left + l
        }
          , u = {
            left: s.helper.offset().left,
            right: s.helper.offset().left + c
        }
          , h = 0;
        i(e);
        u.left <= d.left + 100 ? (h = Math.floor((100 - (u.left - d.left)) / 10),
        o = -(r + h)) : u.right >= d.right - 100 && (h = Math.floor((100 - (d.right - u.right)) / 10),
        o = r + h),
        n.$scrollable.scrollLeft(a + o)
    }
    ,
    t.prototype.makeSortable = function(e) {
        var t = this
          , n = this.$el.find(".pipeline_items__list")
          , o = Math.max(this.$el.find(".js-pipeline-row").closest(".pipeline_row").height(), 50)
          , a = i("html").hasClass("explorer");
        e !== !1 ? this.$el.find(".js-pipeline-row").sortable({
            containment: void 0 === this.options.containment ? document.body : this.options.containment,
            appendTo: this.options.appendTo,
            connectWith: ".js-pipeline-row",
            items: ".js-pipeline-sortable",
            forceHelperSizeType: !0,
            helper: "clone",
            tolerance: "pointer",
            opacity: .7,
            placeholder: this.options.placeholder || "pipeline-item-placeholder pipeline_leads__item_placeholder",
            forcePlaceholderSizeType: !0,
            scroll: !1,
            zIndex: 999,
            refreshPositions: !0,
            start: function(e, s) {
                var r;
                t.$body.css("overflow-x", "hidden"),
                s.item.css({
                    opacity: .2
                }).show(),
                t.item_new = i(this),
                t.item_old = i(this),
                s.placeholder.height(s.item.outerHeight()).hide(),
                i(this).addClass("ui-sorting ui-sorting-this"),
                t.$manage.length && t.$page_holder.addClass("pipeline-show-manage"),
                a && n.each(function() {
                    i(this).css("min-height", o + "px")
                }),
                r = t.options.appendTo instanceof i ? t.options.appendTo[0] : t.options.appendTo,
                r !== document.body && i(this).sortable("refreshPositions"),
                "function" == typeof t.options.start && t.options.start.apply(this, [s, t])
            },
            beforestop: function(e, s) {
                var n = t.options.appendTo instanceof i ? t.options.appendTo[0] : t.options.appendTo;
                n !== document.body && s.helper.css("margin-top", "")
            },
            sort: function(e, s) {
                var n = i(this);
                "function" == typeof t.options.sort && t.options.sort.apply(this, [s, t]),
                t.holding || (t.holding = setInterval(function() {
                    t.freezScroll || (t.setPipelinePosition(this, e, s),
                    r(function() {
                        n.sortable("refreshPositions")
                    }, 50))
                }, 50))
            },
            change: function(e, s) {
                t.item_new = s.placeholder.closest(".js-pipeline-row").clone(),
                t.item_old.attr("data-id") == t.item_new.attr("data-id") || t.item_new.hasClass("js-pipeline-no-drop") ? (s.placeholder.hide(),
                i(this).addClass("ui-sorting-this")) : (s.placeholder.show(),
                i(this).removeClass("ui-sorting-this"))
            },
            receive: function(e, i) {
                t.item_new.hasClass("js-pipeline-no-drop") && i.sender.addClass("cancel").sortable("cancel")
            },
            over: function(e, s) {
                t.item_new = i(this),
                "function" == typeof t.options.over && t.options.over.apply(this, [s, t])
            },
            stop: function(e, o) {
                clearInterval(t.holding),
                t.holding = null,
                t.freezScroll = !1;
                var r = t.item_new.attr("data-id") + ""
                  , l = t.item_old.attr("data-id") + "";
                o.item.removeAttr("style"),
                t.$body.css("overflow-x", ""),
                i(this).hasClass("cancel") ? (i(this).removeClass("cancel").sortable("cancel"),
                t.options.canceled && t.options.canceled.apply(this, [o, t])) : r && l !== r ? t.options.change.apply(this, [o, t]) : (i(this).sortable("cancel"),
                t.options.immutable && t.options.immutable.apply(this, [o, t])),
                i(this).removeClass("ui-sorting ui-sorting-this"),
                t.$manage.length && (t.$page_holder.removeClass("pipeline-show-manage"),
                s.isFunction(t.options.manageHide) && s.delay(s.bind(t.options.manageHide, this), 500)),
                a && n.each(function() {
                    i(this).css("min-height", "")
                }),
                "function" == typeof t.options.stop && t.options.stop.apply(this, [o, t])
            }
        }) : this._sortable("destroy")
    }
    ,
    t.prototype.makeDroppable = function(e) {
        var t = this;
        this.$manage.length && (e !== !1 ? this.$manage.find(".js-pipeline-droppable").droppable({
            refreshPositions: !0,
            tolerance: this.options.manage.tolerance || "pointer",
            over: function(e, s) {
                t.freezScroll = !0,
                s.helper.addClass("pipeline-manage-overed pipeline_leads__item-" + i(this).data("status-id"))
            },
            out: function(e, s) {
                t.freezScroll = !1,
                s.helper.removeClass("pipeline-manage-overed pipeline_leads__item-" + i(this).data("status-id"))
            },
            drop: function(e, n) {
                e.preventDefault(),
                e.stopPropagation(),
                n.draggable.closest(".js-pipeline-row").addClass("cancel"),
                i(e.target).hasClass("pipeline_manage__item") && n.draggable.addClass("h-hidden"),
                "function" == typeof t.options.manage.drop && s.delay(s.bind(function() {
                    t.options.manage.drop.apply(this, [n, t])
                }, this), AMOCRM.is_touch_device ? 50 : 0)
            }
        }) : this.$manage.find(".js-pipeline-droppable").droppable() && this.$manage.find(".js-pipeline-droppable").droppable("destroy"))
    }
    ,
    t.prototype._sortable = function(e) {
        return this.$el.find(".js-pipeline-row").sortable() && this.$el.find(".js-pipeline-row").sortable(e),
        this
    }
    ,
    t.prototype.scrollPause = function() {
        this.freezScroll = !0,
        this.hs.scrollPause()
    }
    ,
    t.prototype.scrollResume = function() {
        this.freezScroll = !1,
        this.hs.scrollResume()
    }
    ,
    t.prototype.enable = function() {
        return this._sortable("enable")
    }
    ,
    t.prototype.disable = function() {
        return this._sortable("disable")
    }
    ,
    t.prototype.refresh = function() {
        this.makeSortable()
    }
    ,
    t.prototype.destroy = function() {
        this.hs && this.hs.destroy(),
        this.makeSortable(!1),
        this.makeDroppable(!1)
    }
    ,
    t
}),
define("lib/components/base/quick_lead", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/components/base/form", "backbone", "lib/common/user_rights", "lib/common/fn", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/components/base/form"), a = e("backbone"), l = e("lib/common/user_rights"), c = e("lib/common/fn"), d = e("lib/components/base/confirm");
    return t = o.extend({
        _templates: function() {
            return this.in_pipeline = "leads-pipeline" === AMOCRM.data.current_entity,
            this.in_pipeline ? ["/tmpl/leads/pipeline/quick_add/linked_entity.twig", "/tmpl/leads/pipeline/quick_add/add_entity.twig", "/tmpl/leads/pipeline/quick_add/form.twig"] : ["/tmpl/cards/leads/quick_add_form.twig"]
        },
        _suggest_tmpl: function() {
            return n({
                ref: "/tmpl/controls/suggest/dropdown.twig"
            })
        },
        _form_template: function() {
            return n({
                ref: this.in_pipeline ? "/tmpl/leads/pipeline/quick_add/form.twig" : "/tmpl/cards/leads/quick_add_form.twig"
            })
        },
        _selectors: function() {
            return {
                save_btn: "#quick_add_form_btn",
                lead_name: "#quick_add_lead_name",
                lead_contact_search: "#quick_lead_contact_search",
                quick_add_button: ".pipeline_leads__quick_add_button",
                quick_add_form: ".pipeline_leads__quick_add_form",
                quick_add_status: "#quick_add_lead_status",
                linked_entity_form: "#linked-form__add-entity"
            }
        },
        events: {
            "click .button-cancel": "onCancelClick",
            "click .pipeline_leads__quick_add_button": "onQuickAddButtonClick",
            "click #quick_add_form_btn": "onSubmitClick",
            "click .js-linked-form__unlink": "unlinkEntity",
            "suggest:loaded .linked-form__ajax-input": "onSuggestLoaded",
            "suggest:changed .linked-form__ajax-input": "onSuggestChanged"
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            i.when(n._preload(this._templates())(), this._getPipelines()).then(s.bind(function() {
                this.user_rights = l.getRights(),
                this.template_params = e.template_params || {},
                this.linked_entities = new a.Collection,
                this.setElement(this.options.$el),
                o.prototype.initialize.apply(this, arguments),
                this.init()
            }, this))
        },
        destroy: function() {
            s.isFunction(this.options.onDestroy) && this.options.onDestroy.call(this),
            o.prototype.destroy.call(this)
        },
        clearForm: function() {
            this._form.revert(),
            this._$document.trigger("control:select:reset"),
            this.linked_entities.reset(),
            this.in_pipeline ? this._elem("quick_add_form").html(this._form_template().render(this.template_params)) : this.$el.html(this._cached_form_html),
            this._dropElemCache()
        },
        blurActive: function() {
            return AMOCRM.is_touch_device && "INPUT" === document.activeElement.tagName && document.activeElement.blur(),
            this
        },
        init: function() {
            var e = this;
            this._form = this._addComponent(r.View, {
                el: this.$el
            }),
            this._$document.on("click" + this.ns + " quick-lead:check-save" + this.ns, s.bind(function(t) {
                this._form.hasChanges() && 2 !== +t.button && (this.confirm || (this.confirm = new d({
                    class_name: "modal-list",
                    text: AMOCRM.lang.quick_lead_confirm,
                    decline_text: AMOCRM.lang.button_clear,
                    accept_text: AMOCRM.lang.button_save,
                    no_close: !0,
                    accept: function() {
                        this.modal.destroy(),
                        e.onSubmitClick()
                    },
                    destroy: function() {
                        this.accepted === !1 && e.onCancelClick(),
                        e.confirm = !1
                    }
                })))
            }, this)).on("click" + this.ns, this.options.hide_preventer || ".pipeline_leads__quick_add_form", s.bind(function(e) {
                this._$document.trigger("controls:hide"),
                e.stopPropagation()
            }, this)),
            s.isFunction(this.options.onInit) && this.options.onInit.call(this),
            this._cached_form_html = this.$el.html()
        },
        onSuggestChanged: function(e, t) {
            var s = i(e.target).data("value-id");
            this.in_pipeline && this.linkEntity(s),
            this._form.model.set({
                linked_id: s,
                element_type: t.data("value-element_type")
            })
        },
        onSuggestLoaded: function(e, t, i) {
            var n = [];
            "ok" === t.status ? (s.each(t.result, s.bind(function(e) {
                var t = this._suggest_tmpl().render(e);
                n.push({
                    id: e.id,
                    text: t,
                    title: e.name || e.company_name,
                    additional_data: 'data-value-element_type="' + e.element_type + '"'
                }),
                e.name && this.linked_entities.push(new a.Model(e))
            }, this)),
            i.trigger("suggest:reset", [n]).show()) : i.trigger("suggest:reset", [[]])
        },
        onQuickAddButtonClick: function(e) {
            e.stopPropagation(),
            this._$document.trigger("suggest:manager:destroy"),
            this._$document.trigger("controls:hide"),
            this._elem("quick_add_form").toggleClass("expand").one(AMOCRM.transition_event, s.bind(function() {
                s.isFunction(this.options.onToggle) && this.options.onToggle()
            }, this)),
            AMOCRM.is_touch_device || this.options.focus === !1 || this._findElem("lead_name").focus()
        },
        onSubmitClick: function(e) {
            var t, i = this._form.model, n = i.get("linked_id"), o = s.isFunction(this.options.lead_data) ? this.options.lead_data() : this.options.lead_data, r = i.get("contact_phone"), a = i.get("contact_email"), d = l.getRights("contacts", "add") && !n && !!(a || r || i.get("linked") || AMOCRM.data.is_card);
            e && (e.preventDefault(),
            e.stopPropagation()),
            this.blurActive(),
            t = s.extend(i.toJSON(), {
                status: i.get("lead[STATUS]") || i.get("status"),
                pipeline_id: +i.get("pipeline_id") || +i.get("lead[PIPELINE_ID]") || 1 === s.keys(this.pipelines_list).length && +this.pipelines_list[s.keys(this.pipelines_list)[0]].id,
                main_contact: this.options.main_contact || n,
                create_contact: d,
                contact_name: i.get("linked") || c.i18n("Name not specified"),
                element_type: i.get("element_type") || AMOCRM.element_types.contacts
            }, o || {}),
            this._elem("save_btn").trigger("button:load:start"),
            this._sendRequest(t).always(s.bind(function() {
                this._elem("save_btn").trigger("button:load:stop")
            }, this)).done(s.bind(function(e) {
                var i = n && !AMOCRM.data.is_card ? this.linked_entities.get(n).toJSON() : {}
                  , o = s.findWhere(this.pipelines_list, {
                    id: t.pipeline_id
                })
                  , r = t.status && o.statuses[t.status]
                  , a = r && r.name
                  , u = r && r.color
                  , h = {
                    single_pipeline: 1 === s.keys(this.pipelines_list).length,
                    name: c.escapeHTML(t.name),
                    main_contact: {
                        id: n,
                        name: i.name || d && c.escapeHTML(t.contact_name)
                    },
                    company: {
                        name: i.company_name
                    },
                    status: t.status ? {
                        id: t.status,
                        name: a,
                        color: u
                    } : {},
                    can_edit: l.getRights("leads", "manage_tags"),
                    budget: t.price
                };
                o.name && t.pipeline_id && s.extend(h, {
                    pipeline: {
                        name: o.name
                    },
                    lead_info: {
                        status: {
                            name: a,
                            color: u
                        }
                    }
                }),
                s.isFunction(this.options.onSuccess) && this.options.onSuccess.call(this, e, h),
                this._elem("save_btn").trigger("lead:saved"),
                this.$el.closest(".pipeline__body").find(".pipeline__no-items").hide(),
                this.onCancelClick()
            }, this)).fail(s.bind(function() {
                s.isFunction(this.options.onFail) && this.options.onFail.call(this)
            }, this))
        },
        _sendRequest: function(e) {
            return i.ajax({
                url: "/ajax/leads/multiple/add/",
                data: i.extend({
                    new_deal: [e]
                }, this.options.data),
                type: "POST",
                dataType: "json"
            })
        },
        _getPipelines: function() {
            return i.ajax({
                url: "/ajax/v1/pipelines/list",
                type: "GET",
                dataType: "json"
            }).done(s.bind(function(e) {
                this.pipelines_list = e.response.pipelines
            }, this))
        },
        onCancelClick: function(e) {
            e && e.stopPropagation(),
            this._$document.trigger("suggest:manager:destroy"),
            this._$document.trigger("controls:hide"),
            this.blurActive().clearForm(!0),
            this._elem("quick_add_form").removeClass("expand").one(AMOCRM.transition_event, s.bind(function() {
                s.isFunction(this.options.onToggle) && this.options.onToggle()
            }, this)),
            this._elem("quick_add_button").show()
        },
        unlinkEntity: function(e) {
            e && e.stopPropagation(),
            this._elem("linked_entity_form").html(n({
                ref: "/tmpl/leads/pipeline/quick_add/add_entity.twig"
            }).render()),
            this._form.updateModelFromForm(),
            this._form.checkDeleted()
        },
        linkEntity: function(e) {
            var t = this.linked_entities.get(e).toJSON();
            this._elem("linked_entity_form").html(n({
                ref: "/tmpl/leads/pipeline/quick_add/linked_entity.twig"
            }).render(s.extend(t, {
                entity_name: t.name || t.company_name,
                custom_fields: {
                    email: t.email || "",
                    phone: t.phone || ""
                }
            }))),
            this._form.updateModelFromForm()
        },
        checkHasChanges: function() {
            return this._form && this._form.hasChanges()
        }
    })
}),
define("lib/interface/leads/pipeline/unsorted/item", ["require", "jquery", "underscore", "twig", "cocktail", "lib/core/view", "lib/components/mail/api", "lib/components/base/confirm", "lib/components/base/player", "lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("cocktail")
      , o = e("lib/core/view")
      , r = e("lib/components/mail/api")
      , a = e("lib/components/base/confirm")
      , l = e("lib/components/base/player")
      , c = e("lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up")
      , d = e("lib/core/users")
      , u = []
      , h = function() {
        i.each(u, function(e) {
            e.hideDetail(),
            e.$el.trigger("unsorted:detail:hide")
        })
    };
    return t(document).on("controls:hide:private unsorted:details:clear unsorted:drop", function() {
        h()
    }),
    o.extend({
        template: "/tmpl/leads/pipeline/unsorted/item.twig",
        className: "pipeline_leads__item pipeline-unsorted__item js-unsorted-item js-pipeline-sortable",
        $detail: null,
        details: {
            forms: {
                template: "/tmpl/list/cells/form_detail.twig",
                prepare: function() {
                    var e = this.model.get("source_data");
                    return {
                        date_create: this.model.get("date_create"),
                        detail: {
                            from: e.from,
                            data: e.data
                        }
                    }
                }
            },
            chats: {
                template: "/tmpl/list/cells/chat_detail.twig",
                prepare: function() {
                    var e = this.model.get("source_data");
                    return {
                        date_create: this.model.get("date_create"),
                        detail: {
                            from: e.service,
                            data: e.data,
                            user_name: e.name,
                            manager_name: this.model.get("manager_name")
                        }
                    }
                }
            },
            mail: {
                template: "/tmpl/list/cells/email_detail.twig",
                prepare: function() {
                    return this.model.toJSON()
                }
            }
        },
        _classes: function() {
            return {
                sortable: "js-pipeline-sortable",
                player_wrapper: "js-audio_wrapper"
            }
        },
        events: {
            "mousedown .js-call-play": "stopPropagationOnPlay",
            "click .pipeline-unsorted__item-action_decline": "declineClick",
            "click .pipeline-unsorted__item-action_link": "_linkClick",
            "click .pipeline-unsorted__item-action_accept": "acceptClick",
            "swipe .pipeline-unsorted__item-data": "unsortedSwipe",
            "touchmove .pipeline-unsorted__item-data": "unsortedTouchMove",
            "touchstart .pipeline-unsorted__item-data": "unsortedTouchStart",
            "click .js-unsorted--merge": "mergeUnsorted",
            click: "showDetailClick",
            "unsorted:highlight": "highlight",
            "unsorted:accept": "acceptFromEvent",
            "unsorted:decline": "declineFromPipelineManage"
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            this.listenTo(this.model, "decline:start", this.loadStart),
            this.listenTo(this.model, "declined:failed", this.declineFailed),
            this.listenTo(this.model, "decline:finished", this.loadStop),
            this.listenTo(this.model, "declined:success", i.bind(this.destroy, this, !0)),
            this.listenTo(this.model, "accept:start", this.loadStart),
            this.listenTo(this.model, "accepted:failed", this.acceptFailed),
            this.listenTo(this.model, "accept:finished", this.loadStop),
            this.listenTo(this.model, "accepted:success", this.replaceWithLead),
            this.listenTo(this.model, "remove", i.bind(this.destroy, this, !0)),
            n.mixin(this, c),
            this.listenTo(this.model, "link:start", this.loadStart),
            this.listenTo(this.model, "linked:failed", this.linkFailed),
            this.listenTo(this.model, "linked:finished", this.loadStop),
            this.listenTo(this.model, "linked:success", i.bind(this.destroy, this, !0)),
            this.listenTo(this.model, "remove", i.bind(this.destroy, this, !0))
        },
        destroy: function(e) {
            this.hideDetail(),
            o.prototype.destroy.call(this, e)
        },
        render: function() {
            var e = t.Deferred();
            return s._preload([this.template], i.bind(function() {
                this.el.innerHTML = s({
                    ref: this.template
                }).render(i.extend({
                    managers: d.get()
                }, this.model.toJSON())),
                e.resolve(this.el)
            }, this))(),
            e.promise()
        },
        loadStart: function() {
            this.$el.removeClass(this._class("sortable")).addClass("pending").append('<div class="default-overlay default-overlay-visible unsorted-pipeline-overlay"><span class="spinner-icon spinner-icon-abs-center"></span></div>')
        },
        loadStop: function() {
            this.$el.addClass(this._class("sortable")).removeClass("pending"),
            this.$(".default-overlay").remove()
        },
        failedModal: function(e) {
            404 === +e[0].status && (new a({
                class_name: "modal-unsorted-fail modal-list",
                text: AMOCRM.lang.unsorted_accept_request_error,
                accept_text: "ќ "
            }),
            t(document).trigger("unsorted:reload"))
        },
        acceptFailed: function(e) {
            this.failedModal(e),
            this.loadStop(),
            this.$el.trigger("unsorted:accept:failed")
        },
        declineFailed: function(e) {
            this.failedModal(e),
            this.$el.show(),
            this.loadStop()
        },
        stopPropagationOnPlay: function(e) {
            e.stopPropagation()
        },
        _linkClick: function() {
            this.linkClick(this.model)
        },
        declineClick: function(e) {
            e.stopPropagation(),
            e.preventDefault(),
            this.$el.trigger("unsorted:decline:click"),
            this.model.decline()
        },
        acceptClick: function(e) {
            e.stopPropagation(),
            e.preventDefault(),
            this.$el.trigger("unsorted:accept:click"),
            this.model.accept({
                status_id: this.options.statuses[0]
            })
        },
        unsortedSwipe: function(e, t, i) {
            1 === t && 0 === i && this.acceptClick.apply(this, arguments),
            -1 === t && 0 === i && this.declineClick.apply(this, arguments)
        },
        unsortedTouchStart: function(e) {
            this.x_start = e.originalEvent.touches[0].screenX,
            this.y_start = e.originalEvent.touches[0].screenY
        },
        unsortedTouchMove: function(e) {
            var t = Math.abs(e.originalEvent.touches[0].screenX - this.x_start)
              , i = Math.abs(e.originalEvent.touches[0].screenY - this.y_start);
            t > i && e.preventDefault()
        },
        acceptFromEvent: function(e, t) {
            this.model.accept({
                status_id: t
            })
        },
        declineFromPipelineManage: function() {
            this.$el.hide(),
            this.model.decline()
        },
        initPlayerIfNeed: function() {
            var e = this.$detail.find(this._selector("player_wrapper"));
            return e.length ? this.setPlayer(!0) : this
        },
        setPlayer: function(e) {
            return !e && this.player && (this.player.destroy(),
            this.player = null),
            e && !this.player && (this.player = this._addComponent(l, {
                ns: i.uniqueId(".player"),
                $container: this.$detail,
                append_to: this.$detail,
                check_if_chats: !0
            })),
            this
        },
        mergeUnsorted: function(e) {
            e.stopPropagation()
        },
        showDetailClick: function(e) {
            var n, o, a, l, c, d = this, u = this.$el.hasClass("selected"), _ = t(e.target);
            ("chats" !== this.model.get("category") || this.model.get("source_data").data) && (_.hasClass("js-navigate-link") || (u || h(),
            u || -1 === i.indexOf(["forms", "mail", "chats"], this.model.get("category")) || (this.scrollWindowToElement(this.$el),
            this.$el.parents(".pipeline_items__list").css({
                "min-height": "500px"
            }),
            n = i.bind(function() {
                this.$detail = t(s({
                    ref: this.details[this.model.get("category")].template
                }).render(a)).addClass("unsorted-detail-pipeline"),
                this.$el.parent().append(this.$detail),
                this.$detail.on("click mousedown", function(e) {
                    e.stopPropagation()
                }),
                "mail" === this.model.get("category") && this.$detail.find(".email-detail__body").height() >= 380 && this.$detail.find(".email-detail__body").addClass("need_shadow"),
                this.initPlayerIfNeed(this.$detail).detailSetPosition(i.bind(this.fixPage, this)),
                this.highlight(!0)
            }, this),
            o = s._preload([this.details[this.model.get("category")].template], n),
            a = this.details[this.model.get("category")].prepare.call(this),
            "mail" === this.model.get("category") ? (l = this.model.get("source_data"),
            d.$el.append('<div class="unsorted-detail-email__loader"><span class="spinner-icon"></span></div>'),
            r.getMessage(l.message_id).always(function() {
                d.$el.find(".unsorted-detail-email__loader").remove()
            }).done(function(e) {
                a.source_data.content = e.content,
                o.call(d)
            }).fail(function(e) {
                switch (e.status) {
                case 403:
                    c = AMOCRM.lang.mail_letter_view_forbidden;
                    break;
                case 410:
                    c = AMOCRM.lang.mail_letter_deleted;
                    break;
                default:
                    c = AMOCRM.lang.modal_error_caption
                }
                a.source_data.content = '<h2 class="modal-body__caption head_2"><span class="file_error">' + c + "</span></h2>",
                o.call(d)
            })) : o())))
        },
        detailSetPosition: function(e) {
            var t, i, s, n, o, r, a, l = this.$detail.find(".unsorted__external-pointer"), c = this.$el.parents(".pipeline_items__list"), d = this.$el.parents(".list__body__holder"), u = this.$el.position(), h = u.top, _ = this.$el.offset().top, p = this.$el.height(), m = this.el.offsetWidth, f = this._$window.height(), g = window.scrollY, b = this.$detail.height(), v = 27, y = 8, w = d.offset().top, C = c.offset().top, k = h - b / 2;
            k - this._$window.scrollTop() < 0 ? (k = h + 2,
            o = p / 2 - y,
            r = 0) : (k += p / 2,
            r = -y),
            t = window.innerHeight + this._$window.scrollTop() - h - p,
            i = b + c.offset().top,
            s = Math.abs(t - i),
            n = c.height() - h - p - b,
            0 > n && (k = h + p / 2 + 2 + n,
            b > -s ? (o = -n,
            r = 0) : l.css({
                display: "none"
            })),
            i > t && h - v + c.offset().top > s && n >= 0 && (k = h + p / 2 + 2 - s,
            b > s ? (o = s,
            r = 0) : l.css({
                display: "none"
            })),
            0 > k && (a = C - w,
            0 > k + a && (k = -a,
            a += h,
            o = a + p / 2)),
            g > _ - 10 ? k = _ : _ + p + 10 > g + f && (k = _ + p + 10 - b,
            o = b - p + p / 2 - y),
            this.$detail.css({
                top: k,
                left: u.left + m + 10
            }),
            l.css({
                top: o,
                "margin-top": r
            }),
            e()
        },
        scrollWindowToElement: function(e) {
            var i = e.offset().top
              , s = e.outerHeight(!0)
              , n = window.scrollX
              , o = window.scrollY
              , r = t(window).height()
              , a = 0;
            o > i - 10 ? (a = o - (o - (i - 10)),
            0 > a && (a = 0)) : i + s + 10 > o + r && (a = o + (i + s + 10 - (o + r))),
            a && window.scrollTo(n, a)
        },
        highlight: function(e) {
            e = void 0 === e ? !0 : e,
            e ? u.push(this) : u.splice(u.indexOf(this), 1),
            this.$el.toggleClass("selected", e)
        },
        hideDetail: function() {
            this.highlight(!1),
            this.setPlayer(!1),
            this.$detail && (this.$detail.off(),
            this.$detail.remove(),
            this.$detail = null,
            this.releasePage())
        },
        fixPage: function() {
            this._$document.trigger("overlay:fix")
        },
        releasePage: function() {
            this._$document.trigger("overlay:unfix")
        },
        replaceWithLead: function(e) {
            this._$document.trigger("unsorted:item:accepted", [this.model]),
            this.getLeadData(e.leads, {
                success: i.bind(function(e, t) {
                    this.$el.trigger("unsorted:lead:render", [e, t]),
                    this.destroy(!0)
                }, this),
                error: i.noop
            })
        },
        getLeadData: function(e, s) {
            var n, o;
            return e ? (o = AMOCRM.data.current_view.pipeline_id,
            void t.get("/ajax/leads/pipeline/?filter[ID][]=" + e + "&pipeline_id=" + o).always(function(e) {
                e.response && e.response.leads ? (n = i.keys(e.response.leads)[0],
                s.success(i.first(i.values(e.response.leads[n])), n)) : s.error()
            })) : void s.error()
        }
    })
}),
define("lib/interface/leads/pipeline/unsorted/index", ["require", "jquery", "underscore", "twig", "cocktail", "lib/core/view", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/base/player", "lib/common/fn", "lib/interface/unsorted/pipeline/collection", "lib/interface/leads/pipeline/unsorted/item", "lib/interface/unsorted/mixins/integrations"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/core/view"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = e("lib/components/base/player"), d = e("lib/common/fn"), u = e("lib/interface/unsorted/pipeline/collection"), h = e("lib/interface/leads/pipeline/unsorted/item"), _ = e("lib/interface/unsorted/mixins/integrations"), p = 10;
    return t = r.extend({
        ns: ".unsorted:pipeline:items",
        filter_template: function() {
            return n({
                ref: "/tmpl/leads/pipeline/unsorted/filter.twig"
            })
        },
        banners_template: function() {
            return n({
                ref: "/tmpl/list/unsorted_list_off.twig"
            })
        },
        small_banners_template: function() {
            return n({
                ref: "/tmpl/leads/pipeline/unsorted/small_banner.twig"
            })
        },
        _page: 0,
        _all_loaded: !1,
        _category: ["all"],
        _selectors: function() {
            return {
                head: "#status_id_unsorted",
                filter: "#pipeline_unsorted_filter"
            }
        },
        _classes: function() {
            return {
                head_count: "pipeline_status__head_info__count",
                head_info: "pipeline_status__head_info",
                items_list: "pipeline_items__list",
                item: "js-unsorted-item",
                unsorted_plug: "box-unsorted-off",
                unsorted_item: "pipeline-unsorted__item"
            }
        },
        events: {
            "click .pipeline-unsorted__filter.js-clickable .pipeline-unsorted__filter-item": "filterClick",
            "unsorted:detail:hide": "itemDetailHide",
            "click #unsorted_all:not(.pipeline-unsorted__all_off)": "onShowAllClick"
        },
        initialize: function(e) {
            if (this.options = e || {},
            !this.options.pipeline)
                throw new Error("Pipeline page not presented in options");
            n._preload(["/tmpl/leads/pipeline/unsorted/filter.twig", "/tmpl/list/unsorted_list_off.twig"])(),
            r.prototype.initialize.apply(this, arguments),
            this.collection = new u,
            this.listenTo(this.collection, "sync", this.render),
            this.listenTo(this.collection, "accepted:success declined:success", this.decreaseSummary),
            this.listenTo(this.collection, "link:start", this.showOverlay),
            this.listenTo(this.collection, "linked:success", this.successHandler),
            this.listenTo(this.collection, "linked:failed", this.failHandler),
            this.loadPage({
                page: 1
            }),
            this.player = this._addComponent(c, {
                $container: this._elem("items_list"),
                append_to: this._elem("items_list"),
                afterSetPositions: s.bind(this.setPlayerPosition, this),
                stop: s.bind(function() {
                    this._$document.trigger("unsorted:details:clear")
                }, this)
            }),
            this.initIntegrations(this.options),
            this.bindDOMEvents()
        },
        showOverlay: function() {
            this.prepareOverlay(),
            this.$overlay.trigger("overlay:show", {
                skip_fix: !0
            })
        },
        prepareOverlay: function() {
            this.$overlay = i("#unsorted_loader"),
            this.$overlay.length || (i("#list_page_holder").append(this.$overlay = i('<div class="default-overlay" id="unsorted_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>')),
            this.$overlay.addClass("unsorted_pipeline__overlay"))
        },
        successHandler: function() {
            this.showOverlay(),
            this.hideOverlay(),
            (new a).showSuccess(null, s.bind(function() {
                this._$document.trigger("page:reload")
            }, this))
        },
        hideOverlay: function() {
            this.$overlay && this.$overlay.length && (this.$overlay.trigger("overlay:hide"),
            this.$overlay.remove())
        },
        failHandler: function(e) {
            var t = s.isArray(e) ? e[0].status : e
              , i = {
                "default": "unsorted_error_unavailable",
                400: "unsorted_error_no_rights",
                403: "unsorted_error_blocked"
            }
              , e = e && s.indexOf(s.keys(i), e.toString()) >= 0 ? e : "default"
              , n = i[e]
              , o = {
                text: d.i18n(n),
                button: AMOCRM.lang.unsorted_notification_error_button
            }
              , r = window.location.host
              , a = r.split(".")
              , c = a[a.length - 1];
            403 === +e && (o.link = "//developer.amocrm." + c),
            404 === +t ? new l({
                class_name: "modal-unsorted-fail modal-list",
                text: AMOCRM.lang.unsorted_accept_request_error,
                accept_text: "ќ "
            }) : (this.hideOverlay(),
            AMOCRM.notifications.show_message_error(o))
        },
        bindDOMEvents: function() {
            this.options.pipeline.$el.on("load-more" + this.options.pipeline.ns, s.bind(this.loadPage, this)),
            this._$document.on("unsorted:reload" + this.ns, s.bind(this.reloadUnsorted, this)).on("click" + this.ns + " link:navigate" + this.ns, ".unsorted__hook_up .js-navigate-link", function() {
                i(document).trigger("controls:hide")
            })
        },
        reloadUnsorted: function() {
            this.collection.each(function() {
                this.collection.remove(this.collection.models[0])
            }, this),
            this.loadPage({
                page: 1
            })
        },
        destroy: function() {
            this._$document.trigger("unsorted:details:clear"),
            r.prototype.destroy.call(this)
        },
        filterClick: function(e) {
            var t = i(e.currentTarget);
            e.stopPropagation(),
            t.hasClass("pipeline-unsorted__filter-item_empty") || (t.parent().find(".pipeline-unsorted__filter-item_active").removeClass("pipeline-unsorted__filter-item_active"),
            t.addClass("pipeline-unsorted__filter-item_active"),
            this.filter(t.attr("data-type")))
        },
        onShowAllClick: function(e) {
            var t;
            e && (e.preventDefault(),
            e.stopPropagation()),
            e && AMOCRM.is_touch_device && (t = "visible" === this._findElem("filter").css("visibility"),
            this._findElem("filter").toggleClass("pipeline-unsorted__filter_visible", !t),
            !t) || (this._findElem("filter").find(".pipeline-unsorted__filter-item_active").removeClass("pipeline-unsorted__filter-item_active"),
            this.filter("all"))
        },
        itemDetailHide: function() {
            this.player.stop()
        },
        setPlayerPosition: function(e, t) {
            var i = e.closest(this._selector("item"))
              , s = i.position();
            i.trigger("unsorted:highlight"),
            t.css({
                top: s.top + 33,
                left: s.left + i[0].offsetWidth + 10
            })
        },
        _dropElemCache: function() {
            return r.prototype._dropElemCache.apply(this, arguments),
            this
        },
        filter: function(e) {
            var t = this._page * p;
            this.revertIntegrations(),
            this._all_loaded = !1,
            this._page = 0,
            this._category = e ? [e] : ["all"],
            this.loadPage({
                page: 1,
                per_page: t,
                filter: {
                    categories: this._category
                }
            })
        },
        loadPage: function(e) {
            var t;
            e = e || {},
            t = {
                denied: (this.settings || {}).denied || this.options.pipeline.unsorted_settings.denied,
                show: (this.settings || {}).show || this.options.pipeline.unsorted_settings.show
            },
            !t.denied && t.show && (this._all_loaded || (2 === arguments.length && (e.page = arguments[1]),
            e.page - this._page > 1 && (e.page = this._page + 1),
            e.page = e.page || this._page + 1,
            e.per_page = e.per_page || (1 === e.page ? 20 : p),
            this.collection.fetch({
                data: s.extend({
                    PAGEN_1: e.page,
                    page_size: e.per_page
                }, e.filter || {
                    categories: this._category
                }),
                success: s.bind(function(t, i) {
                    0 === this._page && this._findElem("unsorted_item").remove(),
                    this._page += e.per_page / p,
                    i.response.unsorted.list.length < e.per_page && (this._all_loaded = !0)
                }, this)
            })))
        },
        render: function(e, t) {
            var n, o, r, a, l, c, u = document.createDocumentFragment(), _ = s.reduce(this.collection.summary, function(e, t) {
                return e + t
            }, 0);
            if (t && t.response && t.response.unsorted)
                return this.actualizeIntegrations(this.collection.summary),
                o = s.extend({
                    list: [],
                    summary: {}
                }, t.response.unsorted),
                0 === this._page && (this._elem("items_list").empty(),
                this._dropElemCache()),
                this.showSummary(),
                n = s.map(o.list, function(e) {
                    return r = this.collection.get(e.uid),
                    r && "forms" === r.get("category") && (a = r.get("source_data") || {},
                    l = d.make_lead_name_from_wordpress_form(a),
                    l && (a.from = l,
                    r.set("source_data", a))),
                    this._addComponent(h, {
                        model: r,
                        statuses: this.options.statuses
                    }).render().done(function(e) {
                        u.appendChild(e)
                    })
                }, this),
                i.when.apply(i, n).then(s.bind(function() {
                    this._elem("items_list").append(u)
                }, this)),
                c = s.reduce(this.settings.integration, function(e, t) {
                    return e && !t.enabled
                }, !0) && 0 === _,
                this.settings.hide = !(_ > 0 || c),
                this.toggleBanners(0 === this.collection.length && !this.settings.hide),
                this
        },
        decreaseSummary: function(e, t) {
            this.collection.summary[t.get("category")] -= 1,
            this.collection.summary[t.get("category")] > 0 ? this.showSummary() : this.onShowAllClick()
        },
        showSummary: function() {
            var e = 0
              , t = {}
              , n = s.reduce(this.settings.integration, function(e, t) {
                return e + (t.enabled ? 1 : 0)
            }, 0);
            s.each(this.collection.summary, function(i, s) {
                e += i,
                t[s] = !i && !this.settings.integration[s].enabled || 1 === n
            }, this),
            this._findElem("head_count").attr("id", "unsorted_all").addClass("pipeline-unsorted__all").text(AMOCRM.lang.Requests + ": " + e),
            this._findElem("filter").length && this._findElem("filter").remove(),
            i("#unsorted_all").toggleClass("pipeline-unsorted__filter-item_current", "all" === this._category[0]).toggleClass("pipeline-unsorted__all_off", 2 > n),
            3 !== s.reduce(t, function(e, t) {
                return e + (t ? 1 : 0)
            }, 0) && (this._findElem("filter").length && this._findElem("filter").remove(),
            e && this._findElem("head_info").find(".pipeline-unsorted__all").append(this.filter_template().render({
                summary: s.extend({
                    mail: 0,
                    sip: 0,
                    forms: 0
                }, this.collection.summary),
                hide: t,
                hide_filter: 1 === n,
                total: e,
                category: this._category[0]
            })))
        },
        toggleBanners: function(e) {
            this._findElem("unsorted_plug").length && this._findElem("unsorted_plug").remove(),
            e && this.checkCBH().then(s.bind(function() {
                n._preload(["/tmpl/list/unsorted_list_off.twig"], s.bind(function() {
                    this._elem("items_list").append(this.banners_template().render({
                        unsorted: this.settings,
                        summary: this.collection.summary,
                        category: this._category[0],
                        user_rights: AMOCRM.constant("user_rights")
                    }))
                }, this))()
            }, this))
        }
    }),
    o.mixin(t, _),
    t
}),
function(e) {
    define("vendor/wheel-indicator/lib/wheel-indicator", [], function() {
        return function() {
            var t = function(e, t) {
                function i(e) {
                    this._options = c(u, e),
                    this._deltaArray = [0, 0, 0],
                    this._isAcceleration = !1,
                    this._isStopped = !0,
                    this._direction = "",
                    this._timer = "",
                    this._isWorking = !0;
                    var t = this;
                    this._wheelHandler = function(e) {
                        t._isWorking && (o.call(t, e),
                        t._options.preventMouse && n(e))
                    }
                    ,
                    a(this._options.elem, d, this._wheelHandler)
                }
                function s(e) {
                    e.direction = this._direction,
                    this._options.callback.call(this, e)
                }
                function n(t) {
                    t = t || e.event,
                    t.preventDefault ? t.preventDefault() : t.returnValue = !1
                }
                function o(e) {
                    var t = this
                      , i = h(e);
                    if (0 !== i) {
                        var n, o, a = i > 0 ? "down" : "up", l = t._deltaArray.length, c = !1, d = 0;
                        for (clearTimeout(t._timer),
                        t._timer = setTimeout(function() {
                            t._deltaArray = [0, 0, 0],
                            t._isStopped = !0,
                            t._direction = a
                        }, 150),
                        o = 0; l > o; o++)
                            0 !== t._deltaArray[o] && (t._deltaArray[o] > 0 ? ++d : --d);
                        Math.abs(d) === l && (n = d > 0 ? "down" : "up",
                        n !== t._direction && (c = !0,
                        t._direction = a)),
                        t._isStopped || (c ? (t._isAcceleration = !0,
                        s.call(this, e)) : Math.abs(d) === l && r.call(this, e)),
                        t._isStopped && (t._isStopped = !1,
                        t._isAcceleration = !0,
                        t._direction = a,
                        s.call(this, e)),
                        t._deltaArray.shift(),
                        t._deltaArray.push(i)
                    }
                }
                function r(e) {
                    var t = Math.abs(this._deltaArray[0])
                      , i = Math.abs(this._deltaArray[1])
                      , n = Math.abs(this._deltaArray[2])
                      , o = Math.abs(h(e));
                    o > n && n > i && i > t && (this._isAcceleration || (s.call(this, e),
                    this._isAcceleration = !0)),
                    n > o && i >= n && (this._isAcceleration = !1)
                }
                function a(e, t, i) {
                    e.addEventListener ? e.addEventListener(t, i, !1) : e.attachEvent && e.attachEvent("on" + t, i)
                }
                function l(e, t, i) {
                    e.removeEventListener ? e.removeEventListener(t, i, !1) : e.detachEvent && e.detachEvent("on" + t, i)
                }
                function c(e, t) {
                    var i, s = {};
                    for (i in e)
                        Object.prototype.hasOwnProperty.call(e, i) && (s[i] = e[i]);
                    for (i in t)
                        Object.prototype.hasOwnProperty.call(t, i) && (s[i] = t[i]);
                    return s
                }
                var d = "onwheel"in t ? "wheel" : "mousewheel"
                  , u = {
                    callback: function() {},
                    elem: t,
                    preventMouse: !0
                };
                i.prototype = {
                    constructor: i,
                    turnOn: function() {
                        return this._isWorking = !0,
                        this
                    },
                    turnOff: function() {
                        return this._isWorking = !1,
                        this
                    },
                    setOptions: function(e) {
                        return this._options = c(this._options, e),
                        this
                    },
                    getOption: function(e) {
                        var t = this._options[e];
                        if (void 0 !== t)
                            return t;
                        throw new Error("Unknown option")
                    },
                    destroy: function() {
                        return l(this._options.elem, d, this._wheelHandler),
                        this
                    }
                };
                var h = function(e) {
                    return (h = e.wheelDelta && !e.deltaY ? function(e) {
                        return -1 * e.wheelDelta
                    }
                    : function(e) {
                        return e.deltaY
                    }
                    )(e)
                };
                return i
            }(window, document);
            return "object" == typeof exports && (module.exports = t),
            e.WheelIndicator = t
        }
        .apply(e, arguments)
    })
}(this),
define("lib/components/base/mousewheel_topbar", ["require", "jquery", "underscore", "lib/core/view", "vendor/wheel-indicator/lib/wheel-indicator"], function(e) {
    "use strict";
    function t(e, t, i, s, n) {
        s = s || 0,
        n = n || 0,
        this.identifier = t,
        this.target = e,
        this.clientX = (i.clientX || 0) + s,
        this.clientY = (i.clientY || 0) + n,
        this.screenX = (i.screenX || 0) + s,
        this.screenY = (i.screenY || 0) + n,
        this.pageX = (i.pageX || 0) + s,
        this.pageY = (i.pageY || 0) + n
    }
    function i() {
        var e = [];
        return e.item = function(e) {
            return this[e] || null
        }
        ,
        e.identifiedTouch = function(e) {
            return this[e + 1] || null
        }
        ,
        e
    }
    function s(e, s, n) {
        var o;
        null == s && (s = 0),
        null == n && (n = 0);
        try {
            o = document.createEvent("TouchEvent"),
            o.initTouchEvent("touchend", !0, !0)
        } catch (r) {
            try {
                o = document.createEvent("UIEvent"),
                o.initUIEvent("touchend", !0, !0)
            } catch (r) {
                o = document.createEvent("Event"),
                o.initEvent("touchend", !0, !0)
            }
        }
        return o.changedTouches = [{
            pageX: s,
            pageY: n
        }],
        o.touches = new i,
        o.touches.push(new t(e,1,{},0,0)),
        e.dispatchEvent(o)
    }
    var n = e("jquery")
      , o = e("underscore")
      , r = e("lib/core/view")
      , a = e("vendor/wheel-indicator/lib/wheel-indicator")
      , l = n("html")
      , c = l.hasClass("explorer");
    return document.createTouchList || (document.createTouchList = function() {
        var e, t = new i;
        for (e = 0; e < arguments.length; e++)
            t[e] = arguments[e];
        return t.length = arguments.length,
        t
    }
    ),
    r.extend({
        subview: null,
        pipe_stats_animated: null,
        horizontal_scroll: null,
        block_inertial_scroll: null,
        touch_coords: null,
        hor_scroll_tmid: null,
        stats_opened: null,
        blocked_interaction: null,
        resize_ns: ".stats_resize",
        _selectors: function() {
            return {
                list_holder: "#list_holder",
                headline_stats: "#pipeline__stats",
                scroller: ".pipeline-scroller",
                pipeline_body: ".pipeline__body"
            }
        },
        initialize: function(e) {
            e = e || {},
            this.options = e,
            this.setElement(e.$el || n("#list_page_holder")),
            r.prototype.initialize.call(this),
            e.reset_on_init && this.resetTransform(),
            this.subview = this._addComponent(e.HeadlineView, o.extend({
                onInit: o.bind(function() {
                    this.initEvents(),
                    o.isFunction(e.onInitSubview) && e.onInitSubview()
                }, this)
            }, e.headline_view_options || {}))
        },
        destroy: function() {
            this._$window.off(this.resize_ns),
            r.prototype.destroy.call(this)
        },
        initEvents: function() {
            var e = this.options.scroll_elem ? " " + this.options.scroll_elem : "";
            this.events = this.events || {},
            this.events[AMOCRM.wheel_event + e] = "onScroll",
            AMOCRM.is_touch_device ? (this.events["touchmove" + e] = "onTouchMove",
            this.events["touchstart" + e] = "onTouchStart",
            this.touch_coords = {}) : this._addComponent(a, {
                elem: document.getElementById("list_page_holder"),
                preventMouse: !1,
                callback: o.bind(function(e) {
                    this.page_x = this._elem("scroller").scrollLeft(),
                    !this._isTopScroll() || this.pipe_stats_animated || this._isOverlappingScroll(e) || this.horizontal_scroll || (this.block_inertial_scroll = !1,
                    this._getScrollTrigger(this._getDeltas(e)) === !0 && this.showStats(e))
                }, this)
            }),
            this.delegateEvents(),
            this._$document.on("page:change:stop" + this.ns, o.bind(this.resetTransform, this))
        },
        onTouchStart: function(e) {
            this.touch_coords.x_start = e.originalEvent.touches[0].screenX,
            this.touch_coords.y_start = e.originalEvent.touches[0].screenY
        },
        onTouchMove: function(e) {
            var t = Math.abs(e.originalEvent.touches[0].screenX - this.touch_coords.x_start)
              , i = Math.abs(e.originalEvent.touches[0].screenY - this.touch_coords.y_start)
              , s = e.originalEvent.touches[0].screenY > this.touch_coords.y_start;
            i > t && s && this._isTopScroll() && !this.stats_opened && !this._isOverlappingScroll.apply(this, arguments) && e.preventDefault()
        },
        onScroll: function(e, t, i) {
            var s = window.TouchEvent && e.originalEvent instanceof TouchEvent
              , n = {
                deltaY: s ? -1 * i : e.deltaY,
                deltaX: s ? -1 * t : e.deltaX
            };
            if (!this._isOverlappingScroll(e) && this._isTopScroll()) {
                if (Math.abs(this._elem("scroller").scrollLeft() - this.page_x) > 0 && !c && (this.horizontal_scroll = !0,
                clearTimeout(this.hor_scroll_tmid),
                this.hor_scroll_tmid = setTimeout(o.bind(function() {
                    this.horizontal_scroll = !1
                }, this), 30)),
                this.pipe_stats_animated || this.block_inertial_scroll)
                    return void e.preventDefault();
                if (this.stats_opened && Math.abs(n.deltaX) <= 10 && n.deltaY > 0)
                    return void e.preventDefault();
                this._getScrollTrigger(n) === !1 && this._isSmallPageContent() ? (e.preventDefault(),
                this.hideStats()) : this._getScrollTrigger(n) && s && this.showStats()
            }
        },
        showStats: function(e) {
            var t, i = this._isSmallPageContent();
            this.pipe_stats_animated = !0,
            this.stats_opened = !0,
            i && this._toggleHeight({
                toggle: i
            }),
            this._elem("list_holder").addClass("list__body__holder_stats_opening list__body__holder_stats_opened"),
            o.delay(o.bind(function() {
                t = n(".ui-started"),
                this.pipe_stats_animated = !1,
                i || this.bindHideOnScroll(),
                o.isFunction(this.options.onStatsShow) && this.options.onStatsShow(),
                AMOCRM.is_touch_device && t.length && s(t.removeClass("ui-started").get(0))
            }, this), 400),
            this._$window.on("resize" + this.resize_ns, o.bind(o.debounce(this.onLayoutChange, 50), this))
        },
        bindHideOnScroll: function() {
            this.hide_on_scroll_binded || (this.hide_on_scroll_binded = !0,
            this._elem("list_holder").removeClass("list__body__holder_stats_opening").css(this._getCssConfig(!0)),
            this._$window.on("scroll" + this.ns, o.bind(o.debounce(this.onPageScroll, 350), this)))
        },
        hideStats: function(e) {
            this.pipe_stats_animated = !0,
            this._elem("list_holder").removeClass("h-animation-ff list__body__holder_stats_opening").addClass("list__body__holder_stats_closing"),
            o.delay(o.bind(function() {
                this.pipe_stats_animated = !1,
                this.stats_opened = !1,
                this._isSmallPageContent() && (c || AMOCRM.is_touch_device || (this.block_inertial_scroll = !0),
                this._toggleHeight({
                    toggle: !1
                })),
                this._elem("list_holder").removeClass("list__body__holder_stats_closing list__body__holder_stats_opened"),
                o.isFunction(this.options.onStatsHide) && this.options.onStatsHide(),
                this._$window.off(this.resize_ns)
            }, this), 150)
        },
        onPageScroll: function() {
            var e;
            this._elem("headline_stats").visible() || (e = this._$window.scrollTop(),
            this.stats_opened = !1,
            this._elem("list_holder").removeClass("list__body__holder_stats_opened").css(this._getCssConfig()),
            this._$window.scrollTop(e - this._elem("headline_stats").outerHeight()).off(this.ns),
            this.hide_on_scroll_binded = !1)
        },
        _getScrollTrigger: function(e) {
            var t = this.stats_opened
              , i = e.deltaX
              , s = e.deltaY;
            return (0 === i || Math.abs(i) <= 10 && 0 !== s) && !t && s >= 1 ? !0 : 0 === i && t && 0 > s ? !1 : void 0
        },
        _getDeltas: function(e) {
            var t, i;
            return "detail"in e && (i = -1 * e.detail),
            "wheelDelta"in e && (i = e.wheelDelta),
            "wheelDeltaY"in e && (i = e.wheelDeltaY),
            "wheelDeltaX"in e && (t = -1 * e.wheelDeltaX),
            {
                deltaY: i ? i : isNaN(e.deltaY) ? 0 : -1 * e.deltaY,
                deltaX: t ? t : isNaN(e.deltaX) ? 0 : -1 * e.deltaX
            }
        },
        _isTopScroll: function() {
            return 0 === this._$window.scrollTop()
        },
        _isOverlappingScroll: function(e) {
            var t = +this._$body.attr("data-body-fixed");
            return !o.isNaN(t) && 0 !== t || this.blocked_interaction || e.ctrlKey || l.hasClass("has-suggest-manager") || !!n(e.target).closest(".control--suggest--list-opened").length
        },
        _isSmallPageContent: function() {
            return this._elem("list_holder").outerHeight() - (this._elem("headline_stats").visible() && this._elem("headline_stats").outerHeight()) <= window.innerHeight
        },
        _toggleHeight: function(e) {
            e = e || {},
            this._elem("pipeline_body").toggleClass("pipeline__body_contracted", e.toggle)
        },
        _getCssConfig: function(e) {
            var t = {};
            return t[Modernizr.prefixed("transform")] = "translateY(" + (e ? 0 : "-15px") + ")",
            t.paddingTop = e ? 65 : 0,
            t
        },
        _prependHeadlineStats: function(e) {
            this.blocked_interaction = (e || {}).stop
        },
        resetTransform: function() {
            this._elem("list_holder").removeClass("list__body__holder_stats_opened list__body__holder_stats_opening list__body__holder_stats_closing").css(this._getCssConfig())
        },
        onLayoutChange: function() {
            var e;
            this.stats_opened && (e = this._isSmallPageContent(),
            this._toggleHeight({
                toggle: e
            }),
            e ? (this._$window.off(this.ns),
            this._elem("list_holder").addClass("list__body__holder_stats_opening h-animation-ff").css(this._getCssConfig())) : this.bindHideOnScroll())
        },
        stopHeadlineStats: function() {
            this._prependHeadlineStats({
                stop: !0
            })
        },
        startHeadlineStats: function() {
            this._prependHeadlineStats({
                stop: !1
            })
        }
    })
}),
define("lib/interface/leads/pipeline/headline_filter", ["require", "jquery", "underscore", "twig", "lib/core/view"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/core/view");
    return n.extend({
        _stats_order: ["due", "without_task", "overdue", "new_today", "new_yesterday"],
        filter_presets: {
            without_task: [{
                name: "filter[tasks][]",
                value: "no_tasks"
            }],
            overdue: [{
                name: "filter[tasks][]",
                value: "failed_tasks"
            }],
            due: [{
                name: "filter[tasks][]",
                value: "today"
            }],
            new_today: [{
                name: "filter_date_from",
                value: moment().format("DD.MM.YYYY")
            }, {
                name: "filter_date_to",
                value: moment().format("DD.MM.YYYY")
            }],
            new_yesterday: [{
                name: "filter_date_from",
                value: moment().subtract(1, "days").format("DD.MM.YYYY")
            }, {
                name: "filter_date_to",
                value: moment().subtract(1, "days").format("DD.MM.YYYY")
            }]
        },
        events: {
            "click .pipeline-leads__stats-inner .pipeline-leads__stats-count": "onStatsFilterClick"
        },
        initialize: function(e) {
            e = e || {},
            this.options = e,
            this.$filter_form = t("#filter_form"),
            this.setElement(t("#pipeline__stats")),
            n.prototype.initialize.call(this)
        },
        render: function(e, n) {
            t.ajax({
                url: "/ajax/stats/pipeline/?deals_type=closed" + (e ? "&pipeline_id=" + e : ""),
                type: "POST",
                data: {
                    last_place: "leads"
                },
                dataType: "json"
            }).done(i.bind(function(t) {
                var o, r = t.response;
                t.response && (o = {
                    pipeline_id: e,
                    prospects: {
                        leads: r.show_forecast ? r.prospective_all : 0,
                        sum: r.show_forecast ? r.prospective_all_sum : 0
                    },
                    stats: i.chain(n).map(function(e, t) {
                        return {
                            type: t,
                            value: e
                        }
                    }).filter(function(e) {
                        return i.contains(this._stats_order, e.type)
                    }, this).sortBy(function(e) {
                        return i.indexOf(this._stats_order, e.type)
                    }, this).value()
                },
                this.$el.html(s({
                    ref: "/tmpl/leads/pipeline/stats.twig"
                }).render(o)),
                this.toggle_stats_active || (this.toggle_stats_active = !0,
                i.isFunction(this.options.onInit) && this.options.onInit()))
            }, this))
        },
        onStatsFilterClick: function(e) {
            var i = t(e.target)
              , s = i.data("type");
            "0" !== i.text() && (this.setCustomFilter(s),
            this._$document.trigger("filter:apply"))
        },
        setCustomFilter: function(e) {
            var t = this.filter_presets[e];
            t.length && i.each(t, function(e) {
                this.$filter_form.find('input[name="' + e.name + '"]').val(e.value).trigger("change")
            }, this)
        }
    })
}),
define("lib/interface/leads/mixins/pipeline_tags", ["require", "jquery", "underscore", "twig", "lib/common/user_rights", "lib/interface/fast_tags"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/common/user_rights")
      , o = e("lib/interface/fast_tags");
    return {
        __selectors: {
            item: ".pipeline_leads__item",
            items: ".pipeline_items__list",
            item_tag: ".pipeline_leads__tag:not(.pipeline_leads__tag-add)",
            scroller: ".pipeline-scroller"
        },
        events: {
            "click .pipeline_leads__tags-inner": "editTags"
        },
        editTags: function(e) {
            ("customers" === AMOCRM.getBaseEntity() || n.getRights(AMOCRM.getBaseEntity(), "manage_tags")) && this._editTags.apply(this, arguments)
        },
        _editTags: function(e) {
            var n = this
              , r = t(e.currentTarget)
              , a = r.closest(this.__selectors.item)
              , l = this.$(this.__selectors.scroller)
              , c = t(".list__body-right__top")
              , d = t(".pipeline-leads__stats")
              , u = t.makeArray(a.find(this.__selectors.item_tag).map(function() {
                return {
                    id: parseInt(t(this).data("id")) || 0,
                    name: t(this).text()
                }
            }))
              , h = "customers" === AMOCRM.getBaseEntity()
              , _ = !h || a.hasClass("js-can_edit");
            return _ && !this.fast_tags && (this.pipeline.disable(),
            this.pipeline.hs.scrollPause(),
            l.addClass("h-scroll-x-blocked"),
            this.fast_tags = this._addComponent(o, {
                $input_container: a,
                $container: l,
                class_name: "pipeline-item__multisuggest custom-scroll",
                id: [parseInt(a.data("id"))],
                topbar_offset: c.outerHeight(),
                $relative_to: t("#page_holder"),
                tags: u,
                area: ["list", "pipeline"],
                entity: AMOCRM.getBaseEntity(),
                render_hidden: !0,
                onInit: function() {
                    var e, t = this.options.$input_container;
                    this.$el.css({
                        position: "absolute",
                        margin: 0,
                        top: -1,
                        left: -1,
                        right: -1,
                        zIndex: 100
                    }).removeClass("h-hidden"),
                    e = t.outerHeight(),
                    this.$el.css("min-height", e),
                    this.setPositions()
                },
                onSetPositions: function() {
                    var e = l.get(0).getBoundingClientRect()
                      , i = d.length ? d.outerHeight() : 0
                      , s = d.length && d.visible() ? c.outerHeight() : 0;
                    this.$list.css({
                        width: this.$el.outerWidth(),
                        left: parseFloat(this.$list.css("left")) - e.left,
                        top: parseFloat(this.$list.css("top")) + (i + s - (t(window).scrollTop() + e.top))
                    }).addClass("fast-tags-suggest-pipeline")
                },
                onSaveSuccess: function(e) {
                    e && (n.search && n.search.filter && n.search.filter.tags_lib && n.search.filter.tags_lib.updateTags(this._tags_for_addition, this._tags_for_deletion),
                    this.options.$input_container.find(".pipeline_leads__middle-block").toggleClass("pipeline_leads__middle-block_has-tags", !!e.length).find(".pipeline_leads__tags-inner").replaceWith(s({
                        ref: "/tmpl/controls/tags.twig"
                    }).render({
                        items: i.map(e, function(e) {
                            return i.extend({
                                label: e.title
                            }, e)
                        })
                    })))
                },
                onDestroy: function() {
                    this.$el.remove(),
                    n.pipeline.enable(),
                    n.pipeline.hs.scrollResume(),
                    n.fast_tags = null,
                    l.removeClass("h-scroll-x-blocked")
                }
            }),
            r.removeAttr("data-loading")),
            !1
        }
    }
}),
define("lib/interface/leads/mixins/leads_sorting", ["require", "underscore", "jquery", "lib/common/urlparams"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("lib/common/urlparams");
    return {
        events: {
            "click .js-sort__item": "sortLeads",
            "click .context-menu__item_header": "sortStopPropagation"
        },
        sortLeads: function(e) {
            var n = i(e.currentTarget)
              , o = {
                sort_unread: n.attr("data-sort-unread"),
                sort_by: n.attr("data-sort-by"),
                sort_type: n.attr("data-sort-type")
            }
              , r = {
                sorting: {}
            }
              , a = s.getQueryParam("term") || ""
              , l = n.closest(".context-menu-pipeline");
            t.isUndefined(o.sort_unread) ? r.sorting = {
                by: o.sort_by,
                type: function() {
                    return n.hasClass("context-menu__item_active") ? "asc" === o.sort_type ? "desc" : "asc" : o.sort_type
                }()
            } : r.sorting.unread_first = !o.sort_unread,
            i.ajax({
                url: "/ajax/v1/leads/pipeline/" + this.pipeline_id + "/settings",
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                context: this,
                data: JSON.stringify({
                    request: {
                        settings: r
                    }
                })
            }).done(function(e) {
                var s = e && e.response && e.response.settings && e.response.settings.sorting;
                return e.error || t.isUndefined(s) ? this.showErrorModal() : (a && l.find(".js-sort__item").each(function(e, t) {
                    i(t).attr("data-sort-by") === s.by ? i(t).attr("data-sort-type", s.type).addClass("context-menu__item_active") : i(t).attr("data-sort-type", "desc").removeClass("context-menu__item_active")
                }),
                void this._$document.trigger("page:reload"))
            }).fail(function() {
                this.showErrorModal()
            })
        },
        sortStopPropagation: function(e) {
            e.stopPropagation()
        }
    }
}),
define("lib/pages/leads/pipeline", ["require", "jquery", "underscore", "twig", "cocktail", "lib/pages/base/pipeline_list", "lib/interface/search/search", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/base/delete", "lib/components/base/pipeline", "lib/components/base/quick_lead", "lib/components/base/autoload", "lib/interface/leads/pipeline/unsorted/index", "lib/interface/left_menu/index", "lib/components/base/mousewheel_topbar", "lib/interface/leads/pipeline/headline_filter", "lib/common/urlparams", "lib/common/fn", "lib/common/user_rights", "lib/components/leads/api", "lib/interface/leads/mixins/pipeline_tags", "lib/interface/leads/mixins/leads_more", "lib/interface/unsorted/mixins/settings", "lib/components/lists/mixins/navigation", "lib/components/lists/actions/import", "lib/components/lists/actions/export", "lib/interface/leads/mixins/leads_sorting"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/pages/base/pipeline_list"), a = e("lib/interface/search/search"), l = e("lib/components/base/modal"), c = e("lib/components/base/confirm"), d = e("lib/components/base/delete"), u = e("lib/components/base/pipeline"), h = e("lib/components/base/quick_lead"), _ = e("lib/components/base/autoload"), p = e("lib/interface/leads/pipeline/unsorted/index"), m = e("lib/interface/left_menu/index"), f = e("lib/components/base/mousewheel_topbar"), g = e("lib/interface/leads/pipeline/headline_filter"), b = e("lib/common/urlparams"), v = e("lib/common/fn"), y = e("lib/common/user_rights"), w = e("lib/components/leads/api"), C = e("lib/interface/leads/mixins/pipeline_tags"), k = e("lib/interface/leads/mixins/leads_more"), x = e("lib/interface/unsorted/mixins/settings"), M = e("lib/components/lists/mixins/navigation"), A = e("lib/components/lists/actions/import"), O = e("lib/components/lists/actions/export"), $ = e("lib/interface/leads/mixins/leads_sorting");
    return t = r.extend({
        preload: ["/tmpl/leads/common/search_summary.twig", "/tmpl/leads/pipeline/item.twig", "/tmpl/leads/pipeline/index.twig", "/tmpl/leads/pipeline/inner.twig", "/tmpl/leads/pipeline/stats.twig", "/tmpl/leads/pipeline/header_info.twig"],
        template: function() {
            return this._getTemplateAndHolder().template
        },
        endpoint: "/ajax/leads/pipeline/",
        page: 2,
        status_change_ajax: {},
        unsorted_settings: {},
        item_template: function() {
            return n({
                ref: "/tmpl/leads/pipeline/item.twig"
            })
        },
        _selectors: function() {
            return {
                first_status_row: ".pipeline_cell.pipeline_status:not(.pipeline_cell-unsorted):first .js-pipeline-row",
                list_top_search_summary: "#list-top-search__summary",
                leads_item_by_id: '.pipeline_leads__item[data-id="%s"]',
                manage: "#pipeline_manage",
                more: "#leads_pipeline_load_more",
                pipeline: "#pipeline_holder",
                pipeline_cells: ".pipeline_cell",
                pipeline_list_by_id: '.pipeline_items__list[data-id="%s"]',
                status_head_by_id: "#status_id_%s",
                status_info_by_id: "#status_id_%s .pipeline_status__head_info"
            }
        },
        _classes: function() {
            return {
                cell: "pipeline_cell",
                cell_head: "pipeline_cell-head",
                unsorted_head: "pipeline_cell-head-unsorted",
                unsorted_wrapper: "pipeline_cell-unsorted",
                unsorted_plug: ".pipeline-unsorted",
                unsorted_plug_wrapper: "pipeline-unsorted-wrapper",
                row: "js-pipeline-row",
                item: "pipeline_leads__item",
                quick_lead_wrapper: "pipeline_leads__quick_add__wrapper"
            }
        },
        events: {
            "click #leads_pipeline_load_more": "loadMore",
            "click .pipeline_leads__tags-inner": "editTags",
            "unsorted:accept:click .js-unsorted-item": "unsortedAccept",
            "unsorted:accept:failed .js-unsorted-item": "unsortedAcceptFailed",
            "unsorted:lead:render .js-unsorted-item": "unsortedReplaceWithLead"
        },
        components: function() {
            return [[_, this._getAutoloadOptions()], [p, this._getUnsortedOptions()], [h, this._getQuickLeadOptions()]]
        },
        construct: function(e) {
            this.params = e || {},
            this.response = s.isEmpty(e.response) ? AMOCRM.constant("leads_pipeline_template_params") || {} : e.response,
            this.pipeline_id = this.response.pipeline_id,
            o.mixin(this, x),
            this.unsorted_settings = this.getUnsortedSettings(this.response && this.response.unsorted || {}),
            s.isEmpty(AMOCRM.constant("unsorted")) && AMOCRM.constant("unsorted", this.unsorted_settings),
            this.can_load_more = !0,
            this.leads_numeral = [AMOCRM.lang.leads_1, AMOCRM.lang.leads_2, AMOCRM.lang.leads_5].join(","),
            this.current_statuses = i.makeArray(this.$(this._selector("row")).map(function() {
                return parseInt(i(this).attr("data-id"))
            })),
            this._prepareFilter(this.response),
            this.renderHeadStatuses(),
            this.initPipeline(),
            this.checkImportHash(),
            0 === v.scrollBarWidth ? this._elem("more").length > 0 && v.isFFWithBuggyScrollbar() && this.$(".hs__pane").css("background-color", this._$body.css("background-color")) : this._elem("pipeline").addClass("ff-scroll-has-height"),
            this.search = this._addComponent(a, this._getSearchOptions())
        },
        destruct: function() {
            this._elem("more").off(),
            AMOCRM.constant("max_page", !1)
        },
        _updateResponseData: function(e) {
            var t = {
                pipeline_id: e.pipeline_id,
                use_filter: "y" === b.getQueryParam("useFilter") || b.getQueryParam("term")
            };
            return s.extend({}, e, t)
        },
        _getEndpoint: function(e) {
            var t, i;
            return e = e || [],
            t = e[0] && +e[0],
            i = e[1],
            this.endpoint + (t ? t + "/" : "") + (i ? "?" + i : "")
        },
        _renderPage: function(e) {
            e = s.extend(e, this._getTemplateAndHolder()),
            r.prototype._renderPage.call(this, e)
        },
        _getSearchOptions: function() {
            return {
                filter: {
                    el: i("#sidebar"),
                    is_list: !0,
                    pipeline_id: this.pipeline_id,
                    has_pipelines: this.response.has_pipelines
                }
            }
        },
        _getAutoloadOptions: function() {
            return {
                onLoadMore: s.bind(this.loadMore, this)
            }
        },
        _getUnsortedOptions: function() {
            return {
                el: this._findElem("unsorted_wrapper"),
                pipeline: this,
                statuses: this._getCurrentPipelineStatuses()
            }
        },
        _getCurrentPipelineStatuses: function() {
            var e = s.clone(this.current_statuses);
            return e.shift(),
            e
        },
        renderHeadStatuses: function(e) {
            var t = !1;
            w.getLeadsByStatus(this.pipeline_id).done(s.bind(function(i) {
                AMOCRM.constant("max_page", i.all_count),
                s.each(i.leads_by_status, function(e) {
                    this._elem("status_info_by_id", e.status).html(n({
                        ref: "/tmpl/leads/pipeline/header_info.twig"
                    }).render({
                        count: e.count + " " + e.leads_numeral + ": ",
                        sum: e.price_formated
                    })),
                    e.count > 10 && (t = !0)
                }, this),
                this._countSummary(i.leads_by_status),
                e || this._findElem("pipeline_cells").find(".pipeline_status__head_info").css({
                    opacity: 1,
                    maxHeight: 20
                }),
                t && this._elem("more").addClass("leads-pipeline__autoload-load-more-shown")
            }, this))
        },
        _countSummary: function(e) {
            var t = s.pluck(this.response.leads_info_by_status, "ID")
              , i = {
                count: 0,
                budget: 0,
                due: 0,
                without_task: 0,
                overdue: 0,
                new_today: 0,
                new_yesterday: 0
            };
            e && (s.each(e, function(e) {
                s.contains(t, e.status) && (i.count += e.count,
                i.budget += e.total_price,
                i.due += e.task_today,
                i.without_task += e.without_task,
                i.overdue += e.failed_task,
                i.new_yesterday += e.created_yesterday,
                i.new_today += e.created_today)
            }, this),
            this.renderHeadlineStats(this.pipeline_id, i),
            this._elem("list_top_search_summary").html(n({
                ref: "/tmpl/leads/common/search_summary.twig"
            }).render({
                summary: i
            })))
        },
        _renderSummary: s.noop,
        renderHeadlineStats: function() {
            var e = [].slice.apply(arguments)
              , t = s.bind(function() {
                this.headline_stats.subview.render(e[0], e[1])
            }, this);
            y.getRights("leads", "view") && y.getRights("leads", "edit") && (this.headline_stats && this.headline_stats.subview ? t() : (this.headline_stats = this._addComponent(f, {
                HeadlineView: g,
                reset_on_init: !(AMOCRM.first_load || AMOCRM.data.entity_changed || !this.response)
            }),
            t()))
        },
        unsortedAccept: function(e) {
            var t = i(e.currentTarget)
              , s = this._elem("pipeline").find(this._selector("quick_lead_wrapper"));
            s.length ? s.after(t) : this._elem("pipeline").find(this._selector("first_status_row")).prepend(t)
        },
        unsortedAcceptFailed: function(e) {
            this._findElem("pipeline_list_by_id", "unsorted").prepend(e.currentTarget)
        },
        unsortedReplaceWithLead: function(e, t, s) {
            var n = i(e.currentTarget);
            n.before(this.item_template().render({
                item: t
            })),
            this.renderHeadStatuses(!0)
        },
        loadMore: function() {
            var e, t, n, o = {};
            if (!(AMOCRM.data.is_card || AMOCRM.is_touch_device && m.isHoverMenuVisible())) {
                if (this.more_loading && this.page--,
                this.$el.trigger("load-more", [++this.page]),
                this.more_loading || !this.can_load_more)
                    return !1;
                this.more_loading = !0,
                this._elem("more").show().addClass("pipeline_leads__load_more-loading"),
                e = 10 * (this.page - 1),
                i(".pipeline_items__list").each(function() {
                    i(this).parent().hasClass("pipeline_cell-unsorted") || (t = i(this).data("id"),
                    n = i(this).children(),
                    o[t] = e - n.length,
                    i(this).parent().hasClass("pipeline_cell-quick_add") && (o[t] += 1))
                }),
                i.ajax({
                    url: "/ajax/leads/multiple/loadmore/?" + b.getQueryString(),
                    data: {
                        json: !0,
                        PAGEN_1: this.page,
                        ELEMENT_COUNT: 10,
                        pipeline: "Y",
                        pipeline_id: this.pipeline_id,
                        LOST_ELEMENTS: o
                    },
                    type: "POST",
                    dataType: "json"
                }).always(s.bind(function() {
                    this._elem("more").hide().removeClass("pipeline_leads__load_more-loading"),
                    this.more_loading = !1
                }, this)).done(s.bind(function(e) {
                    var t = {};
                    e.items && e.items.length ? (s.each(e.items, function(e) {
                        t[e.status] || (t[e.status] = ""),
                        e.company_name.name && (e.contact_company_name = {
                            name: e.company_name.name
                        }),
                        t[e.status] += this.item_template().render({
                            lang: AMOCRM.lang,
                            item: e,
                            can_edit: y.getRights("leads", "change_status")
                        })
                    }, this),
                    s.each(t, function(e, t) {
                        this.$(this._selector("row") + '[data-id="' + t + '"]').append(e)
                    }, this),
                    this.pipeline.refresh()) : (Modernizr.csstransitions ? this._elem("more").removeClass("leads-pipeline__autoload-load-more-shown").one(AMOCRM.transition_event, function() {
                        i(this).hide()
                    }) : this._elem("more").hide(),
                    this.can_load_more = !1)
                }, this))
            }
        },
        _getQuickLeadOptions: function() {
            var e = this;
            return {
                $el: this._findElem("quick_lead_wrapper"),
                template_params: this.response,
                data: {
                    pipeline: "Y"
                },
                onToggle: s.bind(function() {
                    this.headline_stats && this.headline_stats.onLayoutChange()
                }, this),
                onSuccess: function(t, s) {
                    var o, r = {
                        name: {
                            text: s.name,
                            url: "/leads/detail/" + t[0].dealId
                        },
                        id: t[0].dealId,
                        lead_mark: "yellow",
                        can_edit: s.can_edit,
                        budget: s.budget,
                        date_create: Math.floor(Date.now() / 1e3)
                    };
                    s.main_contact.name && (r.main_contact = {
                        name: s.main_contact.name
                    }),
                    s.company.name && (r.contact_company_name = {
                        name: s.company.name
                    }),
                    (y.isAdmin() || y.getRights("leads", "edit") || y.getRights("leads", "view")) && (o = i(n({
                        ref: "/tmpl/leads/pipeline/item.twig"
                    }).render({
                        item: r
                    })),
                    this.$el.after(o).trigger("lead:inserted", [o])),
                    e.renderHeadStatuses(!0),
                    e.pipeline && e.pipeline.refresh()
                }
            }
        },
        initPipeline: function() {
            var e = this
              , t = s.bind(function() {
                this.headline_stats && this.headline_stats.onLayoutChange()
            }, this);
            this.pipeline = this._addComponent(u, {
                el: this.$el,
                hs_options: {
                    static_width: !0,
                    hide_scrollbar: !0,
                    no_boundary: !0
                },
                manage: {
                    el: this._elem("manage"),
                    drop: function(t, s) {
                        var n = t.draggable.closest(e._selector("row")).data("id")
                          , o = i(this).data("status-id")
                          , r = e._getLeadId(t.draggable);
                        e.leadsManage({
                            status_old: n,
                            status_new: o,
                            lead_id: r,
                            uiItem: t.draggable
                        })
                    }
                },
                appendTo: this.$el,
                change: s.bind(function(e, t) {
                    var i = this._getLeadId(e.item);
                    this.leadsManage({
                        status_old: t.item_old.data("id"),
                        status_new: t.item_new.data("id"),
                        lead_id: i,
                        uiItem: e.item
                    })
                }, this),
                immutable: function(e, t) {
                    e.item.removeAttr("style")
                },
                start: function() {
                    m.stopHoverMenu(),
                    e.headline_stats && e.headline_stats.stopHeadlineStats(),
                    e.$el.addClass("pipeline-manage-" + this.getAttribute("data-id")),
                    e.$el.trigger("unsorted:drop")
                },
                stop: function() {
                    m.startHoverMenu(),
                    e.headline_stats && e.headline_stats.startHeadlineStats(),
                    t()
                },
                manageHide: function() {
                    e.$el.removeClass("pipeline-manage-" + this.getAttribute("data-id"))
                }
            })
        },
        removeConfirm: function(e) {
            var t = this
              , n = i("#lead_" + e.lead_id).attr("title");
            new d({
                entity_name: s.escape(n),
                accept: function() {
                    var s = this;
                    this.requestStart().xhr = i.ajax({
                        url: "/private/deals/delete.php",
                        type: "POST",
                        dataType: "json",
                        data: {
                            ID: e.lead_id,
                            ACTION: "DELETE",
                            pipeline: "Y"
                        }
                    }).done(function(i) {
                        "OK" === i.STATUS ? (s.requestSuccess(v.i18n("Deleted!")),
                        e.uiItem.remove(),
                        t.reloadBody()) : (s.requestFail(),
                        t.pipelineSort.sortable("cancel")),
                        t.renderHeadStatuses(!0),
                        t.$el.removeClass("pipeline-show-manage")
                    })
                },
                destroy: function() {
                    e.uiItem.length && e.uiItem.removeClass("h-hidden").removeAttr("style")
                }
            })
        },
        reloadBody: function() {
            var e = this._elem("pipeline").find(".pipeline_leads__item");
            e.length || this.$document.trigger("page:reload")
        },
        statusChange: function(e) {
            var t = this;
            (142 === e.status_new || 143 === e.status_new) && e.uiItem.find(".pipeline_leads__task-icon_yellow").length < 1 ? new c({
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.card_page_save_complete_tasks_button_decline,
                accept_text: AMOCRM.lang.card_page_save_complete_tasks_button_accept,
                button_class: "button-input_blue",
                text: AMOCRM.lang.card_page_save_complete_tasks,
                destroy: function() {
                    t.statusChangeSave(e, this.accepted)
                }
            }) : this.statusChangeSave(e)
        },
        statusChangeSave: function(e, t) {
            this.status_change_ajax[e.lead_id] && 4 !== this.status_change_ajax[e.lead_id].readyState && this.status_change_ajax[e.lead_id].abort(),
            this.status_change_ajax[e.lead_id] = i.ajax({
                url: "/ajax/leads/multiple/change_status/",
                DASHBOARD: "true",
                type: "POST",
                dataType: "json",
                data: {
                    parties: {
                        id: [e.lead_id]
                    },
                    close_tasks: t ? 1 : 0,
                    STATUS_ID: e.status_new,
                    PIPELINE_ID: this.pipeline_id
                }
            }).always(s.bind(function() {
                this.status_change_ajax[e.lead_id] = void 0,
                this.renderHeadStatuses(!0)
            }, this)).done(s.bind(function(t) {
                "success" === t.status ? (-1 === i.inArray(parseInt(e.status_new), this.current_statuses) && ((new l).showSuccess(),
                e.uiItem.remove()),
                e.uiItem.trigger("lead:status-change", [e.status_new, e.status_old]),
                this.statusSuccess(e.uiItem, e.status_new, e.status_old)) : "error" === t.status && this.statusChangeRevert(e),
                this.$el.removeClass("pipeline-show-manage")
            }, this)).fail(s.bind(function(e) {
                "abort" !== e.statusText && this.showErrorModal()
            }, this))
        },
        showErrorModal: function() {
            this._error_modal || (this._error_modal = this._addComponent(l, {
                destroy: s.bind(function() {
                    delete this._error_modal
                }, this)
            }).showError(null, !1))
        },
        statusChangeRevert: function(e) {
            var t = this._elem("pipeline_list_by_id", e.status_old)
              , i = this._findElem("leads_item_by_id", e.lead_id)
              , s = this._findElem("quick_lead_wrapper")
              , n = t.find(".pipeline_leads__quick_add__wrapper").length;
            n ? i.detach().insertAfter(s) : i.detach().prependTo(t),
            this.renderHeadStatuses(!0),
            new c({
                class_name: "modal-list change-status-error-modal",
                accept_text: "OK",
                text: AMOCRM.lang.multiple_change_status_error3
            })
        },
        leadsManage: function(e) {
            switch (e.status_new) {
            case "delete":
                "unsorted" === e.status_old ? e.uiItem.trigger("unsorted:decline") : this.removeConfirm(e);
                break;
            default:
                "unsorted" === e.status_old ? e.uiItem.trigger("unsorted:accept", [e.status_new]) : e.status_old !== e.status_new && this.statusChange(e),
                e.uiItem.removeAttr("style")
            }
        },
        _getLeadId: function(e) {
            var t = e.find(".pipeline_leads__lead-title-text").attr("id");
            return t ? t.split("_")[1] : 0
        },
        statusSuccess: function(e, t, s) {
            var n = e.parent()
              , o = -1 !== i.inArray(t, this.current_statuses);
            if (n.hasClass("pipeline_leads__list") && (n = n.parent()),
            o) {
                var r = "leads_" + t;
                if (n.attr("id") !== r) {
                    var a = i("#" + r);
                    if (a.length > 0)
                        return a.hasClass("pipeline_leads__list") || (a = a.children()),
                        a.append(e),
                        void this.statusSuccess(e, t, s)
                }
            } else
                b.getQueryString().length > 0 && this._$document.trigger("page:reload", ["pipeline"]);
            if ("142" === s || "143" === s) {
                var l = "leads_" + s
                  , c = i("#" + l);
                c.length > 0 && (c.hasClass("pipeline_leads__list") || (c = c.children()),
                c.children().length < 1 && this._$document.trigger("page:reload", ["pipeline"]))
            }
            e.show()
        }
    }),
    o.mixin(t, C, M, k, A, O, $),
    t
}),
define("lib/interface/account/statuses", ["require", "jquery", "underscore", "twig", "lib/components/base/form", "lib/components/base/confirm", "lib/components/base/modal", "lib/common/urlparams", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/base/form"), r = e("lib/components/base/confirm"), a = e("lib/components/base/modal"), l = e("lib/common/urlparams"), c = e("lib/common/fn"), d = "/tmpl/settings/statuses/single.twig";
    return t = o.View.extend({
        ns: ".statuses:component",
        wasSaved: !1,
        _selectors: function() {
            return {
                editable_statuses: ".statuses-sortable",
                add_item_selector: "#add-status-field",
                save_button: "#save_statuses_settings",
                reset_button: "#reset_statuses_settings"
            }
        },
        _classes: function() {
            return {
                status: "status",
                palette: "color-palette",
                sort: "status__sort",
                color: "status__color",
                color_picker: "color-picker",
                name_input: "status-name",
                change_lead_status: "change-lead-status"
            }
        },
        events: s.extend({}, o.View.prototype.events || {}, {
            "click .color-picker": "toggleColorPalette",
            "click .status-possible-color": "chooseColor",
            "click #add-status-field": "addNewStatus",
            "click .remove-status-variant": "removeClick",
            "click #reset_statuses_settings": "revert",
            "click #save_statuses_settings:not(.button-input-disabled)": "save",
            "change .status__color": "chooseColorBackground",
            "click #remove_pipeline": "remove"
        }),
        initialize: function(e) {
            o.View.prototype.initialize.apply(this, arguments);
            var t = this;
            if (this.options = s.extend({
                colors: AMOCRM.constant("statuses_colors"),
                limit: 10
            }, e || {}),
            !this.options.colors)
                throw new Error("Not enough parameters are presented");
            this._$document.on("click" + this.ns, s.bind(this.closeColorPalette, this)),
            this.items_count = this._elem("editable_statuses").find(this._selector("status")).length,
            this._elem("editable_statuses").attr("data-count", this.items_count),
            this._$document.on("toggler:pipeline:changed", function(e, i) {
                e.stopPropagation(),
                e.preventDefault(),
                i.oldId == t.pipelineId && (t.modified ? new r({
                    class_name: "modal-list",
                    accept_text: AMOCRM.lang.button_save,
                    decline_text: AMOCRM.lang.button_exit,
                    button_class: "button-input_blue",
                    text: AMOCRM.lang.confirm_close_modal,
                    accept: function() {
                        t.idMoveTo = i.id,
                        t.save.call(t),
                        t._$document.on("pipeline:saved", function() {
                            t._$document.trigger("toggler:switch")
                        }),
                        this.modal.destroy()
                    },
                    destroy: function() {
                        this.accepted === !1 && (t.revert.call(t),
                        t.reverted = !0,
                        t._$document.trigger("toggler:switch"))
                    }
                }) : t._$document.trigger("toggler:switch"))
            }),
            this.model.on("has_changes", s.bind(function() {
                this.setChanges(!0)
            }, this)).on("has_reverted", s.bind(function() {
                this.setChanges(this.isNew())
            }, this)),
            this.makeSortable(!0),
            this.pipelineId = this.model.get("id"),
            this.$el.find("input#pipeline_leads").length && (this.pipelineLeads = this.$el.find("input#pipeline_leads").val()),
            this.setChanges(this.isNew())
        },
        destroy: function() {
            this._$document.off(this.ns),
            this._$document.off("toggler:pipeline:changed"),
            this.setChanges(!1),
            this.makeSortable(!1),
            this.stopListening().undelegateEvents(),
            this.$el.off()
        },
        isNew: function() {
            return "new_pipe" == this.pipelineId
        },
        focusOnName: function() {
            var e = this.$el.find("#pipeline_name");
            e.length && "none" != e.css("display") && (e.focus(),
            e.val(e.val()))
        },
        toggleColorPalette: function(e) {
            var t = i(e.currentTarget)
              , s = (t.attr("id").replace("-color-picker", ""),
            t.next(this._selector("palette")));
            e.stopPropagation(),
            s.is(":hidden") ? (this.closeColorPalette(),
            this.$color_palette = s,
            this.$color_palette.show().addClass("color-palette-opened")) : this.closeColorPalette()
        },
        chooseColorBackground: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(this._selector("status"));
            s.find(this._selector("color_picker")).css("background-color", t.val())
        },
        chooseColor: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(this._selector("status"))
              , n = t.children("span").css("background-color");
            n.indexOf("rgb") >= 0 && (n = this.rgb2hex(n)),
            s.find(this._selector("color")).val(n).change(),
            this.closeColorPalette()
        },
        addNewStatus: function(e) {
            var t = this._elem("editable_statuses").find(this._selector("status") + ":last").find("input");
            !t.length || t.val() ? this.addStatus() : AMOCRM.is_touch_device || t.focus()
        },
        removeClick: function(e) {
            var t = i(e.currentTarget).attr("id").replace("remove-", "");
            return 1 === this.$(this._selector("editable_statuses")).find(this._selector("status")).length ? (this.showMessage(AMOCRM.lang.cant_status_delete, "error"),
            !1) : (-1 === t.indexOf("new") ? this.confirmation(t, s.bind(function() {
                this.removeStatus(t)
            }, this)) : this.removeStatus(t),
            !0)
        },
        showMessage: function(e, t) {
            new a({
                init: function() {
                    switch (t) {
                    case "success":
                        this.showSuccess(e);
                        break;
                    case "error":
                        this.showError(e, !1)
                    }
                }
            })
        },
        rgb2hex: function(e) {
            e = e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            var t = "#" + ("0" + parseInt(e[1], 10).toString(16)).slice(-2) + ("0" + parseInt(e[2], 10).toString(16)).slice(-2) + ("0" + parseInt(e[3], 10).toString(16)).slice(-2);
            return t.toUpperCase()
        },
        revert: n._preload([d], "_revert"),
        _revert: function(e) {
            var t, n = "";
            e && e.stopPropagation && e.stopPropagation(),
            o.View.prototype.revert.call(this),
            this.pipelineId && (t = l.QStoJSON(i.param(this.model.toJSON()), !0).request.pipelines[this.isNew() ? "add" : "update"][this.pipelineId],
            s.each(t.statuses, function(e, t) {
                e.ID = t
            }),
            s.each(s.sortBy(t.statuses, "SORT"), function(e, t) {
                t = e.ID,
                -1 === s.indexOf([142, 143], parseInt(t)) && (n += this.getStatusSingleHtml({
                    id: t,
                    name: decodeURIComponent(e.name).replace(/(.)?\+(.)/g, "$1 $2"),
                    color: decodeURIComponent(e.color),
                    sort: e.SORT,
                    editable: "Y",
                    "new": "N"
                }))
            }, this)),
            this.$(this._selector("change_lead_status")).remove(),
            this._elem("editable_statuses").find(this._selector("status")).remove(),
            this._elem("editable_statuses").children("div:first").prepend(n),
            this.items_count = this._elem("editable_statuses").find(this._selector("status")).length,
            this._elem("editable_statuses").attr("data-count", this.items_count),
            this.model.trigger("statuses:reverted")
        },
        save: function(e) {
            var t, n = this;
            e = e || {},
            !this.saving && this.validate() && (this.options.in_modal || (t = i('<div class="default-overlay aside-page-overlay" id="pipe_settings_overlay"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            i("#page_holder").append(t),
            t.trigger("overlay:show"),
            this._$document.one("pipeline:overlay:hide", function() {
                t.trigger("overlay:hide")
            })),
            this.saving = !0,
            this._elem("save_button").trigger("button:load:start"),
            i.ajax({
                url: this.$el.attr("action"),
                type: "POST",
                data: this.model.toJSON()
            }).always(s.bind(function() {
                this.saving = !1
            }, this)).done(s.bind(function(t) {
                this.model.initialize(),
                this.wasSaved = !0,
                this._elem("save_button").trigger("button:saved"),
                this.setChanges(!1),
                s.isFunction(e.callback) && e.callback(),
                this.model.trigger("statuses:saved"),
                this.idMoveTo ? (i(document).trigger("pipeline:saved", [{
                    id: this.idMoveTo
                }]),
                null == this.idMoveTo) : i(document).trigger("pipeline:saved", [{
                    id: this.pipelineId,
                    newPipeline: s.toArray(t.response.pipelines[this.isNew() ? "add" : "update"].pipelines)[0]
                }])
            }, this)).fail(function() {
                n.showMessage(AMOCRM.lang.modal_error_caption, "error")
            }))
        },
        remove: function(e) {
            var t, s = this;
            return this.pipelineLeads > 0 ? void new r({
                class_name: "modal-list",
                accept_text: AMOCRM.lang.cf_birthday_ok,
                text: AMOCRM.lang.pipelines_statuses_error_pipeline_has_leads,
                init: function(e) {
                    this.$modal_body.find(".button-cancel").hide()
                },
                accept: function() {
                    this.modal.destroy()
                }
            }) : (this.options.in_modal || (t = i('<div class="default-overlay aside-page-overlay" id="pipe_settings_overlay"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            i("#page_holder").append(t),
            t.trigger("overlay:show"),
            this._$document.one("pipeline:overlay:hide", function() {
                t.trigger("overlay:hide")
            })),
            void i.ajax({
                url: "/ajax/v1/pipelines/delete",
                type: "POST",
                data: {
                    "request[id]": s.pipelineId
                },
                beforeSend: function(e, t) {},
                success: function() {
                    s.wasSaved = !0,
                    i(document).trigger("pipeline:removed")
                }
            }))
        },
        validate: function() {
            var e = !0;
            return this._elem("editable_statuses").find(this._selector("status") + ' input[type="text"]').each(function() {
                this.value.trim() || (this.value = this.value.trim(),
                i(this).addClass("validate-has-error"),
                e = !1)
            }),
            e
        },
        changeLeadsStatus: function(e) {
            var t = e.attr("data-old-status")
              , s = e.attr("data-new-status");
            i.ajax({
                url: "/ajax/leads/multiple/change_status/",
                type: "POST",
                data: {
                    STATUS_ID: s,
                    OLD_STATUS: t
                }
            }),
            e.remove()
        },
        closeColorPalette: function() {
            this.$color_palette && (this.$color_palette.removeClass("color-palette-opened").hide(),
            this.$color_palette = !1)
        },
        removeStatus: function(e) {
            i("#" + e).remove(),
            this.items_count--,
            this.reSort(),
            this.checkDeleted(),
            this._elem("editable_statuses").attr("data-count", this.items_count),
            this.model.trigger("status:removed")
        },
        confirmation: function(e, t) {
            var s, n = this, o = i("#" + e).children(this._selector("name_input")), a = this.$el.find("#statuses_editable").not(o), l = a.find(this._selector("name_input") + ":first"), d = o.val();
            l.attr("id") === o.attr("id") && (l = a.find(this._selector("name_input")).eq(1)),
            s = l.val(),
            d.length < 1 && (d = o.attr("placeholder")),
            s.length < 1 && (s = l.attr("placeholder"));
            var u = parseInt(o.attr("data-id"))
              , h = parseInt(l.attr("data-id"));
            new r({
                class_name: "modal-list",
                text: AMOCRM.lang.status_delete + " Ђ" + c.escapeHTML(d) + "ї? " + AMOCRM.lang.status_delete2 + " Ђ" + c.escapeHTML(s) + "ї",
                accept: function() {
                    t(),
                    n.$el.append('<input type="hidden" name="change_status" class="change-lead-status" data-old-status="' + u + '" data-new-status="' + h + '">'),
                    this.modal.destroy()
                }
            })
        },
        getStatusSingleHtml: function(e) {
            return n({
                ref: d
            }).render({
                status: e,
                colors: this.options.colors
            })
        },
        addStatus: function() {
            !this.options.limit || this.items_count + 2 < this.options.limit ? n._preload([d], "_addStatus").apply(this, arguments) : (new a).showError(AMOCRM.lang.limit_error_statuses, !1)
        },
        _addStatus: function() {
            var e = i(this.getStatusSingleHtml({
                id: "new_" + ++this.items_count,
                name: AMOCRM.lang.status_name,
                color: this.options.colors[0],
                sort: 10 * this.items_count,
                editable: "Y",
                "new": "Y",
                pipeline_id: this.pipelineId
            }));
            this._elem("editable_statuses").attr("data-count", this.items_count),
            this._elem("add_item_selector").before(e),
            e.find("input").change(),
            AMOCRM.is_touch_device || e.find(this._selector("name_input")).focus(),
            this.model.trigger("status:added")
        },
        reSort: function(e, t) {
            this.$(this._selector("sort")).each(s.bind(function(e, t) {
                i(t).val(10 * (e + 1)).change()
            }, this))
        },
        makeSortable: function(e) {
            e ? this._elem("editable_statuses").sortable({
                items: this._selector("status") + ":not(.sort-disabled)",
                containment: this._elem("editable_statuses"),
                sortAnimate: !AMOCRM.is_touch_device,
                axis: "y",
                handle: ".status__handle",
                update: s.bind(this.reSort, this),
                tolerance: "pointer"
            }) : this._elem("editable_statuses").find(this._selector("status") + ":not(.sort-disabled)").each(function() {
                i(this).data("ui-sortable") && i(this).sortable("destroy")
            })
        },
        setChanges: function(e) {
            this.modified = e;
            var t = this.options.confirm || {};
            this._elem("reset_button")[this.modified ? "show" : "hide"](),
            this._elem("save_button").trigger(this.modified ? "button:save:enable" : "button:save:disable"),
            this.modified ? AMOCRM.router.registerPreventConfig(s.extend({}, {
                message: AMOCRM.lang.confirm_close_modal,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: s.bind(function(e) {
                    this.save({
                        callback: function() {
                            e()
                        }
                    })
                }, this)
            }, t)) : AMOCRM.router.removePreventConfig(),
            AMOCRM.router.preventPageChange(this.modified)
        }
    })
}),
define("lib/components/modals/statuses", ["require", "jquery", "underscore", "twig", "elements_view", "lib/interface/account/statuses", "lib/components/base/modal", "lib/components/leads/api", "lib/interface/controls/responsive_toggler_b"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view"), r = e("lib/interface/account/statuses"), a = e("lib/components/base/modal"), l = e("lib/components/leads/api"), c = e("lib/interface/controls/responsive_toggler_b"), d = "/tmpl/settings/statuses/index.twig";
    return t = o.extend({
        ns: ".statuses:modal",
        _forms: [],
        fakePipeline: {
            id: "new_pipe",
            name: AMOCRM.lang.pipelines_statuses_new_pipeline,
            class_name: "toggler-new-pipeline-fake",
            leads: 0,
            statuses: {
                142: {
                    color: "#ccff66",
                    editable: "N",
                    id: 142,
                    name: AMOCRM.lang.pipelines_statuses_closed_won,
                    pipeline_id: "new_pipe",
                    sort: 1e4
                },
                143: {
                    color: "#d5d8db",
                    editable: "N",
                    id: 143,
                    name: AMOCRM.lang.pipelines_statuses_closed_lost,
                    pipeline_id: "new_pipe",
                    sort: 11e3
                },
                new_1: {
                    color: "#99ccff",
                    editable: "Y",
                    id: "new_1",
                    name: AMOCRM.lang.pipelines_statuses_first_contact,
                    pipeline_id: "new_pipe",
                    sort: 10
                },
                new_2: {
                    color: "#ffff99",
                    editable: "Y",
                    id: "new_2",
                    name: AMOCRM.lang.pipelines_statuses_conversations,
                    pipeline_id: "new_pipe",
                    sort: 20
                },
                new_3: {
                    color: "#ffcc66",
                    editable: "Y",
                    id: "new_3",
                    name: AMOCRM.lang.pipelines_statuses_taking_decision,
                    pipeline_id: "new_pipe",
                    sort: 30
                }
            }
        },
        _classes: function() {
            return {
                body: "modal-body"
            }
        },
        _selectors: function() {
            return {
                add_pipeline: "#go-to-add-pipeline"
            }
        },
        events: {
            "click #cf_field_add:not(.button-input-disabled)": "addFieldClick",
            "click .control-toggler__item": "togglerClick",
            "click #edit-pipeline-name": "onEditClick",
            "click #go-to-add-pipeline": "goToAddPipeline"
        },
        togglerClick: function(e) {
            var t = this
              , n = i(e.target)
              , o = this.$el.find(".responsive_toggler .control-toggler__item")
              , r = o.closest(".control-toggler__item-selected").find("input").val()
              , a = n.find("input").val();
            a && this._$document.off("toggler:switch" + this.ns).one("toggler:switch" + this.ns, function() {
                t.responsiveToggler.itemClick(e, {
                    callback: s.bind(function() {
                        this.currentPipelineId = a,
                        this.switchForm(a)
                    }, t)
                })
            }).trigger("toggler:pipeline:changed", [{
                id: a,
                oldId: r
            }]),
            e.stopPropagation()
        },
        switchForm: function(e) {
            var t = this.$el.find('form[id^="statuses_form_"]')
              , i = this.$el.find("form#statuses_form_" + e);
            t.removeClass("pipeline-form_selected").hide(),
            i.addClass("pipeline-form_selected").show(),
            this.$el.find("#edit-pipeline-name").show(),
            i.find("#pipeline_settings").hide(),
            this.$(this._selector("body")).trigger("modal:centrify")
        },
        goToAddPipeline: function(e) {
            this.goesAway = 0 == AMOCRM.constant("show_MainTour") ? !0 : !1,
            this.modal.destroy()
        },
        initialize: function(e) {
            this.options = e || {},
            this.initModal()
        },
        destroy: function(e) {
            e = e || {},
            this.destroyed = !0,
            s.isFunction(this.options.destroy) && this.options.destroy.call(this, e),
            !this.destroyed && this._forms && s.each(this._forms, function(e) {
                e.destroy()
            }),
            this._$document.off(this.ns),
            this.goesAway && (this.options.self_reload ? (this.options.mode = "add",
            this.initModal()) : i(".flag-button").trigger("click"))
        },
        getActiveForm: function() {
            var e = this;
            return s.find(this._forms, function(t) {
                return t.pipelineId == e.currentPipelineId
            })
        },
        hasFormsChanges: function() {
            return !!this.getActiveForm().modified
        },
        initConfirmConfig: function() {
            var e = this
              , t = this.getActiveForm();
            this._confirm = {
                text: AMOCRM.lang.confirm_close_modal,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                button_class: "button-input_blue",
                accept: function(e) {
                    t.save({
                        callback: function() {
                            t.setChanges(!1),
                            e && e()
                        }
                    })
                },
                decline: function(i, s) {
                    return this.accepted !== !1 && s !== !1 ? !1 : (t.setChanges(!1),
                    e.modal.destroy(),
                    i && i(),
                    void 0)
                }
            },
            "add" === this.options.mode && AMOCRM.router.preventPageChange(!0)
        },
        onEditClick: function(e) {
            var t = i(e.target)
              , s = t.closest("form").find("#pipeline_settings");
            this.$el.find(".responsive-toggler-container_modal").hide(),
            s.show(),
            this.getActiveForm().focusOnName()
        },
        initModal: function() {
            var e = this;
            return this.modal = new a({
                class_name: "modal-list modal-statuses-settings " + (this.options.class_name || "") + " modal-statuses-settings_" + this.options.mode,
                container: this.options.$modal_container,
                disable_overlay_click: this.options.disable_overlay_click || !1,
                disable_cancel_click: !0,
                init_animation: this.options.init_animation || !1,
                can_centrify: !1,
                can_destroy: !1,
                init: function(e) {
                    e.focus()
                },
                destroy: s.bind(function() {
                    var t = this.hasFormsChanges()
                      , n = this.getActiveForm();
                    if (i(document).off("pipeline:removed" + this.ns),
                    !this.destroyed) {
                        if (t)
                            return AMOCRM.router.confirmPageChange(e._confirm, s.noop),
                            !1;
                        AMOCRM.router.preventPageChange(!1),
                        this.destroy({
                            needReload: n.wasSaved
                        })
                    }
                }, this)
            }),
            this._$document.off("pipeline:removed" + this.ns + ", menu:loader:change" + this.ns),
            this._$document.on("pipeline:removed" + this.ns + ", menu:loader:change" + this.ns, function() {
                e.modal && !e.hasFormsChanges() && e.modal.destroy()
            }),
            this.setElement(this.modal.$modal),
            this.loadData(),
            this.modal
        },
        loadData: function() {
            this.loading || (this.loading = !0,
            l.getPipelines().done(s.bind(function(e) {
                e.pipelines = s.toArray(e.pipelines),
                "edit" === this.options.mode ? (s.each(e.pipelines, function(e) {
                    e = e || {},
                    e.value = e.id,
                    e.label = e.name,
                    this.options.pipelineId ? e.selected = e.id == this.options.pipelineId : e.selected = !!e.is_main,
                    e.selected && (this.initialPipelineId = e.id,
                    this.pipelineId = e.id,
                    this.currentPipelineId = e.id)
                }, this),
                s.any(e.pipelines, function(e) {
                    return e = e || {},
                    e.selected === !0
                }) || (e.pipelines[0] = e.pipelines[0] || {},
                e.pipelines[0].selected = !0,
                e.pipelines[0].is_main = !0,
                this.pipelineId = e.pipelines[0].id,
                this.currentPipelineId = e.pipelines[0].id)) : "add" === this.options.mode && (e.pipelines = [this.fakePipeline],
                this.pipelineId = this.fakePipeline.id,
                this.currentPipelineId = this.fakePipeline.id),
                AMOCRM.constant("statuses_colors", e.colors),
                this.render(e).then(s.bind(this.initConfirmConfig, this))
            }, this)))
        },
        render: n._preload([d], "_render"),
        _render: function(e) {
            var t, o = this;
            this.$(this._selector("body")).trigger("modal:loaded").html(n({
                ref: d
            }).render({
                lang: AMOCRM.lang,
                pipelines: e.pipelines,
                colors: e.colors,
                in_modal: !0,
                active: this.initialPipelineId,
                is_new: "add" === this.options.mode,
                pipelines_enabled: e.pipelines_enabled
            })).trigger("modal:centrify"),
            this._forms && (s.each(this._forms, function(e) {
                e.destroy()
            }),
            this._forms = []),
            this.$("form").each(function() {
                var t = {
                    el: i(this),
                    in_modal: !0,
                    dont_show_delete_confirm: o.options.dont_show_delete_confirm || !1,
                    confirm: o._confirm,
                    limit: e.limits.statuses
                }
                  , n = new r(t);
                n.model.on("statuses:saved", s.bind(function() {
                    o.modal.destroy()
                }, o)).on("status:added", s.bind(o.centrify, o)).on("statuses:reverted", s.bind(o.centrify, o)).on("status:removed", s.bind(o.centrify, o)).on("has_changes", s.bind(o.setChanges, o)).on("has_reverted", s.bind(o.setChanges, o)),
                o._forms.push(n)
            }),
            t = {
                el: i(".modal-body .responsive-toggler-container"),
                active: this.initialPipelineId,
                no_resize: !0,
                needRemoteReload: !0
            },
            this.responsiveToggler = new c(t),
            this.responsiveToggler.resizeToggler(),
            s.isFunction(this.options.init) && this.options.init(),
            "add" === this.options.mode && this.getActiveForm().focusOnName()
        },
        setChanges: function() {
            this.has_changes = this.statuses && this.statuses.modified
        },
        centrify: function() {
            this.$(this._selector("body")).trigger("modal:centrify")
        }
    })
}),
define("lib/interface/account/custom_fields", ["require", "twig", "underscore", "backbone", "elements_view", "lib/components/base/form", "lib/components/base/modal", "lib/components/base/confirm", "lib/common/fn", "lib/common/urlparams"], function(e) {
    "use strict";
    var t, i, s, n, o = e("twig"), r = e("underscore"), a = e("backbone"), l = e("elements_view"), c = e("lib/components/base/form"), d = e("lib/components/base/modal"), u = e("lib/components/base/confirm"), h = e("lib/common/fn"), _ = e("lib/common/urlparams"), p = r.invert(AMOCRM.element_types), m = function(e, t) {
        var i = t.clone();
        return i.addClass("ui-sortable-helper").css("left", $(this).offset().left),
        i
    }, f = [14], g = 13, b = 4, v = 5, y = 10;
    return n = a.Collection.extend({
        initialize: function(e, t) {
            this.element_type = t.element_type,
            this.on("field:remove", this.remove, this)
        },
        destroy: function() {
            this.each(function(e) {
                e.trigger("cf:field:destroy")
            }, this)
        }
    }),
    s = a.Model.extend({
        url: "/ajax/settings/custom_fields/",
        sync: function(e, t, i) {
            var s = {
                action: "apply_changes",
                cf: {}
            }
              , n = this.toJSON();
            switch (n.pipeline_id || (n.pipeline_id = 0),
            e) {
            case "create":
                s.cf.add = [n];
                break;
            case "update":
                s.cf.edit = [n];
                break;
            case "delete":
                s.cf["delete"] = [n]
            }
            this.commit(s, i)
        },
        sortFieldEnums: function(e) {
            return r.sortBy(e, "sort")
        },
        commit: function(e, t) {
            var i = function(e, t) {
                r.isFunction(this.set) && this.set(this._previousAttributes),
                r.isFunction(e.error) && e.error.call(this, t)
            };
            return this.request_started ? !1 : (this.request_started = !0,
            void $.ajax({
                url: s.prototype.url,
                data: e,
                type: "POST",
                dataType: "json"
            }).always(r.bind(function() {
                this.request_started = !1
            }, this)).done(r.bind(function(s) {
                s.response && s.response.error ? i.call(this, t, s.response.error) : (s.response.id && 1 === s.response.id.length && (r.isFunction(this.set) && (this.set("id", s.response.id[0]),
                null !== s.response.enums && this.set("enums", this.sortFieldEnums(s.response.enums))),
                e.cf.add && this.trigger("fields:resort", {
                    model: this
                }),
                this.get("predefined") || this.trigger("field:sortable")),
                r.isFunction(t.success) && t.success.call(this, this.changed, s.response))
            }, this)).fail(r.bind(function() {
                r.isFunction(t.error) && i.call(this, t)
            }, this)))
        }
    }),
    i = l.extend({
        _classes: function() {
            return {
                field_body: "cf-field-wrapper__body",
                field_actions: "cf-field-wrapper__actions",
                save_btn: "js-modal-accept",
                enums_wrapper: "cf-field-enums-wrapper",
                "enum": "cf-field-enum",
                sort_handle: "cf-field-wrapper__handle-enum",
                type_select: "cf-field-edit__type-select",
                field_middle: "cf-field-edit__body__middle",
                field_right: "cf-field-edit__body__right",
                required_wrapper: "cf-field-edit__body__required-wrapper"
            }
        },
        _selectors: function() {
            return {
                name_input: 'input[name="name"]',
                selected_type_option: ".cf-field-edit__type-select .control--select--list--item-selected",
                required_checkbox: ".cf-field__edit__required-checkbox",
                disabled_checkbox: ".cf-field__edit__disabled-checkbox",
                status_id_select: ".cf-field-edit__statuses"
            }
        },
        events: {
            "mouseenter .cf-field-wrapper__actions": "mouseToggleActions",
            "mouseleave .cf-field-wrapper__actions": "mouseToggleActions",
            "click .cf-field-wrapper__body__switcher": "mouseToggleActions",
            "click .js-modal-accept:not(.button-input-disabled)": "clickToSave",
            "click .cf-field-wrapper__body:not(.edit-mode) .cf-field-view__name": "clickToEdit",
            "click .js-cf-edit": "clickToEdit",
            "click .button-cancel": "onClickToCancel",
            "click .js-modal-trash": "clickToRemoveInEdit",
            "click .js-cf-remove": "clickToRemove",
            "click .cf-field-edit__type-select .control--select--button": "clickToChangeType",
            "change .cf-field-edit__type-select input": "changeTypeSelect",
            "click .cf-field-enum__remove": "clickToRemoveEnum",
            "click .js-cf-enum-add": "clickToAddEnum",
            "change #cf_status_id": "changeStatusId",
            "change #cf_disabled": "changeDisabledCheckbox",
            "focus .validate-has-error": "clearValidate",
            swipe: "swipeToggleActions"
        },
        initialize: function(e) {
            e = e || {},
            this.statuses = e.statuses,
            this.field_types = e.field_types,
            this.tariff = e.tariff,
            this.$scroller = e.$scroller || $(document.body),
            this.$el.data("view", this),
            this.has_pipelines = e.has_pipelines,
            this.pipelines = e.pipelines,
            this.enable_required = e.hasOwnProperty("enable_required") ? e.enable_required : !0,
            this.model.on("edit:allowed", this.edit, this),
            this.model.on("name:focus", this.nameFocus, this),
            this.model.on("field:sortable", this.allowSort, this),
            this.model.on("cf:field:destroy", this.destroy, this)
        },
        remove: function() {
            this.$el.hide().trigger("field:removed"),
            this.destroy(),
            l.prototype.remove.call(this)
        },
        destroy: function() {
            return this.destroyForm(),
            this.$el.removeData(),
            this.undelegateEvents().stopListening(),
            this
        },
        changeStatusId: function(e) {
            var t = $(e.currentTarget);
            this.$(this._selector("required_wrapper")).find(".control-checkbox__text").text(143 == t.val() ? AMOCRM.lang.cf.required_for : AMOCRM.lang.cf.required_after)
        },
        swipeToggleActions: function(e, t, i) {
            1 === t && 0 === i && this.toggleActions(!1),
            -1 === t && 0 === i && this.toggleActions(!0)
        },
        mouseToggleActions: function(e) {
            var t;
            switch (e.type) {
            case "mouseleave":
                t = !1;
                break;
            case "mouseenter":
                t = !0;
                break;
            case "click":
                t = !this.$el.hasClass("fixed")
            }
            this.toggleActions(t)
        },
        clickToEdit: function() {
            this.model.trigger("edit:request", this)
        },
        onClickToCancel: function(e) {
            e.stopPropagation(),
            this.clickToCancel()
        },
        clickToCancel: function() {
            this.model.get("id") ? this.view() : (this.remove(),
            this.model.trigger("edit:exit").trigger("field:remove", this.model))
        },
        clickToSave: function() {
            this.save()
        },
        clickToRemoveInEdit: function() {
            this.view(),
            this.clickToRemove()
        },
        clickToRemove: function() {
            var e = this
              , t = this.$(this._selector("name_input"))
              , i = AMOCRM.lang.cf.remove_cf + " &laquo;" + h.escapeTags(t.length ? t.val() : this.model.get("name")) + "&raquo;?&nbsp;";
            this.model.get("disabled") && (i += AMOCRM.lang.cf.remove_cf_disabled),
            new u({
                text: i,
                accept: function() {
                    var t = this.modal;
                    t.$modal.find(".modal-body").hide(),
                    e.model.destroy({
                        success: function(i) {
                            t.showSuccess(AMOCRM.lang.cf.field_removed),
                            e.remove(),
                            e.model.trigger("edit:exit").trigger("field:remove", e.model)
                        },
                        error: function() {
                            t.showError()
                        }
                    })
                }
            })
        },
        clickToChangeType: function(e) {
            var t = this;
            "y" != $(e.currentTarget).attr("data-is-changed") && this.model.get("id") && (e.stopPropagation(),
            new u({
                text: AMOCRM.lang.cf.cf_change_type,
                class_name: "modal-list change-type-modal",
                destroy: function() {
                    this.accepted === !0 && t.$(t._selector("selected_type_option")).trigger("click")
                }
            }))
        },
        changeTypeSelect: o._preload(["/tmpl/settings/custom_fields/fields/enums_wrapper.twig"], "_changeTypeSelect"),
        _changeTypeSelect: function(e) {
            var t = $(e.currentTarget)
              , i = this.$(this._selector("field_middle"))
              , s = parseInt(t.val())
              , n = this.$(this._selector("name_input"));
            t.closest(this._selector("type_select")).find(".control--select--button").attr("data-is-changed", "y"),
            this.makeSortable(!1),
            r.indexOf(f, s) >= 0 && !n.val() && n.val(this.field_types[s].option).trigger("change"),
            i.html(o({
                ref: "/tmpl/settings/custom_fields/fields/enums_wrapper.twig"
            }).render(r.extend(this.model.toJSON(), {
                lang: AMOCRM.lang,
                type_id: s
            }))),
            this.initEnums(i.find(this._selector("enums_wrapper"))),
            this.makeSortable(!0),
            this.model.trigger("field:type_changed")
        },
        clickToRemoveEnum: function(e) {
            var t = this
              , i = $(e.currentTarget).closest(this._selector("enum"))
              , s = i.closest(this._selector("enums_wrapper"))
              , n = i.find("input").val() || ""
              , o = function() {
                i.remove(),
                s.attr("data-count", s.find(t._selector("enum")).length),
                t.form.checkDeleted()
            };
            return i.find('input[type="text"]').val() ? void new u({
                text: AMOCRM.lang.cf.remove_enum + " &laquo;" + h.escapeTags(n) + "&raquo;?",
                destroy: function() {
                    this.accepted && o()
                },
                accept: function() {
                    this.modal.destroy()
                }
            }) : void o()
        },
        clickToAddEnum: o._preload(["/tmpl/settings/custom_fields/fields/enum.twig"], "_clickToAddEnum"),
        _clickToAddEnum: function(e) {
            var t, i, s, n = $(e.currentTarget), r = n.prev().find("input");
            return r.val() ? (t = n.closest(this._selector("enums_wrapper")),
            i = t.find(this._selector("enum")).length,
            s = $(o({
                ref: "/tmpl/settings/custom_fields/fields/enum.twig"
            }).render({
                i: i
            })),
            n.before(s),
            AMOCRM.is_touch_device || s.find('input[type="text"]').focus(),
            t.attr("data-count", ++i),
            void this.initEnums(t)) : void r.focus()
        },
        changeDisabledCheckbox: function(e) {
            var t = $(e.currentTarget)
              , i = t.closest(this._selector("field_right"));
            i.find(this._selector("required_wrapper"))[t.is(":checked") ? "hide" : "show"](),
            i.find(this._selector("required_checkbox") + " input").prop("checked", !1).trigger("change")
        },
        initEnums: function(e) {
            var t;
            e.find("input[name]").each(r.bind(function(e, i) {
                t = $(i),
                this.form.model.set(t.attr("name"), this.form.getInputValue(t))
            }, this))
        },
        showErrors: function(e, t) {
            var i = this;
            r.isUndefined(t) && (t = !e),
            new d({
                class_name: "modal-list",
                centrify_animation: !0,
                init: function() {
                    this.showError(e, t),
                    this.$modal.on("click", ".js-modal-try-again", r.bind(function() {
                        this.destroy(),
                        i.save()
                    }, this))
                },
                destroy: function() {}
            })
        },
        render: function(e) {
            return o._preload(["/tmpl/settings/custom_fields/fields/modes/" + e + ".twig"], r.bind(this._render, this, e))()
        },
        _render: function(e) {
            var t = this;
            e = e || "view",
            this.$el.removeClass("fixed").html(o({
                ref: "/tmpl/settings/custom_fields/fields/modes/" + e + ".twig"
            }).render(r.extend(this.model.toJSON(), {
                lang: AMOCRM.lang,
                statuses: this.statuses,
                field_types: this.field_types,
                tariff: this.tariff,
                has_pipelines: this.has_pipelines,
                pipelines: "edit" === e ? r.toArray(this.pipelines) : this.pipelines,
                enable_required: t.enable_required,
                can_be_required: "customers" !== AMOCRM.getBaseEntity()
            }))),
            this.model.trigger("field:render")
        },
        clearValidate: function(e) {
            e && e.currentTarget || (e = {
                currentTarget: this.$(".validate-has-error")
            }),
            $(e.currentTarget).removeClass("validate-has-error")
        },
        validate: function(e) {
            var t = 0
              , i = r.keys(e.enums).length
              , s = 0
              , n = [];
            return this.clearValidate(),
            e.name || (this.$(this._selector("name_input")).addClass("validate-has-error"),
            t++),
            -1 !== r.indexOf([b, v, y], e.type_id) && e.enums && (r.each(e.enums, function(e, t) {
                e.value || (n.push('input[name="enums[' + t + '][value]"]'),
                s++)
            }, this),
            2 > i - s && (this.$(n.join(",")).addClass("validate-has-error"),
            t++)),
            0 === t
        },
        save: function(e) {
            var t = {};
            e = e || {},
            r.each(this.form.model.toJSON(), function(e, i) {
                $.extend(!0, t, _.QStoJSON(i + "=" + encodeURIComponent(e), !0))
            }),
            this.validate(t) && (this._elem("save_btn").trigger("button:save:start"),
            this.model.save(t, {
                success: r.bind(function() {
                    this.view(),
                    r.isFunction(e.success) && e.success.call(this)
                }, this),
                error: r.bind(function(t, i) {
                    this._elem("save_btn").trigger("button:load:stop"),
                    this.showErrors(i),
                    r.isFunction(e.error) && e.error.call(this)
                }, this)
            }))
        },
        destroyForm: function() {
            this._dropElemCache("save_btn"),
            this.form && this.form.destroy(),
            AMOCRM.router.removePreventConfig("custom_fields"),
            AMOCRM.router.preventPageChange(!1, "custom_fields"),
            this.makeSortable(!1),
            this.form = void 0
        },
        view: function() {
            this._view.call(this),
            this.render()
        },
        _view: function() {
            this.form && this.destroyForm(),
            this.model.trigger("edit:exit")
        },
        edit: function() {
            this.render("edit").then(r.bind(this._edit, this))
        },
        _edit: function() {
            this.form = new c.View({
                el: this.el
            }),
            this.form.model.on("has_changes", r.bind(function() {
                this.setChanges(!0),
                this._elem("save_btn").trigger("button:save:enable")
            }, this)).on("has_reverted", r.bind(function() {
                this.setChanges(!1),
                this._elem("save_btn").trigger("button:save:disable")
            }, this)),
            AMOCRM.router.registerPreventConfig({
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_cancel,
                accept: r.bind(function(e) {
                    this.save({
                        success: e
                    })
                }, this),
                decline: function() {}
            }, "custom_fields"),
            this.makeSortable(!0),
            this.model.trigger("name:focus")
        },
        nameFocus: function() {
            var e = this.$(this._selector("name_input"));
            AMOCRM.is_touch_device ? this.model.get("id") || this.$scroller.scrollTop(e.offset().top - 66) : setTimeout(r.bind(function() {
                e.val(e.val()).focus()
            }, this), 0)
        },
        setChanges: function(e) {
            this.has_changes = e,
            AMOCRM.router.preventPageChange(e, "custom_fields"),
            this._elem("save_btn").trigger("button:save:" + (e ? "enable" : "disabled"))
        },
        allowSort: function() {
            this.$el.attr("id", "cf_field__" + this.model.id).removeClass("no-sortable").addClass("sortable"),
            this.model.trigger("fields:make_sortable")
        },
        makeSortable: function(e) {
            e ? this.$(this._selector("enums_wrapper")).sortable({
                items: this._selector("enum"),
                handle: this._selector("sort_handle"),
                axis: "y",
                appendTo: document.body,
                sortAnimate: !AMOCRM.is_touch_device,
                sortAnimateDuration: 150,
                helper: m,
                stop: r.bind(this.sortEnums, this)
            }) : this.$(this._selector("enums_wrapper")).find(this._selector("enum")).each(function() {
                $(this).data("ui-sortable") && $(this).sortable("destroy")
            })
        },
        toggleActions: function(e) {
            e ? this.actionsFixTT = setTimeout(r.bind(function() {
                this.$el.addClass("fixed")
            }, this), 100) : (clearTimeout(this.actionsFixTT),
            this.$el.removeClass("fixed"))
        },
        sortEnums: function(e, t) {
            this.$(this._selector("enum")).each(r.bind(function(e, t) {
                $(t).find(".cf-field__enum__sort").val(e).trigger("change")
            }, this))
        }
    }),
    t = l.extend({
        _classes: function() {
            return {
                field_wrapper: "cf-field-wrapper",
                field_wrapper_fake: "cf-field-wrapper-fake",
                group_wrapper: "cf-group-wrapper"
            }
        },
        _selectors: function() {
            return {
                sortable_fields: ".cf-section__fields.sortable",
                sort_handle: ".cf-field-wrapper__handle",
                sort_handle_enum: ".cf-field-wrapper__handle-enum",
                plug_prefix: "#cf_limit_",
                group_wrapper_by_id: ".cf-group-wrapper[data-id=%s]"
            }
        },
        events: {
            "field:new": "newField",
            "group:new": "newGroup",
            "field:removed .cf-field-wrapper": "destroyField",
            "limit:check:handy": "checkCFCount",
            "keyup .cf-group-wrapper input": "saveGroupOnEnter",
            "change .cf-group-wrapper input": "saveGroupOnChange",
            "focus .cf-group-wrapper input": "editGroupFocus",
            "blur .cf-group-wrapper input": "blurGroupInput",
            "click .js-cf-group-remove": "removeGroupClick",
            "click .cf-group-wrapper__input-wrapper": "groupNameFocus"
        },
        initialize: function(e) {
            var t = 1;
            if (e = e || {},
            !e.field_types || !e.statuses && !e.pipelines || !e.fields || !e.tariff)
                throw new Error("Not all parameters are presented");
            this.$scroller = e.$scroller,
            this.field_types = e.field_types,
            this.statuses = e.statuses,
            this.element_type = AMOCRM.element_types[this.$el.attr("data-type")] || this.$el.attr("data-type"),
            this.tariff = e.tariff,
            this.enable_required = e.hasOwnProperty("enable_required") ? e.enable_required : !0,
            this.has_pipelines = e.has_pipelines,
            e.pipelines && e.has_pipelines && (this.pipelines = e.pipelines),
            this.cf_collection = new n([],{
                element_type: this.element_type
            }),
            this.cf_collection.on("sync", this.checkCFCountOnSync, this).on("remove", this.checkCFCountOnRemove, this).on("fields:make_sortable", this.makeSortable, this).on("fields:resort", this.resort, this).on("edit:request", this.editRequest, this).on("edit:exit", this.editExit, this),
            r.each(e.fields, function(e) {
                e.predefined || (e.is_odd = t++ % 2 !== 0,
                e.sortable = !0),
                e.sortable = Number(e.sortable),
                this.cf_collection.push(this.addField($("#cf_field_" + e.id + "_" + (e.element_type || "")), e).model)
            }, this),
            this.makeSortable(!0),
            this.checkCFCount()
        },
        destroy: function() {
            this.cf_collection.destroy(),
            this.makeSortable(!1),
            this.undelegateEvents().stopListening()
        },
        destroyField: function() {
            this.cf_collection.trigger("field:destroy")
        },
        addField: function(e, t) {
            return this.enable_required || (delete this.field_types[13],
            delete this.field_types[14]),
            new i({
                el: e,
                model: new s(t),
                statuses: this.statuses,
                field_types: this.field_types,
                tariff: this.tariff,
                $scroller: this.$scroller,
                pipelines: this.pipelines,
                has_pipelines: this.has_pipelines,
                enable_required: this.enable_required
            })
        },
        editRequest: function(e) {
            var t = this
              , i = function(e) {
                e.model.trigger("edit:allowed"),
                this.active_edit = e
            }
              , s = function() {
                this.active_edit.model.get("id") ? this.active_edit.view() : this.active_edit.clickToCancel()
            };
            this.active_edit ? this.checkChangesModal({
                accept: function() {
                    i.call(t, e)
                },
                decline: function() {
                    s.call(t),
                    i.call(t, e)
                },
                noChanges: function() {
                    s.call(t),
                    i.call(t, e)
                }
            }) : i.call(this, e)
        },
        checkChangesModal: function(e) {
            var t = this;
            if (e = e || {},
            !e.accept || !e.decline || !e.noChanges)
                throw new Error("Callbacks are not presented in parameters");
            this.active_edit.form.hasChanges() ? new u({
                text: AMOCRM.lang.confirm_close_modal,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                button_class: "button-input_blue",
                destroy: function() {
                    this.accepted ? t.active_edit.save({
                        success: function() {
                            e.accept()
                        }
                    }) : e.decline()
                },
                accept: function() {
                    this.modal.destroy()
                }
            }) : e.noChanges();
        },
        editExit: function() {
            this.active_edit = !1
        },
        makeSortable: function(e) {
            var t = this;
            return e = r.isBoolean(e) ? e : !0,
            e ? this.$(this._selector("sortable_fields")).sortable({
                items: this._selector("field_wrapper") + ".sortable," + this._selector("group_wrapper"),
                handle: this._selector("sort_handle") + ":not(" + this._selector("sort_handle_enum") + ")",
                axis: "y",
                cancel: ".no-sortable",
                appendTo: document.body,
                containment: "parent",
                scroll: !1,
                helper: m,
                update: r.bind(function() {
                    r.delay(r.bind(this.resort, this), 100)
                }, this),
                sort: function(e, i) {
                    var s = t.$(t._selector("field_wrapper") + ".no-sortable:last").index();
                    i.item.hasClass(t._class("field_wrapper")) && s > i.placeholder.index() && $(this).sortable("cancel")
                }
            }) : this.$(this._selector("sortable_fields")).find(this._selector("field_wrapper")).each(function() {
                $(this).data("ui-sortable") && $(this).sortable("destroy")
            }),
            this
        },
        saveGroupOnEnter: function(e) {
            e.keyCode == g && $(e.currentTarget).blur()
        },
        saveGroupOnChange: function(e) {
            var t = $(e.currentTarget)
              , i = t.parent().find(".js-cf-group-save")
              , s = $.trim(t.val());
            return s ? (t.parent().attr("data-name", s),
            this.resort(),
            void i.one(AMOCRM.animation_event, function() {
                $(this).hide().children("span").removeClass("animated tada")
            }).show().prepareTransition().children("span").addClass("animated tada")) : void t.addClass("validate-has-error")
        },
        editGroupFocus: function(e) {
            $(e.currentTarget).removeClass("validate-has-error").parent().addClass("cf-group-wrapper__input-wrapper-focused")
        },
        blurGroupInput: function(e) {
            var t = $(e.currentTarget)
              , i = t.closest(this._selector("group_wrapper"))
              , s = t.val();
            this._getGroupFields(i);
            r.delay(r.bind(function() {
                s ? $(e.currentTarget).parent().removeClass("cf-group-wrapper__input-wrapper-focused") : t.addClass("validate-has-error")
            }, this), 300)
        },
        _getGroupFields: function(e) {
            var t;
            return $.makeArray(e.nextUntil(this._selector("group_wrapper")).filter(r.bind(function(e, t) {
                return !$(t).hasClass(this._class("field_wrapper_fake"))
            }, this)).map(function(e, i) {
                return t = $(i).data("view"),
                t.model.id
            }))
        },
        resort: function(e, t) {
            var n, o, a = {
                action: "apply_changes",
                cf: {}
            }, l = [];
            a.element_type = this.element_type,
            a.cf.edit = $.makeArray(this.$(this._selector("sortable_fields")).find(this._selector("field_wrapper")).map(r.bind(function(e, t) {
                return n = $(t).data("view"),
                n && n.model.id ? (n.model.set("sort", e),
                n.model.toJSON()) : {}
            }, this))),
            this.$(this._selector("sortable_fields")).find(this._selector("group_wrapper")).each(r.bind(function(e, t) {
                var i = $(t)
                  , s = i.find('input[type="text"]')
                  , n = {};
                return s.val() ? (r.extend(n, {
                    name: s.val(),
                    id: s.attr("data-id"),
                    fields: this._getGroupFields(i)
                }),
                1 == i.attr("data-removing") && (n.removing = 1,
                i.remove()),
                void l.push(n)) : (i.remove(),
                !0)
            }, this)),
            a.groups = l,
            (a.cf.edit.length || a.groups.length) && s.prototype.commit.call(e && e.model || this, a, {
                success: r.bind(function(e, t) {
                    var i = [];
                    t && t.group_id && (i = r.filter(t.group_id, function(e) {
                        return this.$(this._selector("group_wrapper_by_id", e)).length ? !1 : !0
                    }, this),
                    this.$(this._selector("group_wrapper_by_id", "new")).attr("data-id", i[0]).find('input[type="text"]').attr("data-id", i[0])),
                    o = this.cf_collection.get(r.find(a.cf.edit, function(e) {
                        return e.id
                    })),
                    o && o.trigger("sync", o)
                }, this),
                error: function(e) {
                    i.prototype.showErrors.call(this, e, !1)
                }
            })
        },
        newField: o._preload(["/tmpl/settings/custom_fields/fields/field.twig"], "_newField"),
        _newField: function() {
            var e, t = $(o({
                ref: "/tmpl/settings/custom_fields/fields/field.twig"
            }).render()), i = this.cf_collection.findWhere({
                id: void 0
            });
            return i ? void this.checkChangesModal({
                accept: r.bind(function() {
                    this.newField()
                }, this),
                decline: r.bind(function() {
                    this.active_edit.clickToCancel(),
                    this.newField()
                }, this),
                noChanges: function() {
                    i.trigger("name:focus")
                }
            }) : (this.$(this._selector("sortable_fields")).append(t),
            e = this.addField(t, {
                element_type: this.element_type,
                sortable: 1,
                predefined: !1
            }),
            this.cf_collection.push(e.model),
            void e.model.trigger("edit:request", e))
        },
        newGroup: o._preload(["/tmpl/settings/custom_fields/group.twig"], "_newGroup"),
        _newGroup: function() {
            var e = $(o({
                ref: "/tmpl/settings/custom_fields/group.twig"
            }).render({
                name: ""
            }));
            this.$(this._selector("sortable_fields")).prepend(e),
            e.find('input[type="text"]').focus()
        },
        groupNameFocus: function(e) {
            $(e.currentTarget).find('input[type="text"]').focus()
        },
        removeGroupClick: function(e) {
            var t = $(e.currentTarget)
              , i = this;
            new u({
                text: AMOCRM.lang.cf.group_remove_confirm,
                accept: function() {
                    this.destroy(),
                    t.closest(i._selector("group_wrapper")).attr("data-removing", 1),
                    i.resort()
                }
            })
        },
        checkCFCountOnSync: function(e) {
            this.checkCFCount(e.collection)
        },
        checkCFCountOnRemove: function(e, t) {
            this.checkCFCount(t)
        },
        checkCFCount: function(e) {
            var t, i = !1;
            e = e instanceof a.Collection ? e : this.cf_collection,
            t = p[e.element_type],
            t && (this.tariff.cf_current_count[t] = e.where({
                predefined: !1
            }).length,
            -1 !== this.tariff.cf_max_count && (i = this.tariff.cf_current_count[t] >= this.tariff.cf_max_count),
            e.trigger("limit:check", t, i),
            $(this._selector("plug_prefix") + t)[i ? "show" : "hide"]())
        }
    })
}),
define("lib/interface/card/custom_fields", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/interface/account/custom_fields", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/interface/account/custom_fields"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = "/tmpl/settings/custom_fields/index.twig";
    return t = o.extend({
        _classes: function() {
            return {
                body: "modal-body",
                section: "cf-section"
            }
        },
        _selectors: function() {
            return {
                add_btn: "#cf_field_add"
            }
        },
        events: {
            "click #cf_field_add:not(.button-input-disabled)": "addFieldClick",
            "click .cf-in-modal__add-button__group": "addGroupClick"
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this._$body.addClass("cf-section-in_modal"),
            this.initModal(AMOCRM.getBaseEntity()),
            this._$document.on("page:changed" + this.ns, s.bind(function() {
                this.modal.destroy()
            }, this))
        },
        destroy: function() {
            this.destroyed = !0,
            this._$body.removeClass("cf-section-in_modal"),
            this._$document.off(this.ns),
            this.cf && this.cf.destroy(),
            s.isFunction(this.options.destroy) && this.options.destroy.call(this)
        },
        addFieldClick: function() {
            this.$(this._selector("section") + ":visible").trigger("field:new")
        },
        addGroupClick: function() {
            this.$(this._selector("section") + ":visible").trigger("group:new")
        },
        initModal: function() {
            var e = this;
            return this.modal = new a({
                class_name: "modal-list modal-cf-settings",
                can_centrify: !1,
                destroy: s.bind(function() {
                    if (!this.destroyed) {
                        if (this.cf && this.cf.active_edit && this.cf.active_edit.has_changes)
                            return new l({
                                text: AMOCRM.lang.confirm_close_modal,
                                accept_text: AMOCRM.lang.button_save,
                                decline_text: AMOCRM.lang.button_exit,
                                button_class: "button-input_blue",
                                destroy: function() {
                                    this.accepted ? e.cf.active_edit.save({
                                        success: function() {
                                            e.setChanges(),
                                            e.destroy(),
                                            e.modal.destroy()
                                        }
                                    }) : this.accepted === !1 && (e.destroy(),
                                    e.modal.destroy())
                                },
                                accept: function() {
                                    this.modal.destroy()
                                }
                            }),
                            !1;
                        this.destroy()
                    }
                }, this)
            }),
            this.setElement(this.modal.$modal),
            setTimeout(s.bind(function() {
                this.loadData()
            }, this), 100),
            this.modal
        },
        loadData: function() {
            var e = "";
            this.loading || (this.loading = !0,
            "v2demo" == (AMOCRM.constant("account") || {}).subdomain && (e = "?required=y"),
            i.ajax({
                url: "/ajax/settings/custom_fields/" + e,
                data: {},
                type: "POST",
                dataType: "json"
            }).always(s.bind(function() {
                this.loading = !1
            }, this)).done(s.bind(function(e) {
                this.render(e.response.params)
            }, this)))
        },
        render: n._preload([c], "_render"),
        _render: function(e) {
            this.$(this._selector("body")).trigger("modal:loaded").html(n({
                ref: c
            }).render({
                in_modal: this.options.element_type || AMOCRM.getBaseEntity(),
                enable_groups: this.options.hasOwnProperty("enable_groups") ? this.options.enable_groups : !0,
                params: e
            })).trigger("modal:centrify"),
            s.isFunction(this.options.init) && this.options.init(),
            this.initFields(e)
        },
        initFields: function(e) {
            this.cf = new r({
                el: this.$(this._selector("section")),
                $scroller: this.$el.children(".modal-scroller"),
                has_pipelines: e.has_pipelines,
                pipelines: e.pipelines,
                statuses: e.statuses,
                field_types: e.fields_types,
                fields: e.fields[this.options.element_type || AMOCRM.getBaseEntity()],
                tariff: e.tariff,
                enable_required: this.options.hasOwnProperty("enable_required") ? this.options.enable_required : !0
            }),
            this.cf.cf_collection.on("field:type_changed", this.centrify, this).on("field:destroy", this.centrify, this).on("field:render", this.centrify, this).on("sync", this.setChanges, this).on("remove", this.setChanges, this).on("limit:check", this.checkCFEntityCount, this),
            this.cf.checkCFCount()
        },
        checkCFEntityCount: function(e, t) {
            this._elem("add_btn").trigger("controls:disable", [t])
        },
        setChanges: function() {
            this.has_changes = !0,
            this.centrify()
        },
        centrify: function() {
            this.$(this._selector("body")).trigger("modal:centrify")
        }
    })
}),
define("lib/interface/card/validation", ["require", "jquery", "twig", "backbone", "underscore", "lib/core/view", "lib/common/fn"], function(e) {
    "use strict";
    var t, i, s, n = e("jquery"), o = e("twig"), r = e("backbone"), a = e("underscore"), l = e("lib/core/view"), c = e("lib/common/fn"), d = {
        leads: ".linked-form__field",
        contacts: ".linked-form__field",
        companies: ".linked-form__field"
    }, u = {
        leads: ".linked-form__field__value",
        contacts: ".linked-form__field__value, .card-cf-value-wrapper, .contact_name_wrapper__suggest, .linked-form__field__value-name",
        companies: ".linked-form__field__value, .card-cf-value-wrapper, .contact_name_wrapper__suggest, .linked-form__field__value-name"
    }, h = a.invert(AMOCRM.element_types), _ = 30;
    return s = r.Model.extend({
        count: function() {
            return a.keys(this.toJSON()).length
        },
        clear: function() {
            a.each(a.keys(this.toJSON()), function(e) {
                this.unset(e, {
                    silent: !0
                }),
                this.trigger("tip:remove", e)
            }, this)
        }
    }),
    i = l.extend({
        className: "js-validation-tip validation-tip",
        template: a.template("<%= count %> " + AMOCRM.lang.step_of + " <%= all_count %>"),
        _selectors: function() {
            return {
                cf_group: ".js-cf-group-wrapper, .js-card-main-fields"
            }
        },
        initialize: function(e) {
            if (e = e || {},
            !e.code)
                throw new Error("options.code not passed to error tip view");
            return this.model.on("change", this.render, this),
            this.model.on("tip:remove", this.checkRemove, this),
            this.model.on("tip:scroll_to", this.scrollTo, this),
            this.$scroller = e.$scroller,
            this.code = e.code,
            this.render(),
            this
        },
        render: function() {
            return this.model.get(this.code) && this.$el.html(this.template({
                all_count: this.model.count(),
                count: a.indexOf(a.keys(this.model.toJSON()), this.code) + 1
            })),
            this
        },
        animate: function() {
            this.$el.prepareTransition().addClass("showed")
        },
        checkRemove: function(e) {
            this.code === e && this.remove()
        },
        scrollTo: function(e) {
            var t, i, s, n = this.$scroller;
            if (this.code === e) {
                if (t = this.$el.is(":visible") ? this.$el : this.$el.closest("form"),
                i = t.offset(),
                !i)
                    return;
                this.model.trigger("tabs:switch", this.$el.closest(this._selector("cf_group")).attr("data-id") || "default"),
                s = n[0].scrollTop + i.top - 5,
                AMOCRM.is_touch_device ? n.scrollTop(s) : n.animate({
                    scrollTop: s
                }, 300)
            }
        }
    }),
    t = l.extend({
        has_errors: !1,
        errors_count: 0,
        index: 1,
        pipeline_prefix: "p_",
        status_prefix: "s_",
        buttonTemplate: o._preload(["/tmpl/cards/forms/validation.twig"], "_buttonTemplate"),
        _buttonTemplate: function(e, t) {
            this._removeButtonCap(),
            e.prepend(o({
                ref: "/tmpl/cards/forms/validation.twig"
            }).render(a.extend({}, t, {
                text: AMOCRM.lang.card_validation_error,
                no_button: !0,
                class_name: "validation-button-cap__tooltip validation-button-cap__tooltip_showed"
            })))
        },
        _selectors: function() {
            return {
                form_container: ".card-holder__container",
                main_form: "#edit_card",
                name: "#person_name",
                save_btn: "#save_and_close_contacts_link",
                validation_counter: "#validation_counter",
                validation_tooltip: ".validation-button-cap__tooltip",
                cf_group: ".js-cf-group-wrapper, .js-card-main-fields",
                main_fields: ".js-card-main-fields",
                validate_input: ":input:not(#lead_status_input):not(.js-form-changes-skip)"
            }
        },
        _classes: function() {
            return {
                validation_class: "validation-not-valid"
            }
        },
        _events: function() {
            var e = {
                "click .validation-button-cap__arrow": "changeIndex",
                "mouseenter .validation-button-cap": "onButtonHover",
                "mouseleave .validation-button-cap": "onButtonHover",
                "mouseenter .validation-button-cap__tooltip": "onToolTipHover"
            };
            return e["input " + this._selector("validate_input")] = "checkErrorChange",
            e["change " + this._selector("validate_input")] = "checkErrorChange",
            e["controls:change " + this._selector("validate_input")] = "checkErrorChange",
            e
        },
        initialize: function(e) {
            if (e = n.extend({
                rules: AMOCRM.constant("card_validation_rules")
            }, e || {}),
            this.model = new s,
            parseInt(e.element_type) !== AMOCRM.element_types.leads)
                return this;
            if (this.model.on("change", this.checkErrorsHash, this),
            !e.rules)
                throw new Error("Validation rules should be present in the parameters!");
            if (!e.linked)
                throw new Error("Linked forms should be present in the parameters!");
            this.rules = e.rules,
            this.linked = e.linked
        },
        destroy: function() {
            this.stopValidating(!0)
        },
        changeIndex: function(e) {
            var t = n(e.currentTarget)
              , i = t.hasClass("left") ? -1 : 1;
            this.setIndex(this.index + i)
        },
        onButtonHover: function(e) {
            var t;
            switch (e.type) {
            case "mouseenter":
                t = !0;
                break;
            case "mouseleave":
                t = !1
            }
            a.isBoolean(t) && this._findElem("validation_tooltip").toggle(t).prepareTransition().toggleClass("validation-button-cap__tooltip_showed", t)
        },
        onToolTipHover: function() {
            this.onButtonHover({
                type: "mouseleave"
            })
        },
        checkErrorChange: a.debounce(function(e) {
            var t, i = n(e.currentTarget), s = !1, o = !1, r = "leads", l = i.attr("name");
            if (l) {
                if (t = a.find(this.linked.form_views, function(e) {
                    return n.contains(e.el, i[0]) ? e : !1
                }, this)) {
                    if (r = h[t.model.get("ELEMENT_TYPE")],
                    t.model.is_add && !t.hasChanges())
                        return void this.clearFormErrors(t.$el, t.model.toJSON(), r);
                    o = t.$el,
                    s = t.model.toJSON()
                }
                s || (s = this.mainFormData(!0)),
                o || (o = this._elem("main_form")),
                this.checkFormErrors(o, s, r)
            }
        }, 100),
        setIndex: function(e) {
            var t = this.model.keys().length;
            switch (!0) {
            case e > t:
                this.index = 1;
                break;
            case 0 === e:
                this.index = t;
                break;
            default:
                this.index = e
            }
            this.scrollTo(this.index)
        },
        stopValidating: function(e) {
            this.undelegateEvents(this._events()).stopListening(),
            e === !0 && (this._clearTabsNotifications(),
            this.renderButtonCap(0),
            this.model.clear(),
            this._findElem("validation_class").removeClass(this._class("validation_class")))
        },
        check: function(e) {
            var t = 0
              , i = this.model.count();
            return e = e || {},
            this.index = 1,
            e.status_id && (t = this.checkErrors({
                rules: this.rules,
                status_id: e.status_id,
                pipeline_id: e.pipeline_id,
                form_view: e.form_view,
                linked: this.linked
            }),
            t > 0 && !i && (this.setIndex(1),
            this.delegateEvents(this._events()))),
            t
        },
        scrollTo: function(e) {
            this.model.trigger("tip:scroll_to", this.model.keys()[e - 1]),
            this.renderButtonCap()
        },
        renderButtonCap: function(e) {
            e = a.isUndefined(e) ? this.model.count() : e,
            this._removeButtonCap(),
            e ? (this._elem("save_btn").hide(),
            this.buttonTemplate(this._elem("save_btn").parent(), {
                index: this.index,
                count: e
            })) : this._elem("save_btn").show()
        },
        _removeButtonCap: function() {
            this._findElem("validation_counter").remove(),
            this._findElem("validation_tooltip").remove()
        },
        checkErrorsHash: function() {
            var e = this.model.count();
            this.renderButtonCap(e),
            e || this.stopValidating()
        },
        mainFormData: function(e) {
            var t, i, s, n = this.form_data_cache, o = {};
            return n && e !== !0 || (s = a.map(this._elem("main_form")[0].querySelectorAll("input, textarea"), function(e) {
                switch (t = e.name,
                i = "",
                (e.type || "").toLowerCase()) {
                case "radio":
                    e.checked && (o[t] = !0),
                    i = o[t] || "";
                    break;
                case "checkbox":
                    e.checked && (i = !0);
                    break;
                default:
                    i = e.value
                }
                return {
                    name: t,
                    value: i
                }
            }),
            n = {},
            a.each(s, function(e) {
                n[e.name] = e.value
            }),
            this.form_data_cache = n),
            n
        },
        prepareRules: function(e, t, i) {
            var s, n, o = {};
            return a.each(e, function(e, r) {
                e = i ? e[this.pipeline_prefix + i] : a.find(e),
                s = a.keys(e),
                n = a.indexOf(s, this.status_prefix + t),
                s = 143 === parseInt(t) ? [s[n]] : a.difference(s, a.drop(s, ++n)),
                o[r] = a.flatten(a.filter(e, function(e, t) {
                    return a.indexOf(s, t) >= 0
                }, this))
            }, this),
            o
        },
        hasErrors: function() {
            return this.model.count() > 0
        },
        setError: function(e, t) {
            var i, s, n;
            if (e = e || {},
            !e.rule_name)
                throw new Error("Cant't set error with no rule_name");
            if (!e.$form_el)
                throw new Error("Parameter params.form_el not passed");
            s = e.input_names || [e.rule_name],
            i = (e.salt || "") + e.rule_name,
            n = {
                entity: e.entity,
                code: i,
                $form_el: e.$form_el,
                input_names: s
            },
            t ? this.model.get(i) !== !0 && (this.model.set(i, !0),
            this.toggleErrorTip(n, !0)) : this.model.get(i) && (this.model.unset(i),
            this.toggleErrorTip(n, !1))
        },
        updateRules: function(e) {
            e.status_id && (e.rules = e.rules || a.clone(this.rules),
            this._rules = this.prepareRules(e.rules, e.status_id, e.pipeline_id))
        },
        checkErrors: function(e) {
            var t = 0;
            return e = e || {},
            this.updateRules(e),
            e.form_view ? t += this.checkLinkedErrors(e.form_view) : (t += this.checkFormErrors(this._elem("main_form"), this.mainFormData(!0), "leads"),
            t += this.checkLinkedErrors()),
            t
        },
        checkLinkedErrors: function(e) {
            var t = 0;
            return a.isUndefined(e) || a.isArray(e) || (e = [e]),
            e = e || this.linked.form_views,
            a.findLastIndex(e, function(e) {
                return (!e.model.is_add || e.model.is_add && e.model.hasChanges()) && (t += this.checkFormErrors(e.$el, e.model.toJSON(), h[e.model.get("ELEMENT_TYPE")]),
                t && a.isFunction(e.showHiddenFields) && e.showHiddenFields()),
                t >= _
            }, this),
            t
        },
        clearFormErrors: function(e, t, i) {
            this.checkFormErrors(e, t, i, !0)
        },
        checkFormErrors: function(e, t, i, s) {
            var n, o, r, l, d = 0, u = "removeAttr";
            if (this._rules)
                return a.each(this._rules[i], function(c, u) {
                    l = c.replace(/(\[|\])/gi, "\\$1"),
                    n = a.pick(t, function(e, t) {
                        return t.search(new RegExp("(" + l + ").*","gi")) >= 0 && !/\[(__UNIQUE__|DESCRIPTION)\]/.test(t)
                    }, this),
                    a.isEmpty(n) || (o = a.pick(n, function(e, t) {
                        return !e
                    }),
                    r = s === !0 ? !1 : a.isEqual(o, n),
                    d += r && a.keys(o).length ? 1 : 0,
                    this.setError({
                        entity: i,
                        $form_el: e,
                        salt: i + e.attr("id"),
                        input_names: a.keys(r ? o : n),
                        rule_name: c
                    }, r))
                }, this),
                d > 0 && (u = "attr"),
                e[u]("data-errors", d),
                e[u]("data-errors-more", AMOCRM.lang.required_numeral_more),
                e[u]("data-errors-word", c.numeralWord(d, AMOCRM.lang.required_numeral)),
                d
        },
        toggleErrorTip: function(e, t) {
            var s, n, o, r, l, c = parseInt(e.$form_el.attr("data-errors") || 0), h = 1;
            a.each(e.input_names, function(_) {
                n = e.$form_el.find('[name="' + _ + '"]'),
                o = n.closest(d[e.entity]),
                r = n.closest(this._selector("cf_group")),
                r.length && "default" !== r.attr("data-id") || (r = this._findElem("main_fields")),
                a.isUndefined(l) && (l = parseInt(r.attr("data-errors") || 0)),
                t ? (s = new i({
                    model: this.model,
                    code: e.code,
                    $scroller: this._elem("form_container")
                }),
                o.find(u[e.entity]).append(s.el),
                s.animate()) : (h = -1,
                this.model.trigger("tip:remove", e.code)),
                e.$form_el.attr("data-errors", c + h),
                o[t ? "addClass" : "removeClass"]("validation-not-valid"),
                r.attr("data-errors", l + h),
                this.model.trigger("tabs:notification", r.attr("data-id") || "default", l + h)
            }, this)
        },
        _clearTabsNotifications: function() {
            this._findElem("cf_group").each(a.bind(function(e, t) {
                var i = n(t);
                i.attr("data-errors") && (i.removeAttr("data-errors"),
                this.model.trigger("tabs:notification", i.attr("data-id") || "default", 0))
            }, this))
        }
    })
}),
define("lib/common/mixin/publisher_events", ["require", "pubsub", "underscore"], function(e) {
    "use strict";
    var t = e("pubsub")
      , i = e("underscore");
    return {
        _publisher_tokens: [],
        undelegatePublisherEvents: function() {
            this._publisher_tokens = i.reject(this._publisher_tokens, function(e) {
                return t.unsubscribe(e),
                !0
            })
        },
        delegatePublisherEvents: function() {
            this.undelegatePublisherEvents(),
            i.each(i.result(this, "publisher_events", null), function(e, s) {
                i.isString(e) && (e = i.bind(this[e], this)),
                this._publisher_tokens.push(t.subscribe(s, e))
            }, this)
        }
    }
}),
define("lib/interface/card/linked/mixins/current_element", ["require", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/common/fn");
    return {
        _element: {
            type: null,
            id: 0
        },
        setCurrentElement: function(e) {
            if (!e)
                throw new Error("Empty element given");
            this._element = _.extend({}, this._element || {}),
            void 0 !== e.type && (this._element.type = t.parseLinkedType(e.type)),
            e.id >= 0 && this.setMainId(e.id)
        },
        setMainId: function(e) {
            var t = parseInt(e, 10) || 0;
            if (0 > t)
                throw new Error("Element id must be positive integer, but given " + e);
            this._element.id = t
        }
    }
}),
define("lib/interface/card/linked/linked_type_view_model", ["require", "underscore", "twig", "lib/components/base/form", "lib/core/view", "cocktail", "lib/interface/card/linked/mixins/current_element"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("twig"), n = e("lib/components/base/form"), o = e("lib/core/view"), r = e("cocktail"), a = e("lib/interface/card/linked/mixins/current_element");
    return t = o.extend({
        _model: null,
        _type: null,
        collection: null,
        model: null,
        _form: null,
        has_changes: !1,
        can_save: !1,
        _connected: !1,
        initialize: function(e) {
            if (!this._model)
                throw new Error("Model not defined");
            this.parseParams(e),
            o.prototype.initialize.apply(this, arguments),
            s._preload(i.result(this, "preload"), i.bind(function() {
                this.initForm(),
                this.render(e),
                this.renderFinished()
            }, this))()
        },
        destroy: function() {
            o.prototype.destroy.apply(this, arguments),
            this.trigger("destroy", this, this.collection)
        },
        initForm: function() {
            this._form = this._addComponent(n.View, {
                el: this.el,
                model: this._model
            })
        },
        prepareModel: function(e, t) {
            this.model || (this.model = this._form.model,
            t && this.model.setFields(t),
            this.model.editable(this.model.editable() && this.model.isNew()),
            this.model.on("has_changes", function() {
                this.applyChanges(!0)
            }, this),
            this.model.on("has_reverted", function() {
                this.applyChanges(!1)
            }, this),
            this.model.on("change:id", function(e, t, i) {
                t && i && i.request_for_create_model && (this.render({
                    item: e.attributes
                }),
                this.trigger("created"),
                e.editable(!1))
            }, this))
        },
        save: function() {
            this._form.save({
                success: i.bind(this.afterSave, this),
                error: i.bind(function() {
                    this.trigger("save:failed")
                }, this)
            })
        },
        getSavePromise: function() {
            return this.has_changes && this.canSave() ? new Promise(i.bind(function(e, t) {
                this.once("saved", e),
                this.once("save:failed", function() {
                    t()
                }),
                this.save()
            }, this)) : null
        },
        parseParams: function(e) {
            if (!e || !e.fields || !e.current)
                throw new Error("Invalid params: " + JSON.stringify([e]));
            this.setFields(e.fields),
            this.setCurrentElement(e.current),
            this.setIsLinked(e.is_linked)
        },
        setFields: function(e) {
            this.model && this.model.setFields(e)
        },
        afterSave: function() {
            this._form.revert(),
            this.trigger("saved", i.clone(this.model.attributes))
        },
        canSave: function() {
            return this.model.editable() ? !0 : !1
        },
        isLinked: function() {
            return this._connected
        },
        setIsLinked: function(e) {
            this._connected = !!e
        },
        setMainId: function() {
            var e = a.setMainId.apply(this, arguments);
            return this._form && this._form.checkChanges(),
            e
        },
        _classes: function() {
            return i.extend({}, i.result(o.prototype, "_classes"), {
                unlink: "js-linked-entity-unlink",
                add_wrapper: "js-add_wrapper"
            })
        },
        toggleState: function(e) {
            this.$el.toggleClass("closed", !e),
            this.trigger(e ? "expanded" : "closed", this)
        },
        isExpanded: function() {
            return !this.$el.hasClass("closed")
        },
        events: function() {
            var e = i.result(o.prototype, "events", {});
            return e["click " + this._selector("unlink")] = "clickUnlinkHolder",
            e["click " + this._selector("add_wrapper")] = "clickShowAddForm",
            e
        },
        clickUnlinkHolder: function() {
            this.trigger("unlink", this)
        },
        clickShowAddForm: function() {
            this.toggleState(!0)
        },
        applyChanges: function(e) {
            return this.has_changes = this.model.editable() && !!e,
            this.can_save = this.has_changes && this.canSave(),
            this.trigger("state_changed", this),
            this
        },
        renderFinished: function() {
            this.applyChanges(!1),
            this.toggleState(!1),
            this.trigger("render:finished")
        },
        _template: "",
        preload: function() {
            return [this._template, "/tmpl/catalogs/"]
        },
        render: function(e) {
            var t = this._template
              , i = s({
                ref: t
            });
            this.prepareModel(e.item, e.fields);
            var n = this.getRenderParams(e);
            this.$el.html(i.render(n)),
            this._dropElemCache(),
            this._form.setUrl()
        },
        getRenderParams: function(e) {
            return {
                item: e.item || {},
                fields: this.model.getFields(),
                values: this.model.getValues()
            }
        }
    }),
    r.mixin(t, a),
    t
}),
define("lib/interface/catalogs/element/model", ["require", "lib/interface/element_model"], function(e) {
    "use strict";
    var t = e("lib/interface/element_model");
    return t.extend({
        _editable_attributes: t.prototype._editable_attributes.concat(["catalog_id"]),
        _type: "catalog_elements",
        parse: function(e) {
            var i = t.prototype.parse.apply(this, arguments);
            return this.parseFromAPI(i)
        }
    })
}),
define("lib/interface/catalogs/element/in_card", ["require", "underscore", "twig", "lib/interface/card/linked/linked_type_view_model", "lib/common/fn", "lib/interface/catalogs/element/model"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/card/linked/linked_type_view_model")
      , n = e("lib/common/fn")
      , o = e("lib/interface/catalogs/element/model");
    return s.extend({
        _model: o,
        _elements_from_search: [],
        _standart_list_element: [],
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments)
        },
        prepareModel: function(e, i) {
            s.prototype.prepareModel.apply(this, arguments),
            this.model.setFromAPI(t.extend({
                catalog_id: this._type.id
            }, e))
        },
        parseParams: function(e) {
            s.prototype.parseParams.apply(this, arguments),
            this._type = e.type
        },
        canSave: function() {
            if (!s.prototype.canSave.apply(this, arguments))
                return !1;
            var e = this.model.get("name");
            return e ? (e = e.toString().trim(),
            e.length > 0) : (this.$el.find("input[name=name]").addClass("validate-has-error"),
            !1)
        },
        _classes: function() {
            return t.extend({}, t.result(s.prototype, "_classes"), {
                element: "js-element",
                catalog_fields_container: "catalog-fields__container",
                field_quantity: "js-change-quantity",
                unlink: "js-linked-entity-unlink"
            })
        },
        afterSave: function() {
            s.prototype.afterSave.apply(this, arguments),
            this.trigger("update_link", this)
        },
        events: function() {
            var e = t.result(s.prototype, "events", {});
            return e["submit " + this._selector("element")] = function(e) {
                e.preventDefault()
            }
            ,
            e["click " + this._selector("unlink")] = "clickUnlinkHolder",
            e["change " + this._selector("field_quantity")] = "changeQuantity",
            e["mouseenter" + this._selector("element")] = "showUnlink",
            e["mouseleave" + this._selector("element")] = "hideUnlink",
            e
        },
        hideUnlink: function() {
            this._elem("catalog_fields_container").find(".linked-form__field__more").remove()
        },
        showUnlink: function() {
            if (this.model.attributes.id) {
                var e, t, s;
                e = i({
                    ref: "/tmpl/catalogs/element/in_card/tips.twig"
                }),
                t = {
                    icon: "button-unlink",
                    class_name: this._class("unlink"),
                    text: n.i18n("Detach")
                },
                s = $(e.render(t)),
                this._elem("catalog_fields_container").append(s)
            }
        },
        changeQuantity: function() {
            this.model.set("quantity", this._elem("field_quantity").val(), {
                skip_check_editable: !0
            })
        },
        clickUnlinkHolder: function() {
            this.trigger("unlink", this)
        },
        toggleState: function(e) {},
        renderFinished: function() {
            s.prototype.renderFinished.apply(this, arguments),
            this.trigger("render:finished")
        },
        _template: "/tmpl/catalogs/element/in_card.twig",
        preload: function() {
            var e = s.prototype.preload.apply(this, arguments);
            return e.push("/tmpl/catalogs/element/in_card/tips.twig"),
            e.push("/tmpl/catalogs/base_element.twig"),
            e
        },
        render: function(e) {
            s.prototype.render.apply(this, arguments),
            this.$el.addClass("element_detail_wrapper"),
            this._form.setElement(this._elem("element")),
            this._form.setUrl(),
            this.autosizeCatalogElementInput()
        },
        autosizeCatalogElementInput: function() {
            this.$el.find(".js-control-allow-numeric").autosizeInput()
        },
        getRenderParams: function(e) {
            var i = s.prototype.getRenderParams.apply(this, arguments);
            t.each(i.values, function(e, t) {
                "price" == e.default_code && (i.values[t].value = i.values[t].value ? n.reductNumericValue({
                    value: i.values[t].value,
                    maxValue: 9999,
                    isCurrency: !0
                }) : "-")
            }, this),
            i.catalog = this._type;
            var o = {
                sku: {
                    sort: 0
                },
                amount: {
                    sort: 1
                },
                name: {
                    sort: 2
                },
                price: {
                    sort: 3
                }
            };
            return t.each(o, function(e, s) {
                o[s] = t.findWhere(i.fields, {
                    default_code: s
                })
            }, this),
            o.amount = {
                default_code: "amount",
                value: e.item && t.isNumber(e.item.quantity) ? e.item.quantity : 1
            },
            i.fields = o,
            i
        }
    })
}),
define("lib/interface/card/linked/linked_holder", ["require", "cocktail", "backbone", "lib/interface/card/linked/mixins/current_element", "lib/core/view", "lib/common/fn", "underscore"], function(e) {
    "use strict";
    var t = e("cocktail")
      , i = e("backbone")
      , s = e("lib/interface/card/linked/mixins/current_element")
      , n = e("lib/core/view")
      , o = e("lib/common/fn")
      , r = e("underscore")
      , a = n.extend({
        $el: null,
        _el_class: "linked-holder",
        _raw_element: null,
        _info: null,
        _is_active: !1,
        initialize: function(e) {
            this.$el.addClass(this._el_class),
            this.parseParams(e),
            n.prototype.initialize.apply(this, arguments)
        },
        loadData: function() {
            throw new Error("Override this function, please")
        },
        parseParams: function(e) {
            if (!e)
                throw new Error("Please, read docs for initialize function");
            this.setInfo(e.type),
            this.setCurrentElement(e.current),
            this.setRawElement(e.raw_element),
            this.setNotesCollection(e.notes)
        },
        setNotesCollection: function(e) {
            e = e || this._addComponent(i.Collection),
            this._card_notes = e
        },
        setInfo: function(e) {
            this._info = o.parseLinkedType(e)
        },
        getInfo: function(e) {
            var t = this._info || {};
            return e && (t = t[e] || null),
            t
        },
        setRawElement: function(e) {
            e && (this._raw_element = r.extend({}, this._raw_element, e))
        },
        toggle: function(e) {
            e = void 0 === e ? !this._is_active : !!e,
            this._is_active = e,
            this.$el.toggle(this._is_active)
        }
    });
    return t.mixin(a, s),
    a
}),
define("lib/interface/card/linked/linked_type_holder", ["require", "backbone", "lib/interface/card/linked/linked_holder", "underscore", "cocktail", "lib/interface/card/linked/mixins/current_element", "lib/components/fields/mixins/parser"], function(e) {
    "use strict";
    var t, i = e("backbone"), s = e("lib/interface/card/linked/linked_holder"), n = e("underscore"), o = e("cocktail"), r = e("lib/interface/card/linked/mixins/current_element"), a = e("lib/components/fields/mixins/parser");
    return t = s.extend({
        _el_class: "linked-form-holder",
        _model: null,
        collection: null,
        _elements: null,
        has_changes: !1,
        can_save: !1,
        _can_add: !0,
        initialize: function(e) {
            if (!this._model)
                throw new Error("Model not defined");
            s.prototype.initialize.apply(this, arguments),
            this.loadData(n.bind(this.initElements, this))
        },
        destroy: function() {
            s.prototype.destroy.apply(this, arguments),
            this.trigger("destroy", this, this.collection)
        },
        initElements: function(e) {
            var t;
            this._elements = new i.Collection(null,{
                model: this._model
            }),
            this._can_add && e.push(null),
            t = n.map(e, this.initElement, this),
            $.prototype.append.apply(this.$el, t),
            this._elements.on("state_changed", this.onLinkedElementChange, this),
            this._elements.on("created chosen", this.makeNewElement, this),
            this._elements.on("unlink", this.unLinkElement, this)
        },
        initElement: function(e) {
            var t = {
                type: this.getInfo(),
                fields: this.getFields(),
                current: this._element,
                item: e,
                is_linked: !!e
            }
              , i = this._elements.add(t);
            return i.el
        },
        makeNewElement: function() {
            this.$el.append(this.initElement(null))
        },
        loadData: function() {
            throw new Error("Implement this method, please")
        },
        getBeforeElementSavePromise: function() {
            var e = [];
            return this._elements.each(function(t) {
                var i = t.getSavePromise();
                null !== i && e.push(i)
            }, this),
            e.length ? Promise.all(e) : null
        },
        getAfterElementSavePromise: function() {
            var e = [];
            return this._elements.each(function(t) {
                var i = this.getElementLinkIfCanAndNeed(t);
                null !== i && e.push(i)
            }, this),
            e.length ? new Promise(n.bind(function(t) {
                this.callLinks({
                    link: e
                }, n.bind(function() {
                    this._elements.each(function(e) {
                        e.setIsLinked(e.model && !e.model.isNew())
                    }, this),
                    t()
                }, this))
            }, this)) : null
        },
        unLinkElement: function(e) {
            var t;
            if (e.model) {
                if (!e.isLinked())
                    return void e.destroy(!0);
                t = this.buildElementLink(e),
                t && (this._$document.trigger("page:show:overlay"),
                this.callLinks({
                    unlink: [t]
                }, n.bind(function() {
                    e.setIsLinked(!1),
                    e.destroy(!0),
                    this._$document.trigger("page:hide:overlay")
                }, this)))
            }
        },
        loadLinks: function(e, t, i) {
            return this._loadData("/ajax/v1/links/list/", {
                links: [{
                    from: t.type,
                    from_id: i,
                    to: this.getInfo("type"),
                    from_catalog_id: t.id,
                    to_catalog_id: this.getInfo("id")
                }]
            }, "links")
        },
        callLinks: function(e, t) {
            $.post("/ajax/v1/links/set/", {
                request: {
                    links: e
                }
            }).always(t)
        },
        getElementLinkIfCanAndNeed: function(e) {
            return e.model ? e.isLinked() ? null : this.buildElementLink(e) : null
        },
        isActive: function() {
            return this._is_active
        },
        setMainId: function(e) {
            r.setMainId.apply(this, arguments),
            this._elements && this._elements.each(function(t) {
                t.setMainId(e)
            })
        },
        toggle: function(e) {
            s.prototype.toggle.apply(this, arguments),
            this.autoSizeInputs()
        },
        autoSizeInputs: function() {
            this._elements && this._elements.each(function(e) {
                n.isFunction(e.autosizeCatalogElementInput) && e.autosizeCatalogElementInput()
            })
        },
        expandFirstElement: function() {
            var e = this._elements.first();
            e.toggleState(!e.model.isNew())
        },
        onLinkedElementChange: function() {
            var e = !1
              , t = this._elements.length > 0;
            this._elements.each(function(i) {
                i.model && (e = e || i.has_changes || !(i.model.isNew() || i.isLinked()),
                t = t && (!i.has_changes || i.can_save))
            }),
            this.has_changes = e,
            this.can_save = e && t,
            this.trigger("state_changed", this)
        },
        buildElementLink: function(e, t) {
            var i, s;
            return t = t || !1,
            e.model.isNew() ? null : (s = {
                from: this._element.type.type,
                from_id: parseInt(this._element.id),
                to: this.getInfo("type"),
                to_id: parseInt(e.model.get("id")),
                from_catalog_id: parseInt(this._element.type.id),
                to_catalog_id: parseInt(this.getInfo("id"))
            },
            i = [],
            n.each(t, function(e, t) {
                i[t] = e
            }),
            i && n.extend(s, i),
            s)
        }
    }),
    o.mixin(t, a),
    t
}),
define("lib/interface/card/linked/linked_type_search", ["require", "underscore", "twig", "lib/core/view", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view")
      , n = e("lib/common/fn")
      , o = 38
      , r = 40
      , a = '<div data-value-id="<%= data.id %>" class="catalog-fields__container catalog-fields__container--search-res control--suggest--list--item"><div class="catalog-fields__container-item catalog-fields__container-item--name "><p class="catalog-fields__text catalog-fields__text--name " title="<%= data.title %>"><%= data.text %></p></div><div class="catalog-fields__container-item catalog-fields__container-item--sku "><p class="catalog-fields__text catalog-fields__text--sku "><%= data.additional_data.sku %></p></div><div class="catalog-fields__container-item catalog-fields__container-item--price "><p class="catalog-fields__text catalog-fields__text--price "><%= data.additional_data.price %></p></div></div>';
    return s.extend({
        _wrapper: null,
        _type: null,
        _standart_elements_cache: null,
        _standart_list_element: [],
        _elements_from_search: [],
        _template: "/tmpl/catalogs/element/in_card/linked_search_element.twig",
        _classes: function() {
            return t.extend({}, t.result(s.prototype, "_classes"), {
                el: "js-search_suggest",
                add_wrapper_text: "js-add_wrapper_text",
                catalog_elements_holder: "catalog_elements-in_card",
                close_suggest_click: "js-close_search_click_area",
                suggest_wrapper: "js-suggest_wrapper",
                suggest_holder: "js-suggest_holder",
                suggest: "js-suggest-element",
                suggest_list: "js-control--suggest--list",
                suggest_placeholder: "js-suggest_placeholder",
                element: "js-element",
                tip_holder: "js-tip-holder",
                catalog_fields_container: "catalog-fields__container",
                field_quantity: "js-change-quantity",
                unlink: "js-linked-entity-unlink",
                add_wrapper: "js-add_wrapper"
            })
        },
        events: function() {
            var e = t.result(s.prototype, "events", {});
            return e["submit " + this._selector("element")] = function(e) {
                e.preventDefault()
            }
            ,
            e["click " + this._selector("add_wrapper_text")] = "clickShowSuggest",
            e["keyup " + this._selector("suggest")] = "showStandartElementsChange",
            e["click " + this._selector("close_suggest_click")] = function(e) {
                this.onSuggestBlur(e, !0)
            }
            ,
            e["suggest:loaded " + this._selector("suggest")] = "onSuggestLoaded",
            e["suggest:changed " + this._selector("suggest")] = "onSuggestChosen",
            e["click " + this._selector("unlink")] = "clickUnlinkHolder",
            e["change " + this._selector("field_quantity")] = "changeQuantity",
            e
        },
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments);
            var t = this;
            this.options = e || {},
            this._wrapper = this.options.wrapper,
            this._type = this.options.type,
            this._elements = this.options.elements,
            this._$document.on("hide_catalog_in_card_search", function(e) {
                t.onSuggestBlur(e, !0)
            }),
            this._$document.on("click", ".js-card-feed", function(e) {
                t._$document.trigger("hide_catalog_in_card_search")
            }),
            this.render(),
            this.getStandartElements()
        },
        render: i._preload(["/tmpl/catalogs/element/in_card/linked_search_element.twig"], "_render"),
        refreshElements: function(e) {
            this._elements = e,
            this._standart_list_element = this.prepareItemsForSuggest(this._standart_elements_cache)
        },
        _render: function() {
            var e = this
              , s = this._template
              , o = i({
                ref: s
            })
              , r = {
                id: t.uniqueId("suggest_id_"),
                name: t.uniqueId("suggest_name_"),
                placeholder: n.i18n("Name"),
                class_name: this._class("suggest_wrapper") + " hidden contact_name_wrapper__suggest catalog-fields__search",
                input_class_name: "js-suggest-element linked-form__cf",
                additional_data: 'data-linked-type="' + e._type.id + '"',
                ajax: {
                    url: "/ajax/v1/catalog_elements/list/",
                    params: "catalog_id=" + e._type.id + "&term=#q#"
                }
            };
            "widget" === this._type.type && (r.widget = this._type.id),
            $(this._wrapper).append(o.render(r)),
            this.setElement(this._wrapper.find(this._selector("el")))
        },
        clickShowSuggest: function() {
            this._elem("suggest_holder").hasClass("hidden") && (this.$el.addClass("catalog_in_card_element_in_search"),
            $(this._selector("catalog_elements_holder")).addClass("catalog_searching_elements"),
            this._elem("close_suggest_click").removeClass("hidden"),
            this._elem("suggest_wrapper").removeClass("hidden"),
            this._elem("suggest_holder").removeClass("hidden"),
            this._elem("add_wrapper_text").addClass("hidden"),
            this._elem("suggest").focus(),
            this.showStandartElements())
        },
        onSuggestBlur: function(e, t) {
            t = t || !1,
            (!this._elem("suggest").val() || t) && (this.$el.removeClass("catalog_in_card_element_in_search"),
            $(this._selector("catalog_elements_holder")).removeClass("catalog_searching_elements"),
            this._elem("close_suggest_click").addClass("hidden"),
            this._elem("suggest_wrapper").addClass("hidden"),
            this._elem("suggest_holder").addClass("hidden"),
            this._elem("add_wrapper_text").removeClass("hidden"),
            this.trigger("add:failed", this))
        },
        showStandartElementsChange: function(e) {
            this._elem("suggest").val() || -1 !== [o, r].indexOf(e.keyCode) || this.showStandartElements(!0)
        },
        showStandartElements: function(e) {
            this._standart_list_element && (e === !0 ? this._elem("suggest_list").trigger("suggest:reset", [this._standart_list_element, a]) : t.delay(t.bind(function() {
                this._elem("suggest_list").trigger("suggest:reset", [this._standart_list_element, a])
            }, this), 500))
        },
        getStandartElements: function() {
            "widget" === this._type.type ? t.isFunction(n.getWidgetCallbacks(this._type.id).loadPreloadedData) && n.getWidgetCallbacks(this._type.id).loadPreloadedData().then(t.bind(function(e) {
                e = n.cleanResponse(e),
                this._standart_elements_cache = e,
                this._standart_list_element = this.prepareItemsForSuggest(this._standart_elements_cache)
            }, this))["catch"](t.bind(function(e) {
                console.error(e)
            }, this)) : $.get("/ajax/v1/catalog_elements/list/", {
                catalog_id: this._type.id,
                json: 1,
                PAGEN_1: 1
            }, t.bind(function(e) {
                e = n.cleanResponse(e),
                this._standart_elements_cache = e.catalog_elements,
                this._standart_list_element = this.prepareItemsForSuggest(this._standart_elements_cache)
            }, this), "json")
        },
        prepareItemsForSuggest: function(e) {
            var i = [];
            return t.each(e, function(e) {
                var s, o, r = "widget" === this._type.type;
                if (e && e.id) {
                    e.id = parseInt(e.id);
                    var a = this._elements.find(function(t) {
                        return t.model.get("id") === e.id
                    });
                    a || (this._elements_from_search.push(e),
                    r ? (s = e.price,
                    o = e.sku) : t.each(e.custom_fields, function(e) {
                        "PRICE" == e.code && (s = e.values[0].value),
                        "SKU" == e.code && (o = e.values[0].value)
                    }),
                    i.push({
                        id: e.id,
                        text: n.escapeHTML(e.name),
                        additional_data: {
                            price: s ? n.reductNumericValue({
                                value: s,
                                maxValue: 9999,
                                isCurrency: !0
                            }) : "-",
                            sku: o ? o : "-"
                        }
                    }))
                }
            }, this),
            i
        },
        onSuggestLoaded: function(e, t, i) {
            var s = this.prepareItemsForSuggest(t.result);
            i.trigger("suggest:reset", [s, a])
        },
        onSuggestChosen: function(e) {
            var i = $(e.currentTarget).attr("data-value-id")
              , s = t.findWhere(this._elements_from_search, {
                id: parseInt(i)
            });
            if (!s)
                throw new Error("Chosen not in searched id");
            this._elem("suggest").val(""),
            this.onSuggestBlur(),
            this._$document.trigger("catalog:need_scroll"),
            this.trigger("search_elements:chosen", s),
            this.trigger("chosen", this)
        }
    })
}),
define("lib/interface/catalogs/catalog/in_card", ["require", "jquery", "underscore", "lib/interface/catalogs/element/in_card", "lib/interface/card/linked/linked_type_holder", "lib/common/fn", "lib/interface/card/linked/linked_type_search", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/interface/catalogs/element/in_card")
      , n = e("lib/interface/card/linked/linked_type_holder")
      , o = e("lib/common/fn")
      , r = e("lib/interface/card/linked/linked_type_search")
      , a = e("lib/common/user_rights");
    return n.extend({
        _model: s,
        _elements_order: [],
        _search: null,
        initialize: function(e) {
            var i = this;
            n.prototype.initialize.apply(this, arguments),
            this._$document.on("catalog:need_scroll", function() {
                var e = t(".card-holder__container");
                e.stop().animate({
                    scrollTop: e[0].scrollHeight
                }, 500)
            }),
            (a.getRights(AMOCRM.data.current_entity, "can_save", !0) || "customers" === AMOCRM.data.current_entity && AMOCRM.constant("grant_edit")) && this.on("render:finished", function() {
                this._search = this._addComponent(r, {
                    wrapper: i.$el,
                    type: i._info,
                    elements: i._elements
                }),
                this._search.on("search_elements:chosen", this.initChosenElement, this)
            })
        },
        loadData: function(e) {
            var t = this.getInfo("id")
              , s = [this.loadFields(t)];
            return this._element.id > 0 && s.push(this.loadLinkedElements(t, this._element.type, this._element.id)),
            this.$el.addClass("js-cf-group-wrapper catalog_elements-in_card"),
            Promise.all(s).then(i.bind(function(t) {
                var i = t[0]
                  , s = t[1] || [];
                this.setFields(i),
                e(s)
            }, this))["catch"](i.bind(function(e) {
                console.error(e)
            }, this))
        },
        loadFields: function(e) {
            return this._loadData("/ajax/catalogs/" + e + "/fields/", {}, "", !1)
        },
        loadLinkedElements: function(e, t, s) {
            return new Promise(i.bind(function(n) {
                this.loadLinks(e, t, s).then(i.bind(function(o) {
                    this.loadElements(e, this.parseLinks(o, e, t, s)).then(function(e) {
                        i.each(e, function(t, s) {
                            e[s].quantity = i.findWhere(o, {
                                to_id: t.id
                            }).quantity
                        }),
                        n(e)
                    })
                }, this))
            }, this))
        },
        loadElements: function(e, t) {
            return t && t.length ? (this._elements_order = t,
            this._loadData("/ajax/v1/catalog_elements/list/", {
                catalog_id: e,
                id: t
            }, "catalog_elements")) : new Promise(function(e) {
                e([])
            }
            )
        },
        getElementLinkIfCanAndNeed: function(e) {
            if (!e.model)
                return null;
            if (e.isLinked())
                return null;
            var t = {
                quantity: e.model.get("quantity")
            };
            return this.buildElementLink(e, t)
        },
        updateLinkElement: function(e) {
            if (e.model && e.isLinked()) {
                var t = this.buildElementLink(e, {
                    quantity: e.model.get("quantity")
                });
                t && this.callLinks({
                    link: [t]
                }, i.bind(function() {}, this))
            }
        },
        parseLinks: function(e, t, s, n) {
            var o = []
              , r = this.getInfo("type");
            return i.each(e, function(e) {
                return i.each(["from", "to"], function(t) {
                    var i = t + "_id";
                    e[i] = parseInt(e[i], 10),
                    i = t + "_catalog_id",
                    e[i] && (e[i] = parseInt(e[i], 10))
                }),
                e.from !== s.type || e.from_id !== n || e.from === r && e.from_catalog_id !== s.id || e.to === r && e.to_catalog_id !== t ? void (e.to === s.type && e.to_id === n && (e.to !== r || e.to_catalog_id === t) && (e.from !== r || e.from_catalog_id === s.id) && o.push(e.from_id)) : void o.push(e.to_id)
            }, this),
            o
        },
        initElements: function(e) {
            var t = e.length;
            e = i.sortBy(e, function(e) {
                var s = -1;
                return e && e.id && (s = i.indexOf(this._elements_order, e.id)),
                s > -1 ? s : ++t
            }, this),
            this._elements = new Backbone.Collection(null,{
                model: this._model
            });
            var s = i.map(e, this.initElement, this);
            this.$el.append(s),
            this._elements.on("state_changed", this.onLinkedElementChange, this),
            this._elements.on("created", this.makeNewElement, this),
            this._elements.on("unlink", this.unLinkElement, this),
            this._elements.on("expanded add:started", this.closeElementsExcept, this),
            this._elements.on("update_link", this.updateLinkElement, this),
            this._elements.on("destroy", this.refreshSearch, this),
            this.waitForRenderFinished()
        },
        initChosenElement: function(e) {
            var t = {
                type: this.getInfo(),
                fields: this.getFields(),
                current: this._element,
                item: e,
                is_linked: !1
            }
              , i = this._elements.add(t);
            this.$el.append(i.el),
            this._search.$el.before(i.el),
            this._elements.on("render:finished", this.refreshSearch, this)
        },
        refreshSearch: function() {
            this._search.refreshElements(this._elements)
        },
        waitForRenderFinished: function() {
            var e = this._elements.length
              , t = 0;
            this._elements.on("render:finished", function() {
                ++t === e && (this._elements.off("render:finished"),
                this.trigger("render:finished", this))
            }, this),
            0 === e && this.trigger("render:finished", this)
        },
        _loadData: function(e, s, n, r) {
            return new Promise(i.bind(function(a, l) {
                var c = t.get(e, s, i.bind(function(e) {
                    e = o.cleanResponse(e);
                    var t = n ? e[n] : e;
                    if (!t)
                        throw new Error("Invalid response data: " + JSON.stringify(e));
                    a(r ? i.first(i.values(t)) : t)
                }, this), "json");
                c.fail(l)
            }, this))
        },
        toggle: function(e) {
            n.prototype.toggle.apply(this, arguments),
            t(document).trigger("hide_catalog_in_card_search")
        }
    })
}),
define("lib/interface/sdk/element/model", ["require", "lib/interface/element_model"], function(e) {
    "use strict";
    var t = e("lib/interface/element_model");
    return t.extend({
        _type: "sdk_elements",
        destroy: function() {
            t.prototype.destroy.apply(this, arguments)
        }
    })
}),
define("lib/interface/sdk/element/in_card", ["require", "underscore", "twig", "lib/common/fn", "lib/interface/sdk/element/model", "lib/interface/catalogs/element/in_card"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = (e("twig"),
    e("lib/common/fn"),
    e("lib/interface/sdk/element/model"))
      , s = e("lib/interface/catalogs/element/in_card");
    return s.extend({
        _model: i,
        prepareModel: function(e, i) {
            return this.model || (this.model = this._form.model,
            i && this.model.setFields(i),
            this.model.on("has_changes", function() {
                this.applyChanges(!0)
            }, this),
            this.model.on("has_reverted", function() {
                this.applyChanges(!1)
            }, this)),
            this.model.setFromAPI(t.extend({
                widget_id: this._type.id
            }, e)),
            this
        },
        render: function(e) {
            s.prototype.render.apply(this, arguments),
            this._form.setUrl("#")
        },
        save: function() {
            this.trigger("saved", t.clone(this.model.attributes)),
            this.trigger("update_link", this)
        }
    })
}),
define("lib/interface/sdk/in_card", ["require", "underscore", "jquery", "lib/interface/catalogs/catalog/in_card", "lib/interface/sdk/element/in_card", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = (e("jquery"),
    e("lib/interface/catalogs/catalog/in_card"))
      , s = e("lib/interface/sdk/element/in_card")
      , n = e("lib/common/fn");
    return i.extend({
        _model: s,
        loadData: function(e) {
            if (t.isFunction(n.getWidgetCallbacks(this.id).loadElements)) {
                var i = []
                  , s = {
                    base_fields: [{
                        id: "sku",
                        code: "sku",
                        name: "SKU",
                        disabled: !0,
                        format: "",
                        type_code: "numeric",
                        sortable: !1,
                        filterable: !1
                    }, {
                        id: "quantity",
                        code: "quantity",
                        name: "QUANTITY",
                        disabled: !0,
                        format: "",
                        type_code: "numeric",
                        sortable: !1,
                        filterable: !1
                    }, {
                        id: "name",
                        code: "name",
                        name: "Name",
                        disabled: !0,
                        format: "",
                        type_code: "name",
                        sortable: !1,
                        filterable: !1
                    }, {
                        id: "price",
                        code: "price",
                        name: "PRICE",
                        disabled: !0,
                        format: "",
                        type_code: "numeric",
                        sortable: !1,
                        filterable: !1
                    }]
                }
                  , o = [];
                return this._element.id > 0 && o.push(n.getWidgetCallbacks(this.id).loadElements(this._element.type, this._element.id)),
                this.$el.addClass("catalog_elements-in_card"),
                Promise.all(o).then(t.bind(function(t) {
                    i = t[0] || i,
                    this.setFields(s),
                    this._$document.trigger("catalog:need_scroll"),
                    e(i)
                }, this))["catch"](t.bind(function(e) {
                    console.error(e)
                }, this))
            }
        },
        initElement: function(e) {
            var t;
            t = e && e.change_quantity_url ? e.change_quantity_url : !1;
            var i = {
                type: this.getInfo(),
                fields: this.getFields(),
                current: this._element,
                item: e,
                is_linked: !!e,
                change_quantity_url: t
            }
              , s = this._elements.add(i);
            return s.el
        },
        callLinks: function(e, i) {
            t.isFunction(n.getWidgetCallbacks(this.id).linkCard) && n.getWidgetCallbacks(this.id).linkCard(e).then(t.bind(function(e) {
                i()
            }, this))["catch"](t.bind(function(e) {
                console.error(e)
            }, this))
        },
        getElementLinkIfCanAndNeed: function(e) {
            if (!e.model)
                return null;
            if (e.isLinked())
                return null;
            var t = {
                quantity: e.model.get("quantity")
            };
            return this.buildElementLink(e, t)
        },
        updateLinkElement: function(e) {
            if (e.model && e.isLinked()) {
                var i = this.buildElementLink(e, {
                    quantity: e.model.get("quantity")
                });
                i && this.callLinks({
                    link: [i]
                }, t.bind(function() {
                    e.trigger("saved", t.clone(e.model.attributes))
                }, this))
            }
        },
        buildElementLink: function(e, i) {
            if (i = i || !1,
            e.model.isNew())
                return null;
            var s = {
                from: this._element.type.type,
                from_id: parseInt(this._element.id, 10),
                to: this.getInfo("type"),
                to_id: parseInt(e.model.get("id"), 10),
                to_widget_id: this.getInfo("id")
            }
              , n = [];
            return t.each(i, function(e, t) {
                n[t] = e
            }),
            n && t.extend(s, n),
            s
        },
        initChosenElement: function(e) {
            e.quantity = 1;
            var t = {
                type: this.getInfo(),
                fields: this.getFields(),
                current: this._element,
                item: e,
                is_linked: !1
            }
              , i = this._elements.add(t);
            this.$el.append(i.el),
            this._search.$el.before(i.el),
            this._elements.on("render:finished", this.refreshSearch, this)
        }
    })
}),
define("lib/interface/transactions/model", ["require", "lib/interface/element_model"], function(e) {
    "use strict";
    var t = e("lib/interface/element_model");
    return t.extend({
        url: "/ajax/v1/transactions/set/",
        _editable_attributes: t.prototype._editable_attributes.concat(["customer_id", "date", "price", "comment"]),
        _type: "transactions"
    })
}),
define("lib/interface/transactions/view_model", ["require", "underscore", "twig", "backbone", "jquery", "lib/common/fn", "lib/interface/transactions/model", "lib/interface/card/linked/linked_type_view_model", "lib/core/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = (e("backbone"),
    e("jquery"))
      , n = e("lib/common/fn")
      , o = e("lib/interface/transactions/model")
      , r = e("lib/interface/card/linked/linked_type_view_model");
    e("lib/core/view");
    return r.extend({
        has_customer_id: !0,
        _model: o,
        prepareModel: function(e, i) {
            r.prototype.prepareModel.apply(this, arguments),
            this.model.setFromAPI(t.extend({
                customer_id: this._element.id
            }, e)),
            this.model.editable(this.model.isNew())
        },
        initialize: function() {
            r.prototype.initialize.apply(this, arguments),
            this.$card_fields = s("#card_fields"),
            this._$document.on("click" + this.ns, "#validation_counter", t.bind(this.nextInput, this)),
            this._$document.on("mouseover" + this.ns, "#validation_counter", t.bind(this.showTTBtn, this)),
            this._$document.on("mouseout" + this.ns, "#validation_counter", t.bind(this.hideTTBtn, this))
        },
        deleteRequest: function(e) {
            this.model.destroy({
                wait: !0,
                success: t.bind(function() {
                    this.unlink(),
                    e()
                }, this)
            })
        },
        unlink: function() {
            this.setIsLinked(!1),
            this.destroy(!0)
        },
        validate: function() {
            return this.$el.hasClass("js-need-validate") && (this.actionAfterValid("price", this.isValidInput("price")),
            this.actionAfterValid("date", this.isValidInput("date"))),
            0 !== this.$(".validation-not-valid").length ? !1 : !0
        },
        save: function() {
            return this.validate() ? (0 === this.model.get("customer_id") && this.setMainId(),
            this.$el.removeClass("js-need-validate"),
            void r.prototype.save.apply(this, arguments)) : (this.trigger("save:failed"),
            this._addClass("need_validate", "price_wrap"),
            void this._addClass("need_validate", "date_wrap"))
        },
        afterSave: function() {
            var e = r.prototype.afterSave.apply(this, arguments);
            return this.setIsLinked(!0),
            e
        },
        applyChanges: function(e) {
            return this.has_changes = this.model.editable() && !!e,
            this.has_changes && this.trigger("state_changed", this),
            this
        },
        isValidInput: function(e) {
            var t, i, s = !0;
            return r.prototype.canSave.apply(this, arguments) ? (t = this.model.get(e),
            (i = !t || 0 === t.toString().trim().length) ? !1 : ("price" !== e || !isNaN(parseFloat(t)) && isFinite(t)) && ("date" !== e || (s = n.getMoment(this.model.get("date")).format("X") < moment().format("X"))) ? (s && (s = this._element.id > 0),
            !0) : !1) : !1
        },
        actionAfterValid: function(e, t) {
            var i = e + "_wrap";
            t ? (this._removeClass("not_valid", i),
            this.$(".js-field-" + e + " .validation-tip").removeClass("showed"),
            0 !== s("#validation_counter").length && 0 === this.$(".validation-not-valid").length ? (s("#validation_counter").remove(),
            this.$card_fields.find(".validation-button-cap__tooltip").remove(),
            this.$card_fields.find(".button-input_add").removeClass("hidden"),
            this.$card_fields.find(".card-fields__button-block").removeClass("js-highlighting")) : 0 !== this.$(".validation-not-valid").length && this.addErrorBtn(this.$(".showed").length)) : (this._addClass("not_valid", i),
            this.$(".js-field-" + e + " .validation-tip").addClass("showed"),
            this.addErrorBtn(this.$(".showed").length)),
            this.renderInputToolTipsError(),
            this.renderTabToolTipError()
        },
        renderInputToolTipsError: function() {
            var e = t.template("<%= count %> " + AMOCRM.lang.step_of + " <%= all_count %>");
            this.$("#tt_date").hasClass("showed") && this.$("#tt_date").html(e({
                count: 1,
                all_count: 1
            })),
            this.$("#tt_price").hasClass("showed") && this.$("#tt_price").html(e({
                count: 1,
                all_count: 1
            })),
            2 === this.$(".showed").length && (this.$("#tt_price").html(e({
                count: 1,
                all_count: 2
            })),
            this.$("#tt_date").html(e({
                count: 2,
                all_count: 2
            })))
        },
        renderTabToolTipError: function(e) {
            var t = AMOCRM.element_types.transactions;
            0 === this.$(".showed").length ? s(".js-card-tab[data-id=" + t + "]").removeAttr("data-notification") : s(".js-card-tab[data-id=" + t + "]").attr("data-notification", this.$(".showed").length)
        },
        addErrorBtn: function(e) {
            return 0 !== s("#validation_counter").length && 0 !== this.$("validation-not-valid") ? void this.countErrorBtn(e) : (this.$card_fields.find(".button-input_add").addClass("hidden"),
            void (0 !== !this.$(".showed").length && (this.$card_fields.find(".card-fields__button-block").addClass("js-highlighting"),
            this.$card_fields.find(".card-fields__button-block").prepend(i({
                ref: "/tmpl/cards/forms/validation.twig"
            }).render({
                index: 1,
                count: e,
                text: n.i18n("save_purchase"),
                no_button: !0,
                class_name: "validation-button-cap__tooltip"
            })))))
        },
        countErrorBtn: function(e) {
            var i = 1
              , n = t.template("<%= index %>/<%= count %>");
            1 === this.$(".showed").length ? i = 1 : this._hasClass("focus", "date_wrap") ? i = 2 : this._hasClass("focus", "price_wrap") && (i = 1),
            s("#validation_counter").html('<span class="validation-button-cap__arrow left"><b></b></span>' + n({
                index: i,
                count: e
            }) + '<span class="validation-button-cap__arrow right"><b></b></span>')
        },
        clickShowAddForm: function() {
            r.prototype.clickShowAddForm.apply(this, arguments),
            this.$el.addClass("js-need-validate"),
            this._elem("date_input").attr("autocomplete", "off"),
            this._elem("price_input").focus(),
            this._elem("comment_input").attr("placeholder", "...")
        },
        nextInput: function() {
            var e = !0
              , t = !0
              , i = 0;
            1 === s(".linked-form__field-numeric .showed").length && (e = !1,
            i++),
            1 === s(".linked-form__field-date .showed").length && (t = !1,
            i++),
            e && !t ? (this._elem("date_input").focus(),
            this._addClass("focus", "date_wrap")) : !e && t ? (this._elem("price_input").focus(),
            this._addClass("focus", "price_wrap")) : this._hasClass("focus", "date_wrap") ? (this._toggleClass("focus", "date_wrap"),
            this._toggleClass("focus", "price_wrap"),
            this._elem("price_input").focus()) : this._hasClass("focus", "price_wrap") ? (this._toggleClass("focus", "price_wrap"),
            this._toggleClass("focus", "date_wrap"),
            this._elem("date_input").focus()) : (this._toggleClass("focus", "price_wrap"),
            this._elem("price_input").focus()),
            this.countErrorBtn(i),
            e = !0,
            t = !0,
            i = 0
        },
        cancelForm: function() {
            this.$el.addClass("closed"),
            this.$el.removeClass("js-need-validate"),
            this._removeClass("need_validate", "price_wrap"),
            this._removeClass("need_validate", "date_wrap"),
            this.actionAfterValid("price", !0),
            this.actionAfterValid("date", !0),
            this._elem("price_input").val("").trigger("controls:change"),
            this._elem("date_input").val("").trigger("controls:change"),
            this._addClass("empty", "date_input"),
            this._elem("comment_input").val("").trigger("controls:change"),
            this.$card_fields.find(".card-fields__button-block").addClass("hidden").removeClass("js-highlighting"),
            s("#save_and_close_contacts_link").trigger("button:save:disable")
        },
        showTTBtn: function() {
            this.$card_fields.find(".validation-button-cap__tooltip").addClass("validation-button-cap__tooltip_showed")
        },
        hideTTBtn: function() {
            this.$card_fields.find(".validation-button-cap__tooltip").removeClass("validation-button-cap__tooltip_showed")
        },
        _classes: function() {
            return t.extend({}, t.result(r.prototype, "_classes"), {
                price_wrap: "js-field-price",
                price_input: "js-control-allow-numeric",
                price_tt: "linked-form__field-numeric .js-validation-tip.validation-tip",
                date_wrap: "js-field-date",
                date_input: "date_field.linked-form__cf",
                date_tt: "linked-form__field-date .js-validation-tip.validation-tip",
                comment_wrap: "linked-form__field.linked-form__field-textarea",
                comment_input: "linked-form__field-textarea .text-input-textarea",
                comment_input_all: "text-input-textarea",
                cancel_btn: "js-linked-cancel",
                btn_block: "card-fields__button-block",
                trans_new: "transaction_new",
                trans_new_close: "transaction_new.closed",
                focus_comment_wrap: "linked-form__field-focused",
                focus_comment_input: "js-linked-in-edit",
                show_tt_input: "showed",
                hidden: "hidden",
                closed: "closed",
                empty: "empty",
                not_valid: "validation-not-valid",
                focus: "js-focused",
                unf: "js-unfocus",
                need_validate: "js-need-validate"
            })
        },
        events: function() {
            var e = t.extend(r.prototype.events.apply(this, arguments) || {}, {});
            return e["click .add_new_element_wrapper"] = "clickShowAddForm",
            e["keyup " + this._selector("price_wrap") + this._selector("need_validate")] = "validate",
            e["controls:change " + this._selector("date_wrap") + this._selector("need_validate")] = "validate",
            e["click " + this._selector("cancel_btn")] = "cancelForm",
            e
        },
        _template: "/tmpl/transactions/in_card.twig",
        render: function(e) {
            r.prototype.render.apply(this, arguments),
            this.$el.addClass("transaction"),
            e.item ? (this.$el.addClass("existing").removeClass("transaction_new"),
            e.item.comment && (this.$el.find(".js-transaction-comment").height() > 81 && this.$el.find(".transaction-expander").show(),
            this.$el.find(".js-transaction-comment").dotdotdot({
                height: 81
            }))) : this.$el.addClass("transaction_new"),
            this._form.setUrl("/ajax/v1/transactions/set/"),
            this._elem("comment_input_all").trigger("controls:textarea:autosize")
        },
        setMainId: function() {
            var e = r.prototype.setMainId.apply(this, arguments);
            return this.model && this.model.set("customer_id", this._element.id),
            this.model || 0 !== this._element.id || (this.has_customer_id = !1),
            this.has_customer_id || 0 === this._element.id || (this.model.set("customer_id", this._element.id),
            this.save()),
            e
        }
    })
}),
define("lib/interface/transactions/delete_modal", ["require", "underscore", "lib/components/modals/delete", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/delete")
      , s = e("lib/common/fn");
    return i.extend({
        _elements_ids: [],
        _url: "/ajax/v1/transactions/set/",
        setParams: function(e) {
            var n;
            return n = i.prototype.setParams.apply(this, arguments),
            e && e.id && t.isArray(e.id) && e.id.length || s.log({
                msg: "Params.id is empty: " + JSON.stringify({
                    params: e
                })
            }),
            this._elements_ids = t.map(e.id, function(e) {
                return n = parseInt(e),
                (!n || 0 > n) && s.log({
                    msg: "Id must be positive number, given: " + e
                }),
                n
            }),
            n
        },
        getDataForRequest: function() {
            return {
                request: {
                    transactions: {
                        "delete": this._elements_ids
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return e && e.transactions && e.transactions["delete"]
        },
        getTemplateParams: function() {
            var e, i = AMOCRM.lang, n = [];
            return this._elements_ids.length > 1 ? (e = s.i18n("Delete purchases"),
            n.push(s.i18n("Are you sure you want to delete selected elements?"))) : (e = s.i18n("Delete purchase"),
            n.push(s.i18n("Are you sure you want to delete purchase?"))),
            {
                lang: i,
                caption: e,
                message: t.map(n, function(e) {
                    return {
                        text: e
                    }
                }),
                accept_text: s.i18n("Confirm")
            }
        }
    })
}),
define("lib/interface/transactions/in_card", ["require", "underscore", "jquery", "lib/interface/element_model", "lib/interface/card/linked/linked_type_holder", "lib/interface/transactions/view_model", "lib/common/fn", "lib/interface/transactions/delete_modal"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("lib/interface/element_model")
      , n = e("lib/interface/card/linked/linked_type_holder")
      , o = e("lib/interface/transactions/view_model")
      , r = e("lib/common/fn")
      , a = e("lib/interface/transactions/delete_modal");
    return n.extend({
        _model: o,
        events: {
            "click .js-transaction-comment-expander": "commentExpand"
        },
        commentExpand: function(e) {
            var t = i(e.currentTarget).closest(".transaction-comment");
            t.find(".transaction-expander").hide(),
            t.find(".js-transaction-comment").trigger("destroy")
        },
        loadData: function(e) {
            var s = this._element.id
              , n = this;
            e = t.isFunction(e) ? e : t.noop,
            this.$el.addClass("transactions_in_card"),
            this.setFields({
                base_fields: [{
                    id: "price",
                    code: "price",
                    name: r.i18n("price_purchases"),
                    disabled: !1,
                    format: "",
                    type_code: "numeric",
                    sortable: !1,
                    filterable: !1
                }, {
                    id: "date",
                    code: "date",
                    name: r.i18n("date_purchases"),
                    disabled: !1,
                    format: "",
                    type_code: "date",
                    sortable: !1,
                    filterable: !1
                }, {
                    id: "comment",
                    code: "comment",
                    name: r.i18n("comment_purchases"),
                    disabled: !1,
                    format: "",
                    type_code: "textarea",
                    sortable: !1,
                    filterable: !1
                }]
            }),
            s > 0 ? i.get("/ajax/v1/transactions/list/", {
                filter: {
                    customer_id: s
                }
            }, function(i) {
                i = i || {},
                i = i.response || i,
                t.each(i.transactions, function(e, t, i) {
                    i[t].cant_remove = !n._can_add
                }),
                e(t.values(i.transactions))
            }) : e([])
        },
        getAfterElementSavePromise: function() {
            return this.getBeforeElementSavePromise()
        },
        unLinkElement: function(e) {
            var i;
            e.model && e.isLinked() && (i = {
                id: [e.model.get("id")],
                collection: [e],
                complete: t.bind(o.prototype.unlink, e),
                parent_type: AMOCRM.element_types.transactions
            },
            this._addComponent(a, i))
        },
        parseParams: function(e) {
            n.prototype.parseParams.apply(this, arguments),
            e.element_model instanceof s && (this._can_add = e.element_model.hasRightsFor("edit"))
        },
        setCurrentElement: function(e) {
            var t = n.prototype.setCurrentElement.call(this, e);
            if ("customers" !== this._element.type.type)
                throw new Error("Transactions only 4 customers");
            return t
        }
    })
}),
define("lib/interface/card/linked/linked_items", ["require", "underscore", "lib/common/fn", "twig", "lib/core/view", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("twig")
      , n = e("lib/core/view")
      , o = e("lib/components/base/modal")
      , r = e("lib/components/base/confirm");
    return n.extend({
        $el: null,
        _preload: ["/tmpl/catalogs/linked_types.twig", "/tmpl/catalogs/linked_types_modal_item.twig"],
        template: "/tmpl/catalogs/linked_types.twig",
        _classes: function() {
            return {
                body: "modal-body",
                selector_body: "js-selectors_body",
                selectors: "js-linked_select",
                selector_input: "control--select--input",
                button: "js-add_selector",
                save_button: "js-save_selectors",
                item_wrap: "js-select_item_wrap",
                draggable_item: "js-draggable_item",
                status_handle: "js-selector_handle",
                sortable_content: "bookmarks-modal__selects",
                selectors_item: "js-linked_select_item"
            }
        },
        events: function() {
            var e = t.extend({}, t.result(n.prototype, "events"));
            return e["controls:change " + this._selector("selectors")] = "selectType",
            e["click " + this._selector("button")] = "clickAddSelector",
            e["click " + this._selector("save_button")] = "saveLinkedItems",
            e
        },
        saveLinkedItems: function() {
            this.resort(),
            this.trigger("linked_modal:save", this.linked),
            this.modal.destroy()
        },
        clickAddSelector: function() {
            return this._elem("button").hasClass("disabled") ? void 0 : this.renderSelector()
        },
        renderSelector: s._preload(["/tmpl/catalogs/linked_types_modal_item.twig"], function(e) {
            this._renderSelector(e),
            this.$(this._selector("body")).trigger("modal:centrify")
        }),
        _renderSelector: function(e) {
            var t = this
              , i = "undefined" != typeof e
              , n = s({
                ref: "/tmpl/catalogs/linked_types_modal_item.twig"
            }).render({
                class_name: "js-linked_select",
                items: t._getNotLinked(e),
                dashed: !i,
                selected: i ? e : "unlink",
                disabled: i && t.types[e].disabled ? !0 : !1
            });
            this.$(this._selector("selector_body")).append(n),
            this._toggleButtonState()
        },
        _getNotLinked: function(e) {
            var s, n = this, o = [];
            return t.map(n.types, function(i, r) {
                s = -1 !== t.indexOf(n.linked, String(r)) && String(r) != e,
                o.push({
                    class_name: "js-linked_select_item " + (s ? "hidden" : ""),
                    id: r,
                    option: i.name,
                    sort: i.sort
                })
            }),
            o.unshift({
                id: "unlink",
                option: i.i18n("not_choosed")
            }),
            o
        },
        selectType: function(e) {
            var s = this
              , n = e.target
              , o = $(n).val()
              , a = $(n).data("prev-value")
              , l = t.indexOf(s.linked, a);
            if (s.unlinked = [],
            "unlink" !== o && (0 > l ? (s.linked.push(String(o)),
            this._hideSelectorItem(o, n)) : (s.linked[l] = String(o),
            this._hideSelectorItem(o, n),
            this._showSelectorItem(a, n))),
            "unlink" == o && s.types[a]) {
                var c;
                c = this._addComponent(r, {
                    class_name: "confirm_type_unlink",
                    text: i.i18n("Are you sure you want to detach list У%sФ?").replace("%s", s.types[a].name),
                    message: [{
                        text: "All the elements associated with the selected list will be detached. You cannot restore the connections."
                    }],
                    decline_text: i.i18n("No"),
                    accept_text: i.i18n("Yes"),
                    destroy: t.bind(function() {
                        c && c.accepted && (s.unlinked.push(String(a)),
                        s.linked = t.without(s.linked, String(a)),
                        $(n).closest(s._selector("item_wrap")).remove(),
                        s._renderSelector(),
                        this.trigger("linked_modal:unlink"),
                        this._showSelectorItem(a, n),
                        s.resort())
                    }, this)
                })
            }
            "unlink" === a && "unlink" === o && ($(n).closest(s._selector("item_wrap")).remove(),
            s._renderSelector()),
            "unlink" === a && "unlink" !== o && ($(n).attr("data-prev-selected", o),
            $(n).closest(s._selector("item_wrap")).hasClass("dashed") && $(n).closest(s._selector("item_wrap")).removeClass("dashed").addClass(s._class("draggable_item")).find(s._selector("status_handle")).removeClass("hidden"),
            this._hideSelectorItem(o, n)),
            "unlink" != o || s.types[a] || ($(n).closest(s._selector("item_wrap")).addClass("dashed").removeClass(s._class("draggable_item")).find(s._selector("status_handle")).addClass("hidden"),
            this._showSelectorItem($(n).attr("data-prev-selected"), n),
            this._hideSelectorItem(o, n))
        },
        _showSelectorItem: function(e, t) {
            var i = this;
            this._elem("selectors").filter(function() {
                return $(this).find(i._selector("selector_input")).val() != e
            }).find(i._selector("selectors_item")).filter('[data-value="' + e + '"]').removeClass("hidden")
        },
        _hideSelectorItem: function(e, t) {
            var i = this;
            this._elem("selectors").filter(function() {
                return $(this).find(i._selector("selector_input")).val() != e
            }).find(i._selector("selectors_item")).filter('[data-value="' + e + '"]').addClass("hidden")
        },
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.linked = [],
            this.types = {},
            this.unlinked = [],
            t.map(this.options.linked_types_all, function(e) {
                e.linked && this.linked.push(String(e.id)),
                this.types[e.id] = {
                    name: e.name,
                    sort: e.sort,
                    disabled: e.disabled ? e.disabled : !1
                }
            }, this),
            this.linked = t.sortBy(this.linked, function(e) {
                return this.types[e].sort
            }, this),
            this._$body.addClass("linked_items_modal"),
            this.initModal()
        },
        initModal: function() {
            var e = this;
            return e.modal = new o({
                class_name: "modal-list bookmark-modal__wrap",
                centrify_animation: !0,
                destroy: t.bind(function() {
                    this.destroyed || e.destroy()
                }, this)
            }),
            this.setElement(e.modal.$modal),
            this.render(),
            e.modal
        },
        makeSortable: function() {
            this._elem("selector_body").sortable({
                axis: "y",
                containment: "parent",
                handle: this._selector("status_handle"),
                items: this._selector("draggable_item"),
                tolerance: "pointer",
                update: t.bind(this.resort, this)
            })
        },
        resort: function() {
            var e, i = this, s = i._findElem("draggable_item").find(i._selector("selector_input"));
            t.map(s, function(t, s) {
                e = $(t).val(),
                i.linked[s] = e,
                i.types[e].sort = s
            }, this)
        },
        destroy: function() {
            this.destroyed = !0,
            t.isFunction(this.options.destroy) && this.options.destroy()
        },
        render: s._preload(["/tmpl/catalogs/linked_types.twig"], "_render"),
        _render: function(e) {
            var t = this;
            this.$(this._selector("body")).trigger("modal:loaded").html(t._renderModalContent()).trigger("modal:centrify"),
            t._prepareContentForRender(),
            this.makeSortable()
        },
        _prepareContentForRender: function() {
            var e, t = this, i = t.linked.length, s = Object.keys(t.types).length;
            for (e = 0; (6 > e || i > e) && s > e; e++)
                t.linked[e] ? t.renderSelector(t.linked[e]) : t.renderSelector()
        },
        _renderModalContent: function() {
            return s({
                ref: this.template
            }).render()
        },
        _toggleButtonState: function() {
            var e = this
              , t = e._findElem("selectors").length
              , i = Object.keys(e.types).length;
            t === i && e._elem("button").addClass("disabled")
        }
    })
}),
define("lib/interface/card/mixins/notes_linked_element_types", ["require", "lib/common/cookie", "pubsub", "underscore"], function(e) {
    "use strict";
    var t, i = e("lib/common/cookie"), s = e("pubsub"), n = e("underscore");
    return t = {
        getCookieName: function(e) {
            return "notes_filter_" + e
        }
    },
    {
        getNotesLinkedElementTypesFromCookie: function(e) {
            var s = i.get(t.getCookieName(e)) || !1;
            if (s !== !1)
                try {
                    s = JSON.parse(s)
                } catch (n) {
                    s = !1
                }
            return s
        },
        setNotesLinkedElementTypesToCookie: function(e, o) {
            n.isArray(o) || (o = [o]),
            i.set({
                name: t.getCookieName(e),
                value: o
            }),
            s.publish("notes:filter:change", {
                element_type: e,
                values: o
            })
        }
    }
}),
define("lib/interface/card/linked/linked_static_holder", ["require", "twig", "lib/interface/card/linked/linked_holder", "underscore"], function(e) {
    "use strict";
    var t = e("twig")
      , i = e("lib/interface/card/linked/linked_holder")
      , s = e("underscore");
    return i.extend({
        _el_class: "linked-static-holder",
        _raw_element: null,
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            this.loadData().then(s.bind(this.onLoad, this))
        },
        loadData: function() {
            return t._preload(s.result(this, "_preload"))()
        },
        onLoad: function() {
            this.render()
        },
        _template: null,
        _preload: function() {
            return [this._template]
        },
        render: function() {
            throw new Error("Override this function, please")
        }
    })
}),
define("lib/interface/card/linked/statistic/base", ["require", "underscore", "twig", "lib/interface/card/linked/linked_static_holder", "lib/core/users", "lib/interface/amojo/mediator", "lib/interface/amojo/api"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/card/linked/linked_static_holder")
      , n = e("lib/core/users")
      , o = e("lib/interface/amojo/mediator")
      , r = e("lib/interface/amojo/api");
    return s.extend({
        _feed_stats: {},
        _loading: !0,
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this._loadChatsAndNotes()
        },
        _loadChatsAndNotes: function() {
            var e = t.keys(o.get())
              , i = this._card_notes.findCollection(this._raw_element.id)
              , s = [];
            this._feed_stats = {},
            i && s.push(i.getStats()),
            e.length && s.push(r.getChatsStat(e).toPromise()),
            Promise.all(s).then(t.bind(function(e) {
                this._loading = !1,
                t.each(t.flatten(e), this._updateNotesStats, this),
                this.listenTo(this._card_notes, "add", this._updateStatOnNoteAdd, this),
                this.listenTo(this._card_notes, "remove", this._updateStatOnNoteRemove, this)
            }, this)),
            this.listenTo(this._card_notes, "add:from_socket", this._updateStatOnChatAdd, this)
        },
        _updateStatOnNoteRemove: function(e) {
            this._updateStatOnNote(e, -1)
        },
        _updateStatOnNoteAdd: function(e) {
            this._updateStatOnNote(e, 1)
        },
        _updateStatOnNote: function(e, t) {
            var i = e.get("object_type") || {};
            "notes" === i.code && parseInt(e.get("type")) === AMOCRM.note_types.common && this._updateNotesStats({
                id: e.get("element_id"),
                count: t,
                users: [{
                    id: e.get("created_by"),
                    count: t
                }]
            })
        },
        _updateStatOnChatAdd: function(e) {
            this._updateNotesStats({
                id: e.chat_id,
                count: 1,
                users: [{
                    id: e.author.id,
                    count: 1
                }]
            })
        },
        _updateNotesStats: function(e) {
            var i, s = t.find(o.get(), function(t) {
                return t.chat_id === e.id
            }), r = n.get("all");
            switch (!0) {
            case !t.isUndefined(s) && s.entity_type === AMOCRM.element_types.contacts:
                i = "external_chats";
                break;
            case !t.isUndefined(s):
                i = "internal_chats";
                break;
            default:
                i = "notes"
            }
            this._feed_stats[i] || (this._feed_stats[i] = 0),
            this._feed_stats[i] += e.count,
            this._feed_stats.users || (this._feed_stats.users = []),
            t.each(e.users, function(e) {
                var i = t.find(r, function(t) {
                    return parseInt(t.id) === parseInt(e.id) || t.amojo_id === e.id
                })
                  , s = !1;
                this._feed_stats.users = t.reduce(this._feed_stats.users, function(t, i) {
                    return parseInt(i.id) === parseInt(e.id) && (i.count += e.count,
                    s = !0),
                    t.push(i),
                    t
                }, []),
                !s && i && this._feed_stats.users.push({
                    id: i.id,
                    name: i.title,
                    count: e.count
                })
            }, this),
            t.sortBy(this._feed_stats.users, "count"),
            this.render()
        },
        prepareElementForRender: function(e) {
            var i = t.clone(e);
            return i.is_new = t.isUndefined(e.id),
            i
        },
        render: function() {
            var e, t, s = i({
                ref: this._template
            }), n = this.prepareElementForRender(this._raw_element);
            e = s.render({
                element: n,
                currency: AMOCRM.system.locale.currency_symbol,
                feed: this._feed_stats,
                loading: this._loading
            }),
            t = $(e),
            this.$el.html(t)
        }
    })
}),
define("lib/interface/card/linked/statistic/leads", ["require", "cocktail", "lib/interface/card/mixins/notes_linked_element_types", "lib/common/mixin/publisher_events", "lib/interface/card/linked/statistic/base", "underscore"], function(e) {
    "use strict";
    var t = e("cocktail")
      , i = e("lib/interface/card/mixins/notes_linked_element_types")
      , s = e("lib/common/mixin/publisher_events")
      , n = e("lib/interface/card/linked/statistic/base")
      , o = e("underscore")
      , r = AMOCRM.element_types
      , a = n.extend({
        _statistic_element_types: [],
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this.delegatePublisherEvents()
        },
        initStatisticElementTypes: function() {
            var e = this.getNotesLinkedElementTypesFromCookie(r.leads);
            e === !1 && (e = o.values(r)),
            this.setStatisticElementTypes(e)
        },
        destroy: function() {
            this.undelegatePublisherEvents(),
            n.prototype.destroy.apply(this, arguments)
        },
        prepareElementForRender: function(e) {
            var t = n.prototype.prepareElementForRender.apply(this, arguments);
            return t.is_new ? t : (t.statistic = o.reduce(t.statistic, function(e, t, i) {
                var s = o.extend({
                    calls: {
                        inbound: 0,
                        outbound: 0
                    },
                    letters: 0,
                    tasks: 0
                }, e);
                return i = parseInt(i),
                -1 === this._statistic_element_types.indexOf(i) ? s : (s.calls.inbound += t.calls.inbound,
                s.calls.outbound += t.calls.outbound,
                s.letters += t.letters,
                s.tasks += t.tasks,
                s)
            }, {}, this),
            t)
        },
        setStatisticElementTypes: function(e) {
            this._statistic_element_types = [r.leads],
            e = o.values(e),
            o.each(e, function(e) {
                e = parseInt(e) || 0,
                e && -1 === this._statistic_element_types.indexOf(e) && this._statistic_element_types.push(e)
            }, this)
        },
        onLoad: function() {
            this.initStatisticElementTypes(),
            n.prototype.onLoad.apply(this, arguments)
        },
        undelegateEvents: function() {
            return this.undelegatePublisherEvents(),
            n.prototype.undelegateEvents.apply(this, arguments)
        },
        delegateEvents: function(e) {
            var t = n.prototype.delegateEvents.apply(this, arguments);
            return e ? t : (this.delegatePublisherEvents(),
            t)
        },
        publisher_events: function() {
            var e = o.extend({}, o.result(n.prototype, "publisher_events"));
            return e["notes:filter:change"] = "onLinkedFilterChanged",
            e
        },
        onLinkedFilterChanged: function(e, t) {
            t && t.element_type === r.leads && (this.setStatisticElementTypes(t.values),
            this.render())
        },
        _template: "/tmpl/cards/leads/stats.twig"
    });
    return t.mixin(a, i, s),
    a
}),
define("lib/interface/card/linked/statistic/customers", ["require", "lib/interface/card/linked/statistic/base", "lib/common/fn", "underscore"], function(e) {
    "use strict";
    var t = e("lib/interface/card/linked/statistic/base")
      , i = e("lib/common/fn")
      , s = e("underscore");
    return t.extend({
        prepareElementForRender: function(e) {
            var n = t.prototype.prepareElementForRender.apply(this, arguments);
            return n.is_new ? n : (n.days_from_create ? n.days_from_create = i.reductNumericValue({
                value: n.days_from_create,
                maxValue: 9999
            }) : n.days_from_create = 0,
            i.has_keys(n, ["transactions", "statistic"]) || (n.transactions = n.transactions || {},
            n.transactions.statistic = {}),
            n.transactions.statistic = s.extend({
                count: 0,
                sum: 0
            }, n.transactions.statistic),
            n.transactions.statistic.count = i.reductNumericValue({
                value: n.transactions.statistic.count,
                maxValue: 999999
            }),
            n)
        },
        _template: "/tmpl/cards/customers/card/stats.twig"
    })
}),
define("lib/interface/card/linked/linked_static_fabric", ["require", "lib/interface/card/linked/statistic/leads", "lib/interface/card/linked/statistic/customers", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/interface/card/linked/statistic/leads")
      , i = e("lib/interface/card/linked/statistic/customers")
      , s = e("lib/common/fn")
      , n = function(e) {
        var n;
        switch (s.convertElementType(e, "string")) {
        case "leads":
            n = t;
            break;
        case "customers":
            n = i
        }
        return n
    };
    return function(e, t, i) {
        var s;
        switch (e) {
        case "statistic":
            s = n(t)
        }
        if (!s)
            throw new Error('Unknown static type "%s"'.replace("%s", e));
        return new s(i)
    }
}),
define("lib/interface/card/linked/types", ["require", "cocktail", "lib/common/mixin/publisher_events", "underscore", "lib/core/view", "lib/common/fn", "jquery", "lib/interface/catalogs/catalog/in_card", "lib/interface/sdk/in_card", "lib/interface/transactions/in_card", "backbone", "lib/interface/card/linked/linked_items", "lib/interface/element_model", "lib/interface/card/linked/linked_static_fabric"], function(e) {
    "use strict";
    var t, i, s = e("cocktail"), n = e("lib/common/mixin/publisher_events"), o = e("underscore"), r = e("lib/core/view"), a = e("lib/common/fn"), l = e("jquery"), c = e("lib/interface/catalogs/catalog/in_card"), d = e("lib/interface/sdk/in_card"), u = e("lib/interface/transactions/in_card"), h = e("backbone"), _ = e("lib/interface/card/linked/linked_items"), p = e("lib/interface/element_model"), m = e("lib/interface/card/linked/linked_static_fabric");
    return i = {
        isIDsEqual: function(e, t) {
            return e = parseInt(e),
            t = parseInt(t),
            e === t
        }
    },
    t = r.extend({
        _element: null,
        $el: null,
        _linked_modal: null,
        _$elements_area: null,
        _linked_types: [],
        _linked_holders: null,
        _static_holders: null,
        _element_id: 0,
        _element_type: null,
        _element_model: null,
        _available_types: {
            2: ["statistic"],
            1: [],
            3: [],
            12: ["13", "statistic"]
        },
        initialize: function(e) {
            this._static_holders = {},
            this._params = e,
            r.prototype.initialize.apply(this, arguments),
            this.undelegateEvents(),
            this._element = AMOCRM.constant("card_element") || {},
            this.parseParams(e),
            this._linked_holders = new h.Collection(null),
            this._linked_holders.on("state_changed", this.onHolderChange, this),
            this.loadTypes()
        },
        _initBaseTypes: function() {
            var e, t = this;
            o.each(t._linked_types, function(i, s) {
                e = o.indexOf(t._available_types[t._element_type.id], String(i.id)),
                e > -1 && !i.linked && (i.linked = !0,
                i.sort = t._linked_types[s].sort ? t._linked_types[s].sort : e)
            })
        },
        showType: function(e) {
            if (e) {
                if ("statistic" === e.id)
                    return void this.showStatic(e);
                this.trigger("show_type", e),
                this.initLinkedElements(e)
            }
        },
        showStatic: function(e, t) {
            var i = e.id;
            "statistic" === i && (this._static_holders[i] ? this._static_holders[i].toggle(!0) : (this._static_holders[i] = m(i, this._element_type.id, this.getLinkedParams(e)),
            this._$elements_area.append(this._static_holders[i].el)))
        },
        hideType: function(e) {
            o.each(this._static_holders, function(t) {
                t._info.type === e.type && t.toggle(!1)
            }),
            this._linked_holders.each(function(t) {
                t._info.type === e.type && t.toggle(!1)
            })
        },
        parseParams: function(e) {
            if (!e)
                throw new Error("Please, use jsDoc to create params for this object");
            if (!e.element_type)
                throw new Error("Element type must be defined in params");
            if (!(e.$wrapper && e.$wrapper instanceof l))
                throw new Error("Element type must be defined in params");
            e.element_id && this.setMainId(e.element_id),
            this._$elements_area = e.$wrapper,
            this._onRender = e.onRender || o.noop,
            this.setElementModel(e.element_model)
        },
        setElementModel: function(e) {
            e instanceof p && (this._element_model = e)
        },
        destroy: function() {
            r.prototype.destroy.apply(this, arguments)
        },
        initLinkedElements: function(e) {
            var t = this
              , s = !1
              , n = !1;
            this._linked_holders.each(function(t) {
                t.getInfo("id") === e.id && (n = !0,
                s = s || t.isActive())
            }),
            s || (n || "widget" === e.type || this._initLinkedElements(e),
            "widget" === e.type && (AMOCRM.widgets.list[e.id] ? this._initLinkedElements(e) : t._$document.on("widget:" + e.id + ":loaded", o.bind(function() {
                this._initLinkedElements(e),
                l(this._selector("toggler_area")).children("div:not(" + this._class("dots") + ")").each(function() {
                    i.isIDsEqual(l(this).attr("id"), e.id) && !l(this).hasClass(t._class("active_class")) && t._linked_holders.slice(-1)[0].$el.hide()
                })
            }, this))),
            o.each(this._static_holders, function(e) {
                e.toggle(!1)
            }),
            this._linked_holders.each(function(t) {
                t.toggle(t.getInfo("id") === e.id)
            }))
        },
        loadLinkedTypesSettings: function() {
            return this.loadData("/ajax/v1/linked_types/list/", "", {})
        },
        postLinkedTypesSettings: function(e, t) {
            var i = {
                request: {
                    linked_types: {}
                }
            }
              , s = t ? "update" : "delete";
            return i.request.linked_types[s] = {},
            i.request.linked_types[s][this._element_type.id] = [],
            o.each(e, function(e) {
                t ? i.request.linked_types[s][this._element_type.id].push({
                    id: e.id,
                    sort: e.sort !== !1 ? e.sort : 9999
                }) : i.request.linked_types[s][this._element_type.id].push(e.id)
            }, this),
            this.postData("/ajax/v1/linked_types/set/", i)
        },
        loadData: function(e, t, i) {
            return new Promise(o.bind(function(s, n) {
                var r = l.get(e, i || {}, o.bind(function(e) {
                    if (e = a.cleanResponse(e),
                    t && !e[t])
                        throw new Error("Invalid response data: " + JSON.stringify(e));
                    s(t ? e[t] : e)
                }, this), "json");
                r.fail(n)
            }, this))
        },
        postData: function(e, t) {
            return new Promise(o.bind(function(i, s) {
                var n = l.post(e, t, o.bind(function(e) {
                    i(e)
                }, this), "json");
                n.fail(s)
            }, this))
        },
        setTypeLinked: function(e, t) {
            var i = !0;
            "unlink" === t && (i = !1),
            this.postLinkedTypesSettings(e, i).then(o.each(e, function(e) {
                this.removeFromHolders(e),
                this.markTypeIsLinked(e, i)
            }, this))
        },
        loadTypes: function() {
            return this.loadLinkedTypesSettings().then(o.bind(function(e) {
                this._onRender(this._loadTypes(e, this._params))
            }, this))
        },
        _loadTypes: function(e, t) {
            var i, s;
            if (!e)
                throw new Error("Invalid result: " + JSON.stringify([e]));
            if (i = e.linked_types,
            s = e.all_types,
            !i[t.element_type])
                throw new Error('Unknown element type "' + t.element_type + '"');
            if (this._linked_types = [],
            o.each(s, function(e) {
                var s = o.findWhere(i[t.element_type], {
                    id: e.id
                })
                  , n = {
                    id: e.id,
                    type: e.type,
                    name: a.escapeHTML(e.name),
                    linked: !!o.findWhere(i[t.element_type], {
                        id: e.id
                    }),
                    sort: s ? s.sort : !1
                };
                -1 === o.indexOf(o.keys(this._available_types), parseInt(e.id)) && this._linked_types.push(n),
                e.type === AMOCRM.getBaseEntity() && (this._element_type = n)
            }, this),
            !this._element_type)
                throw new Error('Unknown element type "' + t.element_type + '"');
            return this.getLinkedTypesTabs()
        },
        getLinkedParams: function(e) {
            return {
                current: {
                    type: this._element_type,
                    id: this._element_id
                },
                id: e.id,
                type: e,
                raw_element: this._element,
                element_model: this._element_model,
                notes: this._getNotesCollection()
            }
        },
        _getNotesCollection: function() {
            var e = void 0;
            return o.isFunction(this._params.getNotesCollection) && (e = this._params.getNotesCollection()),
            e
        },
        _initLinkedElements: function(e) {
            var t;
            "transactions" === e.type ? this._linked_holders.model = u : "widget" === e.type ? this._linked_holders.model = d : this._linked_holders.model = c,
            t = this._linked_holders.add(this.getLinkedParams(e)),
            this._$elements_area.append(t.el)
        },
        setMainId: function(e) {
            var t, i = parseInt(e);
            if (0 >= i)
                throw new Error("Element id must be positive integer, but given " + e);
            t = this._element_id !== i,
            t && (this._element_id = i,
            this._linked_holders && this._linked_holders.each(function(t) {
                t.setMainId(e)
            }))
        },
        getAllLinkedTypes: function() {
            var e, t = this, i = this.getBaseTypes(), s = [], n = o.findWhere(this._linked_types, {
                linked: !0
            }), r = "contacts" === i[t._element_type.id], a = "companies" === i[t._element_type.id];
            return n || this._initBaseTypes(),
            s = o.chain(this._linked_types).map(function(s) {
                return e = o.indexOf(t._available_types[t._element_type.id], String(s.id)) > -1,
                (o.isUndefined(i[s.id]) || e) && e && (s.linked = !0,
                s.sort = s.sort !== !1 ? s.sort : 9999,
                s.disabled = !0),
                o.extend({}, s)
            }).filter(function(s) {
                return e = o.indexOf(t._available_types[t._element_type.id], String(s.id)) > -1,
                (r || a) && "statistic" === s.id ? !1 : o.isUndefined(i[s.id]) || e
            }).sortBy("sort").value()
        },
        getLinkedTypesTabs: function() {
            return o.filter(this.getAllLinkedTypes(), function(e) {
                return this._element.id || "statistic" !== e.id ? e.linked : !1
            }, this)
        },
        removeFromHolders: function(e) {
            var t = null;
            this._linked_holders.each(function(i) {
                t || i.getInfo("id") !== e.id || (t = i)
            }),
            t && t.destroy(!0)
        },
        markTypeIsLinked: function(e, t) {
            o.each(this._linked_types, function(i, s) {
                String(i.id) === e.id && (this._linked_types[s].linked = t,
                this._linked_types[s].sort = e.sort)
            }, this),
            this.applyTypeIsLinked(e.id, t)
        },
        promiseAll: function(e, t) {
            return o.isFunction(t) || (t = o.noop),
            e.length ? void Promise.all(e).then(function() {
                t()
            }, function() {
                t("fail")
            }) : void t()
        },
        getBaseTypes: function() {
            return o.invert(AMOCRM.element_types)
        },
        _classes: function() {
            return o.extend({}, o.result(r.prototype, "_classes"), {
                dots: "js-dots",
                dots_wrapper: "js-button_dots_wrapper",
                linked_type: "js-linked_type",
                in_context: "js-in_context",
                linked_elements_wrapper: "js-linked_elements_wrapper",
                current_catalog_name: "js-current_catalog_name",
                context_menu: "js-context_menu",
                add_linked_type: "js-add_linked_type",
                unlink_linked_type: "js-unlink_linked_type",
                toggler_items: "js-linked_toggle_item",
                leads_holder: "js-linked_leads",
                toggler_area: "js-linked-types-toggler",
                active_class: "card-fields__linked-toggler-item_active"
            })
        },
        applyTypeIsLinked: function(e, t) {
            this._elem("linked_type").filter(this._selector("in_context")).each(function() {
                var s = l(this);
                i.isIDsEqual(s.attr("id"), e) && s.toggleClass("hidden", !t)
            })
        },
        undelegateEvents: function() {
            return this.undelegatePublisherEvents(),
            r.prototype.undelegateEvents.apply(this, arguments)
        },
        delegateEvents: function(e) {
            var t = r.prototype.delegateEvents.apply(this, arguments);
            return e ? t : (this.delegatePublisherEvents(),
            t)
        },
        events: function() {
            var e = o.extend({}, o.result(r.prototype, "events"));
            return e["click " + this._selector("unlink_linked_type")] = "clickUnlinkLinkedType",
            e
        },
        publisher_events: function() {
            var e = o.extend({}, o.result(r.prototype, "publisher_events"));
            return e["linked:save:before"] = "onBeforeElementSave",
            e["linked:save:after"] = "onAfterElementSave",
            e
        },
        showLinkedTypesModal: function() {
            var e = this;
            e._linked_modal || (e._linked_modal = this._addComponent(_, {
                linked_types_all: e.getAllLinkedTypes(),
                destroy: o.bind(function() {
                    this._linked_modal = null
                }, this)
            }),
            e._linked_modal.on("linked_modal:save", function() {
                var t = "link";
                e.checkLinkedFromModal(e._linked_modal.linked, e._linked_modal.types, t)
            }),
            e._linked_modal.on("linked_modal:unlink", function() {
                var t = "unlink";
                e.checkLinkedFromModal(e._linked_modal.unlinked, e._linked_modal.types, t)
            }))
        },
        checkLinkedFromModal: function(e, t, i) {
            var s, n = this, r = [];
            t = t || {},
            o.each(e, function(e) {
                r.push({
                    id: e,
                    sort: t[e].sort
                }),
                s = o.findWhere(n._linked_types, {
                    id: e
                }),
                s && (s.sort = t[e].sort)
            }),
            n.setTypeLinked(r, i),
            t = o.chain(n._linked_types).filter(function(e) {
                return e.sort < 3 && e.linked
            }).sortBy(function(e) {
                return e.sort
            }).value(),
            t.reverse(),
            this._onRender(this.getLinkedTypesTabs())
        },
        onHolderChange: function() {
            var e = !1
              , t = this._linked_holders.length > 0;
            this._linked_holders.each(function(i) {
                e = e || i.has_changes,
                t = t && (!i.has_changes || i.can_save)
            }),
            this.has_changes = e,
            this.can_save = e && t,
            this.trigger("state_changed", this)
        },
        onBeforeElementSave: function(e, t) {
            var i = [];
            this._linked_holders.each(function(e) {
                var t = e.getBeforeElementSavePromise();
                null !== t && i.push(t)
            }, this),
            this.promiseAll(i, t)
        },
        onAfterElementSave: function(e, t) {
            var i = [];
            this._linked_holders.each(function(e) {
                var t = e.getAfterElementSavePromise();
                null !== t && i.push(t)
            }),
            this.promiseAll(i, t)
        }
    }),
    s.mixin(t, n),
    t
}),
define("lib/interface/card/mixins/common", ["require", "jquery", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/common/fn")
      , n = !1;
    return t(document).on("mouseup.linked:form", function() {
        n = !1
    }),
    {
        addNewVariant: function(e, n) {
            var o, r, a = t(e.currentTarget), l = a.closest(".linked-form__field-add-multiple"), c = l.prev(".linked-form__field-pei"), d = c.find('input[type="text"]'), u = s.randString(10);
            n = n ? n : this,
            this.hideTip(),
            d.val() ? (o = c.clone(),
            l.before(o),
            r = o.find("input"),
            r.val(""),
            i.each(r, function(e) {
                var i = t(e)
                  , s = i.attr("name").replace(/\]\[([a-zA-Z]+)\]\[/, "][" + u + "][");
                i.attr("name", s),
                n.model.set(s, n.getInputValue(i))
            }, this),
            r.trigger("change").trigger("controls:change"),
            n.model.setDefaults(),
            this.checkChanges(),
            this.focusAndSetCursorToEnd(o.find('input[type="text"]'))) : this.focusAndSetCursorToEnd(d)
        },
        tipChecks: {
            company: function(e) {
                var t = e.find(":input:visible");
                return t.attr("data-value-id") ? !0 : !1
            }
        },
        hideTip: function() {
            this.$tip && (this.cf_edit_prevented = !1,
            t(document).trigger("controls:hide", ["tip"]),
            this.$tip = !1)
        },
        initTipAction: function(e) {
            var s, n = t(e.currentTarget), o = n.attr("data-widget") || !1, r = n.closest(".js-linked-has-actions"), a = r.find(":input:visible").val(), l = n.attr("data-type"), c = AMOCRM.constant("user_rights").is_free_user;
            -1 !== t.inArray(l, ["profile_link", "set_main_profile", "unlink_profile"]) && (a = n.attr("data-value")),
            "profile_link" === l && (l = "link"),
            this.cf_edit_prevented = !1,
            o && !c ? i.isObject(AMOCRM.widgets.cf_actions[l]) && (s = AMOCRM.widgets.cf_actions[l][o],
            i.isFunction(s) && (this.hideTip(),
            s({
                value: a,
                model: this.model
            }))) : "function" == typeof this.tipActions[l] && (this.hideTip(),
            this.tipActions[l].call(this, r, a)),
            e.stopPropagation()
        },
        showActions: function(e) {
            var o, r, a, l = t(e.currentTarget), c = l.find(":input:visible"), d = l.attr("data-pei-code"), u = l.attr("data-check"), h = 0;
            if (this.mousemove && n && c.val())
                return void c.addClass("prevent-readonly").attr("readonly", !0);
            if (!t(e.target).closest(".js-control--suggest--list").length && c.val()) {
                if (!u || this.tipChecks[u](l)) {
                    if (e.stopPropagation(),
                    r = AMOCRM.widgets.cf_actions[d] || {},
                    a = i.keys(r),
                    this.hideTip(),
                    this.$tip = l.children(".js-tip"),
                    this.$tip.find("div[data-type=" + d + "]").not(":first").remove(),
                    i.each(a, function(e, t) {
                        var i, s = AMOCRM.widgets.list[a[t]] || !1, n = "";
                        s && (i = this.$tip.find("div[data-type=" + d + "]:first"),
                        0 !== h && (i = i.clone(),
                        this.$tip.prepend(i)),
                        n = s.langs.widget.call_action || s.langs.widget.name || "---",
                        i.attr("data-widget", a[t]).html('<span class="tips-icon icon icon-inline icon-phone-dark"></span> ' + n),
                        h++)
                    }, this),
                    this.model.get("disabled")) {
                        if (this.$tip.find('.js-cf-actions-item[data-type="edit"]').hide(),
                        o = this.$tip.find('.js-cf-actions-item:not([data-type="edit"])'),
                        1 === o.length)
                            return o.trigger("click"),
                            !1
                    } else
                        this.$tip.find('.js-cf-actions-item[data-type="edit"]').show();
                    return "email" === d && (s.checkEmail(c.val()) ? this.$tip.find('[data-type="email_with_template"]').removeClass("hidden") : this.$tip.find('[data-type="email_with_template"]').addClass("hidden")),
                    this.$tip.trigger("tip:show", [!0]),
                    this.$tip.is(":visible") || (this.$tip = !1),
                    !1
                }
                this.cf_edit_prevented = !1,
                this.focusAndSetCursorToEnd(c)
            }
        },
        showHiddenFieldsOnFocus: function(e) {
            var t = this.$(".linked-form__fields > .linked-form__field:not(.linked-form__field-shower):last");
            this.showHiddenFields(),
            this.focusAndSetCursorToEnd(t.nextUntil(".linked-form__field").next().find(":input:visible"))
        },
        showHiddenFields: function(e) {
            var i = t(e && e.currentTarget || this.$(".js-linked-show-all-fields"));
            i.closest(".linked-form__field-shower").remove(),
            this.$(".linked-form__field-no-value").children(".linked-form__field, .linked-form__multiple-container").unwrap(),
            this.$("textarea").trigger("controls:textarea:autosize")
        },
        focusOnName: function(e) {
            var i = t(e.currentTarget);
            i.closest(".linked-form__field__value-name").removeClass("empty").addClass("focused")
        },
        unfocusOnName: function(e) {
            var i = t(e.currentTarget)
              , s = i.closest(".linked-form__field__value-name");
            i.removeClass("prevent-readonly").prop("readonly", !1),
            i.val() ? s.removeClass("focused") : s.addClass("empty")
        },
        moveOnHasActionsField: function() {
            n && !this.mousemove && (this.mousemove = !0)
        },
        beforeFocusHasActionsField: function(e) {
            var i = t(e.currentTarget);
            this.cf_edit_prevented = !1,
            n = !0,
            this.mousemove = !1,
            AMOCRM.is_touch_device && i.val() && i.prop("readonly", !0),
            i.val() && (this.cf_edit_prevented = !0)
        },
        selectInHasActionsField: function(e) {
            t(e.currentTarget).select()
        },
        focusHasActionsField: function(e) {
            var i = t(e.currentTarget);
            this.cf_edit_prevented && i.val() ? i.addClass("prevent-readonly").attr("readonly", !0) : i.removeClass("prevent-readonly").prop("readonly", !1)
        },
        unfocusHasActionsField: function(e) {
            var i = t(e.currentTarget);
            i.val() ? i.closest(".js-linked-has-actions,.js-linked-with-actions").addClass("js-linked-has-value") : i.closest(".js-linked-has-actions,.js-linked-with-actions").removeClass("js-linked-has-value")
        },
        focusField: function(e) {
            var i = t(e.currentTarget)
              , s = i.val();
            return this.$tip && this.$tip.is(":visible") ? (this.hideTip(),
            i.blur(),
            !1) : void (this.cf_edit_prevented && i.closest(".js-linked-has-actions").length || (i.addClass("js-linked-in-edit").closest(".linked-form__field").addClass("linked-form__field-focused"),
            setTimeout(function() {
                i.val(s)
            }, 0)))
        },
        unfocusField: function(e) {
            t(e.currentTarget).removeClass("js-linked-in-edit").closest(".linked-form__field").removeClass("linked-form__field-focused")
        },
        focusAndSetCursorToEnd: function(e) {
            var t;
            e.length && (t = (e.val() || "").length,
            e.removeClass("prevent-readonly").prop("readonly", !1).focus(),
            e[0].setSelectionRange(t, t))
        },
        showHideAddVariant: function(e) {
            var i = t(e.currentTarget)
              , s = i.closest(".linked-form__field-pei")
              , n = "show";
            i.val() ? n = "show" : s.prev(".linked-form__field-pei").length || (n = "hide"),
            s.next(".linked-form__field-add-multiple")[n]()
        }
    }
}),
define("lib/interface/card/linked/edit", ["require", "jquery", "underscore", "backbone", "cocktail", "lib/components/base/confirm", "lib/components/base/form", "lib/interface/card/mixins/common", "lib/interface/card/mixins/tip_actions", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("backbone")
      , n = e("cocktail")
      , o = e("lib/components/base/confirm")
      , r = e("lib/components/base/form")
      , a = e("lib/interface/card/mixins/common")
      , l = e("lib/interface/card/mixins/tip_actions")
      , c = e("lib/common/fn")
      , d = {};
    return d.Model = r.Model.extend({
        save: function(e) {
            var s = this
              , n = function(t) {
                i.isFunction(e.success) && e.success.call(s, t || {})
            };
            return this.get("disabled") ? void n() : void (this.saving || (this.saving = !0,
            t.ajax({
                url: this.url,
                data: t.param(this.toJSON()),
                type: "POST",
                dataType: "json"
            }).always(function() {
                s.saving = !1
            }).done(function(t) {
                "success" === t.status ? n(t) : i.isFunction(e.error) && e.error.call(s, t)
            }).fail(function() {
                i.isFunction(e.error) && e.error.call(s)
            })))
        },
        toJSON: function() {
            var e = s.Model.prototype.toJSON.call(this);
            return this.get("company[NAME]") || delete e["company[NAME]"],
            this.get("company[ID]") || delete e["company[ID]"],
            parseInt(this.get("ELEMENT_TYPE")) !== AMOCRM.element_types.contacts || "companies" === AMOCRM.getBaseEntity() || this.get("company[NAME]") || this.get("company[ID]") || (e.company = "remove"),
            e
        }
    }),
    d.View = r.View.extend({
        events: function() {
            return i.extend({}, r.View.prototype.events, {
                "click .js-linked-entity-unlink": "unlinkLinkedEntity",
                "click .js-linked-entity-set_main": "setMainLinkedEntity",
                "click .js-linked-has-actions": "showActions",
                "click .js-cf-actions-item": "initTipAction",
                "suggest:loaded .js-linked-contact-company": "companySuggestLoaded",
                "suggest:changed .js-linked-contact-company": "chooseCompanyForContact",
                "input .js-linked-contact-company": "clearContactCompanyId"
            })
        },
        bindEvents: function() {
            this.events = (i.isFunction(this.events) ? this.events() : this.events) || {},
            this.events["focus .linked-form__field__value-name input"] = "focusOnName",
            this.events["blur .linked-form__field__value-name input"] = "unfocusOnName",
            this.events["click .js-linked-show-all-fields"] = "showHiddenFields",
            this.events["focus .js-linked-fields-shower-input"] = "showHiddenFieldsOnFocus",
            this.events["dblclick .js-linked-has-actions .linked-form__cf:not(.js-linked-in-edit)"] = "selectInHasActionsField",
            this.events["mousemove .js-linked-has-actions .linked-form__cf:not(.js-linked-in-edit)"] = "moveOnHasActionsField",
            this.events["touchstart .js-linked-has-actions .linked-form__cf"] = "beforeFocusHasActionsField",
            this.events["mousedown .js-linked-has-actions .linked-form__cf"] = "beforeFocusHasActionsField",
            this.events["focus .js-linked-has-actions .linked-form__cf:not(.js-linked-in-edit)"] = "focusHasActionsField",
            this.events["blur .js-linked-has-actions .linked-form__cf"] = "unfocusHasActionsField",
            this.events["focus .linked-form__cf:not(.js-linked-in-edit)"] = "focusField",
            this.events["blur .linked-form__cf"] = "unfocusField",
            this.events["input .linked-form__field-pei input"] = "showHideAddVariant",
            this.events["change .linked-form__field-pei input"] = "showHideAddVariant",
            this.events["click .linked-form__field-add-multiple .linked-form__field__value"] = "addNewVariant",
            this.delegateEvents()
        },
        initialize: function(e) {
            var s = {
                onUnlink: i.noop,
                onSuggestCompany: i.noop,
                _onError: i.bind(function(e) {
                    this.savingError(e)
                }, this),
                _onSave: i.bind(function(e) {
                    this.updateCompanyInput(e && e.company_id || !1)
                }, this)
            };
            n.mixin(this, a, l),
            r.View.prototype.initialize.call(this, {
                model: d.Model
            }),
            this.$el.find('.linked-form__field__link input[type="text"]').autosizeInput(),
            this.options = t.extend({}, s, e || {}),
            this.$tip = !1,
            this.unfocusOnName({
                currentTarget: this.$('.linked-form__field__value-name input[type="text"]'),
                important: !0
            }),
            this.$el.closest(".linked-forms__item").hasClass("linked-forms__item-active") && this.$(".linked-form__field__link").removeAttr("href"),
            this.model.on("view:destroy", this.destroy, this),
            this.model.get("disabled") ? this.disableForm() : this.bindEvents(),
            this.checkMainLinkedEntityHasStar()
        },
        resizeLinkName: function(e) {
            t(e.currentTarget).autosizeInput()
        },
        destroy: function(e) {
            e !== !1 && this.$el.parent().remove(),
            this.remove(e)
        },
        savingError: function(e) {
            var t = this
              , s = parseInt(this.model.get("ELEMENT_TYPE"));
            new o({
                class_name: "modal-list modal-confirm-error",
                text: i.uniq(e.errors).join("<br/><br/>"),
                decline_text: AMOCRM.lang["discard_" + (1 === s ? "contact" : "company") + "_changes"],
                accept_text: "OK",
                accept: function() {
                    this.destroy()
                },
                destroy: function() {
                    this.accepted === !1 && t.revert()
                }
            })
        },
        revert: function() {
            r.View.prototype.revert.call(this),
            this.unfocusOnName({
                currentTarget: this.$('.linked-form__field__value-name input[type="text"]')
            })
        },
        disableForm: function() {
            this.$(":input").attr("readonly", !0).attr("disabled", !0).addClass("readonly text-input-visible-placeholder"),
            this.$('.js-cf-actions-item[data-type="edit"]').hide(),
            this.$el.on("click.linked:disabled", function(e) {
                return t(e.target).closest(".js-tip-holder").length ? void 0 : !1
            })
        },
        enableForm: function() {
            this.$(":input").removeAttr("readonly").removeAttr("disabled").removeClass("readonly text-input-visible-placeholder"),
            this.$('.js-cf-actions-item[data-type="edit"]').show(),
            this.$el.off("click.linked:disabled")
        },
        updateCompanyInput: function(e) {
            var t;
            e && (t = this.$(".linked-form__field__value-company"),
            t.find('.js-tip .tips-item[data-type="company"]').attr("href", "/companies/detail/" + e),
            t.find("input").attr("data-value-id", e).closest(".js-linked-with-actions").addClass("js-linked-has-actions"))
        },
        companySuggestLoaded: function(e, t, s) {
            var n = [];
            "ok" === t.status && (n = i.map(t.result, function(e, t) {
                return {
                    id: e.id,
                    text: e.name
                }
            })),
            s.trigger("suggest:reset", [n])
        },
        chooseCompanyForContact: function(e, i) {
            var s = t(e.currentTarget)
              , n = t.trim(i.text())
              , o = s.attr("data-value-id");
            e.stopPropagation(),
            s.closest(".js-linked-with-actions").addClass("js-linked-has-actions"),
            s.closest(".linked-form__field__value-company").find('input[name="company[ID]"]').val(o).trigger("change"),
            s.val(n),
            this.options.onSuggestCompany.call(this, s)
        },
        clearContactCompanyId: function(e) {
            var i = t(e.currentTarget);
            i.attr("data-value-id", "").closest(".js-linked-with-actions").removeClass("js-linked-has-actions"),
            this.model.get("company[ID]") && i.closest(".linked-form__field__value-company").find('input[name="company[ID]"]').val("").trigger("change")
        },
        setMainLinkedEntity: function(e) {
            var s, n = t(e.currentTarget), r = n.closest(".linked-forms__item"), a = this.$('input[name="ELEMENT_TYPE"]').val(), l = i.invert(AMOCRM.element_types), d = l[a] || !1, u = t.trim(this.$(".linked-form__field__value-name input").val()), h = {
                main_id: this.$('input[name="MAIN_ID"]').val(),
                linked_id: this.$('input[name="ID"]').val()
            }, _ = "/ajax/" + AMOCRM.data.current_entity + "/set/main/" + d, p = "application/x-www-form-urlencoded", m = this;
            AMOCRM.data.current_entity === l[AMOCRM.element_types.customers] && (h = JSON.stringify({
                request: {
                    links: {
                        link: [{
                            from: AMOCRM.data.current_entity,
                            to: d,
                            from_id: this.$('input[name="MAIN_ID"]').val(),
                            to_id: this.$('input[name="ID"]').val(),
                            main_contact: !0
                        }]
                    }
                }
            }),
            _ = "/ajax/v1/links/set",
            p = "application/json"),
            t(document).trigger("controls:hide"),
            d && (s = new o({
                class_name: "modal-list",
                text: AMOCRM.lang["are_you_sure_to_set_main_" + d].toString().replace("#MARKER#", u),
                accept: i.bind(function() {
                    s.requestStart().xhr = t.ajax({
                        url: _,
                        data: h,
                        type: "POST",
                        dataType: "json",
                        contentType: p
                    }).done(function(e) {
                        e.response && (e = e.response),
                        "success" === e.result || c.has_keys(e, ["links", "link", "errors"]) && 0 === e.links.link.errors.length ? (s.requestSuccess(AMOCRM.lang.modal_success),
                        m.changeMainLinkedEntityPosition(r)) : s.requestFail()
                    })
                }, this)
            })),
            e.stopPropagation()
        },
        changeMainLinkedEntityPosition: function(e) {
            var s = t("#contacts_list")
              , n = s.find(".linked-forms__main_item");
            n.removeClass("linked-forms__main_item").find(".linked-form__field__main").remove(),
            n.find(".js-linked-entity-set_main").removeClass("hidden"),
            e.find(".js-linked-entity-set_main").addClass("hidden"),
            e.addClass("linked-forms__main_item"),
            e.attr("data-main-item", "true"),
            s.prepend(e),
            this.checkMainLinkedEntityHasStar(e),
            i.isFunction(this.options.onChangeMainContact) && this.options.onChangeMainContact.call(this);
        },
        checkMainLinkedEntityHasStar: function(e) {
            var i, s = t("#contacts_list");
            e = e || s.find('.linked-forms__item[data-main-item="true"]'),
            i = e.find(".linked-form__field__main"),
            s.find(".linked-forms__item").length > 1 ? i.length || e.addClass("linked-forms__main_item") : (e.removeClass("linked-forms__main_item"),
            i.remove())
        },
        unlinkLinkedEntity: function(e) {
            var i, s, n, r = this, a = this.$('input[name="ID"]').val(), l = parseInt(this.$('input[name="ELEMENT_TYPE"]').val()), d = 3 === l ? "company" : "contact", u = t.trim(this.$(".linked-form__field__value-name input").val()), h = {
                request: {
                    links: {
                        unlink: []
                    }
                }
            };
            t(document).trigger("controls:hide"),
            AMOCRM.getBaseEntity() === c.convertElementType(AMOCRM.element_types.customers, "string") ? (s = "/ajax/v1/links/set",
            n = {
                from: AMOCRM.data.current_entity,
                to: c.convertElementType(l, "string"),
                from_id: r.$('input[name="MAIN_ID"]').val(),
                to_id: a
            },
            h.request.links.unlink.push(n)) : (s = "/ajax/" + AMOCRM.data.current_entity + "/linked/remove/",
            h = {
                element_id: a,
                element_type: l,
                main_id: r.$('input[name="MAIN_ID"]').val()
            }),
            new o({
                class_name: "modal-list",
                text: AMOCRM.lang["are_you_sure_to_unlink_" + d].toString().replace("#MARKER#", u),
                accept: function() {
                    var e = this;
                    this.requestStart().xhr = t.ajax({
                        url: s,
                        type: "POST",
                        dataType: "json",
                        data: h,
                        success: function(s) {
                            s.response === !0 || c.has_keys(s, ["response", "links", "unlink", "errors"]) && 0 === s.response.links.unlink.errors.length ? (r.destroy(),
                            "contact" === d && s.main_contact_id && (i = t("#linked_form_" + s.main_contact_id).closest(".linked-forms__item"),
                            i.length && (i.hasClass("linked-forms__main_item") ? r.checkMainLinkedEntityHasStar(i) : r.changeMainLinkedEntityPosition(i))),
                            r.options.onFormUnlink.call(r, r),
                            r.options.onUnlink.call(r, {
                                element_id: a,
                                element_type: l
                            }),
                            e.requestSuccess(AMOCRM.lang.linked_entity__unlinked)) : e.requestFail()
                        },
                        error: function() {
                            e.requestFail()
                        }
                    })
                }
            }),
            e.stopPropagation()
        },
        showHideAddVariant: function(e) {
            var i = t(e.currentTarget)
              , s = i.closest(".linked-form__field-pei")
              , n = "show";
            i.val() ? n = "show" : s.prev(".linked-form__field-pei").length || (n = "hide"),
            s.next(".linked-form__field-add-multiple")[n]()
        }
    }),
    d
}),
define("lib/interface/card/linked/add", ["require", "underscore", "jquery", "backbone", "cocktail", "lib/components/base/confirm", "lib/interface/card/mixins/common", "lib/interface/card/mixins/tip_actions", "lib/components/base/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("backbone")
      , n = e("cocktail")
      , o = e("lib/components/base/confirm")
      , r = e("lib/interface/card/mixins/common")
      , a = e("lib/interface/card/mixins/tip_actions")
      , l = e("lib/components/base/form")
      , c = {};
    return c.Model = l.Model.extend({
        is_add: !0,
        setDefaults: function() {
            l.Model.prototype.setDefaults.call(this),
            this.init_defaults = t.clone(this.defaults)
        },
        save: function(e) {
            var s = this;
            this.saving || (this.saving = !0,
            i.ajax({
                url: this.url,
                data: i.param(this.toJSON()) + this.save_data,
                type: "POST",
                dataType: "json"
            }).always(function() {
                s.saving = !1
            }).done(function(i) {
                t.isFunction(e.success) && (s.save_data = "",
                e.success.call(s, i))
            }).fail(function() {
                t.isFunction(e.error) && e.error.call(s)
            }))
        },
        toJSON: function() {
            var e = s.Model.prototype.toJSON.call(this);
            return (this.get("lead[ID]") || this.get("customers[ID]")) && (this.get("company[NAME]") || delete e["company[NAME]"],
            this.get("company[ID]") || delete e["company[ID]"]),
            e
        }
    }),
    c.View = l.View.extend({
        events: function() {
            return t.extend({}, l.View.prototype.events, {
                "input .js-suggest-company-for-contact": "resetCompanyForContact",
                "suggest:changed .js-suggest-company-for-contact": "chooseCompanyForContact",
                "blur .js-company-name": "onCompanyNameChangeInAdd",
                "suggest:loaded .js-suggest-contact-company-pei": "peiSuggestLoaded",
                "suggest:loaded .js-linked-pei": "peiSuggestLoaded",
                "suggest:loaded .js-suggest-contact-company": "companySuggestLoaded",
                "suggest:changed .js-suggest-contact-company": "chooseContactFromSuggest",
                "suggest:loaded .js-suggest-company-for-contact": "companySuggestLoaded",
                "suggest:changed .js-suggest-contact-company-pei": "chooseContactFromSuggest",
                "suggest:changed .js-linked-pei": "chooseContactFromSuggest",
                "focus .js-linked-has-actions .linked-form__cf:not(.js-linked-in-edit)": "focusHasActionsField",
                "blur .js-linked-has-actions .linked-form__cf": "unfocusHasActionsField",
                "focus .linked-form__cf:not(.js-linked-in-edit)": "focusField",
                "blur .linked-form__cf": "unfocusField",
                "click .linked-form__field-add-multiple .linked-form__field__value": "addNewVariant",
                "input .linked-form__field-pei input": "showHideAddVariant",
                "change .linked-form__field-pei input": "showHideAddVariant"
            })
        },
        initialize: function(e) {
            var s = {
                main_element_type: 0,
                prepareSave: function() {
                    return ""
                },
                onSave: t.noop,
                onSuggestCompany: t.noop,
                onSuggestContact: t.noop,
                onChangeCompanyName: t.noop,
                _onSave: t.bind(function(e) {
                    this.model.defaults = t.clone(this.model.init_defaults),
                    this.afterSave(e)
                }, this)
            };
            n.mixin(this, r, a),
            l.View.prototype.initialize.call(this, {
                model: c.Model
            }),
            this.options = i.extend({}, s, e || {}),
            this.model.on("view:destroy", this.destroy, this),
            this.model.save_data = ""
        },
        destroy: function(e) {
            l.View.prototype.remove.call(this, e)
        },
        save: function() {
            this.save_data = this.options.prepareSave.call(this) || "",
            l.View.prototype.save.apply(this, arguments)
        },
        afterSave: function(e) {
            this.$(".phone_wrapper,.email_wrapper,.im_wrapper").find(":input").val("").trigger("change").trigger("controls:change"),
            this.options.onSave.call(this, e)
        },
        resetCompanyForContact: function() {
            this.$("#contact_company_id").val() && this.$("#contact_company_id").val("").trigger("change")
        },
        onCompanyNameChangeInAdd: function(e) {
            t.delay(t.bind(function() {
                this.options.onChangeCompanyName(e.currentTarget.value)
            }, this), 100)
        },
        chooseCompanyForContact: function(e, t) {
            var s = i(e.currentTarget)
              , n = i("#new_company_name");
            e.stopPropagation(),
            this.$('input[name="company[ID]"]').val(t.attr("data-value-id")).trigger("change"),
            n.val() || i("#companies_list").children(".company_contacts__item").length || this.options.onSuggestCompany.call(this, s)
        },
        peiSuggestLoaded: function(e, t, s) {
            var n = i(e.currentTarget)
              , o = []
              , r = ""
              , a = n.attr("data-pei-code");
            "ok" === t.status ? (i.each(t.result, function(e, t) {
                r = t.name + (t.company_name ? ', <span style="color:rgba(103,110,121,0.502)">' + t.company_name + "</span>" : ""),
                t[a] && t[a].length && (r += '<div class="suggest-item-pei">' + t[a].join(", ") + "</div>"),
                o.push({
                    id: t.id,
                    title: t.name,
                    text: r
                })
            }),
            s.trigger("suggest:reset", [o])) : s.trigger("suggest:reset", [[]])
        },
        companySuggestLoaded: function(e, t, s) {
            var n = [];
            "ok" === t.status ? (i.each(t.result, function(e, t) {
                n.push({
                    id: t.id,
                    text: t.name + (t.company_name ? ', <span style="color:rgba(103,110,121,0.502)">' + t.company_name + "</span>" : ""),
                    company_id: t.company_id ? t.company_id : 0
                })
            }),
            s.trigger("suggest:reset", [n])) : s.trigger("suggest:reset", [[]])
        },
        chooseContactFromSuggest: function(e, s) {
            var n, r = this, a = i(e.currentTarget), l = i.trim(s.find(".suggest-item-pei").text()), c = a.attr("data-value-id"), d = s.attr("company-id"), u = {
                id: c,
                name: l,
                company_id: d
            };
            e.stopPropagation(),
            a.val(l),
            (!t.isFunction(this.options.onBeforeSuggestContact) || this.options.onBeforeSuggestContact(a, u)) && (n = a.closest("form"),
            a.val("").trigger("change"),
            this.hasChanges() ? (a.val(l),
            new o({
                class_name: "modal-list",
                text: AMOCRM.lang["card_confirm_before_link_" + n.attr("data-entity")],
                accept: function() {
                    this.modal.destroy(),
                    r.options.onSuggestContact.call(r, a, u)
                },
                destroy: function() {
                    this.accepted || (a.val(""),
                    AMOCRM.is_touch_device || a.focus())
                }
            })) : this.options.onSuggestContact.call(this, a, u))
        }
    }),
    c
}),
define("lib/interface/card/linked/forms", ["require", "jquery", "underscore", "backbone", "lib/core/view", "lib/components/base/confirm", "lib/interface/card/linked/edit", "lib/interface/card/linked/add"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("backbone")
      , n = e("lib/core/view")
      , o = e("lib/components/base/confirm")
      , r = e("lib/interface/card/linked/edit")
      , a = e("lib/interface/card/linked/add")
      , l = {}
      , c = 200;
    return l.EditForm = r,
    l.AddForm = a,
    l.View = n.extend({
        _selectors: function() {
            return {
                linked_exists_not_active: ".linked-forms__item:not(.linked-forms__item-active):not(.linked-forms__item_is-add)",
                linked_new: ".linked-forms__item_is-add:not(.expanded)"
            }
        },
        events: function() {
            var e = {
                "click .js-linked-cancel": "cancelAddForm",
                "click .linked-form__field__link": "preventNavigateToEntity",
                "tip:showed .linked-form__field__more__tip": "onTipShowed"
            };
            return e["mousedown " + this._selector("linked_exists_not_active")] = "preventNameFocus",
            e["touchstart " + this._selector("linked_exists_not_active")] = "preventNameFocusTouch",
            e["click " + this._selector("linked_exists_not_active")] = "toggleForm",
            e["click " + this._selector("linked_new")] = "showAddForm",
            e
        },
        initialize: function(e) {
            var n, o = {
                forms_selector: ".linked-forms ",
                add_forms_selector: ".linked-forms__item_is-add ",
                element_type: 0,
                onAdd: i.noop,
                onModify: i.noop,
                onSaveStart: i.noop,
                onSaveForm: i.noop,
                onSaveComplete: i.noop,
                onRevert: i.noop,
                onValidate: i.noop,
                edit: {
                    type: "edit",
                    onFormUnlink: i.bind(this.unlinkForm, this),
                    onUnlink: i.noop,
                    onSuggestCompany: i.noop
                },
                add: {
                    type: "add",
                    prepareSave: function() {
                        return ""
                    },
                    onSuggestCompany: i.noop,
                    onSuggestContact: i.noop
                }
            };
            this.options = t.extend(!0, {}, o, e || {}),
            this.form_views = [],
            this.form_models = new s.Collection,
            this.$(this.options.forms_selector + " form, " + this.options.add_forms_selector + " form").each(i.bind(function(e, s) {
                t(s).closest(this.options.forms_selector).length ? this.addForm(r.View, s, this.options.edit) : (n = this.addForm(a.View, s, this.options.add),
                n.$el.on("form:cancel", i.bind(this.cancelAddForm, this)))
            }, this)),
            this.form_models.on("has_changes", this.hasModified, this),
            this.form_models.on("has_reverted", this.hasReverted, this),
            this.form_views.reverse()
        },
        destroy: function() {
            this.form_models.each(function(e) {
                e.trigger("view:destroy", !1)
            })
        },
        preventNavigateToEntity: function(e) {
            (e.metaKey || e.ctrlKey) && (window.open(t(e.currentTarget).attr("href") + "?compact=yes", "_blank"),
            e.stopPropagation()),
            e.preventDefault()
        },
        unlinkForm: function(e) {
            this.form_models.remove(e.model),
            this.form_views = i.without(this.form_views, e)
        },
        addEditForm: function(e) {
            var t = this.addForm(r.View, e, this.options.edit);
            i.isFunction(this.options.onAdd) && this.options.onAdd.call(t)
        },
        addForm: function(e, t, s) {
            var n;
            return "add" === s.type && i.extend(s, {
                onChangeCompanyName: i.bind(this._onChangeCompanyName, this)
            }),
            n = new e(i.extend({
                el: t,
                main_element_type: this.options.element_type,
                onSaveForm: this.options.onSaveForm
            }, s || {})),
            this.form_views.push(n),
            this.form_models.push(n.model),
            n
        },
        _onChangeCompanyName: function(e) {
            var t = i.filter(this.form_views, function(e) {
                var t = e.$("#contact_company_id");
                switch (!0) {
                case t.length && t.val().length:
                    return !1;
                case parseInt(e.model.get("ELEMENT_TYPE")) === AMOCRM.element_types.contacts && !e.$(".js-company-name").val():
                    return !1;
                default:
                    return "add" === e.options.type || parseInt(e.model.get("ELEMENT_TYPE")) === AMOCRM.element_types.companies
                }
            });
            2 === t.length && i.each(t, function(t) {
                t.$(".js-company-name").val(e).trigger("change")
            })
        },
        setMainId: function(e) {
            var t, s;
            i.each(this.form_views, function(i) {
                t = i.$el.find(".main-entity-id"),
                t.length && (s = t.attr("name"),
                t.val(e).trigger("change"),
                i.model.set(s, e),
                i.model.defaults[s] = e,
                i.model.init_defaults[s] = e)
            })
        },
        hasReverted: function() {
            var e = !0;
            i.every(this.form_views, function(t) {
                return e = !t.hasChanges()
            }),
            e && this.options.onRevert()
        },
        hasModified: function() {
            this.options.onModify()
        },
        scrollToEl: function(e, i) {
            return this.saving ? ("function" == typeof i && i(),
            !1) : void t("body").animate({
                scrollTop: e.offset().top - 100
            }, 300, i)
        },
        onTipShowed: function(e) {
            var i = t(e.target)
              , s = i.closest(".js-tip-holder")
              , n = s.siblings(".linked-form__field__link")
              , o = i[0].getBoundingClientRect()
              , r = n[0].getBoundingClientRect();
            r.left > o.left && i.css({
                left: -1 * r.width,
                right: "auto"
            })
        },
        showAddForm: function(e) {
            var i, s, n, o = this, r = t(e.currentTarget).closest(".linked-forms__item_is-add"), a = r.closest(".card-fields__linked-block"), l = r.children("form"), c = function() {
                var e = o.getFormViewByEl(l);
                r.addClass("expanded").find(".js-suggest-contact-company").focus(),
                "new_contact_form" === r.attr("id") && (i = t("#companies_list").children("li"),
                1 === i.length && (s = i.find('input[name="ID"]').val(),
                t("#contact_company_input").val(t.trim(i.find('.linked-form__field__value-name input[type="text"]').val())).attr("data-value-id", s).trigger("change"),
                t("#contact_company_id").val(s).trigger("change"),
                e.model.initialize(),
                e.checkChanges()))
            };
            if (r.hasClass("expanded"))
                if (n = this.getFormViewByEl(l),
                n && n.hasChanges()) {
                    if (this.validate(n) === !1)
                        return;
                    this.saveForm(n, function() {
                        n.save({
                            success: function() {
                                o.hasReverted()
                            }
                        })
                    })
                } else
                    r.removeClass("expanded").find(".js-suggest-contact-company").blur();
            else
                this.toggleForm({
                    afterToggle: c,
                    currentTarget: a.find(".linked-forms__item-active")
                }) && c()
        },
        cancelAddForm: function(e, i) {
            var s, n, o = t(e && e.currentTarget || this.closest(".linked-forms__item_is-add").children(".js-linked-cancel")), r = o.closest(".linked-forms__item_is-add"), a = r.find("form");
            s = this.getFormViewByEl(a),
            s && (s.model.trigger("clear_errors", s.$el, s.model.toJSON()),
            s.revert()),
            n = i || r.prev(this.forms_selector).find(".linked-forms__item:first"),
            n.length ? this.toggleForm({
                currentTarget: n
            }) : r.removeClass("expanded").find(".js-suggest-contact-company").blur()
        },
        preventNameFocusTouch: function(e) {
            t(e.currentTarget).find(".linked-form__field__link input").prop("readonly", !0)
        },
        preventNameFocus: function() {
            return !1
        },
        getFormViewByEl: function(e) {
            return i.find(this.form_views, function(t) {
                return t.el === e[0]
            })
        },
        saveForm: function(e, i) {
            var s = this.getFormViewByEl(t("#new_company"))
              , n = !1;
            2 === parseInt(this.options.element_type) && s && e !== s && (!e.model.get("company[NAME]") || e.model.get("company[ID]") || t("#companies_list").children("li").length || s.hasChanges() || s.model.set("company[NAME]", e.model.get("company[NAME]")),
            s.hasChanges() && (s.save({
                success: function(t) {
                    s.revert(),
                    e !== s && (e.$el.find('input[name="company[ID]"]').val(t.company.ID).trigger("change"),
                    e.model.set("company[ID]", t.company.ID)),
                    i()
                }
            }),
            n = !0)),
            n || i()
        },
        toggleForm: function(e) {
            var i, s = this, n = t(e.currentTarget), r = n.hasClass("linked-forms__item-active"), a = r ? n : n.closest(this.options.forms_selector).find(".linked-forms__item-active"), l = r ? [] : n.closest(".linked-forms-holder").next(".linked-forms__item_is-add.expanded"), d = a.find("form"), u = function() {
                var e = a.find(".linked-form__field__link");
                l.length ? l.removeClass("expanded").find(".js-suggest-contact-company").blur() : (a.removeClass("linked-forms__item-active").find(".linked-form__fields").slideUp(c),
                e.attr("href", e.attr("data-href"))),
                r || (n.addClass("linked-forms__item-active").find(".linked-form__fields").slideDown(c),
                n.find(".linked-form__field__link").removeAttr("href"))
            };
            if (e.preventDefault && (e.preventDefault(),
            document.activeElement.blur()),
            n.find(".linked-form__field__link input").removeProp("readonly"),
            l.length && (d = l.find("form")),
            i = this.getFormViewByEl(d),
            i && i.hasChanges()) {
                if (this.validate(i) === !1)
                    return;
                return new o({
                    class_name: "modal-list",
                    text: (AMOCRM.lang["linked_form_" + i.model.get("ELEMENT_TYPE") + "_has_changes"] || "").toString().replace("#MARKER#", i.$(".linked-form__field__value-name input").val()),
                    accept: function() {
                        var t = this;
                        return s.validate(i) === !1 ? void t.destroy() : void s.saveForm(i, function() {
                            i.save({
                                success: function(i) {
                                    t.destroy(),
                                    t.requestSuccess(),
                                    u(),
                                    "function" == typeof e.afterToggle && e.afterToggle(),
                                    s.hasReverted()
                                },
                                error: function(e) {
                                    t.destroy()
                                }
                            })
                        })
                    },
                    destroy: function() {
                        this.accepted === !1 && (i.revert(),
                        u(),
                        "function" == typeof e.afterToggle && e.afterToggle())
                    }
                }),
                !1
            }
            return u(),
            this.$el.find(".text-input-textarea.linked-form__cf").trigger("controls:textarea:autosize"),
            !0
        },
        validate: function(e) {
            return e && this.options.onValidate.call(this, e) === !1 ? !1 : !0
        },
        save: function(e, t) {
            var s, n = this;
            t = t || [],
            e = e || {},
            s = i.find(this.form_views, function(e) {
                return e.hasChanges()
            }),
            this.saving = !0,
            s ? this.saveForm(s, function() {
                s.save({
                    success: function(i) {
                        i.element_type = s.model.get("ELEMENT_TYPE"),
                        t.push(i),
                        n.save(e, t)
                    },
                    error: function(t) {
                        n.saving = !1,
                        "function" == typeof e.error && e.error(t)
                    }
                })
            }) : (this.saving = !1,
            "function" == typeof e.success && e.success(t),
            this.options.onSaveComplete())
        }
    }),
    l
}),
define("lib/interface/card/mixins/notes", ["require", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn");
    return {
        _initNotes: function(e) {
            if (!e)
                throw new Error("No options passed");
            this._creating_note_exists = Boolean(e.element_id),
            this.notes = e.notes,
            this.notes._setCallbacks({
                onChange: t.bind(this._onNotesChange, this),
                onRevert: t.bind(this._onNotesRevert, this),
                onAdd: t.bind(this._onNotesAdd, this)
            }),
            this.notes.notes.once("views:added", this._updateLastAction, this).on("add remove", this._checkReloadByNotes, this).on("sync destroy", this._checkReloadByTasks, this),
            this.id && this.notes.notes.on("sync created", t.bind(this._checkAutosave, this))
        },
        addNotes: function(e) {
            t.isArray(e) || (e = [e]),
            this.notes.addNotes(e)
        },
        _updateLastAction: function(e) {
            e = t.extend({
                status_id: this.getStatusId()
            }, e || {}),
            this.notes.setFirstTaskState(!(t.indexOf([142, 143], parseInt(e.status_id)) + 1))
        },
        _onNotesChange: function() {
            this.setChanges({
                add_task_note: !0
            })
        },
        _onNotesRevert: function() {
            this.setChanges({
                add_task_note: !1
            })
        },
        _onNotesAdd: function() {
            this.notes.has_timeline && !this._creating_note_exists && (this._creating_note_exists = !0,
            this.addNotes([{
                id: i.randHex(),
                type: AMOCRM.note_types.lead_created,
                object_type: {
                    code: "notes"
                },
                created_by: this.user.id,
                date_create: moment().unix(),
                element_type: this.element_type,
                element_id: this.id
            }]))
        },
        _checkReloadByTasks: function(e) {
            var t;
            e !== this.notes.notes && this.id && (t = e && e.get("object_type"),
            t && "tasks" === t.code && this.setNeedReload())
        },
        _checkReloadByNotes: function(e) {
            e !== this.notes.notes && this.setChanges({
                notes_changes: !this.id
            })
        }
    }
}),
define("lib/interface/card/tabs/tab", ["require", "underscore", "lib/core/view"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/core/view");
    return i.extend({
        events: {
            click: "onClick"
        },
        initialize: function(e) {
            this._settings = e.settings || {},
            this._onClick = e.onClick || t.noop,
            this._onHide = e.onHide || t.noop,
            this._animateBorder = e.onAnimateBorder || t.noop,
            this._selected_class_name = e.selected_class_name || "",
            this._preload_class_name = e.preload_class_name || "",
            this._dots_class_name = e.dots_class_name || "",
            this._is_context_item = e.is_context_item,
            i.prototype.initialize.apply(this, arguments),
            e.is_selected && this._highlight(!0, !0)
        },
        destroy: function() {
            i.prototype.destroy.call(this, !0)
        },
        onClick: function() {
            this._onClick(this._settings),
            this._highlight(!0)
        },
        onHide: function() {
            this._onHide(this._settings),
            this._highlight(!1)
        },
        _highlight: function(e, t) {
            var i = this.$el;
            this._settings.no_highlight !== !0 && (this._is_context_item && (i = this.$el.closest("." + this._dots_class_name),
            e ? this.$el.addClass(this._selected_class_name) : this.$el.removeClass(this._selected_class_name)),
            this._animateBorder(i),
            e ? (i.addClass(this._selected_class_name),
            t === !0 && i.addClass(this._preload_class_name)) : i.removeClass(this._selected_class_name).removeClass(this._preload_class_name))
        },
        setNotification: function(e) {
            var t, i, s = 0;
            e ? this.$el.attr("data-notification", e) : this.$el.removeAttr("data-notification"),
            this._is_context_item && (t = this.$el.closest("." + this._dots_class_name),
            t.find("[data-notification]").each(function(e, t) {
                i = $(t),
                i.attr("data-notification") && (s += parseInt(i.attr("data-notification")))
            }),
            s ? t.attr("data-notification", s) : t.removeAttr("data-notification"))
        }
    })
}),
define("lib/interface/card/tabs/index", ["require", "underscore", "twig", "lib/common/fn", "lib/core/view", "lib/interface/card/tabs/tab"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/common/fn")
      , n = e("lib/core/view")
      , o = e("lib/interface/card/tabs/tab");
    return n.extend({
        _classes: function() {
            return {
                item: "card-tabs__item",
                js_item: "js-card-tab",
                item_inner: "card-tabs__item-inner",
                item_in_context: "card-tabs__item_in-context",
                item_is_selected: "selected",
                item_preload: "card-tabs__item_preload",
                add_linked_type: "js-add_linked_type",
                dots: "js-linked-toggler",
                dots_button: "button-input-with-menu",
                dots_button_pressed: "button-input-pressed",
                fitter: "js-fitter",
                slider: "card-tabs-slider"
            }
        },
        _selected_tab: "default",
        _tabs: [{
            id: "default",
            _tab_type: "default",
            name: s.i18n("Main")
        }],
        _tabs_views: [],
        _dots_tt: null,
        events: {
            "mouseenter .js-linked-toggler": "_onDotsMouseEnter",
            "mouseleave .js-linked-toggler": "_onDotsMouseLeave",
            "click .js-linked-toggler": "_onDotsClick"
        },
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this._settings_exists = !e.no_settings,
            this._onShow = e.onShow || t.noop,
            this._onHide = e.onHide || t.noop,
            this._onSwitch = e.onSwitch || t.noop,
            this.initTab(this._findElem("item").get(0), this._tabs[0]),
            this.render(),
            this._$window.on("resize" + this.ns, t.bind(this.render, this)),
            this._$document.on("toggleWidgetPanel" + this.ns, t.bind(this.render, this))
        },
        destroy: function() {
            this.destroyTabs(),
            n.prototype.destroy.apply(this, arguments)
        },
        _onDotsMouseEnter: function() {
            var e = this._findElem("dots_button");
            clearTimeout(this._dots_tt),
            e.hasClass(this._class("dots_button_pressed")) || (e.trigger("button:menu:toggle", [{
                visible: !1,
                no_trigger: !0
            }]),
            this.$el.addClass("dots-active"))
        },
        _onDotsMouseLeave: function(e) {
            this._dots_tt = setTimeout(t.bind(function() {
                this._findElem("dots_button").trigger("button:menu:toggle", [{
                    visible: !0,
                    no_trigger: !0
                }]),
                this.$el.removeClass("dots-active"),
                this._dots_tt = null
            }, this), 100)
        },
        _onDotsClick: function(e) {
            3 === e.isTrigger || AMOCRM.is_touch_device || $(e.target).closest("li").length || e.stopPropagation()
        },
        update: function(e, i, s, n) {
            return this._tabs = t.filter(this._tabs, function(e) {
                return e._tab_type !== i
            }),
            t.isArray(e) ? (this._tabs = this._tabs.concat(t.map(e, function(e) {
                return t.extend(e, {
                    _tab_type: i,
                    onShow: s,
                    onHide: n
                })
            }, this)),
            this.render()) : new Promise(function(e) {
                e()
            }
            )
        },
        render: i._preload(["/tmpl/cards/toggler.twig"], "_render"),
        _render: function() {
            var e = this._measure()
              , s = {
                inner_class_name: "button-input-more-inner",
                class_name: "button-input-more",
                svg_class_name: "controls--button-more",
                context_menu: t.map(e.hidden, function(e) {
                    return {
                        svg_icon: e.svg_icon,
                        class_name: [this._class("js_item"), this._class("item_in_context")].join(" "),
                        id: "linked_context_" + e.id,
                        additional_data: "",
                        href: null,
                        _blank: null,
                        span_class: "h-text-overflow",
                        text: e.name
                    }
                }, this)
            };
            this.destroyTabs(),
            this.$el.append(e.$visible.map(t.bind(function(e, t) {
                return this.initTab(t, this._tabs[e]),
                t
            }, this))),
            this._elem("dots").removeClass(this._class("item_is_selected")).removeClass(this._class("item_preload")),
            s.context_menu.length ? (this._elem("dots").html(i({
                ref: "/tmpl/controls/button.twig"
            }).render(s)),
            t.each(e.hidden, function(e) {
                this.initTab($("#linked_context_" + e.id).get(0), e)
            }, this)) : this._elem("dots").html("")
        },
        _getTrimmedVisibleTabs: function(e, t) {
            var i, s, n = 0;
            return s = e.find(this._selector("item_inner")).filter(function(e, t) {
                return i = $(t),
                n += t.parentNode.offsetWidth,
                i.get(0).scrollWidth > parseInt(i.css("max-width"))
            }),
            {
                $items: s,
                rest_width: t - n
            }
        },
        _getTabViewById: function(e) {
            return t.find(this._tabs_views, function(t) {
                return t._settings.id === e
            })
        },
        _measure: function() {
            var e = $('<div class="' + this._class("fitter") + '"></div>')
              , i = -1
              , n = this.$el.get(0).offsetWidth - this._elem("dots").width();
            return this.$el.append(e),
            e.css({
                zIndex: -1,
                position: "absolute",
                top: 0,
                bottom: 0,
                whiteSpace: "nowrap",
                visibility: "hidden"
            }),
            i = t.findIndex(this._tabs, function(t, i) {
                var o, r = $('<div class="' + this._class("item") + " " + this._class("js_item") + '" data-id="' + t.id + '"><span class="' + this._class("item_inner") + '" title="' + s.stripTags(t.name) + '">' + t.name + "</span></div>");
                return e.append(r),
                o = n - e.get(0).offsetWidth,
                0 > o && r.remove(),
                0 > o
            }, this),
            this._adjustVisibleWidths(e, n),
            e.remove(),
            {
                $visible: e.children(),
                hidden: i > -1 ? t.rest(this._tabs, i) : []
            }
        },
        toggleTabs: function(e) {
            return this._onHide(),
            t.each(this._tabs_views, function(e) {
                e.onHide()
            }),
            this._selected_tab = e.id,
            this._onSwitch(this._selected_tab),
            e
        },
        _animateToSelected: function(e) {
            this._findElem("slider").css({
                left: e.position().left,
                width: e.is(this._selector("dots")) ? e.width() : e.get(0).offsetWidth
            })
        },
        initTab: function(e, i) {
            var s = i.onShow || this._onShow
              , n = t.compose(s, t.bind(this.toggleTabs, this));
            i.no_highlight === !0 && (n = s),
            this._tabs_views.push(this._addComponent(o, {
                el: e,
                settings: i,
                selected_class_name: this._class("item_is_selected"),
                preload_class_name: this._class("item_preload"),
                dots_class_name: this._class("dots"),
                is_context_item: e.classList.contains(this._class("item_in_context")),
                is_selected: i.id === this._selected_tab,
                onClick: n,
                onHide: i.onHide,
                onAnimateBorder: t.bind(this._animateToSelected, this)
            }))
        },
        _adjustVisibleWidths: function(e, t) {
            var i, s = this._getTrimmedVisibleTabs(e, t);
            s.$items.length && s.rest_width > 0 && (i = s.rest_width / s.$items.length,
            s.$items.css("max-width", "+=" + i + "px"),
            this._adjustVisibleWidths(e, t))
        },
        destroyTabs: function() {
            this._tabs_views = t.reduce(this._tabs_views, function(e, t) {
                return t.destroy(),
                e
            }, [])
        },
        setNotification: function(e, t) {
            var i = this._getTabViewById(e);
            i && i.setNotification(t)
        },
        switchTab: function(e) {
            var t = this._getTabViewById(e);
            t && t.onClick()
        }
    })
}),
define("lib/interface/card/mixins/tabs", ["require", "underscore", "lib/common/fn", "lib/interface/card/tabs/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/interface/card/tabs/index");
    return {
        initTabs: function() {
            this.tabs = new s({
                el: $("#card_tabs"),
                onHide: t.bind(this._defaultHideTabs, this),
                onShow: t.bind(this._defaultShowTab, this)
            }),
            this.updateTabs(this._getDefaultTabs(), "groups"),
            t.indexOf(["contacts", "companies"], AMOCRM.getBaseEntity()) >= 0 && (this.updateTabs([{
                id: "linked_leads",
                name: i.i18n("Leads")
            }], "leads"),
            $("#linked_customers_tab").length && this.updateTabs([{
                id: "linked_customers",
                name: i.i18n("Customers")
            }], "customers"))
        },
        destroyTabs: function() {
            this.tabs && this.tabs.destroy()
        },
        updateTabs: function(e, t, i, s) {
            this.tabs && this.tabs.update(e, t, i, s)
        },
        showTabNotification: function(e, t) {
            this.tabs && this.tabs.setNotification(e, t)
        },
        switchTab: function(e) {
            this.tabs && this.tabs.switchTab(e)
        },
        _getDefaultTabs: function(e) {
            var i;
            return e = e || this.$el,
            t.filter(AMOCRM.constant("cf_groups"), function(t) {
                return i = e.find('.js-cf-group-wrapper[data-id="' + t.id + '"]'),
                i.children().length && t.name
            }, this)
        },
        _defaultHideTabs: function(e) {
            e = e || this.$el,
            e.find(".js-cf-group-wrapper").hide(),
            e.find(".js-card-fields__linked-block, .js-card-main-fields").hide()
        },
        _defaultShowTab: function(e, t) {
            var i;
            t = t || this.$el,
            i = t.find('.js-cf-group-wrapper[data-id="' + e.id + '"]'),
            i.length && (i.show(),
            i.find(".text-input-textarea.linked-form__cf").trigger("controls:textarea:autosize")),
            "default" === e.id && t.find(".js-card-fields__linked-block, .js-card-main-fields").show()
        }
    }
}),
define("lib/interface/card/mixins/lead_adding", ["require", "underscore", "twig", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/common/fn");
    return {
        addLead: function(e, i) {
            var n = this
              , o = this.quick_lead.$el.closest(".js-card-leads")
              , r = o.find(".js-card-leads-count")
              , a = o.find(".js-card-leads-budget")
              , l = parseInt(r.attr("data-count")) + 1
              , c = parseInt(a.attr("data-budget")) + parseInt(i.budget);
            !this.id && parseInt(e[0].main_contact) > 0 && (this.setId(e[0].main_contact),
            this.setChanges({
                quick_lead: !0
            })),
            r.attr("data-count", l).text(l),
            a.attr("data-budget", c).text(s.currency(c)),
            n.appendLead(o, {
                id: e[0].dealId,
                name: i.name,
                status: parseInt(i.status.id),
                status_color: i.status.color || i.lead_info.status.color,
                status_text: t.escape(i.status.name || i.lead_info.status.name),
                pipeline: i.pipeline,
                budget: parseInt(i.budget),
                single_pipeline: i.single_pipeline
            })
        },
        appendLead: function(e, t) {
            var n, o;
            switch (t.status) {
            case 142:
                n = e.find(".js-card-leads-won-wrapper").find(".card-leads__won-won__top-sum"),
                n.text(s.currency(parseInt(n.text().replace(/[^\d]/g, "")) + t.budget)),
                e.find(".js-card-leads-won-wrapper").show().children(".js-card-leads-wonlost-body").prepend(i({
                    ref: "/tmpl/cards/leads/wonlost_item.twig"
                }).render({
                    id: t.id,
                    name: t.name,
                    budget: t.budget
                }));
                break;
            case 143:
                n = e.find(".js-card-leads-lost-wrapper").find(".card-leads__won-lost__top-sum"),
                n.text(s.currency(parseInt(n.text().replace(/[^\d]/g, "")) + t.budget)),
                e.find(".js-card-leads-lost-wrapper").show().children(".js-card-leads-wonlost-body").prepend(i({
                    ref: "/tmpl/cards/leads/wonlost_item.twig"
                }).render({
                    id: t.id,
                    name: t.name,
                    budget: t.budget
                }));
                break;
            default:
                o = {
                    lead_info: {
                        lead_mark: "yellow",
                        id: t.id,
                        name: {
                            text: t.name,
                            url: "/leads/detail/" + t.id
                        },
                        status: {
                            bg_color: t.status_color,
                            option: t.status_text
                        }
                    }
                },
                t.budget && (o.lead_info.budget = t.budget),
                t.pipeline && (o.pipeline = !t.single_pipeline && t.pipeline,
                o.lead_info.status.name = t.status_text,
                o.lead_info.status.color = t.status_color),
                e.find(".js-card-leads-wrapper").prepend(i({
                    ref: "/tmpl/cards/leads/item.twig"
                }).render(o))
            }
        }
    }
}),
define("lib/interface/card/mixins/linked_forms", ["require", "underscore", "twig", "lib/components/base/modal", "lib/common/fn", "lib/interface/amojo/mediator", "lib/interface/notes/collection", "lib/interface/card/linked/forms"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/components/base/modal")
      , n = e("lib/common/fn")
      , o = e("lib/interface/amojo/mediator")
      , r = e("lib/interface/notes/collection")
      , a = e("lib/interface/card/linked/forms");
    return {
        initLinked: function(e) {
            var n = this;
            this.linked_forms = new a.View({
                el: this.$el.find(".js-card-fields__linked-block"),
                element_type: this.element_type,
                element_id: this.id,
                onAdd: t.bind(function() {
                    this.validator && this.validator.model.count() && this.validator.check({
                        form_view: this,
                        status_id: this.getStatusId()
                    })
                }, this),
                onModify: t.bind(this.setChanges, this, {
                    linked_changes: !0
                }),
                onRevert: t.bind(this.setChanges, this, {
                    linked_changes: !1
                }),
                onSaveForm: t.bind(function(e) {
                    !this.id && e.main_id && this.setId(e.main_id)
                }, this),
                onValidate: t.bind(function(e) {
                    var t = 0 === this.validator.check({
                        form_view: e,
                        status_id: this.getStatusId()
                    });
                    return t || this.validator.scrollTo(1),
                    t
                }, this),
                edit: {
                    onUnlink: t.bind(function(e) {
                        this.validator.clearFormErrors(this.$el, this.model.toJSON(), t.invert(AMOCRM.element_types)[e.element_type]),
                        parseInt(e.element_type) === AMOCRM.element_types.companies && $("#new_company_form").show(),
                        this.setNeedReload(),
                        this._onLinkedFormsUnlink({
                            element_id: e.element_id,
                            element_type: e.element_type
                        })
                    }, this),
                    onChangeMainContact: t.bind(function() {
                        this.setNeedReload()
                    }, this),
                    onSuggestCompany: t.bind(function(e) {
                        this.linkCompanyFromContactSuggest(e)
                    }, this)
                },
                add: {
                    prepareSave: function() {
                        var e = this.$(".main-entity-id")
                          , t = "";
                        return e.length && (t += "&" + e.attr("name") + "=" + (n.id ? n.id : "")),
                        t
                    },
                    onSuggestCompany: t.bind(function(e) {
                        this.linkCompanyFromContactSuggest(e)
                    }, this),
                    onBeforeSuggestContact: t.bind(function(e, t) {
                        var n = !0;
                        return $("#linked_form_" + t.id).length && (e.val("").focus(),
                        new s({
                            class_name: "modal-list",
                            init: i._preload(["/tmpl/common/modal/error.twig"], function(t) {
                                t.trigger("modal:loaded").html(i({
                                    ref: "/tmpl/common/modal/error.twig"
                                }).render({
                                    no_retry: !0,
                                    text: AMOCRM.lang["card_" + e.attr("data-linked-type") + "_already_in_list"]
                                })).trigger("modal:centrify")
                            }),
                            destroy: function() {
                                e.focus()
                            }
                        }),
                        n = !1),
                        n
                    }, this),
                    onSuggestContact: function(e, t) {
                        var i = this;
                        n.linkElement(e, $.extend(t, {
                            callback: function(e) {
                                n.linked_forms.cancelAddForm({
                                    currentTarget: i.$el.closest(".linked-form-holder").children(".js-linked-cancel")
                                }, e),
                                n.setNeedReload()
                            }
                        }))
                    },
                    onSave: function(e) {
                        var t = this;
                        n.appendLinked({
                            result: e,
                            $form: this.$el,
                            linked_type: this.$el.attr("data-entity"),
                            callback: function(e) {
                                t.$el.trigger("form:cancel", [!1]),
                                n.setNeedReload()
                            }
                        })
                    }
                }
            })
        },
        destroyLinked: function() {
            this.linked_forms.destroy()
        },
        linkElement: function(e, t) {
            var i = this
              , s = e.parents("form")
              , n = s.attr("data-entity")
              , r = "contacts" === n ? "contact" : "company"
              , a = s.find(".main-entity-id")
              , l = "";
            s.attr("data-loading", "Y").find(".main-entity-id").val(this.id ? this.id : ""),
            "contact" === r && $("#contact_company_input").attr("disabled", "disabled"),
            a.length && (l = "&" + a.attr("name") + "=" + this.id),
            $.ajax({
                url: s.attr("action"),
                type: "POST",
                data: s.serialize() + "&" + r + "[ID]=" + t.id + l,
                dataType: "json"
            }).always(function() {
                "contact" === r && $("#contact_company_input").removeAttr("disabled")
            }).done(function(e) {
                o.addChat(e.amojo_chats),
                e.main_id && i.setId(e.main_id),
                i._checkAutosave(),
                i.appendLinked({
                    result: e,
                    $form: s,
                    linked_type: n,
                    callback: t.callback
                })
            }).fail(function() {
                AMOCRM.notifications.show_message_error({
                    text: "Linking element failed"
                })
            })
        },
        appendLinked: function(e) {
            var s, o = this, r = e.result, a = $("#" + e.linked_type + "_list"), l = {}, c = n.convertElementType(o.element_type, "single"), d = !1;
            if (t.isUndefined(e.result.element)) {
                switch (r = {
                    element: [],
                    custom_fields: e.result.CF,
                    main: {
                        ID: e.result.main_id || o.id
                    },
                    main_element_type: o.element_type,
                    entity_type: e.linked_type,
                    lang: AMOCRM.lang,
                    grant_edit: !0,
                    fields_hidden: !0
                },
                o.element_type) {
                case AMOCRM.element_types.customers:
                case AMOCRM.element_types.leads:
                    t.isUndefined(e.result.contact) ? (r.element = e.result.company,
                    a = $("#companies_list")) : r.element = e.result.contact;
                    break;
                case AMOCRM.element_types.contacts:
                    t.isUndefined(e.result.company) || (r.element = e.result.company);
                    break;
                case AMOCRM.element_types.companies:
                    t.isUndefined(e.result.contact) || (r.element = e.result.contact)
                }
                o._onLinkedFormsLink({
                    element_id: r.element.ID,
                    element_type: r.element.ELEMENT_TYPE
                })
            }
            r.entity_type === n.convertElementType(AMOCRM.element_types.companies, "string") && this.linked_forms.form_models.each(function(e) {
                parseInt(e.get("ELEMENT_TYPE")) === AMOCRM.element_types.companies && parseInt(e.get("ID")) > 0 && (d = !0)
            }),
            !d && r.element && (r.element.NAME = t.escape(r.element.NAME),
            r.element.COMPANY_NAME = t.escape(r.element.COMPANY_NAME),
            s = $('<li class="linked-forms__item" data-main-item="false">' + i({
                ref: "/tmpl/cards/forms/form.twig"
            }).render(r) + "</li>"),
            t.isArray(r.element) && s.addClass("hidden").hide(),
            r.element.main_contact && (s.addClass("linked-forms__main_item"),
            s.attr("data-main-item", "true")),
            a.closest(".linked-forms-holder").removeClass("hidden"),
            a.append(s),
            this.linked_forms.addEditForm(s.children("form")),
            "companies" === e.linked_type && $("#new_company_form").hide(),
            l[r.element.ID] = {
                id: r.element.ID,
                name: r.element.NAME
            },
            (o.element_type === AMOCRM.element_types.leads || o.element_type === AMOCRM.element_types.customers) && ($("#companies_list").find("li").length || t.isUndefined(e.result.company) || t.isUndefined(e.result.contact) || !e.result[c] || parseInt(e.result.company.ID) !== parseInt(e.result[c].COMPANY_UID) || o.appendLinked({
                result: {
                    element: e.result.company,
                    custom_fields: e.result.CF,
                    main: {
                        ID: e.result.main_id || o.id
                    },
                    main_element_type: o.element_type,
                    entity_type: e.linked_type,
                    lang: AMOCRM.lang,
                    grant_edit: !0
                },
                slideup: !0,
                linked_type: "companies",
                $form: $("#new_company")
            }))),
            "function" == typeof e.callback && e.callback(s)
        },
        linkCompanyFromContactSuggest: function(e) {
            var i = $("#new_company_name");
            $("#companies_list").children("li").length || this.linkElement(i, {
                id: e.attr("data-value-id"),
                callback: t.bind(function(e) {
                    i.closest("form").trigger("form:cancel"),
                    i.trigger("change"),
                    this.setNeedReload()
                }, this)
            })
        },
        _onLinkedFormsLink: function(e) {
            var i, s, n = this.notes.notes.findCollection(this.notes.notes.element_id), o = t.invert(AMOCRM.element_types);
            n && (s = new r([],t.pick(e, ["element_id", "element_type"])),
            s.once("fetched", t.bind(function(r) {
                i = o[parseInt(e.element_type)],
                n.embedded || (n.embedded = {},
                n.embedded[i] = {}),
                t.extend(n.embedded[i], (s.embedded || {})[i] || {}),
                this.notes.addNotes(t.filter(r, function(t) {
                    return parseInt(t.element_id) === parseInt(e.element_id)
                }))
            }, this)).fetch())
        },
        _onLinkedFormsUnlink: function(e) {
            t.each(o.get(), function(i) {
                var s = t.any(i.contacts, function(t) {
                    return parseInt(t.id) === parseInt(e.element_id)
                });
                s && o.removeChat(i.chat_id)
            }),
            this.notes.notes.chain().filter(function(t) {
                return parseInt(t.get("element_id")) === parseInt(e.element_id)
            }).each(function(e) {
                e.trigger("destroy", e, e.collection, {})
            })
        }
    }
}),
define("lib/interface/card/merge/panes/pane", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/interface/card/mixins/tabs"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/core/view")
      , o = e("lib/interface/card/mixins/tabs");
    return n.extend({
        className: "card-merge__pane card-holder__fields",
        _classes: function() {
            return {
                name: "card-fields__top-name-input",
                tags: "card-fields__tags-scoring-container"
            }
        },
        _getTemplate: function() {
            return "/tmpl/cards/merge/pane.twig"
        },
        _getRenderParams: function(e) {
            return i.extend({}, this.model.toJSON(), {
                entity_type: "leads"
            }, e)
        },
        events: {
            click: "stopPropagationOnClick",
            "click .js-card-merge-field": "onFieldClick"
        },
        initialize: function(e) {
            this.options = e || {},
            n.prototype.initialize.apply(this, arguments),
            this.$el.html('<span class="spinner-icon spinner-icon-abs-center"></span>')
        },
        destroy: function() {
            this.tabs && this.tabs.destroy(),
            n.prototype.destroy.apply(this, arguments)
        },
        stopPropagationOnClick: function(e) {
            e.stopPropagation(),
            this._$document.trigger("controls:hide")
        },
        onFieldClick: function(e) {
            var s = t(e.currentTarget)
              , n = s.attr("data-field-comparator").split(",");
            i.isFunction(this.options.onFieldSelect) && n.length && this.options.onFieldSelect(i.map(n, function(e) {
                return {
                    key: e,
                    value: this.model.get("main").ID
                }
            }, this))
        },
        getId: function() {
            var e = this.model.get("main") || {};
            return e.ID
        },
        updateSelectedFields: function(e) {
            i.each(e, function(e, t) {
                var s, n = null;
                switch (!0) {
                case i.isBoolean(e):
                    n = e;
                    break;
                default:
                    n = e.toString() === this.model.get("main").ID.toString()
                }
                i.isNull(n) || (s = this.$('[data-field-comparator="' + t + '"]'),
                s.length || (s = this.$("[data-field-comparator]").filter(function(e, i) {
                    return i.getAttribute("data-field-comparator").indexOf(t) > -1
                })),
                s.length && s.toggleClass("selected", n))
            }, this)
        },
        toggleTab: function(e) {
            this._active_tab = e,
            o._defaultHideTabs.call(this),
            o._defaultShowTab.call(this, {
                id: e
            })
        },
        render: function(e) {
            return s._preload([this._getTemplate()], i.bind(this._render, this, e))()
        },
        _render: function(e) {
            this.$el.html(s({
                ref: this._getTemplate()
            }).render(this._getRenderParams(e))),
            this._findElem("name").trigger("controls:textarea:autosize")
        }
    })
}),
define("lib/interface/card/merge/panes/merged", ["require", "underscore", "twig", "lib/interface/card/merge/panes/pane", "lib/components/tags/api", "lib/interface/card/mixins/tabs", "lib/interface/card/tabs/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/card/merge/panes/pane")
      , n = e("lib/components/tags/api")
      , o = e("lib/interface/card/mixins/tabs")
      , r = e("lib/interface/card/tabs/index");
    return s.extend({
        _selectors: function() {
            var e = {};
            return t.isFunction(s.prototype._selectors) && t.extend(e, s.prototype._selectors.apply(this, arguments)),
            t.extend(e, {
                form: "#merge_card"
            })
        },
        _getTemplate: function() {
            return "/tmpl/cards/merge/merged.twig"
        },
        selectField: function(e) {
            this.model.selectField(e)
        },
        selectAllFields: function(e) {
            this.model.selectAllFields(e)
        },
        initTabs: function(e) {
            return this.tabs = this._addComponent(r, {
                el: e.find("#card_tabs"),
                no_settings: !0,
                onHide: t.bind(o._defaultHideTabs, this),
                onShow: t.bind(o._defaultShowTab, this),
                onSwitch: t.bind(this._onToggleTab, this)
            }),
            this._active_tab && (this.tabs._selected_tab = this._active_tab),
            this.tabs.update(o._getDefaultTabs.call(this, e), "groups")
        },
        _onToggleTab: function(e) {
            this._active_tab = e,
            t.isFunction(this.options.onToggleTab) && this.options.onToggleTab(e)
        },
        _render: function(e) {
            var s = $(i({
                ref: this._getTemplate()
            }).render(this._getRenderParams(e)));
            return this.tabs && (this.tabs.$el.replaceWith(this.tabs.$el.clone()),
            this.tabs.destroy()),
            this.initTabs(s).then(t.bind(function() {
                this._active_tab && (o._defaultHideTabs.call(this, s),
                o._defaultShowTab.call(this, {
                    id: this._active_tab
                }, s)),
                this.$el.html("").append(s),
                this._findElem("name").trigger("controls:textarea:autosize"),
                t.isFunction(this.options.onMergedRender) && this.options.onMergedRender()
            }, this))
        },
        _getTags: function(e, i) {
            var s = t.pluck(e, "id")
              , n = t.filter(i, function(e) {
                return s.indexOf(e.id) < 0
            });
            return n = t.map(n, function(e) {
                return e.deleted = !0,
                e
            }),
            e = e.concat(n)
        },
        save: function(e) {
            var i = this._findElem("form")
              , s = {}
              , o = ""
              , r = this.model.toJSON()
              , a = t(r.main.tags).values();
            return e = e || {},
            a = this._getTags(a, e.tags),
            s[AMOCRM.element_types.contacts] = t.keys(r.linked_entity.contact.main),
            s[AMOCRM.element_types.companies] = t.keys(r.linked_entity.company.main),
            o = i.serialize(),
            $.ajax({
                url: i.attr("action"),
                type: "POST",
                data: ["ID=" + r.main.ID, o, $.param({
                    linked: s
                }), $.param({
                    remove: [e.remove]
                })].join("&")
            }).then(function() {
                return a.length ? n.setTags({
                    entity: AMOCRM.getBaseEntity(),
                    ids: [r.main.ID],
                    tags: a
                }) : $.Deferred().resolve()
            })
        }
    })
}),
define("lib/interface/card/merge/panes/merged_unsorted", ["require", "underscore", "lib/interface/card/merge/panes/merged", "lib/components/tags/api", "lib/components/unsorted/api", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/card/merge/panes/merged")
      , s = e("lib/components/tags/api")
      , n = e("lib/components/unsorted/api")
      , o = e("lib/common/fn");
    return i.extend({
        save: function(e) {
            var i = this._findElem("form")
              , r = {}
              , a = ""
              , l = this.model.toJSON()
              , c = t(l.main.tags).values()
              , d = !1;
            return e = e || {},
            c = this._getTags(c, e.tags),
            t.each(l.linked_entity, function(e, i) {
                i = o.convertElementType(i, "int"),
                r[i] = [],
                r[i].unsorted = [],
                t.each(e.main, function(e, t) {
                    "unsorted" !== e.type ? r[i].push(t) : d = !0
                })
            }),
            a = i.serialize(),
            new Promise(function(t, o) {
                $.ajax({
                    url: i.attr("action"),
                    type: "POST",
                    data: ["ID=" + l.main.ID, a, $.param({
                        linked: r
                    })].join("&")
                }).then(function() {
                    var i = [];
                    d && i.push(n.link([{
                        id: e.remove,
                        lead_id: l.main.ID,
                        type: AMOCRM.element_types.leads
                    }])),
                    c.length && i.push(s.setTags({
                        entity: "leads",
                        ids: [l.main.ID],
                        tags: c
                    })),
                    i.length ? Promise.all(i).then(t, o) : t()
                }, o)
            }
            )
        }
    })
}),
define("lib/interface/card/merge/model/pane", ["require", "backbone"], function(e) {
    "use strict";
    var t = e("backbone");
    return t.Model.extend({
        destroy: function() {
            var e = this.get("main") || {};
            return $.ajax({
                url: "/ajax/leads/multiple/delete/",
                type: "POST",
                data: {
                    ID: [e.ID]
                }
            })
        }
    })
}),
define("lib/interface/card/merge/collection", ["require", "underscore", "backbone", "lib/interface/card/merge/model/pane"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone")
      , s = e("lib/interface/card/merge/model/pane");
    return i.Collection.extend({
        url: "/ajax/leads/double/",
        model: s,
        parse: function(e) {
            return e && e.leads ? t.values(e.leads) : []
        }
    })
}),
define("lib/interface/card/merge/model/merged", ["require", "underscore", "backbone", "lib/interface/card/merge/model/pane"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone")
      , s = e("lib/interface/card/merge/model/pane")
      , n = function(e, i) {
        return t.reduce(e.split("."), function(e, i) {
            if (!e)
                return "";
            switch (!0) {
            case !t.isNaN(parseInt(e[i])):
                return parseInt(e[i]);
            default:
                return e[i]
            }
        }, i)
    }
      , o = function(e, t) {
        var i, s = {}, n = e.split("."), o = s;
        for (i = 0; i < n.length - 1; i++)
            o = o[n[i]] = {};
        return o[n[i]] = t,
        s
    }
      , r = {
        name: {
            type: "radio",
            path: "main.name"
        },
        budget: {
            type: "radio",
            path: "main.PRICE"
        },
        status: {
            type: "radio",
            path: "main.STATUS"
        },
        pipeline: {
            type: "radio",
            path: "main.PIPELINE_ID"
        },
        responsible: {
            type: "radio",
            path: "main.MAIN_USER_ID"
        },
        responsible_name: {
            type: "radio",
            path: "main.MAIN_USER_NAME"
        }
    };
    return i.Model.extend({
        constructor: function(e) {
            i.Model.apply(this, arguments)
        },
        parse: function(e, t) {
            var i = t.inverse ? e[1] : e[0]
              , n = $.extend(!0, {}, i);
            return n.main.tags = {},
            n.element.cf = {},
            n.linked_entity.contact.main = {},
            n.linked_entity.company.main = {},
            this._raw = e,
            this._result = new s(n),
            this.compare(e, t)
        },
        compare: function(e, i) {
            var s = i.inverse ? e[1] : e[0]
              , n = i.inverse ? e[0] : e[1]
              , o = {};
            return t.each(this._getComparators(), function(e, i) {
                t.extend(o, this._fillByComparator({
                    key: i,
                    comparator: e,
                    main: {
                        value: s.main.ID,
                        data: s
                    },
                    compare: {
                        value: n.main.ID,
                        data: n
                    },
                    merge: o
                }))
            }, this),
            o
        },
        _getComparators: function() {
            return this._comparators || (this._comparators = t.extend({}, r),
            t.extend(this._comparators, t.reduce(this._raw[0].custom_field[AMOCRM.element_types.leads], function(e, t, i) {
                return e["cf_" + i] = {
                    type: "radio",
                    path: "element.cf." + i
                },
                e
            }, {})),
            t.each(this._raw, function(e) {
                t.extend(this._comparators, t.reduce(e.main.tags, function(t, i, s) {
                    return t["tag_" + s + "_" + e.main.ID] = {
                        type: "checkbox",
                        path: "main.tags." + s
                    },
                    t
                }, {})),
                t.extend(this._comparators, t.reduce(e.linked_entity.contact.main, function(t, i, s) {
                    return t["contacts_" + s + "_" + e.main.ID] = {
                        type: "checkbox",
                        path: "linked_entity.contact.main." + s
                    },
                    t
                }, {})),
                t.extend(this._comparators, t.reduce(e.linked_entity.company.main, function(t, i, s) {
                    return t["companies_" + s + "_" + e.main.ID] = {
                        type: "radio_checkbox",
                        path: "linked_entity.company.main." + s
                    },
                    t
                }, {}))
            }, this)),
            this._comparators
        },
        _fillByComparator: function(e) {
            var i, s, o = {}, r = null;
            switch (e.comparator.type) {
            case "radio":
                switch (r = e.main.value,
                i = n(e.comparator.path, e.main.data),
                !0) {
                case t.isObject(i):
                    s = n(e.comparator.path, e.compare.data) || {},
                    i = t.union(t.isObject(i.VALUE) ? t.values(i.VALUE) : [i.VALUE], t.values(t.pick(i, "VALUE_ENUM_ID"))),
                    s = t.union(t.isObject(s.VALUE) ? t.values(s.VALUE) : [s.VALUE], t.values(t.pick(s, "VALUE_ENUM_ID"))),
                    1 === i.length && !i[0] && (s.length > 1 || s[0]) && (r = e.compare.value);
                    break;
                default:
                    !n(e.comparator.path, e.main.data) && n(e.comparator.path, e.compare.data) && (r = e.compare.value)
                }
                break;
            case "checkbox":
                r = !0;
                break;
            case "radio_checkbox":
                r = !t.find(e.merge, function(t, i) {
                    return i.split("_")[0] === e.key.split("_")[0] && t
                })
            }
            return t.isNull(r) || (o[e.key] = r),
            o
        },
        _getRawById: function(e) {
            return t.find(this._raw, function(t) {
                return t.main.ID.toString() === e.toString()
            })
        },
        _getResultValue: function(e, t) {
            var i, s = this._getComparators()[e], r = {};
            if (!s)
                return r;
            switch (s.type) {
            case "radio":
                i = t,
                r = o(s.path, n(s.path, this._getRawById(i)));
                break;
            case "checkbox":
                i = e.split("_"),
                t === !0 && (r = o(s.path, n(s.path, this._getRawById(i[i.length - 1]))));
                break;
            case "radio_checkbox":
                i = e.split("_"),
                t === !0 && (r = o(s.path, n(s.path, this._getRawById(i[i.length - 1]))))
            }
            return r
        },
        selectField: function(e) {
            var i = {}
              , s = this._getComparators();
            return t.each(e, function(e) {
                var n = s[e.key]
                  , o = this.get(e.key);
                switch (n.type) {
                case "checkbox":
                    i[e.key] = !o;
                    break;
                case "radio":
                    i[e.key] = e.value;
                    break;
                case "radio_checkbox":
                    t.reduce(this.attributes, function(t, i, s) {
                        switch (!0) {
                        case s === e.key:
                            t[e.key] = !o;
                            break;
                        case s.split("_")[0] === e.key.split("_")[0]:
                            t[s] = !1
                        }
                        return t
                    }, i, this)
                }
            }, this),
            this.set(i)
        },
        selectAllFields: function(e) {
            var i = this._getComparators();
            this.set(t.reduce(this.attributes, function(t, s, n) {
                var o = i[n]
                  , r = n.split("_")[2];
                switch (o.type) {
                case "radio_checkbox":
                case "checkbox":
                    t[n] = parseInt(r) === parseInt(e);
                    break;
                case "radio":
                    t[n] = e
                }
                return t
            }, {}))
        },
        _getResultJSON: function() {
            var e = t.reduce(this.attributes, function(e, t, i) {
                return $.extend(!0, e, this._getResultValue(i, t)),
                e
            }, {}, this);
            return $.extend(!0, {}, this._result.toJSON(), e)
        },
        toJSON: function(e) {
            return e === !0 ? i.Model.prototype.toJSON.apply(this) : this._getResultJSON()
        }
    })
}),
define("lib/interface/card/merge/index", ["require", "underscore", "twig", "lib/core/view", "lib/interface/card/merge/panes/pane", "lib/interface/card/merge/panes/merged", "lib/interface/card/merge/panes/merged_unsorted", "lib/interface/card/merge/collection", "lib/interface/card/merge/model/merged"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view")
      , n = e("lib/interface/card/merge/panes/pane")
      , o = e("lib/interface/card/merge/panes/merged")
      , r = e("lib/interface/card/merge/panes/merged_unsorted")
      , a = e("lib/interface/card/merge/collection")
      , l = e("lib/interface/card/merge/model/merged")
      , c = "/tmpl/cards/merge/inner.twig";
    return s.extend({
        className: "card-merge",
        _classes: function() {
            return {
                spinner: "js-merge-loader",
                select_all: "js-select-all",
                save: "js-merge-save",
                cancel: "js-merge-cancel",
                skip: "js-merge-skip",
                overlay: "default-overlay",
                inner: "card-merge__scroller-inner",
                name: "card-fields__top-name-wrapper",
                tags: "card-fields__tags-scoring-container"
            }
        },
        _selectors: function() {
            return {
                contacts: ".linked-forms-holder.company_contacts:not(.company_contacts__company)"
            }
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("cancel")] = "destroy",
            e["click " + this._selector("overlay")] = "destroy",
            e["click " + this._selector("save")] = "_onSaveClick",
            e["click " + this._selector("select_all")] = "_onAllFieldsSelectClick",
            e["click " + this._selector("skip")] = "_onMergeSkip",
            e
        },
        initialize: function(e) {
            this.options = e || {},
            s.prototype.initialize.apply(this, arguments),
            this._render_promise = this.template_preload(),
            this._loadPanes()
        },
        destroy: function() {
            this._elem("overlay").trigger("overlay:hide"),
            s.prototype.destroy.call(this, !0),
            t.isFunction(this.options.onDestroy) && this.options.onDestroy()
        },
        _onSaveClick: function() {
            var e = this.is_unsorted ? this._panes[0] : this._panes[1]
              , i = this.is_unsorted ? this._panes[1] : this._panes[0];
            i = t(i.model.get("main").tags).values(),
            this._elem("save").attr("data-loading") || (this._elem("save").trigger("button:save:start"),
            this._merged.save({
                remove: e.getId(),
                tags: i
            }).then(t.bind(function() {
                this._elem("save").trigger("button:save:stop"),
                this.is_unsorted ? AMOCRM.router.navigate(this._panes[1].model.get("main").DETAIL_PAGE_URL_REDESIGN, {
                    trigger: !0
                }) : this._restartMerge()
            }, this), t.bind(function() {
                this._elem("save").trigger("button:save:error")
            }, this)))
        },
        _onAllFieldsSelectClick: function(e) {
            this._merged.selectAllFields($(e.currentTarget).attr("data-id"))
        },
        _onMergeSkip: function() {
            var e, i;
            this.is_unsorted ? (i = this._panes[0].getId(),
            e = [this._panes[1].getId()]) : e = t.map(this._panes, function(e) {
                return e.getId()
            }),
            this._elem("skip").attr("data-loading") || (this._elem("skip").trigger("button:save:start"),
            $.ajax({
                url: "/ajax/v2/doubles/mark_unique",
                type: "POST",
                data: {
                    elements: e,
                    entity_type: this.options.entity_type,
                    unsorted: i
                }
            }).then(t.bind(function() {
                this._elem("skip").trigger("button:save:stop"),
                this._restartMerge()
            }, this), t.bind(function() {
                this._elem("skip").trigger("button:save:error")
            }, this)))
        },
        template_preload: i._preload([c]),
        _render: function() {
            this.$el.html(i({
                ref: c
            }).render({
                ids: this.options.merge_ids
            })),
            this._elem("overlay").trigger("overlay:show")
        },
        _loadPanes: function() {
            this._collection = new a,
            this._collection.fetch({
                data: {
                    id: this.options.merge_ids,
                    entity_type: this.options.entity_type
                }
            }).then(t.bind(this._startMerge, this))
        },
        _restartMerge: function() {
            this.$el.removeClass("js-loaded"),
            this._collection.remove(this._panes[1].model),
            t.each(this._panes, function(e) {
                this._destroyComponent(e, !0)
            }, this),
            this._destroyComponent(this._merged, !0),
            this._collection.length > 1 ? this._startMerge() : this._$document.trigger("page:reload")
        },
        _startMerge: function() {
            var e, i, s = [this._collection.find(function(e) {
                return e.get("main").ID === this.options.merge_ids[0]
            }, this), this._collection.find(function(e) {
                return e.get("main").ID !== this.options.merge_ids[0]
            }, this)];
            this.options.merge_ids[0] = s[0].get("main").ID,
            this.options.merge_ids[1] = s[1].get("main").ID,
            this._render(),
            this._panes = t.map(s, function(e) {
                return this._renderPane(n, {
                    model: e,
                    onFieldSelect: t.bind(this._onFieldSelect, this)
                })
            }, this),
            e = "unsorted" === s[0].get("type"),
            this.is_unsorted = e,
            i = e ? r : o,
            this._merged = this._renderPane(i, {
                model: new l(t.map(s, function(e) {
                    return e.toJSON()
                }),{
                    parse: !0,
                    inverse: this.is_unsorted
                }),
                onToggleTab: t.bind(this._onTabToggle, this),
                onMergedRender: t.bind(this._heightsSync, this)
            }),
            this.el.classList.add("js-loaded"),
            setTimeout(t.bind(function() {
                this._renderPanesOnSelect()
            }, this), 100)
        },
        _renderPane: function(e, t) {
            var i = this._addComponent(e, t);
            return this._findElem("inner").append(i.el),
            i
        },
        _onFieldSelect: function(e) {
            this._merged.selectField(e)
        },
        _onTabToggle: function(e) {
            t.each(this._panes, function(t) {
                t.toggleTab(e)
            })
        },
        _renderPanesOnSelect: function() {
            t.each(this._panes, function(e) {
                e._render({
                    merge: this._merged.model.toJSON(!0)
                })
            }, this),
            this._merged._render(),
            this.listenTo(this._merged.model, "change", t.throttle(this._updatePanesOnSelect, 50, {
                leading: !1
            }), this)
        },
        _updatePanesOnSelect: function() {
            t.each(this._panes, function(e) {
                e.updateSelectedFields(this._merged.model.changed)
            }, this),
            this._merged.render()
        },
        _heightsSync: function() {
            var e, i = {
                names: [this._panes[0].$(this._selector("name")), this._panes[1].$(this._selector("name")), this._merged.$(this._selector("name"))],
                tags: [this._panes[0].$(this._selector("tags")), this._panes[1].$(this._selector("tags")), this._merged.$(this._selector("tags"))],
                contacts: [this._panes[0].$(this._selector("contacts")), this._panes[1].$(this._selector("contacts")), this._merged.$(this._selector("contacts"))]
            };
            t.each(i, function(i) {
                e = t.chain(i).map(function(e) {
                    return e.get(0) && e.height() || 0
                }).max().value(),
                t.each(i, function(t) {
                    t.length && t.css({
                        height: e,
                        maxHeight: e
                    })
                })
            })
        }
    })
}),
define("lib/interface/card/mixins/merge", ["require", "underscore", "twig", "lib/common/user_rights", "lib/interface/card/merge/index"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/common/user_rights")
      , n = e("lib/interface/card/merge/index");
    return {
        _init: function() {
            var e = t.keys(AMOCRM.constant("doubles"))
              , n = s.getRights() || {};
            ("leads" === AMOCRM.getBaseEntity() || "unsorted" === AMOCRM.getBaseEntity()) && n.duplicate_search && e.length && (AMOCRM.constant("doubles", null),
            this._double_ids = e,
            this.$el.on("click", '.js-multisuggest-fake[data-id="doubles"]', t.bind(this._startMerge, this)),
            this.$el.find(".doubles_button").find(".js-multisuggest-item:last").after(i({
                ref: "interface/cards/common/fast_tags_item.twig"
            }).render({
                item: {
                    id: "doubles",
                    title: AMOCRM.lang.doubles_suspicion + "?",
                    color: "#ff3682",
                    hidden: !1,
                    is_fake: !0
                }
            })))
        },
        destroy: function() {
            this._merge && (this._merge.destroy(),
            this._merge = null)
        },
        _startMerge: function(e) {
            e.stopPropagation(),
            this._merge || (this._merge = new n({
                merge_ids: [this.id].concat(this._double_ids),
                entity_type: AMOCRM.getBaseEntity(),
                onDestroy: t.bind(this._onDestroyMerge, this)
            }),
            $(document.body).append(this._merge.el))
        },
        _onDestroyMerge: function() {
            this._merge = null
        }
    }
}),
define("lib/interface/card/mixins/column_resizer", ["underscore"], function() {
    "use strict";
    var e = require("underscore")
      , t = !1
      , i = 0;
    return {
        init: function() {
            this._$cr_resizer = this.$el.find(".js-card-column-resizer"),
            this._$cr_fields = this.$el.find(".js-card-fields"),
            this.$el.on("mousedown.card:col-resizer touchstart.card:col-resizer", ".js-card-column-resizer", e.bind(this._updateCRContainerWidth, this)),
            $(document).on("mouseup.card:col-resizer touchend.card:col-resizer", e.bind(this._stopCRHandler, this))
        },
        destroy: function() {
            $(document).off(".card:col-resizer")
        },
        _updateCRContainerWidth: function(s) {
            s.preventDefault(),
            t = !0,
            i = s.clientX || s.originalEvent.touches[0].clientX,
            this._cr_container_width = this.$el.get(0).offsetWidth,
            this._cr_fields_min_width = parseInt(this.$el.find(".js-card-fields").css("min-width")),
            this._cr_fields_start_width = this._$cr_fields.get(0).offsetWidth,
            this._cr_fixed_notes = this.$el.find(".js-note.outside, .js-future-tasks-fixable"),
            this._cr_fixed_notes_widths = $.makeArray(this._cr_fixed_notes.map(function(e, t) {
                return t.offsetWidth
            })),
            this._$cr_resizer.addClass("is-dragging"),
            $("body").addClass("block-selection-prepended"),
            $(document).on("mousemove.card:col-resizer touchmove.card:col-resizer", e.bind(this._resizeCRHandler, this))
        },
        _resizeCRHandler: function(s) {
            var n, o, r;
            s.preventDefault(),
            t && (n = i - (s.clientX || s.originalEvent.touches[0].clientX),
            r = this._cr_fields_start_width - n,
            o = 100 * r / this._cr_container_width,
            (30 > o || r <= this._cr_fields_min_width) && (o = 30,
            r = o * this._cr_container_width / 100,
            r < this._cr_fields_min_width && (r = this._cr_fields_min_width),
            n = this._cr_fields_start_width - r),
            o > 50 && (o = 50,
            n = this._cr_fields_start_width - o * this._cr_container_width / 100),
            this._$cr_fields.css("width", o + "%"),
            this._cr_fixed_notes.each(e.bind(function(e, t) {
                $(t).css("width", this._cr_fixed_notes_widths[e] + n)
            }, this)))
        },
        _stopCRHandler: function() {
            var i = parseFloat(this._$cr_fields.get(0).style.width)
              , s = AMOCRM.constant("user") || {}
              , n = s.settings || {};
            t = !1,
            this._$cr_resizer.hasClass("is-dragging") && ($(document).off("mousemove.card:col-resizer touchmove.card:col-resizer"),
            this._$cr_resizer.removeClass("is-dragging"),
            $("body").removeClass("block-selection-prepended"),
            $(window).trigger("resize"),
            e.isEmpty(n.layout_width) || (n.layout_width[AMOCRM.getBaseEntity()].width = i,
            AMOCRM.constant("user", $.extend(!0, s, {
                settings: n
            }))),
            $.ajax({
                url: "/ajax/card/layout/set/",
                type: "POST",
                data: {
                    entity_type: AMOCRM.element_types[AMOCRM.getBaseEntity()],
                    value: i
                },
                success: function(t) {
                    e.isNull(n.layout_width) && (AMOCRM.constant("user").settings.layout_width = t.response.settings)
                }
            }))
        }
    }
}),
define("lib/interface/card/mixins/tags", ["require", "jquery", "underscore", "lib/components/tags/modals/manage"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/components/tags/modals/manage");
    return {
        init: function() {
            this.$el.on("click", "#tags-lib-manage", i.bind(function() {
                new s({
                    entity: AMOCRM.getBaseEntity(),
                    onDestroy: i.bind(this.onTagsManageModalDestroy, this)
                })
            }, this))
        },
        onTagsManageModalDestroy: function(e) {
            t(document).trigger("page:reload")
        }
    }
}),
define("lib/interface/card/card", ["require", "underscore", "jquery", "twig", "cocktail", "pubsub", "lib/core/users", "lib/common/user_rights", "lib/components/base/confirm", "lib/components/base/delete", "lib/interface/fast_tags", "lib/components/base/quick_lead", "lib/common/urlparams", "lib/common/fn", "lib/components/modals/statuses", "lib/interface/card/custom_fields", "lib/components/lists/actions/reassign", "lib/interface/card/validation", "lib/interface/card/controls/users_select", "lib/interface/card/linked/types", "lib/interface/card/linked/forms", "lib/components/base/form", "lib/components/tags/api", "lib/interface/card/mixins/notes", "lib/interface/card/mixins/tabs", "lib/interface/card/mixins/common", "lib/interface/card/mixins/tip_actions", "lib/interface/card/mixins/lead_adding", "lib/interface/card/mixins/linked_forms", "lib/interface/card/mixins/merge", "lib/interface/card/mixins/column_resizer", "lib/interface/card/mixins/tags", "vendor/nonbounce"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("twig"), o = e("cocktail"), r = e("pubsub"), a = e("lib/core/users"), l = e("lib/common/user_rights"), c = e("lib/components/base/confirm"), d = e("lib/components/base/delete"), u = e("lib/interface/fast_tags"), h = e("lib/components/base/quick_lead"), _ = e("lib/common/urlparams"), p = e("lib/common/fn"), m = e("lib/components/modals/statuses"), f = e("lib/interface/card/custom_fields"), g = e("lib/components/lists/actions/reassign"), b = e("lib/interface/card/validation"), v = e("lib/interface/card/controls/users_select"), y = e("lib/interface/card/linked/types"), w = e("lib/interface/card/linked/forms"), C = e("lib/components/base/form"), k = e("lib/components/tags/api"), x = e("lib/interface/card/mixins/notes"), M = e("lib/interface/card/mixins/tabs"), A = e("lib/interface/card/mixins/common"), O = e("lib/interface/card/mixins/tip_actions"), $ = e("lib/interface/card/mixins/lead_adding"), T = e("lib/interface/card/mixins/linked_forms"), S = e("lib/interface/card/mixins/merge"), E = e("lib/interface/card/mixins/column_resizer"), j = e("lib/interface/card/mixins/tags"), R = s(document);
    return e("vendor/nonbounce"),
    t = function(e, t) {
        var n;
        t = t || {},
        this.id = parseInt(e),
        this.new_card = !this.id,
        this.user = a.current(),
        this.element_type = AMOCRM.element_types[AMOCRM.getBaseEntity()],
        this.user_rights = i.extend({
            is_admin: l.isAdmin()
        }, l.getRights(AMOCRM.getBaseEntity(), void 0, !0) || {}),
        this.list_reload = t.after_add || !1,
        this.list = AMOCRM.data.current_view,
        this.from_add = !this.id,
        this.can_save = this.getCanSaveValue(),
        this.inboxFilter = AMOCRM.inbox.addNotifyFilter(i.bind(function(e) {
            return !e.entity || parseInt(e.entity.id) !== this.id
        }, this)),
        this.$el = s("#card_holder"),
        this.$form = s("#edit_card"),
        this.$name = this.$el.find("#person_name"),
        this.$save_btn = this.$el.find("#save_and_close_contacts_link"),
        this.$save_btn_container = this.$el.find(".card-fields__button-block"),
        this.main_user = this.getMainUser(),
        this.$save_and_create_btn = this.$el.find("#save_and_create_contacts_link"),
        this.initLinked(t),
        this.initTabs(),
        AMOCRM.constant("user_rights").is_free_user || this.setLinkedTypes(!0),
        "TEXTAREA" === this.$name[0].tagName && this.$name.addClass("autosized").css("width", "calc(100% + " + (p.getScrollBarWidth() + 1) + "px)").trigger("controls:textarea:autosize"),
        this.id || this.$name.closest(".js-card-name").addClass("card-fields__top-name-input-wrapper_add-mode"),
        n = this.getFormParams(),
        this.form = new n.Handler(n.options),
        this.form.model.on("has_changes", i.bind(this.setChanges, this, {
            has_changes: !0
        })).on("has_reverted", i.bind(this.setChanges, this, {
            has_changes: !1
        })),
        this.model = this.form.model,
        this.validator = new b({
            el: this.$el,
            element_type: this.element_type,
            linked: this.getLinkedForms()
        }),
        this.validator.model.on("tabs:notification", i.bind(this.showTabNotification, this)).on("tabs:switch", i.bind(this.switchTab, this)),
        this._initNotes({
            notes: t.notes,
            element_id: this.id
        }),
        this.setChanges(!1),
        this.init(),
        this.canSaveCheck()
    }
    ,
    i.extend(t.prototype, {
        getCanSaveValue: function() {
            return this.from_add ? this.user_rights.add : void 0 === this.user_rights.can_save ? this.user_rights.edit : this.user_rights.can_save
        },
        getCanManageTags: function() {
            return this.user_rights.manage_tags
        },
        checkIfNeedReload: function() {
            var e = _.getQueryParam("need_reload");
            e && this.setNeedReload()
        },
        setNeedReload: function() {
            this.list_reload = !0,
            this.list && (this.list.need_reload = !0)
        },
        getPipelineId: function() {
            return parseInt(this.$el.find('input[name="lead[PIPELINE_ID]"]').val() || 0)
        },
        getStatusId: function() {
            var e = 'input[name="lead[STATUS]"]';
            return this.getPipelineId() && (e += ":checked"),
            parseInt(this.$el.find(e).val() || 0)
        },
        canSaveCheck: function(e) {
            var t = !e;
            this.can_save && e !== !0 || (this.$form.find(":input").prop("disabled", t),
            s("#person_name").prop("disabled", t),
            this.model.set("disabled", t))
        },
        getMainUser: function() {
            var e = this.$el.find('.linked-form__field_reassign input[type="hidden"]').val();
            return e || (e = this.$el.find('.linked-form__field_reassign input[type="checkbox"]').val()),
            e ? parseInt(e) : 0
        },
        setTitle: function() {
            var e = s("#person_name")
              , t = e.val();
            t = t ? t : e.attr("placeholder"),
            t && AMOCRM.setTitle(t)
        },
        setChanges: function(e) {
            var t = !1
              , s = this.$el.find(".card-fields__linked-block");
            return "undefined" != typeof e && ("boolean" == typeof e ? this.changes = {
                has_changes: e,
                notes_changes: e,
                linked_changes: e,
                add_task_note: e,
                quick_lead: e,
                name_changes: e
            } : this.changes = i.extend({}, this.changes, e)),
            this.checkChanges() ? (t = !0,
            this._checkChangesExcludeNotes() && (this.$save_btn_container.removeClass("hidden"),
            s.addClass("save-block-showed"),
            this.$save_btn.trigger("button:save:enable"),
            this.$save_and_create_btn.show())) : (s.removeClass("save-block-showed"),
            this.$save_and_create_btn.hide(),
            this.$save_btn_container.hasClass("js-highlighting") || (this.$save_btn.trigger("button:save:disable"),
            this.$save_btn_container.addClass("hidden"))),
            AMOCRM.router.preventPageChange(t, "card"),
            this
        },
        destroy: function(e) {
            this.$name.trigger("autosize.destroy"),
            s(window).off("resize.card"),
            R.off("page:show:overlay"),
            AMOCRM.is_touch_device && s.nonbounce("destroy", "card"),
            this.make_purchase_modal && i.isFunction(this.make_purchase_modal.destroy) && this.make_purchase_modal.destroy(),
            this.inboxFilter && this.inboxFilter.remove(),
            this.setLinkedTypes(!1),
            this.canSaveCheck(!0),
            AMOCRM.router.removePreventConfig("card"),
            this.destroyTabs(),
            this.destroyLinked(),
            this.quick_lead && this.quick_lead.destroy(),
            this.setChanges(!1),
            this.form && this.form.destroy(),
            this.$el.off(),
            e !== !0 && (AMOCRM.data.current_card = !1)
        },
        getPath: function(e, t) {
            var i = "/" + (3 === this.element_type ? "companies" : AMOCRM.getBaseEntity()) + "/";
            return t = t || _.getQueryString(),
            e !== !1 && (e = e || this.id),
            i += e ? "detail/" + e + (t ? "?" + t : "") : "add/" + (t ? "?" + t : "")
        },
        getFormParams: function() {
            return {
                Handler: C.View,
                options: {
                    el: this.$form
                }
            }
        },
        getLinkedForms: function(e) {
            return this.linked_forms || e === !0 ? this.linked_forms : new w.View
        },
        setId: function(e, t) {
            t = i.extend({
                navigate: !0
            }, t),
            e = parseInt(e),
            this.id !== e && (this.id = e,
            this.getLinkedForms().setMainId(e),
            this._linked_types && this._linked_types.setMainId(e),
            this.notes && this.notes.setMainId(e),
            t.navigate && AMOCRM.router.navigate(this.getPath(), {
                replace: !0,
                trigger: !1
            }))
        },
        checkChanges: function() {
            var e = i.unique(i.values(this.changes));
            return e.length > 1 || e[0]
        },
        _checkChangesExcludeNotes: function() {
            var e = i.reduce(this.changes, function(e, t, i) {
                return t && e.push(i),
                e
            }, []);
            return i.difference(e, ["notes_changes", "add_task_note"]).length ? !0 : !1
        },
        confirmCloseModal: function(e, t, s) {
            var n = this;
            s = s || AMOCRM.lang.confirm_close_modal,
            n.$el.find(".modal-leave-confirm").length || new c({
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.button_exit,
                accept_text: AMOCRM.lang.button_save,
                button_class: "button-input_blue",
                text: s,
                accept: function() {
                    this.destroy()
                },
                destroy: function() {
                    this.accepted === !1 ? i.isFunction(t) && t() : i.isFunction(e) && e()
                }
            })
        },
        openStatusesModal: function(e) {
            var t = this;
            this.statuses || (e = e || {},
            this.statuses = new m({
                mode: "edit",
                pipelineId: this.getPipelineId(),
                self_reload: !0,
                init: function() {
                    i.isFunction(e.init) && e.init()
                },
                destroy: function(e) {
                    e = e || {},
                    (this.has_changes || e.needReload) && s(document).trigger("page:reload"),
                    t.statuses = void 0
                }
            }))
        },
        openCfModal: function(e) {
            var t = this;
            this.cf || (e = e || {},
            this.cf = new f({
                init: function() {
                    i.isFunction(e.init) && e.init()
                },
                destroy: function() {
                    this.has_changes && (t.setNeedReload(),
                    s(document).trigger("page:reload")),
                    t.cf = null
                }
            }))
        },
        disableNoEditFields: function() {
            var e = this.$el.find(".cf-noedit-input");
            e.find(":input").on("click", function() {
                return !1
            }),
            e.find(".control--select--list--item").on("click", function() {
                return !1
            }),
            s("html").hasClass("explorer") && e.on("click", function() {
                var e = s(this);
                e.addClass("cf-noedit-input-animate"),
                setTimeout(function() {
                    e.removeClass("cf-noedit-input-animate")
                }, 1010)
            }),
            e.find(":input").prop("disabled", !0)
        },
        initReassignUsersSelect: function(e, t) {
            var s = {
                companies: "contact",
                leads: "lead",
                contacts: "contact",
                customers: "customers"
            }
              , n = this
              , o = n.$el.find(".js-card-fields > .custom-scroll");
            e.stopPropagation(),
            new v(i.extend({
                el: e.currentTarget,
                id: "lead_main_user-users_select_holder",
                input_name: s[AMOCRM.data.current_entity] + "[MAIN_USER]",
                select_one: !0,
                class_name: "card-fields__fields-block__users-select",
                suggest_class_name: "card-fields__fields-block__users-select-suggest",
                entity: {
                    id: n.id,
                    element_type: n.element_type
                },
                onInit: function() {
                    o.height(o[0].scrollHeight)
                },
                onDestroy: function() {
                    o.css("height", "")
                }
            }, t))
        },
        initFastTags: function(e) {
            var t, n, o, r, a, l = this, c = s(e.currentTarget), d = c.parent();
            this.can_save && (e.stopPropagation(),
            d.hasClass("tags-manage") || (o = i.isUndefined(this._existed_tags) ? s.makeArray(c.find('.js-multisuggest-item:not([data-id="add_tag"])').map(function() {
                var e = s(this);
                return {
                    id: parseInt(e.attr("data-id")) || 0,
                    name: e.text().trim()
                }
            })) : i.clone(this._existed_tags),
            n = c.find('.js-multisuggest-fake[data-id="scoring"]'),
            n.length && o.unshift({
                id: "scoring",
                name: n.children("span").text().trim(),
                color: n.css("background-color"),
                is_fake: !0
            }),
            t = c.find('.js-multisuggest-fake[data-id="lead_id"]'),
            t.is(":visible") && o.unshift({
                id: "lead_id",
                name: t.text().trim(),
                is_fake: !0
            }),
            a = s.makeArray(c.find(".js-multisuggest-fake").map(function(e, t) {
                return {
                    id: s(t).attr("data-id"),
                    title: i.escape(s(t).find(".tag").text().trim()),
                    color: s(t).attr("data-color"),
                    hidden: t.classList.contains("hidden"),
                    is_fake: !0
                }
            })),
            new u({
                $el: this.$el,
                $input_container: c,
                $container: this.$el.find(".js-card-fields > .custom-scroll"),
                id: [this.id],
                tags: o,
                area: "card",
                entity: AMOCRM.getBaseEntity(),
                replace: !0,
                items_template: "/tmpl/cards/common/fast_tags.twig",
                onInit: function() {
                    d.addClass("tags-manage"),
                    this.setPositions()
                },
                onRenderItemsParams: function() {
                    return {
                        can_add: l.can_save,
                        fake_items: a,
                        scoring: r,
                        item_tmpl: "interface/cards/common/fast_tags_item.twig"
                    }
                },
                onDestroy: function() {
                    this.rerenderInput(this.getSelectedItems()),
                    d.removeClass("tags-manage")
                },
                onSaveSuccess: function(e) {
                    l._existed_tags = e,
                    l.id ? (this.hasModifications() && l.setNeedReload(),
                    l._checkAutosave()) : this.hasModifications() && (l.form.model.trigger("has_changes"),
                    l.setNeedReload())
                }
            })))
        },
        init: n._preload(["/tmpl/cards/leads/wonlost_item.twig", "/tmpl/cards/leads/item.twig", "/tmpl/cards/forms/form.twig"], "_init"),
        _init: function() {
            var e, t, n, o = this;
            this.disableNoEditFields(),
            this.checkIfNeedReload(),
            AMOCRM.is_touch_device && s.nonbounce({}, "card"),
            "contacts" === AMOCRM.getBaseEntity() && (n = _.getQueryParam("phone"),
            n && this.$el.find('.js-linked-pei[data-type="phone"]:first').val(n).trigger("change")),
            "yes" === _.getQueryParam("from_add") && this._highlightSaved(),
            this.setTitle(),
            this.can_save && AMOCRM.router.registerPreventConfig({
                message: AMOCRM.lang.card_page_leave_has_changes,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: function(e) {
                    o.save({
                        callback: function() {
                            return e(),
                            !1
                        }
                    })
                },
                decline: function(e) {
                    o.setChanges(!1),
                    R.off("page:show:overlay"),
                    e()
                }
            }, "card"),
            R.one("page:change:loader.card", function() {
                R.trigger("page:show:overlay")
            }).on("page:show:overlay", function() {
                s("#page_change_loader").length || s("#card_change_loader").length || (o.$overlay = s('<div class="default-overlay card-page-change-overlay" id="card_change_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
                o.$el.append(o.$overlay),
                o.$overlay.trigger("overlay:show", {
                    skip_fix: !0
                }))
            }).on("page:hide:overlay", function() {
                o.$overlay && (o.$overlay.trigger("overlay:hide", {
                    skip_fix: !0,
                    instantly: !0
                }),
                o.$overlay = !1)
            }),
            this.$el.on("click", "#lead_main_user-users_select_holder", i.bind(this.initReassignUsersSelect, this)).on("focus", ".js-card-name .card-big-input", function() {
                s(this).closest(".js-card-name").addClass("in-edit"),
                (o.element_type === AMOCRM.element_types.leads || o.element_type === AMOCRM.element_types.customers) && s(this).closest(".card-fields__top-name-wrapper").removeClass("card-fields__top-name-wrapper_error")
            }).on("input", "#person_name", function() {
                var e;
                o.id && "leads" === AMOCRM.getBaseEntity() && (e = o.$el.find("#add_tags").find('.js-multisuggest-fake[data-id="lead_id"]'),
                this.value ? e.removeClass("hidden") : e.addClass("hidden"))
            }).on("click", "#add_tags .js-multisuggest-fake", function(e) {
                e.stopPropagation()
            }).on("click", "#add_tags", i.bind(this.initFastTags, this)).on("click", "#save_and_close_contacts_link:not(.button-input-disabled)", i.bind(o.save, o)).on("click", ".js-card-cancel", function() {
                o.$save_btn_container.addClass("hidden"),
                o.setChanges(!1),
                R.trigger("page:reload")
            }).on("click", "#save_and_create_contacts_link", function() {
                o.save({
                    create_new_after_save: !0
                })
            }).on("click", "#card_print", function() {
                window.print()
            }).on("change", 'input[name="lead[STATUS]"]', function() {
                o.changeStatus()
            }).on("click", "#edit-cf", function() {
                o.checkChanges() && o.can_save ? o.confirmCloseModal(function() {
                    o.save({
                        callback: function() {
                            o.openCfModal()
                        }
                    })
                }, function() {
                    o.openCfModal({
                        init: function() {
                            R.trigger("page:reload")
                        }
                    })
                }, AMOCRM.lang.card_page_leave_has_changes) : o.openCfModal()
            }).on("click", "#edit-statuses", function() {
                o.checkChanges() && o.can_save ? o.confirmCloseModal(function() {
                    o.save({
                        callback: function() {
                            o.openStatusesModal()
                        }
                    })
                }, function() {
                    o.openStatusesModal({
                        init: function() {
                            s(document).trigger("page:reload")
                        }
                    })
                }, AMOCRM.lang.card_page_leave_has_changes) : o.openStatusesModal()
            }).on("click", ".element__delete-trash", function(e) {
                var t = s("#person_name").val();
                new d({
                    entity_name: p.escapeHTML(t),
                    accept: function(e) {
                        var t = this
                          , n = {
                            request: {}
                        }
                          , r = function(e) {
                            var s = i.isUndefined(e) ? AMOCRM.lang.multiple_delete_success_msg : e.message;
                            t.requestSuccess(s, function() {
                                o.setNeedReload(),
                                o.setChanges(!1),
                                "yes" === _.getQueryParam("compact") ? (window.opener && window.opener.AMOCRM && window.opener.AMOCRM.router.navigate(window.opener.location.pathname + window.opener.location.search, {
                                    trigger: !0,
                                    important: !0,
                                    replace: !0
                                }),
                                window.close()) : AMOCRM.router.back()
                            })
                        };
                        "customers" === AMOCRM.getBaseEntity() ? (n.request[AMOCRM.data.current_entity] = {
                            "delete": [o.model.get("id")]
                        },
                        o.model.destroy({
                            data: JSON.stringify(n),
                            success: function() {
                                r()
                            },
                            error: function() {
                                t.requestFail()
                            },
                            contentType: "application/json"
                        })) : this.requestStart().xhr = s.ajax({
                            url: "/ajax/" + AMOCRM.data.current_entity + "/multiple/delete/",
                            type: "POST",
                            data: {
                                ID: [o.id]
                            },
                            success: function(e) {
                                "success" === e.status ? r() : t.requestFail()
                            },
                            error: function() {
                                t.requestFail()
                            }
                        })
                    }
                })
            }).on("click suggest:suggest:click", "#add_tags .js-multisuggest-item", function(e) {
                o.getCanManageTags() || e.stopPropagation()
            }),
            this.$el.find("form textarea").trigger("controls:textarea:autosize"),
            this.$el.on("click", ".card-fields__fields-block .js-cf-actions-item", function(e) {
                o.initTipAction(e)
            }).on("focus", ".card-fields__fields-block .linked-form__cf:not(.js-linked-in-edit)", function(e) {
                o.focusField(e)
            }).on("blur", ".card-fields__fields-block .linked-form__cf", function(e) {
                o.unfocusField(e)
            }).on("focus", ".card-fields__fields-block .js-linked-has-actions .linked-form__cf:not(.js-linked-in-edit)", function(e) {
                AMOCRM.is_touch_device || o.focusHasActionsField(e)
            }).on("blur", ".card-fields__fields-block .js-linked-has-actions .linked-form__cf", function(e) {
                AMOCRM.is_touch_device || o.unfocusHasActionsField(e)
            }).on("mousedown", ".js-cf-has-actions:not(.js-cf-edit-mode)", function(i) {
                e = i.clientX,
                t = i.clientY,
                o.cf_mousedown = !0,
                o.cf_mousemove = !1
            }).on("touchstart", ".js-cf-has-actions:not(.js-cf-edit-mode)", function(e) {
                o.cf_mousedown = !0,
                o.cf_mousemove = !1,
                s(this).find(":input").prop("readonly", !0)
            }).on("mouseup touchend", ".js-cf-has-actions:not(.js-cf-edit-mode)", function(e) {
                o.cf_mousedown = !1
            }).on("mousemove", ".js-cf-has-actions:not(.js-cf-edit-mode)", function(i) {
                var s = 4;
                o.cf_mousedown && !o.cf_mousemove && (Math.abs(e - i.clientX) > s || Math.abs(t - i.clientY) > s) && (o.cf_mousemove = !0)
            }).on("click", ".card-fields__fields-block .js-linked-has-actions", function(e) {
                o.showActions(e)
            }),
            this.quick_lead = new h({
                $el: this.$el.find(".pipeline_leads__quick_add__wrapper"),
                data: {
                    ACTION: "ADD_DEAL_FROM_CONTACTS"
                },
                lead_data: function() {
                    return {
                        main_user_id: a.current().id,
                        main_contact: o.id,
                        element_type: o.element_type
                    }
                },
                focus: !1,
                hide_preventer: ".card-leads__quick-add",
                onToggle: function() {
                    var e = this.$el.children(".js-card-quick-lead-wrapper");
                    this.$el.children(".expand").length ? this.$el.parent().addClass("card-leads__quick-add-expanded") : this.$el.parent().removeClass("card-leads__quick-add-expanded"),
                    AMOCRM.is_touch_device || e.find("#quick_add_lead_name").focus()
                },
                onSuccess: i.bind(function() {
                    o.addLead.apply(this, arguments),
                    o.notes.saveUnsaved()
                }, this)
            }),
            this.$el.on("click", ".pipeline_leads__item-card, .pipeline_customers__item-card", function(e) {
                return e.ctrlKey || e.metaKey ? s(this).find(".js-navigate-link").trigger({
                    type: "link:navigate",
                    ctrlKey: !0
                }) : AMOCRM.router.navigate(s(this).find(".js-navigate-link").attr("href"), {
                    trigger: !0
                }),
                !1
            }),
            this.$el.on("click", ".card-budget", function(e) {
                s(e.currentTarget).find("input:visible").focus()
            }).on("blur", "#lead_card_budget", function() {
                this.value || (this.style.width = "")
            }),
            this.$el.on("suggest:changed", ".js-suggest-contact-company-pei, .js-suggest-main-name, .js-linked-pei", function(e, t) {
                var n = s(this)
                  , r = s.trim(t.find(".suggest-item-pei").text() || t.find("span").attr("title"))
                  , a = n.attr("data-value-id")
                  , l = i.invert(AMOCRM.element_types)[o.element_type]
                  , d = function() {
                    AMOCRM.router.navigate("/" + l + "/detail/" + a, {
                        trigger: !0,
                        replace: !0
                    })
                };
                n.val(r),
                o.checkChanges() ? (AMOCRM.is_touch_device && setTimeout(function() {
                    document.activeElement.blur()
                }, 100),
                new c({
                    class_name: "modal-list",
                    text: AMOCRM.lang["card_confirm_before_link_" + l],
                    accept: function() {
                        this.modal.destroy()
                    },
                    destroy: function() {
                        this.accepted ? (o.setChanges(!1),
                        d()) : n.focus()
                    }
                })) : d()
            }).on("suggest:loaded", ".js-suggest-contact-company-pei, .js-suggest-main-name, .js-linked-pei", function(e, t, i) {
                w.AddForm.View.prototype.peiSuggestLoaded(e, t, i)
            }),
            this.$el.on("click", ".linked-form__field-add-multiple", function(e) {
                o.addNewVariant(e, o.form)
            }).on("click", ".js-card-linked-tip-holder", function(e) {
                var t = s(this).find(".js-tip");
                t.is(":visible") ? R.trigger("controls:hide") : t.trigger("tip:show"),
                e.stopPropagation()
            }).on("keyup", ".card-fields__fields-block .linked-form__field-pei input", function(e) {
                o.showHideAddVariant(e)
            })
        },
        changeStatus: function() {
            var e = this
              , t = e.getPipelineId()
              , i = [AMOCRM.element_types.leads, AMOCRM.element_types.customers]
              , o = -1 !== i.indexOf(e.element_type);
            s("#card_status_view_mode").html(n({
                ref: "/tmpl/cards/leads/controls/status.twig"
            }).render({
                statuses: AMOCRM.constant("lead_statuses"),
                selected: e.getStatusId(),
                has_pipelines: Boolean(t),
                selected_pipe: {
                    id: t
                }
            })),
            e.validator.stopValidating(!0),
            o && e.validator.updateRules({
                status_id: this.getStatusId(),
                pipeline_id: t
            })
        },
        temp: function(e) {
            var t = "";
            return "remove" === e ? this.$form.find("#card_id, #card_temp_data").remove() : (t += this.notes.notes.chain().filter(function(e) {
                return !e.get("element_id")
            }).map(function(e) {
                return e._tempTemplate(i.extend({
                    data: !1
                }, e.toJSON()))
            }, this).value().join(""),
            this.$form.prepend('<div id="card_temp_data">' + t + "</div>")),
            this
        },
        saveError: function(e, t) {
            this.$save_btn.trigger("button:save:error")
        },
        validate: function() {
            var e = !0;
            return (this.element_type === AMOCRM.element_types.leads || this.element_type === AMOCRM.element_types.customers) && (e = !this.validator.check({
                status_id: this.getStatusId(),
                pipeline_id: this.getPipelineId()
            })),
            e
        },
        _checkAutosave: function() {
            this._checkChangesExcludeNotes() ? this.save() : this._highlightSaved()
        },
        saveRequest: function(e) {
            var t, n = this, o = function() {
                return n._highlightSaved(),
                n.setNeedReload(),
                n.setChanges(!1),
                n.$el.trigger("card:save:success"),
                i.isFunction(e.callback) ? e.callback() : !0
            }, a = s.Deferred(), l = s.Deferred(), c = s.Deferred();
            if (e = e || {},
            !this.can_save)
                return void o();
            if (this.from_add)
                switch (this.element_type) {
                case AMOCRM.element_types.contacts:
                case AMOCRM.element_types.companies:
                    this.$form.prepend('<input name="contFromLead" id="card_id" type="hidden" value="' + n.id + '" />');
                    break;
                case AMOCRM.element_types.leads:
                    this.$form.prepend('<input name="leadFromCont" id="card_id" type="hidden" value="' + n.id + '" />')
                }
            else
                this.$form.prepend('<input name="ID" id="card_id" type="hidden" value="' + n.id + '" />');
            s.ajax({
                url: n.$form.attr("action"),
                data: n.$form.serialize(),
                type: "POST",
                dataType: "json"
            }).done(i.bind(function(d) {
                "success" === d.status ? (this.tryCloseTasks(function() {
                    a.resolve()
                }),
                d.scoring && this.updateScoring(d.scoring),
                d.system_notes && this.addNotes(i.map(d.system_notes, function(e) {
                    return e.has_pipelines && (e.params = i.extend(e.params, e.note && e.note.params || {})),
                    e.element_type = this.element_type,
                    e
                }, this)),
                a.done(i.bind(function() {
                    this.checkMainUsers(function() {
                        c.resolve()
                    })
                }, this)),
                t = this.saveTags(this.new_card, d.id),
                this.id ? l.resolve() : (d.id && this.setId(d.id, {
                    navigate: !1
                }),
                r.publish("card:saved", function() {
                    l.resolve()
                })),
                s.when(a, c, l, t).done(i.bind(function() {
                    o() !== !1 && (e.res = d,
                    n.afterSave(e))
                }, this))) : this.saveError("card saving: error", d)
            }, this)).fail(i.bind(function(e) {
                this.saveError("card saving: error", e)
            }, this))
        },
        saveTags: function(e, t) {
            return !e || i.isEmpty(this._existed_tags) ? s.Deferred().resolve() : k.setTags({
                entity: AMOCRM.getBaseEntity(),
                ids: [t],
                tags: this._existed_tags
            })
        },
        _updateLeadName: function() {
            this.id && "leads" === AMOCRM.getBaseEntity() && !this.$name.val() && this.$name.attr("placeholder", p.i18n("Lead #") + this.id)
        },
        afterSave: function(e) {
            var t = e.res
              , n = ""
              , o = this.getStatusId();
            this.from_add || e.create_new_after_save ? (this.destroy(!0),
            t.redirect_to ? n = t.redirect_to : (n = !this.user_rights.edit && !this.user_rights.view || e.create_new_after_save ? this.getPath(!1, "after_add=yes&r=" + p.randHex()) : this.getPath(t.id, "after_add=yes&reload=yes"),
            i.isFunction(e.afterSave) && e.afterSave({
                id: t.id,
                name: this.$el.find("#person_name").val()
            })),
            AMOCRM.router.navigate(n, {
                trigger: !0,
                replace: !0
            })) : (this._updateLeadName(),
            this.setTitle(),
            this.setId(t.id),
            this.form.model.updateDefaults(),
            s.inArray(o, [142, 143]) >= 0 ? this.notes.closed = o : this.notes.closed = !1)
        },
        save: function(e) {
            var t = !1;
            this.quick_lead && this.quick_lead.checkHasChanges() && (t = !0,
            R.trigger("quick-lead:check-save")),
            e = e || {},
            !t && this.validate() && "Y" !== this.$save_btn.attr("data-loading") && (this.$save_btn.trigger("button:save:start", ["#fff"]),
            this.temp("remove").notes.save().then(i.bind(function() {
                this.temp("save").saveAllLinked({
                    success: i.bind(function() {
                        this.saveRequest(e)
                    }, this),
                    error: i.bind(function(e, t) {
                        this.saveError("linked saving: error", t || e)
                    }, this)
                })
            }, this), i.bind(function() {
                this.saveError("notes saving: error")
            }, this)))
        },
        saveAllLinked: function(e) {
            var t = [];
            t.push(new Promise(function(e) {
                r.publish("linked:save:before", function() {
                    e()
                })
            }
            )),
            t.push(new Promise(i.bind(function(e, t) {
                this.getLinkedForms().save({
                    success: e,
                    error: t
                })
            }, this))),
            Promise.all(t).then(i.bind(function() {
                var t, s = function(s, n) {
                    t && r.unsubscribe(t),
                    new Promise(function(e, t) {
                        r.publish("linked:save:after", function() {
                            e()
                        })
                    }
                    ).then(function() {
                        t ? i.isFunction(n) && n() : e.success()
                    }, e.error)
                };
                this.id ? s() : (t = r.subscribe("card:saved", s),
                e.success())
            }, this), e.error)
        },
        checkMainUsers: function(e) {
            var t, n = this.getMainUser(), o = {}, r = [], a = [];
            return this.getLinkedForms(!0) && n !== this.main_user ? (this.main_user = n,
            t = this.getLinkedForms().form_models.filter(function(e) {
                return !e.get("disabled") && e.get("ID") ? !0 : !1
            }),
            i.each(t, function(e) {
                var t = e.get("ELEMENT_TYPE");
                o[t] || (o[t] = [],
                a.push(AMOCRM.lang["change_main_user_" + t])),
                o[t].push(e.get("ID"))
            }),
            this.$el.find(".js-card-leads").find(".card-leads__won-lost__body__item, .pipeline_leads__item-card").each(function() {
                var e = s(this).attr("data-id");
                return e ? (o[AMOCRM.element_types.leads] || (o[AMOCRM.element_types.leads] = [],
                a.push(AMOCRM.lang["change_main_user_" + AMOCRM.element_types.leads])),
                void (e && o[AMOCRM.element_types.leads].push(e))) : !0
            }),
            void (i.keys(o).length ? g.linkedReassign({
                linkeds_text: a,
                main_user: n,
                confirm: function() {
                    i.each(o, function(e, t) {
                        r.push(this.doAjax({
                            entity: i.invert(AMOCRM.element_types)[t],
                            id: e,
                            new_main_user_id: n,
                            callback: i.noop
                        }))
                    }, this),
                    s.when.apply(s, r).done(i.bind(function() {
                        i.isFunction(e) && e()
                    }, this))
                },
                destroy: function() {
                    i.isFunction(e) && e()
                }
            }) : i.isFunction(e) && e())) : void (i.isFunction(e) && e())
        },
        tryCloseTasks: function(e) {
            var t = this
              , n = this.$el.find('input[name="lead[STATUS]"]')
              , o = this.getStatusId()
              , r = i.filter(this.notes.views, function(e) {
                var t = e.view.model
                  , i = t.get("object_type") || {};
                return "tasks" === i.code && (parseInt(t.get("element_type")) === this.element_type || parseInt(t.get("element_id")) === this.id) && t.get("editable") && !t.get("status")
            }, this)
              , a = r.map(function(e) {
                return e.view.model.get("id")
            });
            return e = e || i.noop,
            t._updateLastAction({
                status_id: o
            }),
            !this.id || n.length < 1 || 142 !== o && 143 !== o ? (e(),
            !1) : (a.length ? new c({
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.card_page_save_complete_tasks_button_decline,
                accept_text: AMOCRM.lang.card_page_save_complete_tasks_button_accept,
                button_class: "button-input_blue",
                text: AMOCRM.lang.card_page_save_complete_tasks,
                accept: function() {
                    var e = this;
                    s.ajax({
                        url: "/private/notes/edit2.php",
                        data: {
                            ACTION: "COMPLATE_TASKS",
                            TASKS_IDS: a
                        },
                        type: "POST"
                    }).done(function(t) {
                        Promise.all(r.map(function(e) {
                            e.view.complete()
                        })).then(function() {
                            e.modal._showSuccess(p.i18n("Done"))
                        })
                    })
                },
                destroy: e
            }) : e(),
            !0)
        },
        updateScoring: function(e) {
            var t = s("#card__scoring_wrapper")
              , i = s("#card__scoring_value");
            e.active ? (t.show().css("background", e.color),
            i.text(e.value)) : t.hide()
        },
        _highlightSaved: function(e) {
            var t = []
              , s = function(e) {
                e.removeClass("js-highlighting").addClass("hidden")
            };
            t = [i.compose(i.isFunction(e) ? e : i.noop, i.bind(s, {}, this.$save_btn_container))],
            this.$save_btn_container.addClass("js-highlighting").removeClass("hidden"),
            this.$save_btn.trigger("button:saved", t)
        },
        _linked_types: null,
        setLinkedTypes: function(e) {
            if ((!e || !this._linked_types) && (e || this._linked_types)) {
                if (!e)
                    return this._linked_types.destroy(),
                    void (this._linked_types = null);
                this._linked_types = new y({
                    el: this.$el.find(".js-linked-toggler"),
                    element_type: this.element_type,
                    element_id: this.id,
                    $wrapper: this.$el.find(".js-linked_elements_wrapper"),
                    getNotesCollection: i.bind(function() {
                        return this.notes.notes
                    }, this),
                    onRender: i.bind(function(e) {
                        this.updateTabs(e, "linked", i.bind(this._linked_types.showType, this._linked_types), i.bind(this._linked_types.hideType, this._linked_types)),
                        l.isAdmin() && this.updateTabs([{
                            id: "settings",
                            name: p.i18n("Attach list"),
                            no_highlight: !0,
                            svg_icon: "settings"
                        }], "settings", i.bind(this._linked_types.showLinkedTypesModal, this._linked_types), i.noop)
                    }, this)
                }),
                i.isFunction(this.setModelToLinkedTypes) && this.setModelToLinkedTypes(),
                this._linked_types.on("state_changed", function(e) {
                    this.setChanges({
                        linked_changes: e.has_changes
                    })
                }, this)
            }
        },
        initTabs: i.noop,
        destroyTabs: i.noop,
        updateTabs: i.noop,
        showTabNotification: i.noop,
        switchTab: i.noop
    }),
    o.mixin(t, x, M, A, O, $, T, S, E, j),
    t
}),
define("lib/interface/customers/card/model", ["require", "underscore", "lib/interface/element_model", "lib/common/fn", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/element_model")
      , s = e("lib/common/fn")
      , n = e("lib/common/user_rights");
    return i.extend({
        url: "/ajax/v1/customers/set/",
        _type: "customers",
        _editable_attributes: i.prototype._editable_attributes.concat(["main_user_id", "next_price", "next_date", "tags", "periodicity"]),
        set: function(e, s, n) {
            var o, r, a, l = new RegExp(AMOCRM.data.current_entity + "\\[(.+)\\]");
            return t.isUndefined(e) ? this : ("object" == typeof e ? (o = e,
            n = s) : ((o = {})[e] = s,
            e = {}),
            t.each(o, function(i, s) {
                a = s,
                t.isUndefined(s) || (r = s.match(l),
                a = null != r ? r[1] : a,
                a = "MAIN_USER" === a ? "main_user_id" : a,
                a = a.toLowerCase()),
                e[a] = o[s]
            }),
            i.prototype.set.call(this, e),
            i.prototype.set.apply(this, arguments))
        },
        extractAttributesForRequest: function(e) {
            var n;
            return e = t.clone(i.prototype.extractAttributesForRequest.apply(this, arguments)),
            e.next_date ? (n = s.getMoment(e.next_date),
            e.next_date = n.isValid() ? n.format("X") : e.next_date) : e.next_date = "",
            e
        },
        parse: function(e, s) {
            var n = i.prototype.parse.call(this, e, s);
            return t.isArray(n.tags) && (n.tags = n.tags.map(function(e) {
                return e.name
            }).join()),
            delete n.next_date,
            n
        },
        hasRightsFor: function(e) {
            var i, s;
            if (n.isAdmin())
                return !0;
            if (i = n.getRights("customers", e),
            i === n.RIGHTS_FULL)
                return !0;
            if (s = this.get("main_user_id"),
            !s)
                return !1;
            switch (s = parseInt(s),
            i) {
            case n.RIGHTS_GROUP:
                return t.indexOf(n.groupMatesIDs(), s) > -1;
            case n.RIGHTS_MAIN:
                return s === n.userID()
            }
            return !1
        }
    })
}),
define("lib/interface/customers/card/card_form", ["require", "underscore", "lib/components/base/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/base/form")
      , s = {};
    return s.View = i.View.extend({
        initModelFromForm: function(e) {
            e.attributes && this.setCustomAttributes(e.attributes),
            i.View.prototype.initModelFromForm.apply(this, arguments)
        },
        setCustomAttributes: function(e) {
            t.each(e, function(e, t) {
                this.model.set(t, e)
            }, this)
        }
    }),
    s
}),
define("lib/components/lists/actions/make_purchase", ["require", "underscore", "lib/components/modals/action", "lib/interface/transactions/model", "lib/interface/customers/card/model", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/action")
      , s = e("lib/interface/transactions/model")
      , n = e("lib/interface/customers/card/model");
    e("lib/common/fn");
    return i.extend({
        _element_id: 0,
        _elements_collection: null,
        _url: "",
        _initModal: function() {
            i.prototype._initModal.apply(this, arguments),
            this.checkCanSave()
        },
        save: function() {
            var e;
            this._elem("save_btn").trigger("button:load:start"),
            !this._xhr && this.canSave() && (this._xhr = !0,
            e = this.getDataForRequest(),
            Promise.all([this.saveCustomer(e.customer), this.saveTransaction(e.transaction)]).then(t.bind(this.actionComplete, this)))
        },
        saveCustomer: function(e) {
            return new Promise(function(t, i) {
                new n(e).save({
                    success: t,
                    error: i
                })
            }
            )
        },
        saveTransaction: function(e) {
            return new Promise(function(t, i) {
                new s(e).save({
                    success: t,
                    error: i
                })
            }
            )
        },
        setParams: function(e) {
            var s = i.prototype.setParams.apply(this, arguments);
            if (!e || !e.id)
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            if (t.isArray(e.id)) {
                if (!e.id.length)
                    throw new Error("Params.id is empty array: " + JSON.stringify({
                        params: e
                    }));
                e.id = t.first(e.id)
            }
            if (this._element_id = parseInt(e.id),
            !this._element_id || this._element_id < 0)
                throw new Error("Id must be positive number, given: " + this._element_id);
            return this._next_date = e.next_date ? parseInt(e.next_date) : 0,
            this._next_date < 0 && (this._next_date = Date.now() / 1e3),
            this._next_price = e.next_price ? parseInt(e.next_price) : 0,
            this._next_price < 0 && (this._next_price = 0),
            s
        },
        getDataForRequest: function() {
            var e = this.getPriceValue();
            return {
                customer: {
                    id: this._element_id,
                    next_date: this.getNextDate(),
                    next_price: e
                },
                transaction: {
                    customer_id: this._element_id,
                    price: e
                }
            }
        },
        isValidResponse: function(e) {
            return !!e
        },
        getPriceValue: function() {
            return this._elem("price_input_value").val()
        },
        getNextDate: function() {
            return moment(this._elem("next_date").val(), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date])).format("X")
        },
        canSave: function() {
            var e = this.getPriceValue()
              , t = this.getNextDate();
            return e && parseInt(e) > 0 && t > 0
        },
        _classes: function() {
            return t.extend(i.prototype._classes.apply(this, arguments), {
                modal: "make_purchase_modal",
                save_btn: "js-make-purchase-save",
                date_preset: "js-customers-date-preset",
                date_preset_inner: "js-inner",
                next_date: "js-customers-date-date-input"
            })
        },
        _selectors: function() {
            return t.extend(t.result(i.prototype, "_selectors"), {
                price_input_value: 'input[name="next_price"]'
            })
        },
        toggleSaveButton: function(e) {
            this._elem("save_btn").trigger("button:save:" + (e ? "enable" : "disable"))
        },
        events: function() {
            var e = i.prototype.events.apply(this, arguments) || {};
            return e["controls:change " + this._selector("next_date")] = "checkCanSave",
            e["change " + this._selector("next_date")] = "checkCanSave",
            e["change " + this._selector("price_input_value")] = "checkCanSave",
            e
        },
        preventClicks: t.noop,
        checkCanSave: function() {
            this.toggleSaveButton(this.canSave())
        },
        _template: "/tmpl/customers/pipeline/modals/make_purchase.twig",
        getTemplateParams: function() {
            var e = AMOCRM.system.locale.currency_symbol;
            return {
                id: +this._element_id,
                next_date_ts: +this._next_date,
                next_date: moment(this._next_date, "X").format(AMOCRM.system.format.date.date),
                next_price: +this._next_price,
                price_min_length: 5,
                price_max_length: 17,
                currency: e
            }
        }
    })
}),
define("lib/interface/card/customers_card", ["require", "cocktail", "moment", "jquery", "underscore", "pubsub", "lib/common/fn", "lib/interface/card/mixins/notes", "lib/interface/card/mixins/common", "lib/interface/card/mixins/tip_actions", "lib/interface/card/card", "lib/interface/customers/card/model", "lib/interface/customers/card/card_form", "lib/components/lists/actions/make_purchase"], function(e) {
    "use strict";
    var t, i = e("cocktail"), s = e("moment"), n = e("jquery"), o = e("underscore"), r = e("pubsub"), a = e("lib/common/fn"), l = e("lib/interface/card/mixins/notes"), c = e("lib/interface/card/mixins/common"), d = e("lib/interface/card/mixins/tip_actions"), u = e("lib/interface/card/card"), h = e("lib/interface/customers/card/model"), _ = e("lib/interface/customers/card/card_form"), p = e("lib/components/lists/actions/make_purchase");
    return t = function(e, t) {
        u.apply(this, arguments),
        this.setModelToLinkedTypes(this.model),
        n(document).on("click.customers-purchase-events", ".js-purchase-button.enabled", o.bind(this.initPurchaseModal, this)).on("click.customers-purchase-events", ".customers-date", o.bind(this.stopEventIfCantEdit, this)).on("controls:change.customers-purchase-events", 'input[name="customers[next_date]"]', o.bind(this.onPurchaseDateChange, this))
    }
    ,
    t.prototype = Object.create(u.prototype),
    t.prototype.destroy = function() {
        n(document).off(".customers-purchase-events"),
        u.prototype.destroy.apply(this, arguments)
    }
    ,
    t.prototype.getFormParams = function() {
        return {
            Handler: _.View,
            options: {
                el: this.$form,
                model: h,
                attributes: {
                    name: this.$name.val(),
                    id: this.id
                }
            }
        }
    }
    ,
    t.prototype.initPurchaseModal = function() {
        var e = AMOCRM.constant("intervals") || {};
        this.make_purchase_modal || (this.make_purchase_modal = new p({
            id: this.model.get("id"),
            next_date: e[1] ? s().add(e[1].length, "days").format("X") : s().add(1, "day").format("X"),
            next_price: this.model.get("next_price"),
            periodicity: this.model.get("periodicity"),
            complete: o.bind(function() {
                n(document).trigger("page:reload"),
                this.setNeedReload()
            }, this),
            afterDestroy: o.bind(function() {
                this.make_purchase_modal = null
            }, this)
        }))
    }
    ,
    t.prototype.onPurchaseDateChange = function(e, t) {
        var i, r = this.$form.find(".customers-select-wrapper__selected-status-color").children(), a = !0, l = AMOCRM.constant("intervals"), c = s(t, [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat(AMOCRM.system.format.date.date));
        n("#customers_next_date_error").remove(),
        this.$form.find(".customers-select-wrapper__selected").removeClass("error_customers_field"),
        c = c.isValid() ? c.format("X") : t,
        o.each(l, function(e, t) {
            i = a ? e.color : "",
            n(r[t]).css("background", i),
            (!e.from || c >= e.from) && (!e.to || e.to && c <= e.to) && ("closed" === e.type && n(r).css("background", i),
            a = !1)
        }),
        this._checkMakePurchase(t)
    }
    ,
    t.prototype.setChanges = function(e) {
        u.prototype.setChanges.apply(this, arguments),
        this.$periods_list = this.$el.find(".customers-date__list"),
        e && e.name_changes && this.model.set(this.$name.attr("name"), this.$name.val()),
        this._checkMakePurchase()
    }
    ,
    t.prototype._checkMakePurchase = function(e) {
        var t = this.id && !this.checkChanges();
        e && this.model.get("next_date") !== e && (t = !1),
        this.$make_purchase_button || (this.$make_purchase_button_wrapper = this.$el.find(".js-purchase_button_wrapper"),
        this.$make_purchase_button = this.$make_purchase_button_wrapper.find(".js-purchase-button")),
        this.$make_purchase_button_wrapper.toggleClass("hidden", !t),
        this.$make_purchase_button.toggleClass("enabled", t),
        this.$periods_list.toggleClass("customers-date__list_with-button", t)
    }
    ,
    t.prototype.getCanSaveValue = function() {
        return AMOCRM.constant("grant_edit")
    }
    ,
    t.prototype.getCanManageTags = function() {
        return AMOCRM.constant("grant_edit")
    }
    ,
    t.prototype.save = function(e) {
        var t = this;
        e = e || {},
        this.validate() && "Y" !== this.$save_btn.attr("data-loading") && (this.$save_btn.trigger("button:save:start", ["#fff"]),
        this.temp("remove").notes.save().then(o.bind(function() {
            this.temp("save").saveAll({
                options: e,
                success: function() {
                    var e, i = function() {
                        return t.checkMainUsers(function() {
                            t.$save_btn.trigger("button:saved"),
                            t.setNeedReload(),
                            t.setChanges(!1),
                            t.$el.trigger("card:save:success")
                        }),
                        !0
                    };
                    i() !== !1 && (e = {
                        res: {
                            id: t.model.get("id")
                        }
                    },
                    t.model.hasRightsFor("view") || (e.res.redirect_to = "/customers/list/"),
                    t.afterSave(e))
                },
                error: o.bind(function(e, t) {
                    this.saveError("linked saving: error", t || e)
                }, this)
            })
        }, this), o.bind(function() {
            this.saveError("notes saving: error")
        }, this)))
    }
    ,
    t.prototype.saveAll = function(e) {
        var t = this
          , i = [];
        i.push(new Promise(function(e, t) {
            r.publish("linked:save:before", function(i) {
                "fail" !== i ? e() : t()
            })
        }
        )),
        i.push(new Promise(o.bind(function(e, i) {
            this.form.save({
                success: function() {
                    t.setId(t.model.get("id"), {
                        navigate: !1
                    }),
                    e()
                },
                error: i
            })
        }, this))),
        e.options.without_linked || i.push(new Promise(o.bind(function(e, t) {
            this.linked_forms.save({
                success: e,
                error: t
            })
        }, this))),
        Promise.all(i).then(function(i) {
            t.saveTags(t.new_card, t.model.get("id")),
            t.saveElementLinks(e, i)
        }, e.error)
    }
    ,
    t.prototype.saveElementLinks = function(e, t) {
        var i, s = [];
        s.push(new Promise(function(e) {
            r.publish("linked:save:after", e)
        }
        )),
        s.push(new Promise(o.bind(function(e) {
            this.saveContactsCompaniesLinks(t, e)
        }, this))),
        i = this.notes.saveUnsaved(),
        i && s.push(i),
        Promise.all(s).then(function() {
            o.delay(e.success, 500)
        }, e.error)
    }
    ,
    t.prototype.saveContactsCompaniesLinks = function(e, t) {
        var i = this
          , s = !1
          , n = 0
          , r = o.first(i.linked_forms.form_views)
          , a = r ? r.$el : null;
        this.linked_forms.form_models.each(function(e) {
            parseInt(e.get("ELEMENT_TYPE")) === AMOCRM.element_types.companies && parseInt(e.get("ID")) > 0 && (s = !0)
        }),
        s || o.each(o.last(e), function(e) {
            return parseInt(e.element_type) === AMOCRM.element_types.companies ? (s = !0,
            {}) : void (parseInt(e.company_id) > 0 && (n = e.company_id))
        }),
        !s && n > 0 && a ? new Promise(function(e) {
            i.renderLinkElement({
                id: n
            }, a, {
                success: e
            })
        }
        ).then(function() {
            i.prepareLink(t)
        }) : this.prepareLink(t)
    }
    ,
    t.prototype.prepareLink = function(e) {
        var t, i = this, s = [];
        this.linked_forms.form_models.each(function(e) {
            var t = {};
            e.get("ID") > 0 && (t = {
                from: a.getEntityByTypeId(i.element_type),
                to: a.getEntityByTypeId(e.get("ELEMENT_TYPE")),
                from_id: i.model.get("id"),
                to_id: e.get("ID")
            },
            s.push(t))
        }),
        s.length > 0 ? (t = {
            done: function(t) {
                0 === t.response.links.link.errors.length ? o.isFunction(e) && e() : i.saveError("save link: error", t)
            },
            fail: function(e) {
                i.saveError("save link: error", e)
            }
        },
        this.sendLink(s, t)) : o.isFunction(e) && e()
    }
    ,
    t.prototype.linkElement = function(e, t) {
        var i, s = this, o = e.parents("form"), r = o.attr("data-entity"), l = [{
            from: a.convertElementType(s.element_type, "string"),
            to: a.convertElementType(r, "string"),
            from_id: this.id,
            to_id: t.id
        }], c = AMOCRM.constant("intervals");
        t.company_id > 0 && l.push({
            from: a.convertElementType(s.element_type, "string"),
            to: "companies",
            from_id: this.id,
            to_id: t.company_id
        }),
        o.attr("data-loading", "Y").find(".main-entity-id").val(this.id ? this.id : ""),
        "contacts" === r && n("#contact_company_input").attr("disabled", "disabled"),
        this.id > 0 ? (i = {
            always: function() {
                "contacts" === r && n("#contact_company_input").removeAttr("disabled")
            },
            done: function() {
                s.model.get("id") && s.setId(s.model.get("id")),
                s.$save_btn.trigger("button:saved", [function() {
                    s.setChanges(void 0)
                }
                ]),
                s.renderLinkElement(t, o)
            },
            fail: function() {
                AMOCRM.notifications.show_message_error({
                    text: "Linking element failed"
                })
            }
        },
        this.sendLink(l, i)) : (r = a.convertElementType(r, "int"),
        s.linked_forms.form_models.each(function(e) {
            parseInt(e.get("ELEMENT_TYPE")) === r ? e.set("ID", t.id) : t.company_id > 0 && e.set("ID", t.company_id)
        }),
        s.model.get("name") || s.$name.val(AMOCRM.lang.placeholder_name).change(),
        this.model.get("next_date") || s.$form.find(".js-customers-date-date-input").val(c[1].to).change(),
        s.save({
            without_linked: !0
        }))
    }
    ,
    t.prototype.stopMultiSuggestClickIfNeed = function(e) {
        this.stopEventIfCantEdit(e)
    }
    ,
    t.prototype.stopEventIfCantEdit = function(e) {
        var t = this.model.isNew() && !this.model.hasRightsFor("add")
          , i = !this.model.isNew() && !this.model.hasRightsFor("edit");
        (t || i) && e.stopPropagation()
    }
    ,
    t.prototype.sendLink = function(e, t) {
        var i = {
            request: {
                links: {
                    link: e
                }
            }
        };
        n.ajax({
            url: "/ajax/v1/links/set",
            type: "POST",
            data: JSON.stringify(i),
            dataType: "json",
            contentType: "application/json"
        }).always(function(e) {
            "function" == typeof t.always && t.always.apply(this, arguments)
        }).done(function(e) {
            "function" == typeof t.done && t.done.apply(this, arguments)
        }).fail(function(e) {
            "function" == typeof t.fail && t.fail.apply(this, arguments)
        })
    }
    ,
    t.prototype.renderLinkElement = function(e, t, i) {
        var s, r = this, l = {}, c = {}, d = a.convertElementType(r.element_type, "single");
        n.ajax({
            url: "/ajax/v1/contacts/list?id[]=" + e.id + "&id[]=" + e.company_id + "&type=all",
            type: "GET",
            dataType: "json"
        }).done(function(e) {
            o.each(e.response.contacts, function(e) {
                s = a.convertElementType(e.type, "string"),
                c = a.changeKeysCase(e, "upper"),
                o.each(c.PROFILES, function(e, t) {
                    o.each(["AVATAR", "LINK"], function(t) {
                        e[t] = e["PROFILE_" + t]
                    }),
                    c.PROFILES[t] = e
                }),
                l[e.type] = c,
                l[e.type].ELEMENT_TYPE = a.convertElementType(e.type, "int"),
                l.CF = AMOCRM.constant("custom_fields"),
                l[e.type].DETAIL_PAGE_URL_REDESIGN = "/" + s + "/detail/" + e.id
            }),
            (l[d] = {}).COMPANY_UID = l.company ? l.company.ID : 0,
            r.appendLinked({
                result: l,
                $form: t,
                linked_type: l.contact ? a.convertElementType(AMOCRM.element_types.contacts, "string") : a.convertElementType(AMOCRM.element_types.companies, "string"),
                callback: i ? i.success : {}
            })
        })
    }
    ,
    t.prototype.validate = function() {
        var e = u.prototype.validate.apply(this, arguments)
          , t = this.$el.find(".transactions_in_card input")
          , i = this.$el.find(".transactions_in_card .text-input-textarea").val()
          , o = s(this.model.get("next_date"), [AMOCRM.system.format.date.date.replace("YYYY", "YY")].concat([AMOCRM.system.format.date.date]))
          , r = !1;
        return t.each(function() {
            "" !== this.value && (r = !0)
        }),
        "" !== i && void 0 !== i && (r = !0),
        this.$el.find(".transaction.new").hasClass("js-need-validate") && (r = !0),
        (!o.isValid() || o.format("X") < 0 || 8 !== this.model.get("next_date").length && 10 !== this.model.get("next_date").length) && (r ? this.model.set("next_date", s(1e3 * AMOCRM.constant("intervals")[1].to).format("DD.MM.YYYY")) : (this.$form.find(".customers-select-wrapper__selected").append('<span id="customers_next_date_error" class="js-validation-tip validation-tip showed">' + a.i18n("Incorrect date") + "</span>").addClass("error_customers_field"),
        e = !1)),
        n.trim(this.model.get("name")) || (r ? this.model.set("name", a.i18n("Name")) : (this.$el.find("#person_name").closest(".card-fields__top-name-wrapper").addClass("card-fields__top-name-wrapper_error"),
        e = !1)),
        e
    }
    ,
    t.prototype.setModelToLinkedTypes = function() {
        this._linked_types && this._linked_types.setElementModel(this.model)
    }
    ,
    i.mixin(t, l, c, d),
    t
}),
define("lib/interface/unsorted/unsorted_card", ["require", "cocktail", "jquery", "underscore", "lib/common/urlparams", "twig", "lib/interface/card/mixins/notes", "lib/interface/card/mixins/common", "lib/common/fn", "lib/interface/card/card", "lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up"], function(e) {
    var t, i = e("cocktail"), s = e("jquery"), n = e("underscore"), o = e("lib/common/urlparams"), r = e("twig"), a = e("lib/interface/card/mixins/notes"), l = e("lib/interface/card/mixins/common"), c = e("lib/common/fn"), d = e("lib/interface/card/card"), u = e("lib/interface/leads/pipeline/unsorted/mixins/unsorted_linking_up");
    return t = function(e, t) {
        return this.failed_load = !1,
        this.$el = s("#card_holder"),
        this.$name = this.$el.find("#person_name"),
        this.$name[0] ? (d.apply(this, arguments),
        this.id = e,
        this.$document = s(document),
        this.options_block = this.$document.find(".notes-wrapper__unsorted-block"),
        this.$name.closest(".js-card-name").removeClass("card-fields__top-name-input-wrapper_add-mode"),
        this.unsorted_collection = t.unsorted_collection,
        this.unsorted_model = this.unsorted_collection.findWhere({
            uid: e
        }),
        void AMOCRM.constant("doubles", n.invert(this.unsorted_model.get("source_data").duplicated) || null)) : (this.failed_load = !0,
        this.failedMessage(),
        !1)
    }
    ,
    t.prototype = Object.create(d.prototype),
    t.prototype = n.extend(t.prototype, {
        _init: function() {
            d.prototype._init.apply(this, arguments),
            this._initUnsorted(),
            this._optionsWidthCalc()
        },
        _optionsWidthCalc: function() {
            var e = c.getScrollBarWidth("custom-scroll");
            this.options_block.css({
                right: e + "px"
            })
        },
        getCanSaveValue: function() {
            return !0
        },
        changeStatus: function() {
            var e = this
              , t = e.getPipelineId();
            s("#card_status_view_mode").html(r({
                ref: "/tmpl/cards/leads/controls/status.twig"
            }).render({
                statuses: AMOCRM.constant("statuses"),
                selected: e.getStatusId(),
                has_pipelines: Boolean(t),
                selected_pipe: {
                    id: t
                }
            }))
        },
        destroy: function(e) {
            this.failed_load || d.prototype.destroy.apply(this, arguments),
            this.unsorted_model && this.unsorted_model.off("accepted:failed declined:failed linked:failed", this.failedMessage, this)
        },
        _initUnsorted: function() {
            var e = this;
            this.$el.on("click", "#card_decline", n.bind(e._declinenUsorted, e)).on("click", "#card_accept", n.bind(e._acceptUsorted, e)).on("click", "#card_link", n.bind(e._linkUnsorted, e)),
            this.unsorted_model.on("accepted:success", this._afterAccept, this),
            this.unsorted_model.on("declined:success", this._afterDecline, this),
            this.unsorted_model.on("link:start", this._linkStart, this),
            this.unsorted_model.on("linked:success", this._successLink, this),
            this.unsorted_model.on("accepted:failed declined:failed linked:failed", this.failedMessage, this)
        },
        failedMessage: function() {
            this.$el.html(r({
                ref: "/tmpl/common/404page.twig"
            }).render({
                title: AMOCRM.lang.page_404_caption,
                text: c.i18n("Lead was created or Unqualified was declined")
            }))
        },
        _declinenUsorted: function(e) {
            this.$document.trigger("page:change:loader.card"),
            e.preventDefault(),
            this.unsorted_model.decline()
        },
        _acceptUsorted: function(e) {
            this.$document.trigger("page:change:loader.card");
            var t = this.getStatusId()
              , i = {};
            0 !== t && (i.status_id = t),
            e.preventDefault(),
            this.unsorted_model.accept(i)
        },
        _linkUnsorted: function() {
            return this.linkClick(this.unsorted_model),
            !1
        },
        _linkStart: function(e) {
            var t = e.data.links[this.id].type
              , i = e.data.links[this.id].id;
            this.unsorted_model.set("linked_element_type", t),
            this.unsorted_model.set("linked_element_id", i),
            this.$document.trigger("page:change:loader.card")
        },
        _successLink: function() {
            var e = this.unsorted_model.get("linked_element_type")
              , t = this.unsorted_model.get("linked_element_id")
              , i = this._getEntityAfterLink(e, t);
            this.setNeedReload(),
            this.setChanges(!1),
            AMOCRM.router.navigate(i, {
                trigger: !0,
                replace: !0
            })
        },
        _getEntityAfterLink: function(e, t) {
            var i, s = e, o = t;
            return s && o || c.log({
                msg: "Lost type or id of entity"
            }),
            i = n.findKey(AMOCRM.element_types, function(e) {
                return e === s
            }),
            "/" + i + "/detail/" + o + "?need_reload=Y&after_add=yes"
        },
        _afterDecline: function() {
            this.setNeedReload(),
            this.setChanges(!1),
            "yes" === o.getQueryParam("compact") ? (window.opener && window.opener.AMOCRM && window.opener.AMOCRM.router.navigate(window.opener.location.pathname + window.opener.location.search, {
                trigger: !0,
                important: !0,
                replace: !0
            }),
            window.close()) : AMOCRM.router.back()
        },
        _afterAccept: function(e) {
            var t = n.first(e.leads)
              , i = "/leads/detail/" + t + "?need_reload=Y&after_add=yes";
            this.setNeedReload(),
            this.setChanges(!1),
            AMOCRM.router.navigate(i, {
                trigger: !0,
                replace: !0
            })
        },
        setChanges: function(e) {
            var t = !1;
            return "undefined" != typeof e && ("boolean" == typeof e ? this.changes = {
                has_changes: e,
                notes_changes: e,
                linked_changes: e,
                add_task_note: e,
                quick_lead: e,
                name_changes: e
            } : this.changes = n.extend({}, this.changes, e)),
            AMOCRM.router.preventPageChange(t, "card"),
            this
        },
        initTabs: n.noop,
        setLinkedTypes: n.noop
    }),
    i.mixin(t, a, l, u),
    t
}),
define("lib/components/widgets/block_actions", ["require", "jquery", "underscore", "lib/common/cookie", "lib/core/view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/cookie"), o = e("lib/core/view"), r = ["companies", "contacts", "leads", "customers"];
    return new (t = o.extend({
        _state: null,
        $card: i(),
        _classes: function() {
            return {
                active: "js-widgets-active",
                card: "content__card-holder-widgets",
                zindex: "with_overlay"
            }
        },
        _selectors: function() {
            return {
                top: ".card-widgets__top",
                body: "#nano-card-widgets",
                cap: ".js-card-widgets-cap",
                caption: ".card-widgets__widget__caption"
            }
        },
        events: {
            "click .js-widget-caption-block": "onWidgetCaptionClick"
        },
        _events_card: {
            "click .card-widgets__top": "onWidgetsBlockTopClick",
            "click .card-widgets__elements": "onWidgetsElementClick"
        },
        _getStateCode: function(e) {
            return e = e || AMOCRM.getBaseEntity(),
            e + "_crd_wdgt"
        },
        resetStates: function() {
            s.each(r, function(e) {
                this.setState(0, 0, e)
            }, this)
        },
        setState: function(e, t, i) {
            s.isUndefined(t) || n.set({
                name: this._getStateCode(i),
                value: t
            }),
            this._state = e
        },
        getCurrentState: function() {
            return s.isNull(this._state) && (this._state = parseInt(n.get(this._getStateCode()) || 0),
            AMOCRM.is_more_1500 && (this._state = 1),
            AMOCRM.notSmall || 1 !== this._state || (this.setState(0, 0),
            this._state = 0)),
            this._state
        },
        _isCard: function() {
            var e = AMOCRM.getWidgetsArea() || "";
            return e.indexOf("_card") > 0 && s.indexOf(r, e.replace("_card", "")) >= 0
        },
        destroy: function() {
            this.setState(null),
            this.undelegateEvents(),
            this._$document.off("openWidgetPanel").off(this.ns),
            AMOCRM.data.is_card || this._checkRightColumnWidgets(!0),
            this.$el.hide()
        },
        init: function() {
            var e = s.extend({}, this.events);
            "widgets_block" !== this.$el.attr("id") && (this.setElement(i("#widgets_block")),
            this.$card = i("#card_holder")),
            this._isCard() ? (s.extend(e, this._events_card),
            this._$document.on("widgets:card-maximized", s.bind(this.onWindowWidgetsResize, this)).on("widgets:card-minimized", s.bind(this.onWindowWidgetsResize, this)),
            this.$el.hasClass(this._class("active")) && setTimeout(s.bind(this.toggleWidget, this, this.$(".card-widgets__widget:first"), !0), 500)) : this.$el.removeClass(this._class("active")),
            this.delegateEvents(e),
            this._$document.on("widgets_body:change_state" + this.ns, s.bind(function(e, t) {
                this.toggleWidget(t.$el, t.state)
            }, this)).on("openWidgetPanel", s.bind(this.openPanel, this, void 0)),
            this.toggleWidget(this.$(".card-widgets__widget"), AMOCRM.notSmall),
            this.checkBlockAction()
        },
        onWidgetsBlockTopClick: function(e) {
            !AMOCRM.is_more_1500 && this._isCard() && (this.getCurrentState() ? this.closePanel() : this.openPanel(),
            e.stopPropagation())
        },
        onWidgetsElementClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(".card-widgets__widget");
            this.$card.hasClass("js-widgets-active") || (s.length > 0 ? (this.openPanel(t.closest(".card-widgets__widget")),
            e.stopPropagation()) : this.openPanel())
        },
        onWindowWidgetsResize: function() {
            AMOCRM.notSmall ? (this.hideOverlay(),
            this.openPanel()) : (this.resetStates(),
            this.closePanel())
        },
        onWidgetCaptionClick: function(e) {
            var t, s;
            this.$el.hasClass(this._class("active")) && (t = i(e.target).closest(".card-widgets__widget"),
            s = "open",
            t.find(".card-widgets__widget__body").hasClass("js-body-hide") && (s = "close"),
            this[s + "Widget"](t),
            e.stopPropagation())
        },
        checkBlockAction: function() {
            this._checkRightColumnWidgets(),
            this._isCard() ? (1 === this.getCurrentState() || AMOCRM.is_more_1500 ? this.$card.add(i("#card_fake")).add(this.$el).addClass(this._class("active")) : this.$card.add(i("#card_fake")).add(this.$el).removeClass(this._class("active")),
            this.$el.show(),
            this._findElem("top").show(),
            this._findElem("body").removeClass("in_list")) : (this.hideOverlay(),
            this.$el.hide())
        },
        _checkRightColumnWidgets: function(e) {
            var t = this.getCardWidgetsCount();
            AMOCRM.first_load || (parseInt(t) > 0 || e ? (this.$card.removeClass("js-widgets-hidden"),
            this.toggleCap(!1)) : (this.$card.addClass("js-widgets-hidden"),
            this.toggleCap(!0)))
        },
        getCardWidgetsCount: function(e) {
            var t, i, s = AMOCRM.widgets.system.displayed_count_by_area || {};
            return e = e || AMOCRM.getBaseEntity(),
            t = s[e + "_card"] || 0,
            i = s.everywhere || 0,
            t + i
        },
        toggleCap: function(e) {
            e ? (this.$el.removeClass("_with-scroll"),
            this._findElem("cap").removeClass("_with-widgets")) : (this.$el.addClass("_with-scroll"),
            this._findElem("cap").addClass("_with-widgets"))
        },
        toggleWidget: function(e, t) {
            t ? this.openWidget(e) : this.closeWidget(e)
        },
        openWidget: function(e) {
            e.find(".card-widgets__widget__caption__arrow").addClass("widgets__widget__caption__arrow_top").removeClass("widgets__widget__caption__arrow_bottom"),
            e.find(".card-widgets__widget__body").show().addClass("js-body-hide")
        },
        closeWidget: function(e) {
            e.find(".card-widgets__widget__caption__arrow").removeClass("widgets__widget__caption__arrow_top").addClass("widgets__widget__caption__arrow_bottom"),
            e.find(".card-widgets__widget__body").hide().removeClass("js-body-hide")
        },
        openPanel: function(e) {
            var t = this._findElem("caption");
            this.$card.addClass([this._class("card"), this._class("active")].join(" ")),
            this.$el.addClass(this._class("active")),
            t.find(".card-widgets__widget__caption__arrow, .card-widgets__widget__caption__logo").show(),
            e || (e = this.$el.find(".card-widgets__widget:first")),
            this.openWidget(e),
            t.find(".card-widgets__widget__caption__logo_min").hide(),
            this.setState(1, AMOCRM.notSmall ? 1 : 0),
            this.overlayStateTrigger(),
            this._$document.trigger("toggleWidgetPanel")
        },
        closePanel: function() {
            var e = this._findElem("caption");
            this.$el.removeClass([this._class("zindex"), this._class("active")].join(" ")),
            this.$card.removeClass(this._class("active")),
            e.find(".card-widgets__widget__caption__arrow, .card-widgets__widget__caption__logo").hide(),
            this.toggleWidget(this.$el.find(".card-widgets__widget"), !1),
            e.find(".card-widgets__widget__caption__logo_min").show(),
            this.setState(0, 0),
            this.overlayStateTrigger(),
            this._$document.trigger("toggleWidgetPanel")
        },
        overlayStateTrigger: function() {
            var e = this.getCurrentState();
            AMOCRM.notSmall || (e ? (this.$el.addClass(this._class("zindex")),
            this.showOverlay()) : (this.$el.removeClass(this._class("zindex")),
            this.hideOverlay()))
        },
        showOverlay: function() {
            var e = i("#card_widgets_overlay");
            e.length || (e = i('<div class="default-overlay" id="card_widgets_overlay" style="z-index:101"></div>'),
            this._$body.append(e)),
            this._$document.one("click" + this.ns, "#card_widgets_overlay", s.bind(this.closePanel, this)),
            e.trigger("overlay:show", {
                instantly: !0
            })
        },
        hideOverlay: function() {
            i("#card_widgets_overlay").trigger("overlay:hide", {
                instantly: !0
            })
        }
    }, {
        el: i("#widgets_block")
    }))
}),
define("lib/pages/card", ["require", "underscore", "jquery", "twig", "pubsub", "lib/core/view", "lib/common/urlparams", "lib/common/fn", "lib/common/browserdetect", "lib/core/users", "lib/interface/card/card", "lib/interface/card/customers_card", "lib/interface/unsorted/unsorted_card", "lib/components/base/scroll_saver", "lib/core/updater", "lib/components/widgets/block_actions"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("twig"), o = e("pubsub"), r = e("lib/core/view"), a = e("lib/common/urlparams"), l = e("lib/common/fn"), c = e("lib/common/browserdetect"), d = e("lib/core/users"), u = e("lib/interface/card/card"), h = e("lib/interface/card/customers_card"), _ = e("lib/interface/unsorted/unsorted_card"), p = e("lib/components/base/scroll_saver"), m = e("lib/core/updater"), f = e("lib/components/widgets/block_actions"), g = l.delay(), b = function(e) {
        return i.isFunction(document.body.contains) ? document.body.contains(e[0]) : !!e.closest("body").length
    };
    return t = r.extend({
        animationEnd: null,
        animationBackEnd: null,
        className: "card-holder",
        overlay_class_name: "card-page-change-overlay",
        initialize: function(e) {
            var t = "";
            r.prototype.initialize.apply(this, arguments),
            this.pipeline_id = parseInt(a.getQueryParam("pipeline_id")),
            this.setElement(s("#card_holder")),
            this.$page_holder = s("#page_holder"),
            this.$widgets_block = s("#widgets_block"),
            AMOCRM.first_load || 0 !== f.getCardWidgetsCount(AMOCRM.getBaseEntity()) || (t = "js-widgets-hidden"),
            this.$el.addClass([this.className, t].join(" ")),
            this.setNS(),
            this._initComponents(),
            this.id = e.route_args && e.route_args[0] || 0,
            this.entity = AMOCRM.getBaseEntity(),
            this.options = e,
            this.user_rights = i.extend((AMOCRM.constant("user_rights") || {})[this.entity], {
                is_free_user: AMOCRM.constant("user_rights").is_free_user
            }),
            this.is_customers_card = "customers" === this.entity,
            this.is_mail_card = "mail" === this.entity,
            this.has_transitions = Modernizr.csstransitions && "Explorer" !== c.browser,
            this.$animate_card = s("<div></div>"),
            this.animated = !1,
            this.is_from_server = "N" === this.$el.attr("data-ajax"),
            this.is_from_server && this.$el.removeAttr("data-ajax"),
            this.animationEnd = s.Deferred(),
            this.animationBackEnd = s.Deferred(),
            this.serverLoadCheck()
        },
        destroy: function() {
            this.destroyCard(),
            AMOCRM.data.is_card || (this.$animate_card.remove(),
            this.$el.removeAttr("data-card-active"),
            this.el.style.display = "none",
            this.$el.empty()),
            r.prototype.destroy.call(this),
            AMOCRM.data.card_page = !1
        },
        destroyCard: function() {
            AMOCRM.data.current_card && AMOCRM.data.current_card.destroy()
        },
        serverLoadCheck: function() {
            this.is_from_server ? this.init() : (this.animateInit(),
            this.load())
        },
        initStatusSelect: function() {
            this.pipeline_id && this.from_add && this._$document.trigger("control:select:init", [{
                pipeline_id: this.pipeline_id
            }])
        },
        makeFakeCard: function() {
            var e = s("#card_fake")
              , t = AMOCRM.getBaseEntity()
              , i = t
              , o = d.current("settings").layout_width[AMOCRM.getBaseEntity()].width;
            return e.length || (e = s('<div class="card-holder card-holder_fake" id="card_fake" style="display: none"><div class="card-holder__overlay" id="card_overlay"></div></div>'),
            1 === f.getCurrentState() && e.addClass("js-widgets-active"),
            "companies" === i && (i = "contacts"),
            e.prepend(n({
                ref: "/tmpl/cards/plug.twig"
            }).render({
                entity_type: t,
                is_add: !this.id,
                is_plug: !0,
                back_btn_hidden: !0,
                can_add: !1,
                grant_edit: !1,
                main: {
                    tags: [],
                    name: ""
                },
                lang: {
                    placeholder_name: ""
                },
                layout_width: o
            }))),
            e
        },
        animateInit: function() {
            var e = function() {
                this.animated = !0,
                this.render(),
                this._$document.triggerHandler("card:animated"),
                this.animationEnd.resolve(),
                m.check()
            };
            return this.$animate_card = this.makeFakeCard(),
            this.el.getAttribute("data-card-active") ? ("yes" !== a.getQueryParam("after_add") && this._showOverlay(),
            this.fakeCardHide(),
            this._$document.scrollTop(0),
            void e.call(this)) : (f.getCardWidgetsCount() > 0 && this.$animate_card.addClass("js-has-widgets"),
            this._$document.triggerHandler("controls:hide"),
            this._$document.triggerHandler("page:change:start"),
            this.has_transitions ? this.$animate_card.one(AMOCRM.animation_event, i.bind(function() {
                this.animation_back || e.call(this)
            }, this)) : e.call(this),
            document.body.appendChild(this.$animate_card.get(0)),
            this.$animate_card[0].classList.add("card-holder_animate"),
            void (this.$animate_card[0].style.display = ""))
        },
        load: function() {
            return s.ajax({
                page_xhr: !0,
                page_is_card: !0,
                url: "/ajax/" + this.entity + "/detail/" + (this.id ? this.id : "add") + "?" + a.getQueryString(),
                data: {}
            }).done(i.bind(function(e) {
                this.html = e,
                this.render(),
                this._$document.trigger("card:load:success")
            }, this))
        },
        fakeCardHide: function() {
            this.$animate_card.hide()
        },
        render: function() {
            this.html && this.animated && (this.$el.show().html(this.html),
            this.$el.attr("data-card-active") || (this.fakeCardHide(),
            this.$page_holder.hide()),
            this.init(),
            this._$document.trigger("page:change:stop"))
        },
        getCardHandler: function() {
            var e = u;
            switch (AMOCRM.getBaseEntity()) {
            case "customers":
                e = h;
                break;
            case "unsorted":
                e = _;
                break;
            default:
                e = u
            }
            return e
        },
        init: function(e) {
            var t = this.getCardHandler();
            this.$el.attr("data-card-active", "y"),
            AMOCRM.data.current_card = new t(this.id,i.extend(e || {}, {
                pipeline_id: this.pipeline_id,
                after_add: a.getQueryParam("after_add") ? !0 : !1,
                notes: this.notes,
                onDecline: this.options.onDecline,
                $container: this.options.$container
            })),
            this._$document.triggerHandler("widgets:load"),
            this._$document.scrollTop(0),
            this.pipeline_id && this.initStatusSelect()
        },
        needReload: function() {
            return AMOCRM.data.current_card && AMOCRM.data.current_card.list_reload || AMOCRM.data.current_view && AMOCRM.data.current_view.need_reload
        },
        cardBack: function(e) {
            var t = function(e) {
                i.isFunction(e) && e(this.needReload()),
                this.el.setAttribute("data-card-active", ""),
                this.destroy(),
                AMOCRM.data.card_page = !1,
                this._$document.triggerHandler("widgets:load"),
                p.restorePosition()
            }
              , s = document.getElementById("search_input")
              , n = a.getQueryParam("term") || "";
            this.animated = !1,
            this.animation_back = !0,
            s && (s.value = n),
            this.$page_holder[0].style.display = "",
            this.el.style.display = "none",
            this._$document.triggerHandler("page:change:stop"),
            this.has_transitions && b(this.$animate_card) ? (this.$animate_card.one(AMOCRM.animation_event, i.bind(function() {
                t.call(this, e),
                this.$animate_card.remove()
            }, this)),
            "Safari" === c.browser && g(i.bind(function() {
                AMOCRM.data.current_card && t.call(this, e)
            }, this), 500)) : t.call(this, e),
            this.$animate_card[0].classList.add("card-holder_backwards"),
            this.$animate_card[0].style.display = "",
            this.$widgets_block[0].style.display = "none",
            AMOCRM.setTitle(AMOCRM.lang[AMOCRM.getBaseEntity() + "_head_title"]),
            this.animationBackEnd.resolve()
        },
        _showOverlay: function() {
            var e = s('<div class="default-overlay ' + this.overlay_class_name + '" id="page_change_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>');
            this.$el.append(e),
            o.publish("overlay:show", {
                el: e,
                params: {
                    skip_fix: !0
                }
            })
        }
    })
}),
define("lib/interface/notes/constants", ["require"], function(e) {
    "use strict";
    return {
        LS_LAST_TYPE: "feed_last_used_type"
    }
}),
define("lib/interface/notes/mixins/sorting", ["require", "underscore"], function(e) {
    "use strict";
    var t = require("underscore")
      , i = t.invert(AMOCRM.element_types)
      , s = {
        leads: AMOCRM.note_types.lead_created,
        contacts: AMOCRM.note_types.contact_created,
        companies: AMOCRM.note_types.company_created,
        customers: AMOCRM.note_types.customer_created
    }
      , n = function(e) {
        var t = AMOCRM.system.format.date;
        return moment(e, t.date + " " + t.time)
    }
      , o = {};
    return o.mergeSort = function(e, t, i) {
        var s, n, r;
        return e.length < 2 ? e : (s = Math.floor(e.length / 2),
        n = o.mergeSort(e.slice(0, s), t, i),
        r = o.mergeSort(e.slice(s), t, i),
        o.merge(n, r, t, i))
    }
    ,
    o.merge = function(e, t, i, s) {
        for (var n = []; e.length > 0 && t.length > 0; )
            n.push(i.call(s || {}, t[0], e[0]) ? t.shift() : e.shift());
        return n.concat(e.length ? e : t)
    }
    ,
    t.mixin({
        _sortNotes: function(e, t, i) {
            return o.mergeSort(e, t, i)
        }
    }),
    {
        _getItemDate: function(e) {
            var i = e.date_create;
            return !i && e.created_at ? e.created_at : ("tasks" === e.object_type.code && (i = e.status ? e.date_modify : e.complete_till),
            t.isString(i) && (i = n(i).unix()),
            i)
        },
        _sortAlgo: function(e, n) {
            var o = t.find(e, function(e) {
                return "notes" === e.view.model.get("object_type").code && e.view.model.get("type") === s[i[n]]
            }, this)
              , r = o && o.date;
            return t.chain(e)._sortNotes(function(e, t) {
                return t.date > e.date
            })._sortNotes(function(e, i) {
                var o;
                return n && r && "notes" === e.view.model.get("object_type").code && e.view.model.get("element_type") !== n && t.indexOf(t.values(s), e.view.model.get("type")) + 1 && (o = (e.date - r) / 60,
                Math.abs(o) <= 3) ? !0 : !1
            }, this)._sortNotes(function(e, t) {
                return n ? "notes" === e.view.model.get("object_type").code && e.view.model.get("type") === s[i[n]] : !1
            }, this)._sortNotes(function(e, t) {
                return e.view.model.get("pinned") && !t.view.model.get("pinned")
            }).value()
        }
    }
}),
define("lib/interface/notes/mixins/equal_mails", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = 300;
    return {
        _pickEqualMails: function(e, s, n, o) {
            return n || (e = o),
            s.type === AMOCRM.note_types.mail_message && t.where(e, {
                id: s.id
            }).length && (e = t.filter(e, function(e) {
                return e.type !== AMOCRM.note_types.mail_message ? !0 : s.id === e.id || !t.isEqual(t.pick(s.data.params, "subject", "content_summary", "from", "to"), t.pick(e.data.params, "subject", "content_summary", "from", "to")) || Math.abs(s.date_create - e.date_create) > i
            })),
            e
        }
    }
}),
define("lib/interface/notes/mixins/groupable", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = t.invert(t.extend({
        sms_in: 102,
        sms_out: 103
    }, AMOCRM.note_types))
      , s = ["mail_message_chain_in", "mail_message_chain_out", "call_chain_in", "call_chain_out"];
    return {
        GROUP_TYPES: {
            amojo: "amojo",
            amojo_ex: "amojo_ex",
            chat: "chat",
            main_user_changed: "main_user_changed",
            sms_in: "sms",
            sms_out: "sms",
            call: "call",
            targeting_in: "dp",
            targeting_out: "dp",
            site_visit: "dp",
            lead_auto_created: "dp",
            lead_created: "creating",
            contact_created: "creating",
            company_created: "creating",
            customer_created: "creating",
            mail_message_chain_in: "mail_message_chain_in",
            mail_message_chain_out: "mail_message_chain_out",
            call_chain_in: "call_chain_in",
            call_chain_out: "call_chain_out"
        },
        _groupingChecker: function(e) {
            return this.GROUP_TYPES[this._getGroupedNoteType(e)] && !e._is_joined_skip_this ? !0 : !1
        },
        _getGroupedNoteType: function(e) {
            var s = this._getExtraData().chats || {};
            switch (!0) {
            case !t.isUndefined(e.chat_id) && s[e.chat_id] && s[e.chat_id].entity_type === AMOCRM.element_types.contacts:
                return "amojo_ex";
            case !t.isUndefined(e.chat_id):
                return "amojo";
            case e.type === AMOCRM.note_types.mail_message:
                return e.data.params.sent || e.data.params.manager ? "mail_message_chain_out" : "mail_message_chain_in";
            case e.type === AMOCRM.note_types.call_in:
                return "call_chain_in";
            case e.type === AMOCRM.note_types.call_out:
                return "call_chain_out";
            default:
                return e.object_type && "notes" === e.object_type.code && i[e.type]
            }
        },
        _getGroupedViewType: function(e) {
            switch (!0) {
            case "amojo_ex" === this._getGroupedNoteType(e[0]):
                return "grouped_amojo_ex";
            case t.indexOf(s, this._getGroupedNoteType(e[0])) > -1:
                return "grouped_complex";
            default:
                return "grouped"
            }
        },
        _pickGrouped: function(e, t, i, s) {
            var n = this._groupingChecker(t)
              , o = i + 1 === s.length;
            return i || (this._all_grouped = [],
            this._last_grouped = [],
            e = s),
            n ? this._last_grouped.length && this.GROUP_TYPES[this._getGroupedNoteType(this._last_grouped[0])] !== this.GROUP_TYPES[this._getGroupedNoteType(t)] ? (this._all_grouped.push(this._last_grouped),
            this._last_grouped = [t]) : this._last_grouped.push(t) : this._last_grouped.length && (this._all_grouped.push(this._last_grouped),
            this._last_grouped = []),
            o && (this._last_grouped.length && this._all_grouped.push(this._last_grouped),
            e = this._addGroupped(e),
            this._last_grouped = []),
            e
        },
        _addGroupped: function(e) {
            var i, s, n, o, r, a = !1;
            return t.each(this._all_grouped, function(l, c) {
                if (s = c === this._all_grouped.length - 1,
                r = 0,
                l.length > 1) {
                    switch (i = this._getGroupedNoteType(l[0]),
                    !0) {
                    case "amojo" === this.GROUP_TYPES[i]:
                        a = !0,
                        o = 20,
                        r = s ? 20 : 0;
                        break;
                    case "amojo_ex" === this.GROUP_TYPES[i]:
                        a = !0,
                        o = 4,
                        n = t.chain(e).filter(function(e) {
                            return !e.object_type || "tasks" !== e.object_type.code || e.status
                        }).difference(l).max(function(e) {
                            return e.created_at || e.date_create
                        }).reduce(function(e, t, i) {
                            return ("date_create" === i || "created_at" === i) && (e = t),
                            e
                        }, 0).value(),
                        s = s && n <= t.last(l).created_at,
                        r = s ? 4 : -2;
                        break;
                    default:
                        a = !1,
                        o = 2
                    }
                    l.length >= o + r && (a && s && (l = l.splice(0, l.length - o)),
                    e = t.difference(e, l),
                    this.renderView(l, this._getGroupedViewType(l)))
                }
            }, this),
            e
        },
        _onUngroup: function(e) {
            return this._views_now = [],
            this._onModelRemove(e[0], {
                silent: !0
            }),
            t.each(e, function(e) {
                this.renderView(e.toJSON())
            }, this),
            this.renderViews()
        }
    }
}),
define("lib/interface/notes/mixins/joinable", ["require", "underscore", "lib/interface/notes/templates"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/templates")
      , s = [AMOCRM.note_types.transaction]
      , n = function(e) {
        switch (e.type) {
        case AMOCRM.note_types.mail_message:
            return e.data.params.manager;
        case AMOCRM.note_types.call_out:
            return !0
        }
        return !1
    };
    return {
        JOIN_TYPES: [{
            element_types: t.values(AMOCRM.element_types),
            types: {
                task: 1,
                mail_message: 1 / 0,
                call_in_out: 1 / 0
            },
            min_count: 2,
            main_type: "task",
            comparator: function(e, t) {
                var i = e
                  , s = t;
                return "tasks" !== (i.object_type || {}).code && (s = e,
                i = t),
                i.status && this._defaultTimeComparator(s.date_create, i.date_modify) && n(s)
            }
        }, {
            element_types: t.values(AMOCRM.element_types),
            types: {
                note: 1,
                attachment: 1 / 0
            },
            main_type: "note",
            comparator: function(e, t) {
                return parseInt(e.date_create) === parseInt(t.date_create)
            }
        }, {
            element_types: t.values(AMOCRM.element_types),
            types: {
                transaction: 1 / 0
            },
            main_type: "transaction"
        }],
        _join: function(e, t) {
            var s = i._get(t.type, (t.object_type || {}).code);
            return e.items[s] || (e.items[s] = []),
            e.items[s].push(t),
            e
        },
        _defaultTimeComparator: function(e, t) {
            var i = (e - t) / 60;
            return Math.abs(i) <= 5
        },
        _canJoin: function(e, t, s) {
            var n = !1
              , o = i._get(s.type, (s.object_type || {}).code);
            return s._is_joined_skip_this ? !1 : (e.types[o] && (!e.items[o] || e.items[o].length < e.types[o]) && (n = !0),
            n && (n = e.comparator ? e.comparator.call(this, t, s) : this._defaultTimeComparator(t.date_create, s.date_create)),
            n)
        },
        _sortJoined: function(e) {
            var i;
            return i = e.main_type ? (e.items[e.main_type] || []).concat(t.values(t.omit(e.items, e.main_type))) : t.values(e.items),
            t.flatten(i)
        },
        _replaceJoinedMainNote: function(e, i) {
            return t.extend({
                id: e.id,
                type: e.type,
                _is_joined_skip_this: i
            }, e)
        },
        _pickJoined: function(e, n, o, r) {
            var a, l, c, d = {
                items: {},
                types: {},
                main_type: ""
            }, u = o, h = -1, _ = t.uniqueId("skip_id"), p = i._get(n.type, (n.object_type || {}).code);
            return o || (e = r),
            l = t.find(this.JOIN_TYPES, function(e) {
                return -1 !== t.indexOf(e.element_types, this.notes.element_type) && e.types[p] && e.main_type === p
            }, this),
            l && (d.types = l.types,
            d.main_type = l.main_type || "",
            d.comparator = l.comparator,
            d.min_count = l.min_count),
            t.keys(d.types).length && t.indexOf(e, n) + 1 && (d = this._join(d, n),
            a = n.type,
            e = t.reduce(e, function(e, i, o) {
                var l = !0;
                return i === n ? (e.push(this._replaceJoinedMainNote(i, _)),
                e) : (c = this._canJoin(d, n, i),
                i.type != a && r.indexOf(i) >= u && (h = o),
                h > -1 && o > h && t.contains(s, a) && (l = !1),
                c && l ? (d = this._join(d, i),
                e.push({})) : e.push(i),
                e)
            }, [], this),
            d && (!d.min_count || t.flatten(t.values(d.items)).length >= d.min_count) && (!d.main_type || d.main_type && 1 !== d.types[d.main_type] || d.main_type && d.items[d.main_type]) ? this.renderView(this._sortJoined(d), "joined") : (d.items = t.flatten(t.values(d.items)),
            e = t.reduce(e, function(e, i) {
                return i._is_joined_skip_this === _ && (i = t.find(d.items, function(e) {
                    return e.id === i.id
                })),
                e.push(i),
                e
            }, [])),
            e = t.filter(e, function(e) {
                return !t.isEmpty(e)
            })),
            e
        }
    }
}),
define("lib/interface/notes/mixins/timeline", ["require", "underscore", "vendor/moment/langs"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = moment().format(moment().lang().calendar("today"))
      , s = moment().format(moment().lang().calendar("yesterday"))
      , n = "js-notes-timeline-point";
    return e("vendor/moment/langs"),
    {
        _timelineGroupBy: function(e, t, n, o) {
            var r, a = Date.now() / 1e3, l = (a - n.date) / 86400, c = moment(n.date, "X");
            switch (!0) {
            case c.isSame(e, "day"):
                return i;
            case c.isSame(t, "day"):
                return s;
            case 28 >= l:
                return moment(n.date, "X").format(AMOCRM.system.format.date.date);
            default:
                return r = moment(n.date, "X").format("MMMM"),
                c.isSame(moment(), "year") || (r += ", " + c.format("YYYY")),
                r
            }
        },
        _stopTimeline: function() {
            this.$("." + n).remove()
        },
        _startTimeline: function() {
            var e, i = moment().startOf("day"), s = moment().subtract(1, "days").startOf("day");
            t.chain(this.views).filter(function(e) {
                return e.view.model.get("visible") && !this._isFutureTask(e.view.model)
            }, this).groupBy(t.bind(this._timelineGroupBy, this, i, s)).each(function(t, i) {
                t[0].view.el.parentNode && (e = $('<div class="note-time-label__wrapper ' + n + '" data-point="' + i + '"><div class="note-time-label">' + i + "</div></div>"),
                t[0].view.el.parentNode.insertBefore(e[0], t[0].view.el))
            })
        },
        _updateTimeline: function() {
            this._stopTimeline(),
            this._startTimeline()
        }
    }
}),
define("lib/interface/notes/views/add/first_task", ["require", "underscore", "lib/interface/notes/views/task", "lib/interface/notes/views/add/task"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/task")
      , s = e("lib/interface/notes/views/add/task");
    return s.extend({
        cancel: t.noop,
        events: t.extend({}, s.prototype.events || {}, {
            "click .card-task__first-close": "onClickClose"
        }),
        _getRenderParams: function() {
            return t.extend(i.prototype._getRenderParams.apply(this, arguments), {
                is_first_task: !0
            })
        },
        _getTemplate: function(e) {
            return "/tmpl/notes/types/first_task.twig"
        },
        _render: function() {
            i.prototype._render.apply(this, arguments),
            this.$el.addClass(this.className + "_first-task")
        },
        destroy: function() {
            i.prototype.cancel.apply(this, arguments),
            s.prototype.destroy.apply(this, arguments),
            this.remove()
        },
        onClickClose: function(e) {
            this.options.onClose()
        }
    })
}),
define("lib/interface/notes/views/add/first_task_lite", ["require", "lib/core/view"], function(e) {
    "use strict";
    var t = e("lib/core/view");
    return t.extend({
        className: "feed-first-task-lite",
        events: {
            click: "onClickToOpenTaskCompose"
        },
        initialize: function(e) {
            this.options = e || {},
            t.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            t.prototype.destroy.call(this, !0)
        },
        render: function() {
            return this.$el.html('<div class="feed-first-task-lite__icon"><svg class="svg-icon svg-tasks--clock-dims"><use xlink:href="#tasks--clock"></use></svg></div><div class="feed-first-task-lite__inner">' + AMOCRM.lang.tasks_first_text + "</div>"),
            this
        },
        onClickToOpenTaskCompose: function(e) {
            e.stopPropagation(),
            this.options.notes.trigger("notes:compose:switch", "task")
        }
    })
}),
define("lib/interface/notes/mixins/first_task", ["require", "underscore", "lib/interface/notes/views/add/first_task", "lib/interface/notes/views/add/first_task_lite"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/add/first_task")
      , s = e("lib/interface/notes/views/add/first_task_lite");
    return {
        _checkFirstTask: function(e) {
            var n;
            e = e || {},
            this._first_task_active && (n = this.notes.find(function(e) {
                return "tasks" === e.get("object_type").code && !e.get("status")
            }, this),
            n ? this._destroyFirstTask() : this._empty_task || (this.notes.element_id ? (this._empty_task = this._addComponent(s, {
                notes: this.notes
            }),
            this._elem("filter_and_chat_users").children().prepend(this._empty_task.render().el)) : (this._empty_task = this._addComponent(i, {
                element_id: this.notes.element_id,
                element_type: this.notes.element_type,
                getExtraData: t.bind(this._getExtraData, this),
                getResponsibleId: t.bind(this.params.getResponsibleId, this),
                onEdit: t.bind(this._setEdit, this),
                onAdd: t.bind(this._addNotes, this),
                onClose: t.bind(this.setFirstTaskState, this, !1)
            }),
            this._empty_task.model.set("complete_till", moment().tz(AMOCRM.system.timezone).hour(23).minute(59).add(1, "day").unix()),
            this._elem("notes").before(this._empty_task.el),
            this._empty_task.enterEditMode(),
            this._updateStickyTasks())))
        },
        _destroyFirstTask: function() {
            this._empty_task && (this._destroyComponent(this._empty_task),
            this._empty_task = null)
        },
        setFirstTaskState: function(e) {
            this._first_task_active = Boolean(e),
            this._first_task_active ? this._checkFirstTask() : this._destroyFirstTask()
        }
    }
}),
define("lib/interface/notes/mixins/customers_green_bar", ["require", "underscore", "twig", "lib/core/users", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/users")
      , n = e("lib/common/fn");
    return {
        _renderCustomersGreenBar: function() {
            var e, o, r, a, l, c = null, d = null, u = {};
            1 === this._page && parseInt(this.params.element_type) === AMOCRM.element_types.leads && (o = this.notes.where({
                type: AMOCRM.note_types.lead_status_changed
            }),
            r = this.notes.where({
                type: AMOCRM.note_types.customer_created
            }),
            o.length && (c = o[o.length - 1]),
            r.length && (d = r[r.length - 1]),
            r.length && c && 142 === parseInt(c.get("data").params.new_status) && (a = d.get("data").params.customer_id,
            l = this._getExtraData(d),
            u = {
                date: Math.max(d.get("date_create"), c.get("date_create")),
                responsible_user: s.get()[c.get("responsible_user")].title,
                status_name: AMOCRM.lang.pipelines_statuses_closed_won,
                customer: {
                    id: a,
                    name: n.has_keys(l, ["customers", a, "name"]) ? l.customers[a].name : ""
                }
            },
            i._preload(["/tmpl/notes/green_line.twig"], t.bind(function() {
                e = $(i({
                    ref: "/tmpl/notes/green_line.twig"
                }).render(u)),
                this.$green_line && this.$green_line.length ? this.$green_line.replaceWith(e) : this.$el.prepend(e),
                this.$green_line = e
            }, this))(),
            c.set("hide_in_feed", !0),
            d.set("hide_in_feed", !0)))
        },
        _onCustomersGreenLineOutside: function(e) {
            this.$green_line && this.$green_line.length && (e.style.top = parseInt(e.style.top) + this.$green_line.height() + "px")
        }
    }
}),
define("lib/interface/notes/mixins/stacking", ["require", "underscore", "lib/components/base/sticky_headers"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = 0
      , s = null
      , n = 0
      , o = e("lib/components/base/sticky_headers");
    return {
        _initStacking: function() {
            var e = this._findElem("notes_scroller");
            this.sticky_tasks = this._addComponent(o, {
                el: e,
                selector: [this._selector("fixable"), this._selector("fixable_future"), ".js-note-pinned"].join(","),
                disable_click: !0,
                top_offset: t.bind(this._getStickyTopOffset, this),
                filterElements: t.bind(this._onStickyHeadersFilter),
                getViewportHeight: t.bind(this._getStickyHeaderViewport, this),
                onOutside: t.bind(this._onStickyHeaderOutside, this),
                onUpdate: t.bind(this._onStickyScrollUpdate, this)
            }),
            this._$document.on("openWidgetPanel" + this.ns + " toggleWidgetPanel" + this.ns, t.bind(this._updateStickyTasks, this)),
            this.notes.on("notes:update-sticky", this._updateStickyTasks, this).on("notes:view-destroy", this._updateStackingOnViewDestroy, this)
        },
        _updateStackingOnViewDestroy: function(e) {
            (e.model.get("object_type") && "tasks" === e.model.get("object_type").code || e.model.get("pinned")) && this._updateStickyTasks()
        },
        _updateStickyTasks: function() {
            this.sticky_tasks && this.sticky_tasks.refresh()
        },
        _getStickyTopOffset: function(e, t) {
            return e.classList.contains(this._class("fixable_future")) ? 0 : 10 * t + 10
        },
        _getStickyHeaderViewport: function() {
            var e = this.$(".custom-scroll").get(0).offsetHeight
              , t = 42
              , i = 20;
            return e - t - i
        },
        _onStickyHeaderOutside: function(e, i) {
            var s = t.indexOf(i, e);
            this._onCustomersGreenLineOutside(e),
            e.classList.contains("outside-top") && (e.style.top = parseInt(e.style.top) + 10 * (s + 1) + "px")
        },
        _onStickyHeadersFilter: function(e) {
            var i = t.last(t.filter(e, function(e) {
                return e.querySelector(".card-task-expired")
            }), /^desktop:/.test(AMOCRM.environment) ? 1 : 2);
            return t.filter(e, function(e) {
                return e.querySelector(".card-task-expired") ? -1 !== t.indexOf(i, e) ? !0 : !1 : !0
            })
        },
        _getStickyMaxScrollTop: t.debounce(function() {
            var e = this._elem("notes_scroller")[0];
            return e.scrollHeight - e.offsetHeight
        }, 200, !0),
        _onStickyScrollUpdate: function(e, o) {
            var r = this._getStickyMaxScrollTop()
              , a = this._elem("filter_and_chat_users").get(0).offsetHeight - 20;
            this._onScroll(o.scroll_top, r),
            o.scroll_top >= r ? this.el.classList.remove("scrolled") : this.el.classList.add("scrolled"),
            i > o.scroll_top || o.scroll_top <= 0 ? (r - o.scroll_top > a && this.el.classList.add("scrolled-up"),
            n = o.scroll_top) : (o.scroll_top - n > 150 && this.el.classList.remove("scrolled-up"),
            s || (n = o.scroll_top,
            s = setTimeout(t.bind(function(e) {
                s = null
            }, this), 100))),
            i = o.scroll_top
        }
    }
}),
define("lib/interface/notes/views/add/mail", ["require", "underscore", "twig", "lib/interface/notes/views/add/note", "lib/components/mail/api_v2", "FileAPI", "lib/common/fn", "lib/interface/notes/collection"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/interface/notes/views/add/note")
      , n = e("lib/components/mail/api_v2")
      , o = e("FileAPI")
      , r = e("lib/common/fn")
      , a = e("lib/interface/notes/collection");
    return s.extend({
        className: "feed-compose__inner_mail",
        events: t.extend({}, s.prototype.events || {}, {
            "input .feed-compose__message-area": "checkForm",
            "input .js-compose-mail-subject_field-container input": "checkForm",
            "controls:change #mail-template": "onTemplateChange"
        }),
        _classes: function() {
            return t.extend({}, s.prototype._classes.apply(this) || {}, {
                to_container: "js-compose-mail-to_field-container",
                cc_container: "js-compose-mail-cc_field-container",
                subject_container: "js-compose-mail-subject_field-container",
                sender_container: "js-compose-mail-sender_field-container",
                content_type: "js-mail-content-type",
                templates_line: "js-compose-mail-templates",
                templates_container: "js-compose-mail-templates_field-container"
            })
        },
        _selectors: function() {
            return t.extend({}, s.prototype._selectors.apply(this) || {}, {
                subject_input: ".js-compose-mail-subject_field-container input",
                sender_input: ".js-compose-mail-sender_field-container input",
                textarea: ".feed-compose__message-area",
                file_input: "#mail-attach-filenew",
                mail_template: "#mail-template"
            })
        },
        _getTemplate: function() {
            return "/tmpl/notes/adding/mail.twig"
        },
        _getRenderParams: function() {
            return t.extend({
                emails: this.emails
            }, s.prototype._getRenderParams.apply(this, arguments))
        },
        getExistingText: function() {
            return this._form.model.get("template") ? "" : this._form.model.get("message")
        },
        setExistingText: function() {
            s.prototype.setExistingText.apply(this, arguments),
            this.$(".control--select--input").trigger("controls:change:visual")
        },
        onOpenCompose: function() {
            var e = this.options.$notes_scroller
              , t = e.find(".js-notes-filter-and-chat-users")
              , i = e[0].scrollHeight > e[0].offsetHeight;
            return t.length && i && t.css("margin-top", 115),
            this.$el.find("textarea").autosize(),
            this._renderTemplates(),
            this._actualizeRecipients(),
            this.emails.length ? void 0 : void this._$document.trigger("notes:compose:switch", ["note"])
        },
        onFoldCompose: function() {
            this.options.$notes_scroller.find(".js-notes-filter-and-chat-users").css("margin-top", "")
        },
        initialize: function(e) {
            this.options = e || {},
            this.recipient_types = ["to", "cc"],
            this.subviews = [],
            s.prototype.initialize.call(this, e),
            t.bindAll(this, "loadMailboxData", "loadComposeData", "_renderSender", "cleanView", "_preUploadFiles"),
            this.model.set("mailboxes", []),
            this._preUploadFilesDebounced = t.debounce(this._preUploadFiles, 400)
        },
        setParamsOnSwitch: function(e) {
            e && e.email && (this._findElem("to_container").find("input").val(e.email).trigger("controls:change:visual"),
            this._findElem("subject_input").val("").trigger("controls:change"))
        },
        destroy: function(e) {
            this.onFoldCompose(),
            this.stopListening(this.model),
            s.prototype.cancel.apply(this, arguments),
            s.prototype.destroy.call(this, e)
        },
        _render: function() {
            s.prototype._render.apply(this, arguments),
            this._actualizeRecipients(),
            this.listenTo(this.model, "change:subject", this.updateSubject),
            this.listenTo(this.model, "change:templates", this._renderTemplates),
            this.loadData().then(t.bind(this._renderSender, this)),
            this.$el.attr("class", "js-note feed-compose_mail")
        },
        edit: function() {
            s.prototype.edit.apply(this, arguments),
            this.listenTo(this._form.model, "has_reverted", this._renderSender)
        },
        save: function() {
            return new Promise(t.bind(function(e, i) {
                return "Y" === this._findElem("submit").attr("data-loading") ? i() : (this._findElem("submit").trigger("button:load:start", ["white"]),
                this._findElem("textarea").prop("disabled", !0),
                void this._preUploadFiles().then(t.bind(this.send, this), i).then(t.bind(function(e) {
                    this.showNotes(e.message_id).then(t.bind(function() {
                        this._findElem("textarea").prop("disabled", !1),
                        this._findElem("submit").trigger("button:load:stop"),
                        this.cleanView()
                    }, this))
                }, this)).then(e, i))
            }, this))
        },
        _getLinkedEmails: function() {
            return t.chain(this.options.getExtraData().elements).reduce(function(e, i) {
                return e = e.concat(t.map(i.email, function(e) {
                    return {
                        element_id: i.id,
                        id: e,
                        name: i.name,
                        option: t.escape(i.name + " <" + e + ">")
                    }
                }))
            }, []).value()
        },
        loadData: function() {
            return this.data_promise ? this.data_promise.promise() : (this.data_promise = $.when(this.loadComposeData(), this.loadTemplatesData(), this.loadMailboxData()),
            this.data_promise.promise())
        },
        loadTemplatesData: function() {
            return n.getTemplates().done(t.bind(function(e) {
                this.model.set("templates", t.map(e, function(e) {
                    return {
                        id: e.id,
                        option: e.name,
                        content_type: e.fields && e.fields.type || "text"
                    }
                }))
            }, this))
        },
        loadMailboxData: function() {
            var e = this;
            return n.getMailboxes("compose").done(function(i) {
                var s = [];
                t.each(i, function(e) {
                    s.push({
                        id: e.id,
                        option: e.email
                    })
                }),
                e.model.set("mailboxes", s)
            }).fail(t.bind(this._sendError, this))
        },
        loadComposeData: function(e) {
            return this.options.getMailComposeData(e).then(t.bind(this._loadComposeData, this))
        },
        _loadComposeData: function(e) {
            var t, i = $.Deferred();
            return 0 === e.length ? i.resolve() : (this.threads = e,
            t = e[0],
            this.model.set("subject", t.subject),
            i.resolve())
        },
        _renderSender: function() {
            var e = this.model.get("mailboxes")
              , t = "";
            e.length && (t = '<span class="feed-compose_mail__sender">' + e[0].option + '<input type="hidden" name="sender" value="' + e[0].id + '"></span>',
            e.length > 1 && (t = i({
                ref: "/tmpl/controls/select.twig"
            }).render({
                class_name: "feed-compose_mail__select",
                name: "sender",
                id: "mail-sender",
                items: e
            })),
            this._findElem("sender_container").html(t))
        },
        _renderTemplates: function() {
            var e = this.model.get("templates") || [];
            e.length && this._findElem("templates_line").removeClass("hidden").find(this._selector("templates_container")).html(i({
                ref: "/tmpl/controls/select.twig"
            }).render({
                class_name: "feed-compose_mail__select js-form-changes-skip",
                name: "template",
                id: "mail-template",
                items: [{
                    id: "",
                    option: "..."
                }].concat(e)
            }))
        },
        _actualizeRecipients: function() {
            var e, s = this._getLinkedEmails(), n = this._findElem("to_container"), o = n.find("input").val();
            s.length && !t.isEqual(t.pluck(s, "id"), t.pluck(this.emails, "id")) && (e = t.findIndex(this.emails, function(e) {
                return e.id === o
            }),
            n.html(s.length > 1 ? i({
                ref: "/tmpl/controls/select.twig"
            }).render({
                class_name: "feed-compose_mail__select",
                items: s,
                name: "to",
                selected: s[e > -1 ? e : 0].id
            }) : ['<input type="hidden" name="to" value="' + s[0].id + '">', s[0].option].join(""))),
            this.emails = s
        },
        onTemplateChange: function(e) {
            var i = $(e.currentTarget);
            return i.val() ? void n.getTemplate(i.val()).done(t.bind(function(e) {
                this._findElem("content_type").prop("checked", "html" === e.fields.type).trigger("controls:change"),
                this.$('[name="subject"]').val(e.fields.subject).trigger("change"),
                this._findElem("textarea").val(e.fields.content).trigger("input"),
                t.each(e.fields.attachments, function(e) {
                    this._renderAttach(e.name),
                    this._attachments[e.id] = e
                }, this)
            }, this)) : void this.cleanView()
        },
        cleanView: function() {
            this._findElem("mail_template").val("").trigger("controls:change:visual"),
            this._findElem("textarea").val("").trigger("change"),
            this._initAttachWrap(),
            this.loadComposeData(!0),
            this._setChanges(!1)
        },
        updateSubject: function(e, s) {
            this._findElem("subject_container").html(i({
                ref: "/tmpl/controls/suggest.twig"
            }).render({
                class_name: "feed-compose_mail__input-wrapper",
                input_class_name: "feed-compose_mail__input",
                name: "subject",
                value: (this.threads[0] || {}).subject,
                items: t.map(this.threads, function(e) {
                    return {
                        id: e.id,
                        value: t.escape(e.subject)
                    }
                })
            }))
        },
        checkForm: function() {
            var e, i, s = 0, n = this, o = !1;
            t.each(n.recipient_types, function(e) {
                s += n._findElem(e + "_container").find("input").val() ? 1 : 0
            }),
            s > 0 && (s = n._findElem("to_container").find("input").val() ? 1 : 0),
            e = this._findElem("subject_input").val().trim().length > 0,
            i = this._findElem("textarea").val().trim().length > 0,
            o = e && i && s > 0,
            this._highlightSave(o)
        },
        _sendError: function() {
            this.$el.addClass("animated shake"),
            this._findElem("textarea").prop("disabled", !1).focus(),
            t.delay(t.bind(function() {
                this.$el.removeClass("animated shake")
            }, this), 200)
        },
        _getEntityElement: function() {
            var e = t.find(this.options.getExtraData().elements, function(e) {
                var t = parseInt(e.element_type);
                return t === AMOCRM.element_types.leads || t === AMOCRM.element_types.customers || t === AMOCRM.element_types.contacts || t === AMOCRM.element_types.companies
            });
            return e && (e.type = r.convertElementType(e.element_type, "single")),
            e
        },
        _setChanges: t.noop,
        addAttach: function(e) {
            var i = t.reduce([e].concat(this._files_queue.add), function(e, t) {
                return e + t.size
            }, 0)
              , n = !1;
            return i > 20 * o.MB || 0 >= i ? void this._sendError() : (n = s.prototype.addAttach.apply(this, arguments),
            void (n && (this._renderAttach(e.name, {
                loading: !0
            }),
            this._preUploadFilesDebounced())))
        },
        _removeFileClick: function(e) {
            var i = $(e.currentTarget).closest(".js-note-attach-item")
              , n = t.findWhere(this._files_queue.add, {
                name: i.attr("data-id")
            });
            n || (n = t.findWhere(this._attachments, {
                name: i.attr("data-id")
            })),
            s.prototype._removeFileClick.apply(this, arguments),
            n && (this._attachments = t.reduce(this._attachments, function(e, t, i) {
                return (n.uuid && i !== n.uuid || n.id && t.id !== n.id) && (e[i] = t),
                e
            }, {}))
        },
        _initAttachWrap: function() {
            s.prototype._initAttachWrap.apply(this, arguments),
            this._preupload_queue = [],
            this._attachments = {}
        },
        _preUploadFiles: function() {
            return this._files_queue.add.length && this._preupload_queue.push(this._uploadFiles()),
            Promise.all(this._preupload_queue)
        },
        _uploadFiles: function(e) {
            var i = t.filter(this._files_queue.add, function(e) {
                return !e.uuid
            })
              , s = this._getEntityElement();
            if (s)
                return i.length ? new Promise(t.bind(function(e, s) {
                    n.getUploadSandbox().done(t.bind(function(o) {
                        n.uploadFiles(i, o).progress(t.bind(function(e, t, i) {
                            e || this._renderAttach(i.name)
                        }, this)).done(t.bind(function(s) {
                            t.extend(this._attachments, t.reduce(s, function(e, s) {
                                return s.key === !1 ? this._renderAttach((t.findWhere(i, {
                                    uuid: s.id
                                }) || {}).name, {
                                    failed: !0
                                }) : e[s.id] = s,
                                e
                            }, {}, this)),
                            e()
                        }, this)).fail(s)
                    }, this))
                }, this)) : void 0
        },
        send: function() {
            var e, i, s = this._getEntityElement(), o = {}, r = {
                "profile.name": AMOCRM.constant("user").name,
                "profile.phone": AMOCRM.constant("user").personal_mobile
            };
            return t.each(this.recipient_types, function(s) {
                e = this._findElem(s + "_container").find("input").val(),
                i = t.find(this.emails, function(t) {
                    return t.id === e
                }) || {},
                e && (e = {
                    email: e,
                    name: i.name || ""
                },
                t.isUndefined(i.element_id) || (e.id = i.element_id),
                o[s] = [e])
            }, this),
            n.sendMessageFromEntity({
                mailbox_id: this._findElem("sender_input").val().trim(),
                name: r["profile.name"]
            }, s.id, s.type, o, this._findElem("subject_input").val().trim(), this._findElem("textarea").val().trim(), this._findElem("content_type").is(":checked") ? "html" : "text", this._attachments, r).fail(t.bind(this._sendError, this))
        },
        showNotes: function(e) {
            var t, i = $.Deferred(), s = this._getEntityElement(), n = this;
            return s ? (t = new a([],{
                element_id: s.id,
                element_type: s.element_type
            }),
            t.fetch({
                page: 0,
                limit: 10
            }).done(function() {
                var s = t.chain().filter(function(t) {
                    var i;
                    return parseInt(t.get("type")) === AMOCRM.note_types.mail_message && t.has("data") ? (i = t.get("data"),
                    i && i.params.link_data && parseInt(i.params.link_data.message_id) === parseInt(e)) : !1
                }).map(function(e) {
                    return e.toJSON()
                }).value();
                n.options.onAdd(s),
                i.resolve()
            }).done(i.resolve).fail(i.reject),
            i.promise()) : (i.reject(),
            i.promise())
        }
    })
}),
define("lib/interface/card/controls/subscribers/view_model", ["require", "backbone"], function(e) {
    "use strict";
    var t = e("backbone");
    return t.Model.extend({
        collection_changes: {},
        defaults: {
            view_state: "short",
            count: 0,
            entity_id: null,
            entity_type: null
        }
    })
}),
define("lib/interface/card/controls/subscribers/short/self", ["require", "underscore", "rxjs", "twig", "lib/core/view", "lib/interface/card/controls/subscribers/network/service"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("rxjs")
      , s = AMOCRM.constant("user")
      , n = e("twig")
      , o = e("lib/core/view")
      , r = e("lib/interface/card/controls/subscribers/network/service");
    return o.extend({
        subscriptions: new i.CompositeDisposable,
        subscribe: function() {
            this.service.subscribeUser(s.id),
            this.subscriptions.add(this.service.save().subscribe(t.noop()))
        },
        unsubscribe: function() {
            this.service.unsubscribeUser(s.id),
            this.subscriptions.add(this.service.save().subscribe(t.noop()))
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            this.subscriptions = new i.CompositeDisposable,
            this.service = new r(this.options.entity_type,this.options.entity_id);
            var s = this.service.list$.map(this._mapToCurrentUserState, this).distinctUntilChanged()
              , n = i.Observable.fromEventPattern(function(e) {
                this.$el.on("click", ".js-subscribe", e)
            }
            .bind(this), function(e) {
                this.$el.off("click", ".js-subscribe", e)
            }
            .bind(this))
              , a = i.Observable.fromEventPattern(function(e) {
                this.$el.on("click", ".js-unsubscribe", e)
            }
            .bind(this), function(e) {
                this.$el.off("click", ".js-unsubscribe", e)
            }
            .bind(this))
              , l = n.withLatestFrom(this.service.loading$, function(e, t) {
                return {
                    event: e,
                    loading: t
                }
            }).filter(function(e) {
                return e.loading === !1
            })
              , c = a.withLatestFrom(this.service.loading$, function(e, t) {
                return {
                    event: e,
                    loading: t
                }
            }).filter(function(e) {
                return e.loading === !1
            });
            this.subscriptions.add(s.subscribe(t.bind(this.render, this))),
            this.subscriptions.add(l.subscribe(t.bind(this.subscribe, this))),
            this.subscriptions.add(c.subscribe(t.bind(this.unsubscribe, this)))
        },
        _mapToCurrentUserState: function(e) {
            var i = !1;
            return t.every(e.items, function(t) {
                return t.get("user_id") === s.id ? (i = "remove" !== e.action,
                !1) : !0
            }),
            i
        },
        render: function(e) {
            var t = n({
                ref: this.options.template
            }).render({
                selfSubscribed: e
            });
            return this.$el.html($(t)),
            this
        },
        destroy: function() {
            this.subscriptions.dispose()
        }
    })
}),
define("lib/interface/card/controls/subscribers/short/list", ["require", "underscore", "jquery", "rxjs", "backbone", "twig", "lib/core/view", "lib/interface/card/controls/subscribers/network/service", "lib/core/users"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("rxjs")
      , n = AMOCRM.constant("user")
      , o = e("backbone")
      , r = e("twig")
      , a = e("lib/core/view")
      , l = e("lib/interface/card/controls/subscribers/network/service")
      , c = e("lib/core/users")
      , d = o.Model.extend({
        idAttribute: "model_id"
    })
      , u = o.Collection.extend({
        Model: d
    });
    return a.extend({
        subscriptions: new s.CompositeDisposable,
        items: new u,
        events: {
            "click .js-subscriber-remove": "unsubscribe"
        },
        unsubscribe: function(e) {
            var s = i(e.target).parents(".js-subscriber-remove").data("id");
            this.service.unsubscribe(s),
            this.subscriptions.add(this.service.save().subscribe(t.noop()))
        },
        initialize: function(e) {
            this.options = e || {},
            a.prototype.initialize.apply(this, arguments),
            this.subscriptions = new s.CompositeDisposable,
            this.service = new l(this.options.entity_type,this.options.entity_id);
            var i = s.Observable.fromEvent(this.items, "add change remove reset").debounce(100)
              , n = this.service.list$.map(this._mapWithoutCurrentUser, this).combineLatest(c.fetch(), t.bind(this._mapToViewModel, this));
            this.subscriptions.add(i.subscribe(t.bind(this.render, this))),
            this.subscriptions.add(n.subscribe(t.bind(function(e) {
                "reset" === e.action ? this.items.reset(e.items) : t.each(e.items, function(t) {
                    "add" === e.action ? this.items.add(t) : this.items.remove(t)
                }, this)
            }, this))),
            this.render()
        },
        _mapToViewModel: function(e, i) {
            var s = [];
            return t.each(e.items, function(e) {
                var t = this._mapToViewItem(e, i);
                t && s.push(t)
            }, this),
            {
                action: e.action,
                items: s
            }
        },
        _mapToViewItem: function(e, t) {
            var i = parseInt(e.get("user_id")) || 0;
            if (i > 0) {
                var s = t.managers[i];
                if (s)
                    return new d({
                        type: "user",
                        model_id: e.id,
                        title: s.title
                    })
            }
            var n = parseInt(e.get("group_id"))
              , o = t.groups["group_" + n];
            return new d(o ? {
                type: "group",
                model_id: e.id,
                title: o
            } : {
                type: "unknown",
                model_id: e.id,
                title: o
            })
        },
        _mapWithoutCurrentUser: function(e) {
            var i = t.clone(e);
            return i.items = t.reject(i.items, function(e) {
                return e.get("user_id") === n.id
            }),
            i
        },
        render: function() {
            var e = r({
                ref: this.options.template
            }).render({
                subscribers: this.items.toJSON()
            });
            return this.$el.html(i(e)),
            this
        },
        destroy: function() {
            this.subscriptions.dispose()
        }
    })
}),
define("lib/interface/card/controls/subscribers/short/index", ["require", "underscore", "rxjs", "twig", "lib/core/view", "lib/interface/card/controls/subscribers/short/self", "lib/interface/card/controls/subscribers/short/list"], function(e) {
    "use strict";
    var t = (e("underscore"),
    e("rxjs"),
    AMOCRM.constant("user"),
    e("twig"))
      , i = e("lib/core/view")
      , s = e("lib/interface/card/controls/subscribers/short/self")
      , n = e("lib/interface/card/controls/subscribers/short/list");
    return i.extend({
        _selectors: function() {
            return {
                self_container: ".js-subscribe-short-self",
                list_container: ".js-subscribe-short-list"
            }
        },
        _classes: function() {
            return {
                loading: "subscribers--loading"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            i.prototype.initialize.apply(this, arguments),
            this.render(),
            this.addSubViews()
        },
        addSubViews: function() {
            this._addComponent(s, {
                el: this._elem("self_container"),
                entity_id: this.options.entity_id,
                entity_type: this.options.entity_type,
                template: this.options.template_self
            }),
            this._addComponent(n, {
                el: this._elem("list_container"),
                entity_id: this.options.entity_id,
                entity_type: this.options.entity_type,
                template: this.options.template_list
            })
        },
        toggleLoading: function(e) {
            e ? this._addClass("loading") : this._removeClass("loading")
        },
        render: function() {
            var e = t({
                ref: this.options.template
            }).render();
            return this.$el.html(e),
            this
        }
    })
}),
define("lib/interface/card/controls/subscribers/full/users_picker", ["require", "underscore", "lib/common/fn", "rxjs", "lib/interface/users_select", "lib/components/base/suggest_manager", "lib/core/users", "lib/interface/card/controls/subscribers/network/service"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = (e("lib/common/fn"),
    e("rxjs"))
      , s = e("lib/interface/users_select")
      , n = e("lib/components/base/suggest_manager")
      , o = AMOCRM.constant("user")
      , r = e("lib/core/users")
      , a = e("lib/interface/card/controls/subscribers/network/service");
    return s.extend({
        selectItem$: new i.Subject,
        removeItem$: new i.Subject,
        change$: new i.BehaviorSubject(!1),
        currentState: {},
        events: t.extend({}, s.prototype.events, {
            "click .multisuggest__suggest-item": "onItemChoose",
            "click .js-users-picker-controls-cancel": "close",
            "click :not(.users-picker-controls--disabled) .js-users-picker-controls-save": "save"
        }),
        _selectors: function() {
            return t.extend(s.prototype._selectors(), {
                controls: ".js-users-picker-controls",
                suggest: "js-multisuggest-suggest"
            })
        },
        _classes: function() {
            return t.extend(s.prototype._classes(), {
                item_selected: "users-picker-item--selected",
                controls_disabled: "users-picker-controls--disabled"
            })
        },
        initialize: function(e) {
            this.service = new a(e.entity_type,e.entity_id),
            this.subscriptions = new i.CompositeDisposable,
            this.initialState = {},
            this.currentState = {},
            this.listStream = this.service.list$.map(this._mapWithoutCurrentUser, this),
            e = t.extend(e, {
                no_absolute_positioning: !0,
                users_template: "/tmpl/cards/leads/controls/subscribers/users_picker_users.twig",
                $container: this.$el,
                class_name: ""
            }),
            n.prototype.initialize.apply(this, [e])
        },
        checkChanges: function() {
            var e = t.omit(t.clone(this.currentState), function(e) {
                return 0 === e
            });
            return !t.isEqual(this.initialState, e)
        },
        bindEvents: function() {
            s.prototype.bindEvents.apply(this, arguments);
            var e = this.selectItem$.map(function(e) {
                return this.currentState[e] || (this.currentState[e] = 0),
                this.currentState[e] = ++this.currentState[e] > 1 ? 1 : this.currentState[e],
                e
            }, this)
              , i = this.removeItem$.map(function(e) {
                return this.currentState[e] && (this.currentState[e] = 0),
                e
            }, this)
              , n = this.listStream.map(function(e) {
                this.initialState = {},
                t.each(e.items, function(e) {
                    var t = e.get("user_id") > 0 ? e.get("user_id") : "group_" + e.get("group_id");
                    this.initialState[t] = 1
                }, this),
                this.currentState = t.clone(this.initialState)
            }, this);
            this.subscriptions.add(n.merge(e).merge(i).debounce(100).subscribe(this.change$)),
            this.subscriptions.add(this.change$.map(t.bind(this.checkChanges, this)).distinctUntilChanged().subscribe(t.bind(this.canSave, this))),
            this.$list.on("click", ".users-picker-item", t.bind(this.onItemChoose, this))
        },
        withoutMe: function(e) {
            return e.managers = t.omit(e.managers, function(e) {
                return e.id.toString() === o.id.toString()
            }),
            e
        },
        close: function() {
            this.trigger("close")
        },
        save: function() {
            t.each(this.currentState, function(e, t) {
                this.initialState[t] !== e && (e > 0 ? this.service.subscribe(t) : this.service.unsubscribe(t))
            }, this),
            this.service.save().subscribe(t.bind(function() {
                this.trigger("close")
            }, this))
        },
        selectItem: function(e) {
            this.selectItem$.onNext(e)
        },
        canSave: function(e) {
            this._toggleClass("controls_disabled", "controls", !e)
        },
        removeItem: function(e) {
            this.removeItem$.onNext(e)
        },
        unbindEvents: function() {
            s.prototype.unbindEvents.apply(this, arguments),
            this.$list.off("click", ".js-multisuggest-item"),
            this.subscriptions.dispose()
        },
        setPositions: t.noop,
        suggestLeaveOnBlur: function() {},
        onItemChoose: function(e) {
            e.stopPropagation();
            var t = $(e.currentTarget)
              , i = "y" === t.data("group")
              , s = t.data("id")
              , n = i ? s : t.data("group")
              , o = this._hasClass("item_selected", t);
            o && i ? this.disableGroup(t, s) : o ? (this.disableItem(t, s),
            this.checkGroupSelected(n)) : i ? this.enableGroup(t, s) : (this.enableItem(t, s),
            this.checkGroupSelected(n))
        },
        disableGroup: function(e, i) {
            this.removeItem(i),
            this._removeClass("item_selected", e);
            var s = this.$list.find('[data-group="' + i + '"]');
            this._removeClass("item_selected", s),
            t.each(s, function(e) {
                var t = $(e).data("id");
                this.removeItem(t)
            }, this)
        },
        enableGroup: function(e, i) {
            this.selectItem(i),
            this._addClass("item_selected", e);
            var s = this.$list.find('[data-group="' + i + '"]');
            this._addClass("item_selected", s),
            t.each(s, function(e) {
                var t = $(e).data("id");
                this.removeItem(t)
            }, this)
        },
        enableItem: function(e, t) {
            this.selectItem(t),
            this._addClass("item_selected", e)
        },
        disableItem: function(e, t) {
            this.removeItem(t),
            this._removeClass("item_selected", e)
        },
        checkGroupSelected: function(e) {
            if ("group_free_users" !== e) {
                var i = t.filter(this.managers.managers, function(t) {
                    return t.group === e
                })
                  , s = this.$list.find('.users-picker-item--selected[data-group="' + e + '"]')
                  , n = this.$list.find('[data-group="y"][data-id="' + e + '"]');
                i.length > s.length ? (this._removeClass("item_selected", n),
                this.removeItem(e),
                t.each(s, function(e) {
                    var t = $(e).data("id");
                    this.selectItem(t)
                }, this)) : (this._addClass("item_selected", n),
                this.enableGroup(n, e))
            }
        },
        getRenderUsersAndGroups: function(e, i) {
            var n = s.prototype.getRenderUsersAndGroups.apply(this, arguments);
            return t.each(n.users, function(e, i) {
                t.each(e, function(e) {
                    e.selected = 1 === this.currentState[e.id]
                }, this)
            }, this),
            t.each(this.currentState, function(e, i) {
                n.groups[i] && (n.groups[i].selected = 1 === e,
                t.each(n.users[i], function(e) {
                    e.selected = 1
                }))
            }),
            n
        },
        _mapWithoutCurrentUser: function(e) {
            var i = t.clone(e);
            return i.items = t.reject(i.items, function(e) {
                return e.get("user_id").toString() === o.id.toString()
            }),
            i
        },
        loadItems: function() {
            var e = this.listStream.switchMap(t.bind(this.fetchManagers, this));
            this.subscriptions.add(e.subscribe(t.bind(this.loadHelper, this)))
        },
        fetchManagers: function() {
            return r.fetch().map(this.withoutMe, this).map(function(e) {
                return this.managers = e,
                e
            }, this)
        },
        destroy: function() {
            this.subscriptions.dispose(),
            s.prototype.destroy.apply(this, arguments)
        }
    })
}),
define("lib/interface/card/controls/subscribers/full/index", ["require", "underscore", "twig", "lib/core/view", "lib/interface/card/controls/subscribers/network/service", "lib/interface/card/controls/subscribers/full/users_picker"], function(e) {
    "use strict";
    var t = (e("underscore"),
    AMOCRM.constant("user"),
    e("twig"))
      , i = e("lib/core/view")
      , s = e("lib/interface/card/controls/subscribers/network/service")
      , n = e("lib/interface/card/controls/subscribers/full/users_picker");
    return i.extend({
        _selectors: function() {
            return {
                users_picker_container: ".js-users-picker"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            i.prototype.initialize.apply(this, arguments),
            this.service = new s(this.options.entity_type,this.options.entity_id),
            this.render(),
            this.addSubViews()
        },
        addSubViews: function() {
            var e = this._addComponent(n, {
                el: this._elem("users_picker_container"),
                entity_id: this.options.entity_id,
                $el: this._elem("users_picker_container"),
                entity_type: this.options.entity_type,
                template: this.options.template_users_picker,
                item_tmpl: this.options.template_users_picker_item,
                from_load: !0
            });
            e.on("close", function() {
                this.trigger("close")
            }, this)
        },
        render: function() {
            var e = t({
                ref: this.options.template
            }).render();
            return this.$el.html(e),
            this
        }
    })
}),
define("lib/interface/card/controls/subscribers", ["require", "underscore", "twig", "rxjs", "lib/core/view", "lib/interface/card/controls/subscribers/view_model", "lib/interface/card/controls/subscribers/short/index", "lib/interface/card/controls/subscribers/full/index", "lib/interface/card/controls/subscribers/network/service"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("rxjs")
      , n = e("lib/core/view")
      , o = e("lib/interface/card/controls/subscribers/view_model")
      , r = e("lib/interface/card/controls/subscribers/short/index")
      , a = e("lib/interface/card/controls/subscribers/full/index")
      , l = e("lib/interface/card/controls/subscribers/network/service");
    return n.extend({
        view_model: new o,
        subscriptions: new s.CompositeDisposable,
        _selectors: function() {
            return {
                counter: ".js-counter",
                view_container: ".js-view-container",
                container: ".js-container",
                add_member: ".js-subscriber-add"
            }
        },
        _classes: function() {
            return {
                "full-mode": "subscribers-container--full",
                "short-mode": "subscribers-container--short",
                loading: "subscribers--loading"
            }
        },
        events: {
            "click .js-toggle": "toggleList",
            "click .js-subscriber-add": "switchToAddMember"
        },
        initialize: function(e) {
            this.options = e || {},
            n.prototype.initialize.apply(this, arguments);
            var r = s.Observable.fromPromise(i._preload([this._makeTemplateUrl("wrapper.twig")])).doOnNext(this.render, this).shareReplay(1);
            this.subscriptions = new s.CompositeDisposable,
            this.service = new l(this.options.entity_type,this.options.entity_id),
            this.service.loading$.subscribe(t.bind(this.toggleLoading, this)),
            this.view_model = new o({
                entity_id: this.options.entity_id,
                entity_type: this.options.entity_type
            }),
            this._$document.on("click", t.bind(this.outsideList, this)),
            this.view_model.on("change", this.update_counter, this),
            this.subscriptions.add(r.switchMap(this.service.list$).map(function() {
                return this.service.count()
            }, this).subscribe(t.bind(function(e) {
                this.view_model.set("count", e)
            }, this)))
        },
        toggleLoading: function(e) {
            e ? this._addClass("loading") : this._removeClass("loading")
        },
        switchToShort: function() {
            this._elem("add_member").show(),
            this.full && this._destroyComponent(this.full),
            this._addClass("short-mode", "container"),
            this["short"] = this._addComponent(r, {
                el: this._elem("view_container"),
                entity_id: this.options.entity_id,
                entity_type: this.options.entity_type,
                template: this._makeTemplateUrl("short.twig"),
                template_self: this._makeTemplateUrl("short_self.twig"),
                template_list: this._makeTemplateUrl("short_list.twig")
            })
        },
        switchToAddMember: function(e) {
            e.preventDefault(),
            this._elem("add_member").hide(),
            this["short"] && this._destroyComponent(this["short"]),
            this._removeClass("short-mode", "container"),
            this._addClass("full-mode", "container"),
            this.full = this._addComponent(a, {
                el: this._elem("view_container"),
                entity_id: this.options.entity_id,
                entity_type: this.options.entity_type,
                template: this._makeTemplateUrl("full.twig"),
                template_users_picker: this._makeTemplateUrl("users_picker.twig"),
                template_users_picker_item: this._makeTemplateUrl("users_picker_item.twig")
            }),
            this.full.on("close", this._hideList, this)
        },
        _onError: function(e) {},
        destroy: function() {
            n.prototype.destroy.apply(this, arguments),
            this.subscriptions.dispose(),
            this.service.destroy()
        },
        toggleList: function(e) {
            e.preventDefault(),
            this._elem("container").is(":visible") ? this._hideList() : this._showList()
        },
        _showList: function() {
            this.switchToShort(),
            this._elem("container").show()
        },
        _hideList: function() {
            this["short"] && this._destroyComponent(this["short"]),
            this.full && (this._destroyComponent(this.full),
            this.full.off("close")),
            this._removeClass(["short-mode", "full-mode"], "container"),
            this._elem("container").hide()
        },
        outsideList: function(e) {
            0 !== this.$el.has(e.target).length || this.$el.is(e.target) || this._hideList()
        },
        render: function() {
            var e = i({
                ref: this._makeTemplateUrl("wrapper.twig")
            }).render({
                count: 0
            });
            this.$el.html(e)
        },
        _makeTemplateUrl: function(e) {
            return "/tmpl/cards/leads/controls/subscribers/" + e
        },
        update_counter: function() {
            this._elem("counter").text(this.view_model.get("count"))
        },
        _preloadTemplates: function() {
            return s.Observable.fromPromise(i._preload([this._makeTemplateUrl("wrapper.twig")]))
        }
    })
}),
define("lib/interface/notes/views/add/view", ["require", "underscore", "lib/common/fn", "lib/core/users", "lib/core/view", "lib/interface/notes/form", "lib/components/mail/api_v2", "lib/interface/notes/constants", "lib/interface/notes/views/add/mail", "lib/interface/notes/views/add/amojo", "lib/interface/notes/views/add/note", "lib/interface/notes/views/add/task", "lib/interface/card/controls/subscribers"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/fn")
      , s = e("lib/core/users")
      , n = e("lib/core/view")
      , o = e("lib/interface/notes/form")
      , r = e("lib/components/mail/api_v2")
      , a = e("lib/interface/notes/constants")
      , l = e("lib/interface/notes/views/add/mail")
      , c = e("lib/interface/notes/views/add/amojo")
      , d = e("lib/interface/notes/views/add/note")
      , u = e("lib/interface/notes/views/add/task")
      , h = e("lib/interface/card/controls/subscribers");
    return n.extend({
        _mail_compose_data: [],
        className: "feed-compose",
        _classes: function() {
            return {
                inner: "feed-compose__inner",
                switcher: "feed-compose-switcher",
                switcher_tip: "feed-compose-switcher__tip",
                switcher_tip_chat: "js-switcher-chat",
                switcher_tip_email: "js-switcher-email",
                switcher_tip_note: "js-switcher-note",
                switcher_external: "feed-compose-switcher__item-wrapper"
            }
        },
        _selectors: function() {
            return {
                textarea: "[contenteditable]",
                switcher_input: '[name="feed-compose-switcher"]'
            }
        },
        events: {
            click: "composeStopPropagation",
            "click .js-note-edit-cancel": "cancelClick",
            "click .js-task-edit-cancel": "cancelClick",
            "keydown [contenteditable]": "openComposeFormOnInput",
            "click .feed-compose-switcher__tip .js-tips-item": "changeViewClick",
            "click .feed-compose-switcher": "showSwitcherTipClick",
            'change [name="feed-compose-switcher"]': "onChangeActiveView",
            "mouseover .feed-compose-switcher": "switcherMouseOver",
            "mouseover .feed-compose-switcher__tip": "switcherTipMouseOver",
            "mouseleave .feed-compose-switcher": "switcherTextMouseLeave",
            "mouseleave .feed-compose-switcher__tip": "switcherMouseLeave"
        },
        initialize: function(e) {
            this.options = t.extend({
                onToggle: t.noop
            }, e),
            this._opened = !1,
            this._last_type = [{}],
            t.bindAll(this, "onFileApiWindowOver"),
            n.prototype.initialize.apply(this, arguments),
            this._form = this._addComponent(o),
            this.listenTo(this.options.notes, "add", t.bind(t.debounce(this._fetchLastType, 200, !0), this)),
            this.listenTo(this.options.notes, "remove", t.bind(t.debounce(this._fetchLastType, 200, !0), this)),
            this.listenTo(this.options.notes, "notes:compose:switch", t.bind(this.setCompose, this)),
            this.listenTo(this.options.notes, "notes:dnd:compose", t.bind(this.onFileApiWindowOver, this)),
            this._$document.on("notes:compose:switch" + this.ns, t.bind(function() {
                this.setCompose.apply(this, Array.prototype.slice.call(arguments, 1))
            }, this)),
            this._addComponent(h, {
                el: $("#show-chat-list").parent(),
                entity_type: this.options.getExtraData().elements[0].element_type,
                entity_id: this.options.getExtraData().elements[0].id
            }),
            this._setActiveView(),
            this.options.notes.element_id ? this._fetchLastType() : (this.options.setEdit(this),
            this.openComposeFormOnInput(!0))
        },
        onFileApiWindowOver: function(e) {
            this._active_view.options && "task" === this._active_view.options._type || e && (this.setCompose(),
            this._active_view.model.trigger("notes:dnd:window"))
        },
        showSwitcherTipClick: function(e) {
            var t = this._findElem("switcher_tip");
            1 !== t.find(".js-tips-item:not(.hidden)").length && (e && e.stopPropagation && e.stopPropagation(),
            t.is(":hidden") && this.switcherTipShow())
        },
        switcherMouseOver: function(e) {
            var i = this._findElem("switcher_tip");
            i.is(":hidden") && i.find(".js-tips-item:not(.hidden)").length > 1 && (this._switcher_tip_timeout = setTimeout(t.bind(this.switcherTipShow, this), 100)),
            clearTimeout(this._switcher_timeout)
        },
        switcherTipShow: function() {
            var e = this._findElem("switcher_tip");
            this._checkIfDefaultMailNeeded() ? this._findElem("switcher_tip_email").removeClass("hidden") : this._findElem("switcher_tip_email").addClass("hidden"),
            e.trigger("tip:show").addClass("tips-at-top tips_slide-up")
        },
        switcherTipMouseOver: function() {
            clearTimeout(this._switcher_timeout)
        },
        switcherMouseLeave: function(e) {
            this._switcher_timeout = setTimeout(t.bind(function() {
                this._$document.trigger("controls:hide", ["tip"])
            }, this), 200)
        },
        switcherTextMouseLeave: function() {
            clearTimeout(this._switcher_tip_timeout),
            this.switcherMouseLeave()
        },
        changeViewClick: function(e) {
            var t = $(e.currentTarget)
              , i = t.attr("data-id");
            this._setLastUsedType(i),
            this._elem("switcher_input").val(i).trigger("change"),
            this._$document.trigger("controls:hide", ["tip"])
        },
        onChangeActiveView: function() {
            var e = this._elem("switcher_input").val();
            this._elem("switcher_tip").find(".tips-item_selected").removeClass("tips-item_selected"),
            this._elem("switcher_tip").find('.js-tips-item[data-id="' + e + '"]').addClass("tips-item_selected"),
            this._setActiveView()
        },
        composeStopPropagation: function(e) {
            $(e.target).closest(".js-tip-holder").length || $(e.target).closest(".tasks-date").length || $(e.target).closest(".control--suggest").length || $(e.target).closest(".control--select").length || (this._$document.trigger("controls:hide"),
            e.stopPropagation()),
            this._setEdit()
        },
        _setEdit: function() {
            this._opened || (this.options.setEdit(this),
            this.openComposeFormOnInput())
        },
        openComposeFormOnInput: function(e) {
            this._opened || (this._opened = !0,
            this.$el.removeClass("minimized"),
            e || (this._active_view._onOpenCompose(),
            this._setLastUsedType(this._active_view.options._type)))
        },
        cancelClick: function(e) {
            e.stopPropagation(),
            this._active_view._form.revert(),
            this.cancel()
        },
        _checkIfDefaultMailNeeded: function() {
            return t.chain(this.options.getExtraData().elements).reduce(function(e, t) {
                return t.email && t.email.length && e++,
                e
            }, 0).value()
        },
        _getLastTimelineMessage: function() {
            var e, i = $.Deferred(), s = this._checkIfDefaultMailNeeded(), n = this._elem("switcher_tip_note").is(":not(.hidden)");
            return e = this.options.notes.max(function(e) {
                switch (!0) {
                case e.get("type") === AMOCRM.note_types.common && n:
                case e.get("type") === AMOCRM.note_types.mail_message && s > 0:
                    return e.get("date_create");
                case !t.isUndefined(e.get("chat_id")):
                    return e.get("created_at");
                case e.get("type") === AMOCRM.note_types.mail_message && 0 === s:
                    return -1;
                default:
                    return 0
                }
            }),
            e = e === -(1 / 0) || e.get("type") === AMOCRM.note_types.common ? {} : e.toJSON(),
            i.resolve(e)
        },
        _fetchMailComposeData: function(e) {
            return e === !0 && (this._mail_def = null,
            this._mail_compose_data = []),
            this._mail_def && "pending" === this._mail_def.state() ? this._mail_def : (this._mail_def = $.Deferred(),
            !this._mail_compose_data.length && this._checkIfDefaultMailNeeded() ? r.getComposeDataForEntity(this.options.notes.element_id, AMOCRM.getBaseEntity()).then(t.bind(function(e) {
                this._mail_compose_data = e || [],
                this._elem("switcher_tip_email").removeClass("hidden"),
                this._mail_def.resolve(e)
            }, this)) : this._mail_def.resolve(this._mail_compose_data),
            this._mail_def.promise())
        },
        _fetchLastType: function() {
            var e, i = this._last_type;
            return this._fetchMailComposeData().then(t.bind(this._getLastTimelineMessage, this)).then(t.bind(function(n) {
                switch (!0) {
                case n.type === AMOCRM.note_types.mail_message:
                    this._last_type = [{
                        type: "email",
                        data: this._mail_compose_data
                    }];
                    break;
                case !t.isUndefined(n.chat_id):
                    e = {
                        data: this._prepareLastChatMessage(n)
                    },
                    n.recipient && n.recipient.id === s.current("amojo_id") && (e.type = "chat"),
                    this._last_type = [e];
                    break;
                default:
                    this._last_type = [{}]
                }
                this._opened || t.isEqual(i, this._last_type) || this._setLastType(!0)
            }, this))
        },
        _setLastUsedType: function(e) {
            -1 !== t.indexOf(["note", "chat"], e) && i.storeWithExpiration.set(a.LS_LAST_TYPE, e)
        },
        _setLastType: function(e) {
            var s = this._elem("switcher_input").val()
              , n = this._last_type[0].type
              , o = i.storeWithExpiration.get(a.LS_LAST_TYPE) || "note";
            if ("email" !== n || this._checkIfDefaultMailNeeded() || (n = void 0),
            -1 === t.indexOf(["email", "chat", "note"], n))
                switch (!0) {
                case this._elem("switcher_tip_chat").is(":not(.hidden)") && "chat" === o:
                    n = "chat";
                    break;
                case this._elem("switcher_tip_note").is(":not(.hidden)"):
                    n = "note";
                    break;
                default:
                    n = this.$(".js-tips-item:not(.hidden):first").attr("data-id")
                }
            (s !== n || e === !0) && (this._last_type[0].type = n,
            this._elem("switcher_input").val(n).trigger("change"),
            this._setActiveView(!0))
        },
        _getLastType: function(e) {
            return t.chain(this._last_type).reduce(function(t, i) {
                return i.type === e && (t = i.data),
                t
            }, void 0).value()
        },
        _getInnerComposeView: function(e) {
            switch (e) {
            case "email":
                return l;
            case "chat":
                return c;
            case "note":
                return d;
            case "task":
                return u
            }
        },
        _toggleClassModificator: function(e, t) {
            t ? this.$el.addClass(e) : this.$el.removeClass(e)
        },
        _setActiveView: function(e) {
            var i, s = this._elem("switcher_input").val() || "note", n = {
                _type: s,
                getExtraData: t.bind(this.options.getExtraData, this),
                onToggleClassModificator: t.bind(this._toggleClassModificator, this),
                onCancel: t.bind(this.cancel, this),
                onAdd: t.bind(function(e, i) {
                    i = i || {},
                    e && (this.options.addNotes(e).then(t.bind(this.cancel, this)),
                    this.options.notes.trigger("created", e.id)),
                    i.need_cancel !== !1 && this.cancel(),
                    this.options.scrollToEnd()
                }, this)
            }, o = !1;
            switch (s) {
            case "email":
                i = {
                    params: t.extend({
                        $notes_scroller: this.options.$notes_scroller,
                        getMailComposeData: t.bind(this._fetchMailComposeData, this)
                    }, n)
                };
                break;
            case "chat":
                i = {
                    params: t.extend(n, {
                        addAmoJoCollection: t.bind(this.options.notes.addCollection, this.options.notes),
                        getResponsibleId: t.bind(this.options.getResponsibleId, this),
                        getLastChatMessage: t.bind(this._getLastType, this, "chat"),
                        toggleSwitcher: t.bind(this.showSwitcherTipClick, this)
                    })
                };
                break;
            case "note":
                i = {
                    params: t.extend(n, {
                        element_id: this.options.notes.element_id,
                        element_type: this.options.notes.element_type,
                        toggleSwitcher: t.bind(this.showSwitcherTipClick, this)
                    })
                };
                break;
            case "task":
                i = {
                    params: t.extend(n, {
                        element_id: this.options.notes.element_id,
                        element_type: this.options.notes.element_type,
                        getResponsibleId: t.bind(this.options.getResponsibleId, this)
                    })
                }
            }
            i.handler = this._getInnerComposeView(s),
            (!this._active_view || this._active_view.options._type !== i.params._type || e) && (this._active_view && (i.params.text = this._active_view.getExistingText(),
            this._active_view.destroy(),
            o = !0),
            this._active_view = this._addComponent(i.handler, i.params),
            this._active_view._onOpenCompose = t.compose(t.bind(function() {
                this.options.onToggle("open"),
                this._$document.trigger("notes:compose:change", [i.params._type])
            }, this), t.bind(this._active_view.onOpenCompose || t.noop, this._active_view)),
            this.$el.attr("class", [this.className, this.$el.hasClass("minimized") ? "minimized" : ""].join(" ")).find(".feed-compose__inner").html("").append(this._active_view.el),
            this._active_view.edit(!1),
            this._active_view._form.model.on("has_changes", t.bind(this._handleFormChange, this, "has_changes")).on("has_reverted", t.bind(this._handleFormChange, this, "has_reverted")),
            this._active_view.setExistingText(),
            o && this._opened && this._active_view._onOpenCompose())
        },
        setMainId: function(e) {
            this._active_view && t.isFunction(this._active_view.setMainId) && this._active_view.setMainId(e)
        },
        setCompose: function(e, i) {
            e = e || this._elem("switcher_input").val(),
            -1 !== t.indexOf(["note", "chat", "email", "task"], e) && (this._elem("switcher_input").val(e).trigger("change"),
            this._setEdit(),
            this._active_view.setParamsOnSwitch(i || {}))
        },
        _prepareLastChatMessage: function(e) {
            var i = e.author;
            return (t.isNull(e.recipient) && s.getByAmoJoId()[e.author.id] || e.author.id === s.current("amojo_id")) && (i = e.recipient),
            {
                chat_id: e.chat_id,
                recipient: i
            }
        },
        _isNoteOrTaskActive: function() {
            return this._active_view && !(this._active_view instanceof l || this._active_view instanceof c)
        },
        _handleFormChange: function(e) {
            (this.hasChanges() || "has_reverted" === e) && this._form.model.trigger(e)
        },
        edit: function() {
            this.$el.removeClass("minimized")
        },
        cancel: function() {
            return this._$document.trigger("controls:hide"),
            this._opened ? (this._active_view && t.isFunction(this._active_view.onFoldCompose) && this._active_view.onFoldCompose(),
            this.$el.addClass("minimized"),
            this._opened = !1,
            this._active_view.getExistingText() || this._setLastType(),
            this.options.onToggle("close"),
            null) : void 0
        },
        hasChanges: function() {
            return this._isNoteOrTaskActive() ? this._active_view.hasChanges() : !1
        },
        isSaved: function() {
            return !!this._active_view.model.get("id")
        },
        save: function() {
            return this._isNoteOrTaskActive() ? this._active_view.save() : void 0
        }
    })
}),
define("lib/interface/unsorted/notes/views/add/amojo", ["require", "lib/interface/notes/views/add/amojo", "lib/core/users", "underscore", "twig", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("lib/interface/notes/views/add/amojo")
      , i = (e("lib/core/users"),
    e("underscore"))
      , s = (e("twig"),
    e("lib/common/fn"));
    return t.extend({
        _getTemplate: function() {
            return "/tmpl/unsorted/notes/adding/amojo.twig"
        },
        onOpenCompose: function() {
            var e, t, i = this.options.getExtraData(), s = this._getInternalChat(), n = null, o = !1;
            t = {
                name: i.name,
                id: null
            },
            e = t.id,
            s && (n = s.chat_id),
            this._updateChatParams({
                is_external: s && -1 === [AMOCRM.element_types.leads, AMOCRM.element_types.customers].indexOf(parseInt(s.entity_type)),
                to_all: o,
                name: t.name,
                chat_id: n,
                user_id: e
            }),
            this._findElem("textarea").focus()
        },
        focusToUserOnBackspace: i.noop,
        _getUserRenderParams: function() {
            return {
                main_class_name: "feed-compose-user--unsorted",
                user_class_name: "feed-compose-user__name--unsorted"
            }
        },
        _getUsers: function() {
            var e, t = this.options.getExtraData(), n = i.find(t.chats, function() {
                return !0
            }), o = {};
            return i.isUndefined(n) || (n = i.values(n.contacts)[0],
            o = {
                group: "external",
                title: t.name,
                option: t.name,
                active: !0,
                origin: e ? e.origin : "facebook",
                id: n.chat_id
            }),
            {
                managers: o,
                groups: {
                    external: s.i18n("Contacts")
                }
            }
        }
    })
}),
define("lib/interface/unsorted/notes/views/add/view", ["require", "lib/interface/notes/views/add/view", "lib/interface/unsorted/notes/views/add/amojo"], function(e) {
    "use strict";
    var t = e("lib/interface/notes/views/add/view")
      , i = e("lib/interface/unsorted/notes/views/add/amojo");
    return t.extend({
        _getInnerComposeView: function() {
            return i
        }
    })
}),
define("lib/interface/notes/filter", ["require", "underscore", "cocktail", "lib/interface/card/mixins/notes_linked_element_types", "lib/core/view", "lib/components/filter/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("cocktail")
      , s = e("lib/interface/card/mixins/notes_linked_element_types")
      , n = e("lib/core/view")
      , o = e("lib/components/filter/form")
      , r = n.extend({
        _default_types: [1, 2, 3],
        _selectors: function() {
            return {
                tips: ".js-notes-filter-tips",
                tip: ".js-notes-filter-hidden-count"
            }
        },
        events: {
            click: "stopPropagation",
            "click .js-notes-filter": "toggleTip",
            'change [name="checkbox_notes_filter"]': "filterChange"
        },
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.element_type = this.options.element_type,
            this._form = this._addComponent(o.View, {
                el: this.el
            }),
            this._initValues(),
            this._$document.on("click" + this.ns + " controls:hide:private" + this.ns, t.bind(this.hideTip, this)),
            this.setFilter(),
            this.options.notes.on("sync add remove", t.debounce(this._updateHiddenCount, 100), this)
        },
        hideTip: function() {
            this._elem("tips").hide()
        },
        stopPropagation: function(e) {
            e.stopPropagation()
        },
        toggleTip: function() {
            this._elem("tips").toggle()
        },
        _initValues: function() {
            var e = this.getNotesLinkedElementTypesFromCookie(this.element_type);
            e === !1 && (e = t.without(this._default_types, this.element_type)),
            t.each(e, function(e) {
                this.$('[name="checkbox_notes_filter"][value="' + e + '"]').prop("checked", !0).trigger("change")
            }, this)
        },
        filterChange: function() {
            var e = this._form.model.get("checkbox_notes_filter") || [];
            this.setNotesLinkedElementTypesToCookie(this.element_type, e),
            this.setFilter()
        },
        _updateHiddenCount: function() {
            var e = this.options.notes.reduce(function(e, t) {
                return t.get("visible") || e++,
                e
            }, 0)
              , i = this._elem("tip")
              , s = parseInt(i.attr("data-old-count"));
            e ? (this._elem("tip").html(e).show(),
            e !== s && (i.attr("data-old-count", e).addClass("animated tada"),
            t.delay(t.bind(function() {
                i.removeClass("animated tada")
            }, this), 200))) : i.attr("data-old-count", "").hide()
        },
        setFilter: function() {
            var e = this._form.model.get("checkbox_notes_filter") || [];
            t.isArray(e) || (e = [e]),
            t.isFunction(this.options.onFilter) && this.options.onFilter(t.map(e.concat([this.element_type]), function(e) {
                return parseInt(e)
            })),
            this._updateHiddenCount()
        }
    });
    return i.mixin(r, s),
    r
}),
define("lib/interface/notes/mixins/linked_filter", ["require", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/common/fn"), n = 86400, o = {
        element_id: 0,
        element_type: 0,
        element_date_create: 0,
        bottom_bracket_of_time: 0,
        main_element_type: 0
    };
    return t = {
        isNeedFilter: function(e) {
            return o.main_element_type = parseInt(e) || 0,
            o.main_element_type > 0 && -1 !== i.chain(AMOCRM.element_types).pick("leads", "customers", "unsorted").values().value().indexOf(o.main_element_type)
        },
        initCreationTime: function(e, s, n) {
            var r, a, l = AMOCRM.element_types.unsorted;
            return e = e === l ? e : parseInt(e),
            s = parseInt(s),
            o.element_id && o.element_id === e && o.element_type === s && o.element_date_create || (t.initCache(e, s),
            s !== l ? (r = t.detectCreationNoteType(s),
            r && (a = i.find(n, function(e) {
                return e && e.type === r && e.object_type && "notes" === e.object_type.code && e.element_type === o.element_type && e.element_id === o.element_id
            }),
            a && t.useNoteForSetDates(a))) : i.isUndefined(AMOCRM.data.current_card) ? o.bottom_bracket_of_time = 0 : o.bottom_bracket_of_time = AMOCRM.data.current_card.unsorted_model.get("date_create") || 0),
            o.bottom_bracket_of_time > 0
        },
        detectCreationNoteType: function(e) {
            var t, i = s.convertElementType(e, "single");
            return t = AMOCRM.note_types[i + "_created"],
            t || console.error('Unexpected element type "%s"', e),
            t
        },
        initCache: function(e, t) {
            o.bottom_bracket_of_time = o.element_date_create = 0,
            o.element_id = e,
            o.element_type = t
        },
        useNoteForSetDates: function(e) {
            o.element_date_create = e.date_create || 0,
            o.element_date_create > 0 ? o.bottom_bracket_of_time = o.element_date_create - n : o.element_date_create = 0
        },
        isLinkedAndOld: function(e) {
            var t, s, n;
            return (n = e.date_create || e.created_at) ? (t = parseInt(n) < o.bottom_bracket_of_time,
            s = e.element_type === o.main_element_type,
            t && !s) : (console.error("Item has no field of date create, item: ", i.clone(e)),
            !1)
        }
    },
    {
        element_id: 0,
        element_type: 0,
        _filterLinkedAndOld: function(e) {
            var s = e;
            return t.isNeedFilter(this.element_type) && t.initCreationTime(this.element_id, this.element_type, e) && (s = i.reject(e, t.isLinkedAndOld, this)),
            s
        }
    }
}),
define("lib/interface/notes/pager", ["require", "underscore", "backbone", "cocktail", "lib/interface/notes/collection", "lib/interface/notes/mixins/sorting", "lib/interface/notes/mixins/linked_filter", "lib/interface/notes/model"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("backbone"), n = e("cocktail"), o = e("lib/interface/notes/collection"), r = e("lib/interface/notes/mixins/sorting"), a = e("lib/interface/notes/mixins/linked_filter"), l = e("lib/interface/notes/model");
    return t = s.Collection.extend({
        model: l,
        _fully_loaded: !1,
        _filter_element_types: [],
        _page_length: 100,
        initialize: function(e, t) {
            this.element_id = t.element_id,
            this.element_type = t.element_type,
            this.element_info = t.element_info,
            this._elements = [{
                id: t.element_id,
                type: t.element_type
            }],
            this.buffer = [],
            this.addCollection(new o([],i.extend({
                id: t.element_id
            }, t))),
            this.on("add", this._setVisible, this)
        },
        setFullyLoaded: function() {
            this._fully_loaded = !0,
            this._fetched()
        },
        _filterCollections: function(e) {
            return e ? i.filter(this._collections, function(t) {
                return i.indexOf(e, t.id) + 1
            }) : this._collections
        },
        findCollection: function(e) {
            return i.find(this._collections, function(t) {
                return (t.id || t.element_id).toString() === e.toString()
            }, this)
        },
        fetch: function(e) {
            var t, s, n = $.Deferred(), o = i.bind(function(e) {
                this._fetched(),
                e.resolve(),
                this._fetching = !1
            }, this, n);
            return e = e || {},
            !e.collections && this._fetching ? n.reject() : (this._fetching = !0,
            t = e.page,
            s = i.filter(this._filterCollections(e.collections), function(e) {
                return e.hasNextPage()
            }),
            s.length ? Promise.all(i.map(s, function(e) {
                return e.fetch({
                    data: {
                        page: t,
                        limit: this._page_length
                    }
                })
            }, this)).then(o) : this.buffer.length && o(),
            n.promise())
        },
        hasNextPage: function() {
            return !0
        },
        add: function(e) {
            var t;
            return i.isArray(e) || (e = [e]),
            i.each(e, function(e) {
                t = i.find(this._collections, function(t) {
                    return e.chat_id ? t.id === e.chat_id : i.isUndefined(t.id)
                }),
                e.element_type = parseInt(e.element_type || this._elements[0].type),
                i.extend(e, {
                    visible: this.isVisible(e.element_type)
                }),
                t.add(e)
            }, this),
            s.Collection.prototype.add.apply(this, arguments)
        },
        _setVisible: function(e) {
            var t = parseInt(e.get("element_type"))
              , s = i.indexOf([AMOCRM.element_types.leads, AMOCRM.element_types.customers], this.element_type) >= 0
              , n = s && "tasks" === e.get("object_type").code && !e.get("status");
            e.set("visible", n || this.isVisible(t))
        },
        isVisible: function(e) {
            return !this._filter_element_types.length || Boolean(i.indexOf(this._filter_element_types, e) + 1)
        },
        filtering: function(e) {
            this._filter_element_types = e || [],
            i.each(this.models, function(e) {
                this._setVisible(e)
            }, this)
        },
        _fetched: function() {
            var e, t, s, n;
            n = i.find(this._collections, function(e) {
                return e._pending
            }),
            !n && this._fully_loaded && (s = this.buffer.length - this._page_length,
            0 > s && (s = 0),
            t = i.filter(this.buffer, function(e) {
                return e.view.model.object_type && ("tasks" === e.view.model.object_type.code && !e.view.model.status || "notes" === e.view.model.object_type.code && e.view.model.pinned)
            }),
            this.buffer = this._sortAlgo(i.difference(this.buffer, t), this.element_type),
            e = i.union(i.map(t, function(e) {
                return e.view.model
            }), i.map(this.buffer.splice(s, this._page_length), function(e) {
                return e.view.model
            })),
            this.add(e),
            this.trigger("fetched", e))
        },
        getOriginCollection: function(e) {
            return i.find(this._collections, function(t) {
                return t.get(e.id)
            }, this)
        },
        _pushToBuffer: function(e, t) {
            t && (this.buffer = this.buffer.concat(i.map(this._filterLinkedAndOld(t), function(e) {
                return {
                    date: this._getItemDate(e),
                    view: {
                        model: i.extend(e, {
                            get: function(e) {
                                return this[e] || {}
                            }
                        })
                    }
                }
            }, this)))
        },
        _onFetchError: function() {
            this._fetching = !1,
            this._fetched()
        },
        addCollection: function(e) {
            this._collections || (this._collections = []),
            e.on("fetched", i.bind(this._pushToBuffer, this, e)).on("error", i.bind(this._onFetchError, this)),
            this._collections.push(e),
            this.trigger("collection:added", e)
        },
        removeCollection: function(e) {
            var t;
            e.each(function(e) {
                e && (t = this.get(e.id),
                t && t.trigger("destroy", t, t.collection, {}))
            }, this),
            this._collections = i.without(this._collections, e),
            this.trigger("collection:removed", e)
        },
        setMainId: function(e) {
            this.element_id || (this.element_id = e),
            this.each(function(t) {
                t.get("element_id") || t.set({
                    id: null,
                    element_id: e
                })
            }),
            this._elements && this._elements[0] && !this._elements[0].id && (this._elements[0].id = e)
        }
    }),
    n.mixin(t, r, a),
    t
}),
define("lib/interface/notes/views/grouped/index", ["require", "underscore", "lib/core/users", "lib/interface/notes/views/note"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/core/users")
      , s = e("lib/interface/notes/views/note");
    return s.extend({
        events: {
            "click .js-grouped-expand": "_groupedExpandClick"
        },
        initialize: function() {
            this._debouncedRender = t.debounce(t.bind(this._onFilter, this), 100),
            s.prototype.initialize.apply(this, arguments),
            this.model.get("visible") && this.toggleVisible()
        },
        _getTemplate: function(e) {
            return this.model.get("chat_id") ? "/tmpl/notes/types/grouped/amojo.twig" : "/tmpl/notes/types/grouped/index.twig"
        },
        _getVisibleCount: function() {
            return this.models.reduce(function(e, t) {
                return t.get("visible") && e++,
                e
            }, 0)
        },
        _getTemplateName: function() {
            return this.model.get("chat_id") ? "amojo" : s.prototype._getTemplateName.apply(this, arguments)
        },
        _getRenderParams: function(e) {
            return t.extend(this.model.toJSON(), {
                count: this._getVisibleCount(),
                template: this._getTemplateName(),
                note_types: t.invert(AMOCRM.note_types),
                authors: t.reduce(this.models, function(e, t) {
                    var i;
                    return t.get("author") && (i = this._getChatUser(t.toJSON(), t.get("author").id),
                    e[i.id] = i),
                    e
                }, {}, this)
            })
        },
        _getChatUser: function(e, s) {
            var n = i.getByAmoJoId()
              , o = this.options.getExtraData()
              , r = {};
            switch (!0) {
            case !t.isUndefined(n[s]):
                r = n[s] || {};
                break;
            default:
                r = t.find(o.elements, function(t) {
                    return parseInt(o.chats[e.chat_id].entity_id) === parseInt(t.id)
                }) || {}
            }
            return {
                id: r.id,
                name: r.name || r.title,
                avatar: r.avatar
            }
        },
        _groupedExpandClick: function() {
            t.isFunction(this.options.onUngroup) && this.options.onUngroup(this.models).then(t.bind(function() {
                this.destroy(!0)
            }, this))
        },
        _onFilter: function() {
            0 === this._getVisibleCount() ? this.el.style.display = "none" : (this.el.style.display = "",
            this.render())
        },
        _render: function() {
            s.prototype._render.apply(this, arguments),
            this.el.classList.add(this.className + "_grouped")
        },
        toggleVisible: function() {
            this._debouncedRender()
        }
    })
}),
define("lib/interface/notes/views/grouped/complex", ["require", "underscore", "lib/interface/notes/views/note", "lib/interface/notes/views/types/mail"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/note")
      , s = e("lib/interface/notes/views/types/mail");
    return i.extend({
        _selectors: function() {
            return t.extend({}, i.prototype._selectors.apply(this, arguments), {
                subviews: ".js-grouped-subviews"
            })
        },
        _getTemplate: function() {
            return "/tmpl/notes/types/grouped/complex.twig"
        },
        _getRenderParams: function() {
            return t.extend(i.prototype._getRenderParams.apply(this, arguments), {
                icon_type: this._getOriginType(),
                icon_direction: this._checkDirection()
            })
        },
        events: {},
        _destroyOnRemove: function() {
            this._$window.off(this.ns),
            this.remove(!0)
        },
        toggleVisible: function() {
            var e = t.find([this.model].concat(this.models), function(e) {
                return e.get("visible")
            });
            this.el.style.display = e ? "" : "none"
        },
        _getSubView: function() {
            switch (this._getOriginType()) {
            case "mail":
                return s;
            default:
                return i
            }
        },
        _getOriginType: function() {
            switch (!0) {
            case this.model.get("type") === AMOCRM.note_types.mail_message:
                return "mail";
            case t.indexOf([AMOCRM.note_types.call_in, AMOCRM.note_types.call_out], this.model.get("type")) >= 0:
                return "call"
            }
        },
        _checkDirection: function() {
            var e, i, s = this._getOriginType();
            return t.indexOf(["mail", "call"], s) >= 0 && (e = this._getNoteDirection(this.model.toJSON()),
            i = t.find(this.models, function(t) {
                return this._getNoteDirection(t.toJSON()) !== e
            }, this),
            t.isUndefined(i)) ? e : ""
        },
        _getNoteDirection: function(e) {
            switch (e.type) {
            case AMOCRM.note_types.call_in:
                return "incoming";
            case AMOCRM.note_types.call_out:
                return "outgoing";
            case AMOCRM.note_types.mail_message:
                return e.data.params.manager ? "outgoing" : "incoming"
            }
        },
        _checkSubViewDestroy: function(e) {
            this.models = t.filter(this.models, function(t) {
                return e.model !== t
            }),
            this.models.length || this._destroyOnRemove()
        },
        _render: function() {
            i.prototype._render.apply(this, arguments),
            this.el.classList.add(this.className + "-grouped-complex"),
            this._renderSubViews(this.models)
        },
        _renderSubViews: function(e) {
            var i, s = document.createDocumentFragment();
            t.each(e, function(e) {
                i = this._addComponent(this._getSubView(), t.extend({}, this.options, {
                    models: [e],
                    onDestroy: t.bind(this._checkSubViewDestroy, this)
                })),
                i._render(),
                s.appendChild(i.el)
            }, this),
            this._findElem("subviews").prepend(s)
        }
    })
}),
define("lib/interface/notes/views/types/amojo", ["require", "underscore", "lib/core/users", "lib/interface/amojo/bots", "lib/interface/notes/views/note", "lib/interface/amojo/mediator"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/core/users")
      , s = e("lib/interface/amojo/bots")
      , n = e("lib/interface/notes/views/note")
      , o = e("lib/interface/amojo/mediator");
    return n.extend({
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this.listenTo(this.model, "change:delivery_status", this._render)
        },
        onImageLoad: function() {
            this.model.trigger("notes:update-sticky")
        },
        destroy: function() {
            this.$el.find("img").off(),
            n.prototype.destroy.apply(this, arguments)
        },
        _render: function() {
            n.prototype._render.apply(this, arguments),
            this.$el.find("img").on("load", t.bind(this.onImageLoad, this))
        },
        _getTemplateName: function() {
            return this.model.get("chat_id") ? "amojo" : "chat"
        },
        _getRenderParams: function() {
            var e = this.options.getOriginCollection(this.model)
              , s = this.model.toJSON()
              , n = o.get()[s.chat_id] || {
                contacts: {},
                users: {}
            }
              , r = this._getChatUser(n, {
                id: s.author.id,
                origin: s.author.origin
            })
              , a = s.recipient ? this._getChatUser(n, {
                id: s.recipient.id,
                origin: s.recipient.origin
            }) : {}
              , l = t.values(n.contacts)[0] || {};
            return t.extend({
                is_external: n && -1 === [AMOCRM.element_types.leads, AMOCRM.element_types.customers].indexOf(n.entity_type),
                is_incoming: Boolean(e && e.options.contacts[s.author.id]),
                current_user_amojo_id: i.current("amojo_id"),
                amo_author: r,
                amo_recipient: a,
                origin: l.origin,
                origin_icon: l.origin_icon
            }, s)
        },
        _getChatUser: function(e, n) {
            var o = i.getByAmoJoId()
              , r = this.options.getExtraData()
              , a = {};
            switch (!0) {
            case "bot" === n.origin:
                return s.get()[n.id] ? {
                    user: n.id,
                    name: s.get()[n.id].name,
                    avatar: s.get()[n.id].avatar
                } : {
                    user: n.id,
                    name: "SalesBot",
                    avatar: "/frontend/images/interface/inbox/mesage_bot_avatar.png"
                };
            case !t.isUndefined(o[n.id]):
                a = o[n.id] || {};
                break;
            case "unsorted" === AMOCRM.getBaseEntity():
                a = {
                    id: null,
                    name: r.name,
                    avatar: r.avatar
                };
                break;
            default:
                a = t.find(r.elements, function(t) {
                    return parseInt(r.chats[e.chat_id].entity_id) === parseInt(t.id)
                }) || {}
            }
            return {
                id: a.id,
                name: a.name || a.title,
                avatar: a.avatar
            }
        }
    })
}),
define("lib/interface/notes/views/grouped/amojo_ex", ["require", "underscore", "lib/interface/notes/views/grouped/index", "lib/interface/notes/views/grouped/complex", "lib/interface/notes/views/note", "lib/interface/notes/views/types/amojo"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/grouped/index")
      , s = e("lib/interface/notes/views/grouped/complex")
      , n = e("lib/interface/notes/views/note")
      , o = e("lib/interface/notes/views/types/amojo");
    return s.extend({
        _rendered_models: [],
        _selectors: function() {
            return t.extend({}, s.prototype._selectors.apply(this, arguments) || {}, {
                show_more: ".js-show-more"
            })
        },
        events: t.extend({}, s.prototype.events || {}, {
            "click .js-show-more": "onClickShowMore"
        }),
        _getChatUser: function() {
            return i.prototype._getChatUser.apply(this, arguments)
        },
        _getTemplate: function() {
            return "/tmpl/notes/types/grouped/amojo_ex.twig"
        },
        _getSubView: function() {
            return o
        },
        _getOriginType: function() {
            return "amojo"
        },
        onClickShowMore: function() {
            var e = this.options.scrollUpdate();
            this._showMoreMessages(),
            e(!0)
        },
        _render: function() {
            n.prototype._render.apply(this, arguments),
            this.el.classList.add(this.className + "-grouped-complex"),
            this._showMoreMessages()
        },
        _getHiddenMessages: function() {
            return t.difference(this.models, this._rendered_models)
        },
        _showMoreMessages: function() {
            var e = this._getHiddenMessages()
              , i = t.last(e, 10);
            this._rendered_models = this._rendered_models.concat(i),
            this._renderSubViews(i),
            e = this._getHiddenMessages(),
            e.length ? this._elem("show_more").text([AMOCRM.lang.button_more, e.length >= 10 ? 10 : e.length, AMOCRM.lang.step_of, e.length].join(" ")) : this._elem("show_more").hide(),
            this.model.trigger("notes:update-sticky")
        }
    })
}),
define("lib/interface/notes/views/types/chat", ["require", "underscore", "lib/interface/notes/views/note"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/note");
    return i.extend({
        events: t.extend({}, i.prototype.events || {}, {
            "click .note-chat:not(note-chat-expanded)": "expandChatNote",
            "click .note-chat.note-chat-expanded": "contractChatNote"
        }),
        expandChatNote: function() {
            $(event.target).closest(".js-call-play").length || this.$(".note-chat").addClass("note-chat-expanded")
        },
        contractChatNote: function(e) {
            $(e.target).closest(".js-call-play").length || this.$(".note-chat").removeClass("note-chat-expanded")
        }
    })
}),
define("lib/interface/notes/views/types/geolocation", ["require", "underscore", "lib/interface/notes/views/note"], function(e) {
    "use strict";
    var t = (e("underscore"),
    e("lib/interface/notes/views/note"));
    return t.extend({
        _getTemplate: function(e) {
            var t = "/tmpl/notes/types/" + this._getTemplateName() + ".twig";
            return "edit" === e && (t = "/tmpl/notes/types/geolocation_edit.twig"),
            t
        }
    })
}),
define("lib/interface/notes/views/getview", ["require", "underscore", "lib/interface/notes/views/note", "lib/interface/notes/views/task", "lib/interface/notes/views/joined/note", "lib/interface/notes/views/joined/joined", "lib/interface/notes/views/grouped/index", "lib/interface/notes/views/grouped/complex", "lib/interface/notes/views/grouped/amojo_ex", "lib/interface/notes/views/types/amojo", "lib/interface/notes/views/types/chat", "lib/interface/notes/views/types/mail", "lib/interface/notes/views/types/geolocation"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/interface/notes/views/note")
      , s = e("lib/interface/notes/views/task")
      , n = e("lib/interface/notes/views/joined/note")
      , o = e("lib/interface/notes/views/joined/joined")
      , r = e("lib/interface/notes/views/grouped/index")
      , a = e("lib/interface/notes/views/grouped/complex")
      , l = e("lib/interface/notes/views/grouped/amojo_ex")
      , c = e("lib/interface/notes/views/types/amojo")
      , d = e("lib/interface/notes/views/types/chat")
      , u = e("lib/interface/notes/views/types/mail")
      , h = e("lib/interface/notes/views/types/geolocation");
    return function(e, _) {
        if (_)
            switch (!0) {
            case "grouped_amojo_ex" === _:
                return l;
            case "grouped_complex" === _:
                return a;
            case "grouped" === _:
                return r;
            case e.object_type && "tasks" === e.object_type.code:
                return s;
            case e.type === AMOCRM.note_types.common:
                return n;
            case e.type === AMOCRM.note_types.mail_message:
                return u;
            default:
                return o
            }
        switch (!0) {
        case !t.isUndefined(e.chat_id):
            return c;
        case e.type === AMOCRM.note_types.mail_message:
            return u;
        case e.type === AMOCRM.note_types.chat:
            return d;
        case e.object_type && "tasks" === e.object_type.code:
            return s;
        case e.type === AMOCRM.note_types.attachment:
            return n;
        case e.type === AMOCRM.note_types.geolocation:
            return h;
        default:
            return i
        }
    }
}),
define("lib/interface/notes/notes", ["require", "underscore", "jquery", "rxjs", "twig", "FileAPI", "cocktail", "lib/core/view", "lib/components/base/autoload", "lib/components/base/player", "lib/common/fn", "lib/core/users", "lib/interface/notes/constants", "lib/interface/notes/mixins/sorting", "lib/interface/notes/mixins/equal_mails", "lib/interface/notes/mixins/typing", "lib/interface/notes/mixins/groupable", "lib/interface/notes/mixins/joinable", "lib/interface/notes/mixins/timeline", "lib/interface/notes/mixins/first_task", "lib/interface/notes/mixins/customers_green_bar", "lib/interface/notes/mixins/stacking", "lib/interface/notes/mixins/images_preview", "lib/interface/notes/views/add/view", "lib/interface/unsorted/notes/views/add/view", "lib/interface/notes/filter", "lib/interface/notes/pager", "lib/interface/amojo/rtm", "lib/interface/notes/views/getview", "lib/interface/amojo/mediator"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("rxjs"), o = e("twig"), r = e("FileAPI"), a = e("cocktail"), l = e("lib/core/view"), c = e("lib/components/base/autoload"), d = e("lib/components/base/player"), u = e("lib/common/fn"), h = e("lib/core/users"), _ = e("lib/interface/notes/constants"), p = e("lib/interface/notes/mixins/sorting"), m = e("lib/interface/notes/mixins/equal_mails"), f = e("lib/interface/notes/mixins/typing"), g = e("lib/interface/notes/mixins/groupable"), b = e("lib/interface/notes/mixins/joinable"), v = e("lib/interface/notes/mixins/timeline"), y = e("lib/interface/notes/mixins/first_task"), w = e("lib/interface/notes/mixins/customers_green_bar"), C = e("lib/interface/notes/mixins/stacking"), k = e("lib/interface/notes/mixins/images_preview"), x = e("lib/interface/notes/views/add/view"), M = e("lib/interface/unsorted/notes/views/add/view"), A = e("lib/interface/notes/filter"), O = e("lib/interface/notes/pager"), $ = e("lib/interface/amojo/rtm"), T = e("lib/interface/notes/views/getview"), S = e("lib/interface/amojo/mediator"), E = [AMOCRM.element_types.leads, AMOCRM.element_types.customers];
    return t = l.extend({
        className: "notes-wrapper",
        views: [],
        readers: null,
        _editing: null,
        _callbacks: {},
        _last_height: 0,
        _unseen_count: 0,
        _classes: function() {
            return {
                notes: "js-notes",
                notes_scroller: "notes-wrapper__scroller",
                tasks: "js-tasks",
                tasks_wrapper: "notes-wrapper__tasks",
                filter_and_chat_users: "js-notes-filter-and-chat-users",
                feed_compose: "feed-compose",
                green_line: "js-green-line",
                fixable: "js-note-fixable",
                fixable_future: "js-future-tasks-fixable",
                today_task: "today",
                unseen_count: "js-unseen-count"
            }
        },
        _selectors: function() {
            return {
                compose_scrollbar: ".notes-wrapper__compose-bottom, .feed-compose",
                typing_wrapper: ".notes-wrapper__typing"
            }
        },
        events: {
            "click .js-feed-load-more": "loadMore",
            "click .js-unseen-count": "_scrollToEnd"
        },
        initialize: function(e) {
            l.prototype.initialize.apply(this, arguments),
            this.subscriptions = new n.CompositeDisposable,
            this.params = e || {},
            i.bindAll(this, "_onFileApiWindowOver"),
            this.views = [],
            this._views_now = [],
            this.all_printing = {},
            this._first_task_active = !0,
            this._page = 0,
            this._unseen_count = 0,
            this.params.callbacks && this._setCallbacks(this.params.callbacks),
            this.params.element_type === AMOCRM.element_types.leads && this.params.can_add && !this.params.free_user && a.mixin(this, y),
            this.params.class_name && this.$el.addClass(this.params.class_name),
            this.params.no_player || this._addComponent(d, {
                append_to: ".feed-note-wrapper-call_in_out",
                afterSetPositions: function(e, t) {
                    var i = e.position();
                    t.css("width", ""),
                    t.css({
                        left: i.left + e.width() / 2 - t.width() / 2,
                        top: i.top + e.height() / 2 - t.height() / 2
                    })
                }
            }),
            this.initCollection({
                element_id: this.params.element_id,
                element_type: this.params.element_type,
                element_info: this.params.element_info
            }),
            this.params.notes && this.addNotes(this.params.notes, !0),
            this._$document.on("click" + this.ns, "#save_and_close_contacts_link", i.bind(this._preventSaveOrCancel, this)).on("click" + this.ns, i.bind(this._saveOrCancelOnClick, this)),
            r.event.dnd(window, this._onFileApiWindowOver, i.noop),
            0 !== this.params.element_id && this._initAmoJoSocket(),
            this.read(i.bind(function(e) {
                return e.entity.id === this.params.element_id
            }, this), this.params.element_id)
        },
        _getTwigTemplate: function() {
            var e;
            switch (AMOCRM.data.current_entity) {
            case "unsorted":
                e = "/tmpl/unsorted/notes/wrapper.twig";
                break;
            default:
                e = "/tmpl/notes/wrapper.twig"
            }
            return e
        },
        destroy: function() {
            r.event.dnd.off(window, this._onFileApiWindowOver, i.noop),
            l.prototype.destroy.apply(this, arguments),
            this.subscriptions.dispose(),
            AMOCRM.inbox.removeReader(this.readers)
        },
        _onFileApiWindowOver: function(e) {
            if (!this._editing || this._editing && this._editing._active_view && !this._editing._opened)
                return void this.notes.trigger("notes:dnd:compose", e);
            switch (!0) {
            case !i.isUndefined(this._editing) && !i.isUndefined(this._editing._active_view):
                this._editing._active_view.model.trigger("notes:dnd:window", e);
                break;
            case !i.isUndefined(this._editing) && i.isUndefined(this._editing._active_view):
                this._editing.model.trigger("notes:dnd:window", e)
            }
        },
        _toggleFilterAndTasksOnCompose: function(e) {
            var t = "";
            "open" === e && (t = "hidden"),
            this._elem("tasks").css("visibility", t),
            this._elem("filter_and_chat_users").css("visibility", t)
        },
        _initAmoJoSocket: function() {
            var e = $.socket.map(function(e) {
                return JSON.parse(e.data)
            })
              , t = e.filter(function(e) {
                return "message_created" === e.type
            }).map(function(e) {
                return e.data.message
            }).filter(i.bind(function(e) {
                var t = S.get();
                return t[e.chat_id] && !i.isEmpty(t[e.chat_id])
            }, this))
              , s = e.filter(function(e) {
                return "typing" === e.type
            }).map(function(e) {
                return e.data
            }).filter(i.bind(function(e) {
                var t = S.get();
                return t[e.chat_id] && !i.isEmpty(t[e.chat_id])
            }, this))
              , n = e.filter(function(e) {
                return "message_delivery_status_changed" === e.type
            }).map(function(e) {
                return e.data
            }).filter(i.bind(function(e) {
                var t = S.get();
                return t[e.chat_id] && !i.isEmpty(t[e.chat_id])
            }, this));
            this.subscriptions.add(t.subscribe(i.bind(function(e) {
                this.notes.trigger("add:from_socket", e)
            }, this), function(e) {
                throw e
            })),
            this.subscriptions.add(s.subscribe(i.bind(function(e) {
                this.notes.trigger("add:typing:from_socket", e)
            }, this), function(e) {
                throw e
            })),
            this.subscriptions.add(n.subscribe(i.bind(this._onChangeStatusMessage, this), function(e) {
                throw e
            }))
        },
        read: function(e, t) {
            this.readers = AMOCRM.inbox.addReader(e, t),
            AMOCRM.inbox.read({
                entity_id: t
            })
        },
        _setCallbacks: function(e) {
            return i.extend(this._callbacks || {}, e || {})
        },
        initCollection: function(e) {
            this.notes = this._addComponent(O, [], {
                element_type: e.element_type,
                element_id: e.element_id,
                element_info: e.element_info
            }),
            this.notes.on("fetched", this._addNotesAndScroll, this).on("fetched", this._renderCustomersGreenBar, this).on("sync note:view:update", this._onModelUpdate, this).on("destroy", this._onModelRemove, this).on("add:from_socket", this._onAddAmojoView, this).on("add:typing:from_socket", i.bind(this._onTypingFromSocket, this, "lead"), this).on("note:view:pin", this._onModelPin, this).on("add", this._onSendExternalChatCloseFollowUp, this).on("notes:update-sticky", i.bind(this._updateUnseen, this, 0), this)
        },
        _onChangeStatusMessage: function(e) {
            var t = this.notes.get(e.id);
            t.set("delivery_status", e.delivery_status)
        },
        _onAddAmojoView: function(e, t) {
            var s = i.find(this.notes.last(10), function(t) {
                return t.id === e.id
            }, this);
            this.removeTypingAfterSendMessage(e.author),
            i.isUndefined(s) && (this.notes.add(e),
            this.addNotes(e, t).then(i.bind(this._updateUnseen, this, 1)))
        },
        scrollFromTyping: function() {
            var e = this._elem("notes_scroller").scrollTop()
              , t = this._elem("notes_scroller")[0].offsetHeight
              , s = this._last_height === e + t;
            return i.bind(function() {
                s && this._scrollToEnd()
            }, this)
        },
        _getComposeView: function() {
            switch (AMOCRM.getBaseEntity()) {
            case "unsorted":
                return M;
            default:
                return x
            }
        },
        _setFullyLoaded: function() {
            var e = this._getComposeView();
            this._scrollToEnd(),
            this.notes.trigger("notes:update-sticky"),
            this.notes.setFullyLoaded(!0),
            this.notes.trigger("views:tasks:autosize"),
            this.params.can_add && (this._compose = this._addComponent(e, {
                el: this.$(".feed-compose"),
                notes: this.notes,
                $notes_scroller: this._elem("notes_scroller"),
                onToggle: i.bind(this._toggleFilterAndTasksOnCompose, this),
                setEdit: i.bind(this._setEdit, this),
                addNotes: i.bind(this._addNotes, this),
                getResponsibleId: i.bind(this.params.getResponsibleId, this),
                getExtraData: i.bind(this._getExtraData, this),
                scrollToEnd: i.bind(this._scrollToEnd, this),
                hide_users_list: !!this.params.hide_users_list
            })),
            this._addComponent(c, {
                element: this._elem("notes_scroller").get(0),
                conditions: {
                    "max-top": 300
                },
                throttle: 300,
                onLoadMore: i.bind(this.loadMore, this)
            }),
            this._scrollAutoMargin()
        },
        _preventSaveOrCancel: function(e) {
            e.stopPropagation(),
            this._$document.trigger("controls:hide")
        },
        _saveOrCancelOnClick: function(e) {
            2 !== e.button && this._editing && (this._editing.hasChanges() ? this._editing.save().then(i.bind(function() {
                this._editing = null
            }, this)) : this._editing = this._editing.cancel() || null)
        },
        _getMainEntity: function() {
            return i.isFunction(this.params.getMainEntity) ? this.params.getMainEntity() : {
                id: this.notes.element_id,
                element_type: this.notes.element_type
            }
        },
        _getLinkedEntities: function() {
            return i.isFunction(this.params.getLinkedEntities) ? this.params.getLinkedEntities() : {}
        },
        _collectEmailsFromCF: function(e) {
            return i.isFunction(this.params.collectEmailsFromCF) ? this.params.collectEmailsFromCF(e) : []
        },
        _setEdit: function(e) {
            return this._editing && this._editing.hasChanges() ? void this._editing.save().then(i.bind(function(e) {
                this._editing = null,
                this._setEdit.apply(this, e)
            }, this, arguments)) : (this._editing && this._editing.cancel(),
            this._editing = e,
            this._editing.edit(),
            void (this._callbacks.onChange && this._callbacks.onRevert && this._editing._form && !this._editing.not_check_changes && this._editing._form.model.on("has_changes", this._callbacks.onChange).on("has_reverted", this._callbacks.onRevert)))
        },
        _onFilter: function(e) {
            this.notes.filtering(e),
            this._updateTimeline(),
            this.notes.trigger("notes:update-sticky")
        },
        _onModelRemove: function(e, t) {
            t = t || {},
            this._resort(i.filter(this.views, function(t) {
                return t.view.model !== e
            })),
            t.silent || this.notes.trigger("view:removed", e)
        },
        _onModelUpdate: function(e) {
            var t;
            e !== this.notes && (t = this._getItemDate(e.toJSON()),
            i.each(this.views, function(i) {
                i.view.model !== e || e._pending || (i.date = t,
                this._isFutureTask(e) ? this._elem("tasks").prepend(i.view.el) : this._elem("notes").prepend(i.view.el))
            }, this),
            this._elem("tasks").is(":empty") ? this._elem("tasks_wrapper").addClass("empty") : (this._elem("tasks_wrapper").removeClass("empty"),
            this._checkTodayTasks()),
            this._resort())
        },
        _onModelPin: function(e) {
            this._onModelUpdate(e)
        },
        loadMore: function(e) {
            this.notes._pending || (e = e || {},
            this.$el.addClass("loading-more"),
            this.notes.fetch({
                page: this._page + 1,
                silent: e.silent
            }).then(i.bind(function(e) {
                e || this._toggleLoadMoreButton(),
                this._page++,
                this.$el.removeClass("loading-more")
            }, this)))
        },
        addNotes: function(e, t) {
            return new Promise(i.bind(function(s) {
                return o._preload(["/tmpl/cards/notes/wrapper.twig"])().then(i.bind(this._addNotes, this, e, t)).then(s)
            }, this))
        },
        _addNotes: function(e, t) {
            return t = t || {},
            i.isArray(e) || (e = [e]),
            AMOCRM.constant("user_rights").is_free_user && (e = i.reject(e, this._filterTasks, this)),
            i.chain(e).reduce(this._pickEqualMails, [], this).reduce(this._pickJoined, [], this).reduce(this._pickGrouped, [], this).reduce(this._pickRest, [], this),
            this.renderViews(t)
        },
        _addNotesAndScroll: function(e) {
            this.addNotes(e, {
                update_scroll_delta: !0
            }),
            this._scrollAutoMargin()
        },
        _pickEqualMails: function(e, t, i, s) {
            return s
        },
        _pickJoined: function(e, t, i, s) {
            return s
        },
        _pickGrouped: function(e, t, i, s) {
            return s
        },
        _pickRest: function(e, t) {
            return i.isEmpty(t) || t._is_joined_skip_this || this.renderView(t),
            []
        },
        _filterTasks: function(e) {
            return i.isFunction(e.get) ? !i.isUndefined(e.get("object_type")) && "tasks" === e.get("object_type").code : !1
        },
        renderView: function(e, t) {
            var s, n, o, r, a = {};
            switch (e = i.isArray(e) ? e : [e],
            r = this._getItemDate(e[0]),
            a.onAdd = i.bind(this._addNotes, this),
            !0) {
            case "grouped" === t:
                a.onUngroup = i.bind(this._onUngroup, this)
            }
            s = T(e[0], t),
            o = i.map(e, function(e) {
                return this.notes.get(e.id) ? this.notes.get(e.id) : this.notes.add(e)
            }, this),
            n = {
                date: r,
                view: this._addComponent(s, i.extend({
                    element_id: this.notes.element_id,
                    element_type: this.notes.element_type,
                    models: o,
                    onDestroy: i.bind(this._onNoteViewDestroy, this),
                    onEdit: i.bind(this._setEdit, this),
                    getOriginCollection: i.bind(this.notes.getOriginCollection, this.notes),
                    getExtraData: i.bind(this._getExtraData, this),
                    scrollUpdate: i.bind(this._scrollUpdate, this),
                    scrollToEnd: i.bind(this._scrollToEnd, this),
                    scrollToEl: i.bind(this._scrollToEl, this)
                }, a))
            },
            this._views_now.push(n),
            this.views.push(n)
        },
        render: function(e) {
            var t = this._getTwigTemplate();
            return o._preload([t])().then(i.bind(this._render, this, e))
        },
        _render: function(e) {
            var t = this._getTwigTemplate()
              , n = s(o({
                ref: t
            }).render(i.extend(e || {}, {
                element_type: this.notes.element_type,
                is_add_mode: !this.notes.element_id,
                is_free_user: AMOCRM.constant("user_rights").is_free_user,
                is_chat_enabled: -1 !== i.indexOf(E, this.notes.element_type),
                entity_type: AMOCRM.data.current_entity,
                last_used_type: u.storeWithExpiration.get(_.LS_LAST_TYPE)
            })));
            this._toggleLoadMoreButton(),
            this.el.innerHTML = n.html(),
            this._addComponent(A, {
                el: this.$(".js-notes-filter-wrapper"),
                element_type: this.notes.element_type,
                notes: this.notes,
                onFilter: i.bind(this._onFilter, this)
            }),
            this._initStacking(),
            this.notes.element_id || this._checkFirstTask()
        },
        renderViews: function(e) {
            return new Promise(i.bind(function(t) {
                return o._preload([this._getTwigTemplate()])().then(i.bind(this._renderViews, this, e)).then(t)
            }, this))
        },
        _renderViews: function(e) {
            var t = document.createDocumentFragment()
              , s = document.createDocumentFragment()
              , n = this._sortAlgo(this._views_now, this.notes.element_type)
              , o = 0
              , r = this._scrollUpdate();
            return e = e || {},
            this._views_now = [],
            i.each(n, function(e, i, n) {
                e.view.model.get("hide_in_feed") || (e.view._render(),
                this._isFutureTask(e.view.model) ? (s.appendChild(e.view.el),
                o++) : t.appendChild(e.view.el))
            }, this),
            this.el.querySelector(this._selector("tasks")).appendChild(s),
            this.el.querySelector(this._selector("notes")).appendChild(t),
            o && (this._elem("tasks_wrapper").removeClass("empty"),
            this._checkTodayTasks()),
            this._resort(),
            this.notes.trigger("views:added", n),
            r(e.update_scroll_delta),
            this._toggleLoadMoreButton(),
            new Promise(i.bind(function(e) {
                return e()
            }, this))
        },
        _scrollAutoMargin: function() {
            var e, t = this.$(this._selector("compose_scrollbar"));
            1 !== parseInt(t.attr("data-scroll-calc")) && (e = parseInt(t.css("right")),
            t.css("right", e + u.getScrollBarWidth("custom-scroll")),
            e && t.attr("data-scroll-calc", 1))
        },
        _scrollToEnd: function() {
            this._elem("notes_scroller").scrollTop(this._elem("notes_scroller")[0].scrollHeight)
        },
        _scrollUpdate: function() {
            var e = this._elem("notes_scroller").scrollTop();
            return i.bind(function(t) {
                var i = this._elem("notes_scroller")[0].scrollHeight
                  , s = 0;
                (t || this._last_height === e + this._elem("notes_scroller")[0].offsetHeight) && (s = i - this._last_height),
                this.$(".js-feed-spinner").remove(),
                this._elem("notes_scroller").scrollTop(e + s),
                this._setLastHeight(),
                this._scrollAutoMargin()
            }, this)
        },
        _scrollToEl: function(e) {
            var t = this._elem("notes_scroller").scrollTop()
              , i = e.position().top;
            this._elem("notes_scroller").scrollTop(t + i),
            this._setLastHeight()
        },
        _setLastHeight: function() {
            this._last_height = this._elem("notes_scroller")[0].scrollHeight
        },
        _onScroll: function(e, t) {
            var i = this._elem("filter_and_chat_users").height();
            e >= t - i && this._setUnseen(0)
        },
        _toggleLoadMoreButton: function() {
            var e = this.notes.hasNextPage();
            this.el.classList[e ? "remove" : "add"]("reached-end"),
            i.delay(i.bind(function() {
                e ? this.$(".js-feed-load-more").show() : this.$(".js-feed-load-more").hide()
            }, this), 100)
        },
        _checkFirstTask: i.noop,
        setFirstTaskState: i.noop,
        _stopTimeline: i.noop,
        _startTimeline: i.noop,
        _updateTimeline: i.noop,
        _renderCustomersGreenBar: i.noop,
        _onCustomersGreenLineOutside: i.noop,
        _initStacking: i.noop,
        _resort: function(e) {
            this.views = this._sortAlgo(e || this.views, this.notes.element_type),
            this._elem("tasks").removeClass("editing"),
            this._stopTimeline(),
            this._updateViewsSort(!0),
            this._updateViewsSort(!1),
            this._checkFirstTask(),
            this._startTimeline(),
            this.notes.trigger("notes:update-sticky")
        },
        _updateViewsSort: function(e) {
            var t, s = this.views;
            i.each(s, function(i) {
                this._isFutureTask(i.view.model) === e || i.view.model._pending || (t && t.nextSibling !== i.view.el && t.parentNode.insertBefore(i.view.el, t.nextSibling),
                t = i.view.el)
            }, this)
        },
        _isFutureTask: function(e) {
            var t = this._getItemDate(e.toJSON())
              , i = moment().tz(AMOCRM.system.timezone).unix();
            return "tasks" === e.get("object_type").code && !e.get("status") && t > i
        },
        _checkEditing: function(e, t) {
            !this._editing || !this._editing.hasChanges() || i.isFunction(this._editing.isSaved) && this._editing.isSaved() ? e() : this._editing.save().then(e, t)
        },
        save: function() {
            return new Promise(i.bind(function(e, t) {
                this._checkEditing(e, t)
            }, this))
        },
        saveUnsaved: function() {
            var e = [];
            return this.notes.each(function(t) {
                var i;
                t.get("id") || (i = new Promise(function(e) {
                    t.save({
                        success: e
                    })
                }
                ),
                e.push(i))
            }),
            e.length ? null : Promise.all(e)
        },
        setMainId: function(e) {
            this.params.element_id || (this.params.element_id = e,
            this.notes.setMainId(e),
            this._compose && i.isFunction(this._compose.setMainId) && this._compose.setMainId(e))
        },
        _getExtraData: function(e) {
            var t, s, n;
            switch (!0) {
            case !e:
                n = {
                    elements: [this._getMainEntity()].concat(this._getLinkedEntities()),
                    chats: S.get()
                };
                break;
            default:
                t = this.notes.getOriginCollection(e),
                s = t ? t.embedded || {} : {},
                n = {
                    leads: s.leads || {},
                    customers: s.customers || {},
                    transactions: s.transactions || {},
                    contacts: s.contacts || {},
                    companies: s.companies || {},
                    users: s.account ? s.account._embedded.users : {},
                    statuses: s.account ? s.account._embedded.status_pipeline : {},
                    pipelines: s.account ? s.account._embedded.pipelines : {}
                }
            }
            return i.extend(n, this.params.unsorted_data || {})
        },
        _onNoteViewDestroy: function(e) {
            this._elem("tasks").is(":empty") && (this._elem("tasks").removeClass("today"),
            this._elem("tasks_wrapper").addClass("empty")),
            this.notes.trigger("notes:view-destroy", e)
        },
        _onSendExternalChatCloseFollowUp: function(e) {
            var t, s;
            e.get("chat_id") && (t = i.find(this._getExtraData().chats || {}, function(t) {
                var i = e.get("author");
                return t.chat_id === e.get("chat_id") && i.id === h.current("amojo_id") && parseInt(t.entity_type) === AMOCRM.element_types.contacts
            }),
            s = this.notes.find(function(e) {
                var t = e.get("object_type") || {};
                return "tasks" === t.code && !e.get("status") && 1 === parseInt(e.get("type")) && parseInt(e.get("responsible_user")) === parseInt(h.current("id"))
            }),
            t && s && s.trigger("task:complete-after-chat"))
        },
        _checkTodayTasks: function() {
            var e = this._elem("tasks").children();
            1 === e.length && e[0].querySelector(this._selector("today_task")) ? this._elem("tasks").addClass("today") : this._elem("tasks").removeClass("today")
        },
        _updateUnseen: function(e) {
            var t = this._elem("notes_scroller").scrollTop()
              , s = this._elem("notes_scroller").get(0).scrollHeight
              , n = this._elem("notes_scroller").get(0).offsetHeight
              , o = s - (n + t)
              , r = "";
            e = this._unseen_count + (i.isNumber(e) ? e : 1),
            this._elem("unseen_count").get(0).style.bottom = "",
            o >= this._elem("filter_and_chat_users").height() && e > 0 ? (this._unseen_count = e,
            this._elem("unseen_count").html(this._unseen_count),
            this._elem("tasks").is(":visible") && (r = parseInt(getComputedStyle(this._elem("tasks").get(0)).bottom) + this._elem("tasks").get(0).offsetHeight + 15),
            this._elem("unseen_count").css({
                right: u.getScrollBarWidth("custom-scroll"),
                bottom: r
            })) : (this._unseen_count = 0,
            this._elem("unseen_count").html(""))
        },
        _setUnseen: function(e) {
            this._unseen_count = e,
            this._updateUnseen(0)
        },
        createModel: function(e, t) {
            var s = {};
            return i.extend({
                type: e || "system_note",
                object_type: {
                    code: "notes"
                },
                date_create: t.date,
                element_type: this.notes.element_type,
                element_id: this.notes.element_id
            }, t || {}, s)
        },
        _add: function(e) {
            return i.isArray(e) || (e = [e]),
            this.addNotes(e)
        }
    }),
    a.mixin(t, p, m, f, b, g, v, w, C, k),
    t
}),
define("lib/pages/feed_card", ["require", "underscore", "lib/common/urlparams", "lib/dev/meter/meter", "lib/common/fn", "lib/pages/card", "lib/interface/notes/notes", "lib/interface/amojo/collection", "lib/interface/amojo/mediator", "lib/interface/amojo/rtm"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/common/urlparams")
      , s = e("lib/dev/meter/meter")
      , n = e("lib/common/fn")
      , o = e("lib/pages/card")
      , r = e("lib/interface/notes/notes")
      , a = e("lib/interface/amojo/collection")
      , l = e("lib/interface/amojo/mediator")
      , c = e("lib/interface/amojo/rtm")
      , d = AMOCRM.constant("account") || {};
    return o.extend({
        initialize: function() {
            this._subscriptions = [],
            this._mrk = s.mrk()._mark,
            this.$notes_render = $.Deferred(),
            t.bindAll(this, "_addChat", "_removeChat"),
            l.on("add", this._addChat),
            l.on("remove", this._removeChat),
            o.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            c.unsubscribe(this._subscriptions),
            this._subscriptions = [],
            l.off("add", this._addChat),
            l.off("remove", this._removeChat),
            l.set({}),
            this.disableScroll(!1),
            o.prototype.destroy.apply(this, arguments)
        },
        cardBack: function() {
            this.disableScroll(!1),
            o.prototype.cardBack.apply(this, arguments)
        },
        load: function() {
            return $.when($.ajax({
                page_xhr: !0,
                page_is_card: !0,
                url: "/ajax/" + this.entity + "/detail/" + (this.id ? this.id : "add") + "?" + i.getQueryString(),
                data: {}
            }), this.$notes_render).then(t.bind(function(e) {
                this.html = e[0],
                this._$document.trigger("card:load:success"),
                this.render()
            }, this))
        },
        serverLoadCheck: function() {
            this._prepareNotes(),
            this.is_from_server ? (this.disableScroll(!0),
            this.$notes_render.then(t.bind(this.init, this))) : (this.animateInit(),
            this.load(),
            this.animationEnd.then(t.bind(this.disableScrollOnAnimationEnd, this, !0)))
        },
        makeFakeCard: function() {
            var e = o.prototype.makeFakeCard.apply(this, arguments);
            return e.css("margin-right", "-" + n.getScrollBarWidth() + "px"),
            e
        },
        init: function() {
            var e = document.getElementById("notes_holder");
            this._initChats(),
            e && (e.parentNode.appendChild(this.notes.el),
            e.parentNode.removeChild(e)),
            o.prototype.init.apply(this, arguments),
            this.notes._setFullyLoaded()
        },
        _prepareNotes: function() {
            var e = this;
            this.notes = this._addComponent(r, {
                user: AMOCRM.constant("user") || {},
                element_id: this.id,
                element_type: AMOCRM.element_types[AMOCRM.data.current_entity],
                element_info: AMOCRM.constant("card_element") || {},
                can_add: !0,
                free_user: AMOCRM.constant("user_rights").is_free_user,
                getResponsibleId: function() {
                    return AMOCRM.data.current_card ? AMOCRM.data.current_card.getMainUser() : void 0
                },
                getMainEntity: t.bind(function() {
                    var e = {
                        id: this.id,
                        element_type: AMOCRM.element_types[AMOCRM.getBaseEntity()]
                    };
                    return -1 !== t.indexOf(["contacts", "companies"], AMOCRM.getBaseEntity()) && AMOCRM.data.current_card && AMOCRM.data.current_card.model && (e.email = this._collectEmailsFromCF(AMOCRM.data.current_card.model.toJSON()),
                    e.name = AMOCRM.data.current_card.model.get("contact[NAME]")),
                    e
                }, this),
                getLinkedEntities: function() {
                    var t, i = [];
                    return AMOCRM.data.current_card && AMOCRM.data.current_card.linked_forms ? (t = AMOCRM.data.current_card.linked_forms.form_models.chain().filter(function(e) {
                        var t = parseInt(e.get("ELEMENT_TYPE"));
                        return parseInt(e.get("ID")) && (t === AMOCRM.element_types.contacts || t === AMOCRM.element_types.companies)
                    }).map(function(t) {
                        return {
                            id: parseInt(t.get("ID")),
                            element_type: parseInt(t.get("ELEMENT_TYPE")),
                            name: t.get("contact[NAME]"),
                            avatar: t.get("avatar"),
                            email: e._collectEmailsFromCF(t.toJSON())
                        }
                    }).value(),
                    i.concat(t)) : []
                },
                collectEmailsFromCF: t.bind(this._collectEmailsFromCF, this)
            }),
            this.notes.render({
                is_add_mode: !this.id,
                preload: !0
            }).then(this.$notes_render.resolve),
            this.id && (this.notes.loadMore(),
            this.listenToOnce(this.notes.notes, "views:added", function() {
                s.msr("NOTES_RENDERED", this._mrk)
            }, this),
            this.listenTo(this.notes.notes, "collection:added", function(e) {
                e.id && this._manageChatSubscription("subscribe", e.options)
            }, this).listenTo(this.notes.notes, "collection:removed", function(e) {
                e.id && this._manageChatSubscription("unsubscribe", e.options)
            }, this))
        },
        _initChats: function() {
            d.amojo_enabled && t.each(l.get(), this._addChat, this)
        },
        _manageChatSubscription: function(e, i) {
            var s = t.pick(i, "chat_id", "token");
            "subscribe" === e ? (this._subscriptions.push(s),
            c.subscribe(s)) : (this._subscriptions = t.without(this._subscriptions, s),
            c.unsubscribe(s))
        },
        _addChat: function(e) {
            -1 !== t.indexOf(t.values(AMOCRM.element_types), parseInt(e.entity_type)) && (this.notes.notes.addCollection(new a([],t.extend({
                id: e.chat_id
            }, e))),
            this.notes.notes.fetch({
                collections: [e.chat_id],
                page: 1
            }))
        },
        _removeChat: function(e) {
            var t = this.notes.notes.findCollection(e);
            this.notes.notes.removeCollection(t)
        },
        disableScrollOnAnimationEnd: function() {
            this.disableScroll(!0),
            this.$animate_card.css("margin-right", "")
        },
        disableScroll: function(e) {
            var t = document.getElementsByTagName("html")[0];
            e ? t.style.overflow = "hidden" : t.style.overflow = ""
        },
        _collectEmailsFromCF: function(e) {
            return t.chain(e || {}).filter(function(e, t) {
                return /CFV\[\d+\]\[\w+\]\[VALUE\]/gi.exec(t) && n.checkEmail(e)
            }).map(function(e) {
                return e
            }).value()
        }
    })
}),
define("lib/components/lists/customers", ["require", "underscore", "lib/components/lists/base/collection", "lib/interface/customers/card/model", "lib/components/lists/edit/editable_list", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/lists/base/collection")
      , s = e("lib/interface/customers/card/model")
      , n = e("lib/components/lists/edit/editable_list")
      , o = e("lib/common/fn");
    return n.extend({
        list_items: null,
        _title: function() {
            return o.i18n("Customers")
        },
        loadPage: function(e) {
            return e = e || {},
            e.sync_params = t.extend({
                headers: {
                    Accept: "application/json"
                }
            }, e.sync_params),
            n.prototype.loadPage.call(this, e)
        },
        initFilter: function(e) {
            var t = {
                separate_order_by: !0
            };
            return n.prototype.initFilter.call(this, e, t)
        },
        createCollection: function() {
            this.list_items = new i([],{
                model: s
            })
        },
        getIDblock: function(e) {
            var t = {
                has_multi: "edit",
                manage_tags: "edit"
            }
              , i = t[e] || "edit";
            return this.list_items.reject(function(e) {
                return e.hasRightsFor(i)
            })
        }
    })
}),
define("lib/pages/customers/list", ["require", "underscore", "cocktail", "lib/pages/list", "lib/components/lists/customers", "lib/components/lists/mixins/navigation", "lib/components/lists/actions/import"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("cocktail")
      , s = e("lib/pages/list")
      , n = e("lib/components/lists/customers")
      , o = e("lib/components/lists/mixins/navigation")
      , r = e("lib/components/lists/actions/import")
      , a = s.extend({
        _ListHandler: n,
        events: t.extend({}, s.prototype.events || {}),
        _getEndpoint: function() {
            return "/ajax/v2/" + AMOCRM.data.current_entity + "/list/"
        },
        _makeRequest: function(e, i) {
            return i = i || {},
            s.prototype._makeRequest.call(this, e, t.extend({
                headers: t.extend({
                    Accept: "application/json"
                }, i.headers)
            }, i))
        },
        construct: function() {
            s.prototype.construct.apply(this, arguments),
            this._checkUserRights()
        },
        _renderPage: function(e) {
            e.response.width = e.response.settings && e.response.settings.width,
            s.prototype._renderPage.call(this, e)
        }
    });
    return i.mixin(a, r, o),
    a
}),
define("lib/components/lists/actions/close_tasks", ["require", "underscore", "lib/components/modals/action", "twig", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/modals/action")
      , s = (e("twig"),
    e("lib/common/fn"));
    return i.extend({
        _parent_type: 0,
        _elements_ids: [],
        _elements_collection: null,
        _url: "/ajax/v1/tasks/complete/",
        setParams: function(e) {
            var s = i.prototype.setParams.apply(this, arguments);
            if (!(e && e.id && t.isArray(e.id) && e.id.length))
                throw new Error("Params.id is empty: " + JSON.stringify({
                    params: e
                }));
            if (!e || !e.parent_type)
                throw new Error("Params.parent_type is empty: " + JSON.stringify({
                    params: e
                }));
            return this._parent_type = parseInt(e.parent_type, 10),
            this._elements_ids = t.map(e.id, function(e) {
                var t = parseInt(e, 10);
                if (!t || 0 > t)
                    throw new Error("Id must be positive number, given: " + e);
                return t
            }),
            s
        },
        getDataForRequest: function() {
            return {
                request: {
                    tasks: {
                        complete: t.map(this._elements_ids, function(e) {
                            return {
                                element_type: this._parent_type,
                                element_id: e
                            }
                        }, this)
                    }
                }
            }
        },
        isValidResponse: function(e) {
            return !!e
        },
        _template: "/tmpl/common/modal/confirm.twig",
        getTemplateParams: function() {
            return {
                text: s.i18n("Would you like to complete all tasks?"),
                button_class: "button-input_blue",
                accept_text: s.i18n("Complete"),
                decline_text: s.i18n("Not complete")
            }
        }
    })
}),
define("lib/pages/customers/pipeline", ["require", "jquery", "underscore", "twig", "cocktail", "lib/pages/base/pipeline_list", "lib/interface/search/search", "lib/components/base/modal", "lib/components/base/pipeline", "lib/components/base/autoload", "lib/interface/left_menu/index", "lib/components/lists/actions/customers/delete", "lib/components/lists/actions/close_tasks", "lib/components/lists/actions/make_purchase", "lib/interface/customers/card/model", "lib/common/urlparams", "lib/common/fn", "lib/interface/leads/mixins/pipeline_tags", "lib/components/lists/actions/import", "lib/components/lists/mixins/navigation"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/pages/base/pipeline_list"), a = e("lib/interface/search/search"), l = e("lib/components/base/modal"), c = e("lib/components/base/pipeline"), d = e("lib/components/base/autoload"), u = e("lib/interface/left_menu/index"), h = e("lib/components/lists/actions/customers/delete"), _ = e("lib/components/lists/actions/close_tasks"), p = e("lib/components/lists/actions/make_purchase"), m = e("lib/interface/customers/card/model"), f = e("lib/common/urlparams"), g = e("lib/common/fn"), b = e("lib/interface/leads/mixins/pipeline_tags"), v = e("lib/components/lists/actions/import"), y = e("lib/components/lists/mixins/navigation");
    return t = r.extend({
        _title: function() {
            return g.i18n("Customers")
        },
        params: null,
        page: 1,
        status_change_ajax: {},
        endpoint: "/ajax/v2/customers/pipeline/",
        can_load_more: !0,
        preload: ["/tmpl/customers/common/search_summary.twig", "/tmpl/customers/pipeline/item.twig", "/tmpl/customers/pipeline/page.twig", "/tmpl/customers/pipeline/header_summary_tmpl.twig"],
        template: function() {
            return this._getTemplateAndHolder().template
        },
        _item_template: null,
        item_template: function() {
            return null === this._item_template && (this._item_template = n({
                ref: "/tmpl/customers/pipeline/item.twig"
            })),
            this._item_template
        },
        _selectors: function() {
            return this._selectors_obj
        },
        _selectors_obj: {
            pipeline: "#pipeline_holder",
            manage: "#pipeline_manage",
            more: "#leads_pipeline_load_more",
            list_top_search_summary: "#list-top-search__summary"
        },
        _classes: function() {
            return {
                column: "js-pipeline_status",
                has_not_purchase_column: "js-has_not_purchase",
                closed_column: "js-closed",
                column_summary: "js-header-summary",
                cell: "pipeline_cell",
                call_head: "pipeline_cell-head",
                row: "js-pipeline-row",
                item: "pipeline_leads__item",
                purchase_block: "js-purchase-block",
                quick_lead_wrapper: "pipeline_leads__quick_add__wrapper",
                check_access_delete: "js-need_right_for_delete",
                check_access_edit: "js-need_right_for_edit"
            }
        },
        events: {
            "click #leads_pipeline_load_more": "loadMore",
            "click .pipeline_leads__tags-inner": "editTags"
        },
        construct: function(e) {
            this.params = e || {},
            this.response = e.response ? {
                response: e.response
            } : {},
            this.params.res = this.response,
            this._prepareFilter(this.response),
            this.initPipeline(),
            this._addComponent(d, {
                onLoadMore: s.bind(this.loadMore, this)
            }),
            this.checkScrollBar(),
            this.loadMore(),
            this.search = this._addComponent(a, this._getSearchOptions())
        },
        _getEndpoint: function(e) {
            var t;
            return e = e || [],
            t = s.isArray(e) || s.isArguments(e) ? e[1] : e,
            this.endpoint + (t ? "?" + t : "")
        },
        _getEndpointData: function() {
            return f.getQueryString()
        },
        _renderPage: function(e) {
            e = s.extend(e, this._getTemplateAndHolder()),
            r.prototype._renderPage.call(this, e)
        },
        _renderSummary: function(e) {
            var t = g.has_keys(e, ["summary", "total"]) ? e.summary.total : {};
            this.insertTemplate(this._elem("list_top_search_summary"), "/tmpl/customers/common/search_summary.twig", t)
        },
        _makeRequest: function(e, t) {
            return t = t || {},
            t.headers = s.extend(t.headers || {}, {
                Accept: "application/json"
            }),
            r.prototype._makeRequest.call(this, e, t)
        },
        calculateSummary: function(e, t, i) {
            var s = parseInt(e.find(".js-count").data("count")) || 0
              , n = parseInt(e.find(".js-price").data("price")) || 0;
            return i ? (n += t,
            ++s) : (n -= t,
            --s),
            0 > n && (n = 0),
            0 > s && (s = 0),
            {
                count: s,
                next_price: n
            }
        },
        insertTemplate: function(e, t, i) {
            var s = n({
                ref: t
            });
            e.html(s.render(i))
        },
        loadMore: function() {
            var e;
            if (!(AMOCRM.data.is_card || AMOCRM.is_touch_device && u.isHoverMenuVisible())) {
                if (this.more_loading || !this.can_load_more)
                    return !1;
                this.setLoadingState(!0),
                e = f.getQueryString() || "",
                e += (e.length > 0 ? "&" : "") + "PAGEN_1=" + ++this.page,
                i.ajax({
                    url: this._getEndpoint(""),
                    headers: {
                        Accept: "application/json"
                    },
                    data: f.QStoJSON(e),
                    type: "GET",
                    dataType: "json"
                }).always(s.bind(this.setLoadingState, this, !1)).done(s.bind(this.proceedDataFromLoadMore, this))
            }
        },
        setLoadingState: function(e) {
            e = !!e,
            this.more_loading = e,
            this._elem("more").toggle(e),
            this._elem("more").toggleClass("pipeline_leads__load_more-loading", e)
        },
        proceedDataFromLoadMore: function(e) {
            this.can_load_more = e.summary && e.summary.current && e.summary.current.count > 0,
            this.can_load_more ? this.renderItems(e) : Modernizr.csstransitions ? (this._elem("more").removeClass("leads-pipeline__autoload-load-more-shown"),
            this._elem("more").one(AMOCRM.transition_event, function() {
                i(this).hide()
            })) : this._elem("more").hide()
        },
        renderItems: function(e) {
            s.each(e.columns, function(t, n) {
                var o = "";
                s.each(t.rows, function(i) {
                    o += this.item_template().render(s.extend(e, {
                        row: t,
                        item: i,
                        can_edit: !0
                    }))
                }, this),
                i(this._elem("row").get(n)).append(o)
            }, this),
            this.pipeline.refresh()
        },
        onDeleteSuccess: function(e, t) {
            var i, s = e.closest(this._selector("column")).find(this._selector("column_summary"));
            i = this.calculateSummary(s, t, !1),
            this.insertTemplate(s, "/tmpl/customers/pipeline/header_summary_tmpl.twig", i),
            i = this.calculateSummary(this._elem("list_top_search_summary"), t, !1),
            this.insertTemplate(this._elem("list_top_search_summary"), "/tmpl/customers/common/search_summary.twig", i),
            e.remove()
        },
        onConfirmDestroy: function(e) {
            e.length && e.removeClass("h-hidden")
        },
        checkScrollBar: function() {
            0 === g.scrollBarWidth ? this._elem("more").length > 0 && g.isFFWithBuggyScrollbar() && this.$(".hs__pane").css("background-color", this._$body.css("background-color")) : this._elem("pipeline").addClass("ff-scroll-has-height")
        },
        _getSearchOptions: function() {
            return {
                filter: {
                    el: i("#sidebar"),
                    is_list: !0
                }
            }
        },
        initPipeline: function() {
            var e = this;
            this.pipeline = this._addComponent(c, {
                el: this.$el,
                hs_options: {
                    static_width: !0,
                    hide_scrollbar: !0,
                    no_boundary: !0
                },
                manage: {
                    el: this._elem("manage"),
                    drop: function(t) {
                        var n = t.draggable.data("period-duration")
                          , o = i(this).data("action")
                          , r = e.getItemId(t.draggable)
                          , a = e.getItemName(t.draggable)
                          , l = parseInt(t.draggable.data("next-price")) || 0;
                        switch (o) {
                        case "delete":
                            e.proceedDelete({
                                customer: {
                                    id: r,
                                    name: a
                                },
                                callbacks: {
                                    complete: s.bind(e.onDeleteSuccess, e, t.draggable, l),
                                    destroy: s.bind(e.onConfirmDestroy, e, t.draggable)
                                }
                            });
                            break;
                        case "close":
                            e.proceedClose({
                                id: r,
                                name: a
                            }, s.bind(e.onDeleteSuccess, e, t.draggable, l));
                            break;
                        case "purchase":
                            e.showPurchaseModal({
                                item_id: r,
                                uiItem: t.draggable,
                                next_date: t.draggable.attr("data-next-date"),
                                next_price: l,
                                period_duration: n,
                                success: function() {
                                    i(document).trigger("page:reload")
                                },
                                destroy: s.bind(e.onConfirmDestroy, e, t.draggable)
                            })
                        }
                    }
                },
                appendTo: this.$el,
                change: s.bind(function(e, t) {
                    var i = this.getItemId(e.item)
                      , s = moment.unix(this.getHasNotPurchaseRowPeriodStart());
                    this.moveBetweenStatuses({
                        old_period: t.item_old.attr("data-id"),
                        new_period: t.item_new.attr("data-id"),
                        item_id: i,
                        closed_period_start: s,
                        uiItem: e.item,
                        old_period_type: t.item_old.attr("data-type"),
                        new_period_type: t.item_new.attr("data-type"),
                        interval: {
                            type: t.item_new.attr("data-type"),
                            length: t.item_new.attr("data-period-duration")
                        }
                    })
                }, this),
                immutable: function(e) {
                    e.item.removeAttr("style")
                },
                start: function(t) {
                    var s = t.item && t.item.hasClass("js-can_edit")
                      , n = t.item && t.item.hasClass("js-can_delete")
                      , o = i(this).closest(e._selector("column")).hasClass(e._class("closed_column"));
                    e._elem("manage").find(e._selector("check_access_edit")).toggleClass("hidden", !s),
                    e._elem("manage").find(e._selector("check_access_delete")).toggleClass("hidden", !n),
                    e.$el.addClass("pipeline-manage-" + this.getAttribute("data-id")),
                    t && t.helper && o && t.helper.find(e._selector("purchase_block")).addClass("hidden")
                },
                manageHide: function() {
                    e.$el.removeClass("pipeline-manage-" + this.getAttribute("data-id"))
                }
            })
        },
        getHasNotPurchaseRowPeriodStart: function() {
            var e = this._elem("column").filter(this._selector("has_not_purchase_column"))
              , t = e.find(this._selector("row"));
            return t.attr("data-period-from")
        },
        statusChange: function(e) {
            var t, n, o = e.uiItem, r = parseInt(o.data("next-price")), a = "after" == e.new_period_type, c = g.i18n(a ? "Purchase" : "Next purchase");
            t = i("#status_id_" + e.old_period).find(this._selector("column_summary")),
            n = this.calculateSummary(t, r, !1),
            this.insertTemplate(t, "/tmpl/customers/pipeline/header_summary_tmpl.twig", n),
            t = i("#status_id_" + e.new_period).find(this._selector("column_summary")),
            n = this.calculateSummary(t, r, !0),
            this.insertTemplate(t, "/tmpl/customers/pipeline/header_summary_tmpl.twig", n),
            o.find(".pipeline_leads__purchase-info").addClass("pipeline_leads__purchase-info_refreshing"),
            o.find(".pipeline_customers__item-before-close").toggle(a),
            o.find(".pipeline_customers__item-next-date_label").text(c),
            this.status_change_ajax[e.item_id] && 4 !== this.status_change_ajax[e.item_id].readyState && this.status_change_ajax[e.item_id].abort();
            var d = {
                id: e.item_id,
                next_date: e.new_period
            };
            this.status_change_ajax[e.item_id] = new m(d).save({
                success: s.bind(function(t) {
                    var i = g.twigFilterDate(t.get("next_date"), "date_short")
                      , s = moment.unix(t.get("next_date")).diff(e.closed_period_start, "days") + 1;
                    e.uiItem.attr("data-next_date", t.get("next_date")).find(".pipeline_leads__purchase-info").removeClass("pipeline_leads__purchase-info_refreshing"),
                    e.uiItem.find(".pipeline_customers__item-next-date_value").text(i),
                    e.uiItem.find(".pipeline_customers__item-before-close_value").text(s + g.i18n("todo_marker_days")),
                    this.$el.removeClass("pipeline-show-manage")
                }, this),
                error: s.bind(function(e) {
                    "abort" !== e.statusText && new l({
                        init: this.showError
                    })
                }, this),
                complete: s.bind(function() {
                    this.status_change_ajax[e.item_id] = void 0
                }, this)
            })
        },
        moveBetweenStatuses: function(e) {
            switch (e.new_period) {
            case "delete":
                break;
            default:
                e.old_period !== e.new_period && this.statusChange(e),
                e.uiItem.removeAttr("style")
            }
        },
        getItemId: function(e) {
            return e.data("id")
        },
        getItemName: function(e) {
            return e.find(".pipeline_leads__lead-title-text").text()
        },
        proceedDelete: function(e) {
            e = e || {},
            this._addComponent(h, {
                id: e.customer && [e.customer.id],
                collection: [e.customer],
                complete: e.callbacks && e.callbacks.complete,
                destroy: e.callbacks && e.callbacks.destroy
            })
        },
        proceedClose: function(e, t) {
            var i = {
                id: [e.id],
                collection: [e],
                complete: t,
                parent_type: AMOCRM.element_types.customers
            };
            this._addComponent(_, i),
            new m({
                id: e.id,
                next_date: 0
            }).save({
                success: t
            })
        },
        showPurchaseModal: function(e) {
            e = e || {},
            this._addComponent(p, {
                id: e.item_id,
                next_date: e.next_date,
                next_price: e.next_price,
                periodicity: e.period_duration,
                complete: e.success,
                destroy: e.destroy
            })
        }
    }),
    o.mixin(t, y, b, v),
    t
}),
define("lib/pages/contacts/list", ["require", "underscore", "cocktail", "lib/pages/list", "lib/components/lists/base/list", "lib/components/lists/edit/editable_list", "lib/common/urlparams", "lib/common/fn", "lib/components/lists/actions/import", "lib/components/lists/actions/export"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("cocktail"), n = e("lib/pages/list"), o = e("lib/components/lists/base/list"), r = e("lib/components/lists/edit/editable_list"), a = e("lib/common/urlparams"), l = e("lib/common/fn"), c = e("lib/components/lists/actions/import"), d = e("lib/components/lists/actions/export"), u = {
        contacts: 2,
        companies: 3
    };
    return t = n.extend({
        _getEndpointData: function(e) {
            var t = a.getQueryString()
              , s = [];
            return (AMOCRM.data.entity_changed || AMOCRM.data.current_card) && s.push("need_filter=Y"),
            e[1] && s.push("PAGEN_1=" + e[1]),
            i.indexOf(["contacts", "companies"], e[0]) >= 0 && s.push("element_type=" + u[e[0]]),
            t + (s.length ? "&" : "") + s.join("&")
        },
        preload: (n.prototype.preload || []).concat(["/tmpl/contacts/common/summary.twig"]),
        _updateResponseData: function(e) {
            var t;
            return e.user_rights && e.user_rights.contacts && (t = l.getUserRights(e.user_rights.contacts),
            e.user_rights.contacts = t),
            e
        },
        construct: function(e) {
            var t = "trash" === AMOCRM.data.current_entity.toString().split("-").pop();
            this._ListHandler = t ? o : r,
            AMOCRM.data.element_type = e.route_args[0] || "",
            n.prototype.construct.apply(this, arguments),
            this.checkImportHash()
        }
    }),
    s.mixin(t, c, d),
    t
}),
define("lib/pages/unsorted/card", ["require", "underscore", "twig", "lib/common/urlparams", "lib/dev/meter/meter", "lib/common/fn", "lib/pages/feed_card", "lib/components/unsorted/api", "lib/interface/unsorted/pipeline/collection", "lib/interface/unsorted/pipeline/model", "lib/interface/notes/notes", "lib/interface/amojo/collection", "lib/interface/amojo/mediator", "lib/components/widgets/block_actions", "lib/core/updater"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/common/urlparams")
      , n = e("lib/dev/meter/meter")
      , o = e("lib/common/fn")
      , r = e("lib/pages/feed_card")
      , a = e("lib/components/unsorted/api")
      , l = e("lib/interface/unsorted/pipeline/collection")
      , c = (e("lib/interface/unsorted/pipeline/model"),
    e("lib/interface/notes/notes"))
      , d = (e("lib/interface/amojo/collection"),
    e("lib/interface/amojo/mediator"))
      , u = e("lib/components/widgets/block_actions")
      , h = (AMOCRM.constant("account") || {},
    e("lib/core/updater"))
      , _ = "/tmpl/unsorted/card.twig";
    return r.extend({
        initialize: function() {
            this.unsorted_api = a,
            this._mrk = n.mrk()._mark,
            this.$notes_render = $.Deferred(),
            this._addChat = t.bind(this._addChat, this),
            this._removeChat = t.bind(this._removeChat, this),
            this.disableScroll(!0),
            this.unsorted_collection = new l,
            r.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            this.disableScroll(!1),
            d.off("add", this._addChat),
            d.off("remove", this._removeChat),
            d.set({}),
            r.prototype.destroy.apply(this, arguments)
        },
        extendAmojoChats: function() {
            var e = {
                entity_id: AMOCRM.constant("card_id"),
                entity_type: AMOCRM.constant("card_element_type")
            };
            t.extend(AMOCRM.constant("amojo_chats")[this.unsorted_params.source_data.origin.chat_id], e)
        },
        mergeParams: function() {
            this.extendAmojoChats();
            var e = AMOCRM.constant("card_render_params")
              , t = this.unsorted_params
              , i = this.social_service
              , s = AMOCRM.constant("amojo_origins")
              , n = s[i];
            return e.main.name = e.lang.application_from + t.source_data.site,
            e.client_name = t.data.contacts[0].name,
            e.main.MAIN_USER_NAME = e.user.user_obj.username,
            e.profile = {
                profile_avatar: t.data.contacts[0].profiles[i].profile_avatar,
                profile_link: t.data.contacts[0].profiles[i].profile_link,
                service: i,
                main: 1
            },
            n && (e.profile.service_icon = n.icon),
            e.linked_entity.contact.main[0].profiles = {},
            e.linked_entity.contact.main[0].profiles[i] = e.profile,
            e
        },
        renderTemplate: i._preload([_]),
        getTemplateParams: function() {},
        getHTML: function() {
            var e = this.mergeParams();
            return i({
                ref: _
            }).render(e)
        },
        load: function() {
            return $.ajax({
                page_xhr: !0,
                page_is_card: !0,
                url: "/ajax/" + this.entity + "/detail/" + (this.id ? this.id : "add") + "?" + s.getQueryString(),
                data: {}
            }).done(t.bind(function(e) {
                this.html = e,
                this._$document.trigger("card:load:success"),
                this.render(!1),
                this.loadUnsorted()
            }, this))
        },
        loadUnsorted: function() {
            var e, i = this, s = this.id, n = {};
            i.unsorted_collection.fetch({
                data: {
                    uid: s
                },
                success: t.bind(function(i, s) {
                    e = o.cleanResponse(s),
                    0 !== e.unsorted.list.length ? (this.unsorted_params = t.find(e.unsorted.list, function(e, t) {
                        return e
                    }),
                    this._chat_id = this.unsorted_params.source_data.origin.chat_id,
                    this.social_service = Object.keys(this.unsorted_params.data.contacts[0].profiles)[0],
                    n.name = this.unsorted_params.data.contacts[0].name,
                    n.avatar = this.unsorted_params.data.contacts[0].profiles[this.social_service].profile_avatar,
                    this._prepareNotes(n)) : this._prepareNotes({}),
                    $.when(this.$notes_render).done(t.bind(function() {
                        this.renderTemplate().then(t.bind(function() {
                            0 !== e.unsorted.list.length ? this.html = this.getHTML() : this.html = {},
                            this.render()
                        }, this))
                    }, this))
                }, this)
            })
        },
        render: function(e) {
            this.html && (this.$el.show().html(this.html),
            this.animated && (this.$el.attr("data-card-active") || (this.fakeCardHide(),
            this.$page_holder.hide(),
            this.$widgets_block.removeClass("card-loading-widgets_hidden")),
            this._$document.trigger("page:change:stop"))),
            (e !== !1 || t.isUndefined(e)) && this.init({
                unsorted_collection: this.unsorted_collection
            })
        },
        serverLoadCheck: function() {
            this.is_from_server ? this.loadUnsorted() : (this.animateInit(),
            this.load())
        },
        animateInit: function() {
            var e = function() {
                this.animated = !0,
                this._$document.triggerHandler("card:animated"),
                this.animationEnd.resolve(),
                h.check()
            };
            return this.$animate_card = this.makeFakeCard(),
            this.el.getAttribute("data-card-active") ? ("yes" !== s.getQueryParam("after_add") && this._showOverlay(),
            this.fakeCardHide(),
            this._$document.scrollTop(0),
            void e.call(this)) : (u.getCardWidgetsCount() > 0 && this.$animate_card.addClass("js-has-widgets"),
            this._$document.triggerHandler("controls:hide"),
            this._$document.triggerHandler("page:change:start"),
            this.has_transitions ? this.$animate_card.one(AMOCRM.animation_event, t.bind(function() {
                this.animation_back || e.call(this)
            }, this)) : e.call(this),
            document.body.appendChild(this.$animate_card.get(0)),
            this.$animate_card[0].classList.add("card-holder_animate"),
            void (this.$animate_card[0].style.display = ""))
        },
        init: function() {
            document.getElementById("notes_holder");
            r.prototype.init.apply(this, arguments)
        },
        _prepareNotes: function(e) {
            this.notes = this._addComponent(c, {
                user: AMOCRM.constant("user") || {},
                element_id: this.id,
                element_type: AMOCRM.element_types[AMOCRM.data.current_entity],
                element_info: AMOCRM.constant("card_element") || {},
                can_add: !0,
                free_user: AMOCRM.constant("user_rights").is_free_user,
                hide_users_list: !0,
                unsorted_data: e || {},
                class_name: "unsorted-wrapper",
                getResponsibleId: function() {
                    return AMOCRM.data.current_card ? AMOCRM.data.current_card.getMainUser() : void 0
                }
            }),
            this.notes.render({
                is_add_mode: !this.id,
                options: AMOCRM.constant("card_render_params").options
            }).then(this.$notes_render.resolve),
            this.id && (this.notes.loadMore(),
            this.listenToOnce(this.notes.notes, "views:added", function() {
                n.msr("NOTES_RENDERED", this._mrk)
            }, this),
            this.listenTo(this.notes.notes, "collection:added", function(e) {
                e.id && this._manageChatSubscription("subscribe", e.options)
            }, this).listenTo(this.notes.notes, "collection:removed", function(e) {
                e.id && this._manageChatSubscription("unsubscribe", e.options)
            }, this))
        }
    })
}),
define("lib/interface/mail/templates/item", ["require", "jquery", "elements_view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("elements_view");
    return t = s.extend({
        _selectors: function() {
            return {
                template_item__name: ".template-item__name"
            }
        },
        events: {
            "click .template-item__body": "clickToEdit"
        },
        initialize: function(e) {
            e = e || {},
            this.$el.data("view", this),
            this.model.on("template:destroy", this.destroy, this),
            this.model.on("change:name", this.rerenderName, this),
            this.model.on("remove", this.destroy, this)
        },
        destroy: function() {
            s.prototype.remove.call(this)
        },
        rerenderName: function() {
            var e = this.model.get("name");
            this._findElem("template_item__name").html(e)
        },
        clickToEdit: function(e) {
            i(e.target).closest(".template-item__wrapper").addClass("template-item__wrapper_active-edit"),
            this.model.trigger("edit:request", e, this.model.toJSON())
        }
    })
}),
define("lib/interface/mail/templates/mixins/attachments", ["require", "underscore", "twig", "FileAPI", "lib/common/fn", "lib/components/mail/api_v2"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("FileAPI")
      , n = e("lib/common/fn")
      , o = e("lib/components/mail/api_v2");
    return {
        events: {
            "click .js-attach-remove": "_removeAttachClick"
        },
        _render: function() {
            t.bindAll(this, "_onFileApiInput", "_onFileApiElDrop", "_onFileApiElOver", "_onFileApiWindowOver"),
            this._makeAttachmentsActive(!0)
        },
        initialize: function() {
            t.bindAll(this, "_startAttachUploading"),
            this._startAttachUploadingDebounced = t.debounce(this._startAttachUploading, 400)
        },
        destroy: function() {
            this._makeAttachmentsActive(!1)
        },
        _removeAttachClick: function(e) {
            var i = $(e.currentTarget).closest(".js-attach-item")
              , s = t.findWhere(this._attaches_queue, {
                name_salt: i.attr("data-id")
            });
            s || (s = t.findWhere(this._attachments, {
                name: i.attr("data-id")
            })),
            i.remove(),
            s && (this.setChanges({
                attaches: !0
            }),
            this._attachments = t.reduce(this._attachments, function(e, t, i) {
                return (s.uuid && t.id !== s.uuid || s.id && t.id !== s.id) && e.push(t),
                e
            }, []))
        },
        _makeAttachmentsActive: function(e) {
            e ? (this._attachments = n.has_keys(this, ["options", "params", "attachments"]) ? this.options.params.attachments : [],
            this._attaches_promises = [],
            this._attaches_queue = [],
            s.event.on(this.$('input[type="file"]').get(0), "change", this._onFileApiInput),
            s.event.dnd(this._elem("content").get(0), this._onFileApiElOver, this._onFileApiElDrop),
            s.event.dnd(window, this._onFileApiWindowOver, t.noop)) : (s.event.off(this.$('input[type="file"]').get(0), "change"),
            s.event.dnd.off(this._elem("content").get(0)),
            s.event.dnd.off(window))
        },
        _renderAttach: function(e, s) {
            var n = this.$('.js-attach-item[data-id="' + (s.id || e) + '"]')
              , o = i({
                ref: "/tmpl/mail/modal/attachment.twig"
            }).render(t.extend({
                filename: t.escape(e),
                id: t.escape(e)
            }, s || {}));
            n.length ? n.replaceWith(o) : this.$(".js-attachments").append(o)
        },
        _onAddAttach: function(e) {
            var t = this._attaches_queue.find(function(t) {
                return t.name === e.name
            });
            t || (e.name_salt = n.randHex() + "_" + e.name,
            this._attaches_queue.push(e),
            this._renderAttach(e.name, {
                id: e.name_salt,
                loading: !0
            }),
            this._startAttachUploadingDebounced(),
            this.setChanges({
                attaches: !0
            }))
        },
        _onFileApiInput: function(e) {
            t.each(s.getFiles(e), this._onAddAttach, this)
        },
        _onFileApiElDrop: function(e) {
            this._elem("content").removeClass("js-dnd-after js-dnd-before"),
            t.each(e, this._onAddAttach, this)
        },
        _onFileApiElOver: function(e) {
            e ? this._elem("content").addClass("js-dnd-after") : this._elem("content").removeClass("js-dnd-after")
        },
        _onFileApiWindowOver: function(e) {
            e ? this._elem("content").addClass("js-dnd-before") : this._elem("content").removeClass("js-dnd-before")
        },
        _startAttachUploading: function() {
            var e = t.filter(this._attaches_queue, function(e) {
                return !e.uuid
            });
            return e.length && this._attaches_promises.push(new Promise(t.bind(function(i, s) {
                o.getUploadSandbox().done(t.bind(function(n) {
                    o.uploadFiles(e, n).progress(t.bind(function(e, t, i) {
                        e || this._renderAttach(i.name, {
                            id: i.name_salt
                        })
                    }, this)).done(t.bind(function(s) {
                        var n = t.filter(s, function(i) {
                            var s;
                            return i.key === !1 ? (s = t.findWhere(e, {
                                uuid: i.id
                            }) || {},
                            this._renderAttach(s.name, {
                                failed: !0,
                                id: s.name_salt
                            }),
                            !1) : !0
                        });
                        this._attachments = this._attachments.concat(n),
                        i()
                    }, this)).fail(s)
                }, this))
            }, this))),
            this._attaches_promises
        },
        _uploadAttaches: function() {
            return Promise.all(this._startAttachUploading()).then(t.bind(function() {
                return this._attachments
            }, this))
        }
    }
}),
define("lib/interface/mail/templates/modal", ["require", "jquery", "underscore", "twig", "lib/components/base/form", "cocktail", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/mail/api_v2", "lib/interface/mail/mixins/insert_marker", "lib/interface/mail/templates/mixins/attachments"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/base/form"), r = e("cocktail"), a = e("lib/components/base/modal"), l = e("lib/components/base/confirm"), c = e("lib/components/mail/api_v2"), d = e("lib/interface/mail/mixins/insert_marker"), u = e("lib/interface/mail/templates/mixins/attachments"), h = "mail_template";
    return t = o.View.extend({
        options: null,
        modal: null,
        events: s.extend({}, o.View.prototype.events || {}, {
            "click .js-modal-accept": "onSaveClick",
            "focus .js-card-name .template-top-name__input": "nameInputOnFocus",
            "focusout .js-card-name .template-top-name__input": "nameInputOnFocusout",
            "click #js-template-remove": "onRemoveClick",
            "click .mail-action__tag": "insertMarker"
        }),
        _selectors: function() {
            return {
                template_header_input: "#template-name",
                template_content: "#template-content",
                template_name: "#template-name",
                save_button: ".js-modal-accept",
                cancel_buttton: ".button-cancel",
                remove_button: "#js-template-remove",
                content: ".mail-action__template-content"
            }
        },
        initialize: function(e) {
            var t = this;
            o.View.prototype.initialize.apply(this, arguments),
            this.options = s.extend({}, e),
            e.params ? (this.options.id = e.params.id,
            this.options.content = e.params.content) : this.options.content = AMOCRM.lang.mail_template_content_preset,
            this.modal = new a({
                class_name: "modal-list modal_manage-template modal_mail-action " + this.options.class_name,
                init: function(e) {
                    t.setElement(e),
                    t.init()
                },
                destroy: function() {
                    return !t.force_exit && t.canSaveTemplate() ? (AMOCRM.router.confirmPageChange(t._confirmModalConfig, function() {
                        t.modal.destroy()
                    }),
                    !1) : (t.$el && (t.destroy(),
                    AMOCRM.router.preventPageChange(!1, h),
                    AMOCRM.router.removePreventConfig(h)),
                    void (t.save_xhr && "undefined" != typeof t.save_xhr.status && t.save_xhr.abort()))
                }
            })
        },
        destroy: function() {
            this.$el.off(),
            this.trigger("edit:exit", this.options.id),
            o.View.prototype.destroy.apply(this, arguments)
        },
        init: function() {
            this.render().then(s.bind(function() {
                this._elem("template_content").val(this.options.content).trigger("controls:textarea:autosize"),
                this.$el.trigger("modal:centrify"),
                "add" === this.options.mode && (this._elem("remove_button").hide(),
                this._elem("template_header_input").closest(".js-card-name").addClass("in-edit")),
                this.initPagePreventer(),
                this.watchForm()
            }, this))
        },
        render: n._preload(["/tmpl/mail/modal/manage_templates.twig"], "_render"),
        _render: function() {
            this.$el.trigger("modal:loaded").html(n({
                ref: "/tmpl/mail/modal/manage_templates.twig"
            }).render({
                mode: this.options.mode,
                params: this.options.params,
                markers: this.options.markers
            }))
        },
        initPagePreventer: function() {
            this._confirmModalConfig = {
                message: AMOCRM.lang.mail_template_page_prevent,
                accept_text: AMOCRM.lang.modal_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: s.bind(function(e) {
                    this.onSaveClick({
                        success: e
                    })
                }, this),
                decline: s.bind(function() {
                    this.setChanges(!1),
                    this.modal.destroy()
                }, this)
            },
            AMOCRM.router.registerPreventConfig(this._confirmModalConfig, h)
        },
        watchForm: function() {
            this.initModelFromForm(),
            this.setChanges(!1),
            this.model.on("has_changes", s.bind(this.setChanges, this, {
                form: !0
            })).on("has_reverted", s.bind(this.setChanges, this, {
                form: !1
            }))
        },
        setChanges: function(e) {
            e === !1 ? this._changes = {} : s.extend(this._changes, e),
            e = this.canSaveTemplate(),
            this._elem("cancel_buttton").text(AMOCRM.lang[e ? "button_cancel" : "button_text_close"]),
            this._elem("save_button").toggle(e).trigger("button:save:" + (e ? "enable" : "disable")),
            AMOCRM.router.preventPageChange(e, h)
        },
        canSaveTemplate: function() {
            var e = s.values(this._changes);
            return !e.length || 1 === e.length && e[0] === !1 ? !1 : !0
        },
        onSaveClick: function(e) {
            this._uploadAttaches().then(s.bind(function(t) {
                this._onSaveClick(s.extend(e, {
                    attachments: t || []
                }))
            }, this))
        },
        _uploadAttaches: function() {
            return new Promise(function(e) {
                e([])
            }
            )
        },
        _onSaveClick: function(e) {
            var t = this
              , i = t.model.toJSON()
              , n = {};
            this.canSaveTemplate() && (this._elem("save_button").trigger("button:load:start"),
            i.name.length || (i.name = AMOCRM.lang.mail_template_no_name),
            n = {
                type: "on" === i.content_html ? "html" : "text",
                subject: i.subject,
                content: i.content,
                attachments: e.attachments
            },
            this.options.id || this.new_template_id ? (i.id = t.options.id || t.new_template_id,
            this.save_xhr = c.updateTemplate(i.id, {
                name: i.name,
                fields: n
            })) : this.save_xhr = c.addTemplate(i.name, n),
            this.save_xhr.always(function() {
                t._elem("save_button").trigger("button:load:stop")
            }).done(function(n) {
                t.setChanges(!1),
                t.model.updateDefaults(),
                n ? (t.new_template_id = n.id,
                i.id = n.id,
                t._elem("remove_button").show(),
                t.$el.trigger("modal:centrify"),
                t.options.onCreateSave(i)) : t.options.onEditSave(i),
                s.isFunction(e.success) && e.success.call(t)
            }).fail(function(e) {
                t.modal.showError()
            }))
        },
        onRemoveClick: function(e) {
            var t = this;
            this.confirm = new l({
                text: AMOCRM.lang.templates_list__remove_template,
                accept: function() {
                    var e = this.modal
                      , i = t.model.toJSON()
                      , s = t.options.id || t.new_template_id;
                    return i.id = s,
                    e.destroy(),
                    c.removeTemplate(s).done(function(e) {
                        t.force_exit = !0,
                        t.list = AMOCRM.data.current_view,
                        t.modal.showSuccess(AMOCRM.lang.templates_list__template_removed),
                        t.options.onRemove(i)
                    }).fail(function(e) {
                        t.modal.showError()
                    })
                }
            })
        },
        nameInputOnFocus: function(e) {
            i(e.target).closest(".js-card-name").addClass("in-edit")
        },
        nameInputOnFocusout: function(e) {
            var t = i(e.target)
              , s = t.closest(".js-card-name");
            t.val() && !s.hasClass("tags-edit") && s.removeClass("in-edit")
        }
    }),
    r.mixin(t, d, u),
    t
}),
define("lib/interface/mail/templates/index", ["require", "jquery", "underscore", "twig", "backbone", "elements_view", "lib/components/mail/api_v2", "lib/interface/mail/templates/item", "lib/interface/mail/templates/modal"], function(e) {
    "use strict";
    var t, i, s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("backbone"), a = e("elements_view"), l = e("lib/components/mail/api_v2"), c = e("lib/interface/mail/templates/item"), d = e("lib/interface/mail/templates/modal"), u = function(e, t) {
        var i = t.clone();
        return i.addClass("ui-sortable-helper").css("left", s(this).offset().left),
        i
    };
    return t = a.extend({
        events: n.extend({}, a.prototype.events, {
            "click #mail-templates__add-template:not(.button-input-disabled)": "manageTemplate"
        }),
        _selectors: function() {
            return {
                sortable_items: ".template-item.sortable",
                sort_handle: ".template-item__handle",
                item_wrapper: ".template-item__wrapper"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            this.templates = e.items,
            this.markers = e.markers,
            e.items && this.init()
        },
        render: o._preload(["/tmpl/mail/modal/templates_list.twig"], "_render"),
        _render: function() {
            var e = s(o({
                ref: "/tmpl/mail/modal/templates_list.twig"
            }).render({
                items: this.templates
            }));
            return this.setElement(e),
            this.options.$container && this.options.$container.append(e),
            this
        },
        init: function() {
            var e = this;
            this.render().then(n.bind(function() {
                this.templ_collection = new i,
                this.listenTo(this.templ_collection, "edit:request", this.manageTemplate),
                n.each(e.templates, function(e) {
                    e.sortable = !0,
                    this.templ_collection.push(this.addTemplate(s("#template-item_" + e.id), e).model)
                }, this),
                this.makeSortable(!0)
            }, this))
        },
        addTemplate: function(e, t) {
            return new c({
                el: e,
                model: new r.Model(t)
            })
        },
        destroy: function() {
            this.templ_collection && this.templ_collection.destroy(),
            a.prototype.remove.call(this)
        },
        makeSortable: function(e) {
            return e = n.isBoolean(e) ? e : !0,
            e ? this._findElem("sortable_items").sortable({
                items: this._selector("item_wrapper"),
                handle: this._selector("sort_handle"),
                axis: "y",
                appendTo: document.body,
                sortAnimate: !AMOCRM.is_touch_device,
                sortAnimateDuration: 150,
                helper: u,
                update: n.bind(this.resort, this)
            }) : this._findElem("item_wrapper").each(function() {
                s(this).data("ui-sortable") && s(this).sortable("destroy")
            }),
            this
        },
        resort: function(e, t) {
            var i, o, r = {}, a = {}, c = s(t.item[0]), d = c.data("view");
            if (r.id = d.model.id,
            a = s.makeArray(this._findElem("item_wrapper").map(n.bind(function(e, t) {
                return (i = s(t).data("view")) ? (i.model.set("sort", e),
                i.model.toJSON()) : {}
            }, this))),
            a.length) {
                if (o = n.indexOf(a, n.find(a, function(e) {
                    return e.id === r.id
                })),
                0 === o)
                    r.after = null;
                else {
                    if (!(o > 0))
                        return;
                    r.after = a[o - 1].id
                }
                return l.sortTemplate(r.id, r.after).fail(function() {
                    throw new Error("Failed to connect to server")
                })
            }
        },
        manageTemplate: function(e, t) {
            var i = t ? "edit" : "add";
            if (!this.form)
                return "add" === i ? void this.showTemplateForm(i, t) : void l.getTemplate(t.id).done(n.bind(function(e) {
                    n.extend(t, {
                        subject: e.fields.subject,
                        content: e.fields.content,
                        content_html: "html" === e.fields.type ? "on" : "",
                        attachments: e.fields.attachments
                    }),
                    this.showTemplateForm(i, t)
                }, this)).fail(function() {
                    throw new Error("Failed to connect to server")
                })
        },
        showTemplateForm: function(e, t) {
            this.form = new d({
                entity: AMOCRM.data.current_entity,
                onCreateSave: n.bind(function(e) {
                    this.newTemplateItem(e)
                }, this),
                onEditSave: n.bind(function(e) {
                    this.editTemplateItem(e)
                }, this),
                onRemove: n.bind(function(e) {
                    this.removeTemplateItem(e)
                }, this),
                markers: this.markers,
                params: t,
                mode: e
            },this),
            this.listenTo(this.form, "edit:exit", this.clearActiveEdits)
        },
        newTemplateItem: function(e) {
            var t, i = s(o({
                ref: "/tmpl/mail/modal/template_wrapper.twig"
            }).render({
                name: e.name,
                id: e.id
            }));
            this._findElem("sortable_items").append(i),
            t = this.addTemplate(i, n.extend(e, {
                element_type: this.element_type,
                sortable: !0
            })),
            this.templ_collection.push(t.model)
        },
        editTemplateItem: function(e) {
            var t = e || {}
              , i = this.templ_collection.get(e.id);
            i.set(t)
        },
        removeTemplateItem: function(e) {
            var t = this.templ_collection.get(e.id);
            t.trigger("item:remove", t)
        },
        clearActiveEdits: function(e) {
            this.form = null,
            e && this.$("#template-item_" + e).removeClass("template-item__wrapper_active-edit")
        }
    }),
    i = r.Collection.extend({
        initialize: function(e, t) {
            this.on("item:remove", this.remove, this)
        },
        destroy: function() {
            this.each(function(e) {
                e.trigger("template:destroy")
            }, this)
        }
    }),
    t
}),
define("lib/components/mail/form", ["require", "underscore", "lib/core/view", "lib/components/base/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/core/view")
      , s = e("lib/components/base/form")
      , n = {};
    return n.Model = s.Model,
    n.View = function() {
        s.View.apply(this, arguments)
    }
    ,
    t.extend(n.View.prototype, s.View.prototype, i.prototype, {
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            s.View.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            s.View.prototype.destroy.apply(this, arguments),
            i.prototype.destroy.apply(this, arguments)
        }
    }),
    n.View.extend = i.extend,
    n
}),
define("lib/interface/mail/settings/user_assign", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/interface/users_select", "lib/common/user_rights", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/interface/users_select"), a = e("lib/common/user_rights"), l = e("lib/core/users");
    return t = o.extend({
        template_params: {},
        selected_user: null,
        events: s.extend({}, o.prototype.events, {
            "click #mail_user-users_select_holder": "onAssignUserClick",
            "click .mailbox-privacy__toggler-item": "onPrivacyModeClick"
        }),
        _classes: function() {
            return {
                mailbox_form__user_input: "mailbox-form__user-input",
                control_toggler__item: "control-toggler__item",
                mailbox_privacy__users_select: "mailbox-privacy__users-select"
            }
        },
        initialize: function(e) {
            var t;
            this.options = s.extend({
                show_selector: a.isAdmin(),
                managers: l.get(),
                selected_user_id: null,
                editable: !0,
                user: l.current()
            }, e || {}),
            this.options.selected_user_id && (this.options.selected_user_id = +this.options.selected_user_id,
            t = s.find(this.options.managers, s.bind(function(e, t) {
                return +t === +this.options.selected_user_id
            }, this)),
            t && (this.options.user = this.selected_user = {
                id: +t.id,
                name: t.title
            })),
            o.prototype.initialize.apply(this, this.options),
            this.promise = this.render(),
            this.promise.then(s.bind(function() {
                this.options.selected_user_id && this._elem("mailbox_privacy__users_select").show()
            }, this))
        },
        onViewAttached: function() {},
        render: n._preload(["/tmpl/mail/settings/user_assign.twig", "/tmpl/mail/settings/parts/mail_users_select.twig"], "_render"),
        _render: function() {
            this.setElement(i(n({
                ref: "/tmpl/mail/settings/user_assign.twig"
            }).render(this.options)))
        },
        destroy: function() {
            this.destroyUserSelect(),
            o.prototype.destroy.apply(this, arguments)
        },
        destroyUserSelect: function() {
            this.assign_select && delete this.assign_select
        },
        onAssignUserClick: function(e) {
            var t = i(e.currentTarget)
              , n = this._getSelectedManager();
            e.stopPropagation(),
            e.preventDefault(),
            this.options.editable && (this.assign_select = new r({
                el: t,
                $container: this._elem("mailbox_privacy__users_select"),
                id: "mail_user-users_select_holder",
                class_name: "users_select-select_one mail_user-users_select_holder",
                select_one: !0,
                existing_items: n,
                no_absolute_positioning: !0,
                suggest_class_name: "users-select-suggest_mail-user",
                items_template: "/tmpl/mail/settings/parts/mail_users_select.twig",
                onInit: function() {
                    this.$list.css({
                        zIndex: 200
                    })
                },
                onDestroy: s.bind(function(e) {
                    e.length && (this.selected_user = {
                        id: +e[0].id,
                        name: e[0].title
                    },
                    this.trigger("user:selected", this.selected_user.id),
                    this.destroyUserSelect(),
                    this.updateSelectedUserView(this.selected_user))
                }, this)
            }))
        },
        onPrivacyModeClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("option")
              , n = this.options.user;
            if (this.options.editable) {
                if (t.hasClass("control-toggler__item-selected"))
                    return !1;
                this._elem("control_toggler__item").removeClass("control-toggler__item-selected"),
                t.addClass("control-toggler__item-selected"),
                "personal" === s ? (this._elem("mailbox_privacy__users_select").show(),
                this.selected_user || (this.selected_user = n),
                this.$el.find(".mailbox-privacy__caption").html(AMOCRM.lang.mail_setup_privacy_caption_appointed)) : (this.selected_user = null,
                this._elem("mailbox_privacy__users_select").hide(),
                this.$el.find(".mailbox-privacy__caption").html(AMOCRM.lang.mail_setup_privacy_caption_shared),
                this.updateSelectedUserView(n)),
                this.trigger("user:selected", this.selected_user ? this.selected_user.id : null)
            }
        },
        updateSelectedUserView: function(e) {
            this._findElem("mailbox_form__user_input").html(n({
                ref: "/tmpl/mail/settings/parts/mail_users_select.twig"
            }).render({
                user: e
            }))
        },
        _getSelectedManager: function() {
            var e = this.options.managers
              , t = this.selected_user ? this.selected_user.id : null;
            return s.pick(e, t)
        }
    })
}),
define("lib/interface/mail/mixins/mailbox_base", ["require", "jquery", "underscore", "lib/interface/mail/common/modals", "lib/components/base/confirm"], function(e) {
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/interface/mail/common/modals"), o = e("lib/components/base/confirm"), r = [{
        oauth: !0,
        domain: ["gmail.com", "googlemail.com"],
        added_icon_class: "icon icon-gmail-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_gmail,
        additional_help: !0,
        provider: "gmail",
        added_mailbox: "gmail"
    }, {
        oauth: !0,
        domain: ["yandex.ru", "ya.ru"],
        added_icon_class: "icon icon-yandex-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_yandex,
        provider: "yandex",
        added_mailbox: "yandex"
    }, {
        domain: ["mail.ru", "list.ru", "inbox.ru", "bk.ru"],
        added_icon_class: "icon icon-mailru-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_mailru,
        provider: "mailru",
        added_mailbox: "mailru"
    }, {
        domain: ["rambler.ru", "autorambler.ru", "ro.ru", "lenta.ru", "myrambler.ru"],
        added_icon_class: "icon icon-rambler-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_rambler,
        additional_help: !0,
        provider: "rambler",
        added_mailbox: "rambler"
    }, {
        domain: ["yahoo.com"],
        added_icon_class: "icon icon-yahoo-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_yahoo,
        provider: "yahoo",
        added_mailbox: "yahoo"
    }, {
        domain: ["outlook.com", "hotmail.com"],
        added_icon_class: "icon icon-outlook-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_outlook,
        provider: "outlook",
        added_mailbox: "outlook"
    }, {
        domain: ["icloud.com"],
        added_icon_class: "icon icon-icloud-mail",
        added_mailbox_lang_name: AMOCRM.lang.mailbox_icloud,
        provider: "icloud",
        added_mailbox: "icloud"
    }];
    return t = {
        validators: {
            email: function(e) {
                return !/^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[\da-z](?:[\da-z-_]*[\da-z])?\.)+[a-z]{2,}$/i.test(e)
            },
            server: function(e) {
                return !/^[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,8}$/i.test(e)
            },
            port: function(e) {
                return !/^\d+$/.test(e)
            }
        },
        field_map: {
            email: {
                selector: "#mailbox-form-email",
                validator: "email"
            },
            imap_login: {
                selector: "#mailbox-imap-login"
            },
            imap_password: {
                selector: "#mailbox-imap-password"
            },
            imap_server: {
                selector: "#mailbox-imap-server",
                validator: "server"
            },
            imap_port: {
                selector: "#mailbox-imap-port",
                validator: "port"
            },
            smtp_server: {
                selector: "#mailbox-smtp-server",
                validator: "server"
            },
            smtp_port: {
                selector: "#mailbox-smtp-port",
                validator: "port"
            },
            smtp_login: {
                selector: "#mailbox-smtp-login"
            },
            smtp_password: {
                selector: "#mailbox-smtp-password"
            }
        },
        validateField: function(e, i, n) {
            if (s.isUndefined(t.field_map[i]))
                return !0;
            var o, r = t.field_map[i], a = e._findElem(i);
            if (a.length) {
                if (o = a.val().trim(),
                !o.length)
                    return n ? !0 : "empty";
                if (r.validator && t.validators[r.validator] && t.validators[r.validator](o))
                    return "invalid"
            }
            return !0
        },
        validateFields: function(e, i, n) {
            var o = [];
            return s.each(i, function(i) {
                var s;
                (s = t.validateField(e, i, n)) !== !0 && o.push({
                    code: i + "_" + s,
                    field: i
                })
            }),
            o
        },
        hideErrors: function(e) {
            e._findElem("text_input_invalid").removeClass("validate-has-error"),
            e._findElem("mailbox_form__error_input").empty().hide()
        },
        showFieldErrors: function(e, i) {
            t.hideErrors(e),
            s.each(i, function(i) {
                var s = e._findElem(i.field)
                  , n = "mailbox_error_" + i.code;
                s.length && (t.unsetInputValid(s),
                s.addClass("validate-has-error"),
                AMOCRM.lang[n] && s.next().show().append(AMOCRM.lang[n] + "<br>"))
            })
        },
        hideInputError: function(e) {
            e.removeClass("validate-has-error"),
            e.next(".mailbox-form__error-input").hide().empty()
        },
        setInputValid: function(e) {
            if ("checkbox" !== e[0].type) {
                e.attr("name");
                e.val().length > 0 && !e.parent().find(".valid-field").length && e.parent().append('<div class="icon  icon-valid-field valid-field"></div>')
            }
        },
        unsetInputValid: function(e) {
            var t = e ? e : this.$el.find("input");
            t.parent().find(".valid-field").remove()
        },
        getProviderInfo: function(e) {
            var t = e.slice(e.indexOf("@") + 1)
              , i = s.find(r, function(e) {
                return e.domain.indexOf(t) > -1
            });
            return i ? i : void 0
        },
        collectSettings: function(e) {
            var t = {
                imap: {},
                smtp: {}
            };
            return s.each({
                server: "imap_server",
                port: "imap_port",
                enc: "imap_enc"
            }, function(i, s) {
                t.imap[s] = e.get(i)
            }),
            s.each({
                server: "smtp_server",
                port: "smtp_port",
                enc: "smtp_enc"
            }, function(i, s) {
                t.smtp[s] = e.get(i)
            }),
            t
        },
        enableButton: function() {
            this.$el && this.$el.find("#mailbox-button__save, #mailbox-button__enable").trigger("button:save:enable"),
            this.save_locked = !1
        },
        disableButton: function() {
            this.$el && this.$el.find("#mailbox-button__save, #mailbox-button__enable").trigger("button:save:disable"),
            this.save_locked = !0
        },
        toggleImapCaptions: function(e, t) {
            var i = t ? "new_" : ""
              , s = e ? "imap_password" : "password_field_caption"
              , n = e ? "imap_password" : "password_email_password";
            this._findElem("mailbox__form_row_password").find(".mailbox-form__cell-title").text(AMOCRM.lang["mail_setup_" + i + s]),
            this._findElem("mailbox__form_row_password").find(".password_input").attr("placeholder", AMOCRM.lang["mail_setup_" + i + n])
        },
        confirmOwnerChange: function(e) {
            var t = i.Deferred()
              , n = [{
                text: AMOCRM.lang.mail_box_settings_change_owner_message
            }];
            return e && n.push({
                text: AMOCRM.lang.mail_box_settings_unsorted_cleanup
            }),
            new o({
                class_name: "modal-list",
                caption: AMOCRM.lang.mail_box_settings_change_owner_caption,
                message: n,
                template: "/tmpl/common/modal/delete.twig",
                accept_text: AMOCRM.lang.mail_box_settings_change_auth_confirm,
                decline_text: AMOCRM.lang.mail_box_settings_change_auth_decline,
                button_class: "button-input_blue",
                destroy: function() {
                    return s.isUndefined(this.accepted) || this.accepted !== !0 ? void t.reject() : void t.resolve(this.accepted)
                }
            }),
            t.promise()
        },
        confirmAuthChange: function() {
            var e = i.Deferred();
            return new o({
                class_name: "modal-list",
                text: AMOCRM.lang.mail_box_settings_change_auth_message,
                accept_text: AMOCRM.lang.mail_box_settings_change_auth_confirm,
                decline_text: AMOCRM.lang.mail_box_settings_change_auth_decline,
                button_class: "button-input_blue",
                destroy: function() {
                    return s.isUndefined(this.accepted) || this.accepted !== !0 ? void e.reject() : void e.resolve(this.accepted)
                }
            }),
            e.promise()
        },
        confirmRemoveAction: function() {
            var e = i.Deferred();
            return new o({
                class_name: "modal-list",
                text: AMOCRM.lang.mail_box_settings_remove_box_confirm,
                accept_text: AMOCRM.lang.delete_mails_confirm,
                decline_text: AMOCRM.lang.button_cancel,
                button_class: "button-input_blue",
                destroy: function() {
                    return s.isUndefined(this.accepted) || this.accepted !== !0 ? void e.reject() : void e.resolve(this.accepted)
                }
            }),
            e.promise()
        },
        confirmDisableAction: function() {
            var e = i.Deferred();
            return new o({
                class_name: "modal-list",
                text: AMOCRM.lang.mail_box_settings_remove_all_letters,
                accept_text: AMOCRM.lang.mail_box_settings_keep_letters,
                decline_text: AMOCRM.lang.mail_box_settings_remove_confirm,
                button_class: "button-input_blue",
                destroy: function() {
                    if (s.isUndefined(this.accepted))
                        e.reject();
                    else {
                        var t = !this.accepted;
                        e.resolve(t)
                    }
                }
            }),
            e.promise()
        },
        connectionErrorHandler: n.commonErrorConfirm
    }
}),
define("lib/interface/mail/settings/mailbox_oauthform", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/components/mail/form", "lib/interface/mail/settings/user_assign", "lib/components/mail/api_v2", "lib/interface/mail/mixins/mailbox_base"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = (e("lib/common/fn"),
    e("lib/components/mail/form")), r = e("lib/interface/mail/settings/user_assign"), a = e("lib/components/mail/api_v2"), l = e("lib/interface/mail/mixins/mailbox_base");
    return t = o.View.extend({
        options: {},
        body: null,
        events: s.extend({}, o.View.prototype.events, {
            "click #mailbox-button__save": "onSave",
            "click #mailbox-button__cancel": "onCancel"
        }),
        _classes: function() {
            return {
                mailbox__button_save: "mailbox-button__save",
                mailbox__button_enable: "mailbox-button__enable",
                mailbox__added_icon: "mailbox__added-icon",
                mailbox__buttons: "mailbox__buttons",
                mailbox_form__error: "mailbox-form__error",
                mailbox__form_row_create_contacts: "mailbox-form__row-create_contacts"
            }
        },
        _selectors: function() {
            return {
                user_assign_container: "#mailbox-user-assign-container"
            }
        },
        initialize: function(e) {
            this.invalidFields = [],
            this.errors = [],
            this.options = s.extend({
                group_messages: !0
            }, e || {}),
            this.oauth = s.extend({
                result: "failed",
                email: null,
                token: null
            }, e || {}),
            s.bindAll(this, "failHandler"),
            this.on("mailbox:set-manager", function(e) {
                this.model.set("user_id", e)
            }),
            this.promise = this.render().then(s.bind(function() {
                o.View.prototype.initialize.apply(this, this.options)
            }, this))
        },
        destroy: function() {
            this.userAssign && (this.stopListening(this.userAssign),
            this.userAssign.destroy()),
            o.View.prototype.destroy.call(this)
        },
        render: n._preload(["/tmpl/mail/settings/mailbox_oauthform.twig"], "_render"),
        _render: function() {
            this.setElement(i(n({
                ref: "/tmpl/mail/settings/mailbox_oauthform.twig"
            }).render(this.options)));
            var e = new r;
            e.promise.then(s.bind(function() {
                this._elem("user_assign_container").append(e.$el),
                e.trigger("view:attached")
            }, this)),
            this.listenTo(e, "user:selected", function(e) {
                this.model.set("user_id", e)
            }),
            this.userAssign = e,
            this._elem("mailbox__form_row_create_contacts").show(),
            this._elem("mailbox__buttons").show()
        },
        onSave: function(e) {
            if (e.stopPropagation(),
            !this.save_locked) {
                l.disableButton.call(this);
                var t = this;
                this._elem("mailbox__button_save").trigger("button:save:start"),
                this.saveMailbox().always(function() {
                    l.enableButton.call(t),
                    t._elem("mailbox__button_save").trigger("button:load:stop")
                })
            }
        },
        onCancel: function(e) {
            return this.block_cancel ? void e.preventDefault() : (this.revert(),
            void this.trigger("form:canceled"))
        },
        saveMailbox: function(e) {
            var t = this
              , i = this.model.toJSON()
              , s = {};
            return i.create_contacts && (s["import"] = {
                create_contacts: "on" === i.create_contacts
            }),
            void 0 !== i.group_messages && (s.options = {
                group_messages: "on" === i.group_messages
            }),
            a.completeOAuthConnect(this.oauth.email, this.oauth.token, s, i.user_id).done(function(e) {
                t.revert(),
                t.trigger("mailbox:added", e.id),
                t.trigger("form:error", "")
            }).fail(this.failHandler)
        },
        failHandler: function(e) {
            if (e = e.responseText ? JSON.parse(e.responseText) : "",
            e.error_code) {
                var t = AMOCRM.lang["mailbox_error_" + e.error_code];
                "mailbox_exists" === e.error_code && (t = t.replace("#PLACEHOLDER#", this.oauth.email)),
                this.trigger("form:error", t)
            } else
                l.connectionErrorHandler()
        }
    })
}),
define("lib/interface/mail/mailbox_addform", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/components/mail/form", "lib/components/mail/api_v2", "lib/interface/mail/settings/user_assign", "lib/interface/mail/mixins/mailbox_base"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = (e("lib/common/fn"),
    e("lib/components/mail/form")), r = e("lib/components/mail/api_v2"), a = e("lib/interface/mail/settings/user_assign"), l = e("lib/interface/mail/mixins/mailbox_base");
    return t = o.View.extend({
        _classes: function() {
            return {
                mailbox__body: "mailbox__body",
                mailbox__buttons: "mailbox__buttons",
                mailbox__right_block: "mailbox__right-block",
                mailbox__options: "mailbox__options",
                mailbox__additional_options: "mailbox-options_additional",
                mailbox__main_options: "mailbox-options_main",
                mailbox__form_row_create_contacts: "mailbox-form__row-create_contacts",
                mailbox__form_row_email: "mailbox-form__row-email",
                mailbox__form_row_imap_login: "mailbox-form__row-imap_login",
                mailbox__form_row_imap_password: "mailbox-form__row-imap_password",
                mailbox__form_row_smtp_login: "mailbox-form__row-smtp_login",
                mailbox__form_row_smtp_password: "mailbox-form__row-smtp_password",
                mailbox_form__error: "mailbox-form__error",
                mailbox_form__error_input: "mailbox-form__error-input",
                text_input_invalid: "validate-has-error",
                mailbox_header__name: "mailbox-header__name",
                mailbox__toggler: "mailbox__toggler",
                mailbox__show_login: "mailbox__show-login",
                mailbox__show_imap_login: "mailbox__show-imap-login",
                mailbox__show_smtp_login: "mailbox__show-smtp-login",
                auth_input: "auth_input"
            }
        },
        _selectors: function() {
            return {
                mailbox__button_save: "#mailbox-button__save",
                mailbox__button_cancel: "#mailbox-button__cancel",
                imap_server: "#mailbox-imap-server",
                imap_port: "#mailbox-imap-port",
                imap_enc: "#mailbox-imap-enc",
                smtp_server: "#mailbox-smtp-server",
                smtp_port: "#mailbox-smtp-port",
                smtp_enc: "#mailbox-smtp-enc",
                imap_login: "#mailbox-imap-login",
                imap_password: "#mailbox-imap-password",
                smtp_login: "#mailbox-smtp-login",
                smtp_password: "#mailbox-smtp-password",
                user_assign_container: "#mailbox-user-assign-container"
            }
        },
        options: {},
        events: s.extend({}, o.View.prototype.events, {
            "click #mailbox-button__save": "onSave",
            "click #mailbox-button__cancel": "onCancel",
            "click .mailbox__show-login": "onShowLoginClick",
            "focus input": "onInputFocus",
            "blur input": "onInputBlur"
        }),
        initialize: function(e) {
            this.errors = [],
            this.options = s.extend({
                group_messages: !0
            }, e || {}),
            this.on("mailbox:set-manager", function(e) {
                this.model.set("user_id", e)
            }),
            s.bindAll(this, "failHandler", "afterRender"),
            this.promise = this.render().then(this.afterRender)
        },
        destroy: function() {
            this.userAssign && (this.stopListening(this.userAssign),
            this._destroyComponent(this.userAssign, !0)),
            o.View.prototype.destroy.call(this)
        },
        render: n._preload(["/tmpl/mail/settings/mailbox_form.twig"], "_render"),
        _render: function() {
            this.setElement(i(n({
                ref: "/tmpl/mail/settings/mailbox_form.twig"
            }).render(this.options))),
            this._elem("mailbox__form_row_create_contacts").show(),
            this._elem("mailbox__form_row_imap_password").show(),
            this._elem("mailbox__buttons").show()
        },
        afterRender: function() {
            o.View.prototype.initialize.apply(this, this.options);
            var e = this._addComponent(a);
            e.promise.then(s.bind(function() {
                this._elem("user_assign_container").append(e.$el),
                e.trigger("view:attached")
            }, this)),
            this.listenTo(e, "user:selected", function(e) {
                this.model.set("user_id", e)
            }),
            this.userAssign = e,
            this.model.set({
                need_imap_login: !1,
                need_smtp_login: !1,
                need_settings: !1
            }),
            this.listenTo(this.model, "has_changes", s.bind(function() {
                this.validateFill()
            }, this)),
            this.listenTo(this.model, "change:need_settings", function(e, t) {
                this._elem("mailbox__additional_options").toggle(t === !0),
                t === !1 && (this._elem("mailbox__show_login").hide(),
                this.model.set({
                    need_imap_login: !1,
                    need_smtp_login: !1
                }))
            }),
            this.listenTo(this.model, "change:email", function(e, t) {
                this.model.set({
                    need_imap_login: !1,
                    need_smtp_login: !1,
                    need_settings: !1
                })
            }),
            this.listenTo(this.model, "change:need_imap_login", function(e, t) {
                this._elem("mailbox__form_row_imap_login").toggle(t),
                this.hideErrors()
            }),
            this.listenTo(this.model, "change:need_smtp_login", function(e, t) {
                this._elem("mailbox__form_row_smtp_login").toggle(t),
                this.hideErrors()
            }),
            this.model.get("need_settings") === !0 && this._elem("mailbox__additional_options").show();
            var t = this
              , i = ["imap_server", "imap_port", "smtp_server", "smtp_port"]
              , n = ["imap_enc", "smtp_enc"];
            s.each(i, function(e) {
                t.listenTo(t.model, "change:" + e, function(t, i) {
                    var s = this._elem(e);
                    s.val(i),
                    l.hideInputError(s)
                })
            }),
            s.each(n, function(e) {
                t.listenTo(t.model, "change:" + e, function(t, i) {
                    this._elem(e).val(i).trigger("controls:change:visual")
                })
            })
        },
        onInputFocus: function(e) {
            var t = i(e.currentTarget);
            t.data("timeoutBlur") && clearTimeout(t.data("timeoutBlur")),
            l.unsetInputValid(t)
        },
        onInputBlur: function(e) {
            var t, s = i(e.currentTarget), n = s.attr("name"), o = this;
            t = setTimeout(function() {
                var e = l.validateFields(o, [n]);
                e.length ? l.showFieldErrors(o, e) : (l.setInputValid(s),
                l.hideInputError(s))
            }, 100),
            s.data("timeoutBlur", t)
        },
        validateFill: function() {
            l.enableButton.call(this)
        },
        hideErrors: function() {
            l.hideErrors(this),
            this.trigger("form:error", !1)
        },
        onSave: function(e) {
            if (e.stopPropagation(),
            !this.save_locked) {
                var t = this
                  , i = ["imap_password"];
                this.model.get("need_settings") === !0 && (i.push("imap_server"),
                i.push("imap_port"),
                i.push("smtp_server"),
                i.push("smtp_port"));
                var n = l.validateFields(t, i);
                if (n.length > 0)
                    return void l.showFieldErrors(this, n);
                this.hideErrors();
                var o = {
                    credentials: {},
                    settings: {}
                }
                  , r = +this.model.get("user_id");
                o.settings = s.extend({
                    "import": {
                        create_contacts: "on" === this.model.get("create_contacts")
                    },
                    options: {
                        group_messages: "on" === this.model.get("group_messages")
                    }
                }, l.collectSettings(this.model)),
                this.model.get("need_imap_login") === !0 && this.model.get("imap_login").length ? o.credentials.imap = {
                    login: this.model.get("imap_login"),
                    password: this.model.get("imap_password")
                } : (this.model.set("need_imap_login", !1),
                o.credentials.password = this.model.get("imap_password")),
                this.model.get("need_smtp_login") === !0 && (this.model.get("smtp_login").length || this.model.get("smtp_password").length ? o.credentials.smtp = {
                    login: this.model.get("smtp_login"),
                    password: this.model.get("smtp_password")
                } : this.model.set("need_smtp_login", !1)),
                this.saveMailbox(this.model.get("email"), o, r > 0 ? r : null)
            }
        },
        onCancel: function(e) {
            return this.block_cancel ? void e.preventDefault() : (this.revert(),
            void this.trigger("form:canceled"))
        },
        saveMailbox: function(e, t, i) {
            var s = this;
            l.disableButton.call(this),
            this._elem("mailbox__button_save").trigger("button:save:start"),
            r.addMailbox(e, t, i).always(function(e) {
                s._elem("mailbox__button_save").trigger("button:load:stop"),
                l.enableButton.call(s)
            }).done(function(e) {
                s.revert(),
                s.trigger("mailbox:added", e.id),
                s.trigger("form:error", "")
            }).fail(this.failHandler)
        },
        failHandler: function(e) {
            if (e = e.responseText ? JSON.parse(e.responseText) : "",
            e.error_code) {
                if (e.fields) {
                    var t = [];
                    s.each(e.fields, function(e, i) {
                        i = i.replace(".", "_"),
                        "email" !== i && t.push({
                            field: i,
                            code: e
                        })
                    }),
                    t.length && l.showFieldErrors(this, t)
                }
                var i = AMOCRM.lang["mailbox_error_" + e.code];
                "mailbox_exists" === e.code && (i = i.replace("#PLACEHOLDER#", this.model.get("email"))),
                this.trigger("form:error", i),
                this.model.get("need_imap_login") !== !0 && this._elem("mailbox__show_imap_login").show(),
                this.model.get("need_smtp_login") !== !0 && this._elem("mailbox__show_smtp_login").show(),
                this.model.set("need_settings", !0)
            } else
                l.connectionErrorHandler()
        },
        onShowLoginClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("login-type");
            t.hide(),
            this.model.set("need_" + s + "_login", !0)
        }
    })
}),
define("lib/interface/mail/mailbox_form", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/components/mail/form", "lib/components/base/confirm", "lib/components/mail/api_v2", "lib/components/mail/api", "lib/interface/mail/settings/mailbox_oauthform", "lib/interface/mail/mailbox_addform", "lib/interface/mail/mixins/mailbox_base"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = (e("lib/core/view"),
    e("lib/components/mail/form")), r = e("lib/components/base/confirm"), a = e("lib/components/mail/api_v2"), l = e("lib/components/mail/api"), c = e("lib/interface/mail/settings/mailbox_oauthform"), d = e("lib/interface/mail/mailbox_addform"), u = e("lib/interface/mail/mixins/mailbox_base");
    return t = o.View.extend({
        options: {},
        prevent_code: "mail_settings",
        default_settings: {
            imap: {},
            smtp: {}
        },
        events: s.extend({}, o.View.prototype.events, {
            "click #mailbox-button__cancel": "onCancel",
            "click .js-mailbox__two-step-setup": "onMailTipClick",
            "click #mail_user-users_select_holder": "onAssignUserClick",
            "click .mailbox-privacy__toggler-item": "onPrivacyModeClick",
            "blur #mailbox-email": "onEmailInputBlur",
            "keyup #mailbox-email": "onEmailInputEdit",
            "focus #mailbox-email": "onEmailInputFocus",
            "keydown #mailbox-email": "onEmailInputFocus",
            "click .js-mailbox__start-oauth": "startOAuth"
        }),
        _selectors: function() {
            return {
                email: "#mailbox-email"
            }
        },
        _classes: function() {
            return {
                mailbox__body: "mailbox__body",
                mailbox__boxname: "mailbox__boxname",
                mailbox__oauth: "mailbox__oauth",
                mailbox__new_icon: "mailbox__new-icon",
                mailbox__two_step_setup: "mailbox__two-step-setup",
                mailbox__added_mailbox_caption: "mailbox__added-mailbox-caption",
                mailbox__added_description: "mailbox__added-description",
                mailbox_form__error: "mailbox-form__error",
                mailbox_form__error_input: "mailbox-form__error-input",
                text_input_invalid: "validate-has-error"
            }
        },
        initialize: function(e) {
            o.View.prototype.initialize.apply(this, arguments),
            this.options = s.extend({
                is_admin: !1,
                oauth: null
            }, e || {}),
            this.oauth = this.options.oauth,
            this.provider = null,
            this.oauth && "success" === this.oauth.result && (this.options.email = this.oauth.email,
            this.provider = this.oauth.provider),
            this.on("view:attached", this.onViewAttached),
            this.promise = this.render().then(s.bind(function() {
                if (this.model.set("settings", this.default_settings),
                this.listenTo(this.model, "change:settings", this.onSettingsUpdate),
                this.listenTo(this.model, "change:email", function() {
                    this.addForm && this.addForm.model.set("email", this.model.get("email"))
                }),
                this.oauth)
                    if ("success" === this.oauth.result)
                        this.showForm(!0),
                        this._elem("email").prop("disabled", !0);
                    else {
                        var e = "";
                        this.oauth.description && this.oauth.description.length ? e = this.oauth.description : this.oauth.error && AMOCRM.lang["mailbox_error_" + this.oauth.error] && (e = AMOCRM.lang["mailbox_error_" + this.oauth.error]),
                        this.showFormError(e)
                    }
            }, this))
        },
        onViewAttached: function() {
            this.initPagePreventer()
        },
        render: n._preload(["/tmpl/mail/settings/mailbox.twig"], "_render"),
        _render: function() {
            this.setElement(i(n({
                ref: "/tmpl/mail/settings/mailbox.twig"
            }).render(this.options))),
            this.$el.removeClass("mailbox__container_contracted").addClass("mailbox__container_expanded"),
            this.provider && this._findElem("mailbox__new_icon").html(this.getIcon(this.provider)).show()
        },
        destroy: function() {
            this.destroyAddForm(),
            AMOCRM.router.registerPreventConfig(!1, this.prevent_code),
            o.View.prototype.destroy.apply(this, arguments)
        },
        disablePreventPageHandler: function() {
            this.form_modified = !1,
            AMOCRM.router.preventPageChange(!1, this.prevent_code)
        },
        getAddForm: function(e) {
            if (this.addForm)
                return this.addForm;
            var t;
            t = this.oauth && e ? this._addComponent(c, this.oauth) : this._addComponent(d, this.options),
            this.bindEventsToForm(t);
            var i = this;
            return this.addForm = t,
            t.promise.then(function() {
                i._elem("mailbox__body").append(t.$el),
                t.trigger("view:added"),
                t.model.set("email", i.model.get("email")),
                i.onSettingsUpdate(i.model, i.model.get("settings"))
            }),
            this.addForm
        },
        isModified: function() {
            return this.form_modified
        },
        destroyAddForm: function() {
            this.addForm && (this._destroyComponent(this.addForm, !0),
            this._elem("email").prop("disabled", !1),
            this._elem("mailbox__body").empty(),
            this._elem("mailbox__added_description").show(),
            delete this.addForm)
        },
        bindEventsToForm: function(e) {
            this.listenTo(e, "form:canceled", this.reset),
            this.listenTo(e, "mailbox:added", function(e) {
                this.trigger("mailbox:added", e),
                this.destroyAddForm(),
                this.revert(),
                this._elem("email").val(""),
                this.reset()
            }),
            this.listenTo(e, "form:error", this.showFormError)
        },
        onEmailInputFocus: function(e) {
            var t = i(e.currentTarget);
            u.unsetInputValid(t),
            t.data("blurTimeout") && clearTimeout(t.data("blurTimeout"))
        },
        onEmailInputEdit: function(e) {
            var t = i(e.currentTarget)
              , s = t.val().trim();
            s.length && this.disablePreventPageHandler(),
            this.onEmailInputBlur(e, !0, 800),
            u.hideErrors(this),
            this._findElem("mailbox__boxname").text(s)
        },
        onEmailInputBlur: function(e, t, s) {
            var n = this
              , o = i(e.currentTarget);
            s = s || 200,
            o.data("blurTimeout") && clearTimeout(o.data("blurTimeout")),
            o.data("blurTimeout", setTimeout(function() {
                n.processEmailInput(o, !t)
            }, s))
        },
        reset: function() {
            this.oauth && (this.oauth = null),
            this.provider = null,
            this._elem("email").val(""),
            this.model.set("email", ""),
            this.destroyAddForm(),
            this.showHelp(),
            u.hideErrors(this),
            this._findElem("mailbox__new_icon").html(this.getIcon("default")).show(),
            this.disablePreventPageHandler(),
            AMOCRM.router.registerPreventConfig(!1, this.prevent_code)
        },
        processEmailInput: function(e, t) {
            var i = this
              , s = e.val().trim()
              , n = u.validateFields(this, ["email"], !0);
            if (this._elem("mailbox__oauth").hide(),
            n.length)
                u.showFieldErrors(this, n),
                this.disablePreventPageHandler();
            else if (s.length) {
                this.disablePreventPageHandler(),
                u.hideErrors(this);
                var o = u.getProviderInfo(s);
                t && u.setInputValid(e),
                this.findProviderSettings(s).done(function(e) {
                    e.provider && e.oauth ? i.setupOAuthProvider(e.provider) : (i.provider = o && o.provider ? o.provider : null,
                    i._findElem("mailbox__new_icon").html(i.getIcon(i.provider)).show(),
                    i.model.set("email", s),
                    i.showForm(!1))
                }),
                this.showHelp(o)
            } else
                this.disablePreventPageHandler()
        },
        showForm: function(e) {
            this.getAddForm(e),
            e && this._elem("mailbox__added_description").hide()
        },
        showHelp: function(e) {
            var t = this._elem("email").val().trim()
              , i = t
              , s = !1;
            e && (s = "undefined" != typeof e.additional_help ? e.additional_help : !1,
            i = AMOCRM.lang.from + " " + e.added_mailbox_lang_name),
            this._findElem("mailbox__boxname").text(i),
            this._findElem("mailbox__two_step_setup").toggle(s)
        },
        showFormError: function(e) {
            e && e.length ? this._elem("mailbox_form__error").show().text(e) : this._elem("mailbox_form__error").hide().empty()
        },
        setupOAuthProvider: function(e) {
            this.provider = e;
            var t = this._elem("mailbox__oauth").find(".button-input");
            t.find(".svg-icon").remove(),
            t.prepend(this.getIcon(e)),
            this._elem("mailbox__oauth").show(),
            this._findElem("mailbox__new_icon").hide(),
            this.destroyAddForm()
        },
        findProviderSettings: function(e) {
            var t = this;
            if (!e || t.model.get("settings_email") === e) {
                var s = i.Deferred();
                return s.resolve(t.model.get("settings_cache")),
                s.promise()
            }
            return this.block_cancel = !0,
            l.findSettings(e).always(function() {
                t.block_cancel = !1
            }).done(function(i) {
                t.model.set("settings", i.settings || this.default_settings),
                t.model.set("settings_email", e),
                t.model.set("settings_cache", i)
            }).fail(function() {
                t.model.set("settings", this.default_settings),
                t.model.set("settings_email", e)
            })
        },
        getIcon: function(e) {
            return e = e || "default",
            i('<svg class="svg-icon svg-mail--' + e + '_mail-dims"><use xlink:href="#mail--' + e + '_mail"></use></svg>')
        },
        onSettingsUpdate: function(e, t) {
            if (this.addForm) {
                var i = {
                    imap_server: t.imap.server || "",
                    imap_port: t.imap.port || "",
                    imap_enc: t.imap.enc || "",
                    smtp_server: t.smtp.server || "",
                    smtp_port: t.smtp.port || "",
                    smtp_enc: t.smtp.enc || "",
                    need_settings: s.isUndefined(t.imap.server)
                };
                this.addForm.model.set(i)
            }
        },
        initPagePreventer: function() {
            this._confirmModalConfig = {
                message: AMOCRM.lang.mailbox_form_on_close,
                gray_button: !0,
                decline: s.noop,
                accept: s.bind(function(e) {
                    this.form_modified = !1,
                    AMOCRM.router.preventPageChange(!1, this.prevent_code),
                    s.isFunction(e) && e()
                }, this)
            },
            AMOCRM.router.registerPreventConfig(this._confirmModalConfig, this.prevent_code)
        },
        onMailTipClick: n._preload(["/tmpl/mail/modal/gmail_instruction.twig", "/tmpl/mail/modal/rambler_instruction.twig"], "_onMailTipClick"),
        _onMailTipClick: function(e) {
            var t = this.provider;
            e.preventDefault(),
            new r({
                class_name: "modal-list gmail-modal-instruction",
                text: AMOCRM.lang.mailbox_two_step_instruction_title,
                accept_text: "OK",
                init: function() {
                    var e = this;
                    this.$modal_body.find(".modal-body__actions").hide().end().find(".modal-body__caption").after(n({
                        ref: "/tmpl/mail/modal/" + t + "_instruction.twig"
                    }).render({
                        lang: AMOCRM.lang,
                        images_tmp: "/frontend/images/interface/mail_instructions/" + AMOCRM.lang_id + "/instruction"
                    })).end().find("img").on("load", function(t) {
                        e.$modal_body.trigger("modal:centrify")
                    })
                }
            })
        },
        startOAuth: function(e) {
            var t = this.provider || "none"
              , i = location.origin + "/mail/inbox/?mailbox-setup=general";
            this.disablePreventPageHandler(),
            AMOCRM.router.registerPreventConfig(!1, this.prevent_code),
            a.requestOAuthConnect(t, i).done(function(e) {
                window.location.href = e.url
            }).fail(function() {
                u.connectionErrorHandler()
            })
        }
    })
}),
define("lib/interface/mail/settings/mailbox_edit_form", ["require", "jquery", "twig", "lib/components/mail/form", "lib/interface/mail/mixins/mailbox_base", "lib/interface/mail/settings/user_assign", "lib/components/mail/api_v2"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("lib/components/mail/form"), o = e("lib/interface/mail/mixins/mailbox_base"), r = e("lib/interface/mail/settings/user_assign"), a = e("lib/components/mail/api_v2");
    return t = n.View.extend({
        _classes: function() {
            return {
                mailbox_change_auth: "mailbox-change_auth",
                mailbox__buttons: "mailbox__buttons",
                mailbox_form__error: "mailbox-form__error",
                mailbox_form__error_input: "mailbox-form__error-input",
                mailbox__options: "mailbox-options",
                mailbox__additional_options: "mailbox-options_additional",
                mailbox__main_options: "mailbox-options_main",
                mailbox__form_row_password: "mailbox-form__row-password",
                mailbox__form_row_email: "mailbox-form__row-email",
                mailbox__form_row_login: "mailbox-form__row-login",
                mailbox__form_row_imap_login: "mailbox-form__row-imap_login",
                text_input_invalid: "validate-has-error",
                mailbox__toggler: "mailbox__toggler",
                mailbox__show_login: "mailbox__show-login",
                mailbox__show_imap_login: "mailbox__show-imap-login",
                mailbox__show_smtp_login: "mailbox__show-smtp-login"
            }
        },
        onChangeGroupMessages: function(e) {
            var t = i(this._selectors().mailbox__group_messages)
              , s = i(this._selectors().mailbox__create_leads);
            t.prop("checked") ? s.removeAttr("disabled") : s.attr("disabled", !0).prop("checked", !1).trigger("change")
        },
        _selectors: function() {
            return {
                mailbox__button_save: "#mailbox-button__save",
                mailbox__button_enable: "#mailbox-button__enable",
                imap_server: "#mailbox-imap-server",
                imap_port: "#mailbox-imap-port",
                imap_enc: "#mailbox-imap-enc",
                smtp_server: "#mailbox-smtp-server",
                smtp_port: "#mailbox-smtp-port",
                smtp_enc: "#mailbox-smtp-enc",
                imap_login: "#mailbox-imap-login",
                imap_password: "#mailbox-imap-password",
                smtp_login: "#mailbox-smtp-login",
                smtp_password: "#mailbox-smtp-password",
                user_assign_container: "#mailbox-user-assign-container",
                mailbox__toggler: ".mailbox__toggler",
                cubestats_toggler__item: ".cubestats-toggler__item",
                mailbox__form_row_smtp_login: ".mailbox-options_main .mailbox-form__row-smtp_login",
                mailbox__main_options__auth_inputs: ".mailbox-options_main .auth_input",
                mailbox__additional_options__inputs: ".mailbox-options_additional input",
                mailbox__group_messages: "#mailbox-group-messages",
                mailbox__create_leads: "#mailbox-create-leads"
            }
        },
        edit_mode: "credentials",
        events: _.extend({}, n.View.prototype.events, {
            "click .mailbox-change_auth": "onChangeAuthType",
            "click .cubestats-toggler__item": "changeTabHandler",
            "click .mailbox__show-login": "onShowLogin",
            "click #mailbox-button__remove": "onRemove",
            "click #mailbox-button__enable": "onEnable",
            "click #mailbox-button__save": "onSave",
            "click #mailbox-button__cancel": "onCancel",
            "click #mailbox-button__disable": "onDisable",
            "click #mailbox-group-messages": "onChangeGroupMessages",
            "focus input": "onInputFocus",
            "blur input": "onInputBlur"
        }),
        initialize: function(e) {
            this.errors = [],
            this.save_locked = !1,
            this.data = e.data,
            _.bindAll(this, "processSave", "saveMailbox", "saveFailHandler", "saveSuccessHandler", "removeHandler", "disableHandler"),
            this.on("view:attached", this.onViewAttached),
            this.on("form:error", this.showFormError),
            this.promise = this.render().then(_.bind(function() {
                n.View.prototype.initialize.apply(this, arguments),
                this.model.set("user_id", this.data.user_id || null),
                this.model.updateDefaults(),
                this.listenTo(this.model, "has_changes", this.onFormChange),
                this.listenTo(this.model, "has_reverted", this.onFormReverted)
            }, this))
        },
        destroy: function() {
            this.destroyUserAssign(),
            n.View.prototype.destroy.call(this)
        },
        revert: function() {
            this.model.set("user_id", this.data.user_id || null),
            n.View.prototype.revert.call(this)
        },
        render: s._preload(["/tmpl/mail/settings/mailbox_edit_form.twig", "/tmpl/mail/settings/mailbox_form_disabled.twig"], "_render"),
        _render: function() {
            var e;
            e = s(this.data.active ? {
                ref: "/tmpl/mail/settings/mailbox_edit_form.twig"
            } : {
                ref: "/tmpl/mail/settings/mailbox_form_disabled.twig"
            }),
            this.setElement(i(e.render(this.data))),
            this._findElem("mailbox__toggler").find("#dashborad_date_toggler-active").remove()
        },
        onViewAttached: function() {
            this.showFields(),
            this.data.active && this._findElem("mailbox__toggler").show(),
            this._findElem("mailbox__buttons").show(),
            o.disableButton.call(this)
        },
        destroyUserAssign: function() {
            this.userAssign && (this.stopListening(this.userAssign),
            this._destroyComponent(this.userAssign, !0))
        },
        addUserAssign: function() {
            var e = this._addComponent(r, {
                editable: "convertation" !== this.data.state,
                selected_user_id: this.model.get("user_id")
            });
            e.promise.then(_.bind(function() {
                this._elem("user_assign_container").append(e.$el),
                e.trigger("view:attached")
            }, this)),
            this.listenTo(e, "user:selected", function(e) {
                this.model.set("user_id", e),
                this.model.hasChanges() ? this.model.trigger("has_changes") : this.model.trigger("has_reverted")
            }),
            this.userAssign = e
        },
        changeTabHandler: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("option");
            return t.hasClass("active") ? !1 : (this._findElem("cubestats_toggler__item").removeClass("active"),
            t.addClass("active"),
            this.$el.find(".mailbox-form__row-password input").val(""),
            this.revert(),
            o.hideErrors(this),
            this.trigger("form:error", ""),
            this._findElem("mailbox__options").addClass("mailbox-options_hidden"),
            this.$el.find("." + s).removeClass("mailbox-options_hidden"),
            void ("mailbox-options_additional" === s ? ("on" === this.model.get("group_messages") ? this._findElem("mailbox__create_leads").removeAttr("disabled") : (this._findElem("mailbox__create_leads").prop("disabled", !0),
            "on" === this.model.get("create_leads") && this._findElem("mailbox__create_leads").trigger("change")),
            this.edit_mode = "settings",
            this.data.show_change_owner && this.addUserAssign()) : (this.destroyUserAssign(),
            this.edit_mode = "credentials")))
        },
        moveTogglerCursors: function() {
            var e = this._findElem("mailbox__toggler");
            e.each(function() {
                var e = i(this)
                  , t = e.find(".cubestats-toggler__item")
                  , s = t.closest(".active")
                  , n = e.find("#dashborad_date_toggler-active");
                n.css({
                    left: s.position().left + (t.index(s) > 0 ? 18 : 0),
                    width: s.outerWidth(),
                    visibility: "visible"
                })
            }).removeClass("toggler-no-active")
        },
        showFields: function() {
            var e = this.data.imap_need_login
              , t = this.data.smtp_need_login;
            "connection" === this.data.state && (e = t = !0),
            this._findElem("mailbox__form_row_password").show(),
            this.showAdditionalAuthFields(e, t)
        },
        onShowLogin: function() {
            return this.showAdditionalAuthFields(!0, !0),
            !1
        },
        onFormChange: function() {
            o.enableButton.call(this)
        },
        onFormReverted: function() {
            this.errors = [],
            this.trigger("form:error", ""),
            o.disableButton.call(this)
        },
        showAdditionalAuthFields: function(e, t) {
            this._findElem("mailbox__form_row_smtp_login").toggle(t),
            this._findElem("mailbox__form_row_imap_login").toggle(e),
            o.toggleImapCaptions.call(this, e, !0),
            this._findElem("mailbox__show_login").hide()
        },
        processFields: function(e) {
            var t, i, s = {}, n = {};
            if ("credentials" === e ? (t = ["imap_password"],
            this.model.get("imap_login") && t.push("imap_login"),
            (this.model.get("smtp_login") || this.model.get("smtp_password")) && (t.push("smtp_login"),
            t.push("smtp_password"))) : t = ["imap_server", "imap_port", "imap_enc", "smtp_server", "smtp_port", "smtp_enc"],
            i = o.validateFields(this, t),
            i.length)
                return o.showFieldErrors(this, i),
                !1;
            o.hideErrors(this),
            this.trigger("form:error", "");
            var r;
            return "settings" === e ? (n = {
                sync: {
                    create_leads: "on" === this.model.get("create_leads")
                },
                options: {
                    group_messages: "on" === this.model.get("group_messages")
                }
            },
            n = _.extend(n, o.collectSettings(this.model)),
            r = {
                settings: n
            }) : (this.model.get("imap_login") ? s.imap = {
                login: this.model.get("imap_login"),
                password: this.model.get("imap_password")
            } : s = {
                password: this.model.get("imap_password")
            },
            (this.model.get("smtp_login") || this.model.get("smtp_password")) && (s.smtp = {
                login: this.model.get("smtp_login"),
                password: this.model.get("smtp_password")
            }),
            r = {
                credentials: s
            }),
            r
        },
        onSave: function(e) {
            if (e.stopPropagation(),
            !this.save_locked) {
                var t = this
                  , i = this.processFields(this.edit_mode);
                if (i !== !1)
                    return this.model.get("user_id") !== this.data.user_id ? void o.confirmOwnerChange(_.isNull(this.data.user_id)).done(function() {
                        t.processSave(i)
                    }) : void this.processSave(i)
            }
        },
        processSave: function(e) {
            var t = this._findElem("mailbox__button_save");
            o.disableButton.call(this),
            t.trigger("button:save:start"),
            this.saveMailbox(e).always(function(e) {
                t.trigger("button:load:stop"),
                o.enableButton.call(self)
            }).done(function(e) {
                t.trigger("button:saved")
            })
        },
        saveMailbox: function(e) {
            var t, s = this, n = i.Deferred(), o = s.data.id, r = function() {
                s.saveSuccessHandler.apply(this, arguments),
                s.trigger("mailbox:updated", o),
                n.resolve(arguments)
            }, l = function() {
                s.saveFailHandler.apply(this, arguments),
                n.reject(arguments)
            };
            return this.model.get("user_id") !== this.data.user_id && (t = r,
            r = function() {
                a.changeMailboxOwner(o, s.model.get("user_id")).done(function() {
                    s.trigger("mailbox:changed-owner", o)
                }).done(t).fail(l)
            }
            ),
            a.updateMailbox(o, e).done(r).fail(l),
            n.promise()
        },
        onInputFocus: function(e) {
            var t = i(e.currentTarget);
            t.data("timeoutBlur") && clearTimeout(t.data("timeoutBlur")),
            t.removeClass("validate-has-error")
        },
        onInputBlur: function(e) {
            var t, s = i(e.currentTarget), n = s.attr("name"), r = this;
            t = setTimeout(function() {
                var e = o.validateFields(r, [n]);
                e.length ? o.showFieldErrors(r, e) : o.setInputValid(s)
            }, 100),
            s.data("timeoutBlur", t)
        },
        onChangeAuthType: function(e) {
            return e.stopPropagation(),
            o.confirmAuthChange().done(_.bind(function() {
                a.changeMailboxAuth(this.data.id, "oauth").done(_.bind(function() {
                    this.trigger("mailbox:changed-auth", this.data.id, "oauth")
                }, this)).fail(o.connectionErrorHandler)
            }, this)),
            !1
        },
        onRemove: function() {
            this.model.get("id");
            o.confirmRemoveAction().done(this.removeHandler)
        },
        onDisable: function(e) {
            e.stopPropagation(),
            o.disableButton.call(this);
            var t = this;
            o.confirmDisableAction().done(this.disableHandler).always(function() {
                o.enableButton.call(t)
            })
        },
        removeHandler: function(e) {
            var t = this.data.id
              , i = this;
            a.deleteMailbox(t).done(function(e) {
                i.trigger("mailbox:deleted", t)
            }).fail(o.connectionErrorHandler)
        },
        disableHandler: function(e) {
            var t = this.data.id
              , i = this
              , s = e ? a.deleteMailbox(t) : a.disableMailbox(t);
            s.done(function(s) {
                e ? i.trigger("mailbox:deleted", t) : i.trigger("mailbox:disabled", t)
            }).fail(o.connectionErrorHandler)
        },
        onEnable: function(e) {
            if (e.stopPropagation(),
            !this.save_locked) {
                var t, i = this, s = this._findElem("mailbox__button_save");
                t = this.processFields(this.edit_mode),
                t !== !1 && (o.disableButton.call(this),
                s.trigger("button:save:start"),
                a.enableMailbox(this.data.id, t).always(function() {
                    s.trigger("button:load:stop"),
                    o.enableButton.call(i)
                }).done(_.bind(function(e) {
                    this.trigger("mailbox:enabled", this.data.id)
                }, this)).fail(this.saveFailHandler))
            }
        },
        onCancel: function(e) {
            return this.block_cancel ? void e.preventDefault() : (this.revert(),
            void this.trigger("form:canceled"))
        },
        saveSuccessHandler: function(e) {
            this.trigger("mailbox:updated", this.data.id),
            this.onFormReverted()
        },
        saveFailHandler: function(e) {
            if (e = e.responseJSON || {},
            e.error_code) {
                o.hideErrors(this),
                this.trigger("form:error", "");
                var t = "mailbox_error_" + e.error_code
                  , i = [];
                e.fields && _.each(e.fields, function(e, t) {
                    t = t.replace(".", "_"),
                    "email" !== t && i.push({
                        field: t,
                        code: e
                    })
                }),
                i.length && o.showFieldErrors(this, i),
                t && this.trigger("form:error", AMOCRM.lang[t]),
                this.data.imap_need_login && this.data.smtp_need_login || this._findElem("mailbox__form_row_smtp_login").is(":visible") && this._findElem("mailbox__form_row_imap_login").is(":visible") || this._findElem("mailbox__show_login").show()
            } else
                o.connectionErrorHandler()
        },
        showFormError: function(e) {
            e && e.length ? this._elem("mailbox_form__error").show().text(e) : this._elem("mailbox_form__error").hide().empty()
        }
    })
}),
define("lib/interface/mail/settings/mailbox_edit_oauthform", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/components/mail/form", "lib/components/mail/api_v2", "lib/interface/mail/mixins/mailbox_base", "lib/interface/mail/settings/user_assign", "lib/common/user_rights"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = (e("lib/common/fn"),
    e("lib/components/mail/form")), r = e("lib/components/mail/api_v2"), a = e("lib/interface/mail/mixins/mailbox_base"), l = e("lib/interface/mail/settings/user_assign"), c = e("lib/common/user_rights");
    return t = o.View.extend({
        options: {},
        events: s.extend({}, o.View.prototype.events, {
            "click .mailbox-change_auth": "onChangeAuthType",
            "click #mailbox-button__save": "onSave",
            "click #mailbox-button__enable": "onEnable",
            "click #mailbox-button__disable": "onDisable",
            "click #mailbox-button__cancel": "onCancel",
            "click #mailbox-button__remove": "onRemove",
            "click #mailbox-group-messages": "onChangeGroupMessages"
        }),
        _classes: function() {
            return {
                mailbox_change_auth: "mailbox-change_auth",
                mailbox__options: "mailbox__options",
                mailbox__buttons: "mailbox__buttons",
                mailbox__right_block: "mailbox__right-block",
                mailbox_form__error: "mailbox-form__error"
            }
        },
        _selectors: function() {
            return {
                user_assign_container: "#mailbox-user-assign-container",
                mailbox__button_save: "#mailbox-button__save",
                mailbox__button_enable: "#mailbox-button__enable",
                mailbox__button_disable: "#mailbox-button__disable",
                mailbox__group_messages: "#mailbox-group-messages",
                mailbox__create_leads: "#mailbox-create-leads"
            }
        },
        initialize: function(e) {
            this.errors = [],
            this.save_locked = !1,
            this.on("view:attached", this.onViewAttached),
            this.on("form:error", this.showFormError),
            s.bindAll(this, "processSave", "enableSuccessHandler", "enableFailHandler", "removeHandler", "disableHandler"),
            this.options = e || {},
            this.data = this.options.data || null,
            this.oauth = this.options.oauth || null,
            this.promise = this.render().then(s.bind(function() {
                if (o.View.prototype.initialize.apply(this, this.options),
                this.model.set("user_id", this.data.user_id || null),
                this.model.updateDefaults(),
                this.listenTo(this.model, "has_changes", this.onFormChange),
                this.listenTo(this.model, "has_reverted", this.onFormReverted),
                this.data.show_change_owner) {
                    var e = this._addComponent(l, {
                        editable: "convertation" !== this.data.state,
                        selected_user_id: this.model.get("user_id")
                    });
                    e.promise.then(s.bind(function() {
                        this._elem("user_assign_container").append(e.$el),
                        e.trigger("view:attached")
                    }, this)),
                    this.listenTo(e, "user:selected", function(e) {
                        this.model.set("user_id", e),
                        this.model.hasChanges() ? this.model.trigger("has_changes") : this.model.trigger("has_reverted")
                    }),
                    this.userAssign = e
                }
                this.data.active && this._elem("mailbox__options").show()
            }, this))
        },
        destroy: function() {
            this.userAssign && (this.stopListening(this.userAssign),
            this._destroyComponent(this.userAssign, !0)),
            o.View.prototype.destroy.call(this)
        },
        onViewAttached: function() {
            var e = this;
            if (this.data.active)
                a.disableButton.call(this);
            else if (a.enableButton.call(this),
            this.oauth) {
                var t = this.oauth;
                "success" === t.result && (this._elem("mailbox__button_enable").trigger("button:save:start"),
                a.disableButton.call(e),
                r.enableOAuthMailbox(this.data.id, t.token).always(function() {
                    e._elem("mailbox__button_enable").trigger("button:load:stop"),
                    a.enableButton.call(e)
                }).done(this.enableSuccessHandler).fail(this.enableFailHandler))
            }
        },
        onChangeAuthType: function(e) {
            return e.stopPropagation(),
            a.confirmAuthChange().done(s.bind(function() {
                r.changeMailboxAuth(this.data.id, "login").done(s.bind(function() {
                    this.trigger("mailbox:changed-auth", this.data.id, "login")
                }, this)).fail(a.connectionErrorHandler)
            }, this)),
            !1
        },
        render: n._preload(["/tmpl/mail/settings/mailbox_edit_oauthform.twig", "/tmpl/mail/settings/mailbox_oauthform_disabled.twig"], "_render"),
        onChangeGroupMessages: function(e) {
            var t = i(this._elem("mailbox__group_messages"))
              , s = i(this._elem("mailbox__create_leads"));
            t.prop("checked") ? s.removeAttr("disabled") : s.attr("disabled", !0).prop("checked", !1).trigger("change")
        },
        _render: function() {
            var e;
            e = n(this.data.active ? {
                ref: "/tmpl/mail/settings/mailbox_edit_oauthform.twig"
            } : {
                ref: "/tmpl/mail/settings/mailbox_oauthform_disabled.twig"
            }),
            this.setElement(i(e.render(this.data))),
            this._elem("mailbox__buttons").show()
        },
        onFormChange: function() {
            a.enableButton.call(this)
        },
        onFormReverted: function() {
            this.errors = [],
            this._findElem("mailbox_form__error").empty().hide(),
            a.disableButton.call(this)
        },
        onRemove: function() {
            this.model.get("id");
            a.confirmRemoveAction().done(this.removeHandler)
        },
        onEnable: function(e) {
            if (e.stopPropagation(),
            !this.save_locked) {
                a.disableButton.call(this);
                var t = this
                  , i = location.origin + "/mail/inbox/?mailbox-setup=" + this.data.id;
                this._elem("mailbox__button_enable").trigger("button:save:start"),
                r.requestOAuthMailboxConnect(this.data.id, i).always(function() {
                    a.enableButton.call(t),
                    t._elem("mailbox__button_enable").trigger("button:load:stop")
                }).done(function(e) {
                    window.location.href = e.url
                }).fail(a.connectionErrorHandler)
            }
        },
        onSave: function(e) {
            return e.stopPropagation(),
            this.save_locked ? void 0 : this.model.get("user_id") !== this.data.user_id ? void a.confirmOwnerChange(s.isNull(this.data.user_id)).done(this.processSave) : void this.processSave()
        },
        processSave: function() {
            a.disableButton.call(this);
            var e = this;
            this._elem("mailbox__button_save").trigger("button:save:start"),
            this.saveMailbox().always(function() {
                a.enableButton.call(e),
                e._elem("mailbox__button_save").trigger("button:load:stop")
            })
        },
        onDisable: function(e) {
            e.stopPropagation();
            var t = this;
            this._elem("mailbox__button_disable").trigger("button:save:start"),
            a.confirmDisableAction().done(this.disableHandler).always(function() {
                t._elem("mailbox__button_disable").trigger("button:load:stop")
            })
        },
        onCancel: function(e) {
            return this.block_cancel ? void e.preventDefault() : (this.revert(),
            void this.trigger("form:canceled"))
        },
        saveMailbox: function() {
            var e, t = this, s = {
                settings: {
                    sync: {
                        create_leads: "on" === this.model.get("create_leads")
                    },
                    options: {
                        group_messages: "on" === this.model.attributes.group_messages
                    }
                }
            }, n = t.data.id, o = i.Deferred(), l = function() {
                a.connectionErrorHandler(),
                o.reject(arguments)
            }, d = function(e) {
                t.revert(),
                t.trigger("mailbox:updated", n),
                o.resolve(arguments)
            };
            return c.isAdmin() && this.model.get("user_id") !== this.data.user_id && (e = d,
            d = function() {
                r.changeMailboxOwner(n, t.model.get("user_id")).done(function() {
                    t.trigger("mailbox:changed-owner", n)
                }).done(e).fail(l)
            }
            ),
            r.updateMailbox(n, s).done(d).fail(l),
            o.promise()
        },
        removeHandler: function(e) {
            var t = this.data.id
              , i = this;
            r.deleteMailbox(t).done(function(e) {
                i.trigger("mailbox:deleted", t)
            }).fail(a.connectionErrorHandler)
        },
        disableHandler: function(e) {
            var t = this.data.id
              , i = this
              , s = e ? r.deleteMailbox(t) : r.disableMailbox(t);
            s.done(function(s) {
                e ? i.trigger("mailbox:deleted", t) : i.trigger("mailbox:disabled", t)
            }).fail(a.connectionErrorHandler)
        },
        enableSuccessHandler: function(e) {
            this.trigger("mailbox:enabled", this.data.id)
        },
        enableFailHandler: function(e) {
            return e = e.responseText ? JSON.parse(e.responseText) : "",
            e.error_code && "email_mismatch" === e.error_code ? void this.trigger("form:error", AMOCRM.lang["mailbox_error_" + e.error_code]) : void a.connectionErrorHandler()
        },
        showFormError: function(e) {
            e && e.length ? this._elem("mailbox_form__error").show().text(e) : this._elem("mailbox_form__error").hide().empty()
        }
    })
}),
define("lib/interface/mail/settings/mailbox_item", ["require", "jquery", "underscore", "twig", "cocktail", "lib/core/view", "lib/components/mail/api_v2", "lib/interface/mail/mixins/mailbox_base", "lib/interface/mail/settings/mailbox_edit_form", "lib/interface/mail/settings/mailbox_edit_oauthform", "lib/common/user_rights"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/core/view"), a = e("lib/components/mail/api_v2"), l = e("lib/interface/mail/mixins/mailbox_base"), c = e("lib/interface/mail/settings/mailbox_edit_form"), d = e("lib/interface/mail/settings/mailbox_edit_oauthform"), u = e("lib/common/user_rights");
    return t = r.extend({
        options: {},
        edit_form: null,
        edit_mode: "credentials",
        events: s.extend({}, r.prototype.events, {
            "click .mailbox-header__name": "onHeaderClick",
            "click .js-mailbox-connect-cancel": "onCancelConnectionClick"
        }),
        _classes: function() {
            return {
                mailbox__added_icon: "mailbox__added-icon",
                mailbox__body: "mailbox__body",
                mailbox_form__error: "mailbox-form__error",
                mailbox_form__error_input: "mailbox-form__error-input",
                text_input_invalid: "validate-has-error"
            }
        },
        _selectors: function() {
            return {
                imap_server: "#mailbox-imap-server",
                imap_port: "#mailbox-imap-port",
                imap_enc: "#mailbox-imap-enc",
                smtp_server: "#mailbox-smtp-server",
                smtp_port: "#mailbox-smtp-port",
                smtp_enc: "#mailbox-smtp-enc",
                imap_login: "#mailbox-imap-login",
                imap_password: "#mailbox-imap-password",
                smtp_login: "#mailbox-smtp-login",
                smtp_password: "#mailbox-smtp-password"
            }
        },
        initialize: function(e) {
            this.options = s.extend({}, e || {}),
            r.prototype.initialize.apply(this, arguments),
            s.bindAll(this, "cancelSuccessHandler"),
            this.listenTo(this.model, "change", function() {
                this.rerender()
            }),
            this.promise = this.render().then(s.bind(function() {
                this.options = s.extend(this.options)
            }, this))
        },
        destroy: function() {
            this.destroyForm(),
            r.prototype.destroy.apply(this, arguments)
        },
        getTemplateParams: function() {
            var e, t = l.getProviderInfo(this.model.get("email")), i = "default";
            return t && (i = t.provider),
            e = s.extend({
                provider_icon: i,
                is_admin: u.isAdmin(),
                managers: this.options.managers
            }, this.model.attributes)
        },
        render: n._preload(["/tmpl/mail/settings/mailbox_item.twig"], "_render"),
        _render: function() {
            this.setElement(i(n({
                ref: "/tmpl/mail/settings/mailbox_item.twig"
            }).render(this.getTemplateParams())))
        },
        rerender: function() {
            var e = i(n({
                ref: "/tmpl/mail/settings/mailbox_item.twig"
            }).render(this.getTemplateParams()));
            this.undelegateEvents(),
            this.$el.replaceWith(e),
            this.setElement(e)
        },
        refreshModel: function() {
            a.getMailbox(this.model.get("id")).done(s.bind(function(e) {
                this.model.set(e)
            }, this))
        },
        expand: function(e, t) {
            return t = t || this.model.get("auth"),
            this.edit_form = this.createForm(t, e),
            this.bindEventsToForm(this.edit_form),
            this.edit_form.promise
        },
        _checkConnectionStatusErrors: function() {
            var e, t = this.model.get("status"), i = !1;
            e = s.chain(t.error_fields).filter(function(e, t) {
                return "email" !== e
            }).map(function(e, t) {
                return e = e.split("."),
                -1 !== s.indexOf(["server", "port"], e[1]) && (i = !0),
                {
                    field: e.join("_"),
                    code: t
                }
            }).value(),
            e.length && (l.showFieldErrors(this, e),
            this.$(".mailbox-options_main").find(".mailbox-form-row").show(),
            i && this.$('.cubestats-toggler__item[data-option="mailbox-options_additional"]').trigger("click"))
        },
        createForm: function(e, t) {
            var i, n = this, o = u.isAdmin(), r = this.model.get("settings"), a = {
                id: this.model.get("id"),
                email: this.model.get("email"),
                active: this.model.get("active"),
                state: this.model.get("state"),
                user_id: this.model.get("user_id"),
                create_leads: r.sync.create_leads,
                group_messages: r.options.group_messages,
                show_change_owner: o && !this.model.get("private")
            };
            return "login" === e ? (s.extend(a, {
                provider: this.model.get("provider"),
                imap_need_login: r.imap.need_login,
                imap_login: "",
                imap_password: "",
                imap_server: r.imap.server,
                imap_port: r.imap.port,
                imap_enc: r.imap.enc,
                smtp_need_login: r.smtp.need_login,
                smtp_login: "",
                smtp_password: "",
                smtp_server: r.smtp.server,
                smtp_port: r.smtp.port,
                smtp_enc: r.smtp.enc
            }),
            i = this._addComponent(c, {
                data: a
            })) : i = this._addComponent(d, {
                data: a,
                oauth: t
            }),
            i.promise.then(function() {
                n._findElem("mailbox__body").append(i.$el)
            }),
            i
        },
        destroyForm: function(e) {
            this.edit_form && (this.stopListening(this.edit_form),
            this._destroyComponent(this.edit_form, !0),
            this._findElem("mailbox__body").empty(),
            delete this.edit_form,
            e && e.apply(this))
        },
        bindEventsToForm: function(e) {
            var t;
            this.listenTo(e, "form:canceled", function() {
                this.destroyForm(),
                this.contract()
            }),
            this.listenTo(e, "mailbox:deleted", function() {
                this.destroyForm(),
                this.contract(),
                this.trigger("mailbox:deleted", this.model.get("id"))
            }),
            t = function() {
                this.destroyForm(),
                this.contract(),
                this.refreshModel()
            }
            ,
            this.listenTo(e, "mailbox:disabled", t),
            this.listenTo(e, "mailbox:enabled", t),
            this.listenTo(e, "mailbox:updated", function() {
                t.call(this),
                this.trigger("mailbox:updated", this.model.get("id"))
            }, this),
            this.listenTo(e, "mailbox:changed-owner", function() {
                this.trigger("mailbox:changed-owner", this.model.get("id"))
            }),
            this.listenTo(e, "mailbox:changed-auth", function(e, t) {
                this.model.set("auth", t),
                this.refreshModel(),
                this.destroyForm(function() {
                    this.expandOnLoad()
                })
            })
        },
        expandOnLoad: function(e, t) {
            return this.expand(e, t).then(s.bind(function() {
                this.$el.removeClass("mailbox__container_contracted").addClass("mailbox__container_expanded"),
                this.edit_form.model.set("email", this.model.get("email")),
                this.edit_form.trigger("view:attached")
            }, this))
        },
        contract: function(e) {
            this.destroyForm(),
            e = e || this.$el,
            e.removeClass("mailbox__container_expanded").addClass("mailbox__container_contracted")
        },
        onHeaderClick: function() {
            this.$el.hasClass("mailbox__container_not-expandable") || (this.$el.hasClass("mailbox__container_contracted") ? this.expand().then(s.bind(function() {
                this.trigger("view:selected", this),
                this.$el.removeClass("mailbox__container_contracted").addClass("mailbox__container_expanded"),
                this.edit_form.trigger("view:attached"),
                this._checkConnectionStatusErrors()
            }, this)) : this.contract())
        },
        onCancelConnectionClick: function() {
            return a.cancelConnection(this.model.get("id")).done(this.cancelSuccessHandler).fail(l.connectionErrorHandler),
            !1
        },
        cancelSuccessHandler: function(e) {
            this.destroyForm(),
            this.contract(),
            this.trigger("mailbox:deleted", this.model.get("id"))
        }
    }),
    o.mixin(t, l),
    t
}),
define("lib/interface/mail/mail_settings", ["require", "jquery", "underscore", "lib/common/fn", "lib/common/user_rights", "lib/core/users", "backbone", "twig", "lib/core/view", "lib/components/mail/api_v2", "lib/interface/mail/common/modals", "lib/interface/mail/templates/index", "lib/interface/mail/mailbox_form", "lib/interface/mail/settings/mailbox_item", "lib/interface/mail/mailbox_suggest"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/common/user_rights"), r = e("lib/core/users"), a = e("backbone"), l = e("twig"), c = e("lib/core/view"), d = e("lib/components/mail/api_v2"), u = e("lib/interface/mail/common/modals"), h = e("lib/interface/mail/templates/index"), _ = e("lib/interface/mail/mailbox_form"), p = e("lib/interface/mail/settings/mailbox_item"), m = e("lib/interface/mail/mailbox_suggest");
    return t = c.extend({
        collection: null,
        data: null,
        options: {},
        need_reload: !1,
        intervalDied: !1,
        globalIntervalDied: !1,
        events: function() {
            return s.extend({}, c.prototype.events, {
                "click .mail-settings-mail__instruction": "instructionShow",
                "click .mail-settings__instruction-block-hide": "instructionHide"
            })
        }(),
        _selectors: function() {
            return {
                templates_area: "#mail-templates__container",
                ext_addresses_area: "#mail-ext-addresses__container",
                mailbox_list: "#mailbox-list",
                mailbox_form: "#mailbox-form",
                ext_addresses_container: "#mail-ext-addresses__input",
                empty_domains_err: ".js-empty-domains-error"
            }
        },
        initialize: function(e) {
            c.prototype.initialize.apply(this, arguments),
            s.bindAll(this, "getMailboxesHandler", "onMailboxOwnerChange"),
            this.options = s.extend({
                expand: null,
                user_rights: null,
                oauth: null
            }, e),
            this.subviews = [],
            this.init()
        },
        init: function() {
            return this.collection = new a.Collection([]),
            this._makeRequest().done(this.getMailboxesHandler)
        },
        _makeRequest: function() {
            return d.getMailboxes("setup")
        },
        destroy: function() {
            this.globalIntervalDied = !0,
            this.destroyList(),
            this.destroyForm(),
            this.collection.reset(),
            this.templates_list && this.templates_list.destroy(),
            c.prototype.destroy.call(this)
        },
        getMailboxesHandler: function(e) {
            e = e || [],
            this.data = {
                items: e,
                template: {
                    name: "mail/mail_more.twig"
                },
                account_emails: AMOCRM.constant("amomail").bcc_mailbox,
                is_admin: o.isAdmin()
            },
            this.collection.reset(e),
            this.render()
        },
        render: l._preload(["/tmpl/mail/mail_more.twig", "/tmpl/mail/modal/ext_addresses.twig"], "_render"),
        _render: function() {
            var e, t = this, n = this.options.offset_btn, o = this.options.offset_el, r = this.options.expand;
            this.$el.html(i(l({
                ref: "/tmpl/mail/mail_more.twig"
            }).render(this.data))),
            this._findElem("mailbox_list").empty(),
            this._findElem("ext_addresses_area").html(l({
                ref: "/tmpl/mail/modal/ext_addresses.twig"
            }).render()),
            i.when(this.list_xhr = this.renderList(), this.templates_list_xhr = this.renderTemplatesList(), this.ext_addresses_xhr = this.renderExtAddresses()).then(s.bind(function() {
                o += this.getScrollbarWidth(),
                i(".modal_mail-more__wrapper").css("right", o),
                this.$(".modal_mail-more__triangle").css("right", n - o - 10),
                this.$el.closest(".modal_mail-more__wrapper").show(),
                r && "general" !== r && (r = +r,
                e = s.find(this.subviews, function(e) {
                    return e.model.id === r
                }),
                e && e.expandOnLoad(this.options.oauth).then(function() {
                    t.scrollTo(e.$el)
                })),
                this.options.$overlay.find(".modal-overlay__spinner").hide(),
                i("#page_change_loader").hide()
            }, this))
        },
        rerender: function() {
            this.destroyList(),
            this.destroyForm(),
            this.init(),
            this.checkMailStatus(this.data.items)
        },
        checkMailStatus: function(e) {
            var t, i = [];
            i = s.map(e, function(e, t) {
                return +e.id
            }),
            i.length <= 0 || (t = function() {
                d.getMailboxesStatus(i).done(s.bind(function(e) {
                    e && !e.error ? (this.intervalDied = !0,
                    s.each(e, function(e) {
                        -1 !== s.indexOf(["connection", "import", "sync"], e.status) && (this.intervalDied = !1)
                    }, this),
                    this.intervalDied || this.globalIntervalDied || setTimeout(s.bind(t, this), 1e4),
                    this.updateMailboxesStatus(e)) : this.intervalDied = !0
                }, this))
            }
            ,
            t.call(this))
        },
        updateMailboxesStatus: function(e) {
            var t = this;
            s.each(e, function(e) {
                var i = t.collection.get(e.id);
                i && !s.isEqual(i.get("status"), e) && i.set("status", e)
            })
        },
        renderList: function() {
            var e = this;
            this.renderNewMailboxForm(),
            this.collection.each(function(t) {
                e.renderMailboxItem(t)
            }),
            this.checkMailStatus(this.data.items)
        },
        renderNewMailboxForm: function() {
            var e = "general" === this.options.expand ? this.options.oauth : null
              , t = this._addComponent(_, {
                is_admin: o.isAdmin(),
                oauth: e
            });
            this.bindEventsToForm(t);
            var i = this._findElem("mailbox_form");
            t.promise.then(function() {
                i.empty().append(t.$el),
                t.trigger("view:attached")
            }),
            this.mailbox_form = t,
            this.globalIntervalDied = !1
        },
        renderMailboxItem: function(e) {
            var t = this._addComponent(p, {
                model: e,
                managers: s.extend(r.get(), r.get("inactive"))
            });
            this.bindEventsToItem(t),
            this.subviews.unshift(t);
            var i = this._findElem("mailbox_list");
            t.promise.then(function() {
                i.prepend(t.$el),
                t.trigger("view:attached")
            }),
            this.globalIntervalDied = !1
        },
        renderTemplatesList: function() {
            var e = this
              , t = this._findElem("templates_area");
            return t.length ? i.when(d.getTemplates(), d.getTemplateMarkers()).done(function(i, s) {
                e.templates_list = new h({
                    $container: t,
                    items: i[0],
                    markers: s
                })
            }).fail(u.commonErrorConfirm) : void 0
        },
        renderExtAddresses: function() {
            var e = this._findElem("ext_addresses_container")
              , t = [];
            return e.length && o.isAdmin() ? d.getExternalAddresses().done(s.bind(function(i) {
                i && !i.error && s.isArray(i) && (t = s.map(i, function(e, t) {
                    return {
                        id: t,
                        email: e,
                        saved: !0
                    }
                }),
                new m({
                    $container: e,
                    class_name: "mail-suggest_ext_addresses",
                    data_type: "ext_addresses",
                    search_contacts: !1,
                    placeholder: n.i18n("Add an address"),
                    items: t
                }))
            }, this)).fail(u.commonErrorConfirm) : void 0
        },
        bindEventsToForm: function(e) {
            this.listenTo(e, "mailbox:added", this.onMailboxAdd)
        },
        bindEventsToItem: function(e) {
            this.listenTo(e, "mailbox:deleted", this.onMailboxDelete),
            this.listenTo(e, "mailbox:updated", this.onMailboxUpdate),
            this.listenTo(e, "mailbox:changed-owner", this.onMailboxOwnerChange),
            this.listenTo(e, "view:selected", function(e) {
                s.each(this.subviews, function(t) {
                    e !== t && t.contract()
                })
            })
        },
        destroyForm: function() {
            this.mailbox_form && (this.stopListening(this.mailbox_form),
            this._destroyComponent(this.mailbox_form, !0),
            delete this.mailbox_form)
        },
        destroyList: function() {
            var e = this;
            s.each(this.subviews, function(t) {
                e.stopListening(t),
                e._destroyComponent(t, !0)
            }),
            this.subviews = []
        },
        onMailboxAdd: function(e) {
            d.getMailbox(e).done(s.bind(function(e) {
                e.status = {
                    current: "import",
                    progress: 1
                },
                this.collection.unshift(e);
                var t = this.collection.get(e.id);
                this.renderMailboxItem(t),
                this.checkMailStatus([e])
            }, this));
            var t = AMOCRM.constant("amomail");
            this._$document.trigger("list:reload"),
            this._$document.trigger("mail:update:counter"),
            1 === this.collection.length && t.enabled === !1 && (t.enabled = !0,
            this._$document.trigger("mail:bind:counterhandler"))
        },
        onMailboxDelete: function(e) {
            var t, i;
            e = +e,
            t = s.findIndex(this.subviews, function(t) {
                return t.model && t.model.get("id") === e
            }),
            t > -1 && (i = this.subviews[t],
            this.subviews.splice(t, 1),
            this.stopListening(i),
            this._destroyComponent(i, !0)),
            this._$document.trigger("list:reload"),
            this._$document.trigger("mail:update:counter")
        },
        onMailboxUpdate: function(e) {
            this.globalIntervalDied = !0,
            this.checkMailStatus([{
                id: e
            }]),
            this.globalIntervalDied = !1
        },
        onMailboxOwnerChange: function(e) {
            this._$document.trigger("list:reload"),
            this._$document.trigger("mail:update:counter")
        },
        instructionShow: function() {
            this.$(".mail-settings__instruction-block").show(),
            this.$(".mail-settings-mail__instruction").hide()
        },
        instructionHide: function() {
            this.$(".mail-settings__instruction-block").hide(),
            this.$(".mail-settings-mail__instruction").show()
        },
        scrollTo: function(e) {
            this.$el.parents(".custom-scroll").animate({
                scrollTop: e.offset().top
            }, 1e3)
        },
        getScrollbarWidth: function() {
            var e, t, s;
            return void 0 === s && (e = i('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),
            t = e.children(),
            s = t.innerWidth() - t.height(99).innerWidth(),
            e.remove()),
            s
        }
    })
}),
define("lib/interface/mail/common", ["require", "jquery", "enquire", "lib/common/cookie", "lib/components/mail/api", "lib/interface/left_menu/index", "pubsub"], function(e) {
    "use strict";
    function t(e) {
        _.set({
            name: "fss",
            value: e
        })
    }
    function i() {
        return _.get("fss")
    }
    function s() {
        i() && b || t(u("#list_page_holder").hasClass("list-no-sidebar") ? "Y" : "N")
    }
    function n() {
        var e, t = u("#list_page_holder"), i = u(window).width() <= AMOCRM.min_width;
        t.removeClass("list-no-sidebar"),
        e = t.hasClass("list-no-sidebar") ? "Y" : "N",
        "N" == e && t.toggleClass("list-small-screen", i)
    }
    function o() {
        u("#list_page_holder").addClass("list-no-sidebar")
    }
    function r() {
        var e, t = u("#list_page_holder");
        t.children(".list__body").append(e = u('<div class="default-overlay" id="mail_overlay"></div>')),
        f.publish("overlay:show", {
            el: e
        })
    }
    function a() {
        u("#mail_overlay").trigger("overlay:hide")
    }
    function l(e) {
        s();
        var t = i()
          , r = u(window).width() <= AMOCRM.min_width;
        r ? (o(),
        a()) : (a(),
        "Y" == t ? o() : n()),
        b || (b = !0)
    }
    function c(e) {
        e = e || {};
        var s = u("#list_page_holder")
          , l = !!(e.inOverlay || u(window).width() <= AMOCRM.min_width)
          , c = l ? s.hasClass("list-no-sidebar") ? "Y" : "N" : i()
          , d = "Y" == c ? "N" : "Y"
          , h = !(!e.hide && "Y" != d);
        h ? o() : n(),
        l ? h ? a() : r() : (a(),
        t(d)),
        u(document).trigger("controls:hide")
    }
    function d() {
        AMOCRM.constant("amomail").enabled && p.getCounters().done(function(e) {
            m.updateItemCounter("mail", e.unreadCount),
            AMOCRM.constant("amomail").mailboxes.active = e.active,
            AMOCRM.constant("amomail").mailboxes.smtp_supports = e.smtpSupports
        })
    }
    var u = e("jquery")
      , h = e("enquire")
      , _ = e("lib/common/cookie")
      , p = e("lib/components/mail/api")
      , m = e("lib/interface/left_menu/index")
      , f = e("pubsub")
      , g = u(document)
      , b = !1;
    return g.on("click", ".js-list-sidebar-toggler", function() {
        c()
    }).on("click", "#mail_overlay", function() {
        c({
            hide: !0
        })
    }).on("page:changed", function() {
        u("html").addClass("no-transitions"),
        l(),
        u("html").focus().removeClass("no-transitions")
    }),
    h.register("screen and (max-width: 1100px)", {
        match: function() {
            b ? c({
                hide: !0
            }) : l()
        },
        unmatch: function() {
            l()
        }
    }),
    g.on("mail:bind:counterhandler", function() {
        g.on("page:changed", d)
    }).on("mail:unbind:counterhandler", function() {
        g.off("page:changed", d)
    }).on("mail:update:counter", function() {
        d()
    }).on("unsorted:item:accepted", function(e, t) {
        if ("mail" == t.get("category")) {
            var i = m.getItem("mail");
            if (i.length) {
                var s = i.find(".js-notifications_counter");
                if (s) {
                    var n = parseInt(s.html());
                    n > 0 && (n--,
                    m.updateItemCounter("mail", n))
                }
            }
        }
    }).on("page:changed", d).on("mailbox:view:settings", function(e, t) {
        "mail" != AMOCRM.data.current_entity || AMOCRM.data.is_card ? (t = "undefined" != typeof t ? t : "general",
        AMOCRM.router.navigate("/mail/inbox/?mailbox-setup=" + t, {
            trigger: !0
        })) : (u(window).scrollTop(0),
        AMOCRM.data.current_view.viewMailSettings(e, t))
    }),
    d(),
    {}
}),
define("lib/pages/mail/page", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/core/page", "lib/common/fn", "lib/components/lists/base/view", "lib/components/lists/base/header", "lib/components/mail/api", "lib/components/mail/api_v2", "lib/components/base/modal", "backbone", "lib/common/hs", "lib/common/cookie", "lib/common/urlparams", "lib/components/lists/base/list", "lib/components/base/scroll_saver", "lib/interface/mail/mail_settings", "lib/interface/mail/common/modals", "lib/interface/mail/common"], function(e) {
    "use strict";
    var t, i, s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("lib/core/view"), a = e("lib/core/page"), l = e("lib/common/fn"), c = e("lib/components/lists/base/view"), d = e("lib/components/lists/base/header"), u = e("lib/components/mail/api"), h = e("lib/components/mail/api_v2"), _ = e("lib/components/base/modal"), p = e("backbone"), m = e("lib/common/hs"), f = e("lib/common/cookie"), g = e("lib/common/urlparams"), b = e("lib/components/lists/base/list"), v = e("lib/components/base/scroll_saver"), y = e("lib/interface/mail/mail_settings"), w = e("lib/interface/mail/common/modals");
    return e("lib/interface/mail/common"),
    i = p.Collection.extend({
        model: c.Model,
        toJSON: function() {
            return this.map(function(e) {
                return e.toJSON()
            })
        }
    }),
    t = a.extend({
        className: "mail-page",
        collection: null,
        templateData: {},
        options: null,
        list_header: null,
        scrollOffset: null,
        columnsSettings: null,
        needSetColumns: !0,
        columnsChanged: !0,
        need_reload: !1,
        threadOpened: !1,
        intervalDied: !1,
        events: n.extend({}, a.prototype.events || {}, {
            "click .js-resend-thread": "resendThreadHandler",
            "dblclick .js-list-row:not(.list-row-head)": "openThread",
            "click .button-input_update": "updateStatusRun",
            "click .list-item__marker_unread": "checkAsRead",
            'change input[type="checkbox"]:not(#list_all_checker)': "onCheckboxChanged",
            "scroll .js-scroll-container": "stopPropagation",
            "show:actions": "spaceKeyPressed",
            "click #js-list-mail_more": "viewMailSettings",
            "click .list__body-left .js-navigate-link": "onSidebarNavigate"
        }),
        _selectors: function() {
            return {
                choosed_row: ".js-choosed-row"
            }
        },
        template: "/tmpl/mail/list.twig",
        preload: ["/tmpl/common/404page.twig"],
        _makeRequest: function(e) {
            var t = this
              , i = n.bind(this.onError, this)
              , o = s.Deferred()
              , r = n.bind(function() {
                return this.getList(this.getRouteParams(e.route_args)).fail(i).done(function(e) {
                    o.resolve(e),
                    t.show_settings = e.show_settings
                })
            }, this);
            return AMOCRM.constant("amomail").enabled ? r.call() : (this.checkMailAccount().done(r).fail(i),
            o)
        },
        _updateResponseData: function(e) {
            return AMOCRM.constant("user_rights", n.extend({}, AMOCRM.constant("user_rights"), {
                mail: e.user_rights.mail
            })),
            e.lang = this.prepareLangs(e),
            e.entity = AMOCRM.getBaseEntity(),
            e.fields[3].format = "full_with_year",
            e
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.options.routeParams = this.getRouteParams(e.route_args),
            this._request({
                construct_options: e
            })
        },
        getRouteParams: function(e) {
            return {
                folder: e[0],
                box: e[1],
                page: e[2]
            }
        },
        construct: function(e) {
            this.prepareColumns(e.response).done(n.bind(function() {
                n.each(e.response.items, function(e) {
                    e.entity = "mail"
                }),
                this.templateData = e.response,
                this.checkShowMailSettings(),
                AMOCRM.data.current_list = this.collection = this._addComponent(i, e.response.items),
                this.onLoadDone(e.response)
            }, this)),
            this.user_rights = AMOCRM.constant("user_rights"),
            AMOCRM.setTitle(e.response.lang.subtitle || e.response.lang.title)
        },
        destruct: function() {
            d.prototype.events["change #list_all_checker"] = "toggleAll",
            this.collection && (this.collection = null),
            this.keyEventsOff(),
            this.intervalDied = !0
        },
        bindEvents: function() {
            this._$document.on("keydown" + this.ns, n.bind(this.enterKeyPressed, this)).on("list:column:resized", n.bind(function(e) {
                this.columnsChanged = !0
            }, this))
        },
        getList: function(e) {
            var t, i = this;
            return e = e || {},
            e.box && (t = +e.box,
            this.mailbox_id = t),
            u.listThreads(e.folder, e.page, t).then(function(e) {
                return i.processListResponse(e)
            })
        },
        getColumnsSettings: function() {
            return s.ajax({
                url: "/ajax/columns_settings/",
                type: "GET",
                data: {
                    entity: AMOCRM.getBaseEntity()
                }
            }).done(n.bind(function(e) {
                this.columnsSettings = e && e.settings,
                this.columnsChanged = !1
            }, this))
        },
        onError: function() {
            s("#page_holder").html(o({
                ref: "/tmpl/common/404page.twig"
            }).render({
                title: AMOCRM.lang.page_404_caption,
                text: AMOCRM.lang.page_404_mail_text
            })),
            this.destroy()
        },
        listTrash: function() {
            "deleted" === this.options.routeParams.folder && this.$el.on("click", ".list-row__cell a", function(e) {
                e.preventDefault()
            }).find(".list__table").addClass("list-body-is-trash").find(".list-row__cell").find(".js-navigate-link").removeClass("js-navigate-link")
        },
        onLoadDone: function(e) {
            this.page = e.pagination.page,
            this.max_page = e.pagination.max_page,
            this.sentContactsRerender(),
            this.onLoadGenerals(),
            this.need_reload = !1,
            this.intervalDied = !1,
            this.$(".button-input_update").show().trigger("button:save:disable").trigger("button:save:start"),
            this.templateData.can_refresh || this.$(".button-input_update").hide(),
            this.templateData.can_refresh && this.checkMailStatus(e.menu),
            this.keyEventsOn(s("#list_all_checker").length > 0),
            this.bindEvents(),
            this.$pagination = s("#list_pagination"),
            c.View.prototype._setListElemsCache.call(this),
            this.$checkbox = s("#list_all_checker"),
            this.$checkbox_wrapper = this.$checkbox.parent(),
            this.$table_holder = s("#list_holder"),
            this.$cols = s("#list_col_group"),
            this.$table = s("#list_table"),
            this.listTrash()
        },
        processListResponse: function(e) {
            return e.items && (e.item = n.map(e.items, function(e) {
                return e.delivery && (e.class_name = e.class_name || "",
                e.delivery.failed ? e.class_name += " mail-list-row__status_failed" : e.delivery.queued && (e.class_name += " mail-list-row__status_queued")),
                e
            })),
            e
        },
        checkMailAccount: function() {
            var e = s.Deferred();
            return AMOCRM.constant("amomail") && AMOCRM.constant("amomail").enabled === !0 ? e.resolve() : h.registerAccount(AMOCRM.constant("account").id, AMOCRM.constant("account").subdomain).always(function() {
                e.resolve()
            }).done(function() {
                AMOCRM.constant("amomail").enabled = !0
            }),
            e
        },
        checkShowMailSettings: function() {
            var e = g.getQueryParam("mailbox-setup") || "";
            if (e = this.show_settings ? "general" : e) {
                var t, i = g.getQueryParam("oauth_result") || null, s = null;
                this._$document.scrollTop(0),
                i && (s = "success" === i ? {
                    result: i,
                    token: g.getQueryParam("oauth_data") || null,
                    provider: g.getQueryParam("oauth_provider") || null,
                    email: g.getQueryParam("email") || null
                } : {
                    result: i,
                    error: g.getQueryParam("oauth_error_code") || null,
                    description: g.getQueryParam("oauth_error_description") || ""
                }),
                this.viewMailSettings(null, e, s),
                t = g.removeQueryParam(["mailbox-setup", "oauth_result", "oauth_data", "oauth_provider", "oauth_error_code", "oauth_error_description", "email"]),
                AMOCRM.router.navigate(window.location.pathname + (t ? "?" + t : ""), {
                    trigger: !1,
                    replace: !0
                })
            }
        },
        stopPropagation: function(e) {
            e.stopPropagation()
        },
        enterKeyPressed: function(e) {
            if (13 == e.keyCode) {
                var t = this._findElem("choosed_row")
                  , i = t.attr("data-id");
                i && AMOCRM.router.navigate("/mail/thread/" + i, {
                    trigger: !0
                })
            }
        },
        onCheckboxChanged: function(e) {
            var t = this
              , i = s(e.target)
              , n = e.target.checked
              , o = i.data("value");
            o ? this.collection.get(+o).set("is_checked", n) : this.collection.each(function(e) {
                e.set("is_checked", n)
            }),
            "list_all_checker" === i.attr("id") ? this.toggleAll(n) : this.showMultiactions.call(t, e)
        },
        checkAsRead: function(e) {
            var t = s(e.currentTarget)
              , i = t.parents(".list-row").data("id")
              , o = this.collection.get(i);
            o && (o.set("actions", n.extend(o.get("actions"), {
                multi_read: !1
            })),
            t.remove(),
            u.readThread(i, {
                no_page_change: !0
            }).success(n.bind(function() {
                v.savePosition(),
                this._$document.triggerHandler("mail:update:counter"),
                this._$document.triggerHandler("list:reload")
            }, this)))
        },
        openThread: function(e) {
            "deleted" !== this.options.routeParams.folder && (this.threadOpened = !0,
            s(e.target).is(":input, a") || AMOCRM.router.navigate("/mail/thread/" + s(e.currentTarget).attr("data-id"), {
                trigger: !0
            }))
        },
        sentContactsRerender: function() {
            this.$el.find(".list-row__cell-to").each(function() {
                var e = s(this);
                if (e.find(".content-table__item__inner:not(.content-table__item__inner-head) span").length > 1) {
                    var t = 0;
                    e.find(".content-table__item__inner span").each(function() {
                        t > 0 && s(this).hide(),
                        t++
                    });
                    var i = e.find(".content-table__item__inner span").length - 1
                      , n = AMOCRM.lang.mail_recipients
                      , o = l.numeralWord(i, n) ? l.numeralWord(i, n) : n;
                    e.find(".content-table__item__inner").append('<span class="mail_sent_contacts_more"> ' + AMOCRM.lang.mail_sent_contacts_more.replace("#PLACEHOLDER#", i) + " " + o + "</span>")
                }
            })
        },
        updateStatusRun: function(e) {
            var t, i = s(e.currentTarget), n = this;
            n.intervalDied = !1,
            "Y" !== i.data("loading") && (t = null === this.options.routeParams.box ? this.templateData.menu[0].children[0].id + "" : this.options.routeParams.box + "",
            i.trigger("button:save:disable").trigger("button:save:start"),
            u.syncMailbox(t).done(function(e) {
                n.checkMailStatus(n.templateData.menu)
            }).fail(function(e) {
                i.trigger("button:load:stop").trigger("button:save:enable").trigger("button:load:stop"),
                n.templateData.can_refresh && n.$el.find(".list__top__status").html('<span class="error_status">' + AMOCRM.lang.mail_list_update_error + "</span>")
            }))
        },
        onLoadGenerals: function() {
            var e = s(".list__table__holder");
            this.hs = this._addComponent(m, {
                wrapper: e.parent(),
                scroller: e
            }),
            delete d.prototype.events["change #list_all_checker"],
            this.list_header && this._destroyComponent(this.list_header),
            this.options.tip_params = this._getListTipDefaultParams(),
            this.list_header = this._addComponent(d, {
                el: s("#list_head"),
                model: this.collection,
                mailbox_id: this.mailbox_id,
                tip_params: this._getListTipDefaultParams()
            }),
            "Y" === f.get("fss") && !this.$el.find("#list_page_holder").hasClass("list-no-sidebar") || this._$window.width() <= AMOCRM.min_width ? this.$el.find("#list_page_holder").addClass("list-no-sidebar") : this.$el.find("#list_page_holder").removeClass("list-no-sidebar")
        },
        checkMailStatus: function(e) {
            var t = this
              , i = [];
            if (n.each(e, function(e) {
                e.children && e.children.length && n.each(e.children, function(e) {
                    i.push(e.id)
                })
            }),
            !(i.length <= 0)) {
                var s = function() {
                    u.getMailboxStatus(i).done(function(e) {
                        void 0 != e && (t.updateButtonStatus(e, t.options.routeParams.box),
                        t.intervalDied || setTimeout(n.bind(s, t), 3e3))
                    }).fail(function(e) {
                        t.$(".button-input_update").trigger("button:save:enable").trigger("button:load:stop"),
                        t.templateData.can_refresh && t.$(".list__top__status").html('<span class="error_status">' + AMOCRM.lang.mail_list_update_error + "</span>")
                    })
                };
                s()
            }
        },
        updateButtonStatus: function(e, t) {
            if (this.intervalDied = !0,
            e.length <= 0)
                return void (this.templateData.can_refresh && (this.$(".button-input_update").show().trigger("button:load:stop").trigger("button:save:enable"),
                this.$(".list__top__status").html("")));
            var i, s;
            if (i = t ? n.findWhere(e, {
                id: +t
            }) : e.pop(),
            !i)
                return this.$(".button-input_update").show().trigger("button:load:stop").trigger("button:save:enable"),
                void this.$(".list__top__status").html("");
            if (i.current)
                this.intervalDied = !1,
                s = "sync" === i.current ? AMOCRM.lang.mail_sync : i.progress ? AMOCRM.lang.mail_importing + " " + i.progress + "%" : AMOCRM.lang.mail_import,
                this.$(".button-input_update").show().trigger("button:save:disable").trigger("button:save:start"),
                this.$(".list__top__status").html(s),
                this.need_reload = !0;
            else if (i.last_sync) {
                s = AMOCRM.lang.mail_last_sync + ' <span class="box-status-last-sync">' + moment.unix(i.last_sync).calendar() + "</span>";
                var o = "last_sync_" + i.id;
                f.get(o) && f.get(o) == i.last_sync || (this.softOnLoad(s),
                f.set({
                    name: o,
                    value: i.last_sync,
                    expiredays: 365
                })),
                this.templateData.can_refresh && (this.$(".button-input_update").show().trigger("button:load:stop").trigger("button:save:enable"),
                this.$(".list__top__status").html(s))
            }
        },
        softOnLoad: function(e) {
            var t = this
              , i = n.extend(t.options.routeParams);
            t.needSetColumns = !0,
            t.threadOpened ? t.need_reload = !0 : t.getList(i).done(function(i) {
                i.entity = "mail",
                t.page = i.pagination.page,
                t.max_page = i.pagination.max_page,
                t._renderPage({
                    response: i,
                    template: this.template
                }),
                t.$el.find(".button-input_update").show().trigger("button:load:stop").trigger("button:save:enable"),
                t.$el.find(".list__top__status").html(e),
                t.onLoadGenerals.call(t)
            }).fail(function() {
                t.$el.find(".button-input_update").trigger("button:save:enable"),
                t.$el.find(".list__top__status").html('<span class="error_status">' + AMOCRM.lang.mail_list_update_error + "</span>")
            }),
            this._$document.trigger("mail:update:counter"),
            t.intervalDied = !0
        },
        prepareLangs: function(e) {
            var t = e.lang.subtitle_code;
            return e.lang = n.extend({}, AMOCRM.lang, e.lang),
            n.each(e.fields, function(t) {
                t.title = e.lang["mail_list_field_" + t.code]
            }),
            n.each(e.menu, function(t) {
                var i = t.code;
                t.label = e.lang["mail_list_" + i + "_title"]
            }),
            e.lang.title = e.lang.mail_list_page_title,
            t && (e.lang.subtitle = e.lang["mail_list_" + t + "_title"]),
            e.lang.summary_entities = e.lang.mail_list_summary_entity,
            e.lang
        },
        prepareColumns: function(e) {
            var t = s.Deferred();
            return this.needSetColumns && (this.columnsChanged ? this.getColumnsSettings().done(n.bind(function() {
                this.mergeColumnSettings(e),
                t.resolve()
            }, this)) : (this.mergeColumnSettings(e),
            t.resolve())),
            t.promise()
        },
        mergeColumnSettings: function(e) {
            void 0 !== this.columnsSettings.width && (e.width = this.columnsSettings.width),
            this.columnsSettings.columns && n.each(e.fields, function(e) {
                var t, i = n.find(this.columnsSettings.columns, {
                    code: e.code
                });
                i && (t = i.width,
                void 0 !== t && (e.width = t))
            }, this),
            this.needSetColumns = !1
        },
        resendThreadHandler: function(e) {
            var t = this
              , i = s(e.currentTarget).parents(".list-row").data("id");
            return e.preventDefault(),
            i && h.resendThread(+i).done(function() {
                t._$document.triggerHandler("list:reload")
            }).fail(w.threadCommonFailModal),
            !1
        },
        viewMailSettings: function(e, t, i) {
            if (this.modal)
                return !1;
            t = t || null,
            i = i || null;
            var n = this
              , o = s("#js-list-mail_more")
              , r = s("#list_page_holder .list__body")
              , a = AMOCRM.constant("user_rights")
              , l = a.is_admin ? " modal_mail-templates__wrapper" : ""
              , c = s(document).width() - o.offset().left - o.width() / 2
              , d = s(document).width() - r.width() - r.offset().left;
            this.modal = new _({
                class_name: "modal-list modal_mail-more modal_custom-more",
                init: function(e) {
                    this.disable_cancel_click = !0,
                    n.$modal_body = e,
                    n.$modal_body.addClass("modal_mail-more__wrapper" + l).append('<div class="modal_mail-more__inner"></div>'),
                    n.$modal_overlay = n.$modal_body.siblings(".modal-overlay"),
                    n.mail_more = new y({
                        el: n.$modal_body.find(".modal_mail-more__inner"),
                        entity: AMOCRM.data.current_entity,
                        $overlay: n.$modal_overlay,
                        user_rights: a,
                        offset_btn: c,
                        offset_el: d,
                        oauth: i,
                        expand: t
                    }),
                    n._$window.off("resize.modal:core"),
                    n._$document.off("keydown.modal:core")
                },
                destroy: function() {
                    var e = n.mail_more.mailbox_form;
                    return e.isModified() ? (AMOCRM.router.confirmPageChange(e._confirmModalConfig, function() {
                        n.modal.destroy()
                    }),
                    !1) : (AMOCRM.router.preventPageChange(!1),
                    n.mail_more.need_reload && n._$document.trigger("mail:update:counter").trigger("list:reload"),
                    n.mail_more.destroy(),
                    n.mail_more = null,
                    void (n.modal = null))
                }
            })
        },
        showMultiactions: function(e) {
            var t = +s(e.currentTarget).data("value");
            this.model = this.collection.get(t) || {},
            this.model.collection = this.collection,
            c.View.prototype.showMultiactions.call(this, e, !0, "mail-list__multiple-actions")
        },
        _getListTipDefaultParams: b.prototype._getListTipDefaultParams,
        showWidgetErrorNotification: b.prototype.showWidgetErrorNotification,
        spaceKeyPressed: function(e) {
            c.View.prototype.spaceKeyPressed.call(this, e, !0, "mail-list__multiple-actions")
        },
        onSidebarNavigate: function(e) {
            var t = s("#mail_overlay");
            t.length && t.trigger("overlay:hide")
        },
        toggleAll: function(e) {
            this.list_header.toggleAll(e, !0, "mail-list__multiple-actions")
        },
        loadPage: n.noop,
        navigatePage: function(e, t, i) {
            b.prototype.navigatePage.apply(this, [e, !0, i])
        },
        checkCheckboxes: b.prototype.checkCheckboxes,
        keyEventsOn: b.prototype.keyEventsOn,
        keyEventsOff: b.prototype.keyEventsOff
    })
}),
define("lib/pages/mail/thread", ["require", "jquery", "underscore", "twig", "lib/pages/card", "lib/interface/mail/thread"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/pages/card"), r = e("lib/interface/mail/thread");
    return t = o.extend({
        afterDestroy: null,
        initialize: function(e) {
            this.needReloadList = e.needReloadList,
            this.afterDestroy = i.Deferred(),
            this._$document.one("card:animated", s.bind(function() {
                "mail" === AMOCRM.getBaseEntity() && this.render(!0)
            }, this)),
            o.prototype.initialize.apply(this, arguments),
            this._$document.one("card:load:success", function() {
                i("#card_holder, #card_fake").removeClass("content__card-holder-mail_thread")
            }).one("thread:ready", function() {
                i("#card_holder, #card_fake").addClass("content__card-holder-mail_thread")
            })
        },
        destroy: function() {
            this.subview && this.subview.destroy(),
            o.prototype.destroy.apply(this, arguments),
            this.afterDestroy.resolve()
        },
        needReload: function() {
            return this.thread_block.hasChanges()
        },
        init: function() {
            this.$el.attr("data-card-active", "y"),
            this._$document.triggerHandler("widgets:load")
        },
        initThreadBlock: function() {
            var e = this;
            this._$document.trigger("page:change:loader.card"),
            this.thread_block = this._addComponent(r, {
                id: e.options.id,
                animationEnd: e.animationEnd,
                needReloadList: e.needReloadList,
                onload: function() {
                    e.subview = this,
                    this.$el.length && (e.thread_el = this.$el),
                    e.render(!0)
                },
                parent: e
            })
        },
        load: function() {
            this.animated || this.initThreadBlock()
        },
        reload: function() {
            this.subview && this.subview.reload(!0)
        },
        makeFakeCard: function() {
            var e = i("#card_fake");
            return e.length || (e = i('<div class="content__card-holder content__card-holder-fake-mail" id="card_fake"></div>'),
            n._preload(["/tmpl/mail/thread/header.twig"], function() {
                e.prepend(n({
                    ref: "/tmpl/mail/thread/header.twig"
                }).render({
                    class_name: "content__card__fake-top",
                    name: "..."
                }))
            })(),
            i("body").append(e)),
            e
        },
        render: function(e) {
            (e || this.animated || this.is_from_server || AMOCRM.first_load) && (this.destroyCard(),
            this.$el.show().html(this.thread_el),
            i(this.thread_el).addClass("mail-thread-element"),
            this.$el.attr("data-card-active") || this.$page_holder.hide(),
            this._$document.trigger("page:change:stop"),
            this.init())
        },
        serverLoadCheck: function() {
            AMOCRM.first_load && "mail" === AMOCRM.getBaseEntity() && (this.has_transitions = !1),
            this.load(),
            this.is_from_server || this.animateInit()
        }
    }),
    function(e) {
        return new t({
            needReloadList: AMOCRM.data.current_card && AMOCRM.data.current_card.list_reload,
            id: e.route_args[0]
        })
    }
}),
define("lib/components/base/todo_form", ["require", "jquery", "twig", "backbone", "lib/components/base/todo", "lib/common/fn", "lib/components/base/confirm"], function(e) {
    var t, i = e("jquery"), s = e("twig"), n = e("backbone"), o = e("lib/components/base/todo"), r = e("lib/common/fn"), a = e("lib/components/base/confirm");
    return t = n.View.extend({
        className: "todo_item_manage",
        id: "todo_form",
        events: {
            "focus .task-complete__textarea-input": "unvalidateResult",
            "click .button-cancel": "clear",
            "click #todo_form_complete": "complete",
            "click .js-todo-result": "setResult",
            "click .js-todo-result-skip": "skipResult",
            "click #todo-form-delete": "removeConfirm"
        },
        initialize: function() {
            i(document.body).on("click.todo:overlay:clear", "#todo_overlay", _.bind(function() {
                this.back()
            }, this)),
            i("#page_holder").append(this.$el),
            this.todo = (new o).init()
        },
        add: function(e) {
            return this.edit(e),
            this
        },
        edit: function(e) {
            var t = this
              , n = {}
              , r = e && e.completed;
            success_callback = !1;
            return this.$el.hasClass("expanded") ? !1 : (e = e || {},
            !_.isEmpty(e) && e.id && s._preload("/tmpl/todo/complete.twig")().then(_.bind(function() {
                this.$el.append(s({
                    ref: "/tmpl/todo/complete.twig"
                }).render({
                    result_body: e.result && e.result.text
                })),
                r ? (this.$el.addClass("todo_item_manage-completed"),
                i("#todo_form_complete").addClass("button-input-disabled").find(".button-input-inner__text").text(AMOCRM.lang.todo_completed)) : this.$(".complete-btn").hide()
            }, this)),
            e.linked || (e.linked = {
                value: "",
                entity: "",
                id: ""
            }),
            this.need_reload = !1,
            this.data = e,
            _.isFunction(e.onSaveSuccess) && (success_callback = function() {
                e.onSaveSuccess.call(t, this)
            }
            ),
            n = {
                entity: AMOCRM.getBaseEntity(),
                need_linked_input: !0,
                todo: this.data,
                onSaveFail: function() {
                    this.$el.find(".js-modal-accept").trigger("button:load:stop")
                },
                onSaveSuccess: success_callback || _.bind(function() {
                    this.need_reload = !0,
                    this.back()
                }, this)
            },
            _.isFunction(e.onRemove) && (n.has_remove = !0,
            this.onRemove = e.onRemove),
            this.onCancel = e.onCancel || function() {}
            ,
            i("#page_holder").append(this.$overlay = i('<div class="default-overlay" id="todo_overlay"></div>')),
            this.$overlay.trigger("overlay:show"),
            r || this.$el.append('<span class="spinner-icon spinner-icon-abs-center" id="todo_form_loader"></span>').addClass("expanded"),
            this.todo && this.todo.destroy(),
            this.todo = new o(n).init(function() {
                t.$(".complete-btn").show(),
                i("#todo_form_loader").remove(),
                t.$el.append(this.$el),
                t.editFocus()
            }),
            this)
        },
        editFocus: function() {
            var e = this
              , t = this.$el.find("textarea");
            t.length && (t.trigger("controls:textarea:autosize"),
            this.$el.addClass("expanded").one(AMOCRM.transition_event, function() {
                e.$el.hasClass("expanded") && (e.$el.off(AMOCRM.transition_event),
                t.trigger("controls:textarea:autosize"),
                AMOCRM.is_touch_device || t.focus())
            }))
        },
        clear: function(e) {
            var t = function() {
                _.isFunction(this.onCancel) && this.onCancel.call(this)
            };
            e && e.stopPropagation && e.stopPropagation(),
            this.$overlay ? this.$overlay.trigger("overlay:hide") : i("#todo_overlay").trigger("overlay:hide"),
            Modernizr.csstransforms ? this.$el.removeClass("expanded").one(AMOCRM.transition_event, _.bind(function(e) {
                i(e.currentTarget).hasClass("expanded") || (this.$el.removeClass("todo_item_manage-completed"),
                this.$el.off(AMOCRM.transition_event).html(""),
                t.call(this))
            }, this)) : (this.$el.removeClass("todo_item_manage-completed expanded").html(""),
            t.call(this))
        },
        complete: function() {
            var e, t = this;
            return !this.data || this.$el.hasClass("todo_item_manage-completed") ? !1 : (e = this.$("#todo_form_complete"),
            e.trigger("button:save:start"),
            void i.ajax({
                url: "/private/notes/edit2.php",
                data: {
                    ID: this.data.id,
                    ACTION: "COMPLATE_TASK"
                },
                type: "POST",
                dataType: "json"
            }).always(function() {
                e.trigger("button:save:stop")
            }).done(function(i) {
                "ok" == i.status && (t.$el.addClass("todo_item_manage-completed"),
                t.need_reload = !0,
                e.find(".button-input-inner__text").text(AMOCRM.lang.todo_completed),
                e.trigger("button:saved", [!1, AMOCRM.lang.todo_completed]),
                t.$(".task-complete__textarea-input").focus())
            }).fail(function() {}))
        },
        validateResult: function() {
            return i.trim(this.$(".task-complete__textarea-input").val()) ? !0 : !1
        },
        unvalidateResult: function() {
            this.$(".task-complete__textarea-input").removeClass("validate-has-error")
        },
        setResult: function() {
            var e, t = this, s = "ADD_NOTE", n = this.data.id;
            return this.validateResult() ? (this.data.result && (s = "EDIT_NOTE",
            n = this.data.result.id),
            e = i.trim(this.$(".task-complete__textarea-input").val()),
            void i.ajax({
                url: "/private/notes/edit2.php",
                data: {
                    ID: n,
                    ACTION: s,
                    NOTE_TYPE: 13,
                    BODY: e,
                    ELEMENT_TYPE: 4
                },
                type: "POST",
                dataType: "json"
            }).done(function(e) {
                "ok" == e.status ? (t.need_reload = !0,
                t.back()) : r.log({
                    msg: "todo result failed (method: done)",
                    extra: {
                        id: t.data.id
                    }
                })
            }).fail(function() {
                r.log({
                    msg: "todo result failed (method: fail)",
                    extra: {
                        id: t.data.id
                    }
                })
            })) : void this.$(".task-complete__textarea-input").addClass("validate-has-error")
        },
        skipResult: function() {
            this.back()
        },
        back: function() {
            this.clear(),
            this.need_reload && ("todo" != AMOCRM.data.current_entity ? i(document).trigger("page:reload", [AMOCRM.data.current_entity.split("-").pop()]) : i(document).trigger("list:reload"))
        },
        destroy: function() {
            i(document.body).off(".todo:overlay:clear"),
            this.$overlay && this.$overlay.trigger("overlay:hide"),
            this.todo && this.todo.destroy(),
            this.remove()
        },
        removeConfirm: function() {
            var e = new a({
                class_name: "modal-list",
                text: AMOCRM.lang.multiple_delete_invite.replace("#MARKER#", this.data.text),
                accept: _.bind(function() {
                    e.requestStart().xhr = i.ajax({
                        url: "/ajax/todo/multiple/delete/",
                        type: "POST",
                        dataType: "json",
                        data: {
                            ACTION: "DELETE",
                            ID: [this.data.id]
                        }
                    }).done(_.bind(function(t) {
                        "success" == t.status ? (e.requestSuccess(),
                        _.isFunction(this.onRemove) && this.onRemove.call(this, this.data.id),
                        this.back()) : e.requestFail()
                    }, this))
                }, this)
            })
        }
    })
}),
define("lib/components/lists/actions/custom_todo_type", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/common/fn", "lib/components/base/form", "lib/components/base/modal", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/core/view")
      , o = e("lib/common/fn")
      , r = e("lib/components/base/form")
      , a = e("lib/components/base/modal")
      , l = e("lib/components/base/confirm");
    return n.extend({
        events: {
            "click .js-modal-accept:not(.button-input-disabled)": "save",
            "click .js-remove-todo-type-item": "onRemoveItemClick",
            "input .modal-body__inner__todo-types__item__input": "onTaskTypeInput",
            "focus .modal-body__inner__todo-types__item__input": "onTaskTypeFocus",
            "input .js-new-todo-custom-type .modal-body__inner__todo-types__item__input": "onNewTaskTypeInput"
        },
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this._loadTaskTypes().then(i.bind(this._initModal, this))
        },
        destroy: function() {
            AMOCRM.router.preventPageChange(!1),
            this.makeSortable(!1),
            n.prototype.destroy.apply(this, arguments)
        },
        _loadTaskTypes: function() {
            var e = t.Deferred();
            return this.task_types = AMOCRM.constant("task_types"),
            this.task_types ? e.resolve() : t.ajax({
                url: "/ajax/get_task_types/"
            }).done(i.bind(function(t) {
                this.task_types = t,
                AMOCRM.constant("task_types", t),
                e.resolve()
            }, this)),
            e.promise()
        },
        _initModal: function() {
            this.modal = new a({
                class_name: "modal-list modal-statuses-settings modal-custom-types",
                centrify_animation: !0,
                init: i.bind(function(e) {
                    this.setElement(e),
                    this.init()
                }, this),
                destroy: i.bind(function() {
                    this.destroy()
                }, this)
            })
        },
        init: s._preload(["/tmpl/common/modal/todo_types.twig"], "_init"),
        _init: function() {
            this.$el.trigger("modal:loaded").html(s({
                ref: "/tmpl/common/modal/todo_types.twig"
            }).render({
                task_types: this.task_types
            })).trigger("modal:centrify"),
            AMOCRM.router.registerPreventConfig({
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: i.bind(function(e) {
                    this.save(e)
                }, this),
                destroy: i.bind(function() {
                    this.modal.show()
                }, this)
            }),
            this.form = this._addComponent(r.View, {
                el: this.$el
            }),
            this.form.model.on("has_changes", i.bind(this._setChanges, this, {
                form: !0
            })).on("has_reverted", i.bind(this._setChanges, this, {
                form: !1
            })),
            this.makeSortable()
        },
        onRemoveItemClick: function(e) {
            var i = this
              , s = t(e.currentTarget)
              , n = s.closest(".modal-body__inner__todo-types__item")
              , r = o.escapeHTML(n.find(".modal-body__inner__todo-types__item__input").val())
              , a = n.attr("data-id");
            a ? (this.modal.hide(),
            new l({
                class_name: "modal-list",
                text: AMOCRM.lang.task_custom_remove_confirm.toString().replace("#NAME_MARKER#", r),
                accept: function() {
                    this.modal.destroy(),
                    i.removeItem(n)
                },
                destroy: function() {
                    i.modal.show()
                }
            })) : this.removeItem(n)
        },
        onTaskTypeInput: function(e) {
            var i = t(e.currentTarget)
              , s = i.val();
            s && !t.trim(s) && i.val("")
        },
        onTaskTypeFocus: function(e) {
            var i = t(e.currentTarget);
            i.removeClass("validate-has-error").attr("placeholder", i.attr("data-placeholder"))
        },
        onNewTaskTypeInput: function(e) {
            var i, s = t(e.currentTarget), n = s.closest(".js-new-todo-custom-type"), o = n.next(".js-new-todo-custom-type"), r = Math.floor(40001 * Math.random() + 1e4);
            n.toggleClass("new", !s.val()),
            s.val() ? o.length || (i = n.clone().addClass("new js-animate-item-remove"),
            i.find(".modal-body__inner__todo-types__item__input").attr("name", "task_types[" + r + "][name]").val(""),
            i.find(".modal-body__inner__todo-types__id").attr("name", "task_types[" + r + "][id]").val(r),
            n.after(i),
            i.trigger("animate:callback").removeClass("js-animate-item-remove"),
            this.$el.trigger("modal:centrify")) : o.length && !o.find(".modal-body__inner__todo-types__item__input").val() && this.removeItem(n.next(".js-new-todo-custom-type")),
            this._checkSortable()
        },
        _checkSortable: function() {
            var e = 0
              , i = !1;
            this.$(".js-custom-type-item").each(function(i) {
                var s = t(this).parent().find(".modal-body__inner__todo-types__id").val();
                s && (e += parseInt(s * (i + 1)))
            }),
            e !== this._sortable_hash && (this._sortable_hash ? i = !0 : this._sortable_hash = e),
            this._setChanges({
                sortable: i
            })
        },
        _setChanges: function(e) {
            var t, s = !1;
            this._changes = i.extend(this._changes || {}, e),
            t = i.unique(i.values(this._changes)),
            (t.length > 1 || t[0]) && (s = !0),
            AMOCRM.router.preventPageChange(s),
            this.$(".js-modal-accept").trigger("button:save:" + (s ? "enable" : "disable"))
        },
        removeItem: function(e) {
            var i = this;
            e.trigger("animate:callback", [function() {
                t(this).remove(),
                i._checkSortable()
            }
            ]).addClass("js-animate-item-remove"),
            this.$el.trigger("modal:centrify")
        },
        makeSortable: function(e) {
            e !== !1 ? (this.$el.sortable({
                items: ".modal-body__inner__todo-types__item.js-animate:not(.new)",
                handle: ".modal-body__inner__todo-types__item__handle",
                axis: "y",
                containment: this.$el.find(".modal-body__inner__todo-types"),
                sortAnimate: !AMOCRM.is_touch_device,
                stop: i.bind(function() {
                    this._checkSortable()
                }, this)
            }),
            this.initSortableHash().always(this._checkSortable())) : this.$el.sortable("destroy")
        },
        initSortableHash: function() {
            this._sortable_hash = 0;
            var e = t.Deferred()
              , i = this;
            return this.$(".js-custom-type-item").each(function(e) {
                var s = t(this).parent().find(".modal-body__inner__todo-types__id").val();
                s && (i._sortable_hash += parseInt(s * (e + 1)))
            }),
            e.promise()
        },
        validate: function() {
            var e = !0;
            return this.$el.find(".modal-body__inner__todo-types__item__input").each(function() {
                t(this).val() || t(this).closest(".modal-body__inner__todo-types__item").hasClass("new") || (e = !1,
                t(this).addClass("validate-has-error").attr("placeholder", AMOCRM.lang.tasks_custom_placeholder_validate))
            }),
            e
        },
        save: function(e) {
            var s = [];
            this.validate() && !this._pending && (this.$(".js-custom-type-item").each(function(e) {
                var i = t(this).parent().find(".modal-body__inner__todo-types__id");
                s.push("task_types[" + e + "][name]=" + t(this).val()),
                i.length && s.push("task_types[" + e + "][id]=" + i.val())
            }),
            this.modal.hide(),
            this._pending = !0,
            t.ajax({
                url: "/private/tasks/ajax_task_status_edit.php",
                data: "ACTION=ALL_EDIT&" + s.join("&"),
                type: "POST",
                dataType: "json"
            }).always(i.bind(function() {
                this.modal.show(),
                this._pending = !1
            }, this)).done(i.bind(function(t) {
                "OK" === t.status ? (this.task_types = i.reduce(t.data, function(e, t) {
                    return e["key_" + t.id] = {
                        id: t.id,
                        option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + t.name
                    },
                    e
                }, {}),
                AMOCRM.constant("task_types", this.task_types),
                this.modal.$modal.removeClass("modal-statuses-settings modal-custom-types"),
                this.modal.showSuccess(t.message, function() {
                    i.isFunction(e) && e()
                })) : this.modal.showError(t.message, !0)
            }, this)).fail(i.bind(function(e) {
                this.modal.showError(e.message, !0)
            }, this)))
        }
    })
}),
define("lib/interface/todos/common", ["require", "jquery", "lib/common/urlparams", "lib/common/cookie", "lib/components/lists/actions/custom_todo_type", "lib/interface/controls/responsive_toggler_b", "lib/interface/left_menu/index"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/common/urlparams"), n = e("lib/common/cookie"), o = e("lib/components/lists/actions/custom_todo_type"), r = e("lib/interface/controls/responsive_toggler_b"), a = e("lib/interface/left_menu/index");
    return i(document).ajaxComplete(function(e, t, i) {
        t.getResponseHeader("X-Core-Server") && a.updateItemCounter("todo", t.getResponseHeader("X-Core-Tasks"))
    }),
    t = function(e) {
        this.view = e,
        this.responsiveTogglerInit(),
        e.$el.on("click" + this.ns, ".js-list-caption-link", function(t) {
            var o = i(this)
              , r = s.getQueryString()
              , a = o.attr("data-calendar-view")
              , l = (a || "").replace("agenda", "").toLowerCase();
            return e.$el.find(".list__top__preset .list-top-nav__text-button_active").not(this).removeClass("list-top-nav__text-button_active"),
            o.addClass("list-top-nav__text-button_active"),
            e.$calendar && e.$calendar.length && a ? (e.search.filter.setUrl("/todo/calendar/" + l + "/"),
            e.search.filter.$(".filter__list__item a").each(function() {
                i(this).attr("href", i(this).attr("href").replace(/\/todo\/calendar\/(\w+)\//, "/todo/calendar/" + l + "/"))
            }),
            n.set({
                name: "LAST_PLACE_TODO",
                value: "calendar/" + l
            }),
            AMOCRM.router.navigate(o.attr("href") + (r ? "?" + r : ""), {
                trigger: !1,
                replace: !1
            }),
            e.$calendar.fullCalendar("changeView", a)) : AMOCRM.router.navigate(o.attr("href") + (r ? "?" + r : ""), {
                trigger: !0
            }),
            !1
        }).on("click" + this.ns, ".js-modal-custom-types", function() {
            new o
        })
    }
    ,
    t.prototype.ns = ".todos:page:common",
    t.prototype.destroy = function() {
        this.view && this.view.$el.off(this.ns)
    }
    ,
    t.prototype.responsiveTogglerInit = function() {
        var e = this.view.$el.find(".list__top__preset__toggler .control-toggler__item").index(".control-toggler__item-selected")
          , t = /\/calendar\/$/gim.test(window.location.pathname);
        this.respToggler = new r({
            el: this.view.$el.find(".responsive-toggler-container"),
            active: e >= 0 ? e : null,
            no_init_click: !t,
            useMinWidth: !0
        }),
        this.respToggler.resizeToggler()
    }
    ,
    t
}),
define("lib/components/lists/todos", ["require", "jquery", "underscore", "twig", "backbone", "lib/components/lists/base/list", "lib/components/lists/base/view", "lib/components/base/todo_form", "lib/interface/todos/common"], function(e) {
    var t, i, s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("backbone"), a = e("lib/components/lists/base/list"), l = e("lib/components/lists/base/view"), c = e("lib/components/base/todo_form"), d = e("lib/interface/todos/common");
    return t = r.View.extend({
        className: "list-row js-list-row table_separator",
        initialize: function(e) {
            this.type = e.type
        },
        render: function(e) {
            var t = this
              , i = s(o({
                ref: "/tmpl/todo/separator_builder.twig"
            }).render({
                fields: e.fields,
                params: {
                    title: AMOCRM.lang["separator_" + t.type],
                    class_name: t.type
                }
            })).addClass(t.type);
            return t.el.innerHTML = i.html(),
            this
        }
    }),
    i = a.extend({
        initialize: function(e) {
            var t = this;
            o._preload("/tmpl/todo/separator_builder.twig")(),
            a.prototype.initialize.call(this, e),
            this.form = new c,
            this.$el.on("click" + this.ns, ".js-list-row:not(.table_separator,.list-row-head)", function(e) {
                t.hasSelection() || t.scrollerObject.isDragged() || t.editTodo(e)
            }),
            this._$document.on("click" + this.ns, "#todo_add_btn:not(.js-disabled)", function() {
                t.form.add()
            }),
            this.todos_common = new d({
                $el: s("#page_holder")
            })
        },
        hasSelection: function() {
            var e = !1
              , t = window.getSelection && window.getSelection() || document.selection;
            return e = !!t.toString().length
        },
        editTodo: function(e) {
            var t, i, n, o, r = s(e.currentTarget), a = this, l = !1, c = {};
            return a.$add_btn || (a.$add_btn = s("#todo_add_btn")),
            a.$add_btn.hasClass("button-input-disabled") ? !1 : s(e.target).closest(".list-row__cell-id").length || s("#todo_overlay").length || "A" == e.target.tagName || this.is_trash ? void 0 : (t = AMOCRM.data.current_list.get(r.attr("data-id")),
            o = t.get("name"),
            i = t.get("creator"),
            n = t.get("object"),
            c = {
                id: t.get("id"),
                main_user: i && i.author.id,
                date: i.date_raw,
                type: t.get("task_type"),
                text: o.text || "",
                completed: t.get("completed")
            },
            l = n.lead ? n.lead : n.customer ? n.customer : n.mainContact,
            l && (l.value = l.name,
            l.element_type = AMOCRM.element_types[l.entity],
            c.linked = l),
            o.result_id && (c.result = {
                id: o.result_id,
                text: o.result
            }),
            this.form.edit(c),
            !1)
        },
        bindExistingItems: function(e, t) {
            var i, s = [];
            return n.each(e, function(e) {
                n.each(e, function(t, o) {
                    i = new l.Model(e[o]),
                    new l.View(n.extend({
                        el: document.getElementById("list_item_" + t.id),
                        model: i
                    }, this.getRowItemViewOptions() || {})),
                    s.push(i)
                }, this)
            }, this),
            this.itemsPush(s),
            this.setData(t),
            this
        },
        fetchedItems: function(e) {
            var i, o = [];
            return this.reset(),
            n.each(e.items, function(e, s) {
                o.push(new t({
                    type: s
                })),
                n.each(e, function(e) {
                    i = new l.View(n.extend({
                        model: this.itemsPush(e),
                        className: l.View.prototype.className + " " + e.class_name
                    }, this.getRowItemViewOptions() || {})),
                    o.push(i)
                }, this)
            }, this),
            s("#list_table").children(".table_separator").remove(),
            {
                views: o,
                params: {
                    statuses: e.filter.statuses.items,
                    fields: e.fields
                }
            }
        },
        destroy: function() {
            this.todos_common && this.todos_common.destroy(),
            this.form.destroy(),
            a.prototype.destroy.call(this)
        },
        need_checkboxes: function() {
            return !0
        }
    })
}),
define("lib/pages/todos/list", ["require", "lib/pages/list", "lib/components/lists/todos", "cocktail", "lib/components/lists/actions/export", "lib/components/lists/mixins/navigation"], function(e) {
    "use strict";
    var t, i = e("lib/pages/list"), s = e("lib/components/lists/todos"), n = e("cocktail"), o = e("lib/components/lists/actions/export"), r = e("lib/components/lists/mixins/navigation");
    return t = i.extend({
        preload: (i.prototype.preload || []).concat(["/tmpl/leads/common/summary.twig"]),
        _ListHandler: s
    }),
    n.mixin(t, o, r),
    t
}),
define("lib/pages/todos/line", ["require", "jquery", "underscore", "twig", "lib/common/urlparams", "lib/common/fn", "lib/core/page", "cocktail", "lib/interface/search/search", "lib/components/base/confirm", "lib/components/base/pipeline", "lib/components/base/todo_form", "lib/components/lists/actions/todo_result", "lib/interface/todos/common", "lib/components/lists/actions/export", "lib/components/lists/mixins/navigation"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/urlparams"), r = e("lib/common/fn"), a = e("lib/core/page"), l = e("cocktail"), c = e("lib/interface/search/search"), d = e("lib/components/base/confirm"), u = e("lib/components/base/pipeline"), h = e("lib/components/base/todo_form"), _ = e("lib/components/lists/actions/todo_result"), p = e("lib/interface/todos/common"), m = e("lib/components/lists/actions/export"), f = e("lib/components/lists/mixins/navigation"), g = r.delay(), b = {};
    return t = a.extend({
        endpoint: "/ajax/todo/line/",
        template: "/tmpl/todo/line/page.twig",
        preload: ["/tmpl/todo/line/item_tmpl.twig"],
        _selectors: function() {
            return {
                pipeline: "#pipeline_holder",
                manage: "#pipeline_manage",
                sidebar: "#sidebar"
            }
        },
        events: s.extend({}, a.prototype.events || {}, {
            "click #todo_add_btn:not(.js-disabled)": "addClick",
            "click .pipeline_leads__load_more": "loadMoreClick",
            "click .task": "todoClick"
        }),
        components: function() {
            return [[p, {
                $el: this.$el
            }], [c, {
                filter: {
                    el: this._elem("sidebar"),
                    is_list: !0,
                    disabled_users: !1,
                    can_save_preset: !1
                }
            }]]
        },
        construct: function(e) {
            this.params = e || {},
            this.leads_numeral = [AMOCRM.lang.leads_1, AMOCRM.lang.leads_2, AMOCRM.lang.leads_5].join(","),
            this.form = this._addComponent(h),
            this.init()
        },
        destruct: function() {
            b = {},
            this._$window.off(this.ns)
        },
        init: function() {
            var e = this;
            this.params.response ? this.existed_items = this.params.response.items : this.existed_items = AMOCRM.constant("existed_items"),
            this.existed_items = s.extend({}, this.existed_items.expire, this.existed_items.today, this.existed_items.tomorrow),
            this.pipeline = this._addComponent(u, {
                el: this.$el,
                containment: !1,
                manage: {
                    el: this._elem("manage"),
                    drop: function(t, s) {
                        var n = t.draggable.closest(".js-pipeline-row").data("id")
                          , o = i(this).data("status-id")
                          , r = t.draggable.attr("id").split("_")[1]
                          , a = t.draggable;
                        e.todoManage({
                            period_old: n,
                            period_new: o,
                            noteID: r,
                            uiItem: a,
                            remove: !0
                        })
                    }
                },
                appendTo: this.$el,
                change: function(t, i) {
                    var s = i.item_old.data("id")
                      , n = i.item_new.data("id")
                      , o = t.item.attr("id").split("_")[1]
                      , r = t.item;
                    "completed" == n && i.item_new.prepend(r),
                    e.todoManage({
                        period_old: s,
                        period_new: n,
                        noteID: o,
                        uiItem: r,
                        remove: !1
                    })
                },
                immutable: function(e, t) {
                    e.item.removeAttr("style")
                }
            }),
            this._$window.on("resize" + this.ns, function() {
                g(function() {
                    e.minHeight()
                })
            }).triggerHandler("resize" + this.ns)
        },
        addClick: function() {
            this.form.add()
        },
        loadMoreClick: function(e) {
            var t, r = i(e.currentTarget), a = r.closest(".js-pipeline-row").attr("data-id"), l = AMOCRM.constant("user_rights"), c = l.leads && l.leads.change_status, d = i(".pipeline_cell-" + a).children(), u = 0;
            if (r.hasClass("pipeline_leads__load_more-loading"))
                return !1;
            switch (e.preventDefault(),
            r.addClass("pipeline_leads__load_more-loading"),
            b[a] ? (u = 10 * b[a] + 1,
            b[a]++) : (b[a] = 2,
            u = 11),
            t = {
                json: !0,
                PAGEN_1: b[a],
                ELEMENT_COUNT: 10,
                period_id: a,
                LOST_ELEMENTS: u - d[0].children.length
            },
            "expired" != a && (t.STATUS = 0),
            a) {
            case "expire":
                t.filter = {
                    status: ["failed"]
                };
                break;
            case "today":
                t.filter_date_from = moment().format(AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time),
                t.filter_date_to = moment().format(AMOCRM.system.format.date.date) + " 23:59:59",
                "created" == o.getQueryParam("filter_date_switch") && (t.filter_date_from_create = o.getQueryParam("filter_date_from"),
                t.filter_date_to_create = o.getQueryParam("filter_date_to"));
                break;
            case "tomorrow":
                t.filter_date_from = moment().add("days", 1).format(AMOCRM.system.format.date.date) + " 00:00:00",
                t.filter_date_to = moment().add("days", 1).format(AMOCRM.system.format.date.date) + " 23:59:59",
                "created" == o.getQueryParam("filter_date_switch") && (t.filter_date_from_create = o.getQueryParam("filter_date_from"),
                t.filter_date_to_create = o.getQueryParam("filter_date_to"))
            }
            i.ajax({
                url: "/ajax/todo/multiple/loadmore/?" + o.getQueryString(),
                data: t,
                type: "POST",
                dataType: "json"
            }).done(s.bind(function(e) {
                e = e.response,
                this.existed_items = s.extend(this.existed_items, e.items),
                r.before(s.map(e.items, function(e) {
                    return n({
                        ref: "/tmpl/todo/line/item_tmpl.twig"
                    }).render({
                        lang: AMOCRM.lang,
                        item: e,
                        can_edit: c
                    })
                }).join("")),
                (e.pagination.totalitems != d[0].children.length - 1 || (r.hide(),
                1 != e.pagination.total)) && (r.removeClass("pipeline_leads__load_more-loading"),
                this.pipeline.refresh())
            }, this))
        },
        todoClick: function(e) {
            var t = i(e.currentTarget).find(".note--header--right .js-navigate-link");
            return t.length ? (AMOCRM.router.navigate(t.attr("href"), {
                trigger: !0
            }),
            !1) : void 0
        },
        minHeight: function() {
            this._elem("pipeline").css("min-height", this._$window.height() - 110)
        },
        removeConfirm: function(e) {
            var t = this;
            new d({
                class_name: "modal-list",
                text: AMOCRM.lang.multiple_delete_invite,
                accept: function() {
                    var s = this;
                    this.requestStart().xhr = i.ajax({
                        url: "/ajax/todo/multiple/delete/",
                        type: "POST",
                        dataType: "json",
                        data: {
                            ACTION: "DELETE",
                            ID: [e.noteID]
                        },
                        success: function(i) {
                            "success" == i.status ? (s.requestSuccess(),
                            e.uiItem.remove()) : (s.requestFail(),
                            t.pipelineSort.sortable("cancel"))
                        }
                    })
                },
                destroy: function() {
                    e.uiItem.length && e.uiItem.removeClass("h-hidden").removeAttr("style")
                }
            })
        },
        statusChange: function(e) {
            var t, s, o = this, r = "_" + e.noteID, a = moment();
            switch (s = this.existed_items[r].date,
            s = " " + moment(s, AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time).format(AMOCRM.system.format.date.time),
            e.period_new) {
            case "completed":
                return this.statusDone(e),
                !1;
            case "expire":
                break;
            case "today":
                t = a.format(AMOCRM.system.format.date.date) + s;
                var l = AMOCRM.system.format.date.date + AMOCRM.system.format.date.time
                  , c = moment(t, l);
                a > c && (t = c.format(AMOCRM.system.format.date.date) + moment("23:59", "HH:mm").format(AMOCRM.system.format.date.time));
                break;
            case "tomorrow":
                t = a.add("days", 1).format(AMOCRM.system.format.date.date) + s;
                break;
            case "after_tomorrow":
                t = a.add("days", 2).format(AMOCRM.system.format.date.date) + s;
                break;
            case "next_week":
                t = a.add("week", 1).day(1).format(AMOCRM.system.format.date.date) + s;
                break;
            case "next_month":
                t = a.add("month", 1).startOf("month").format(AMOCRM.system.format.date.date) + s
            }
            return this.existed_items[r].date = t,
            this.existed_items[r].params.expired = !1,
            i.ajax({
                url: "/ajax/todo/multiple/edit/",
                type: "POST",
                dataType: "json",
                data: {
                    task: {
                        body: this.existed_items[r].params.text,
                        date: t,
                        main_user_id: this.existed_items[r].params.main_user.id,
                        elementtype: this.existed_items[r].linked.element_type,
                        type: this.existed_items[r].params.type
                    },
                    parties: {
                        id: this.existed_items[r].linked.id,
                        entity: this.existed_items[r].linked.entity
                    },
                    task_id: e.noteID
                },
                success: function(t) {
                    "string" == typeof e.period_new && e.remove && e.uiItem.remove(),
                    ("today" == e.period_new || "tomorrow" == e.period_new) && (e.uiItem.replaceWith(n({
                        ref: "/tmpl/todo/line/item_tmpl.twig"
                    }).render({
                        item: o.existed_items[r]
                    })),
                    o.pipeline.refresh())
                }
            }),
            !0
        },
        statusDone: function(e) {
            i.ajax({
                url: "/ajax/todo/multiple/close/",
                type: "POST",
                dataType: "json",
                data: {
                    ID: [e.noteID]
                }
            }).done(s.bind(function(t) {
                e.uiItem.hasClass("task-expired") && this.expiredDone(e),
                e.uiItem.hasClass("task-complate") || e.uiItem.find(".note--header--right").prepend("Completed "),
                e.uiItem.addClass("task-complate").find("#note_body_").addClass("note--body--content-complate"),
                new _({
                    id: e.noteID,
                    cancel: s.bind(function() {
                        this._$document.trigger("page:reload")
                    }, this)
                })
            }, this))
        },
        expiredDone: function(e) {
            var t = e.uiItem.clone().removeClass("task-expired")
              , i = this.$('.pipeline_items__list[data-id="today"]');
            e.uiItem.remove(),
            i.append(t)
        },
        todoManage: function(e) {
            switch (e.period_new) {
            case "delete":
                this.removeConfirm(e);
                break;
            case "done":
                this.statusDone(e),
                e.uiItem.removeAttr("style");
                break;
            default:
                e.period_old != e.period_new && "expire" != e.period_new && (e.uiItem.removeClass("task-expired"),
                this.statusChange(e)),
                e.uiItem.removeAttr("style")
            }
        }
    }),
    l.mixin(t, m, f),
    t
}),
define("lib/pages/todos/calendar", ["require", "jquery", "underscore", "lib/core/page", "lib/common/fn", "cocktail", "lib/common/urlparams", "lib/interface/todos/common", "lib/components/base/todo", "lib/components/base/todo_form", "lib/interface/search/search", "lib/components/lists/actions/export", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/core/page"), o = e("lib/common/fn"), r = e("cocktail"), a = e("lib/common/urlparams"), l = e("lib/interface/todos/common"), c = e("lib/components/base/todo"), d = e("lib/components/base/todo_form"), u = e("lib/interface/search/search"), h = e("lib/components/lists/actions/export"), _ = e("lib/core/users"), p = "todo_add_fake", m = {
        computeRowLevelLimit: function(e) {
            var t, i, s = this.rowEls.eq(e), n = s.height(), o = this.rowStructs[e].tbodyEl.children();
            for (t = 0; t < o.length; t++)
                if (i = o.eq(t).removeClass("fc-limited"),
                i.position().top + i.outerHeight() > n)
                    return t = t > 1 ? t : 2;
            return !1
        },
        renderMoreLink: function(e, t) {
            var s = this
              , n = this.view
              , o = this.getCellSegs(e).length
              , r = parseInt(AMOCRM.constant("count_by_days")[e.start.format("DD-MM-YYYY")] || o)
              , a = r - o + t.length;
            return i('<a class="fc-more"/>').attr("data-todo-count", r).text(this.getMoreLinkText(a)).on("click", function(o) {
                var r = n.opt("eventLimitClick")
                  , a = e.start
                  , l = i(this)
                  , c = s.getCellDayEl(e)
                  , d = s.getCellSegs(e)
                  , u = s.resliceDaySegs(d, a)
                  , h = s.resliceDaySegs(t, a);
                r = n.trigger("eventLimitClick", null, {
                    date: a,
                    dayEl: c,
                    moreEl: l,
                    segs: u,
                    hiddenSegs: h
                }, o),
                n.calendar.zoomTo(a, r)
            })
        }
    }, f = 24 === AMOCRM.system.format.time ? "23:59" : "11:59 PM", g = AMOCRM.system.format.date.date + " " + AMOCRM.system.format.date.time;
    return t = n.extend({
        endpoint: "/ajax/todo/calendar/",
        template: "/tmpl/todo/calendar/page.twig",
        _getEndpoint: function(e) {
            var t = e[0]
              , i = a.getQueryString();
            return this.endpoint + t + "/" + (i ? "?" + i : "")
        },
        overlay_class_name: "list__overlay",
        filterOptions: function() {
            return {
                is_list: !0,
                disabled_users: !1,
                can_save_preset: !1
            }
        },
        components: function() {
            return [[l, this]]
        },
        events: {
            "click #todo_add_btn": "addTodo",
            "click #todo_calendar_today": "gotoToday",
            "data:loaded": "renderSummary"
        },
        construct: function(t) {
            this.$calendar = i("#todo-calendar"),
            this.params = t || {},
            t && t.response && (AMOCRM.constant("existed_calendar", t.response.items),
            AMOCRM.constant("count_by_days", t.response.count_by_days)),
            this.defaults = {
                eventStart: 8,
                eventEnd: 20,
                eventMinutes: 0,
                eventColor: {
                    0: "rgba(243, 117, 117, 0.9)",
                    1: "rgba(116, 158, 66, 0.9)",
                    2: "rgba(122, 95, 41, 0.9)",
                    def: "rgba(21, 143, 210, 0.9)",
                    completed: "rgba(245, 245, 245, 0.9)"
                },
                eventBorderColor: {
                    0: "#c75050",
                    1: "#658939",
                    2: "#5e4209",
                    def: "#0f77b0",
                    completed: "#d4d5d8"
                }
            },
            this.search = this._addComponent(u, {
                filter: this.filterOptions()
            }),
            this.form = this._addComponent(d),
            e(["vendor/fullcalendar.min"], s.bind(this.init, this))
        },
        destruct: function() {
            clearInterval(this.curTime),
            this._$window.off(this.ns),
            this.form && this.form.destroy(),
            this.$calendar && this.$calendar.fullCalendar("destroy")
        },
        init: function() {
            var e = a.getQueryParam("filter_date_from")
              , t = a.getQueryParam("filter_date_to")
              , n = this.middleDate(e, t);
            this.highlightElement = i(),
            this.calendar = this.$calendar.html("").removeClass("todo-calendar-cap").fullCalendar({
                header: {
                    left: "prev",
                    center: "title",
                    right: "next"
                },
                columnFormat: {
                    month: "en" === AMOCRM.lang_id ? "ddd D" : "dd",
                    week: "en" === AMOCRM.lang_id ? "ddd D" : "dd D",
                    day: "dddd, D MMM YYYY"
                },
                titleFormat: {
                    month: " ",
                    week: " ",
                    day: "dddd, " + AMOCRM.system.format.date.calendar
                },
                displayEventEnd: {
                    month: !0,
                    "default": !0
                },
                firstDay: moment().lang()._week.dow,
                fixedWeekCount: !1,
                axisFormat: AMOCRM.system.format.date.time,
                lang: AMOCRM.lang_id,
                timezone: AMOCRM.system.timezone,
                timeFormat: AMOCRM.system.format.date.time,
                defaultTimedEventDuration: "00:30:00",
                allDayText: "ru" === AMOCRM.lang_id ? AMOCRM.lang.tasks_all_day.split(" ").join("\n") : AMOCRM.lang.tasks_all_day,
                height: "auto",
                handleWindowResize: !1,
                defaultDate: n,
                defaultView: this.$(".list-top-nav__calendar .list-top-nav__text-button_active").attr("data-calendar-view"),
                editable: !0,
                eventDurationEditable: !1,
                dragRevertDuration: 100,
                eventLimit: {
                    month: !0,
                    agendaWeek: 4,
                    "default": 0
                },
                eventLimitClick: s.bind(this.moreEventsClick, this),
                eventLimitText: function(e) {
                    return "+" + e + " " + o.numeralWord(e, AMOCRM.lang.todo_numeral)
                },
                lazyFetching: !1,
                events: s.bind(this.loadEvents, this),
                eventRender: function(e, t) {
                    var i = ""
                      , s = ""
                      , n = !1;
                    e.end && t.find(".fc-time").hide().before('<span class="fc-time">' + e.end.format(AMOCRM.system.format.date.time) + "</span>"),
                    e.description && (i = o.escapeHTML(e.description),
                    e.linked && e.linked.name && (n = e.linked.name,
                    s = o.escapeHTML(e.linked.name + ", " + i)),
                    e.name && e.name.result && (i = e.name.result,
                    s = e.linked.name + ", " + i),
                    t.find(".fc-content").append('<span class="fc-description" title="' + e.title + ": " + s + '">' + (n ? '<span class="fc-description__text fc-description__linked">' + n + "</span>" : "") + '<span class="fc-description__text">' + (n ? ", " : "") + i + "</span></span>"))
                },
                eventAfterRender: s.bind(function(e, t, i) {
                    t.on("click", function(e) {
                        e.preventDefault()
                    }),
                    this.$(".fc-day-header").eq(this.$(".fc-today").index()).addClass("fc-day-header__today")
                }, this),
                eventClick: s.bind(this.clickToEdit, this),
                eventDrop: s.bind(this.dropToChangeDate, this),
                dayRender: s.bind(function(e, t, s) {
                    s.dayGrid.computeRowLevelLimit = m.computeRowLevelLimit,
                    s.dayGrid.renderMoreLink = m.renderMoreLink,
                    1 == e.date() && i(t[0]).closest(".fc-bg").next().find("thead tr").children().eq(i(t[0]).index()).addClass("first-of-month").append('<span class="day-text day-text__month">' + e.format(AMOCRM.system.format.date.calendar) + "</span>").append('<span class="day-text day-text__week">' + e.format("ddd M/D YYYY") + "</span>").append('<span class="day-text day-text__day">' + e.format("dddd M/D YYYY") + "</span>"),
                    1 === i(t[0]).index() && "agendaWeek" === this.$calendar.fullCalendar("getView").name && i("#todo-calendar div.fc-widget-header thead .fc-day-header").first().text(e.format(("ru" === AMOCRM.lang_id ? "dd," : "ddd") + " " + AMOCRM.system.format.date.calendar))
                }, this),
                dayClick: s.bind(this.dayClick, this),
                viewRender: s.bind(this.renderView, this)
            }),
            i("#calendar_footer").show(),
            this._$window.on("resize" + this.ns, s.bind(this.resizeCalendar, this)),
            this.resizeCalendar()
        },
        resizeCalendar: function() {
            this.$calendar.fullCalendar("option", "height", this._$window.height() - 110)
        },
        getEventsArray: function(e) {
            var t;
            return m.id_tasks_by_date = {},
            s.map(e, function(e) {
                return t = new moment(e.date,AMOCRM.system.format.date.date).format("D-MM-YYYY"),
                s.has(m.id_tasks_by_date, t) || (m.id_tasks_by_date[t] = []),
                m.id_tasks_by_date[t].push(e.id),
                this.makeEvent(e)
            }, this)
        },
        middleDate: function(e, t) {
            var i, s, n = moment();
            return e && t && (i = moment(t, AMOCRM.system.format.date.date).toDate().getTime(),
            s = moment(e, AMOCRM.system.format.date.date).toDate().getTime(),
            n = moment(new Date(i + (s - i) / 2))),
            n
        },
        filterPrepareAction: function(e) {
            var t = a.getQueryParam("filter_date_from")
              , i = a.getQueryParam("filter_date_to");
            return t && i && (e = a.setQueryParam({
                filter_date_from: t,
                filter_date_to: i
            }, {
                only_query_string: !0,
                query_string: e || ""
            }).substr(1)),
            e
        },
        checkView: function(e) {
            this.highlightElement = i("#todo-calendar .fc-time-grid .fc-state-highlight"),
            i("#curTime_aside").removeClass("visible"),
            i("#curTime_body").removeClass("visible"),
            clearInterval(this.curTime),
            "month" != e.name && this.highlightElement && this.highlightElement.length && this.setCurrentTime()
        },
        setCurrentTime: function() {
            function e() {
                t = moment().tz(AMOCRM.system.timezone),
                s = 60 * (23 - t.hours()),
                n = 59 - t.minutes(),
                o = (s + n) * i("#todo-calendar .fc-time-grid-container").height() / 1440,
                r = a.highlightElement.position().left / i("#todo-calendar").width() * 100 + "%",
                a.highlightElement.empty().append(i("#curTime_body").clone().attr("id", "curTime_body-highlight")),
                i("#curTime_aside").css("bottom", o),
                i("#curTime_body-highlight").css("bottom", o)
            }
            var t, s, n, o, r, a = this;
            i("#curTime_aside").addClass("visible"),
            i("#curTime_body").addClass("visible"),
            e(),
            this.curTime = setInterval(function() {
                e()
            }, 6e4)
        },
        setEventChangeForm: function(e) {
            var t = {
                result: !1,
                id: e.id,
                date: e.date,
                text: o.escapeHTML(e.params.text),
                main_user: e.params.main_user && e.params.main_user.id,
                type: e.params.type
            };
            return e.linked && (t.linked = {
                value: e.linked.name,
                element_type: e.linked.element_type,
                entity: s.invert(AMOCRM.element_types)[e.linked.element_type],
                id: e.linked.id,
                uri: e.linked.uri
            }),
            t.completed = e.params.complate,
            e.name && (t.result = {
                id: e.name.result_id,
                text: e.name.result
            }),
            t
        },
        makeEvent: function(e) {
            var t, n = moment(e.date, g), o = n.format(AMOCRM.system.format.date.time) == f, r = n.clone().subtract(30, "minutes");
            switch (!0) {
            case e.params.complate:
                t = "completed";
                break;
            case (!e.params.type || e.params.expired) && !e.params.complate:
                t = 0;
                break;
            default:
                t = e.params.type
            }
            return o && (r = i.fullCalendar.moment(r).stripTime(),
            n = i.fullCalendar.moment(n).stripTime()),
            s.extend(e, {
                allDay: o,
                end: n,
                start: r,
                title: e.params.type_name,
                description: e.params.text,
                expired: e.params.expired,
                className: e.params.complate ? "fc-completed" : "",
                editable: e.params.complate ? !1 : !0,
                textColor: e.params.complate ? "#6b717c" : "#fff",
                backgroundColor: this.defaults.eventColor[t] || this.defaults.eventColor.def,
                borderColor: this.defaults.eventBorderColor[t] || this.defaults.eventBorderColor.def
            })
        },
        updateEventFromTodo: function(e, t) {
            var i = _.get()
              , n = t.params || {}
              , r = moment(e.validated.date_time, g)
              , a = s.extend({}, AMOCRM.todo_types, AMOCRM.constant("task_types") || {})
              , l = moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.full);
            return t.date = e.validated.date_time,
            n.text = e.validated.body,
            n.type = parseInt(e.validated.type),
            n.expired = r.isBefore(moment(l, AMOCRM.system.format.date.full)),
            n.complate = !1,
            n.main_user = i[e.validated.main_user],
            e.validated.linked_id && (t.linked = t.linked || {},
            t.linked.id = e.validated.linked_id.id,
            t.linked.element_type = AMOCRM.element_types[e.validated.linked_id.entity],
            t.linked.name = o.escapeHTML(e.validated.linked.replace(/\+/gi, " "))),
            n.type_name = a[n.type],
            n.type_name || (n.type_name = a["key_" + n.type] ? o.unescapeHTML(o.stripTags(a["key_" + n.type].option)) : ""),
            t.params = n,
            this.makeEvent(t)
        },
        loadEvents: function(e, t, n, o) {
            m.id_tasks_by_date = {};
            var r, l = e.format(AMOCRM.system.format.date.date), c = t.format(AMOCRM.system.format.date.date), d = this.$calendar.fullCalendar("getView");
            AMOCRM.constant("existed_calendar") ? (o(this.getEventsArray(AMOCRM.constant("existed_calendar"))),
            AMOCRM.constant("existed_calendar", !1),
            this.$el.trigger("data:loaded", [d])) : (r = a.setQueryParam({
                filter_date_from: l,
                filter_date_to: c
            }, {
                only_query_string: !0
            }),
            this.loader(!0),
            i.ajax({
                url: "/private/ajax/todo/calendar.php",
                type: "POST",
                data: (r || "").substr(1),
                dataType: "json"
            }).always(s.bind(function() {
                this.loader(!1)
            }, this)).done(s.bind(function(e) {
                AMOCRM.constant("count_by_days", e.response.count_by_days),
                o(this.getEventsArray(e.response.items)),
                this.updateUrl(d, l, c),
                this.$el.trigger("data:loaded", [d])
            }, this)))
        },
        loader: function(e) {
            e ? (this.loader(!1),
            this.$calendar.append(this.$overlay = i('<div class="default-overlay list__overlay" style="position: absolute"><span class="spinner-icon spinner-icon-abs-center"></span></div>')),
            this.$overlay.trigger("overlay:show")) : this.$overlay && this.$overlay.trigger("overlay:hide")
        },
        renderView: function(e, t) {
            e.start && e.end && this.updateUrl(e, e.start.format(AMOCRM.system.format.date.date), e.end.format(AMOCRM.system.format.date.date)),
            "month" !== e.name && t.find(".fc-scroller").css("height", ""),
            this.checkView(e)
        },
        updateUrl: function(e, t, i) {
            var s = this.middleDate(t, i)
              , n = "";
            n = "month" === e.name && s.month() == moment().month() ? a.removeQueryParam(["filter_date_from", "filter_date_to"]) : a.setQueryParam({
                filter_date_from: t,
                filter_date_to: i
            }, {
                only_query_string: !0
            }).substr(1),
            AMOCRM.router.navigate(window.location.pathname + (n ? "?" + n : ""), {
                replace: !0
            })
        },
        makeTodoFormMoreResponse: function(e) {
            var t = function(t) {
                var i = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p);
                i && this.$calendar.fullCalendar("updateEvent", s.extend(i[0], t))
            }
              , n = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p)
              , o = ".todo_form:calendar";
            e.$el.data("start_event", n && n.length ? {
                start: n[0].start.clone(),
                end: n[0].start.clone().add(30, "minutes"),
                backgroundColor: n[0].backgroundColor,
                borderColor: n[0].borderColor,
                title: n[0].title,
                description: n[0].description
            } : {}).on("input" + o, "textarea", s.bind(function(e) {
                t.call(this, {
                    description: i(e.currentTarget).val()
                })
            }, this)).on("controls:change" + o, "#task_edit_type", s.bind(function(s) {
                var n, o = parseInt(s.currentTarget.value), r = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p);
                r && r.length && (n = r[0].start.clone().add(30, "minutes"),
                n.isBefore(moment()) && (o = 0)),
                t.call(this, {
                    expired: 0 === o,
                    title: i(s.currentTarget).parent().find('li[data-value="' + s.currentTarget.value + '"]').text(),
                    backgroundColor: this.defaults.eventColor[o] || this.defaults.eventColor.def,
                    borderColor: this.defaults.eventBorderColor[o] || this.defaults.eventBorderColor.def
                })
            }, this)).on("tasks-date:changed" + o, ".js-tasks-date-date-input", s.bind(function(i, s) {
                var n, o = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p);
                o && o.length && (n = o[0].start,
                n.set("year", s.year()),
                n.set("month", s.month()),
                n.set("date", s.date()),
                t.call(this, {
                    start: n
                }))
            }, this)).on("tasks-time:changed" + o, ".js-tasks-date-time-input", s.bind(function(i, s) {
                var n, o, r, a = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p), l = !1;
                a && a.length && (o = a[0].start,
                "23:59" == s.format("HH:mm") ? (o.stripTime(),
                n = o,
                l = !0) : (o.set("hours", s.hours()),
                o.set("minutes", s.minutes()),
                o.subtract(30, "minutes"),
                n = o.clone().add(30, "minutes")),
                r = n.isBefore(moment()),
                t.call(this, {
                    _allDay: l,
                    allDay: l,
                    start: o,
                    end: n,
                    expired: r,
                    backgroundColor: this.defaults.eventColor[r ? 0 : parseInt(document.getElementById("task_edit_type").value)] || this.defaults.eventColor.def,
                    borderColor: this.defaults.eventColor[r ? 0 : parseInt(document.getElementById("task_edit_type").value)] || this.defaults.eventColor.def
                }))
            }, this))
        },
        cancelTodoForm: function(e) {
            var t = e.$el.data("start_event")
              , i = this.$calendar.fullCalendar("clientEvents", e && e.data.id || p);
            i && 1 !== parseInt(e.$el.data("saved")) && this.$calendar.fullCalendar("updateEvent", s.extend(i[0], t)),
            e.$el.removeData().off(".todo_form:calendar")
        },
        addTodo: function(e) {
            var t, n, o, r, a;
            moment.isMoment(e) || (e = i.fullCalendar.moment().stripTime()),
            t = e.format(AMOCRM.system.format.date.date),
            n = e.hasTime() ? e.add(30, "minutes").format(AMOCRM.system.format.date.time) : moment("23:59", "hh:mm").format(AMOCRM.system.format.date.time),
            r = AMOCRM.constant("user") || {},
            o = this.form.add({
                date: t + " " + n,
                main_user: r.id || 0,
                onCancel: s.bind(function() {
                    this.cancelTodoForm(o),
                    this.$calendar.fullCalendar("removeEvents", p)
                }, this)
            }),
            a = e.isBefore(moment()),
            e = e.hasTime() ? e.subtract(30, "minutes") : e,
            this.$calendar.fullCalendar("renderEvent", {
                id: p,
                date: e,
                title: AMOCRM.todo_types[1],
                expired: a,
                backgroundColor: this.defaults.eventColor[a ? 0 : 1],
                borderColor: this.defaults.eventBorderColor[a ? 0 : 1]
            }),
            this.makeTodoFormMoreResponse(o)
        },
        gotoToday: function() {
            this.$calendar.fullCalendar("today"),
            this._$window.scrollTop(0)
        },
        clickToEdit: function(e) {
            var t, n = this, o = e.params.main_user.id, r = e.params.type;
            t = this.form.edit(i.extend({
                onCancel: s.bind(function() {
                    this.cancelTodoForm(t)
                }, this),
                onRemove: function(e) {
                    this.need_reload = !1,
                    n.$calendar.fullCalendar("removeEvents", e)
                },
                onSaveSuccess: function(t) {
                    n.$calendar.fullCalendar("updateEvent", n.updateEventFromTodo(t, e)),
                    this.$el.data("saved", 1),
                    this.need_reload = !1,
                    (o != t.validated.main_user || r != t.validated.type) && (this.need_reload = !0),
                    this.back()
                }
            }, this.setEventChangeForm(e))),
            this.makeTodoFormMoreResponse(t)
        },
        dropToChangeDate: function(e, t, i, n, o, r) {
            if ("day" != r.name) {
                var a = new moment(e.date,AMOCRM.system.format.date.date).format("D-MM-YYYY")
                  , l = new moment(e.start._d).format("D-MM-YYYY");
                m.id_tasks_by_date[l] || (m.id_tasks_by_date[l] = []),
                m.id_tasks_by_date[l].push(e.id),
                m.id_tasks_by_date[a] = s.without(m.id_tasks_by_date[a], e.id),
                0 == m.id_tasks_by_date[a].length && delete m.id_tasks_by_date[a],
                m.count_tasks_by_date[l]++,
                m.count_tasks_by_date[a]--
            }
            var d, u = this, h = e.end ? e.end : e.start.clone().add(30, "minutes");
            h.hasTime() || (h.set("hour", 23),
            h.set("minute", 59)),
            e.date = h.format(g),
            d = new c({
                entity: AMOCRM.getBaseEntity(),
                need_linked_input: !0,
                todo: this.setEventChangeForm(e),
                onSaveSuccess: function() {
                    u.$calendar.fullCalendar("updateEvent", u.updateEventFromTodo(this, e)),
                    d.destroy()
                }
            }).init(function() {
                this.checkTaskType()
            })
        },
        moreEventsClick: function(e, t, i) {
            var s = a.getQueryString()
              , n = this.$(".calendar-toggler")
              , o = e.moreEl.attr("data-todo-count");
            return o > 500 ? (s = a.setQueryParam({
                filter_date_from: e.date.format(AMOCRM.system.format.date.date),
                filter_date_to: e.date.format(AMOCRM.system.format.date.date)
            }, {
                only_query_string: !0
            }),
            AMOCRM.router.navigate("/todo/list/" + s, {
                trigger: !0
            }),
            i.name) : (AMOCRM.router.navigate((o > 500 ? "/todo/list/" : "/todo/calendar/day/") + (s ? "?" + s : ""), {
                replace: !0
            }),
            n.find(".control-toggler__item-selected").removeClass("control-toggler__item-selected"),
            n.find('.control-toggler__item[data-calendar-view="agendaDay"]').addClass("control-toggler__item-selected"),
            "day")
        },
        dayClick: function(e, t, i) {
            this.addTodo(e)
        },
        renderSummary: function(e, t) {
            m.count_tasks_by_date = AMOCRM.constant("count_by_days");
            var n, o = s.values(m.count_tasks_by_date || {}), r = a.getQueryString(), l = "";
            switch (t.name) {
            case "month":
                break;
            default:
                n = s.reduce(o, function(e, t) {
                    return e + parseInt(t)
                }, 0),
                n > 500 && (l = AMOCRM.lang.calendar_footer_limit.replace("#COUNT#", n).replace("#LINK#", "/todo/list/" + (r ? "?" + r : "")))
            }
            i("#calendar_summary").html(l)
        }
    }),
    r.mixin(t, h),
    t
}),
define("lib/pages/reports/winlost", ["require", "jquery", "underscore", "twig", "chartjs", "cocktail", "lib/core/page", "lib/common/cookie", "lib/common/urlparams", "lib/common/fn", "lib/components/filter/filter", "lib/interface/controls/responsive_toggler_b", "lib/interface/unsorted/mixins/settings"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("chartjs"), r = e("cocktail"), a = e("lib/core/page"), l = e("lib/common/cookie"), c = e("lib/common/urlparams"), d = e("lib/common/fn"), u = e("lib/components/filter/filter"), h = e("lib/interface/controls/responsive_toggler_b"), _ = e("lib/interface/unsorted/mixins/settings"), p = d.delay();
    return t = a.extend({
        endpoint: "/ajax/stats/pipeline/",
        template: "/tmpl/analytics/pipeline.twig",
        preload: ["/tmpl/analytics/unsorted_statistics.twig"],
        overlay_class_name: "aside-page-overlay",
        unsorted_settings: {},
        overlayContainer: function() {
            return i("#content_holder")
        },
        _renderPage: function(e) {
            e.response.pipelines = s.sortBy(e.response.pipelines, "sort"),
            a.prototype._renderPage.call(this, e)
        },
        _selectors: function() {
            return {
                unsorted_analytics_block: ".unsorted_analytics_block",
                unsorted_process_bar_mail: ".unsorted_analytics_block .progress-bar.progress-bar-mail",
                unsorted_process_bar_sip: ".unsorted_analytics_block .progress-bar.progress-bar-sip",
                unsorted_process_bar_forms: ".unsorted_analytics_block .progress-bar.progress-bar-forms",
                unsorted_process_bar_chats: ".unsorted_analytics_block .progress-bar.progress-bar-chats",
                unsorted_process_bar: ".unsorted_analytics_block .progress-bar",
                unsorted_process_bar_title: ".unsorted_analytics_right .progress-bar-element-title",
                unsorted_process_bar_info: " .unsorted_analytics_right .progress-bar-element-info",
                unsorted_process_bar_percent: ".unsorted_analytics_right .percent",
                unsorted_process_bar_incoming_percent: ".unsorted_analytics_right .incoming .percent",
                unsorted_process_bar_incoming_progress: ".unsorted_analytics .incoming .progress",
                unsorted_process_bar_incoming_container_4_banner: ".unsorted_analytics .incoming .progress .container_4_banner",
                unsorted_time_line: ".unsorted_analytics_block .timeline_current",
                unsorted_good_sorted_bar: ".unsorted_analytics_block .progress-bar-good-sorted",
                unsorted_moved_to_lead_percent: ".unsorted_analytics_block .moved_to_lead .percent"
            }
        },
        filterOptions: function() {
            return {
                el: i("#sidebar"),
                active_selector: "#filter_show_btn",
                active_class: "filter-show-btn-active"
            }
        },
        events: function() {
            return s.extend({}, a.prototype.events || {}, {
                "click #leads_funnel_type_toggler .control-toggler__item": "funnelType",
                'click #leads_funnel_type_toggler .cubestats-toggler__item[data-disabled != "y"]': "funnelType",
                "click #leads_funnel_sort_type_toggler .control-toggler__item": "funnelSortType",
                "click #leads_funnel_sort_type_toggler .cubestats-toggler__item": "funnelSortType",
                "click .pipelines-responsive-toggler .control-toggler__item": "onPipelineClick"
            })
        },
        components: function() {
            return [[u, this.filterOptions()]]
        },
        _title: function() {
            return AMOCRM.lang.analytics__title
        },
        _getEndpoint: function() {
            var e = l.get("stats__leads_funnel_type")
              , t = c.getQueryString();
            return null != e && (t && t.length > 0 ? c.setQueryParam({
                deals_type: e
            }, {
                replace: !0,
                query_string: t
            }) : t = "deals_type=" + e),
            this.endpoint + "?" + t
        },
        construct: function(e) {
            var t;
            this.options = e || {},
            t = this.options.response && this.options.response.unsorted || {},
            r.mixin(this, _),
            this.unsorted_settings = this.getUnsortedSettings(t),
            this.pipelineId = +c.getQueryParam("pipeline_id") || null,
            this._$window.on("resize" + this.ns, s.bind(this.windowResize, this)),
            this.chart = this.paintPie(),
            this.avgDays(),
            this.procents(),
            this.prospectiveRows(),
            this.unsorted_settings.show && this.getAndReadUnsortedStatistics(),
            this.responsiveTogglerInit(),
            this.moveCursors()
        },
        destruct: function() {
            this._$window.off(this.ns),
            this.chart && this.chart.destroy(),
            this.respToggler && this.respToggler.destroy()
        },
        getAndReadUnsortedStatistics: function() {
            var e = this;
            this.user || (this.user = AMOCRM.constant("user"));
            var t = s.extend({
                login: this.user.login,
                api_key: this.user.api_key
            }, t)
              , n = c.getQueryParam("filter_date_from", c.getQueryString())
              , o = c.getQueryParam("filter_date_to", c.getQueryString());
            n && o && (t.data = {
                filter: {
                    date: {
                        from: d.getMoment(n + " 00:00:00").unix(),
                        to: d.getMoment(o + " 23:59:59").unix()
                    }
                }
            }),
            i.ajax({
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json; charset=UTF-8"
                },
                type: "GET",
                url: "/api/unsorted/get_all_summary/",
                data: t,
                success: function(t) {
                    t && t.response && (t.response.total > 0 ? e.renderUnsortedStatistics(t.response) : 0 == t.response.total && n ? e._elem("unsorted_analytics_block").append('<div class="unsroted-plug-analysis"></div>') : e._elem("unsorted_analytics_block").fadeOut())
                },
                error: function(e, t, i) {}
            })
        },
        renderUnsortedStatistics: function(e) {
            this.response = e;
            var t = this
              , i = d.convert_to_readable_time_format(e.avg_time);
            e.avg_time = i.time,
            e.time_metric = i.time_metric,
            e.good_sorted_percent = e.accepted / e.total_sorted * 100,
            e.good_sorted_percent = Math.round(100 * e.accepted / e.total),
            t._elem("unsorted_analytics_block").html(n({
                ref: "/tmpl/analytics/unsorted_statistics.twig"
            }).render(e)),
            s.defer(function() {
                t._elem("unsorted_time_line").css("width", "39%"),
                e.good_sorted_percent = e.good_sorted_percent < 10 ? 10 : e.good_sorted_percent,
                t.drawProgressbarStepByStep(e)
            })
        },
        prepareDataForUnsortedStatistics: function(e) {
            var t, i = 100 - this._elem("unsorted_process_bar_incoming_percent").outerWidth(!0) / this._elem("unsorted_process_bar_incoming_progress").outerWidth(!0) * 100;
            this._elem("unsorted_process_bar_incoming_container_4_banner").css("width", i + "%");
            var n = 80;
            s.each(e.category, function(i, s) {
                t = Math.round(i.total * n / e.total),
                0 == i.total ? delete e.category[s] : 10 > t && (e.category[s].percent = 10,
                n -= 10)
            }),
            s.each(e.category, function(t, i) {
                "undefined" == typeof e.category[i].percent && (e.category[i].percent = Math.round(t.total * n / e.total))
            })
        },
        drawProgressbarStepByStep: function(e) {
            this.prepareDataForUnsortedStatistics(e);
            var t = e.category
              , i = this
              , n = 0
              , o = 0
              , r = 0
              , a = 3;
            s.each(t, function(e, t) {
                i._elem("unsorted_process_bar_" + t).css("z-index", a),
                a--
            });
            var l = !0;
            s.each(t, function(e, t) {
                r += e.percent / 100 * 1.5,
                i._elem("unsorted_process_bar_" + t).css("width", e.percent + "%"),
                l && (e.percent -= 5),
                i._elem("unsorted_process_bar_" + t).css("right", "-" + e.percent + "%"),
                i._elem("unsorted_process_bar_" + t).animate({
                    right: o
                }, 1e3 * r),
                o += i._elem("unsorted_process_bar_" + t).outerWidth(!0) - 2,
                n += i._elem("unsorted_process_bar_" + t).outerWidth(),
                l = !1
            }),
            e.good_sorted_percent = n * (e.good_sorted_percent / 100),
            i._elem("unsorted_good_sorted_bar").css("width", e.good_sorted_percent),
            i._elem("unsorted_good_sorted_bar").css("right", "-" + (i._elem("unsorted_good_sorted_bar").outerWidth(!0) - 50) + "px"),
            i._elem("unsorted_good_sorted_bar").animate({
                right: 0
            }, 1500),
            i._elem("unsorted_process_bar_incoming_percent").prepareTransition().css({
                right: o
            }),
            i._elem("unsorted_moved_to_lead_percent").prepareTransition().css({
                right: e.good_sorted_percent + 10
            }),
            setTimeout(function() {
                i._elem("unsorted_process_bar_percent").animate({
                    opacity: 1
                }, 600),
                i._elem("unsorted_process_bar_title").fadeIn(),
                i._elem("unsorted_process_bar_info").fadeIn()
            }, 1500)
        },
        moveCursors: function() {
            var e = i(".analytics-filter-toggler");
            e.each(function() {
                var e = i(this)
                  , t = e.find(".cubestats-toggler__item")
                  , s = t.closest(".active")
                  , n = e.find("#dashborad_date_toggler-active");
                n.css({
                    left: s.position().left + (t.index(s) > 0 ? 18 : 0),
                    width: s.outerWidth(),
                    visibility: "visible"
                })
            }).removeClass("toggler-no-active")
        },
        onPipelineClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.data("id");
            if (s) {
                this.pipelineId = s;
                var n = c.setQueryParam({
                    pipeline_id: s
                });
                AMOCRM.router.navigate(n, {
                    trigger: !0,
                    replace: !0
                })
            }
            e.stopPropagation(!0)
        },
        responsiveTogglerInit: function() {
            this.respToggler && this.respToggler.destroy(),
            this.respToggler = new h({
                el: i(".responsive-toggler-container"),
                active: this.pipelineId
            }),
            this.respToggler.resizeToggler()
        },
        funnelType: function(e) {
            var t = i(e.currentTarget).attr("data-type") || "";
            l.set({
                name: "stats__leads_funnel_type",
                value: t
            });
            var s = c.setQueryParam({
                deals_type: t
            });
            AMOCRM.router.navigate(s, {
                trigger: !0,
                replace: !0
            })
        },
        funnelSortType: function(e) {
            var t = i(e.currentTarget).attr("data-type")
              , s = c.setQueryParam({
                type: t
            });
            AMOCRM.router.navigate(s, {
                trigger: !0,
                replace: !0
            })
        },
        windowResize: function() {
            var e = 0
              , t = this;
            this.response && (s.each(this.response.category, function(i, s) {
                t._elem("unsorted_process_bar_" + s).css({
                    right: e
                }),
                e += t._elem("unsorted_process_bar_" + s).outerWidth(!0)
            }),
            t._elem("unsorted_process_bar_incoming_percent").prepareTransition().css({
                right: e
            })),
            p(s.bind(function() {
                this.procents(),
                this.avgDays()
            }, this), 150)
        },
        prospectiveRows: function() {
            var e = []
              , t = 0
              , n = this.$(".b-table__4");
            n.find(".big").each(s.bind(function(s, n) {
                if (!i(n).closest(".l-lift").hasClass("static-lift")) {
                    var o = d.parseNum(i(n).text());
                    t = o > t ? o : t,
                    e.push(o)
                }
            }, this)),
            n.find(".l-lift:not(.static-lift)").each(s.bind(function(s, n) {
                switch (e[s]) {
                case 0:
                    i(this).css({
                        top: 72
                    });
                    break;
                case t:
                    i(n).css({
                        top: "-45%"
                    });
                    break;
                default:
                    i(n).css({
                        top: -(e[s] / t * 45) + "%"
                    })
                }
            }, this))
        },
        paintPie: function() {
            var e = [];
            return this.$(".analytics__pipeline__circle__data .value").length ? (this.$(".analytics__pipeline__circle__data .value").each(s.bind(function(t, s) {
                var n = d.parseNum(i(s).text())
                  , o = i(s).attr("data-bgcolor");
                0 !== n && e.push({
                    value: n,
                    color: o,
                    highlight: o
                })
            }, this)),
            e.length || e.push({
                value: 100,
                color: "#ccc",
                highlight: "#ccc"
            }),
            new o(document.getElementById("pie_chart").getContext("2d")).Doughnut(e, {
                percentageInnerCutout: 95,
                showTooltips: !1,
                segmentStrokeWidth: 0,
                segmentStrokeColor: "transparent",
                animationEasing: "linear",
                animationSteps: 60
            })) : !1
        },
        procents: function() {
            var e, t = 0, n = 80, o = this.$(".calculation__rows"), r = !!this.$("#plug-detector").length;
            r || (e = s.max(this.$(".calculation__rows .percent"), function(e) {
                return d.parseNum(i(e).text())
            }),
            e && (t = d.parseNum(i(e).text())),
            this.$(".calculation__rows .percent").each(s.bind(function(e, s) {
                var r = d.parseNum(i(s).text());
                o.find(".percent__graph:eq(" + e + ")").css({
                    width: r / t * n + "%"
                })
            }, this)))
        },
        avgDays: function() {
            var e = 0
              , t = this.$(".pipeline__rows .list__row").width() - 70
              , n = d.parseNum(this.$("#avg_days_total").attr("data-num"))
              , o = [5, 19, 29, 37, 0]
              , r = !!this.$("#plug-detector").length;
            this.$(".pipeline__rows .item__row .item").each(s.bind(function(s, a) {
                var l = r ? o[s] : d.parseNum(i(a).find(".title").text())
                  , c = t * l / n;
                0 === c && (c = 1,
                i(a).css("margin-left", -1)),
                0 === e ? (i(a).css({
                    width: c
                }),
                e += c) : (i(a).css({
                    width: c,
                    left: e
                }),
                e += c),
                i(a).find(".title").css({
                    opacity: 1
                })
            }, this))
        }
    })
}),
define("lib/pages/reports/by_activities", ["require", "jquery", "underscore", "moment", "lib/core/page", "lib/components/filter/filter", "lib/common/urlparams", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("moment")
      , n = e("lib/core/page")
      , o = e("lib/components/filter/filter")
      , r = e("lib/common/urlparams")
      , a = e("lib/core/users")
      , l = s().quarter()
      , c = l - 1
      , d = {
        current_day: s().format(AMOCRM.system.format.date.date) + " - " + s().format(AMOCRM.system.format.date.date),
        current_week: s().weekday(0).format(AMOCRM.system.format.date.date) + " - " + s().weekday(6).format(AMOCRM.system.format.date.date),
        current_month: s().startOf("month").format(AMOCRM.system.format.date.date) + " - " + s().endOf("month").format(AMOCRM.system.format.date.date),
        current_quarter: s().month(3 * l - 3).startOf("month").format(AMOCRM.system.format.date.date) + " - " + s().month(3 * l - 1).endOf("month").format(AMOCRM.system.format.date.date),
        current_year: s().startOf("year").format(AMOCRM.system.format.date.date) + " - " + s().endOf("year").format(AMOCRM.system.format.date.date),
        previous_month: s().subtract("month", 1).startOf("month").format(AMOCRM.system.format.date.date) + " - " + s().subtract("month", 1).endOf("month").format(AMOCRM.system.format.date.date),
        previous_quarter: s().month(3 * c - 3).startOf("month").format(AMOCRM.system.format.date.date) + " - " + s().month(3 * c - 1).endOf("month").format(AMOCRM.system.format.date.date),
        previous_year: s().subtract("year", 1).startOf("year").format(AMOCRM.system.format.date.date) + " - " + s().subtract("year", 1).endOf("year").format(AMOCRM.system.format.date.date)
    };
    return n.extend({
        endpoint: "/ajax/stats/by_activities/",
        template: "/tmpl/analytics/by_activities.twig",
        overlay_class_name: "aside-page-overlay",
        overlayContainer: function() {
            return t("#content_holder")
        },
        filterOptions: function() {
            return {
                active_selector: "#filter_show_btn",
                active_class: "filter-show-btn-active",
                disabled_users: !1
            }
        },
        components: function() {
            return this._$document.on("filter:deserialize:callback" + this.ns, i.bind(this.filterDeserialize, this)),
            [[o, this.filterOptions()]]
        },
        events: function() {
            return i.extend({}, n.prototype.events || {}, {
                "click .js-top-filter-period .tips-item": "filterPeriod",
                "click .js-top-filter-managers .tips-item": "filterUser"
            })
        },
        _title: function() {
            return AMOCRM.lang.analytics_by_activities_title
        },
        construct: function() {
            this.graphAnimate(),
            this.syncUsersFilter(),
            r.getQueryParam("user[]") || this.$("#cbx_drop_" + a.current("id")).prop("checked", !0).trigger("change")
        },
        destruct: function() {
            this.small_circle_chart && this.small_circle_chart.destroy(),
            this.big_circle_chart && this.big_circle_chart.destroy()
        },
        getUsersSelectInputName: function() {
            return "user[]"
        },
        syncUsersFilter: function() {
            var e = ""
              , s = !0
              , n = 0
              , o = t("#filter_users_select_managers_holder");
            this.$(".js-top-filter-managers").find(".tips-item_selected").each(function(r, l) {
                var c = t(l).attr("data-id")
                  , d = i.escape(t(l).text());
                return "all" === c ? void o.find("ul").html(i.map(a.get(), function(e) {
                    return '<li class="multisuggest__list-item js-multisuggest-item" data-title="' + e.title + '" data-id="' + e.id + '">' + e.title + '<input type="checkbox" checked="checked" class="hidden" name="user[]" id="cbx_drop_' + e.id + '" value="' + e.id + '"></li>'
                }).join("")) : (e += '<li class="multisuggest__list-item js-multisuggest-item" data-title="' + d + '" data-id="' + c + '">' + d + '<input type="checkbox" checked="checked" class="hidden" name="user[]" id="cbx_drop_' + c + '" value="' + c + '"></li>',
                n++,
                void (parseInt(c) === a.current("id") && (s = !1)))
            }),
            o.find("ul").remove(),
            o.prepend('<ul class="multisuggest__list js-multisuggest-list">' + e + "</ul>"),
            "" === e || !s && 1 === n ? o.closest(".filter__custom_settings__item").removeClass("glow") : o.closest(".filter__custom_settings__item").addClass("glow")
        },
        filterPeriod: function(e) {
            var i = t(e.currentTarget).attr("data-id")
              , s = d[i].split("-");
            AMOCRM.router.navigate(r.setQueryParam({
                from: t.trim(s[0]),
                to: t.trim(s[1])
            }, {
                query_string: r.removeQueryParam(["from", "to"])
            }), {
                trigger: !0
            }),
            e.preventDefault()
        },
        filterUser: function(e) {
            var i = t(e.currentTarget)
              , s = {};
            "all" === i.attr("data-value") ? (s["user[]"] = [],
            this.$(".activities__filter .tips-item").each(function() {
                return "all" === t(this).attr("data-value") ? !0 : void (t(this).attr("data-value") && s["user[]"].push(t(this).attr("data-value")))
            })) : s = {
                "user[]": i.attr("data-value")
            },
            AMOCRM.router.navigate(r.setQueryParam(s, {
                query_string: r.removeQueryParam("user[]")
            }), {
                trigger: !0
            }),
            e.preventDefault()
        },
        filterDeserialize: function(e, s) {
            var n, o, r, l = this.$(".js-top-filter-managers"), c = this.$(".js-top-filter-period"), u = s.from + " - " + s.to, h = !1;
            s && (l.find(".tips-item_selected").removeClass("tips-item_selected"),
            r = s["user[]"],
            r && i.isArray(r) && r.length > 1 ? l.find(".tips-item").length - 1 !== r.length ? (l.children(".filter__value").text(AMOCRM.lang.rsf_top_filter_managers),
            i.each(r, function(e, t) {
                n = l.find(".tips-item[data-value=" + e + "]"),
                n.addClass("tips-item_selected")
            })) : (o = l.find('.tips-item[data-id="all"]'),
            l.children(".filter__value").text(t.trim(o.text())),
            o.addClass("tips-item_selected")) : (r || (r = a.current(),
            r = r.id ? r.id : 0),
            i.isArray(r) && (r = i(r).first()),
            n = l.find(".tips-item[data-value=" + r + "]"),
            n.length && (n.addClass("tips-item_selected"),
            l.children(".filter__value").text(t.trim(n.text())))),
            (s.from || s.to) && (h = i.invert(d)[u],
            h ? (c.find(".tips-item_selected").removeClass("tips-item_selected"),
            n = this.$(".js-top-filter-period").find('[data-id="' + h + '"]'),
            n.addClass("tips-item_selected"),
            c.children(".filter__value").text(t.trim(n.text() + " " + this.dateString(t.trim(n.attr("data-id")))))) : this.$(".js-top-filter-period .filter__value").text(this.dateString(t.trim(n.attr("data-id"))))))
        },
        graphAnimate: function() {
            var e, i = [], s = 0;
            this.$("#main_circles").prepareTransition().addClass("loaded"),
            e = this.$el.find(".b-table__1"),
            e.find(".big").each(function() {
                s = parseInt(t(this).text()) > s ? parseInt(t(this).text()) : s,
                i.push(parseInt(t(this).text()))
            }),
            e.find(".l-lift").each(function(e) {
                switch (i[e]) {
                case 0:
                    t(this).css({
                        top: "142px"
                    });
                    break;
                default:
                    0 !== s && t(this).css({
                        top: 142 - 142 * i[e] / s + "px"
                    })
                }
            })
        },
        dateString: function(e) {
            var t, i, n, o, r, a, l = d[e];
            return l ? (t = l.split("-"),
            r = s(t[0], AMOCRM.system.format.date.date),
            a = s(t[1], AMOCRM.system.format.date.date),
            n = r.format(AMOCRM.system.format.date.calendar_no_year),
            o = a.format(AMOCRM.system.format.date.calendar_no_year),
            (r.year() !== a.year() || r.year() !== s().year()) && (n = r.format(AMOCRM.system.format.date.calendar),
            o = a.format(AMOCRM.system.format.date.calendar)),
            a.toString() === s().startOf("day").toString() && (o = s().format(s().lang().calendar("today"))),
            "current_year" === e && (n = s([s().year(), 0, 1]).format(AMOCRM.system.format.date.calendar)),
            i = "current_day" === e ? n : n + " Ц " + o) : ""
        }
    })
}),
define("lib/pages/reports/consolidated", ["require", "jquery", "underscore", "chartjs", "lib/core/page", "lib/components/filter/filter", "lib/common/urlparams", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("chartjs").noConflict(), o = e("lib/core/page"), r = e("lib/components/filter/filter"), a = e("lib/common/urlparams"), l = e("lib/common/fn");
    return t = o.extend({
        endpoint: "/ajax/stats/consolidated/",
        template: "/tmpl/analytics/consolidated.twig",
        default_filter_qs: ["filter_date_to", "filter_date_from", "filter[main_user][]"],
        overlay_class_name: "aside-page-overlay",
        overlayContainer: function() {
            return i("#content_holder")
        },
        filterOptions: function() {
            return {
                _report_type: "consolidated",
                active_selector: "#filter_show_btn",
                active_class: "filter-show-btn-active"
            }
        },
        components: function() {
            return [[r, this.filterOptions()]]
        },
        events: function() {
            return s.extend({}, o.prototype.events || {}, {
                "click .js-show-parent-all": "showParentAll",
                "click .js-stats-report": "filterReport",
                "click .js-stats-period": "filterReport"
            })
        },
        _title: function() {
            return AMOCRM.lang.analytics_consolidated_title
        },
        _getEndpoint: function(e) {
            return this.endpoint + "?type=" + (e[0] || "") + "&" + a.getQueryString()
        },
        construct: function(e) {
            e && e.res && e.res.response && e.res.response.default_filter && AMOCRM.constant("default_filter", e.res.response.default_filter),
            this.line_chart = this.lineChart(),
            this.pie_chart = this.pieChart()
        },
        destruct: function() {
            this.line_chart && this.line_chart.destroy(),
            this.pie_chart && this.pie_chart.destroy()
        },
        showParentAll: function(e) {
            var t = i(e.currentTarget);
            t.closest(".analytics__consolidated__data").find(".row").show(),
            t.closest(".row").remove()
        },
        filterReport: function(e) {
            var t, n = i(e.currentTarget), o = n.attr("data-period"), r = a.getQueryString(), l = this._$body.scrollTop(), c = {};
            e.preventDefault(),
            e.stopPropagation(),
            r && (s.each(a.QStoJSON(r), function(e, t) {
                s.contains(this.default_filter_qs, t) && (c[t] = e)
            }, this),
            r = a.setQueryParam(c, {
                only_query_string: !0,
                query_string: ""
            })),
            t = o ? a.setQueryParam({
                GRAPH_PERIOD: o
            }) : n.attr("href") + (r || ""),
            AMOCRM.router.navigate(t, {
                trigger: !0
            }),
            o && this._$document.one("page:changed", s.bind(function() {
                this._$body.scrollTop(l)
            }, this)),
            e.preventDefault()
        },
        pieChart: function() {
            var e = window.location.pathname
              , t = []
              , o = [];
            switch (e) {
            case "/stats/consolidated/":
                o = [];
                break;
            case "/stats/consolidated/contacts/":
                o = ["#158fd2", "#f2b45c"];
                break;
            case "/stats/consolidated/todo/":
                o = ["#99ccff", "#ffcc66", "#ff9999", "#ccccff", "#ccff66", "#676e79", "#99ccff"]
            }
            this.$(".analytics__consolidated__data:eq(0) .row .percent").each(s.bind(function(s, n) {
                var r = l.parseNum(i(n).text())
                  , a = "/stats/consolidated/" == e ? i(n).attr("data-bgcolor") : o[s];
                0 !== r && t.push({
                    value: r,
                    color: a,
                    highlight: a
                }),
                "/stats/consolidated/" != e && i(n).parent().next().find(".bgcolor").css("background-color", a)
            }, this));
            var r = !!this.$("#plug-detector").length;
            return t.length || (r ? t = [{
                value: 28,
                color: "#99CCFF",
                highlight: "#99CCFF"
            }, {
                value: 17,
                color: "#FFFF99",
                highlight: "#FFFF99"
            }, {
                value: 48,
                color: "#ee8d91",
                highlight: "#ee8d91"
            }, {
                value: 7,
                color: "#FFCC66",
                highlight: "#FFCC66"
            }] : t.push({
                val: 100,
                color: "#ccc",
                highlight: "#ccc"
            })),
            new n(document.getElementById("pie_chart").getContext("2d")).Doughnut(t, {
                percentageInnerCutout: 95,
                showTooltips: !1,
                segmentStrokeWidth: 0,
                segmentStrokeColor: "transparent",
                animationEasing: "linear",
                animationSteps: 60
            })
        },
        lineChart: function() {
            var e = i("#statistics__graph")
              , t = e.next()
              , s = i("#line_chart")
              , o = []
              , r = {}
              , a = []
              , c = []
              , d = {
                "new": [],
                won: []
            };
            s.attr("width", e.width()),
            t.find(".statistics__graph__dates .value").each(function(e, t) {
                var s = i(t).text();
                o.push(s),
                r[s] = e
            }
            .bind(this)),
            t.find(".statistics__graph__won .value").each(function(e, t) {
                a.push(l.parseNum(i(t).text())),
                d.won.push(i(t).attr("data-item"))
            }
            .bind(this)),
            t.find(".statistics__graph__new .value").each(function(e, t) {
                c.push(l.parseNum(i(t).text())),
                d["new"].push(i(t).attr("data-item"))
            }
            .bind(this)),
            AMOCRM.constant("consolidated_labels_x", o),
            AMOCRM.constant("consolidated_labels_keys", r);
            var u = !!this.$("#plug-detector").length;
            return u && (a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31],
            c = [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 3, 1, 11, 5, 13, 6, 1, 0, 1, 2, 1, 0, 1, 0, 0],
            d.won = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            d["new"] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            o = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
            new n(s.get(0).getContext("2d")).Line({
                labels: o,
                datasets: [{
                    label: "new",
                    pointColor: "#158fd2",
                    pointStrokeColor: "#f5f5f5",
                    pointHighlightFill: "#f5f5f5",
                    pointHighlightStroke: "#158fd2",
                    strokeColor: "#158fd2",
                    data: c
                }, {
                    label: "won",
                    pointColor: "#749e42",
                    pointStrokeColor: "#f5f5f5",
                    pointHighlightFill: "#f5f5f5",
                    pointHighlightStroke: "#749e42",
                    strokeColor: "#749e42",
                    data: a
                }]
            }, {
                multiTooltipTemplate: function(e) {
                    var t = d[e.datasetLabel][r[e.label]];
                    return e.value + " " + l.numeralWord(e.value, "new" == e.datasetLabel ? AMOCRM.lang.new_entity : AMOCRM.lang.won_entity) + (d.won.length ? ": " + l.currency(t) : "")
                },
                tooltipFillColor: "rgb(255,255,255)",
                tooltipFontColor: "#666",
                tooltipTitleFontColor: "rgb(51,51,51)",
                tooltipCornerRadius: 2,
                tooltipFontFamily: "'PT Sans', Arial, sans-serif",
                tooltipTitleFontFamily: "'PT Sans', Arial, sans-serif",
                tooltipTitleFontSize: 13,
                tooltipFontSize: 13,
                tooltipYPadding: 8,
                tooltipXPadding: 8,
                responsive: !0,
                maintainAspectRatio: !1,
                pointHitDetectionRadius: 10,
                scaleFontSize: 11,
                pointDotRadius: 4,
                pointDotStrokeWidth: 2,
                datasetStrokeWidth: 3,
                datasetFill: !1,
                bezierCurve: !1,
                scaleFontFamily: "'PT Sans', Arial, sans-serif",
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].lineColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'
            })
        }
    }),
    n.Scale.prototype.draw = function() {
        var e, t, i, s = this.ctx, o = (this.endPoint - this.startPoint) / this.steps, r = Math.round(this.xScalePaddingLeft);
        if (this.display) {
            s.fillStyle = this.textColor,
            s.font = this.font;
            for (t in this.yLabels) {
                e = this.yLabels[t];
                var a = this.endPoint - o * t
                  , l = Math.round(a);
                s.textAlign = "right",
                s.textBaseline = "middle",
                this.showLabels && s.fillText(e, r - 10, a),
                s.beginPath(),
                t > 0 ? (s.lineWidth = this.gridLineWidth,
                s.strokeStyle = this.gridLineColor) : (s.lineWidth = this.lineWidth,
                s.strokeStyle = this.lineColor),
                l += n.helpers.aliasPixel(s.lineWidth),
                s.moveTo(r, l),
                s.lineTo(this.width, l),
                s.stroke(),
                s.closePath(),
                s.lineWidth = this.lineWidth,
                s.strokeStyle = this.lineColor,
                s.beginPath(),
                s.moveTo(r - 5, l),
                s.lineTo(r, l),
                s.stroke(),
                s.closePath()
            }
            for (t in this.xLabels) {
                i = this.xLabels[t];
                var c = this.calculateX(t) + n.helpers.aliasPixel(this.lineWidth)
                  , d = this.calculateX(t - (this.offsetGridLines ? .5 : 0)) + n.helpers.aliasPixel(this.lineWidth)
                  , u = this.xLabelRotation > 0;
                s.beginPath(),
                t > 0 ? (s.lineWidth = this.gridLineWidth,
                s.strokeStyle = this.gridLineColor) : (s.lineWidth = this.lineWidth,
                s.strokeStyle = this.lineColor),
                s.moveTo(d, this.endPoint),
                s.lineTo(d, this.startPoint - 3),
                s.stroke(),
                s.closePath(),
                s.lineWidth = this.lineWidth,
                s.strokeStyle = this.lineColor,
                s.beginPath(),
                s.moveTo(d, this.endPoint),
                s.lineTo(d, this.endPoint + 5),
                s.stroke(),
                s.closePath(),
                s.save(),
                s.translate(c, u ? this.endPoint + 12 : this.endPoint + 8),
                s.rotate(-1 * n.helpers.radians(this.xLabelRotation)),
                s.font = this.font,
                s.textAlign = u ? "right" : "center",
                s.textBaseline = u ? "middle" : "top",
                s.restore()
            }
        }
    }
    ,
    n.MultiTooltip.prototype.init = n.MultiTooltip.prototype.initialize,
    n.MultiTooltip.prototype.initialize = function(e) {
        var t = ""
          , i = AMOCRM.system.format.date.date
          , s = AMOCRM.constant("consolidated_labels_x")
          , o = AMOCRM.constant("consolidated_labels_keys")
          , r = s[o[e.title] + 1];
        a.getQueryParam("GRAPH_PERIOD") && "month3" != a.getQueryParam("GRAPH_PERIOD") || (t = " - ",
        t += void 0 !== r ? moment(r, i).subtract("days", 1).format(i) : moment().format(i)),
        this.title = e.title + t,
        n.MultiTooltip.prototype.init.call(this, e)
    }
    ,
    t
}),
define("lib/pages/reports/calls", ["require", "jquery", "underscore", "twig", "lib/core/page", "lib/components/base/player", "lib/components/lists/base/header", "lib/common/hs", "lib/common/fn", "lib/common/urlparams", "vendor/Steady.js/Steady", "lib/components/filter/filter"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/page"), r = e("lib/components/base/player"), a = e("lib/components/lists/base/header"), l = e("lib/common/hs"), c = e("lib/common/fn"), d = e("lib/common/urlparams"), u = e("vendor/Steady.js/Steady"), h = e("lib/components/filter/filter");
    return t = o.extend({
        endpoint: "/ajax/stats/calls/",
        template: "/tmpl/analytics/calls.twig",
        preload: ["/tmpl/list/item.twig"],
        overlay_class_name: "aside-page-overlay",
        overlayContainer: function() {
            return i("#content_holder")
        },
        components: function() {
            return [[r, {
                $container: this.$list_wrapper
            }]]
        },
        events: function() {
            return s.extend({}, o.prototype.events || {}, {
                "click .js-call_list-sort": "callListSort",
                "click .js-call_graph-sort": "graphSort",
                "controls:expanded:off #groups_select": "checkGroupsVisibility"
            })
        },
        _title: function() {
            return AMOCRM.lang.report_title
        },
        construct: function(e) {
            var t = {};
            e && e.response ? this.options = e.response : this.options = AMOCRM.constant("template_params"),
            this.options.js_params && this.options.js_params.is_plug || (this.$button = this.$("#list_more_btn"),
            this.cache = {},
            this.$list_wrapper = i("#js-calls-list"),
            this.$graph_wrapper = this.$el.find(".calls_analytics__wrapper"),
            this.$body = i("body"),
            this.$graph_toggler = this.$el.find(".js-graph-toggler"),
            this.$filter_users_select_list = this.$el.find("#filter_users_select").find("ul"),
            this._$document.on("filter:deserialize:callback" + this.ns, s.bind(this.syncFilter, this)),
            this.filter = this._addComponent(h),
            this.initTable(),
            this.getMaxCount(),
            this.$el.find(".checkboxes_dropdown input").trigger("controls:change"),
            s.each(this.options.reports.by_humans, function(e, i, s) {
                t[i] = e.info.visible
            }),
            this.toggleUsersVisibility(t),
            this.makeAutoLoad(!0))
        },
        destruct: function() {
            this.destroyTable(),
            this.makeAutoLoad(!1)
        },
        callListSort: function(e) {
            this.$button.hasClass("pipeline_leads__load_more-loading") && this.$button.removeClass("pipeline_leads__load_more-loading"),
            this.steady_loader.resume(),
            this.$button.attr("data-current_page", 0),
            this.$button.show(),
            this.sortCallList(i(e.currentTarget).attr("data-sel"))
        },
        graphSort: function(e) {
            this.sortCallGraph(i(e.currentTarget).attr("data-sel"))
        },
        initTable: function() {
            this.$list_scroll_container = this.$list_wrapper.find(".list__table__holder"),
            this.list_header = new a({
                el: i("#list_head")
            }),
            this.hs = new l({
                wrapper: this.$list_scroll_container.parent(),
                scroller: this.$list_scroll_container
            })
        },
        destroyTable: function() {
            this.list_header && this.list_header.destroy(),
            this.hs && this.hs.destroy()
        },
        loadMoreNotes: function(e, t) {
            e = e || {};
            var i;
            i = parseInt(this.$button.attr("data-current_page") || 0, 10) + 1,
            (this.$button.length < 1 || this.$button.hasClass("pipeline_leads__load_more-loading")) && this.steady_loader.stop(),
            this.$button.addClass("pipeline_leads__load_more-loading"),
            this.loadNotes(i, t, s.bind(function(e) {
                this.$button.attr("data-current_page", i),
                e.items.length > this.options.notes_length - 1 ? this.$button.removeClass("pipeline_leads__load_more-loading") : this.$button.hide()
            }, this), !0, this.getCallTypes())
        },
        loadNotes: function(e, t, o, r, a) {
            var l, c = {
                notes_page: e
            };
            r = r || !1,
            d.removeQueryParam("call_type[]"),
            a.forEach(function(e, t) {
                c["call_type[" + t + "]"] = e
            }),
            l = d.setQueryParam(c),
            this.callComponent({
                post_array: {
                    action: "get_notes"
                },
                get_string: l.substr(l.indexOf("?") + 1),
                callback: s.bind(function(a) {
                    a.response && (a = a.response);
                    var l = n({
                        ref: "/tmpl/list/item.twig"
                    })
                      , c = {
                        is_first: !1,
                        is_last: !1,
                        item: {},
                        page: e,
                        fields: a.fields,
                        not_show_chbx: !0
                    }
                      , d = ""
                      , u = i("#list_table")
                      , h = a.items.length - 1;
                    s.each(a.items, function(e, t) {
                        l.is_first = 0 === t,
                        l.is_last = t === h,
                        c.item = e,
                        d += l.render(c)
                    }),
                    r ? u.append(d) : (u.find(".js-list-row").not(".list-row-head").not(".js-list-columns-group").remove(),
                    a.items.length ? (u.append(d),
                    u.removeClass("list__table-no-items").parent().find(".list__no-items").hide()) : u.addClass("list__table-no-items").parent().find(".list__no-items").show()),
                    s.isFunction(t) && t(),
                    s.isFunction(o) && o(a)
                }, this)
            })
        },
        makeAutoLoad: function(e) {
            e ? this.steady_loader = new u({
                conditions: {
                    "max-bottom": 100
                },
                handler: s.bind(this.loadMoreNotes, this)
            }) : this.steady_loader && this.steady_loader.stop()
        },
        checkGroupsVisibility: function() {
            this.cache.groups || (this.cache.groups = {},
            s.each(this.options.groups, function(e, t, i) {
                this.cache.groups[e.id] = e.users
            }, this)),
            this.cache.$filter || (this.cache.$filter = {},
            this.cache.$filter.groups = i(".filter_user_groups").find('input[type="checkbox"]'),
            this.cache.$filter.users = i(".checkboxes_dropdown").find('input[name="filter[main_user][]"]')),
            this.cache.$filter.groups.each(function() {
                var e = this;
                e.checked = !1
            }),
            this.cache.$filter.users.each(function() {
                var e = this;
                e.checked = !1
            });
            var e = this.$("#groups_select").find('input[type="checkbox"]');
            e.each(s.bind(function(e, t) {
                var n = t.checked
                  , o = i(t)
                  , r = o.val()
                  , a = i("#cbx_drop_filter_" + r);
                n && this.cache.groups[r] && s.each(this.cache.groups[r], function(e, t, s) {
                    var o;
                    o = i("#cbx_drop_" + e),
                    o.length && (o[0].checked = n,
                    o.trigger("controls:change"))
                }, this),
                a.length && (a[0].checked = n,
                a.trigger("controls:change"))
            }, this)),
            i("#filter_overlay").remove(),
            this.filter.apply()
        },
        syncFilter: function(e, t) {
            if (0 !== window.location.search.substring(1).length) {
                var n = i("#groups_select").find('input[type="checkbox"]')
                  , o = this.options.filter.all_managers
                  , r = "";
                t["filter[main_user][]"] ? (s.isArray(t["filter[main_user][]"]) || (t["filter[main_user][]"] = [t["filter[main_user][]"]]),
                s.each(t["filter[main_user][]"], function(e) {
                    var t = o["_" + e]
                      , i = "";
                    (0 == t.active || "N" == t.active) && (i = "users_select-disabled_user"),
                    r += '<li class="' + i + ' multiple-suggest__list__item users_select__choosed_item_wrap " data-title="' + t.title + '" data-id="' + t.id + '"><span class="users_select__choosed_item" title="' + t.title + '"><span class="users_select__choosed_item-inner">' + t.title + '</span></span><input type="checkbox" checked="checked" name="filter[main_user][]" id="users_select_' + t.id + '" value="' + t.id + '"></li>'
                })) : s.each(n, function(e) {
                    if (e.checked) {
                        var t = e.value;
                        s.each(this.options.groups[t].users, function(e) {
                            var t = o["_" + e]
                              , i = "";
                            (0 == t.active || "N" == t.active) && (i = "users_select-disabled_user"),
                            r += '<li class="' + i + ' multiple-suggest__list__item users_select__choosed_item_wrap " data-title="' + t.title + '" data-id="' + t.id + '"><span class="users_select__choosed_item" title="' + t.title + '"><span class="users_select__choosed_item-inner">' + t.title + '</span></span><input type="checkbox" checked="checked" name="filter[main_user][]" id="users_select_' + t.id + '" value="' + t.id + '"></li>'
                        })
                    }
                }, this),
                r.length && (i("#filter_users_select").find("ul").html(r).find("input").trigger("controls:change"),
                i("#filter_users_select_managers_holder").addClass("glow"))
            }
        },
        sortCallList: function(e) {
            this.cache.$call_type_checkboxes || (this.cache.$call_type_checkboxes = {
                inbound: i("#cbx_drop_inbound"),
                outbound: i("#cbx_drop_outbound")
            }),
            this.cache.$call_type_checkboxes.inbound[0].checked = !1,
            this.cache.$call_type_checkboxes.outbound[0].checked = !1,
            ("all" === e || "inbound" === e) && (this.cache.$call_type_checkboxes.inbound[0].checked = !0),
            ("all" === e || "outbound" === e) && (this.cache.$call_type_checkboxes.outbound[0].checked = !0),
            this.$table_overlay = i('<div class="default-overlay calls-report-table-overlay" id="table_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            i("#list_table").append(this.$table_overlay),
            this.$table_overlay.trigger("overlay:show"),
            this.loadNotes(0, s.bind(function() {
                this.$table_overlay.trigger("overlay:hide"),
                this.$table_overlay.remove()
            }, this), null, !1, this.getCallTypes())
        },
        getCallTypes: function() {
            if (!this.cache.$call_type_checkboxes)
                return [];
            var e = [];
            return this.cache.$call_type_checkboxes.inbound[0].checked === !0 && e.push(this.cache.$call_type_checkboxes.inbound.val()),
            this.cache.$call_type_checkboxes.outbound[0].checked === !0 && e.push(this.cache.$call_type_checkboxes.outbound.val()),
            e
        },
        sortCallGraph: function(e) {
            var t = this.$el.find(".js-call-value")
              , s = this.$el.find(".js-total_calls-text");
            e = e || this.$graph_toggler.find(".control-toggler__item-selected").attr("data-sel"),
            s.text(s.attr("data-" + e) + " "),
            t.each(function() {
                var t = i(this);
                t.text(t.attr("data-" + e))
            }),
            this.getMaxCount(e)
        },
        checkChosenSort: function(e) {
            var t = this.$el.find(".control-toggler__item-selected");
            return "undefined" == typeof e && (e = t.attr("data-sel")),
            e
        },
        getMaxCount: function(e) {
            var t = this
              , s = 0;
            t.checkChosenSort(e),
            t.$graph_wrapper.each(function() {
                var e, t = i(this), n = t.find(".js-all-calls-amount").text();
                t.hasClass("in_total") || (e = parseInt(n),
                e > s && (s = n))
            }),
            this.changeGraphWidth(s, e)
        },
        changeGraphWidth: function(e, t) {
            var s = this;
            s.$graph_wrapper.each(function() {
                var s, n, o, r = i(this), a = r.find(".calls_analytics__calls_graph__incoming"), l = a.text(), d = r.find(".calls_analytics__calls_graph__outgoing"), u = d.text(), h = r.find(".js-all-calls-amount"), _ = h.text(), p = r.find(".js-total_duration"), m = 47, f = 12, g = "", b = "";
                r.hasClass("in_total") ? (n = 83 * l / _,
                o = 83 * u / _) : (n = 83 * l / e,
                o = 83 * u / e),
                a.css("width", n + "%"),
                d.css("width", o + "%"),
                "by_duration" == t ? (g = 1 > l / 600 ? 57 : m + 10 * ("" + Math.floor(l / 600)).length,
                a.css("min-width", g + "px").find(".calls_amount_value").text(c.time(l)),
                b = 1 > u / 600 ? 57 : m + 10 * ("" + Math.floor(u / 600)).length,
                d.css("min-width", b + "px").find(".calls_amount_value").text(c.time(u)),
                _.indexOf(":") < 0 && h.text(c.time(_))) : (g = f + 10 * l.length,
                a.css("min-width", g + "px"),
                b = f + 10 * u.length,
                d.css("min-width", b + "px"),
                s = p.text(),
                s.indexOf(":") < 0 && p.text(c.time(s)))
            })
        },
        changeGraphData: function(e, t, s) {
            var n, o, r, a, l = this, c = this.$graph_wrapper.filter("." + e);
            c.length && (this.cache.graph_data || (this.cache.graph_data = {}),
            o = c.find("span.js-inbound"),
            r = c.find("span.js-outbound"),
            a = c.find(".js-total"),
            n = {
                inbound: {
                    count: o.data("by_count"),
                    duration: o.data("by_duration")
                },
                outbound: {
                    count: r.data("by_count"),
                    duration: r.data("by_duration")
                },
                total: {}
            },
            this.cache.graph_data[e] || (this.cache.graph_data[e] = n),
            t = t === !1 ? this.cache.graph_data[e] : i.extend(!0, n, t),
            t.total = {
                count: t.inbound.count + t.outbound.count,
                duration: t.inbound.duration + t.outbound.duration
            },
            o.attr("data-by_count", t.inbound.count),
            o.attr("data-by_duration", t.inbound.duration),
            r.attr("data-by_count", t.outbound.count),
            r.attr("data-by_duration", t.outbound.duration),
            a.attr("data-by_count", t.total.count),
            a.attr("data-by_duration", t.total.duration),
            s && (l.getMaxCount(),
            l.sortCallGraph()))
        },
        callComponent: function(e) {
            var t = "/ajax/stats/calls/?"
              , n = "";
            e = i.extend(!0, {
                get_string: "",
                get_array: {},
                post_array: {},
                callback: function(e) {}
            }, e),
            s.each(e.get_array, function(e, t) {
                n += t + "=" + e + "&"
            }),
            "" !== n && (t += n),
            "" !== e.get_string && (t += e.get_string),
            i.post(t, e.post_array, function(t) {
                "function" == typeof e.callback && e.callback(t)
            })
        },
        toggleUsersVisibility: function(e) {
            var t = this.$(".js-user-wrapper");
            return !e || i.isEmptyObject(e) ? void t.css("display", "table") : void t.each(function() {
                var t = i(this);
                e[t.data("id")] ? t.css("display", "table") : t.hide()
            })
        }
    })
}),
define("lib/pages/reports/goals", ["require", "jquery", "lib/core/page", "lib/components/filter/filter", "lib/common/urlparams"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/core/page"), n = e("lib/components/filter/filter"), o = e("lib/common/urlparams");
    return t = s.extend({
        endpoint: "/ajax/stats/goals/",
        template: "/tmpl/analytics/goals/index.twig",
        preload: ["/tmpl/analytics/goals/plugs/empty.twig"],
        overlay_class_name: "aside-page-overlay",
        transition: {
            animation_time: 1,
            delay: .5
        },
        overlayContainer: function() {
            return i("#page_holder")
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        _selectors: function() {
            return {
                users_wrapper: "#users_wrapper"
            }
        },
        _classes: function() {
            return {
                user_item: "goals_report__statistics_item",
                user_line: "goals_report__statistics__fill_line",
                filter_groups: "js-filter-groups-select",
                groups: "js-groups-select",
                type_leads_price: "type_leads_price",
                type_leads_count: "type_leads_count",
                statistics_line: "goals_report__statistics__line",
                statistics_goals_sum: "goals_report__statistics__goal_sum",
                statistics_goals_right_sum: "goals_report__statistics__right_goals"
            }
        },
        _getEndpoint: function(e) {
            var t = e[0]
              , i = o.getQueryString() ? "?" + o.getQueryString() : "";
            return this.endpoint + (t ? t + "/" + i : i)
        },
        events: function() {
            return _.extend({}, s.prototype.events || {}, {
                "click .js-graph-toggler": "toggleGoalType",
                "controls:expanded:off .js-groups-select": "applyFilterGroups",
                "controls:wrapper:change .js-groups-select": "applyFilterGroups"
            })
        },
        construct: function(e) {
            this.initParams(e),
            this.params.is_plug || (this.filter = this._addComponent(n, {
                el: i("#sidebar"),
                _report_type: "goals"
            }),
            this.initConstants(),
            this.initCache(),
            this.syncViewFilterGroups(!0),
            this.$(".goals_report__statistics__fill_line").on(AMOCRM.transition_event, _.bind(function(e) {
                this.changeGoalPosition(e)
            }, this)),
            setTimeout(_.bind(function() {
                this.$(this._selector("statistics_line")).css(Modernizr.prefixed("transition"), "width " + this.transition.animation_time + "s ease-out " + this.transition.delay + "s"),
                this.applyGoalType(this.params.current_goal_type)
            }, this), 1e3 * this.transition.delay))
        },
        initParams: function(e) {
            this.params = _.extend({
                current_goal_type: "leads_price",
                goal_types: ["leads_price", "leads_count"],
                is_plug: !1
            }, e.response ? e.response.js_params : AMOCRM.constant("report_goals_template_params"))
        },
        initConstants: function() {
            this.constants = {
                prefix: {
                    users_wrapper_type: "type_",
                    user_item_status: "status-",
                    goal_line_width: "width-"
                },
                templates: {}
            }
        },
        initCache: function() {
            var e = this;
            this.cache = {
                $users: {},
                $user_lines: {}
            },
            this._elem("users_wrapper").find(this._selector("user_item")).each(function() {
                var t = i(this);
                e.cache.$users[t.data("user_id")] = t,
                e.cache.$user_lines[t.data("user_id")] = t.find(e._selector("user_line"))
            })
        },
        setGoalType: function(e) {
            var t = !1;
            return _.each(this.getGoalTypes(), function(i) {
                e == i && (t = !0)
            }),
            t ? e === this.getGoalType() ? !1 : (this.params.current_goal_type = e,
            !0) : !1
        },
        getGoalType: function() {
            return this.params.current_goal_type
        },
        getGoalTypes: function() {
            return this.params.goal_types
        },
        toggleGoalType: function(e) {
            var t = i(e.target).data("sel") || e;
            this.setGoalType(t) && this.applyGoalType(this.getGoalType())
        },
        applyFilterGroups: function() {
            this.syncViewFilterGroups(!1),
            i("#filter_users_select_managers_holder").find(".js-filter-field-clear").trigger("click"),
            this.filter.apply()
        },
        applyGoalType: function(e) {
            var t, i, s = this.getGoalTypes(), n = [];
            _.each(s, function(t) {
                e != t && n.push(t),
                this._elem("users_wrapper").removeClass(this.constants.prefix.users_wrapper_type + t)
            }, this),
            this._addClass(this.constants.prefix.users_wrapper_type + e, "users_wrapper"),
            this.filter.form.$el.attr("action", "/stats/goals/" + e + "/"),
            _.each(this.cache.$users, function(s, o) {
                _.each(n, function(e) {
                    s.removeClass(s.data(this.constants.prefix.user_item_status + e))
                }, this),
                s.addClass(s.data(this.constants.prefix.user_item_status + e)),
                this.cache.$user_lines[o] && (i = this.cache.$user_lines[o].data(this.constants.prefix.goal_line_width + e),
                t = this.cache.$user_lines[o].attr("style"),
                "undefined" != typeof t && (t = t.match(/\d{1,}/)[0]),
                this.cache.$user_lines[o].find(this._selector("statistics_goals_sum")).css("opacity", 0),
                this.cache.$user_lines[o].css("width", i + "%"))
            }, this)
        },
        changeGoalPosition: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(this._selector("statistics_line"))
              , n = this.$(".js-graph-toggler .control-toggler__item-selected").data("sel")
              , o = this.$(this._selector("statistics_line")).width()
              , r = t.width() + t.find(".goals_report__statistics__sum." + n).width();
            i(e.target).hasClass("goals_report__statistics__fill_line") && (r >= o ? (t.find(this._selector("statistics_goals_sum")).css("opacity", 0),
            t.find(this._selector("statistics_goals_sum") + "." + n).css("opacity", 1),
            s.find(this._selector("statistics_goals_right_sum") + " " + this._selector("statistics_goals_sum")).css("opacity", 0)) : (t.find(this._selector("statistics_goals_sum")).css("opacity", 0),
            s.find(this._selector("statistics_goals_right_sum") + " " + this._selector("statistics_goals_sum")).css("opacity", "")))
        },
        syncViewFilterGroups: function(e) {
            var t = e ? this._elem("filter_groups") : this._elem("groups")
              , i = e ? this._elem("groups") : this._elem("filter_groups");
            t.find('input[type="checkbox"]').each(function() {
                var t = e ? "group_" + this.value : this.value.replace("group_", "")
                  , s = i.find('input[value="' + t + '"]').get(0);
                s && (s.checked = this.checked)
            }),
            i.find('input[type="checkbox"]').last().trigger("controls:change");
        }
    })
}),
define("lib/pages/settings/goals", ["require", "jquery", "twig", "lib/core/page", "lib/common/fn", "lib/components/base/form", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t, i, s = e("jquery"), n = e("twig"), o = e("lib/core/page"), r = e("lib/common/fn"), a = e("lib/components/base/form"), l = e("lib/components/base/confirm");
    return i = a.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            s.ajax({
                url: "/ajax/stats/goals/settings/",
                type: "POST",
                dataType: "json",
                data: _.extend({
                    action: "save"
                }, this.toJSON())
            }).always(_.bind(function() {
                this.is_saving = !1
            }, this)).done(_.bind(function(t) {
                "success" === t.state ? e.success.call(this, t) : e.error.call(this)
            }, this)).fail(_.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    t = o.extend({
        endpoint: "/ajax/stats/goals/settings/",
        template: "/tmpl/settings/goals/index.twig",
        preload: ["/tmpl/settings/goals/groups.twig"],
        overlay_class_name: "aside-page-overlay",
        overlayContainer: function() {
            return s("#page_holder")
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        _selectors: function() {
            return {
                current_period: "#current_period",
                state_switcher: "#state_switcher",
                goals_settings_wrapper: "#goals_settings_wrapper",
                goals_wrapper: "#goals_wrapper",
                select_period: "#select_period",
                total_goals: "#total_goals",
                cancel_btn: ".js-settings-cancel",
                save_btn: ".js-settings-save",
                to_report_btn: ".js-goal-to-report"
            }
        },
        _classes: function() {
            return {
                disabled: "disabled",
                hidden: "hidden",
                not_empty: "not_empty",
                groups_wrapper: "groups_wrapper",
                user_wrapper: "goals_settings__group__user",
                goal_input_wrapper: "goals_settings__group__user__input",
                user_input: "js-control-sum"
            }
        },
        events: function() {
            return _.extend({}, o.prototype.events || {}, {
                "click #button_next_period": "nextPeriod",
                "click #button_prev_period": "prevPeriod",
                "controls:change #select_period": "selectPeriodType",
                "click .js-settings-cancel": "revertChanges",
                "click .js-settings-save": "saveChanges",
                "input .js-control-sum": "holdInput",
                "change .js-control-sum": "holdInput",
                "input .js-control-group-sum": "holdInputGroups",
                "change .js-control-group-sum": "holdInputGroups",
                "click .js-goal-clear": "clearInput"
            })
        },
        construct: function(e) {
            this.initConstants(),
            this.initParams(e),
            this.params.type && "plug" == this.params.type || (this.initialRender(),
            this.initPageChange(),
            this.initFormWatch())
        },
        destruct: function() {
            AMOCRM.router.removePreventConfig()
        },
        initParams: function(e) {
            this["default"] = {
                template: {
                    controls: {
                        users_input: {
                            leads_price: {
                                template: {}
                            },
                            leads_count: {
                                template: {}
                            }
                        },
                        groups_input: {
                            leads_price: {
                                template: {}
                            },
                            leads_count: {
                                template: {}
                            }
                        }
                    }
                },
                params: {}
            },
            this.params = _.extend({
                current_period: {
                    date: Math.round((new Date).getTime() / 1e3),
                    type: 1,
                    length: 1
                },
                periods: {
                    length: {
                        1: 1,
                        2: 3,
                        3: 12
                    },
                    date: {
                        1: 0,
                        2: 0,
                        3: 0
                    }
                },
                goal_types: {
                    1: "leads_price",
                    2: "leads_count"
                },
                goals_state: !1,
                goals_state_real: !1,
                goals: {},
                users: {},
                groups: {},
                template: {
                    type: !1,
                    controls: this["default"].template.controls
                }
            }, e.response ? e.response : AMOCRM.constant("settings_goals_template_params")),
            this.recountTotal(),
            this.applyTotal(),
            this["default"].params = s.extend(!0, {}, this.params),
            _.each(this.params.goal_types, function(e) {
                this.params.template.controls.users_input && (this["default"].template.controls.users_input[e].template = s.extend({}, this.params.template.controls.users_input[e].template)),
                this.params.template.controls.groups_input && (this["default"].template.controls.groups_input[e].template = s.extend({}, this.params.template.controls.groups_input[e].template))
            }, this)
        },
        initConstants: function() {
            this.constants = {
                templates: {
                    goals: "/tmpl/settings/goals/groups.twig"
                }
            }
        },
        initPageChange: function() {
            AMOCRM.router.registerPreventConfig({
                accept: _.bind(function(e) {
                    _.isFunction(e) && e()
                }, this),
                decline: function() {}
            })
        },
        initFormWatch: function() {
            this.changes = {
                has_changes: !1,
                can_save: !1
            },
            this.form = this._addComponent(a.View, {
                model: i,
                el: s("#goals_settings__form"),
                onSaveForm: _.bind(function() {
                    this.params.goals_state_real = this.params.goals_state,
                    this.initParams({
                        response: this.params
                    }),
                    this._elem("save_btn").trigger("button:saved")
                }, this),
                onSaveError: function() {}
            }),
            this.form.model.on("has_changes", _.bind(function() {
                this.applyChanges(!0)
            }, this)).on("has_reverted", _.bind(function() {
                this.applyChanges(!1)
            }, this))
        },
        addPeriod: function(e) {
            var t = new Date(1e3 * this.params.current_period.date)
              , i = this.params.periods.length[this.getPeriodType()]
              , s = new Date(new Date(t).setMonth(t.getMonth() + e * i))
              , n = Math.round(s.getTime() / 1e3);
            n < this.params.periods.date[this.getPeriodType()] || (this.params.goals[n] || this.addPeriodData(s),
            this.params.current_period.date = Math.round(s.getTime() / 1e3),
            this.recountTotal())
        },
        setPeriodType: function(e) {
            return this.params.periods.length[e] ? e == this.getPeriodType() ? !1 : (this.params.current_period.date = this.params.periods.date[e],
            this.params.current_period.type = e,
            this.params.current_period.length = this.params.periods.length[e],
            !0) : !1
        },
        getPeriodType: function(e) {
            return e === !0 ? this["default"].params.current_period.type : this.params.current_period.type
        },
        fillInitData: function() {
            return this.getPeriodType() == this.getPeriodType(!0) ? void (this.params = s.extend(!0, {}, this["default"].params)) : (this.params.goals = {},
            this.params.template.controls = s.extend({}, this["default"].template.controls),
            this.addPeriodData(new Date(1e3 * this.params.current_period.date)),
            void this.recountTotal())
        },
        addPeriodData: function(e) {
            var t, i, s, n, o, r, a, l = {};
            t = this.formatDate(e),
            e = Math.round(e / 1e3),
            this.params.goals[e] || (n = Object.keys(this.params.goals),
            n.length > 0 && (l = this.params.goals[n[n.length - 1]]),
            _.each(this.params.goal_types, function(n) {
                _.each(this.params.groups, function(e, t) {
                    i = 0,
                    a = this.params.groups[t].users,
                    _.each(a, function(e) {
                        l[n] && l[n][e] && (i += l[n][e])
                    }),
                    this.setGoalForGroup(n, t, i),
                    o = this.params.template.controls.groups_input[n].template.additional_data.replace("#group_id#", t),
                    r = this.params.template.controls.groups_input[n].template.class_name.replace("#group_id#", t),
                    s = this.params.template.controls.groups_input[n].template.name.replace("group_id", t),
                    this.params.template.controls.groups_input[n][t] = _.extend({}, this.params.template.controls.groups_input[n].template, {
                        additional_data: o,
                        class_name: r,
                        value: i,
                        name: s
                    })
                }, this),
                _.each(this.params.users, function(o, r) {
                    i = "",
                    l[n] && l[n][r] && (i = l[n][r]),
                    s = this.params.template.controls.users_input[n].template.name.replace("date", t).replace("user_id", r),
                    this.setGoalForUser(e, n, r, i),
                    this.params.template.controls.users_input[n][r] || (this.params.template.controls.users_input[n][r] = {}),
                    this.params.template.controls.users_input[n][r][e] = _.extend({}, this.params.template.controls.users_input[n].template, {
                        value: i,
                        name: s
                    })
                }, this)
            }, this))
        },
        setGoalForUser: function(e, t, i, s) {
            var n, o = this.getGoalForUser(e, t, i);
            this.params.goals || (this.params.goals = {}),
            this.params.goals[e] || (this.params.goals[e] = {}),
            this.params.goals[e][t] || (this.params.goals[e][t] = {}),
            o = this.parseFloat(o),
            s = this.parseFloat(s),
            this.params.goals[e][t][i] = s,
            n = 0,
            this.params.users[i] && this.params.users[i].group_id && (n = this.params.users[i].group_id),
            this.params.current_period.total[n][t] += s - o,
            this.params.current_period.total.total[t] += s - o
        },
        getGoalForUser: function(e, t, i) {
            return this.params.goals && this.params.goals[e] && this.params.goals[e][t] ? this.params.goals[e][t][i] ? this.params.goals[e][t][i] : 0 : !1
        },
        setGoalForGroup: function(e, t, i) {
            var s, n, o, r = this.params.current_period.date;
            this.params.groups[t] && this.params.groups[t].users && (s = this.params.groups[t].users.length,
            i = parseInt(i, 10),
            o = Math.floor(i / s),
            n = i - o * s,
            _.each(this.params.groups[t].users, function(t) {
                this.setGoalForUser(r, e, t, o + n),
                n = 0
            }, this))
        },
        getGoalForGroup: function(e, t) {
            return this.params.current_period && this.params.current_period.total && this.params.current_period.total[t] ? this.params.current_period.total[t][e] ? this.params.current_period.total[t][e] : 0 : !1
        },
        recountTotal: function() {
            var e, t, i = this.params.current_period.date, s = {
                leads_price: 0,
                leads_count: 0
            };
            this.params.current_period.total = {
                total: _.extend({}, s)
            },
            _.each(this.params.goal_types, function(n) {
                _.each(this.params.goals[i][n], function(i, o) {
                    t = 0,
                    this.params.users[o] && this.params.users[o].group_id && (t = this.params.users[o].group_id),
                    this.params.current_period.total[t] || (this.params.current_period.total[t] = _.extend({}, s)),
                    (e = this.parseFloat(i)) && (this.params.current_period.total[t][n] += e,
                    this.params.current_period.total.total[n] += e)
                }, this)
            }, this)
        },
        nextPeriod: function() {
            this.addPeriod(1),
            this.applyPeriod()
        },
        prevPeriod: function() {
            this.addPeriod(-1),
            this.applyPeriod()
        },
        selectPeriodType: function(e) {
            var t = this
              , i = e.target.value;
            if (this.revert_in_progress !== !0)
                return i == this.getPeriodType() ? void this.applyPeriodType(i) : void new l({
                    text: AMOCRM.lang.modal.confirm.period_change,
                    accept: function() {
                        this.modal.destroy(),
                        t.applyPeriodType(i)
                    },
                    destroy: function() {
                        this.accepted || t._elem("select_period").val(t.getPeriodType()).trigger("controls:change")
                    }
                })
        },
        applyPeriodType: function(e, t) {
            (this.setPeriodType(e) || t) && (this._elem("select_period").val(this.getPeriodType()).trigger("controls:change"),
            this.fillInitData(),
            this.clearGoals(),
            this.getPeriodType() == this.getPeriodType(!0) && this.applyChanges(!1))
        },
        revertChanges: function() {
            this.revert_in_progress = !0,
            this.applyPeriodType(this.getPeriodType(!0), !0),
            this.form.revert(),
            this.revert_in_progress = !1,
            this.applyChanges(!1)
        },
        saveChanges: function() {
            this.changes.can_save && (this._elem("save_btn").trigger("button:load:start"),
            this.form.save())
        },
        holdInput: function(e) {
            var t = s(e.target)
              , i = t.data("goal_type")
              , n = t.closest(this._selector("groups_wrapper")).data("date")
              , o = t.closest(this._selector("goal_input_wrapper"))
              , r = t.closest(this._selector("user_wrapper")).data("user_id")
              , a = t.val();
            this.setGoalForUser(n, i, r, a),
            this.applyTotal(),
            a = this.getGoalForUser(n, i, r),
            o.toggleClass(this._class("not_empty"), a !== !1 && a > 0)
        },
        holdInputGroups: function(e) {
            var t = s(e.target)
              , i = t.data("goal_type")
              , n = t.data("group_id")
              , o = (t.closest(this._selector("groups_wrapper")).data("date"),
            t.closest(this._selector("goal_input_wrapper")))
              , r = t.val();
            this.setGoalForGroup(i, n, r),
            this.applyGroup(i, n),
            r = this.getGoalForGroup(i, n),
            o.toggleClass(this._class("not_empty"), r !== !1 && r > 0)
        },
        clearInput: function(e) {
            var t = s(e.target).closest(this._selector("goal_input_wrapper")).find("input");
            t.val("").trigger("change")
        },
        initialRender: function() {
            this.applyPeriod()
        },
        clearGoals: function() {
            var e = "";
            _.each(this.params.goals, function(t, i) {
                e += n({
                    ref: this.constants.templates.goals
                }).render(_.extend({}, this.params, {
                    date: i
                }))
            }, this),
            this._elem("goals_wrapper").html(e),
            this.applyPeriod(),
            this.revert_in_progress !== !0 && this._elem("goals_wrapper").find("input").trigger("change"),
            this.form.checkChanges(),
            this._dropElemCache("groups_wrapper")
        },
        appendGoals: function(e) {
            var t, i;
            return this.params.goals[e] ? (t = n({
                ref: this.constants.templates.goals
            }).render(_.extend({}, this.params, {
                date: e
            })),
            i = s(t),
            this._elem("goals_wrapper").append(i),
            i.find("input").trigger("change"),
            this.form.checkChanges(),
            this._dropElemCache("groups_wrapper"),
            !0) : !1
        },
        applyPeriod: function() {
            var e = new Date(1e3 * this.params.current_period.date)
              , t = this.params.current_period.length
              , i = new Date(new Date(e).setMonth(e.getMonth() + t - 1))
              , s = this.getCurrentGoalsWrapper();
            this.applyPeriodText(e, t, i),
            this.applyTotal(),
            this._addClass("hidden", "groups_wrapper"),
            s.length || this.appendGoals(this.params.current_period.date),
            s.removeClass(this._class("hidden"))
        },
        applyPeriodText: function(e, t, i) {
            var s = this.getMonthName(e.getMonth() + 1)
              , n = this.getMonthName(i.getMonth() + 1)
              , o = e.getFullYear()
              , r = "";
            r = 3 > t ? s + ", " + o : 12 > t ? AMOCRM.lang.calculations.quarter + Math.ceil((i.getMonth() + 1) / 3) + ", " + o + " (" + s + "-" + n + ")" : o,
            this._elem("current_period").text(r)
        },
        applyChanges: function(e) {
            var t = this;
            this.revert_in_progress !== !0 && (this.changes.has_changes = e || !1,
            AMOCRM.router.preventPageChange(this.changes.has_changes),
            this.changes.can_save = this.changes.has_changes,
            this.params.goals_state = !!this.form.model.get("state"),
            this["default"].params.goals_state ? !this.params.goals_state && this["default"].params.goals_state_real && new l({
                text: AMOCRM.lang.modal.confirm.state_change,
                accept: function() {
                    this.modal.destroy()
                },
                destroy: function() {
                    this.accepted || (t._elem("state_switcher").get(0).checked = !0,
                    t._elem("state_switcher").trigger("controls:change"))
                }
            }) : this.changes.can_save = this.params.goals_state,
            this.params.goals_state ? (this._removeClass("disabled", "goals_wrapper").find("input").removeAttr("disabled"),
            this._elem("goals_settings_wrapper").removeClass("goals_disabled")) : (this._addClass("disabled", "goals_wrapper").find("input").attr("disabled", "disabled"),
            this._elem("goals_settings_wrapper").addClass("goals_disabled")),
            this.changes.can_save ? (this._elem("cancel_btn").css("display", "inline-block"),
            this._elem("save_btn").trigger("button:save:enable"),
            this._elem("to_report_btn").css("display", "none")) : (this._elem("cancel_btn").css("display", "none"),
            this._elem("save_btn").trigger("button:save:disable"),
            this._elem("to_report_btn").css("display", "inline-block")))
        },
        applyTotal: function() {
            var e;
            _.each(this.params.goal_types, function(t) {
                _.each(this.params.groups, function(i, s) {
                    this.params.current_period.total[s] && (e = this.params.current_period.total[s][t],
                    e || (e = ""),
                    this.getCurrentGoalsWrapper().find(".js-group-" + s + ".js-control-group-sum-" + t).val(e))
                }, this),
                e = this.params.current_period.total.total[t] || 0,
                "leads_price" == t && (e = r.currency(e, !1, 0)),
                this._elem("total_goals").find(".js-groups-totals.js-goal-total-" + t).text(e)
            }, this)
        },
        applyGroup: function(e, t) {
            var i, n, o, r, a = this, l = this._selector("user_input") + "-" + e, c = this.getCurrentGoalsWrapper(), d = c.data("date"), u = c.find(".js-group-" + t + "-wrapper " + this._selector("user_wrapper"));
            u.each(function() {
                o = s(this),
                r = o.find(l),
                n = o.data("user_id"),
                i = a.getGoalForUser(d, e, n),
                i || (i = ""),
                r.val(i)
            }),
            u.find("input").trigger("change")
        },
        getCurrentGoalsWrapper: function() {
            return s("#goals_for_" + this.params.current_period.date)
        },
        getMonthName: function(e) {
            return AMOCRM.lang.calculations.months || (AMOCRM.lang.calculations.months = {}),
            AMOCRM.lang.calculations.months[e] || e
        },
        formatDate: function(e) {
            var t = e.getDate()
              , i = e.getMonth() + 1;
            return 10 > t && (t = "0" + t),
            10 > i && (i = "0" + i),
            t + "-" + i + "-" + e.getFullYear()
        },
        parseFloat: function(e) {
            return e ? (e = parseFloat(e),
            e ? e : 0) : 0
        }
    })
}),
define("lib/pages/settings/settings", ["require", "jquery", "underscore", "FileAPI", "lib/core/page", "lib/components/base/form", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("FileAPI"),
    e("lib/core/page")), o = e("lib/components/base/form"), r = e("lib/components/base/modal");
    return t = n.extend({
        endpoint: "/ajax/settings/index/",
        template: "/tmpl/settings/account.twig",
        overlay_class_name: "aside-page-overlay",
        _selectors: function() {
            return {
                save_btn: ".js-settings-save",
                cancel_btn: ".button-cancel"
            }
        },
        events: {
            "click #save_account_settings": "saveClick",
            "keyup #account_address": "checkAddress",
            "blur #account_address": "checkAddress",
            "click .button-cancel": "cancelClick",
            "change .countries_list": "countryChange"
        },
        construct: function(e) {
            e = e && e.response && e.response.params ? e.response.params : AMOCRM.constant("settings_params") ? AMOCRM.constant("settings_params").params : {},
            this.options = e,
            this.initForm()
        },
        destruct: function() {
            AMOCRM.router.removePreventConfig(),
            AMOCRM.router.preventPageChange(!1)
        },
        saveClick: function() {
            this.save()
        },
        checkAddress: function(e) {
            var t = i(e.currentTarget)
              , s = t.val().replace(/[^a-z0-9]+/, "")
              , n = i("#account-address-error");
            return t.val() != s && (t.val(s),
            n.hasClass("has-error") || n.addClass("has-error").fadeIn(100, function() {
                var e = setTimeout(function() {
                    clearTimeout(e),
                    n.removeClass("has-error").fadeOut(100)
                }, 2500)
            })),
            !1
        },
        cancelClick: function(e) {
            e.preventDefault(),
            this.form.revert(),
            this.setChanges(!1)
        },
        save: function(e) {
            var t = this
              , n = i("#currency_format_id")
              , o = i("#time_format_id")
              , r = i("#date_format_id")
              , a = i("#countries_list_id");
            this.has_changes && !this.saving && (this.saving = !0,
            this._elem("save_btn").trigger("button:load:start"),
            i.ajax({
                url: "/ajax/settings/",
                data: t.form.model.toJSON(),
                type: "POST",
                dataType: "json"
            }).always(s.bind(function() {
                this.saving = !1
            }, this)).done(s.bind(function(t) {
                t.response.params.errors && s.keys(t.response.params.errors).length ? this.showErrors(t.response.params.errors, t.response.lang.errors) : (i("input#PERSONAL_PHOTO_del").prop("checked", !1).trigger("change"),
                this.saved(),
                t.response.params.redirect ? window.location.href = t.response.params.redirect : (a.val() !== a.data("prev-value") || o.val() !== o.data("prev-value") || r.val() !== r.data("prev-value") || n.val() !== n.data("prev-value")) && window.location.reload(),
                s.isFunction(e) && e())
            }, this)).fail(s.bind(function() {
                this.showErrors("")
            }, this)))
        },
        initForm: function() {
            AMOCRM.router.registerPreventConfig({
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_cancel,
                accept: s.bind(function(e) {
                    this.save(function() {
                        e()
                    })
                }, this),
                decline: function() {}
            }),
            this.form = this._addComponent(o.View, {
                el: this.$el
            }),
            this.form.model.on("has_changes", s.bind(function() {
                this.setChanges(!0)
            }, this)).on("has_reverted", s.bind(function() {
                this.setChanges(!1)
            }, this)),
            this.setChanges(!1)
        },
        setChanges: function(e) {
            this.has_changes = e,
            this.has_changes ? (this._elem("cancel_btn").css("display", "inline-block"),
            this._elem("save_btn").trigger("button:save:enable")) : (this._elem("cancel_btn").css("display", "none"),
            this._elem("save_btn").trigger("button:save:disable")),
            AMOCRM.router.preventPageChange(e)
        },
        showErrors: function(e, t) {
            var i = this
              , n = !0;
            (s.isString(e) || e && s.keys(e).length) && (s.isObject(e) && (n = !1,
            e = s.map(e, function(e, i) {
                return t[i] + ": " + e.join(", ")
            }).join("<br>")),
            new r({
                centrify_animation: !0,
                init: function() {
                    this.showError(e, n),
                    this.$modal.one("click", ".js-modal-try-again", s.bind(function() {
                        this.destroy(),
                        i.save()
                    }, this))
                },
                destroy: function() {}
            }),
            this.saved(!1))
        },
        saved: function(e) {
            e !== !1 ? (this._elem("save_btn").trigger("button:saved", [s.bind(function() {
                this.has_changes && this._elem("save_btn").trigger("button:save:enable")
            }, this)]),
            this.form.model.updateDefaults(),
            AMOCRM.router.preventPageChange(!1)) : this._elem("save_btn").trigger("button:load:stop")
        },
        countryChange: function() {
            var e = i("#countries_list_id").val()
              , t = this.options.countries[e]
              , s = t.date_format
              , n = t.time_format
              , o = t.currency;
            i("#date_format_id").val(s).trigger("controls:change:visual").trigger("change"),
            i("#time_format_id").val(n).trigger("controls:change:visual").trigger("change"),
            i("#currency_format_id").val(o).trigger("controls:change:visual").trigger("change")
        }
    })
}),
define("lib/pages/settings/profile", ["require", "jquery", "lib/core/page", "lib/pages/settings/settings", "lib/common/urlparams", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/core/page"), n = e("lib/pages/settings/settings"), o = e("lib/common/urlparams"), r = (e("lib/common/fn"),
    e("lib/core/users")), a = "/frontend/images/interface/i/userpic_demo.png";
    return t = n.extend({
        endpoint: "/ajax/settings/profile/",
        template: "/tmpl/settings/profile.twig",
        overlay_class_name: s.prototype.overlay_class_name,
        _selectors: function() {
            return {
                delete_photo: "#PERSONAL_PHOTO_del",
                dnd_photo: "#profile_dnd_photo",
                photo_spinner: "#spinner-profile",
                save_btn: "#save_profile_settings",
                cancel_btn: ".button-cancel",
                big_avatar: ".user_profile__photo",
                user_hash_wrapper: ".js-user_profile__data__api_hash",
                user_id_wrapper: ".js-user_profile__data__id"
            }
        },
        events: function() {
            return _.extend({}, n.prototype.events, {
                "click #save_profile_settings": "saveClick"
            })
        },
        construct: function() {
            n.prototype.construct.apply(this, arguments),
            this.setupFileHandler()
        },
        destruct: function() {
            FileAPI.event.off(document.getElementById("choose"), "change"),
            FileAPI.event.dnd.off(window),
            n.prototype.destruct.apply(this, arguments)
        },
        saveClick: function() {
            this.save()
        },
        save: function(e) {
            this._elem("save_btn").trigger("button:load:start"),
            i.ajax({
                url: "/ajax/settings/profile/",
                data: this.form.model.toJSON(),
                type: "POST"
            }).always(_.bind(function() {
                this._elem("save_btn").trigger("button:load:stop")
            }, this)).done(_.bind(function(e) {
                var t = AMOCRM.constant("user");
                e.response.params.arUser && e.response.params.arUser.password_hash && e.response.params.arUser.unsorted_api_key && (this._elem("user_hash_wrapper").text(e.response.params.arUser.password_hash),
                this._elem("user_id_wrapper").text(r.current("id")),
                AMOCRM.constant("unsorted_token", e.response.params.arUser.unsorted_api_key),
                AMOCRM.constant("amomail").auth_token = e.response.params.arUser.amomail_api_key),
                e.response.params.arUser && (t.personal_mobile = e.response.params.arUser.personal_mobile,
                t.api_key = e.response.params.arUser.password_hash,
                AMOCRM.constant("user", t),
                AMOCRM.widgets.clear_cache()),
                e.response.params.errors && _.keys(e.response.params.errors).length ? this.showErrors(e.response.params.errors, e.response.lang.errors) : (this._elem("delete_photo").prop("checked", !1).trigger("change"),
                this.saved(),
                this.setAvatarSrc(e.response.params.arUser.personal_photo_file.length > 0 ? e.response.params.arUser.personal_photo_file : a),
                e.response.params.selected_lang !== AMOCRM.lang_id && location.reload())
            }, this))
        },
        setAvatarSrc: function(e) {
            var t = i("#left_menu")
              , s = e;
            e ? this.$(this._selector("big_avatar")).show() : (e = a,
            this.$(this._selector("big_avatar")).hide()),
            e == a && (s = "/frontend/images/userpic.png"),
            t.find(".nav__top__userbar__userinfo__username").text(this.form.model.get("NAME")),
            t.find(".nav__top__userpic").attr("src", s),
            this.$(this._selector("big_avatar")).attr("src", e)
        },
        setupFileHandler: function() {
            FileAPI.event.dnd(window, _.bind(function(e, t) {
                this._elem("dnd_photo").toggle(e).focus().toggleClass("profile-dnd-overlay-showed", e)
            }, this), _.bind(function(e) {
                this.onLoadPhoto(e)
            }, this)),
            FileAPI.event.on(document.getElementById("choose"), "change", _.bind(function(e) {
                this.onLoadPhoto(e)
            }, this))
        },
        onLoadPhoto: function(e) {
            var t = FileAPI.getFiles(e)
              , s = o.getQueryString();
            FileAPI.filterFiles(t, function(e, t) {
                return /^image/.test(e.type) ? t.width >= 32 && t.height >= 32 : !1
            }, _.bind(function(e, t) {
                e.length && this.uploadFiles({
                    files: {
                        images: e
                    },
                    url: "/ajax/settings/profile/" + (s.length ? s : "?") + "&ch_avatar=Y",
                    complete: _.bind(function(e, t) {
                        var s = i.parseJSON(t.response);
                        "ok" == s.status && (this._elem("save_btn").trigger("button:saved"),
                        this.setAvatarSrc(s.src),
                        this._elem("delete_photo").prop("checked", !1).trigger("change"))
                    }, this)
                })
            }, this))
        },
        uploadFiles: function(e) {
            e.files && (this._elem("photo_spinner").show(),
            FileAPI.upload({
                url: e.url,
                files: e.files,
                progress: function(e) {},
                complete: _.bind(function(t, i) {
                    this._elem("photo_spinner").hide(),
                    "function" == typeof e.complete && e.complete(t, i)
                }, this)
            }))
        }
    })
}),
define("lib/pages/settings/statuses", ["require", "jquery", "lib/core/page", "lib/interface/account/statuses", "twig", "underscore", "lib/common/cookie", "lib/interface/controls/responsive_toggler_b", "lib/components/base/modal"], function(e) {
    var t, i = e("jquery"), s = e("lib/core/page"), n = e("lib/interface/account/statuses"), o = e("twig"), r = e("underscore"), a = (e("lib/common/cookie"),
    e("lib/interface/controls/responsive_toggler_b")), l = e("lib/components/base/modal");
    return t = s.extend({
        endpoint: "/ajax/settings/statuses/",
        template: "/tmpl/settings/statuses.twig",
        togglerTemplate: "/tmpl/settings/statuses.twig",
        overlay_class_name: "aside-page-overlay",
        fakePipeline: {
            id: "new_pipe",
            value: "new_pipe",
            name: AMOCRM.lang.pipelines_statuses_new_pipeline,
            label: AMOCRM.lang.pipelines_statuses_new_pipeline,
            class_name: "toggler-new-pipeline-fake",
            leads: 0,
            statuses: {
                142: {
                    color: "#ccff66",
                    editable: "N",
                    id: 142,
                    name: AMOCRM.lang.pipelines_statuses_closed_won,
                    pipeline_id: "new_pipe",
                    sort: 1e4
                },
                143: {
                    color: "#d5d8db",
                    editable: "N",
                    id: 143,
                    name: AMOCRM.lang.pipelines_statuses_closed_lost,
                    pipeline_id: "new_pipe",
                    sort: 11e3
                },
                new_1: {
                    color: "#99ccff",
                    editable: "Y",
                    id: "new_1",
                    name: AMOCRM.lang.pipelines_statuses_first_contact,
                    pipeline_id: "new_pipe",
                    sort: 10
                },
                new_2: {
                    color: "#ffff99",
                    editable: "Y",
                    id: "new_2",
                    name: AMOCRM.lang.pipelines_statuses_conversations,
                    pipeline_id: "new_pipe",
                    sort: 20
                },
                new_3: {
                    color: "#ffcc66",
                    editable: "Y",
                    id: "new_3",
                    name: AMOCRM.lang.pipelines_statuses_taking_decision,
                    pipeline_id: "new_pipe",
                    sort: 30
                }
            }
        },
        response: {},
        events: {
            "click #add_pipeline:not(.button-input-disabled)": "addPipeline",
            "click .control-toggler__item": "togglerClick"
        },
        _forms: [],
        _options: null,
        _limits: null,
        construct: function(e) {
            var t, s = this;
            e = e || {},
            t = e.response && e.response.params && e.response.params.statuses_params,
            this._options = t;
            var n = e && e.response;
            n || (n = AMOCRM.constant("settings_params")),
            n = n && n.params,
            s._limits = n && n.limits,
            !AMOCRM.first_load && n ? (n.pipelines = r.toArray(n.pipelines),
            r.each(n.pipelines, function(e) {
                e.selected = !!e.is_main,
                e.selected && (s.currentPipelineId = e.id)
            }),
            n.pipelines.length && !r.any(n.pipelines, {
                selected: !0
            }) && (n.pipelines[0].selected = !0,
            n.pipelines[0].is_main = !0),
            s.response = n,
            AMOCRM.constant("statuses_colors", s.response.colors),
            s.render.call(s, n)) : (1 == this.$(".pipeline-form").length && (s.currentPipelineId = this.$("#pipeline_id").val()),
            s.responsiveToggler = new a({
                el: i(".responsive-toggler-container")
            }),
            s.responsiveToggler.resizeToggler(),
            s._$document.trigger("pipeline:overlay:hide"),
            s._$document.trigger("toggler:render")),
            s.checkFilterState(),
            s.initForms(),
            i(document).on("pipeline:saved pipeline:removed", function(e, t) {
                var t = t || {}
                  , i = t.newPipeline && t.newPipeline.id || t.id;
                s.getPipelines.call(s).done(function(e) {
                    s.rerender.call(s, e, i)
                })
            })
        },
        destruct: function() {
            i(document).off("pipeline:saved pipeline:removed")
        },
        checkFilterState: function() {
            AMOCRM.constant("user_rights").is_admin && i(".list__top__actions").removeClass("list__top__actions_hidden")
        },
        _addPipeline: function() {
            var e = this
              , t = this.$el.find(".responsive_toggler .control-toggler__item-selected input").val() || this.currentPipelineId;
            i(document).off("toggler:switch" + this.ns),
            i(document).one("toggler:switch" + this.ns, function() {
                e.response && e.response.pipelines ? (e.rerender.call(e, e.response, "new_pipe"),
                i("#statuses_form_new_pipe").find(".button-cancel").hide(),
                e.$el.find("#add_pipeline").addClass("button-input-disabled")) : e.getPipelines().done(function(t) {
                    e.rerender.call(e, t, "new_pipe"),
                    i("#statuses_form_new_pipe").find(".button-cancel").hide(),
                    e.$el.find("#add_pipeline").addClass("button-input-disabled")
                })
            }),
            i(document).trigger("toggler:pipeline:changed", [{
                id: "new_pipe",
                oldId: t
            }])
        },
        checkCanAddPipeline: function() {
            var e = this
              , t = arguments;
            e.getResponse().done(function(i) {
                i.pipelines.length < e._limits.pipelines ? e._addPipeline.apply(e, t) : (new l).showError(AMOCRM.lang.limit_error_pipelines, !1)
            })
        },
        addPipeline: function() {
            this.checkCanAddPipeline.apply(this, arguments)
        },
        onToggleFromFake: function(e) {
            this._forms.length <= 2 ? (this.$el.find(".responsive-toggler-container").hide(),
            this.$el.find("#main-pipeline-checkbox").hide(),
            this.$el.find("#remove_pipeline").hide(),
            this.$el.find("#pipeline_settings").hide(),
            this.$el.find("#statuses-caption").css({
                display: "inline-block"
            })) : this.$el.find(".toggler-new-pipeline-fake").hide(),
            this.$el.find("#add_pipeline").removeClass("button-input-disabled"),
            this.reload(e, !0)
        },
        reload: function(e, t) {
            var i = this;
            this.getPipelines().done(function(t) {
                i.rerender.call(i, t, e)
            })
        },
        rerender: function(e, t) {
            var i = this
              , s = r.extend({}, e);
            t && "new_pipe" == t && s.pipelines.push(i.fakePipeline),
            r.each(s.pipelines, function(e) {
                t ? e.selected = e.id == t : e.selected = !!e.is_main
            }),
            r.any(s.pipelines, {
                selected: !0
            }) || (s.pipelines[0].selected = !0),
            this.render(s, t),
            this.initForms(),
            "new_pipe" == t && this.getActiveForm().focusOnName()
        },
        render: function(e, t) {
            var s = i(o({
                ref: this.togglerTemplate
            }).render({
                responsive_toggler_modify: "pipelines-responsive-toggler",
                params: e,
                active: t
            })).closest("#work_area");
            this.$el.find("#work_area").html(s.html()),
            this.checkFilterState(),
            this.responsiveToggler = new a({
                el: i(".responsive-toggler-container"),
                no_init_click: !0
            }),
            this.responsiveToggler.resizeToggler(),
            this._$document.trigger("pipeline:overlay:hide"),
            this._$document.trigger("toggler:render")
        },
        destroyForms: function() {
            var e = this;
            r.each(this._forms, function(t) {
                e._destroyComponent(t)
            }),
            this._forms = []
        },
        initForms: function() {
            var e = this;
            this._forms && this.destroyForms(),
            this.$el.find("form").each(function() {
                e._forms.push(e._addComponent(n, r.extend({
                    el: i(this),
                    limit: e._limits.statuses
                }, e._options)))
            })
        },
        getResponse: function() {
            var e = this
              , t = i.Deferred();
            return e.response && e.response.pipelines ? t.resolve(e.response) : this.getPipelines().done(function(e) {
                t.resolve(e)
            }),
            t.promise()
        },
        getPipelines: function() {
            var e = this
              , t = i.Deferred();
            return i.ajax({
                url: "/ajax/v1/pipelines/list",
                type: "GET",
                success: function(i) {
                    i.response.pipelines = r.sortBy(r.toArray(i.response.pipelines), "sort"),
                    r.each(i.response.pipelines, function(e) {
                        e.statuses = r.sortBy(r.toArray(e.statuses), "sort")
                    }),
                    e.response = i.response,
                    t.resolve(i.response)
                }
            }),
            t.promise()
        },
        togglerClick: function(e) {
            var t = this
              , s = i(e.currentTarget)
              , n = this.$el.find(".responsive_toggler .control-toggler__item")
              , o = n.closest(".control-toggler__item-selected").find("input").val()
              , a = +s.find("input").val();
            this.$el.find(".control-toggler__button");
            a && i(e.target).hasClass("control-toggler__item") && (i(document).off("toggler:switch" + this.ns),
            i(document).one("toggler:switch" + this.ns, function() {
                t.responsiveToggler.itemClick(e, {
                    callback: r.bind(function() {
                        this.switchForm(a),
                        "new_pipe" == o && this.onToggleFromFake(a)
                    }, t)
                })
            }),
            i(document).trigger("toggler:pipeline:changed", [{
                id: a,
                oldId: o
            }])),
            e.stopPropagation()
        },
        switchForm: function(e) {
            var t = this.$el.find('form[id^="statuses_form_"]')
              , i = this.$el.find("form#statuses_form_" + e);
            t.removeClass("pipeline-form_selected").hide(),
            i.addClass("pipeline-form_selected").show()
        },
        getActiveForm: function() {
            return r.find(this._forms, function(e) {
                return "new_pipe" == e.pipelineId
            })
        }
    })
}),
define("lib/pages/settings/custom_fields", ["require", "lib/core/page", "underscore", "lib/interface/account/custom_fields"], function(e) {
    "use strict";
    var t, i = e("lib/core/page"), s = e("underscore"), n = e("lib/interface/account/custom_fields");
    return t = i.extend({
        endpoint: "/ajax/settings/custom_fields/",
        template: "/tmpl/settings/custom_fields.twig",
        overlay_class_name: "aside-page-overlay",
        _classes: function() {
            return {
                section: "cf-section",
                toggle_item: "js-cf-toggle-item"
            }
        },
        _selectors: function() {
            return {
                section_id_prefix: "#cf_section_",
                add_btn: "#cf_field_add"
            }
        },
        events: {
            "click .js-cf-toggle-item:not(.control-toggler__item-selected)": "toggleSectionClick",
            "click #cf_field_add:not(.button-input-disabled)": "addFieldClick",
            "click .cf-in-modal__add-button__group": "addGroupClick"
        },
        construct: function(e) {
            var t, i;
            e = (s.isEmpty(e.response) ? AMOCRM.constant("page_params") : e.response && e.response.params) || {},
            this.tariff = e.tariff,
            this.$(this._selector("section")).each(s.bind(function(s, o) {
                t = $(o),
                i = this._addComponent(n, {
                    el: t,
                    statuses: e.statuses,
                    field_types: e.fields_types,
                    fields: e.fields[t.attr("data-type")],
                    tariff: e.tariff,
                    pipelines: e.pipelines,
                    has_pipelines: e.has_pipelines
                }),
                i.cf_collection.on("limit:check", this.checkCFEntityCount, this),
                i.cf_collection.element_type == AMOCRM.element_types.leads && i.checkCFCount(i.cf_collection)
            }, this))
        },
        toggleSectionClick: function(e) {
            this.toggleSection($(e.currentTarget).attr("data-type"))
        },
        addFieldClick: function() {
            this.$(this._selector("section") + ":visible").trigger("field:new")
        },
        addGroupClick: function() {
            this.$(this._selector("section") + ":visible").trigger("group:new")
        },
        toggleSection: function(e) {
            var t = s.isString(e) ? $(this._selector("section_id_prefix") + e) : e;
            this._elem("section").hide(),
            t.trigger("limit:check:handy").show()
        },
        checkCFEntityCount: function(e, t) {
            this._elem("add_btn").trigger("controls:disable", [t])
        }
    })
}),
define("lib/interface/controls/deadline_select", ["require", "jquery", "underscore", "elements_view", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("elements_view"), o = e("lib/common/fn");
    return t = n.extend({
        ns: ".deadline:select",
        events: {
            "click .deadline_select__caption": "toggleList",
            "click .js-deadline_select-item": "chooseItem",
            "click .js-deadline_select-custom_item": "choosedCustomItem",
            "click .js-deadline-input": "clickOnCustomTime"
        },
        _selectors: function() {
            return {
                deadline_wrapper: ".control--deadline_select",
                list_item: ".js-deadline_select-item",
                days_input: 'input[name="deadline-days"]',
                hours_input: 'input[name="deadline-hours"]',
                minutes_input: 'input[name="deadline-minutes"]'
            }
        },
        initialize: function(e) {
            this.initCache(e),
            i(document).on("keyup" + this.ns, s.bind(function(e) {
                27 === e.keyCode && this.$el.hasClass("expanded") && this.toggleList(e)
            }, this)).on("click" + this.ns, s.bind(function(e) {
                this.$el.removeClass("expanded")
            }, this))
        },
        destroy: function() {
            i(document).off(this.ns),
            this.undelegateEvents(),
            this.remove()
        },
        initCache: function(e) {
            this.cache = {
                time_langs: e.langs.triggers.during
            }
        },
        toggleList: function(e) {
            var t = this.$el
              , i = t.hasClass("expanded");
            e.stopPropagation(),
            t.toggleClass("expanded", !i),
            t.width() < 350 && t.toggleClass("minimized", !i)
        },
        chooseItem: function(e) {
            var t = this.$el.closest(".trigger_settings_form")
              , s = this.$el.find('input[name="within-deadline"]')
              , n = i(e.currentTarget)
              , o = n.attr("data-deadline");
            e.stopPropagation(),
            this.fillCustomInputs(!1),
            s.val(o).trigger("change"),
            this.toggleList(e),
            t.trigger("change"),
            this.setNewCaption(o)
        },
        choosedCustomItem: function(e) {
            var t = this.$el.closest(".trigger_settings_form")
              , s = this.$el.find('input[name="within-deadline"]')
              , n = i(e.currentTarget).closest(".deadline_select__list__item").attr("data-deadline")
              , o = this.$el.find(this._selector("days_input"))
              , r = this.$el.find(this._selector("hours_input"))
              , a = this.$el.find(this._selector("minutes_input"))
              , l = "";
            return e.stopPropagation(),
            o.val() || r.val() || a.val() ? (o.val() && (l = o.val() + "d",
            (r.val() || a.val()) && (l += "_")),
            r.val() && (l = l + r.val() + "h",
            a.val() && (l += "_")),
            a.val() && (l = l + a.val() + "m"),
            s.attr("data-deadline-within", l).val(n),
            this.toggleList(e),
            t.trigger("change"),
            void this.setNewCaption(n)) : (this.$el.find(".deadline_select__input").addClass("is_empty"),
            !1)
        },
        clickOnCustomTime: function(e) {
            e.stopPropagation(),
            this.$el.find(".deadline_select__input").removeClass("is_empty")
        },
        setNewCaption: function(e) {
            var t, s = this, n = {
                d: "task_days",
                h: "task_hours",
                m: "task_minutes"
            }, r = "";
            "custom" === e ? (t = this.$el.find('input[name="within-deadline"]').attr("data-deadline-within"),
            t = t.split("_"),
            i.each(t, function(e, i) {
                var a = i.slice(i.length - 1, i.length)
                  , l = n[a];
                i = i.slice(0, -1),
                i.length && (i = i.concat(" " + o.numeralWord(i, s.cache.time_langs[l])),
                r += i,
                3 === t.length && 0 === e && 0 !== i && (r += ","),
                r += " ",
                (2 === t.length && 0 === e && 0 !== i || 3 === t.length && 1 === e && 0 !== i) && (r = r + s.cache.time_langs.task_and + " "))
            })) : r = this.$el.find('.deadline_select__list__item[data-deadline="' + e + '"]').text(),
            this.$el.find(".js-deadline-additional-caption").text(r.toLowerCase())
        },
        fillCustomInputs: function(e) {
            var t = {
                $days: this.$el.find(this._selector("days_input")),
                $hours: this.$el.find(this._selector("hours_input")),
                $minutes: this.$el.find(this._selector("minutes_input"))
            };
            e = e ? 0 : "",
            i.each(t, function(t, s) {
                i(s).val(e)
            })
        }
    })
}),
define("lib/pages/settings/triggers", ["require", "jquery", "underscore", "twig", "lib/core/page", "lib/common/fn", "lib/components/base/confirm", "lib/components/base/modal", "lib/components/base/form", "lib/interface/controls/deadline_select", "lib/interface/controls"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/page"), r = e("lib/common/fn"), a = e("lib/components/base/confirm"), l = e("lib/components/base/modal"), c = e("lib/components/base/form"), d = e("lib/interface/controls/deadline_select");
    return e("lib/interface/controls"),
    t = o.extend({
        endpoint: "/ajax/settings/processes/",
        template: "/tmpl/settings/triggers/index.twig",
        preload: ["/tmpl/controls/pipeline/select.twig", "/tmpl/controls/checkboxes_dropdown.twig"],
        templates: {
            trigger_wrapper: "/tmpl/settings/triggers/trigger_wrapper.twig",
            trigger: "/tmpl/settings/triggers/trigger.twig",
            edit_template: "/tmpl/settings/triggers/triggers_types/edit.twig",
            read_template: "/tmpl/settings/triggers/triggers_types/read.twig",
            plug: "/tmpl/settings/triggers/plug.twig"
        },
        controls: {
            checkboxes_dropdown: "/tmpl/controls/checkboxes_dropdown.twig"
        },
        classes: {
            triggers_wrapper: "triggers_settings__wrapper"
        },
        events: {
            "click #add_trigger": "preAddTrigger",
            "click .js-trigger-edit": "preEditTrigger",
            "click .js-trigger-save": "saveTrigger",
            "click .js-trigger-cancel": "preCancelEdit",
            "click .js-trigger-remove": "removeTrigger",
            "mouseenter .trigger-actions-items": "hoverOnActionSettings",
            "mouseleave .trigger-actions-items": "hoverOutActionSettings",
            "swipe .trigger_task_wrapper": "swipeActionSettings",
            "click .js-trigger-to_edit-dots": "clickActionSettings",
            'change input[name="trigger_action"]': "conditionChanged",
            "click .checkboxes_dropdown__title_wrapper": "leadStatusStopPropagation",
            "input .triggers_settings__textarea": "checkTextareaResize",
            "click .triggers_settings__textarea": "clickOnTextarea",
            "click .task-types-holder__custom__input": "clickOnCustomType",
            "click .task-types-holder__custom__cancel": "cancelCreateCustomType",
            "mouseover .trigger_settings__process.read_mode": "fixHoverState"
        },
        modes: {
            read: "read",
            edit: "edit"
        },
        _selectors: function() {
            return {
                triggers_wrapper: ".triggers_settings__wrapper",
                trigger_wrapper: ".trigger_settings__process",
                action_wrapper: ".trigger_settings__process__item",
                trigger_form: ".trigger_settings_form",
                trigger_plug: ".triggers_plug",
                trigger_textarea: ".triggers_settings__textarea",
                custom_task_input: "#task_type_custom",
                trigger_in_edit_mode: ".trigger_settings__process.edit_mode",
                trigger__not_plug: ".trigger_settings__process:not(.triggers_plug)",
                pipelines_statuses_checkboxes: ".pipeline-select__dropdown__item__label input:checked"
            }
        },
        construct: function(e) {
            this.initCache(),
            this.initPageChange(),
            e && e.response ? this.params = e.response : this.params = AMOCRM.constant("settings_triggers_template_params"),
            this.params && this.params.data && s.isEmpty(this.params.data.custom_task_types) && (this.params.data.custom_task_types = {}),
            this.toggleTriggersPlugs(),
            this.initDeadlineSelect(),
            this.$(this._selector("trigger_wrapper")).addClass("inited"),
            this.$(".checkboxes_dropdown input").trigger("controls:change"),
            this.$(this._selector("pipelines_statuses_checkboxes")).trigger("change")
        },
        destruct: function() {
            this.destroyForm(),
            AMOCRM.router.removePreventConfig()
        },
        initCache: function() {
            this.cache = {
                triggers_counter: 1,
                $active_trigger: "",
                $current_form: {},
                has_changes: !1,
                has_empty_fields: !1,
                deadline_select: "",
                ajax_sent: !1,
                navigate_href: ""
            },
            this.changeActiveTrigger()
        },
        initPageChange: function() {
            AMOCRM.router.registerPreventConfig({
                message: AMOCRM.lang.card_page_leave_has_changes,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: s.bind(function(e) {
                    this.cache.has_changes && this.saveLastTrigger(),
                    s.isFunction(e) && e()
                }, this),
                decline: function(e) {
                    e()
                }
            })
        },
        actionChecker: function(e, t) {
            var i = this;
            this.cache.has_changes ? new a({
                text: this.params.lang.modal.confirm_save_text,
                accept_text: this.params.lang.modal.confirm_save_accept,
                decline_text: this.params.lang.modal.confirm_save_decline,
                button_class: "button-input_blue",
                destroy: function() {
                    this.accepted ? i.cache.$active_trigger.find(".js-trigger-save").trigger("click") : i.closeActiveTrigger(),
                    i[t](e)
                },
                accept: function() {
                    this.modal.destroy()
                }
            }) : this[t](e)
        },
        preAddTrigger: function(e) {
            this.actionChecker(e, "addTrigger")
        },
        addTrigger: function() {
            var e = (i(this._selector("triggers_wrapper")),
            n({
                ref: this.templates.trigger_wrapper
            }).render({
                trigger_params: {
                    id: "new_" + this.cache.triggers_counter
                },
                template: this.params.template,
                data: this.params.data,
                lang: this.params.lang,
                mode: this.modes.edit
            }));
            this.closeActiveTrigger(),
            i(this._selector("triggers_wrapper")).prepend(e),
            this.initDeadlineSelect(),
            this.cache.$current_form = i("#trigger_new_" + this.cache.triggers_counter).find(this._selector("trigger_form")),
            this.watchForm(),
            this.changeActiveTrigger(),
            ++this.cache.triggers_counter,
            this.toggleTriggersPlugs()
        },
        preEditTrigger: function(e) {
            this.actionChecker(e, "editTrigger")
        },
        editTrigger: function(e) {
            var t = i(e.currentTarget).closest(this._selector("trigger_wrapper"));
            this.cache.$active_trigger && this.closeActiveTrigger(),
            this.changeTriggerMode(t, this.modes.edit),
            this.changeActiveTrigger(),
            t.off("hover")
        },
        watchForm: function() {
            var e = i(this.cache.$current_form);
            this.destroyForm(),
            this.form = new c.View({
                el: e
            }),
            this.form.model.on("has_changes", s.bind(function() {
                this.applyChanges(!0)
            }, this)).on("has_reverted", s.bind(function() {
                this.applyChanges(!1)
            }, this))
        },
        destroyForm: function() {
            this.form && this.form.destroy(),
            this.applyChanges(!1)
        },
        applyChanges: function(e) {
            var t = this.cache.$active_trigger
              , i = t.find(".js-trigger-save");
            this.checkEmptyFields(),
            this.cache.has_changes = e,
            AMOCRM.router.preventPageChange(e),
            e && !this.cache.has_empty_fields ? i.trigger("button:save:enable") : i.trigger("button:save:disable")
        },
        checkEmptyFields: function() {
            var e = this.cache.$active_trigger
              , t = e.find(this._selector("trigger_textarea"))
              , s = i(this._selector("custom_task_input"));
            s.is(":visible") ? s.val() && t.val() ? this.cache.has_empty_fields = !1 : this.cache.has_empty_fields = !0 : t.val() ? this.cache.has_empty_fields = !1 : this.cache.has_empty_fields = !0
        },
        showEmptyFields: function() {
            var e = this.cache.$active_trigger.find(this._selector("trigger_textarea"))
              , t = i(this._selector("custom_task_input"));
            e.val() || e.addClass("is_empty"),
            t.is(":visible") && !t.val() && t.addClass("validate-has-error")
        },
        saveTrigger: function(e) {
            var t = i(e.currentTarget).closest(this._selector("trigger_wrapper"))
              , s = t.hasClass("inited") ? "update" : "add"
              , n = i(e.currentTarget);
            n.hasClass("button-input-disabled") ? this.showEmptyFields() : this.sendValues(t, s)
        },
        saveLastTrigger: function() {
            var e = this.cache.$active_trigger
              , t = e.hasClass("inited") ? "update" : "add";
            this.sendValues(e, t)
        },
        preCancelEdit: function(e) {
            this.cache.has_changes ? this.actionChecker(e, "cancelEdit") : (this.closeActiveTrigger(),
            this.cancelEdit())
        },
        cancelEdit: function(e) {
            this.applyChanges(!1),
            this.changeActiveTrigger()
        },
        removeTrigger: function(e, t) {
            var s = this
              , t = t || "Y"
              , n = i(e.currentTarget).closest(this._selector("trigger_wrapper"))
              , o = n.attr("id");
            o = this.getNumId(o, "_"),
            new a({
                text: this.params.lang.modal.delete_text,
                accept: function() {
                    this.modal.destroy(),
                    "Y" == t && s.sendValues(n, "delete"),
                    i(document).trigger("controls:deadline_select:remove", ["dl_select_" + o]),
                    n.remove(),
                    s.toggleTriggersPlugs()
                }
            })
        },
        hoverOnActionSettings: function(e) {
            this.toggleActionSettings(e, !0)
        },
        hoverOutActionSettings: function(e) {
            this.toggleActionSettings(e, !1)
        },
        swipeActionSettings: function(e, t, i) {
            1 === t && 0 === i && this.toggleActionSettings(e, !1),
            -1 === t && 0 === i && this.toggleActionSettings(e, !0)
        },
        clickActionSettings: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(this._selector("trigger_wrapper"));
            this.toggleActionSettings(e, !s.hasClass("showed_actions"))
        },
        toggleActionSettings: function(e, t) {
            var s = i(e.currentTarget).closest(this._selector("trigger_wrapper"));
            s.hasClass("triggers_plug") || s.toggleClass("showed_actions", t)
        },
        conditionChanged: function(e) {
            var t, s = i(e.currentTarget), o = s.val(), r = s.closest(this._selector("action_wrapper")), a = this.controls.checkboxes_dropdown, l = {
                items: this.params.data.statuses,
                title: this.params.lang.triggers.statuses.title,
                title_numeral: this.params.lang.triggers.statuses.numeral_title,
                class_name: "trigger_settings__lead_status_select",
                name: "trigger_lead_status"
            };
            "status_lead" == o ? (this.params.data.has_pipelines && (a = "/tmpl/controls/pipeline/select.twig",
            l = {
                multiple: !0,
                has_pipelines: !0,
                items: this.params.data.pipelines,
                class_name: "trigger_settings__lead_status_select",
                name: "trigger_lead_status"
            }),
            t = n({
                ref: a
            }).render(l),
            r.find(".trigger_settings__lead_status_select").length || r.append(t)) : r.find(".trigger_settings__lead_status_select").remove()
        },
        changeTriggerMode: function(e, t) {
            var s = i(e)
              , o = this.getNumId(s.attr("id"), "_")
              , r = n({
                ref: this.templates.trigger
            }).render({
                mode: t,
                template: this.params.template,
                lang: this.params.lang,
                data: this.params.data,
                trigger_params: this.params.data.triggers.items[o]
            });
            this.$el.find(".trigger_settings__process.showed_actions").removeClass("showed_actions"),
            s.removeClass("read_mode").removeClass("edit_mode").addClass(t + "_mode").addClass("hover-fix").html(r).find(".checkboxes_dropdown input").trigger("controls:change"),
            s.find(this._selector("pipelines_statuses_checkboxes")).trigger("change"),
            t == this.modes.read ? this._destroyComponent(this.cache.deadline_select) : (s.find(this._selector("trigger_textarea")).trigger("controls:textarea:autosize"),
            this.initDeadlineSelect(),
            this.cache.$current_form = s.find(this._selector("trigger_form")),
            this.watchForm())
        },
        changeActiveTrigger: function() {
            this.cache.$active_trigger = this.$el.find(this._selector("trigger_in_edit_mode"))
        },
        closeActiveTrigger: function() {
            var e = this.$el.find(this._selector("trigger_in_edit_mode"));
            e.length && (e.hasClass("inited") ? this.changeTriggerMode(e, this.modes.read) : (e.remove(),
            this.toggleTriggersPlugs()))
        },
        createCustomTaskType: function(e, t, s) {
            var n, o = this, a = t.val();
            return a.length ? void i.ajax({
                url: "/private/tasks/ajax_task_status_edit.php",
                data: {
                    ACTION: "ADD",
                    NAME: a
                },
                dataType: "json",
                type: "POST",
                success: function(i) {
                    "OK" == i.status && (n = AMOCRM.constant("task_types") || {},
                    n["key_" + i.data.ID] = {
                        id: i.data.ID,
                        option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + r.escapeHTML(a)
                    },
                    AMOCRM.constant("task_types", n),
                    o.params.data.custom_task_types[i.data.ID] = n["key_" + i.data.ID],
                    t.attr("disabled", "disabled"),
                    e.find('input[name="task_type"]').val(i.data.ID),
                    o.sendValues(e, s))
                },
                error: function() {}
            }) : (this.showEmptyFields(),
            !1)
        },
        collectValues: function(e, t) {
            var i, n = {}, o = {}, r = {}, t = t || "add", a = e.attr("id");
            if (i = this.getNumId(a, "_"),
            n[t] = {},
            "delete" != t) {
                var l, c = e.find('input[name^="trigger_lead_status"]'), d = [], u = [], h = {}, _ = {}, p = e.find('input[name="within-deadline"]');
                c.each(function(e, t) {
                    t.name.replace("trigger_lead_status", "") ? (l = t.getAttribute("data-pipeline-id"),
                    t.checked && (h[l] || (h[l] = []),
                    h[l].push(t.value)),
                    _[l] || (_[l] = []),
                    _[l].push(t.value)) : (t.checked && d.push(t.value),
                    u.push(t.value))
                }),
                d.length || (d = u),
                s.keys(h).length || (h = _),
                o = {
                    action: e.find('input[name="trigger_action"]').val(),
                    task_type: e.find('input[name="task_type"]').val(),
                    task_text: e.find('textarea[name="action_textarea"]').val(),
                    responsible_user: e.find('input[name="responsible_user"]').val(),
                    week_later: "week" == p.val() ? !0 : "",
                    days_later: e.find('input[name="deadline-days"]').val() || ("week" == p.val() || "custom" == p.val() ? "" : p.val()),
                    hours_later: e.find('input[name="deadline-hours"]').val(),
                    min_later: e.find('input[name="deadline-minutes"]').val()
                },
                d.length ? o.status_id = d : o.pipe = h,
                "update" == t ? (n[t][i] = {},
                n[t][i] = o) : n[t] = [o]
            } else
                n[t] = [i];
            return r = {
                params: n,
                action: t,
                wrapper_id: a,
                short_wrapper_id: i,
                var_params: o
            }
        },
        sendValues: function(e, t) {
            var n = this
              , o = this.collectValues(e, t)
              , r = i(this._selector("custom_task_input"))
              , a = e.find(".js-trigger-save");
            if (!this.cache.ajax_sent) {
                if (r.is(":visible") && !r.attr("disabled"))
                    return void this.createCustomTaskType(e, r, t);
                this.cache.$active_trigger.addClass("inited"),
                a.trigger("button:save:start"),
                this.cache.ajax_sent = !0,
                i.ajax({
                    url: "/ajax/settings/processes/",
                    type: "POST",
                    data: {
                        triggers: o.params,
                        action: "EDIT_TRIGGERS",
                        ajax_mode: "Y"
                    }
                }).done(function(e) {
                    a.trigger("button:saved"),
                    n.changeActiveTrigger(),
                    "delete" != o.action && (o.var_params.id = e.response[o.action] ? e.response[o.action][0] : o.short_wrapper_id,
                    n.reRenderTrigger(o))
                }).always(function() {
                    n.cache.ajax_sent = !1
                }).fail(function() {
                    a.trigger("button:load:stop"),
                    new l({
                        class_name: "triggers_ajax_error",
                        centrify_animation: !0,
                        init: function() {
                            this.showError(),
                            this.$modal.on("click", ".js-modal-try-again", s.bind(function() {
                                this.destroy(),
                                n.sendValues(e, t)
                            }, this))
                        },
                        destroy: function() {}
                    })
                })
            }
        },
        reRenderTrigger: function(e) {
            var t = n({
                ref: this.templates.trigger
            }).render({
                mode: this.modes.read,
                template: this.params.template,
                lang: this.params.lang,
                data: this.params.data,
                trigger_params: e.var_params
            })
              , s = i("#" + e.wrapper_id);
            e.var_params && ("add" == e.action && s.attr("id", "trigger_" + e.var_params.id).addClass("inited"),
            this.params.data.triggers.items[e.var_params.id] = e.var_params,
            s.removeClass(this.modes.edit + "_mode").addClass(this.modes.read + "_mode").html(t).find(".checkboxes_dropdown input").trigger("controls:change"),
            s.find(this._selector("pipelines_statuses_checkboxes")).trigger("change"),
            this.changeActiveTrigger(),
            this.applyChanges(!1),
            AMOCRM.router.preventPageChange(!1))
        },
        toggleTriggersPlugs: function() {
            var e = i("#triggers_wrapper")
              , t = i(this._selector("trigger_plug"))
              , s = i(this._selector("trigger__not_plug"))
              , o = n({
                ref: this.templates.plug
            }).render({
                template: this.params.template,
                lang: this.params.lang
            });
            s.length ? t.remove() : t.length || e.prepend(o)
        },
        initDeadlineSelect: function() {
            var e, t = this.cache.$active_wrapper || this.$el.find(this._selector("trigger_in_edit_mode")), s = t.find(".control--deadline_select");
            s.length && (e = {
                id: this.getNumId(s.attr("id"), "_"),
                el: s,
                langs: this.params.lang
            },
            this.cache.deadline_select = this._addComponent(d, i.extend(e)))
        },
        leadStatusStopPropagation: function(e) {
            var t = i(e.currentTarget).closest(this._selector("trigger_wrapper"));
            t.hasClass("read_mode") && e.stopPropagation()
        },
        checkTextareaResize: function(e) {
            var t = i(e.currentTarget);
            t.trigger("controls:textarea:autosize")
        },
        clickOnTextarea: function(e) {
            var t = i(e.currentTarget);
            t.removeClass("is_empty")
        },
        clickOnCustomType: function(e) {
            var t = i(e.currentTarget);
            t.removeClass("validate-has-error")
        },
        cancelCreateCustomType: function() {
            setTimeout(function() {
                i("#task_edit_type").trigger("controls:change")
            }, 0)
        },
        fixHoverState: function(e) {
            var t = i(e.currentTarget);
            t.removeClass("hover-fix")
        },
        getNumId: function(e, t) {
            return e = e.split(t),
            e = e[e.length - 1]
        }
    })
}),
define("lib/pages/settings/scoring", ["require", "jquery", "underscore", "backbone", "twig", "elements_view", "lib/core/page", "lib/components/base/modal", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i, s, n, o = e("jquery"), r = e("underscore"), a = e("backbone"), l = e("twig"), c = e("elements_view"), d = e("lib/core/page"), u = e("lib/components/base/modal"), h = e("lib/components/base/form");
    return n = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            o.ajax({
                url: "/ajax/settings/scoring/",
                type: "POST",
                dataType: "json",
                data: this.toJSON()
            }).always(r.bind(function() {
                this.is_saving = !1
            }, this)).done(r.bind(function(t) {
                t.error ? e.error.call(this, t) : e.success.call(this, t)
            }, this)).fail(r.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    s = a.Model.extend({
        initialize: function(e, t) {
            this.data = t,
            this.checkSelectedItems()
        },
        prepareSelectItems: function() {
            var e = {
                0: {
                    id: "empty",
                    option: this.data.lang.data.scores.field_not_choosed
                }
            };
            return r.each(this.attributes, r.bind(function(t, i) {
                var s = r.findWhere(this.data.all_fields, {
                    id: i
                });
                t || (e[i] = {
                    id: s.id,
                    option: s.name
                })
            }, this)),
            e
        },
        checkSelectedItems: function() {
            r.each(this.data.all_fields, r.bind(function(e, t) {
                var i = this.data.selected_fields.get(e.id) ? !0 : !1;
                this.set(e.id, i)
            }, this))
        },
        addScoreItem: function(e) {
            this.set(e, !0),
            this.trigger("score:added", e)
        },
        removeScoreItem: function(e) {
            this.model.set(e, !1)
        }
    }),
    i = c.extend({
        events: {
            "change .js-score-select input": "renderNewScoreItem"
        },
        initialize: function(e) {
            this._data = e.options,
            this.model.on("change init_render", this.reRenderSelect, this).on("score:removed", this.model.removeScoreItem, this)
        },
        destroy: function() {
            this.model.destroy()
        },
        reRenderSelect: function() {
            var e = l({
                ref: "/tmpl/controls/select.twig"
            }).render({
                lang: this._data.lang,
                items: this.model.prepareSelectItems(),
                class_name: "js-score-select scoring_settings__score_item__select"
            });
            this.$(".js-score-select").replaceWith(e)
        },
        renderNewScoreItem: function(e) {
            var t = o(e.currentTarget).val();
            this.model.addScoreItem(t)
        }
    }),
    t = d.extend({
        endpoint: "/ajax/settings/scoring/",
        template: "/tmpl/settings/scoring/page.twig",
        preload: ["/tmpl/settings/scoring/score_item.twig", "/tmpl/settings/scoring/score_variants.twig", "/tmpl/controls/select.twig"],
        templates: {
            score_item: "/tmpl/settings/scoring/score_item.twig",
            score_item_variants: "/tmpl/settings/scoring/score_variants.twig"
        },
        events: {
            "click .js-score-remove": "removeScoreItem",
            "click #scoring_save": "saveScoring",
            "click .text-input": "removeErrorClass",
            "keypress .js-scale-input": "scaleChangeCheck",
            "keypress .js-score-variant-val": "scaleChangeCheck",
            "keypress .js-formula-input": "formulaChangeCheck",
            "click #scoring_switcher": "toggleActivatingPlug"
        },
        keys_char: {
            minus: 45,
            plus: 43,
            multiple: 42,
            divide: 47
        },
        keys_code: {
            backspace: 8,
            tab: 9
        },
        letters: ["Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
        _selectors: function() {
            return {
                save_button: "#scoring_save",
                scale_min: "#scoring_scale_min_input",
                scale_max: "#scoring_scale_max_input",
                formula: "#scoring_formula_input",
                scoring_form: "#scoring_settings_form",
                plug_overlay: "#scoring_plug_overlay",
                new_score: "#new_score_item",
                score_item: ".js-score-item",
                score_symbol: ".js-score-symbol"
            }
        },
        _classes: function() {
            return {
                no_remove_basket: "no_basket",
                input_error: "validate-has-error"
            }
        },
        construct: function(e) {
            return this.initParams(e),
            "Y" == this.options.params.is_plug ? !1 : (this.initCache(),
            this.scoring_fields.trigger("init_render"),
            this.initPageChange(),
            this.watchForm(),
            void this.scoring_fields.on("score:added", this.renderChoosedScoreItem, this))
        },
        destruct: function() {
            AMOCRM.router.removePreventConfig()
        },
        initParams: function(e) {
            e && e.response ? this.options = e.response : this.options = AMOCRM.constant("settings_scoring_template_params")
        },
        initCache: function() {
            var e;
            this.cache = {
                has_changes: !1
            },
            this.initScoringBlocks(),
            e = {
                lang: this.options.lang,
                selected_fields: this.scores,
                all_fields: this.options.params.fields
            },
            this.scoring_fields = new s({},e),
            this.add_view = new i({
                el: this._elem("new_score"),
                model: this.scoring_fields,
                options: e
            })
        },
        initPageChange: function() {
            AMOCRM.router.registerPreventConfig({
                message: AMOCRM.lang.card_page_leave_has_changes,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                accept: r.bind(function(e) {
                    this.formCorrectCheck() && this.form.save({
                        success: e
                    })
                }, this),
                decline: function(e) {
                    e()
                }
            })
        },
        initScoringBlocks: function() {
            var e = this.options.params.settings.fields;
            this.scores = new a.Collection,
            r.each(e, r.bind(function(e, t) {
                this.scores.push(e)
            }, this))
        },
        watchForm: function() {
            var e = this._elem("scoring_form")
              , t = this._elem("save_button");
            this.form = this._addComponent(h.View, {
                model: n,
                el: e,
                onSaveForm: function() {
                    t.trigger("button:saved")
                },
                onSaveError: function(e) {
                    t.trigger("button:load:stop"),
                    new u({
                        class_name: "js-scoring-modal-error",
                        centrify_animation: !0,
                        init: function() {
                            this.showError(e.error, !1)
                        }
                    })
                }
            }),
            this.form.model.on("has_changes", r.bind(function() {
                this.applyChanges(!0)
            }, this)).on("has_reverted", r.bind(function() {
                this.applyChanges(!1)
            }, this))
        },
        applyChanges: function(e) {
            var t = this._elem("save_button");
            this.cache.has_changes = e,
            AMOCRM.router.preventPageChange(e),
            e ? t.trigger("button:save:enable") : t.trigger("button:save:disable")
        },
        renderChoosedScoreItem: function(e) {
            var t = this.add_view.$(this._selector("score_symbol")).text()
              , i = l({
                ref: this.templates.score_item
            }).render({
                params: this.options.params,
                lang: this.options.lang,
                select_disabled: !0,
                score_field: r.findWhere(this.options.params.fields, {
                    id: e
                }),
                field_variable: t
            });
            "empty" != e && (this.add_view.$el.before(i),
            this.add_view.$(this._selector("score_symbol")).text(this.getNextLetter(t)),
            this.addScoreToCollection(e),
            this.checkItemsCount("add"),
            o.each(o("#" + e).find("input"), function(e, t) {
                var i = o(t);
                i.hasClass("control--select--input") || i.trigger("controls:change")
            }))
        },
        addScoreToCollection: function(e) {
            var t = r.findWhere(this.options.params.fields, {
                id: e
            });
            t.variable = this.$("#" + e + " " + this._selector("score_symbol")).text(),
            this.scores.push(t)
        },
        removeScoreItem: function(e) {
            var t = o(e.currentTarget).closest(this._selector("score_item"))
              , i = t.attr("id")
              , s = t.find(this._selector("score_symbol")).text()
              , n = this.scores.get(i).set("variable", s)
              , r = this.add_view.$(this._selector("score_symbol"));
            this.changeFormula(n),
            this.scores.remove(n),
            t.remove(),
            r.text(this.getNextLetter(this.scores.at(this.scores.length - 1).get("variable"))),
            this.form.checkDeleted(),
            this.form.model.initialize(),
            this.scoring_fields.trigger("score:removed", i),
            this.checkItemsCount("remove")
        },
        checkItemsCount: function(e) {
            this.scores.length > 1 ? this.$(this._selector("score_item")).removeClass(this._class("no_remove_basket")) : this.$(this._selector("score_item")).addClass(this._class("no_remove_basket")),
            this.scores.length == this.options.params.fields.length && "add" == e ? this.add_view.$el.hide() : this.add_view.$el.show()
        },
        saveScoring: function(e) {
            var t = o(e.currentTarget);
            this.formCorrectCheck() && !t.hasClass("button-input-disabled") && (t.trigger("button:load:start"),
            this.form.save())
        },
        formCorrectCheck: function() {
            var e, t = this, i = this._elem("formula"), s = !0, n = /^-?\d{1,7}$/, o = /^(-?\d{1,7})?$/;
            return r.each(this.form.model.attributes, r.bind(function(t, i) {
                var r = this.$('input[name="' + i + '"]');
                if (r.hasClass("js-scale-input")) {
                    if (!t)
                        return e = "empty_scale_values",
                        r.addClass(this._class("input_error")),
                        void (s = !1);
                    if (!n.test(t))
                        return e = "incorrect_scale_values",
                        r.addClass(this._class("input_error")),
                        void (s = !1)
                }
                return r.hasClass("js-score-variant-val") && !o.test(t) ? (e = "incorrect_field_variant",
                r.addClass(this._class("input_error")),
                void (s = !1)) : void 0
            }, this)),
            parseInt(this._elem("scale_min").val()) >= parseInt(this._elem("scale_max").val()) && (this._elem("scale_min").addClass(this._class("input_error")),
            this._elem("scale_max").addClass(this._class("input_error")),
            e = "incorrect_scale_values",
            s = !1),
            this.formulaCorrectCheck() || (e = "incorrect_formula",
            i.addClass(this._class("input_error")),
            s = !1),
            s || new u({
                class_name: "js-scoring-modal-error",
                centrify_animation: !0,
                init: function() {
                    this.showError(t.options.lang.errors[e], !1)
                }
            }),
            s
        },
        scaleChangeCheck: function(e) {
            var t = e.keyCode || e.charCode;
            t !== this.keys_code.backspace && t !== this.keys_code.tab && (48 > t || t > 57) && t != this.keys_char.minus && e.preventDefault()
        },
        changeFormula: function(e) {
            var t, i = e.get("variable"), s = new RegExp("(^|[+*/-])" + i + "\\b","gi"), n = this._elem("formula"), o = n.val();
            t = o.replace(s, "").replace(/^[+*\/]/, ""),
            n.val(t).trigger("change")
        },
        formulaCorrectCheck: function() {
            var e = /(\b[A-Z]+\b)+/g
              , t = /^-?([a-z+A-Z]+|(\d)+)([-+*\/]([a-z+A-Z]+|(\d)+))*$/
              , i = this.$el.find(".js-score-symbol")
              , s = []
              , n = this._elem("formula")
              , a = n.val().toUpperCase().match(e)
              , l = !0;
            return o.each(i, r.bind(function(e, t) {
                s.push(o(t).text())
            }, this)),
            a && o.grep(a, function(e) {
                -1 == o.inArray(e, s) && (l = !1)
            }),
            t.test(n.val()) || (l = !1),
            l
        },
        formulaChangeCheck: function(e) {
            var t = e.keyCode || e.charCode;
            t !== this.keys_code.backspace && t !== this.keys_code.tab && (48 > t || t > 57) && (65 > t || t > 90) && (97 > t || t > 122) && t != this.keys_char.minus && t != this.keys_char.plus && t != this.keys_char.divide && t != this.keys_char.multiple && e.preventDefault()
        },
        removeErrorClass: function(e) {
            var t = o(e.currentTarget);
            t.removeClass(this._class("input_error"))
        },
        toggleActivatingPlug: function(e) {
            var t = o(e.currentTarget)
              , i = this._elem("plug_overlay");
            i.toggle(!t.is(":checked"))
        },
        number2letters: function(e) {
            for (var t, i = ""; e > 26; )
                t = e % 26,
                (e = parseInt(e / 26) - (0 == t ? 1 : 0)) && (i = this.letters[t] + i);
            return this.letters[e] + i
        },
        letters2number: function(e) {
            var t = r.invert(this.letters)
              , i = e.toUpperCase().split("").reverse()
              , s = 0;
            return r.each(i, function(e, i) {
                s += t[e] * Math.pow(26, i)
            }),
            s
        },
        getNextLetter: function(e) {
            return this.number2letters(this.letters2number(e) + 1)
        }
    })
}),
define("lib/Widget", ["require", "jquery", "twigjs", "underscore", "lib/components/base/modal", "lib/core/users"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("twigjs")
      , s = e("underscore")
      , n = e("lib/components/base/modal")
      , o = e("lib/core/users")
      , r = 0
      , a = function() {
        return this.langs = {},
        this.params = {},
        this
    };
    return a.prototype.errors = function(e) {
        var t, i = this.params.widget_code, s = this.langs.widget.name || this.params.widget_code || " ", n = AMOCRM.lang.Widget_CUSTOM_ERROR || "ERROR";
        n = n.replace("#WIDGET_CODE#", s),
        t = {
            title: n || !1,
            message: e || !1
        },
        0 != t.title && 0 != t.message && "undefined" == typeof i && (i = randomString(6))
    }
    ,
    a.prototype.crm_post = function(e, i, s, n) {
        var o = i || {}
          , a = n || "text";
        o.target = e,
        setTimeout(function() {
            t.post("/private/widget/proxy.php", o, s, a).complete(function(e) {
                r = 429 === e.status ? 1e3 : 0
            })
        }, r)
    }
    ,
    document.crm_post = a.prototype.crm_post,
    a.prototype.i18n = function(e) {
        if ("string" == typeof e) {
            var t = this.langs;
            e = e.split(".");
            for (var i = 0; i < e.length; i++)
                t = t[e[i]];
            if ("undefined" != typeof t)
                return t
        }
        return !1
    }
    ,
    a.prototype.set_lang = function(e) {
        this.langs = e
    }
    ,
    a.prototype.set_settings = function(e) {
        this.params = this.params || {},
        t.extend(this.params, e)
    }
    ,
    a.prototype.get_settings = function() {
        return this.params
    }
    ,
    a.prototype.system = function() {
        return "object" == typeof AMOCRM.widgets.system ? AMOCRM.widgets.system : !1
    }
    ,
    a.prototype.add_action = function(e, t) {
        e = e || "",
        t = t || function() {}
        ,
        s.has({
            phone: 1,
            email: 1
        }, e) && "function" == typeof t && (AMOCRM.widgets.cf_actions[e] = AMOCRM.widgets.cf_actions[e] || {},
        AMOCRM.widgets.cf_actions[e][this.params.widget_code] = t)
    }
    ,
    a.prototype.get_accounts_current = function() {
        if (!AMOCRM)
            return !1;
        if (this._accounts_current_cache)
            return this._accounts_current_cache;
        var e = (AMOCRM.constant("user_rights") || {},
        o.get())
          , t = AMOCRM.constant("account") || {}
          , i = {
            id: t.id,
            name: t.name,
            subdomain: t.subdomain,
            currency: t.currency,
            paid_from: t.paid_from,
            paid_till: t.paid_till,
            timezone: t.timezone,
            date_pattern: t.date_pattern,
            language: t.language,
            date_format: t.date_format,
            time_format: t.time_format,
            country: ("" + t.country).toLowerCase(),
            unsorted_on: t.unsorted_on,
            users: [],
            widget: this.params,
            leads_statuses: [],
            custom_fields: {},
            note_types: [],
            task_types: []
        };
        return s.each(e, function(e) {
            e.active && i.users.push({
                id: e.id,
                name: e.title,
                login: e.login,
                is_admin: e.is_admin
            })
        }),
        this._accounts_current_cache = {
            account: i
        }
    }
    ,
    a.prototype.list_selected = function() {
        if (t.inArray(AMOCRM.getWidgetsArea(), ["leads", "contacts", "customers", "tasks"]) >= 0) {
            var e = []
              , i = {
                items: 0,
                emails: 0,
                phones: 0
            };
            return AMOCRM.data.current_list.where({
                is_checked: !0
            }).forEach(function(t) {
                var s = AMOCRM.constant("account")
                  , n = t.get("CF" + s.predefined_cf.EMAIL.ID) || t.get("cf" + s.predefined_cf.EMAIL.ID) || ""
                  , o = t.get("CF" + s.predefined_cf.PHONE.ID) || t.get("cf" + s.predefined_cf.PHONE.ID) || ""
                  , r = t.get("entity") || "";
                n = n.toString().replace(" ", "") || "",
                o = o.toString().replace(" ", "") || "",
                n = n ? n.split(",") : [],
                o = o ? o.split(",") : [],
                e.push({
                    id: t.id,
                    type: r,
                    emails: n,
                    phones: o
                }),
                i.items += 1,
                i.phones += o.length,
                i.emails += n.length
            }),
            {
                selected: e,
                summary: i
            }
        }
        return !1
    }
    ,
    a.prototype.template_element = '<div class="card-widgets__widget card-widgets__widget-{{widget_code}}" data-code="{{widget_code}}">                        <div class="js-widget-caption-block card-widgets__widget__caption {{caption.class_name}}" data-code="{{widget_code}}">                            <span id="multi-widget_close" class="modal-body__close  single_widget__close"></span>                          <img class="card-widgets__widget__caption__logo" src="{{ caption.path }}/images/logo_medium.png" onerror="this.parentNode.removeChild(this)" alt="" />                          <img class="card-widgets__widget__caption__logo_min" src="{{ caption.path }}/images/logo_min.png" onerror="this.parentNode.removeChild(this)" alt="" />                          <div class="card-widgets__widget__caption__arrow widgets__widget__caption__arrow_bottom"></div>                        </div>                        <div class="card-widgets__widget__body" >{{body}}</div></div>                        </div>',
    a.prototype.render = function(e, t) {
        t = t || {},
        e = e || {};
        var s = "";
        return e.load && e.href ? (i(e),
        s = !0) : s = i(e).render(t),
        s
    }
    ,
    a.prototype.render_template = function(e, s) {
        var n = this
          , o = t(document).find("body")
          , r = o.find("#widgets_block")
          , a = !1;
        s = s || {},
        e.caption = e.caption || {},
        e.caption.path = n.params.path,
        r.find(".card-widgets__elements").prepend(i({
            data: n.template_element
        }).render({
            widget_code: n.params.widget_code,
            caption: e.caption,
            body: i({
                data: e.render
            }).render(s) + e.body
        })),
        o.find("#card_holder").hasClass("js-widgets-active") || a ? r.find(".card-widgets__widget__caption__arrow , .card-widgets__widget__caption__logo").show() : r.find(".card-widgets__widget__caption__logo_min").show()
    }
    ,
    a.prototype.extend = function(e, t) {
        var i = function() {};
        t = t || a,
        i.prototype = t.prototype,
        e.prototype = new i,
        e.prototype.constructor = e
    }
    ,
    a.prototype.widgetsOverlay = function(e) {
        var i = t("#card_widgets_overlay")
          , n = t("#widgets_block")
          , o = "#widgets_block"
          , r = function(e) {
            s.isUndefined(e) || (e.widgetsOverlay(!1),
            n.removeClass("js-widgets-active"))
        };
        if (e === !0) {
            if (!i.length) {
                var a = n.find(".card-widgets__widget:visible").data("code")
                  , l = AMOCRM.widgets.list[a];
                t(document).on(AMOCRM.click_event + ".widgets:overlay:hide", function(e) {
                    t(e.target).closest(o).length || r(l)
                }).on(AMOCRM.click_event + ".widgets:overlay:hide", ".card-widgets__top__icon", function() {
                    r(l)
                }),
                t("#list_page_holder").append(t('<div class="default-overlay" id="card_widgets_overlay" style="z-index:51"></div>')),
                t("#card_widgets_overlay").trigger("overlay:show")
            }
        } else
            t(document).off(".widgets:overlay:hide"),
            n.hide(),
            i.trigger("overlay:hide", {
                instantly: !0
            })
    }
    ,
    a.prototype.unbind = function() {}
    ,
    a.prototype.set_status = function(e) {
        var i = t("div[data-code=" + this.params.widget_code + "]");
        i.length > 0 && (i.removeClass("install installed error").addClass(e),
        i.find(".widget-status-text").text(AMOCRM.lang["widget_status_" + e]))
    }
    ,
    a.prototype.helpers = {
        Modal: n
    },
    a.prototype.background_install = function() {
        t(".js-widget-save#save_" + this.params.widget_code).data("onsave-destroy-modal", !1).trigger("button:save:enable").click();
    }
    ,
    a
}),
define("lib/widgets", ["require", "jquery", "underscore", "store", "lib/common/fn", "lib/components/widgets/block_actions", "lib/Widget", "lib/common/user_rights", "text", "json"], function(require) {
    "use strict";
    var $ = require("jquery"), _ = require("underscore"), store = require("store"), Fn = require("lib/common/fn"), wb = require("lib/components/widgets/block_actions"), Widget = require("lib/Widget"), user_rights = require("lib/common/user_rights"), Widgets, widgets_cache_lifetime = 18e5, nav_ns;
    return require("text"),
    require("json"),
    AMOCRM.widgets = AMOCRM.widgets || {},
    AMOCRM.widgets.list = AMOCRM.widgets.list || {},
    AMOCRM.widgets.areas = AMOCRM.constant("widgets_areas"),
    AMOCRM.widgets.system = AMOCRM.widgets.system || {},
    AMOCRM.widgets.cf_actions = AMOCRM.widgets.cf_actions || {},
    AMOCRM.widgets.loaded = !1,
    AMOCRM.widgets.current = AMOCRM.widgets.current || {},
    AMOCRM.widgets.clear_cache = function() {
        _.each(AMOCRM.router.all_entities, function(e) {
            _.each(["widgets_" + e, "widgets_" + e + "_card"], function(e) {
                store.get(e) && store.set(e, null)
            })
        })
    }
    ,
    Widgets = function() {
        var e = user_rights.isAdmin()
          , t = user_rights.getRights("is_free_user") || e && AMOCRM.constant("widgets_off") || e && AMOCRM.constant("safe_mode");
        this.destroy_all().done(_.bind(function() {
            if (!t) {
                var e = AMOCRM.getWidgetsArea() || !1;
                $(document).off("widget:installed").off("widget:removed"),
                this.get_scripts(e, _.bind(this.initialize, this))
            }
        }, this))
    }
    ,
    AMOCRM.widgets.notificationsPhone = function(e) {
        var t = $("#left_menu .nav__notifications");
        e = e || {},
        e.click && e.ns && (t.find(".calls-list-toggler").length || $("#left_menu .nav__notifications").append('<div class="calls-list-toggler"><div class="calls-list-toggler__wrapper"></div><div class="calls-list-toggler__icon"><span class="nav__notifications__counter nav__notifications-call-list__counter js-notifications_call_list_counter" style="display:none;">0</span></div></div>').prepareTransition().addClass("nav__notifications-call-list"),
        nav_ns && $(document).off(nav_ns),
        $(document).on("click" + e.ns, ".calls-list-toggler__wrapper, .calls-list-toggler__icon", function(t) {
            e.click.call(this),
            t.stopPropagation()
        }),
        nav_ns = e.ns)
    }
    ,
    AMOCRM.widgets.destroyNotificationsPhone = function(e) {
        var t = $("#left_menu .nav__notifications");
        t.find(".calls-list-toggler").length && (t.prepareTransition().removeClass("nav__notifications-call-list").find(".calls-list-toggler").remove(),
        $(document).off("click" + e.ns)),
        nav_ns && $(document).off(nav_ns)
    }
    ,
    Widgets.prototype.init_by_click = function(e) {
        var t = AMOCRM.getWidgetsArea()
          , i = $.Deferred();
        return this.get_data(t, _.bind(function(t) {
            var s = t.widgets[e]
              , n = {};
            n[e] = s,
            s ? this.initialize(n, function() {
                $("#" + e).trigger("click"),
                i.resolve()
            }) : i.reject()
        }, this)),
        i.promise()
    }
    ,
    Widgets.prototype.initialize = function(scripts, callback) {
        var _this = this, scr_length = _.keys(scripts).length, counter = 0, widget_name;
        this.__scripts = scripts,
        "object" == typeof scripts && (_.each(scripts, function(e, t) {
            var i = e.settings || {}
              , s = e.installed_version || "0"
              , n = [];
            e.src && (AMOCRM.widgets.list[t] ? AMOCRM.widgets.list[t].callbacks.render() : (n.push("optional!" + e.src + "?v=" + s),
            e.lang && n.push("json!" + e.lang + "?v=" + s),
            n.push("/frontend/build/templates.js"),
            require(n, function() {
                try {
                    var s, n = arguments[0], o = arguments[1] || {};
                    if (_.isFunction(n) && ((new Widget).extend(n),
                    AMOCRM.widgets.list[t] = new n,
                    s = $.extend(AMOCRM.widgets.list[t], {
                        ns: ".widget:" + t,
                        init_once: e.init_once
                    }),
                    _.isObject(s.callbacks)))
                        if (_.isObject(o) && s.set_lang(o),
                        _.isString(i) && i.length > 0 && (i = $.parseJSON(i)),
                        i = i || {},
                        i.widget_code = t,
                        i.path = e.path,
                        i.widget_active = e.active,
                        s.set_settings(i),
                        _.isFunction(s.callbacks.init) && _.isFunction(s.callbacks.bind_actions) && _.isFunction(s.callbacks.render)) {
                            var r = function() {
                                var e = $.Deferred();
                                return s.callbacks.render() && e.resolve(),
                                e.promise()
                            };
                            r().done(function() {
                                $(document).trigger("widget:" + i.widget_code + ":loaded"),
                                s.callbacks.init()
                            }),
                            s.callbacks.bind_actions()
                        } else
                            delete AMOCRM.widgets.list[t],
                            s;
                    counter++,
                    counter == scr_length && (AMOCRM.widgets.loaded = !0,
                    $("#list_table").trigger("list:checkbox"))
                } catch (a) {
                    var l = "undefined" != typeof Raven ? Raven : !1;
                    "production" == AMOCRM.environment && l ? l.captureException(a, {
                        logger: "widgets-loader",
                        extra: {
                            aid: (AMOCRM.constant("account") || {}).id,
                            time: Date.now()
                        }
                    }) : console.error(a)
                } finally {
                    _.isFunction(callback) && callback()
                }
            })))
        }, this),
        $(document).on("widget:installed", function(e, widget_code, settings) {
            if ("object" == typeof _this.__scripts[widget_code]) {
                var ps = {};
                ps[widget_code] = _this.__scripts[widget_code],
                ps[widget_code].active = "Y",
                settings = settings || "",
                ps[widget_code].settings = "'" + settings + "'",
                ps[widget_code].settings = eval(ps[widget_code].settings),
                _this.__scripts[widget_code] = ps[widget_code],
                $(document).off("widget:removed").off("widget:installed"),
                _this.initialize(ps)
            }
        }).on("widget:removed", function(e, t) {
            if ("object" == typeof AMOCRM.widgets.list[t]) {
                var i = AMOCRM.widgets.list[t];
                i.callbacks.destroy = i.callbacks.destroy || function() {
                    return !0
                }
                ,
                $(document).off(AMOCRM.click_event + i.ns),
                i.callbacks.destroy()
            }
        }))
    }
    ,
    Widgets.prototype.destroy = function(e) {
        var t = 0
          , i = _.keys(AMOCRM.widgets.list).length;
        wb.destroy(),
        _.each(AMOCRM.widgets.list, function(s, n) {
            ("Y" != s.init_once || s.params && "Y" != s.params.widget_active) && (_.isFunction(s.callbacks.destroy) && s.callbacks.destroy(),
            $(document).off(AMOCRM.click_event + s.ns).off(s.ns),
            $("#widgets_block").find(".card-widgets__widget-" + n).remove(),
            delete AMOCRM.widgets.list[n]),
            t++,
            t == i && e.resolve()
        })
    }
    ,
    Widgets.prototype.destroy_all = function() {
        var e = $.Deferred();
        return this.destroy(e),
        _.isEmpty(AMOCRM.widgets.list) && e.resolve(),
        e.promise()
    }
    ,
    Widgets.prototype.__scripts = {},
    Widgets.prototype.init_scripts = function(e, t) {
        var i = {};
        e = e || {},
        AMOCRM.widgets.system = e.system || {},
        AMOCRM.widgets.system = _.extend(AMOCRM.widgets.system, {
            amouser: AMOCRM.constant("user").login,
            amohash: AMOCRM.constant("user").api_key
        }),
        e.length && (e.system.displayed_count_by_area = e.system.displayed_count_by_area || []),
        wb.init(),
        _.isFunction(t) && (i = this.get_active_scripts(e.widgets),
        t.call(this, i || []))
    }
    ,
    Widgets.prototype.get_scripts = function(e, t) {
        this.get_data(e, _.bind(function(e) {
            this.init_scripts(e, t)
        }, this))
    }
    ,
    Widgets.prototype.get_data = function(e, t) {
        var i = "widgets_" + e
          , s = Fn.storeWithExpiration.get(i);
        s ? t(s) : $.ajax({
            url: "/ajax/widgets/list",
            method: "POST",
            dataType: "json",
            data: {
                area: e
            }
        }).done(_.bind(function(e) {
            Fn.storeWithExpiration.set(i, e, widgets_cache_lifetime),
            t(e)
        }, this))
    }
    ,
    Widgets.prototype.get_active_scripts = function(e) {
        var t = {};
        return _.each(e, function(e, i) {
            "Y" == e.active && (t[i] = e)
        }),
        t
    }
    ,
    Widgets.prototype.clear_widgets_block = function() {
        $(document).find("#widgets_block .card-widgets__widget").remove()
    }
    ,
    $(document).on("widgets:load", function() {
        new Widgets
    }),
    Widgets
}),
define("lib/interface/widget_settings", ["require", "jquery", "twig", "underscore", "clipboard", "lib/common/fn", "lib/components/filter/filter", "lib/common/urlparams", "lib/components/base/modal", "lib/core/page", "lib/components/base/form", "lib/widgets", "vendor/plugins/jquery.gallery"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("twig")
      , s = e("underscore")
      , n = e("clipboard")
      , o = e("lib/common/fn")
      , r = (e("lib/components/filter/filter"),
    e("lib/common/urlparams"))
      , a = e("lib/components/base/modal")
      , l = e("lib/core/page")
      , c = e("lib/components/base/form")
      , d = e("lib/widgets");
    e("vendor/plugins/jquery.gallery");
    var u = l.extend({
        endpoint: "/ajax/settings/widgets/",
        template: "/tmpl/settings/widgets/page.twig",
        overlay_class_name: "aside-page-overlay",
        overlayContainer: function() {
            return t("#work_area")
        },
        events: s.extend({}, l.prototype.events || {}, {
            "click .widget-card": "openWidgetCard",
            "input #widgets_search": "search",
            "click #search_clear_button": "clearSearch"
        }),
        construct: function(e) {
            var i = window.location.hash || ""
              , n = s.bind(function(e) {
                var i = t("#" + e);
                window.location.hash = "",
                this.openWidgetCard({
                    target: i,
                    currentTarget: i
                })
            }, this);
            e = e || {},
            this.widgets = s.isUndefined(e.response) ? AMOCRM.constant("widgets").widgets.all : e.response.widgets.all,
            this.$widgets_box = t("#widgets_settings_box"),
            this.has_categories = this.$(".widget-category-wrapper").length ? !0 : !1,
            i = i.toString().replace("#", ""),
            i.length && !e.response ? s.isUndefined(this.widgets[i]) || n(i) : i.length && (setTimeout(function() {
                t(window).scrollTop(t("#" + i).offset().top)
            }, 100),
            s.isUndefined(this.widgets[i]) || n(i)),
            this.init(),
            this.gallery(),
            t("#svg-sprite").ready(function() {
                t(".widget-description__rating_loader").addClass("hidden"),
                t(".widget-description__rating").removeClass("hidden")
            })
        },
        destruct: function() {
            this.gallery(!1),
            this.clipboard && this.clipboard.destroy()
        },
        init: function() {
            t(document).on("keydown" + this.ns, function(e) {
                return e.metaKey || e.ctrlKey || t(document.activeElement).is(":input") || t(".modal").length ? !0 : void t("#widgets_search").focus()
            }).on("click" + this.ns, ".js-widget-save", s.bind(function(e) {
                this.validateOnSave(e)
            }, this)).on("click" + this.ns, ".js-widget-cancel", s.bind(function(e) {
                this.widgetCardCancel(e)
            }, this)).on("keyup" + this.ns, ".widget_settings_block__fields input", s.bind(function(e) {
                this.widgetCardClearError(e)
            }, this))
        },
        validate: function(e, i) {
            var n = t.Deferred()
              , o = s.keys(e).length
              , a = []
              , l = {}
              , c = 0
              , d = r.QStoJSON(decodeURIComponent(this.$modal_body.find(".widget_settings_block__fields input").serialize().replace(/\+/g, "%20")), !0);
            return s.each(e, function(e, r) {
                var u = "";
                if (s.isObject(d[r])) {
                    var h = {};
                    s.each(d[r], function(e, t) {
                        e = e || "",
                        h[t] = e
                    }),
                    u = h
                } else
                    u = d[r];
                return e.required && !u ? a.push(r) : l[r] = u,
                c++,
                c == o && a.length <= 0 && n.resolve(l),
                a.length ? (s.each(a, function(e, s) {
                    var n = this.$modal_body.find('.widget_settings_block__fields input[name="' + e + '"]');
                    t("div.widget_settings_block__error" + e).length < 1 && (n.parents(".widget_settings_block__input_field").append('<div class="widget_settings_block__error widget_settings_block__error' + e + '">' + AMOCRM.lang.widget_save_error.replace("#FIELD#", this.widgets[i].langs["settings." + e]) + "</div>"),
                    n.focus())
                }, this),
                this.$modal_body.find(".js-widget-save").trigger("button:save:error"),
                !1) : void 0
            }, this),
            n.promise()
        },
        post_settings: function(e, i, n) {
            var o = this.$modal_body.find("input[name=widget_active]:checked").val() || !1;
            e.first_load && (o = "Y"),
            s.each(i, function(e, t) {
                (s.isArray(e) || s.isObject(e)) && (i[t] = JSON.stringify(e))
            }),
            t.ajax({
                url: "/ajax/widgets/edit",
                method: "POST",
                data: {
                    action: "edit",
                    id: e.id,
                    code: e.code,
                    widget_active: o,
                    settings: i
                }
            }).done(s.bind(function(n) {
                var r = "install"
                  , a = this.$("div.widget-card[data-code=" + e.code + "]");
                n = n.response || {},
                n.displayed_count_by_area = n.displayed_count_by_area || {},
                n.displayed_count_by_area = s.extend(AMOCRM.widgets.system.displayed_count_by_area || {}, n.displayed_count_by_area || {}),
                AMOCRM.widgets.system.displayed_count_by_area = n.displayed_count_by_area,
                AMOCRM.constant("displayed_count_by_area", n.displayed_count_by_area),
                "ok" == n.status ? (this.widgets[e.code].active = o,
                s.each(i, function(t, i) {
                    this.widgets[e.code].settings[i].value = t
                }, this),
                "Y" == o ? (this.widgets[e.code].first_load = 0,
                delete e.first_load,
                r = "installed",
                t(document).trigger("widget:" + e.code + ":installed"),
                t(document).trigger("widget:installed", [e.code, n.new_settings])) : (t(document).trigger("widget:" + e.code + ":removed"),
                t(document).trigger("widget:removed", [e.code, n.new_settings])),
                AMOCRM.widgets.clear_cache(),
                this.Modal.destroy(),
                0 == e.destroy_modal && t("#" + e.code + ".widget-card").click()) : r = "error",
                a.attr("class", "widget-card " + r)
            }, this))
        },
        gallery: function(e) {
            e = "undefined" == typeof e || e ? !0 : !1,
            this.$("#dg-container").gallery(e ? {
                autoplay: !0,
                interval: 1e4
            } : "destroy")
        },
        search: function(e) {
            var i, n = t(e.currentTarget), r = (n.val() || "").toLowerCase(), a = o.transliterate(r), l = "", c = function(e, i) {
                var s;
                e.each(function() {
                    s = t(this).closest(".widget-category-wrapper:not(#category-wrapper-recommended)"),
                    s.length && i(s)
                })
            };
            r.length > 2 ? (t("#search_clear_button").show(),
            this.$("#category-wrapper-recommended").hide(),
            this.$("#dg-container").hide(),
            s.each(this.widgets, function(e, t) {
                l = (e.langs && e.langs["widget.name"] || "").toLowerCase(),
                i = this.$('.widget-card[data-code="' + t + '"]').closest(".widget-card__wrapper"),
                !l || l.indexOf(r) < 0 && l.indexOf(a) < 0 ? (i.hide(),
                c(i, function(e) {
                    e.find(".widget-card:visible").length || e.hide()
                })) : (i.show(),
                c(i, function(e) {
                    e.show()
                }))
            }, this),
            this.$((this.has_categories ? ".widget-category-wrapper" : ".widget-card") + ":visible").length ? this.$(".widgets-not-found").hide() : this.$(".widgets-not-found").show()) : "" === r && this.clearSearch()
        },
        initClipboard: function(e) {
            if (e.length > 0) {
                var i = this;
                i.clipboard = new n(e[0],{
                    text: function(e) {
                        return e.getAttribute("data-clipboard-text")
                    }
                }),
                i.clipboard.on("success", function(e) {
                    t(e.trigger).next().trigger("tip:show"),
                    setTimeout(function() {
                        t(e.trigger).next().fadeOut(300)
                    }, 2e3),
                    e.clearSelection()
                })
            }
        },
        clearSearch: function() {
            this.$(".widgets-not-found").hide(),
            t("#search_input_wrapper").removeClass("list-top-search-options-showed"),
            t("#search_clear_button").hide(),
            this.$("#category-wrapper-recommended").show(),
            this.$("#dg-container").show(),
            this.$(".widget-category-wrapper, .widget-card__wrapper").show(),
            this.$("#widgets_search").val("")
        },
        openWidgetCard: i._preload(["/tmpl/settings/widgets/widget_settings.twig"], "_openWidgetCard"),
        _openWidgetCard: function(e) {
            var n, r, l = t(e.target).closest(".widget-card"), u = l.data("code") || !1;
            this.widget_obj = AMOCRM.widgets.list[u] || !1,
            n = this.widgets[u] || {},
            this.widget_obj || "N" == n.installable ? (this.hide_widget_overlay(),
            this.updateReviews(n),
            this.Modal = new a({
                class_name: "modal-list " + ("Y" == n.must_pay ? "widget-card__modal" : ""),
                init: s.bind(function(e) {
                    if (this.$modal_body = e,
                    n.code = u,
                    n.settings = n.settings || {},
                    r = s.isUndefined(n.user_rating) ? n.rating : n.user_rating,
                    this.$modal_body.on("click", ".js-user-rate-entry", s.bind(function(e) {
                        this.rateWidget(n, t(e.currentTarget).data("rate"))
                    }, this)).on("mouseleave", ".widget_settings_block__user_rating.active", s.bind(function() {
                        this.updateReviews(n)
                    }, this)).on("mouseenter", ".js-user-rate", s.bind(function(e) {
                        (n.active || "N" == n.installable) && this.updateReviews(n, t(e.currentTarget).data("rate"), "entry")
                    }, this)).on("change", "#widget_active__sw", s.bind(function(e) {
                        var t;
                        t = e.currentTarget.checked ? AMOCRM.lang.widget_power_off : AMOCRM.lang.widget_power_on,
                        this.$modal_body.find(".widget_settings_block__switch_title").text(t + ":")
                    }, this)).on("click", ".widget_settings_block__user_btn.button-input-enabled", s.bind(function(e) {
                        var i = t(".widget_settings_block__user_input").val();
                        i = o.stripTags(i),
                        i = o.trim(i),
                        this.reviewWidget(n, i)
                    }, this)).on("click", ".button-input.button-cancel", s.bind(function(e) {
                        this.rateWidget(n, r),
                        t(".widget_settings_block__comments").removeClass("hidden")
                    }, this)).on("click", ".widget_settings_block__more", s.bind(function() {
                        this.showMoreReviews(n)
                    }, this)),
                    s.each(n.settings, function(e, t) {
                        "users" == e.elem && "string" == typeof e.value && (e.value = JSON.parse(e.value)),
                        (s.isArray(e.value) || s.isObject(e.value)) && "hidden" == e.type && (n.settings[t].value = JSON.stringify(e.value))
                    }, this),
                    "Y" == n.installable) {
                        var a, l = this.widget_obj.callbacks || {};
                        e.on("modal:loaded." + this.widget_obj.ns, s.bind(function() {
                            a = e.find(".widget_settings_block__fields"),
                            this.form = new c.View({
                                el: a
                            }),
                            this.form.model.on("has_changes", s.bind(function() {
                                this.$modal_body.find(".widget_settings_block__controls_top").length && (this.$modal_body.find(".widget_settings_block__close").addClass("hidden"),
                                this.$modal_body.find(".widget_settings_block__controls_top").removeClass("hidden")),
                                this.$modal_body.find(".js-widget-save").trigger("button:save:enable")
                            }, this)).on("has_reverted", s.bind(function() {
                                this.$modal_body.find(".widget_settings_block__controls_top").length && (this.$modal_body.find(".widget_settings_block__close").removeClass("hidden"),
                                this.$modal_body.find(".widget_settings_block__controls_top").addClass("hidden")),
                                this.$modal_body.find(".js-widget-save").trigger("button:save:disable")
                            }, this)),
                            e.find('input[type="hidden"]').parents(".widget_settings_block__item_field").hide(),
                            e.find(".js-widget-save").trigger("button:save:disable"),
                            s.isFunction(l.settings) && l.settings(this.$modal_body)
                        }, this))
                    }
                    e.html(i({
                        ref: "/tmpl/settings/widgets/widget_settings.twig"
                    }).render({
                        widget: n,
                        lang: t.extend({}, AMOCRM.lang, {
                            sip_user: AMOCRM.lang.sip_user,
                            password: AMOCRM.lang.password,
                            button_cancel: AMOCRM.lang.button_cancel,
                            button_close: AMOCRM.lang.button_close,
                            button_save: AMOCRM.lang.button_save,
                            widget_power_on: AMOCRM.lang.widget_power_on,
                            widget_install: AMOCRM.lang.widget_install
                        }),
                        reviews: "paid" === AMOCRM.constant("account").pay_type
                    })).trigger("modal:loaded").trigger("modal:centrify"),
                    this.initClipboard(t(".copy_btn"))
                }, this),
                destroy: s.bind(function() {
                    this.form && (this.form.destroy(),
                    this.$modal_body.off())
                }, this)
            }),
            s.isObject(AMOCRM.widgets.list[u]) && (AMOCRM.widgets.list[u].modal = this.Modal)) : (this.show_widget_overlay(),
            d.prototype.init_by_click(u).fail(s.bind(function() {
                (new a).showError("", !1),
                this.hide_widget_overlay()
            }, this)))
        },
        updateReviews: function(e, i, n) {
            var o = this
              , r = s.isUndefined(i) ? !1 : i;
            if (0 == r) {
                if (s.isUndefined(e.user_rating))
                    return t.ajax({
                        url: "/ajax/v1/widgets/rate?widget_code=" + e.code,
                        type: "GET",
                        success: function(i) {
                            e.user_rating = i.response.rate,
                            e.count = i.response.count,
                            e.reviews = i.response.reviews,
                            e.reviewed = !!i.response.reviewed,
                            e.reviews_count = i.response.reviews_count,
                            t(".widget_settings_block__rating_box_count").text("(" + e.count + ")"),
                            t(".widget_settings_block__reviews_count").text(e.reviews_count),
                            e.user_rating && o.renderRating(".widget_settings_block__user_rating", e.user_rating, !0),
                            e.reviews_count && o.renderReviews(e)
                        }
                    }),
                    !0;
                r = e.user_rating
            }
            return o.renderRating(".widget_settings_block__user_rating", r, !0, n),
            !0
        },
        showMoreReviews: function(e) {
            var i = this
              , n = e.reviews.length;
            return t.ajax({
                url: "/ajax/v1/widgets/rate?widget_code=" + e.code + "&offset=" + n,
                type: "GET",
                success: function(n) {
                    n.response.reviews && (e.reviews = s.union(e.reviews, n.response.reviews),
                    i.renderReviews(e),
                    n.response.reviews.length < 3 && t(".widget_settings_block__more").addClass("hidden"))
                }
            }),
            !0
        },
        rateWidget: function(e, i) {
            return e.active || "N" == e.installable ? (t(".widget_settings_block__user_comment").removeClass("hidden").find("textarea"),
            this.updateReviews(e, i, "rated"),
            i != e.user_rating && (e.user_rating = i),
            !0) : void 0
        },
        reviewWidget: function(e, n) {
            if (e.active || "N" == e.installable) {
                var o = {
                    request: {
                        review: n,
                        rate: e.user_rating,
                        widget_code: e.code
                    }
                }
                  , r = this;
                return t.ajax({
                    url: "/ajax/v1/widgets/rate",
                    type: "POST",
                    data: o,
                    success: function(o) {
                        if ("success" == o.response.status) {
                            var l = o.response.rating
                              , c = o.response.review;
                            if (e.reviewed && (r.deleteReview(e),
                            e.reviews_count--),
                            "published" == c) {
                                var d = AMOCRM.constant("user")
                                  , u = {
                                    comment: n,
                                    date: o.response.server_time,
                                    rate: e.user_rating,
                                    mine: !0,
                                    avatar: "/frontend/images/interface/i/userpic_demo.png",
                                    username: d.name
                                };
                                e.reviews = s.union([u], e.reviews),
                                e.reviews_count++,
                                t(".widget_settings_block__reviews_count").text(e.reviews_count),
                                e.reviewed = !0,
                                r.renderReviews(e)
                            }
                            l && (e.rating = l,
                            r.renderRating(".widget_settings_block__rating", l),
                            t('.widget-card[data-code="' + e.code + '"]').each(function() {
                                t(this).find(".widget-description__rating").html(i({
                                    ref: "/tmpl/settings/widgets/rating.twig"
                                }).render({
                                    rating: l
                                }))
                            }))
                        } else
                            (new a).showError("", !1)
                    }
                }),
                (new a).showSuccess(),
                t(".widget_settings_block__user_comment").addClass("hidden"),
                t(".widget_settings_block__user_input").val(""),
                !0
            }
        },
        deleteReview: function(e) {
            e.reviewed = !1,
            t(e.reviews).each(function() {
                return 1 == this.mine ? (e.reviews = s.without(e.reviews, this),
                !0) : void 0
            })
        },
        renderReviews: function(e) {
            e.reviews.length ? t(".widget_settings_block__comments").html(i({
                ref: "/tmpl/settings/widgets/reviews.twig"
            }).render({
                reviews: e.reviews,
                count: e.reviews_count
            })).removeClass("hidden") : t(".widget_settings_block__comments").addClass("hidden")
        },
        renderRating: function(e, n, o, r) {
            var a = s.isUndefined(o) ? !1 : o
              , l = s.isUndefined(r) ? !1 : r;
            t(e).html(i({
                ref: "/tmpl/settings/widgets/rating.twig"
            }).render({
                rating: n,
                active: a,
                "class": l
            }))
        },
        widgetCardClearError: function(e) {
            t(e.currentTarget).closest(".widget_settings_block__input_field").find(".widget_settings_block__error").remove()
        },
        widgetCardCancel: function() {
            this.Modal.destroy()
        },
        validateOnSave: function(e) {
            var i = t(e.currentTarget)
              , n = i.data("onsave-destroy-modal")
              , o = i.attr("id")
              , r = i.data("id")
              , a = {};
            return i.hasClass("button-input-disabled") ? !1 : (o = o.toString().replace("save_", ""),
            a = this.widgets[o] || {},
            this.$modal_body.find(".js-widget-save").trigger("button:save:start"),
            void this.validate(this.widgets[o].settings, o).done(s.bind(function(e) {
                if (s.isFunction(this.widget_obj.callbacks.onSave)) {
                    var t = this.$modal_body.find("input[name=widget_active]:checked").val() || "N";
                    this.widget_obj.callbacks.onSave({
                        fields: e,
                        active: t
                    }) && this.post_settings({
                        code: o,
                        id: r,
                        first_load: a.first_load,
                        destroy_modal: n
                    }, e)
                }
            }, this)))
        },
        show_widget_overlay: function() {
            var e = t('<div class="default-overlay load-widget-overlay default-overlay-visible" id="widget_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>');
            t("body").append(e),
            e.trigger("overlay:show")
        },
        hide_widget_overlay: function() {
            t("#widget_loader").trigger("overlay:hide", {
                instantly: !0
            })
        }
    });
    return u
}),
define("lib/interface/account/development/widgets", ["require", "jquery", "twig", "lib/common/fn", "lib/common/urlparams", "FileAPI", "lib/common/browserdetect", "lib/components/base/modal", "lib/components/base/delete"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("lib/common/fn"), o = e("lib/common/urlparams"), r = (e("FileAPI"),
    e("lib/common/browserdetect")), a = e("lib/components/base/modal"), l = e("lib/components/base/delete"), c = "Mac" == r.OS ? "altKey" : "ctrlKey", d = {
        left: 37,
        right: 39
    };
    return t = function(e) {
        this.getEnvironment(e) && this.bindActions(e)
    }
    ,
    t.prototype.getEnvironment = function() {
        return this.objects = {
            $document: i(document)
        },
        this.actions_prefix = ".development:widgets",
        this.ajax_url = "/ajax/settings/development/",
        this.objects.$document.length > 0
    }
    ,
    t.prototype.changeDomain = function(e) {
        document.domain = e
    }
    ,
    t.prototype.submitForm = function(e) {
        var t = e.attr("target")
          , s = i('<iframe style="width:0; height:0; border:0; display:none;" name="' + t + '" id="' + t + '"></iframe>');
        i("#" + t).length < 1 && e.after(s),
        e.submit()
    }
    ,
    t.prototype.bindActions = function() {
        var e = this;
        this.objects.$document.on("submit" + this.actions_prefix, ".js-form-upload-file, .js-form-delete-file", function() {
            var t = i(this)
              , s = i("#" + t.attr("target")).get(0)
              , n = document.domain;
            return e.changeDomain(t.find("input.domain").val()),
            s.onload || (s.onload = function() {
                var t = i.parseJSON(s.contentWindow.document.body.innerHTML);
                e.showUploadMessage(t),
                e.changeDomain(n)
            }
            ),
            !0
        }).on("change" + this.actions_prefix, "input.js-input-file", function() {
            var t = i(this)
              , s = t.closest(".js-form-upload-file");
            e.submitForm(s)
        }).on("controls:change" + this.actions_prefix, ".js-select-status .control--select--input", function() {
            var t = i(this)
              , s = t.closest(".js-list-row")
              , n = {
                id: s.data("id"),
                code: s.data("code"),
                status: t.val()
            };
            i.post(e.ajax_url, {
                action: "change_status",
                data: n
            }, function(t) {
                e.showChangeStatusMessage(t.response)
            })
        }).on("click" + this.actions_prefix, "#upload_key_btn", _.bind(this.uploadWidgetClick, this)).on("click" + this.actions_prefix, "#widget_code", function() {
            i(this).removeClass("validate-has-error"),
            i("#widget_code_error").hide()
        }).on("click" + this.actions_prefix, ".library_hooks_wrapper .js-form-upload-file .button-input", function() {
            i(this).next().click()
        }).on("click" + this.actions_prefix, ".library_hooks_wrapper .js-form-delete-file .button-input:not(.button-input-disabled)", function() {
            var t = this
              , s = i(t).closest(".list-row").attr("data-code");
            new l({
                entity_name: s,
                accept: function() {
                    var s = i(t).closest(".js-form-delete-file")
                      , n = s.children("button").attr("id");
                    e.submitForm(s),
                    i.ajax({
                        url: "/ajax/widgets/edit/",
                        method: "POST",
                        data: {
                            action: "delete",
                            widget_id: n
                        }
                    }),
                    this.destroy()
                }
            })
        }).on("click" + this.actions_prefix, ".control--select--list--item", function() {
            i(this).closest(".js-select-status").css("z-index", "60")
        }).on("click" + this.actions_prefix, ".js-pagination-link", function(t) {
            e.navigatePage(null, parseInt(i(this).data("page")))
        }).on("click" + this.actions_prefix, "#list_pagination .pagination-buttons > button", function() {
            var t = i(this);
            t.hasClass("js-pagination-prev") ? e.navigatePage(-1) : t.hasClass("js-pagination-next") && e.navigatePage(1)
        }).on("keyup" + this.actions_prefix, function(t) {
            return i("input:focus").length > 0 ? !1 : void (t[c] && t.keyCode == d.right && !i("#card_holder").hasClass("content__card-holder-active") && (e.navigatePage(1),
            t.preventDefault()))
        }).on("keyup" + this.actions_prefix, function(t) {
            return i("input:focus").length > 0 ? !1 : void (t[c] && t.keyCode == d.left && !i("#card_holder").hasClass("content__card-holder-active") && (e.navigatePage(-1),
            t.preventDefault()))
        }).on("click" + this.actions_prefix, "#add-widget", _.bind(this.addWidgetClick, this))
    }
    ,
    t.prototype.uploadWidgetClick = s._preload(["/tmpl/list/common/pagination.twig", "/tmpl/list/item.twig"], "_uploadWidgetClick"),
    t.prototype._uploadWidgetClick = function() {
        var e = this
          , t = o.getParam("page") || 1;
        return i("#upload_key_btn").trigger("button:save:start"),
        i.ajax({
            url: "/ajax/settings/dev/",
            method: "POST",
            data: {
                action: "create",
                PAGEN_1: t,
                code: i("#widget_code").val()
            }
        }).done(function(n) {
            if (n.error)
                i("#upload_key_btn").trigger("button:load:stop"),
                i("#widget_code").val() || i("#widget_code").addClass("validate-has-error"),
                n.error && e.showCreateMessage(n.error);
            else {
                i("#upload_key_btn").trigger("button:saved", [!1, AMOCRM.lang.creation_key_generated]),
                setTimeout(function() {
                    i(".modal-body").trigger("modal:destroy")
                }, 600);
                var o, r = n.response.widgets.items, a = r[r.length - 1], l = {
                    is_first: !1,
                    is_last: !0,
                    page: t,
                    item: a,
                    fields: n.response.widgets.fields,
                    not_show_chbx: !0
                }, c = {
                    page: t,
                    max_page: n.response.widgets.pagination.total
                };
                i(".list__no-items").length > 0 && i(".list__no-items").remove(),
                i("#list_table .list-row").length < 51 ? (o = i(s({
                    ref: "/tmpl/list/item.twig"
                }).render(l)),
                i("#list_table").append(o)) : (i(".list__footer__items-pagination").empty(),
                i(".list__footer__items-pagination").append(i(s({
                    ref: "/tmpl/list/common/pagination.twig"
                }).render(c))))
            }
        }),
        !1
    }
    ,
    t.prototype.addWidgetClick = s._preload("/tmpl/development/widgets/create.twig", "_addWidgetClick"),
    t.prototype._addWidgetClick = function() {
        new a({
            class_name: "modal-api-add-widget",
            init: function(e) {
                e.trigger("modal:loaded").html(s({
                    ref: "/tmpl/development/widgets/create.twig"
                }).render()).trigger("modal:centrify").on("modal:destroy", _.bind(function() {
                    this.destroy(),
                    AMOCRM.router.navigate(o.setQueryParam({
                        reload: n.randHex()
                    }, {
                        replace: !0
                    }), {
                        trigger: !0,
                        replace: !0
                    })
                }, this))
            }
        })
    }
    ,
    t.prototype.navigatePage = function(e, t) {
        var i = o.getParam("page") || 1
          , s = t || parseInt(i) + (e || 1);
        AMOCRM.router && AMOCRM.router.navigate && AMOCRM.router.navigate(o.setParam({
            page: 1 === s ? "" : s
        }), {
            trigger: !0
        })
    }
    ,
    t.prototype.showUploadMessage = function(e) {
        new a({
            class_name: "modal-widget-error",
            init: function(t) {
                e.error ? this.showError(e.error, !1) : (this.showSuccess(),
                e.need_reload && i(document).trigger("page:reload"))
            }
        }),
        AMOCRM.widgets.clear_cache()
    }
    ,
    t.prototype.showChangeStatusMessage = function(e) {
        new a({
            class_name: "modal-widget-error",
            init: function(t) {
                e ? this.showSuccess() : this.showError(e, !1)
            }
        }),
        AMOCRM.widgets.clear_cache()
    }
    ,
    t.prototype.showCreateMessage = function(e) {
        var t = i("#widget_code_error");
        t.text(e).show()
    }
    ,
    t.prototype.destroy = function() {
        this.objects.$document.off(this.actions_prefix)
    }
    ,
    t
}),
define("lib/interface/account/development/webhooks", ["require", "underscore", "jquery", "lib/common/fn", "twig", "lib/components/base/form", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("lib/common/fn"), o = e("twig"), r = e("lib/components/base/form"), a = e("lib/components/base/modal");
    return t = function(e) {
        e.items || (e = s.parseJSON(s("#template_params_hooks").val())),
        this.getEnvironment(e) && (this.watchForm(),
        this.bindActions(e),
        this.objects.$hook_items.find("input").trigger("controls:change")),
        this.objects.$hook_items.children().length < 1 && this.objects.$add_hook.trigger("click")
    }
    ,
    t.prototype.watchForm = function() {
        var e = this;
        this.form = new r.View({
            el: this.objects.$form
        }),
        this.form.model.on("has_changes", function() {
            e.applyChanges(!0)
        }).on("has_reverted", function() {
            e.applyChanges(!1)
        })
    }
    ,
    t.prototype.applyChanges = function(e) {
        this.changes.has_changes = e,
        this.changes.can_save = e && !this.hasInvalidDestination(),
        this.changes.can_save ? (this.objects.$cancel_btn.css("display", "inline-block"),
        this.objects.$save_btn.trigger("button:save:enable")) : (this.objects.$cancel_btn.css("display", "none"),
        this.objects.$save_btn.trigger("button:save:disable"))
    }
    ,
    t.prototype.hasInvalidDestination = function() {
        var e = !1;
        return this.objects.$form.find("input.hook-destination").each(function() {
            var t = s(this).val();
            return t.length && n.isValidUrl(t) ? !0 : (e = !0,
            !1)
        }),
        e
    }
    ,
    t.prototype.getEnvironment = function(e) {
        var t;
        this.objects = {
            $document: s(document),
            $hook_items: s("#hook_items"),
            $form: s("#form_hooks"),
            $save_btn: s("#hook_save_btn"),
            $cancel_btn: s("#hook_cancel_btn"),
            $add_hook: s("#add-hook"),
            $remove_hook: s(".js-remove-hook"),
            $add_hook_error: s(".js-add-hook-error")
        },
        this.actions_prefix = ".development:webhooks",
        this.new_items_counter = 0,
        this.params = {
            actions: e.actions,
            ajax_url: e.ajax_url,
            limit: e.limit || 100
        },
        this.changes = {
            can_save: !1,
            has_changes: !1
        },
        this.new_items_count = 0,
        this.old_items_count = 0;
        for (t in e.items)
            e.items.hasOwnProperty(t) && ++this.old_items_count;
        return this.objects.$document.length > 0
    }
    ,
    t.prototype.bindActions = function() {
        var e = this;
        this.objects.$document.on(AMOCRM.click_event + this.actions_prefix, "#add-hook", i.bind(this.addHook, e)).on(AMOCRM.click_event + this.actions_prefix, ".js-remove-hook", function() {
            var t = s(this)
              , i = t.closest("div.hook_item");
            i.hasClass("hook-new") ? (i.remove(),
            --e.new_items_count) : (i.css("display", "none"),
            i.addClass("remove"),
            i.append('<input type="hidden" class="remove" name="hook[' + i.data("id") + '][marked]" value="removed"/>'),
            --e.old_items_count),
            i.find("input").trigger("controls:change"),
            e.form.checkDeleted()
        }).on("submit" + this.actions_prefix, "#form_hooks", function() {
            return e.objects.$hook_items.find(".hook_item").each(function() {
                var e = s(this);
                e.hasClass("remove") && (e.html('<input type="hidden" name="hook[' + e.data("id") + '][removed]" value="removed" /><input type="hidden" name="hook[' + e.data("id") + '][id]" value="' + e.data("id") + '" />'),
                e.find("input").trigger("controls:change"))
            }),
            e.form.checkDeleted(),
            e.changes.can_save ? (e.objects.$save_btn.trigger("button:save:start"),
            s.post(e.params.ajax_url, {
                action: "save_changes",
                data: e.form.model.toJSON()
            }, function(t) {
                "success" != t.state || t.errors ? e.objects.$save_btn.trigger("button:save:error") : s(t.result).each(function() {
                    var t;
                    i.each(this, function(e, i) {
                        var n = s("#hook_" + i);
                        1 == this[i].result && "delete" == this[i].action && n.remove(),
                        "insert" == this[i].action && (t = this[i].result,
                        n.removeClass("hook-new"),
                        n.attr("data-id", t),
                        n.find("input").each(function() {
                            var e = s(this).attr("name");
                            s(this).attr("name", e.replace(i, t))
                        }),
                        n.find("input:last").val(t),
                        n.attr("id", "hook_" + t))
                    }, this),
                    e.objects.$save_btn.removeClass("button-input_blue"),
                    e.objects.$cancel_btn.css("display", "none"),
                    e.objects.$save_btn.trigger("button:saved"),
                    e.objects.$hook_items.children().length < 1 && e.objects.$add_hook.trigger("click")
                })
            }),
            !1) : (e.objects.$save_btn.trigger("button:save:error"),
            !1)
        }).on("click" + this.actions_prefix, "#hook_cancel_btn", function() {
            return e.changes.can_save ? (e.objects.$form.find("div.hook_item").each(function() {
                var e = s(this);
                e.hasClass("hook-new") && e.remove(),
                e.hasClass("remove") && (e.css("display", "block").removeClass("remove"),
                e.find(".remove").remove()),
                e.find(".hook-destination").val(s(this).attr("value"))
            }),
            e.objects.$form.get(0).reset(),
            e.form.checkDeleted(),
            e.applyChanges(!1),
            !1) : !1
        })
    }
    ,
    t.prototype.showAddHookError = function() {
        (new a).showError(AMOCRM.lang.limit_error, !1)
    }
    ,
    t.prototype.addHook = function() {
        return this.objects.$hook_items.find(".hook_item").length >= this.params.limit ? void this.showAddHookError() : void e(["/frontend/build/templates/development.js"], i.bind(this._addHook, this))
    }
    ,
    t.prototype._addHook = function() {
        var e, t = s.extend(!0, {}, this.params.actions), n = {
            hook: {
                id: "new_item_" + ++this.new_items_counter,
                actions: {},
                "new": !0,
                sort: this.old_items_count + this.new_items_counter
            },
            lang: AMOCRM.lang
        }, r = "hook[" + n.hook.id + "]", a = 0;
        i.each(t, function(e, i) {
            t[i].name = r + "[" + this.params.actions[i].name + "]",
            t[i].id = n.hook.id + "_" + ++a
        }, this),
        n.hook.actions = t,
        e = s(o({
            ref: "/tmpl/development/hooks/item.twig"
        }).render(n)),
        this.objects.$hook_items.append(e),
        e.find("input").trigger("controls:change"),
        ++this.new_items_count
    }
    ,
    t.prototype.destroy = function() {
        this.objects.$document.off(this.actions_prefix)
    }
    ,
    t
}),
define("lib/pages/development", ["require", "jquery", "underscore", "lib/common/urlparams", "lib/core/page", "lib/interface/account/development/widgets", "lib/interface/account/development/webhooks"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/urlparams"), o = e("lib/core/page"), r = e("lib/interface/account/development/widgets"), a = e("lib/interface/account/development/webhooks");
    return t = o.extend({
        endpoint: "/ajax/settings/dev/",
        template: "/tmpl/development/page.twig",
        _getEndpoint: function(e) {
            var t = n.getQueryString();
            return e[0] && (t = n.setQueryParam({
                PAGEN_1: e[0]
            }, {
                querystring: t,
                only_query_string: !0
            })),
            this.endpoint + t
        },
        _makeRequest: function(e) {
            return i.ajax({
                url: this._getEndpoint.apply(this, [e.route_args]),
                data: this._getEndpointData.apply(this, [e.route_args]),
                type: "GET",
                dataType: "json"
            })
        },
        overlay_class_name: "aside-page-overlay",
        components: function() {
            return [[r, this.params.widgets], [a, this.params.hooks]]
        },
        construct: function(e) {
            e = s.isEmpty(e.response) ? {
                widgets: {},
                hooks: {}
            } : e.response,
            this.params = e || {}
        }
    })
}),
define("lib/pages/settings/safety", ["require", "jquery", "lib/core/page", "lib/common/fn", "lib/components/base/form", "lib/components/base/confirm", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i, s = e("jquery"), n = e("lib/core/page"), o = (e("lib/common/fn"),
    e("lib/components/base/form")), r = (e("lib/components/base/confirm"),
    e("lib/components/base/modal"));
    return i = o.Model.extend({
        save: function(e) {
            if (!this.is_saving) {
                this.is_saving = !0;
                var t = this.toJSON();
                ("0" == t["backup[add][type]"] || t["backup[add][type]"] && t["backup[edit][type]"]) && delete t["backup[add][type]"],
                s.ajax({
                    url: "/ajax/settings/security/",
                    type: "POST",
                    dataType: "json",
                    data: t
                }).always(_.bind(function() {
                    this.is_saving = !1
                }, this)).done(_.bind(function(t) {
                    "success" === t.state ? e.success.call(this, t) : e.error.call(this, t)
                }, this)).fail(_.bind(function() {
                    e.error.call(this, resp)
                }, this))
            }
        }
    }),
    t = n.extend({
        endpoint: "/ajax/settings/security/",
        template: "/tmpl/settings/safety/index.twig",
        overlay_class_name: "aside-page-overlay",
        frequencyWasChanged: !1,
        overlayContainer: function() {
            return s("#work_area")
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        _selectors: function() {
            return {
                cancel_btn: ".js-settings-cancel",
                save_btn: ".js-settings-save",
                form: "#safety_settings__form",
                make_bakup_now: "#make-backup-now",
                backup_frequency_selector: "#backup-frequency-selector"
            }
        },
        events: function() {
            return _.extend({}, n.prototype.events || {}, {
                "click .js-settings-cancel": "revertChanges",
                "click .js-settings-save": "saveChanges",
                "click #make-backup-now": "makeBackup",
                "click .control--select--list--item": "onBackupFrequencyChange"
            })
        },
        construct: function(e) {
            if (this.initParams(e || {}),
            !this.params.template.type || "plug" != this.params.template.type) {
                this.initPageChange(),
                this.initFormWatch();
                var t = s("#backup-error");
                if (t.length) {
                    if (t.val().length) {
                        var i = new r;
                        i.showError(t.val(), !1)
                    }
                    t.remove()
                }
            }
        },
        destruct: function() {
            AMOCRM.router.removePreventConfig()
        },
        initParams: function(e) {
            this.params = _.extend({
                data: {
                    ip_filter: {
                        active: !1,
                        list: "",
                        active_api: !1
                    }
                }
            }, e.response ? e.response : AMOCRM.constant("settings_safety_template_params"))
        },
        initPageChange: function() {
            AMOCRM.router.registerPreventConfig({
                accept: _.bind(function(e) {
                    _.isFunction(e) && e()
                }, this),
                decline: function() {}
            })
        },
        initFormWatch: function() {
            var e = this;
            this.changes = {
                has_changes: !1,
                can_save: !1
            },
            this.form = this._addComponent(o.View, {
                model: i,
                el: this._elem("form"),
                onSaveForm: _.bind(function() {
                    this.initParams({
                        res: {
                            response: this.params
                        }
                    }),
                    this._elem("save_btn").trigger("button:saved"),
                    e.frequencyWasChanged && "backup[add][type]" == e._elem("backup_frequency_selector").attr("name") && e._elem("backup_frequency_selector").attr("name", "backup[edit][type]")
                }, this),
                onSaveError: function(e) {
                    new r({
                        class_name: "safety_settings__save_error",
                        centrify_animation: !0,
                        init: function() {
                            this.showError(e.error, !1)
                        },
                        destroy: function() {}
                    })
                }
            }),
            this.form.model.on("has_changes", _.bind(function() {
                this.applyChanges(!0)
            }, this)).on("has_reverted", _.bind(function() {
                this.applyChanges(!1)
            }, this))
        },
        revertChanges: function() {
            this.form.revert(),
            this.applyChanges(!1)
        },
        saveChanges: function() {
            this.changes.can_save && this.form.save()
        },
        onBackupFrequencyChange: function() {
            this.frequencyWasChanged = !0
        },
        makeBackup: function(e) {
            var t = s(e.currentTarget);
            t.hasClass("button-input-disabled") || (t.addClass("button-input-disabled"),
            t.find(".button-input-inner__text").text(AMOCRM.lang.page.content.form.backup.backup_already_requested),
            s.ajax({
                url: "/ajax/settings/security/",
                type: "POST",
                dataType: "json",
                data: {
                    action: "apply_changes",
                    backup: {
                        add: {
                            type: 1
                        }
                    }
                },
                success: function(e) {
                    var t = new r;
                    t.showSuccess(AMOCRM.lang.page.content.form.backup.success, null, 4e3)
                },
                error: function(e) {
                    var i = new r;
                    i.showError(e.error, !1),
                    t.removeClass("button-input-disabled")
                }
            }))
        },
        applyChanges: function(e) {
            this.changes.has_changes = e || !1,
            AMOCRM.router.preventPageChange(this.changes.has_changes),
            this.changes.can_save = this.changes.has_changes,
            this.changes.can_save ? (this._elem("cancel_btn").css("display", "inline-block"),
            this._elem("save_btn").trigger("button:save:enable")) : (this._elem("cancel_btn").css("display", "none"),
            this._elem("save_btn").trigger("button:save:disable"))
        }
    })
}),
define("lib/pages/user_rights", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/page", "lib/components/base/form", "lib/components/base/pipeline", "lib/components/base/confirm", "lib/components/base/modal", "lib/components/lists/actions/reassign", "lib/interface/support"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("lib/core/page"), a = e("lib/components/base/form"), l = e("lib/components/base/pipeline"), c = e("lib/components/base/confirm"), d = e("lib/components/base/modal"), u = e("lib/components/lists/actions/reassign"), h = e("lib/interface/support"), _ = o.delay(), p = 13;
    return t = r.extend({
        endpoint: "/ajax/settings/users/",
        template: "/tmpl/settings/users/page.twig",
        preload: ["/tmpl/settings/users/head_item.twig", "/tmpl/controls/select.twig", "/tmpl/settings/users/item_rights.twig", "/tmpl/settings/users/item.twig", "/tmpl/settings/users/free_user.twig", "/tmpl/settings/users/quick_add.twig"],
        overlay_class_name: "aside-page-overlay",
        ns: ".page:user-rights",
        users: {},
        events: {
            "click .b-users__checkbox-is-admin": "userEditCheckboxes",
            "click .b-users__checkbox-is-active": "userEditCheckboxes",
            "click .plug-users_groups-body-button": "plugButtonClick",
            "click .b-users__group_list_item": "userSettingsTabClick",
            "controls:change .b-select__group .control--select--input": "userSettingsRightsChange",
            "click .user_rights__item-disabled-toggler:not(.user_rights__item-disabled-toggler-showed)": "userSettingsDisabledToggle",
            "keydown .pipeline_group__value": "groupNameKeydown",
            "click .js-group-add-btn": "groupAddClick",
            "click .pipeline_group__edit__btn": "groupEditClick",
            "click .pipeline_status__edit__delete": "groupDeleteClick",
            "click .pipeline_status__edit__save": "groupDoneClick",
            "click .pipeline_status__edit__cancel": "groupCancelClick"
        },
        start_rights: {
            leads: {
                add: {
                    "short": "A",
                    lang: AMOCRM.lang.property_deal_add,
                    right: "DEAL_ADD"
                },
                view: {
                    "short": "A",
                    lang: AMOCRM.lang.property_deal_view,
                    right: "DEAL_VIEW"
                },
                edit: {
                    "short": "A",
                    lang: AMOCRM.lang.property_edit,
                    right: "DEAL_EDIT"
                },
                "delete": {
                    "short": "A",
                    lang: AMOCRM.lang.property_delete,
                    right: "DEAL_DELETE"
                },
                "export": {
                    "short": "A",
                    lang: AMOCRM.lang.property_export,
                    right: "DEAL_EXPORT"
                }
            },
            contacts: {
                add: {
                    "short": "A",
                    lang: AMOCRM.lang.property_contact_add,
                    right: "CONTACT_ADD"
                },
                view: {
                    "short": "A",
                    lang: AMOCRM.lang.property_contact_view,
                    right: "CONTACT_VIEW"
                },
                edit: {
                    "short": "A",
                    lang: AMOCRM.lang.property_edit,
                    right: "CONTACT_EDIT"
                },
                "delete": {
                    "short": "A",
                    lang: AMOCRM.lang.property_delete,
                    right: "CONTACT_DELETE"
                },
                "export": {
                    "short": "A",
                    lang: AMOCRM.lang.property_export,
                    right: "CONTACT_EXPORT"
                }
            },
            companies: {
                add: {
                    "short": "A",
                    lang: AMOCRM.lang.property_company_add,
                    right: "COMPANY_ADD"
                },
                view: {
                    "short": "A",
                    lang: AMOCRM.lang.property_company_view,
                    right: "COMPANY_VIEW"
                },
                edit: {
                    "short": "A",
                    lang: AMOCRM.lang.property_edit,
                    right: "COMPANY_EDIT"
                },
                "delete": {
                    "short": "A",
                    lang: AMOCRM.lang.property_delete,
                    right: "COMPANY_DELETE"
                },
                "export": {
                    "short": "A",
                    lang: AMOCRM.lang.property_export,
                    right: "COMPANY_EXPORT"
                }
            }
        },
        _title: function() {
            return AMOCRM.lang.setting_users_head_title
        },
        construct: function(e) {
            var t = this;
            this.settings_params = AMOCRM.constant("settings_params") || e && e.response,
            AMOCRM.constant("settings_params", !1),
            this.params = e || {},
            this.account = AMOCRM.constant("account") || {},
            this.$manage = i("#pipeline_manage"),
            this.managers_numeral = AMOCRM.lang.users_title,
            this.user_rights = i.extend(!0, {}, this.start_rights),
            AMOCRM.inbox.read({
                type: "activity_action"
            }),
            this.select_rights = {
                0: {
                    id: "A",
                    class_name: "c-allowed",
                    option: "&#9679; " + AMOCRM.lang.property_allowed
                },
                2: {
                    id: "M",
                    class_name: "c-responsible",
                    option: "&#9679; " + AMOCRM.lang.property_if_responsible
                },
                3: {
                    id: "D",
                    class_name: "c-denied",
                    option: "&#9679; " + AMOCRM.lang.property_denied
                }
            },
            this.rights_weight = {
                A: 0,
                M: 2,
                D: 3,
                G: 1
            },
            "Y" == this.settings_params.params.arAccountProp.GROUPS_PAID && (this.select_rights[1] = {
                id: "G",
                class_name: "c-groupOnly",
                option: "&#9679; " + AMOCRM.lang.property_group_only
            }),
            this.pipeline = this._addComponent(l, {
                el: this.$el,
                x: !0,
                y: !0,
                no_filter: !0,
                manage: {
                    el: this.$manage,
                    tolerance: "touch",
                    drop: function(e, s) {
                        var n = i(this).data("group-id")
                          , o = t.getUserId(e.draggable)
                          , r = parseInt(e.draggable.closest(".js-pipeline-row").attr("data-id"));
                        t.userGroupChange({
                            group_old: r,
                            group_new: n,
                            user_id: o,
                            uiItem: e.draggable
                        })
                    }
                },
                appendTo: this.$work_area,
                change: function(e, i) {
                    var s = t.getUserId(e.item)
                      , n = i.item_old.closest(".js-pipeline-row");
                    t.userGroupChange({
                        group_old: i.item_old.attr("data-id"),
                        group_new: i.item_new.attr("data-id"),
                        user_id: s,
                        uiItem: e.item
                    }),
                    n.find(".b-users__item__hidden").length || n.find(".user_rights__item-disabled-toggler").hide()
                },
                immutable: function(e, t) {
                    e.item.removeAttr("style")
                }
            }),
            this.usersManage(this),
            this.checkDisabled(),
            this._$window.on("resize" + this.ns, function() {
                _(function() {
                    t.minHeight()
                })
            }),
            this.minHeight(),
            AMOCRM.router.registerPreventConfig({
                message: AMOCRM.lang.ur_has_changes_leave,
                accept_text: AMOCRM.lang.ur_has_changes_leave_btn,
                decline_text: AMOCRM.lang.button_cancel
            })
        },
        destruct: function() {
            this.initForm(this.$(".users__wrap.form"), !1),
            AMOCRM.router.removePreventConfig(),
            this._$window.off(this.ns)
        },
        userEditCheckboxes: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(".user_rights__item")
              , n = s.find(".b-users__group")
              , o = n.find(".b-users__group_list")
              , r = n.find(".b-cnt__group")
              , a = s.find(".b-users__checkbox-unsorted_access")
              , l = s.find(".b-users__checkbox-catalogs_access")
              , c = s.find(".is_active input").prop("checked") ? "Y" : "N"
              , d = s.find(".is_admin input").prop("checked") ? "Y" : "N"
              , u = s.find('[data-user-group="leads"] [data-type="add"]')
              , h = s.find('[data-user-group="leads"] [data-type="view"]')
              , _ = s.find('[data-user-group="contacts"] [data-type="add"]')
              , p = s.find('[data-user-group="companies"] [data-type="add"]');
            s.hasClass("new_user") && (c = "Y"),
            "Y" == c && "N" == d ? (o.show(),
            r.show(),
            l.show(),
            u.hasClass("A") && _.hasClass("A") && p.hasClass("A") ? a.show() : a.hide(),
            s.find(".is_mail").show()) : (o.hide(),
            r.hide(),
            a.hide(),
            l.hide(),
            s.find(".is_mail").hide(),
            h.hasClass("A") && (s.find(".is_mail input").prop("checked", !0),
            s.find(".catalogs_access input").prop("checked", !0)),
            u.hasClass("A") && _.hasClass("A") && p.hasClass("A") ? s.find(".unsorted_access input").prop("checked", !0) : s.find(".unsorted_access input").prop("checked", !1))
        },
        plugButtonClick: function(e) {
            i(e.currentTarget).hasClass("has_tariff") ? new h : AMOCRM.router.navigate("/settings/pay/", {
                trigger: !0
            })
        },
        userSettingsTabClick: function(e) {
            var t = i(e.currentTarget)
              , s = t.attr("data-user-group");
            this.$(".b-users__group_list_item").removeClass("active"),
            t.addClass("active"),
            this.$(".ct-group").hide(),
            this.$('[data-page-group="' + s + '"]').show()
        },
        userSettingsRightsChange: function(e, t) {
            var s, n = i(e.currentTarget), o = this, r = n.closest(".b-select__group").attr("data-id"), a = n.val(), l = n.closest(".user_rights__item"), c = n.parents(".user_rights__item__inner").find(".b-users__item").data("id") + "" || "new_user_id", d = n.closest(".ct-group").attr("data-page-group"), u = l.find(".is_mail input").prop("checked") ? "Y" : "N", h = l.find(".is_admin input").prop("checked") ? "Y" : "N";
            if (s = l.find(".is_active input").length ? l.find(".is_active input").prop("checked") ? "Y" : "N" : "Y",
            this.users[c].user_rights[d][r]["short"] = a,
            "Y" == u && "Y" == s ? o.blockRights.call(o, r, a, n, t) : this.blockRights.call(this, r, a, n, t),
            l.find('[data-user-group="' + d + '"] [data-type="' + r + '"]').attr("class", a),
            !t) {
                var _ = l.find('[data-user-group="leads"] [data-type="add"]')
                  , p = l.find('[data-user-group="contacts"] [data-type="add"]')
                  , m = l.find('[data-user-group="companies"] [data-type="add"]')
                  , f = l.find(".b-users__checkbox-catalogs_access")
                  , g = l.find(".b-users__checkbox-unsorted_access");
                h = l.find(".is_admin input").prop("checked") ? "Y" : "N",
                _.hasClass("A") && p.hasClass("A") && m.hasClass("A") && "N" == h ? g.show() : "Y" == h ? f.hide() : g.hide()
            }
            n.closest(".user_rights__item").find('[data-user-group="' + d + '"] [data-type="' + r + '"]').attr("class", a)
        },
        userSettingsDisabledToggle: function(e) {
            i(e.currentTarget).text(AMOCRM.lang.ur_disabled_caption).addClass("user_rights__item-disabled-toggler-showed").parent().find(".user_rights__item-disabled").removeClass("user_rights__item-disabled")
        },
        groupNameKeydown: function(e) {
            return e.keyCode == p ? (this.groupDone(i(e.currentTarget).closest(".pipeline_status__head").find(".pipeline_status__edit__save")),
            !1) : !0
        },
        groupAddClick: function(e) {
            i(e.currentTarget).hasClass("cant_add_group") || this.groupAdd()
        },
        groupEditClick: function(e) {
            this.groupEdit(i(e.currentTarget))
        },
        groupDeleteClick: function(e) {
            this.groupDelete(i(e.currentTarget))
        },
        groupDoneClick: function(e) {
            this.groupDone(i(e.currentTarget))
        },
        groupCancelClick: function() {
            var e = i("#group_id_new");
            e.find(".pipeline_group__value").val(""),
            e.find(".pipeline_status__head_title").removeClass("pipeline_status__head_title__edit-mode")
        },
        toggleActiveCheckbox: function() {
            var e = this.settings_params.params.arAccountProp.USERS_COUNT
              , t = this.$(".user_rights__free_user__inner").length
              , i = this.$(".user_rights__item:not(.pipeline_leads__item__deactivated)").length - t
              , s = this.$(".user_rights__item.pipeline_leads__item__deactivated");
            e > i || 0 > e ? s.find(".b-users__checkbox").show() : s.find(".b-users__checkbox").hide()
        },
        checkDisabled: function() {
            this.$(".js-pipeline-row").each(function() {
                var e = i(this)
                  , t = e.find(".user_rights__item-disabled-toggler");
                if (t.length > 0)
                    return t.show(),
                    void (t.hasClass("user_rights__item-disabled-toggler-showed") && e.find(".user_rights__item-disabled").removeClass("user_rights__item-disabled"));
                var s = e.find(".user_rights__item-disabled");
                s.length && (t = i('<div class="user_rights__item-disabled-toggler">' + s.length + " " + o.numeralWord(s.length, AMOCRM.lang.ur_disabled_counter) + "</div>"),
                i(s[0]).before(t),
                t.focus().addClass("user_rights__item-disabled-toggler-active"))
            })
        },
        groupAdd: function() {
            var e = i("#group_id_new");
            return e.find(".pipeline_status__head_title__edit-mode").length ? void (AMOCRM.is_touch_device || e.find(".pipeline_group__value").focus()) : void this.groupEdit(e)
        },
        groupEdit: function(e) {
            e = e.closest(".pipeline_cell");
            var t = e.closest(".pipeline_row")
              , i = t.find(".pipeline_status__head_title__edit-mode")
              , s = e.find(".pipeline_status__head_title")
              , n = s.find(".pipeline_group__value");
            return i.length && i.removeClass("pipeline_status__head_title__edit-mode"),
            s.addClass("pipeline_status__head_title__edit-mode"),
            n.show().removeAttr("readonly").focus().val(n.val()),
            !1
        },
        groupDelete: function(e) {
            var t = this
              , s = e.closest(".pipeline_cell")
              , n = s.find(".pipeline_status__head_title").attr("data-id");
            return "new" == n ? (s.remove(),
            this.$('.js-pipeline-row[data-id="' + n + '"]').parent().remove()) : new c({
                class_name: "modal-list",
                text: AMOCRM.lang.group_remove_item_confirm,
                accept: function() {
                    var e = this;
                    i.ajax({
                        url: "/ajax/groups/del/" + n + "/",
                        type: "post",
                        dataType: "json",
                        success: function(s) {
                            i(document).trigger("loaded_users:null"),
                            "ok" == s.status ? (e.requestSuccess(),
                            t.$('.js-pipeline-row[data-id="' + n + '"]').parent().remove(),
                            i("#group_id_" + n).parent().remove(),
                            i(document).trigger("resize.hs")) : e.requestFail(s.data, !1)
                        }
                    })
                }
            }),
            !1
        },
        groupDone: function(e) {
            var t = this
              , n = e.closest(".pipeline_cell")
              , o = n.find(".pipeline_group__head_title__text")
              , r = o.text()
              , a = n.find(".pipeline_group__value")
              , l = i.trim(a.val()) || ""
              , c = n.find(".pipeline_status__head_title").attr("data-id")
              , d = "/ajax/groups/add/"
              , u = function(e, t, i) {
                "new" !== t && (e.children(".pipeline_status__head").attr("id", "group_id_" + t),
                e.find(".pipeline_group__value").attr("readonly", "readonly"),
                e.find(".pipeline_group__head_title__text").text(i),
                e.find(".pipeline_status__head_title").attr("data-id", t)),
                e.find(".pipeline_group__value").val(i),
                e.find(".pipeline_status__head_title").removeClass("pipeline_status__head_title__edit-mode")
            };
            return l.length && l != r ? ("new" !== c && (d = "/ajax/groups/set/" + c + "/"),
            i.ajax({
                url: d,
                type: "post",
                dataType: "json",
                data: {
                    name: l
                },
                success: function(e) {
                    "ok" == e.status && (i(document).trigger("loaded_users:null"),
                    "new" == c ? (i("#group_id_new").parent().before('<div class="pipeline_cell pipeline_cell-head pipeline_cell-head-null pipeline_cell-head-group-' + e.data.ID + ' group-color-wrapper">' + s({
                        ref: "/tmpl/settings/users/head_item.twig"
                    }).render({
                        lang: AMOCRM.lang,
                        key: e.data.ID,
                        row: e.data.NAME,
                        params: t.settings_params.params
                    }) + "</div>"),
                    i("#pipeline_holder").find('.pipeline__body .js-pipeline-row[data-id="new"]').parent().before('<div class="pipeline_cell"><div class="pipeline_items__list js-pipeline-row ui-sortable" data-id="' + e.data.ID + '"></div></div>'),
                    t.pipeline.refresh(),
                    u(n, c, "")) : u(n, c, l))
                }
            })) : u(n, c, r),
            i(document).trigger("keyboard:hide").trigger("resize.hs"),
            !1
        },
        userSearch: function() {
            var e, t = i.trim(i("#users_search_input")[0].value).toString(), s = this.settings_params.params.users, n = t ? "addClass" : "removeClass", o = t ? "show" : "hide";
            i("#search_input_wrapper")[n]("list-top-search-options-showed"),
            i("#search_clear_button")[o]();
            for (e in s)
                if (s.hasOwnProperty(e) && s[e]) {
                    var r = i("#users_block_" + s[e].ID);
                    s[e].USERNAME.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s[e].LOGIN.toLowerCase().indexOf(t.toLowerCase()) >= 0 ? r.show() : r.hasClass("editing") || r.hide()
                }
        },
        check_user_rights: function(e) {
            if ("object" == typeof e) {
                var t = this.$(".js-quick-user-add");
                e.add ? t.removeClass("js-disabled").removeClass("button-input-disabled").addClass("button-input_blue") : t.addClass("js-disabled").addClass("button-input-disabled").removeClass("button-input_blue"),
                this.$(".users_pencil__item_mover").css("display", e.manage ? "inline-block" : "none")
            }
        },
        blockForExists: function(e) {
            var t = i(e).parents(".b-users__item_info");
            t.addClass("disabled-from-add"),
            t.find(".b-users__user_email_input").attr("data-in-another", "Y"),
            t.find(".b-users__user_name_input").attr("disabled", "disabled").val(this.hint),
            t.find(".b-users__user_passwd_input").attr("disabled", "disabled").val("password"),
            this.$(".b-users__user_email_input").removeClass("error_input"),
            this.error = !1,
            t.find(".error_message").html("").hide()
        },
        blockRights: function(e, t, s, n) {
            var o = i(s)
              , r = o.closest(".b-select");
            switch (e) {
            case "view":
                this.makeSelectByViewRight(r, t, n);
                break;
            case "edit":
                this.makeSelectByEditRight(r, t, n)
            }
        },
        makeSelectByViewRight: function(e, t, o) {
            var r, a = function(r) {
                e.nextAll(".b-select").each(n.bind(function(e, n) {
                    var a = i(n)
                      , l = a.find("input").val()
                      , c = o === !0 ? l : this.rights_weight[t] > this.rights_weight[l] ? t : l
                      , d = s({
                        ref: "/tmpl/controls/select.twig"
                    }).render({
                        id: "",
                        class_name: "rights_select",
                        name: a.find(".control--select--input").attr("name"),
                        selected: c,
                        items: r
                    });
                    a.hasClass("view-no-replace") ? a.removeClass("view-no-replace") : (a.find(".control--select").replaceWith(d),
                    a.find(".control--select--input").val(c).trigger("controls:change")),
                    a.hasClass("view-no-show") ? a.removeClass("view-no-show") : a.show()
                }, this))
            };
            switch (t) {
            case "A":
                a.call(this, this.select_rights);
                break;
            case "G":
                r = [this.select_rights[1], this.select_rights[2], this.select_rights[3]],
                a.call(this, r);
                break;
            case "M":
                r = [this.select_rights[2], this.select_rights[3]],
                a.call(this, r);
                break;
            case "D":
                e.nextAll(".b-select").each(function() {
                    i(this).hide().find(".control--select--input").val(t).trigger("controls:change")
                })
            }
        },
        makeSelectByEditRight: function(e, t, o) {
            var r, a = function(r) {
                e.nextAll(".b-select").each(n.bind(function(e, n) {
                    var a = i(n);
                    if ("delete" == a.find(".b-select__group").attr("data-id")) {
                        var l = a.find("input").val()
                          , c = o === !0 ? l : this.rights_weight[t] > this.rights_weight[l] ? t : l
                          , d = s({
                            ref: "/tmpl/controls/select.twig"
                        }).render({
                            id: "",
                            class_name: "rights_select",
                            name: a.find(".control--select--input").attr("name"),
                            selected: c,
                            items: r
                        });
                        a.addClass("view-no-replace").find(".control--select").replaceWith(d),
                        a.find(".control--select--input").val(c).trigger("controls:change"),
                        a.show()
                    }
                }, this))
            };
            switch (t) {
            case "A":
                a.call(this, this.select_rights);
                break;
            case "G":
                r = [this.select_rights[1], this.select_rights[2], this.select_rights[3]],
                a.call(this, r);
                break;
            case "M":
                r = [this.select_rights[2], this.select_rights[3]],
                a.call(this, r);
                break;
            case "D":
                e.nextAll(".b-select").each(function() {
                    "delete" == i(this).find(".b-select__group").attr("data-id") && i(this).addClass("view-no-show").hide().find(".control--select--input").val(t).trigger("controls:change")
                })
            }
        },
        initForm: function(e, t) {
            t !== !1 ? (this._form = this._addComponent(a.View, {
                el: e
            }),
            this._form.model.on("has_changes", n.bind(this._setFormChanges, this, !0)).on("has_reverted", n.bind(this._setFormChanges, this, !1))) : (this._setFormChanges(!1),
            this._form && (this._form.destroy(),
            this._form = null)),
            this.toggleActiveCheckbox()
        },
        _setFormChanges: function(e) {
            AMOCRM.router.preventPageChange(e),
            this.edit_has_changes = e,
            this.$(".save_user_rights").trigger("button:save:" + (e ? "enable" : "disable"))
        },
        userGroupChange: function(e) {
            void 0 !== e.group_new ? (i.ajax({
                url: "/ajax/groups/useradd/" + e.group_new + "/",
                type: "post",
                dataType: "json",
                data: {
                    userid: e.user_id
                },
                success: n.bind(function(t) {
                    if ("ok" == t.status) {
                        if (i(document).trigger("loaded_users:null"),
                        "free_users" == e.group_old) {
                            var n, o = JSON.parse(e.uiItem.find("textarea").text());
                            o.info.PROPERTY_FREE_USER = "N",
                            o.info.ACTIVE = "Y",
                            n = {
                                info: o.info,
                                user_rights: this.start_rights,
                                edit: !1,
                                add: !1
                            },
                            n.json = JSON.stringify(n),
                            e.uiItem.replaceWith(s({
                                ref: "/tmpl/settings/users/item.twig"
                            }).render({
                                user: n,
                                rights: this.select_rights,
                                lang: AMOCRM.lang,
                                params: this.settings_params.params
                            }))
                        }
                        i(".pipeline_leads__list").removeClass("pipeline_leads__list-loading-current pipeline_leads__list-loading"),
                        this.statusSuccess(e.uiItem, e.group_new, e.group_old),
                        e.uiItem.find(".b-users__item__hidden").removeClass("b-users__item__hidden")
                    }
                }, this)
            }),
            e.uiItem.removeAttr("style")) : this.removeConfirm(e)
        },
        removeConfirm: function(e) {
            var t = this
              , s = function() {
                e.uiItem.length && e.uiItem.removeClass("h-hidden").removeAttr("style")
            };
            n.isNaN(e.group_old) ? new c({
                class_name: "modal-list",
                text: AMOCRM.lang.user_remove_item_confirm,
                accept: function() {
                    var s = this;
                    e.uiItem.hide(),
                    i.ajax({
                        url: "/ajax/rights/del/" + e.user_id,
                        type: "POST",
                        dataType: "json",
                        success: function(n) {
                            "ok" === n.status ? (i(document).trigger("loaded_users:null"),
                            e.uiItem.remove(),
                            s.requestSuccess(AMOCRM.lang.multiple_delete_success_msg),
                            t.recalcUsers("free_users", "div")) : (e.uiItem.show(),
                            s.requestFail(n.data, !1)),
                            t.check_user_rights(n.rights)
                        }
                    })
                },
                destroy: s
            }) : new u({
                template: "/tmpl/common/modal/users_reassign.twig",
                template_params: {
                    title: AMOCRM.lang.user_remove_item_confirm,
                    with_remove: !0
                },
                exclude: [e.user_id],
                confirm: function() {
                    var s = this;
                    i.ajax({
                        url: "/ajax/rights/del/" + e.user_id,
                        data: {
                            main_user: this.modal.$modal.find(".control--select--input").val()
                        },
                        type: "POST",
                        dataType: "json",
                        success: function(n) {
                            "ok" === n.status ? (i(document).trigger("loaded_users:null"),
                            s.modal.showSuccess(),
                            e.uiItem.remove(),
                            t.recalcUsers(e.group_old.toString(), "div")) : s.modal.showError(n.data, !1),
                            t.check_user_rights(n.rights)
                        }
                    })
                },
                destroy: s
            })
        },
        getUserId: function(e) {
            return e.find(".b-users__item").attr("id").split("_")[1]
        },
        statusSuccess: function(e, t, s) {
            var n = i("#group_id_" + s)
              , r = n.find(".pipeline_status__head_info__count")
              , a = i("#group_id_" + t)
              , l = a.find(".pipeline_status__head_info__count")
              , c = (parseInt(l.text(), 10) || 0) + 1
              , d = (parseInt(r.text(), 10) || 0) - 1;
            r.html(d ? d + " " + o.numeralWord(d, this.managers_numeral) : AMOCRM.lang.ur_no_users),
            l.html(c ? c + " " + o.numeralWord(c, this.managers_numeral) : AMOCRM.lang.ur_no_users)
        },
        recalcUsers: function(e, t) {
            n.isNaN(e) && (e = "free_users");
            var s, r, a = i("#group_id_" + e), l = a.find(".pipeline_status__head_info__count");
            r = n.isNaN(parseInt(l.text(), 10)) ? 0 : parseInt(l.text(), 10),
            s = "div" == t ? r - 1 : r + 1,
            l.html(s ? s + " " + o.numeralWord(s, this.managers_numeral) : AMOCRM.lang.ur_no_users)
        },
        minHeight: function() {
            i("#pipeline_holder").css("min-height", i(window).height() - 84)
        },
        usersManage: function() {
            var e = this;
            this.$el.on("click" + this.ns, ".user_rights__item > .user_rights__item__inner", function(t) {
                var s = i(this).find(".users_pencil__item_mover, .pipeline_leads__item__buy_more");
                if (s.length) {
                    var n = s.closest(".user_rights__item")
                      , o = n.find(".user_rights__item__data").val()
                      , r = n.find(".b-users__item").data("id") + "";
                    e.users[r] || (e.users[r] = i.parseJSON(o)),
                    s.addClass("pipeline_leads__item__buy_more_d"),
                    s.removeClass("pipeline_leads__item__buy_more"),
                    e.editUser(s);
                    var a = s.parents(".user_rights__item ").find(".b-users__item__hidden").attr("data-id");
                    "undefined" != typeof a && i.ajax({
                        url: "/ajax/rights/edit/" + a,
                        dataType: "json",
                        type: "POST",
                        data: {},
                        success: function(t) {
                            "fail" == t.status && a && a.parents(".b-users__item_info").find(".b-users__user_name_input").attr("disabled", "disabled"),
                            e.check_user_rights(t.rights)
                        }
                    })
                }
            }).on("click" + this.ns, ".js-quick-user-add", function() {
                i(this).hasClass("js-disabled") || (i("#pipeline_holder").scrollLeft(0),
                i(".pipeline_leads__quick_add_button").trigger(AMOCRM.click_event))
            }).on("click" + this.ns, ".pipeline_leads__quick_add_button", function() {
                e.createUserForm(i(this))
            }).on("click" + this.ns, ".pipeline_users__quick_add_button", function() {
                e.createFreeUserForm(i(this))
            }).on("click" + this.ns, ".save_user_rights", function(t) {
                var s = i(this)
                  , n = s.closest(".pipeline_leads__item__buy_more_d");
                s.hasClass("button-input-disabled") || (n.length && (n.removeClass("pipeline_leads__item__buy_more_d"),
                n.addClass("pipeline_leads__item__buy_more")),
                e.saveUserrights(i(this), t),
                e.pipeline.enable())
            }).on("change" + this.ns, ".b-users__user_email_input", function(t) {
                var s = i(this)
                  , n = s.closest(".b-users__item_info");
                s.hasClass("ie-no-validate") && s.removeClass("ie-no-validate"),
                s.removeClass("error_input"),
                e.validateEmail(s, t),
                n.hasClass("disabled-from-add") && (n.removeClass("disabled-from-add"),
                n.find(".b-users__user_email_input").removeAttr("data-in-another"),
                n.find(".b-users__user_name_input").removeAttr("disabled", "disabled").val(""),
                n.find(".b-users__user_passwd_input").removeAttr("disabled", "disabled").val(""))
            }).on("blur" + this.ns, ".b-users__user_email_input", function() {
                i(this).closest(".b-users__item_mail").find(".user_in_another_account").trigger(AMOCRM.click_event)
            }).on("click" + this.ns, ".user_in_another_account", function() {
                e.blockForExists(this)
            }).on("click" + this.ns, ".button-cancel", function() {
                var t = i(this).closest(".users__wrap.form")
                  , n = i(this).closest(".user_rights__item");
                if (t.length) {
                    if (e.$el.find(".user_rights__item.new_user:not(.free_user)").length)
                        e.returnCreateButton();
                    else if (e.$el.find(".user_rights__item.new_user.free_user").length)
                        e.returnCreateButton(!0);
                    else {
                        var o = n.find(".user_rights__item__data").val()
                          , r = i.parseJSON(o);
                        "Y" == r.info.ACCOUNT_ADMIN_ROLE && n.find(".b-users__group__admin").show(),
                        n.removeClass("editing"),
                        n.find(".user_rights__item__inner").show(),
                        n.find(".b-users__group__wrapper").replaceWith(s({
                            ref: "/tmpl/settings/users/item_rights.twig"
                        }).render({
                            user: r,
                            lang: AMOCRM.lang,
                            params: {
                                can_edit_rights: e.settings_params.params.can_edit_rights
                            }
                        })),
                        n.hasClass("pipeline_leads__item__buy_more_d") && (n.removeClass("pipeline_leads__item__buy_more_d"),
                        n.addClass("pipeline_leads__item__buy_more")),
                        t.remove()
                    }
                    e.pipeline.enable(),
                    e.initForm(t, !1),
                    e.userSearch()
                }
            }).on("click" + this.ns, "#search_clear_button", function() {
                i(this).closest(".content__top__search").removeClass("list-top-search-options-showed"),
                i("#users_search_input").val(""),
                e.userSearch()
            }).on("input" + this.ns, "#users_search_input", function(t) {
                e.userSearch()
            }).on("controls:change:visual" + this.ns, "#user_edit_cb_admin,#user_edit_cb_active", function(e) {
                var t = i(this)
                  , s = t.closest("form")
                  , n = "user_edit_cb_active" == this.id
                  , o = n ? "show" : "hide"
                  , r = n ? "hide" : "show"
                  , a = n ? ",.b-users__checkbox-is-admin" : ""
                  , l = ".b-users__rights_settings,.b-users__group_list";
                n && (s.find(".b-users__item").toggleClass("b-users__item__hidden"),
                i("#user_edit_cb_admin").is(":checked") && (l = "",
                a = a.substr(1))),
                t.is(":checked") ? s.find(l + a)[o]() : s.find(l + a)[r]()
            }),
            this.error = !1,
            this.editUser = function(e) {
                var t = this
                  , r = t.$el.find(".users__wrap.form");
                t.pipeline.disable(),
                r.length && (t.$el.find(".user_rights__item.new_user").length ? (t.returnCreateButton(!0),
                t.returnCreateButton()) : (r.parent().removeClass("editing"),
                r.remove(),
                this.$el.find("div.user_rights__item__inner").show()));
                var a = e.closest(".user_rights__item")
                  , l = a.find(".user_rights__item__data").val()
                  , c = i.parseJSON(l);
                c.edit = !0,
                e.hasClass("user_rights__item") ? c.info.NAME = o.escapeHTML(e.find(".b-users__item_name span").html()) : c.info.NAME = o.escapeHTML(e.parent().find(".b-users__item_name span").html()),
                a.addClass("editing");
                var d = "/tmpl/settings/users/item.twig";
                n.isUndefined(c.info) || "Y" !== c.info.PROPERTY_FREE_USER || (d = "/tmpl/settings/users/free_user.twig"),
                a.append(s({
                    ref: d
                }).render({
                    user: c,
                    rights: t.select_rights,
                    lang: AMOCRM.lang,
                    params: t.settings_params.params
                })),
                a.children("div.user_rights__item__inner").hide(),
                a.find(".users__wrap.form").find(".control--select--input").trigger("controls:change", [!0]),
                t.initForm(a.find(".users__wrap.form"), !0)
            }
            ,
            this.saveUserrights = function(e, t) {
                var o, r, a = this, l = e.closest(".user_rights__item"), c = !!e.closest(".user_rights__item.new_user").length, h = !!e.closest(".user_rights__item.free_user").length, _ = l.find(".is_admin input").prop("checked") ? "Y" : "N", p = l.find(".is_active input").prop("checked") ? "Y" : "N", m = l.find(".unsorted_access input").prop("checked") ? "Y" : "N", f = l.find(".catalogs_access input").prop("checked") ? "Y" : "N", g = l.find(".is_mail input").prop("checked") ? "Y" : "N", b = {}, v = l.find(".user_rights__item__data"), y = a.$(".b-users__user_email_input"), w = a.$(".b-users__user_passwd_input");
                if (c && a.validateEmail(y, t),
                (a.$(".b-users__user_passwd_input").val() || c && !h) && a.validatePassword(i(".b-users__user_passwd_input"), t),
                v.length ? (r = v.val(),
                o = i.parseJSON(r),
                b.userid = o.info.ID) : (o = {},
                o.user_rights = this.user_rights),
                "Y" == e.attr("data-loading"))
                    return !1;
                if (e.trigger("button:save:start"),
                b.name = a.$(".b-users__user_name_input").val(),
                b.email = y.val(),
                b.passwd = w.val(),
                b.admin = _,
                b.active = p,
                b.unsorted = m,
                b.catalogs = f,
                b.mail = g,
                b.rights = {
                    DEAL_ADD: "A",
                    DEAL_VIEW: "A",
                    DEAL_EDIT: "A",
                    DEAL_DELETE: "A",
                    DEAL_EXPORT: "A",
                    CONTACT_ADD: "A",
                    CONTACT_VIEW: "A",
                    CONTACT_EDIT: "A",
                    CONTACT_DELETE: "A",
                    CONTACT_EXPORT: "A",
                    COMPANY_ADD: "A",
                    COMPANY_VIEW: "A",
                    COMPANY_EDIT: "A",
                    COMPANY_DELETE: "A",
                    COMPANY_EXPORT: "A"
                },
                ("N" == _ || c) && i(".rights_select .control--select--input").each(function() {
                    var e = i(this).val()
                      , t = i(this).closest(".b-select__group").find(".type_of_rights").val();
                    b.rights[t] = e
                }),
                !n.isUndefined(o.info) && "Y" === o.info.PROPERTY_FREE_USER || h) {
                    var C = b.name
                      , k = b.email;
                    b = {},
                    b.name = C,
                    b.email = k,
                    b.free_user = "Y"
                }
                var x = "";
                return x = c ? "/ajax/rights/add/" : "/ajax/rights/set/" + o.info.ID,
                this.error ? e.trigger("button:load:stop").trigger("button:save:disable") : i.ajax({
                    url: x,
                    type: "post",
                    dataType: "json",
                    data: b,
                    success: function(t) {
                        if (c)
                            if (e.trigger("button:saved"),
                            "error" == t.status) {
                                var n = e.parents(".user_rights__item__inner")
                                  , r = n.find(".error_message").last();
                                r.html(t.data).show()
                            } else
                                a.recalcUsers(e.parents(".pipeline_cell").attr("data-group-id"), ""),
                                a.addUser(t.data),
                                i(document).trigger("loaded_users:null");
                        else {
                            if ("error" == t.status) {
                                var h = new d;
                                return e.trigger("button:load:stop"),
                                e.trigger("button:save:enable"),
                                void h.showError(t.data, !1)
                            }
                            e.trigger("button:saved");
                            var _ = l.find(".user_rights__item__data")
                              , m = i.parseJSON(_.val());
                            t.info ? p = t.info.ACTIVE : "undefined" != typeof m.info.ACTIVE ? p = m.info.ACTIVE : "undefined" != typeof m.info.MAIL_ADMIN && (g = m.MAIL_ADMIN),
                            m.info.ACTIVE = p,
                            m.info.ACCOUNT_ADMIN_ROLE = t.data.ADMIN,
                            m.info.UNSORTED_ACCESS = t.info.UNSORTED_ACCESS,
                            m.info.CATALOGS_ACCESS = t.info.CATALOGS_ACCESS,
                            m.info.MAIL_ADMIN = g,
                            o.info.ACTIVE = p,
                            o.info.ACCOUNT_ADMIN_ROLE = t.data.ADMIN,
                            o.info.UNSORTED_ACCESS = t.info.UNSORTED_ACCESS,
                            o.info.CATALOGS_ACCESS = t.info.CATALOGS_ACCESS,
                            o.info.MAIL_ADMIN = g,
                            m.user_rights && i.each(m.user_rights, function(e, s) {
                                i.each(s, function(s, n) {
                                    t.data ? i.each(t.data, function(t, i) {
                                        n.right == t && (m.user_rights[e][s]["short"] = i);
                                    }) : t.changes && i.each(t.changes, function(t, i) {
                                        n.right == t && (m.user_rights[e][s]["short"] = i)
                                    })
                                })
                            }),
                            l.find(".b-users__group__wrapper").replaceWith(s({
                                ref: "/tmpl/settings/users/item_rights.twig"
                            }).render({
                                user: m,
                                rights: t.data,
                                lang: AMOCRM.lang
                            })),
                            _.val(JSON.stringify(m));
                            var f = l.closest(".js-pipeline-row");
                            if ("Y" === p) {
                                if (l.removeClass("pipeline_leads__item__buy_more_d"),
                                l.removeClass("pipeline_leads__item__buy_more"),
                                l.removeClass("pipeline_leads__item__deactivated"),
                                a.settings_params.params.can_edit_rights && l.removeClass("edit_rights_not_available"),
                                l.find(".b-users__item").removeClass("b-users__item__hidden"),
                                "error" != t.status) {
                                    i(document).trigger("loaded_users:null");
                                    var v = "" + f.find(".user_rights__item:not(.pipeline_leads__item__deactivated)").first().attr("id");
                                    v.length && l.attr("id") != v && l.detach().insertAfter("#" + v)
                                }
                            } else
                                t.changes && "Y" == t.changes.BLOCKED_BY_TARIFF && l.addClass("pipeline_leads__item__buy_more"),
                                l.addClass("pipeline_leads__item__deactivated"),
                                l.addClass("edit_rights_not_available"),
                                l.find(".b-users__item").addClass("b-users__item__hidden"),
                                "error" != t.status && (l.detach().appendTo(f),
                                i(document).trigger("loaded_users:null"));
                            var y = a.$(".users__wrap.form");
                            a.initForm(y, !1),
                            a.userSearch(),
                            y.remove(),
                            l.find(".b-users__item_name span").text(b.name),
                            i(".user_rights__item").removeClass("editing").children(".user_rights__item__inner").show(),
                            t.change_main && new u({
                                template: "/tmpl/common/modal/users_reassign.twig",
                                template_params: {
                                    title: AMOCRM.lang.users_reassign_confirm
                                },
                                exclude: [o.info.ID],
                                confirm: function() {
                                    var e = this;
                                    i.ajax({
                                        url: "/ajax/rights/set/" + o.info.ID,
                                        type: "post",
                                        dataType: "json",
                                        data: {
                                            main_user: this.modal.$modal.find(".control--select--input").val()
                                        },
                                        success: function(t) {
                                            a.check_user_rights(t.rights),
                                            "ok" == t.status ? e.modal.showSuccess() : e.modal.showError(t.data, !1)
                                        }
                                    })
                                }
                            })
                        }
                        a.check_user_rights(t.rights)
                    }
                }),
                !1
            }
            ,
            this.createFreeUserForm = function(e) {
                this.users.new_user_id = {};
                var t = this
                  , n = {
                    info: {
                        NAME: "",
                        LOGIN: "",
                        ALLOW_EDIT: !0
                    },
                    edit: !0,
                    add: !0
                }
                  , o = i(s({
                    ref: "/tmpl/settings/users/free_user.twig"
                }).render({
                    user: n,
                    lang: AMOCRM.lang,
                    params: t.settings_params.params
                }))
                  , r = this.$el.find(".users__wrap.form");
                r.length && (r.parent().find(".user_rights__item__inner:hidden").length && r.parent().find(".user_rights__item__inner").show(),
                r.remove()),
                this.returnCreateButton(),
                e.wrap('<div class="pipeline_leads__item user_rights__item free_user new_user editing"></div>').replaceWith(o),
                AMOCRM.is_touch_device || o.find(".b-users__item_mail input").addClass("ie-no-validate").focus(),
                t.initForm(o, !0)
            }
            ,
            this.createUserForm = function(e) {
                this.users.new_user_id = {},
                this.users.new_user_id.user_rights = i.extend(!0, {}, this.start_rights);
                var t = this
                  , n = {
                    info: {
                        NAME: "",
                        LOGIN: "",
                        ALLOW_EDIT: !0
                    },
                    user_rights: this.start_rights,
                    edit: !0,
                    add: !0
                }
                  , o = i(s({
                    ref: "/tmpl/settings/users/item.twig"
                }).render({
                    user: n,
                    rights: t.select_rights,
                    lang: AMOCRM.lang,
                    params: t.settings_params.params
                }))
                  , r = this.$el.find(".pipeline_cell:not(.free_users_cell) .users__wrap.form");
                r.length && (r.parent().find(".user_rights__item__inner:hidden").length && r.parent().find(".user_rights__item__inner").show(),
                r.remove()),
                this.returnCreateButton(!0),
                e.wrap('<div class="pipeline_leads__item user_rights__item new_user editing"></div>').replaceWith(o),
                AMOCRM.is_touch_device || o.find(".b-users__item_mail input").addClass("ie-no-validate").focus(),
                t.initForm(o, !0)
            }
            ,
            this.addUser = function(t) {
                var n, o, r = JSON.parse(t.json), a = {
                    info: {
                        ID: t.id,
                        NAME: t.name,
                        LOGIN: t.email,
                        USERNAME: t.name,
                        ACCOUNT_ADMIN_ROLE: t.info.ACCOUNT_ADMIN_ROLE,
                        ACTIVE: t.info.ACTIVE,
                        UNSORTED_ACCESS: t.info.UNSORTED_ACCESS,
                        CATALOGS_ACCESS: t.info.CATALOGS_ACCESS,
                        FREE_USER: !!t.is_free
                    },
                    json: t.json,
                    user_rights: r.user_rights,
                    edit: !1,
                    "class": "Y" != t.info.BLOCKED_BY_TARIFF || "N" != t.info.ACTIVE || t.is_free ? "" : "pipeline_leads__item__buy_more"
                }, l = {
                    user: a,
                    rights: e.select_rights,
                    lang: AMOCRM.lang,
                    params: e.settings_params.params
                };
                t.is_free ? (n = i(this.$el.find(".free_users_cell .pipeline_items__list.js-pipeline-row")),
                o = s({
                    ref: "/tmpl/settings/users/free_user.twig"
                }).render(l)) : (n = i(this.$el.find(".pipeline_items__list.js-pipeline-row").get(0)),
                o = s({
                    ref: "/tmpl/settings/users/item.twig"
                }).render(l)),
                "Y" == a.info.ACTIVE ? n.prepend(o) : n.append(o),
                this.checkDisabled(),
                e.initForm(e.$(".users__wrap.form"), !1);
                var c = t.is_free ? "free_users" : 0;
                this.recalcUsers(c, !1),
                this.returnCreateButton(t.is_free)
            }
            ,
            this.returnCreateButton = function(e) {
                var t, n, o, r = {};
                e ? (o = i(this.$el.find(".free_users_cell .pipeline_items__list.js-pipeline-row")),
                t = ".user_rights__item.new_user.free_user",
                r = {
                    class_name: "pipeline_users__quick_add_button",
                    free: !0
                }) : (o = i(this.$el.find(".pipeline_items__list.js-pipeline-row").get(0)),
                t = ".user_rights__item.new_user:not(.free_user)",
                r = {
                    class_name: "pipeline_leads__quick_add_button",
                    free: !1
                }),
                i(t).length && (i(t).remove(),
                n = s({
                    ref: "/tmpl/settings/users/quick_add.twig"
                }).render(r),
                o.prepend(n))
            }
            ,
            this.validatePassword = function(t, i) {
                var s = t.val()
                  , n = t.next(".error_message");
                return s.length < 6 && !t.is("[disabled]") ? (e.error = !0,
                n.html(AMOCRM.lang.user_rights_pass_incorrect).show(),
                t.focus(),
                !1) : (e.error = !1,
                !0)
            }
            ,
            this.validateEmail = function(t, s) {
                var n = t.val()
                  , r = t.next(".error_message")
                  , a = this.$(".save_user_rights")
                  , l = this;
                if ("Y" != t.attr("data-in-another")) {
                    if ("keyup" != s.type) {
                        if (!i.trim(n))
                            return e.error = !0,
                            r.html(AMOCRM.lang.user_rights_email_empty).show(),
                            !1;
                        if (!o.checkEmail(n))
                            return e.error = !0,
                            r.html(AMOCRM.lang.user_rights_email_incorrect).show(),
                            a.addClass("js-disabled").addClass("button-input-disabled").removeClass("button-input_blue"),
                            !1;
                        e.error = !1
                    }
                    return r.html("").hide(),
                    i.ajax({
                        url: "/ajax/rights/check",
                        dataType: "json",
                        type: "post",
                        data: {
                            email: n
                        },
                        success: function(i) {
                            "error" == i.status ? (r.html(AMOCRM.lang.user_rights_email_already_added).show(),
                            l.error = !0) : i.allow_set_profile ? (t.parents(".b-users__item_info").find(".b-users__user_name_input").removeAttr("disabled"),
                            t.parents(".b-users__item_info").find(".b-users__user_passwd_input").removeAttr("disabled"),
                            l.error = !1) : i.name ? (e.hint = i.name,
                            r.html(AMOCRM.lang.user_rights_user_in_another_account.replace(/###/g, i.hint)).show(),
                            t.addClass("error_input").closest(".b-users__item_info").find(".b-users__user_name_input,.b-users__user_passwd_input").attr("disabled", "disabled")) : (r.html(AMOCRM.lang.user_rights_email_already_added).show(),
                            l.error = !0),
                            e.check_user_rights(i.rights)
                        }
                    }),
                    !0
                }
            }
        }
    })
}),
define("lib/interface/settings/digital_pipeline/helper", ["require", "lib/common/fn", "lib/components/base/modal"], function(e) {
    "use strict";
    var t = e("lib/common/fn")
      , i = e("lib/components/base/modal");
    return {
        errorModal: function(e) {
            new i({
                init: function() {
                    this.showError(e, !1)
                }
            })
        },
        urlValidation: function(e) {
            var e = e ? e : this.form
              , i = e.model.get("url");
            return t.isValidUrl(i) ? !0 : (e.$el.find("input[name=url]").addClass("text-input_invalid"),
            e.$el.find(".digital-pipeline__edit-url-error").show(),
            !1)
        },
        startToken: function() {
            return AMOCRM.constant("settings_pipeline_template_params").data.triggers_token
        }
    }
}),
define("lib/interface/settings/digital_pipeline/url_form", ["require", "jquery", "underscore", "twig", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = (e("jquery"),
    e("underscore")), s = (e("twig"),
    e("lib/components/base/form"));
    return t = s.View.extend({
        events: function() {
            return i.extend({}, s.View.prototype.events || {}, {
                "click .digital-pipeline__edit-delete-url": "deleteUrlForm"
            })
        },
        initialize: function(e) {
            s.View.prototype.initialize.apply(this, arguments),
            this.onDeleteForm = e.onDeleteForm,
            this.event_forms = e.event_forms
        },
        deleteUrlForm: function(e) {
            e.stopPropagation(),
            this.remove(),
            this.onDeleteForm(this)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/site_settings", ["require", "jquery", "underscore", "twig", "lib/interface/settings/digital_pipeline/url_form", "lib/interface/settings/digital_pipeline/helper", "lib/core/view"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/interface/settings/digital_pipeline/url_form")
      , o = e("lib/interface/settings/digital_pipeline/helper")
      , r = e("lib/core/view")
      , a = r.extend({
        events: {
            "click .digital-pipeline__editable-event": "editForwardEventSettingsClick",
            "click .save-site": "saveSiteSettings",
            "click .digital-pipeline__add-url": "addNewUrlForm",
            "click .js-trigger-cancel": "closeSettings",
            "focus input": "removeInvalid"
        },
        templates: {
            site: "/tmpl/digital_pipeline/edit_templates/edit_site.twig",
            new_form: "/tmpl/digital_pipeline/edit_templates/edit_site_form.twig"
        },
        ns: "site_settings",
        _selectors: function() {
            return {
                edit_event_forms: ".digital-pipeline__edit-event-forms",
                edit_event_bubble: ".digital-pipeline__edit-event-bubble",
                edit_url_error: ".digital-pipeline__edit-url-error",
                edit_delete_url: ".digital-pipeline__edit-delete-url",
                button_input_add: ".button-input_add"
            }
        },
        script_code: function() {
            return {
                pixel: {
                    url: this.page_context.data.pixel.url,
                    token: this.page_context.data.pixel.token
                }
            }
        },
        getTemplate: function(e) {
            return s({
                ref: e
            })
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.settings = e.settings,
            this.$button = e.$button,
            this.page_context = e.page_context,
            this["new"] = e["new"],
            this.onOpen = e.onOpen || void 0,
            this.onChange = e.onChange,
            this.onClose = e.onClose,
            this.forms = [],
            this.onOpen && i.isFunction(this.onOpen) && this.onOpen(),
            this.render()
        },
        render: function() {
            var e, s = this, o = this.$button, r = this.settings, a = this["new"], l = t(this.getTemplate(this.templates.site).render({
                selected: r,
                script_code: this.script_code() ? this.script_code() : ""
            }));
            this.page_context.$el.append(l),
            this.setElement(l),
            this.page_context.hs.scrollPause(),
            this.eventBubblePositionChecker(o, l),
            e = l.find("form"),
            i.each(e, function(e) {
                var t = s._addComponent(n, {
                    el: e,
                    onDeleteForm: i.bind(s.onDeleteForm, s),
                    event_forms: s.forms
                });
                s.addCallbackForm.call(s, t, l)
            }),
            this.default_forms_count = this.forms.length,
            a && l.find(".button-cancel").hide(),
            this._$document.on("click" + this.ns, i.bind(this.closeSettings, this))
        },
        eventBubblePositionChecker: function(e, i) {
            var s = e.offset()
              , n = s.top
              , o = s.left
              , r = t(window).width()
              , a = i.outerWidth()
              , l = e.outerWidth()
              , c = e.outerHeight()
              , d = {};
            o + a > r ? (d.left = o - a + l - 65,
            i.addClass("digital-pipeline__edit-event-bubble_moved")) : d.left = o - 65,
            d.top = n + c + 4,
            i.css({
                top: d.top,
                left: d.left
            })
        },
        onDeleteForm: function(e) {
            var t = i.indexOf(this.forms, e);
            this.forms.splice(t, 1),
            this.checkFormChange(),
            this.canDeleteUrlCheck()
        },
        addCallbackForm: function(e) {
            var t = this;
            e.model.on("has_changes", function() {
                e.change = !0,
                t.checkFormChange()
            }).on("has_reverted", function() {
                e.change = !1,
                t.checkFormChange()
            }),
            t.forms.push(e),
            this.canDeleteUrlCheck()
        },
        checkFormChange: function() {
            var e, t = this.$el.find(".js-trigger-save");
            e = i.map(this.forms, function(e) {
                return e.change
            }),
            i.indexOf(e, !0) >= 0 || this.forms.length != this.default_forms_count ? t.trigger("button:save:enable") : t.trigger("button:save:disable")
        },
        addNewUrlForm: function(e) {
            var s, o = this.$el.find(this._selector("edit_event_forms")), r = t(this.getTemplate(this.templates.new_form).render());
            o.append(r),
            s = this._addComponent(n, {
                el: r,
                onDeleteForm: i.bind(this.onDeleteForm, this),
                event_forms: this.forms
            }),
            this.addCallbackForm.call(this, s),
            this.checkFormChange()
        },
        saveSiteSettings: function(e) {
            var s, n = this, r = this.settings, a = {}, l = !0;
            e.stopPropagation(),
            a = i.map(this.forms, function(e) {
                return s = o.urlValidation.call(n, e),
                s || (l = !1),
                e.model.toJSON()
            }),
            l ? (r.sites = [],
            a.length > 0 && t.extend(r.sites, a),
            this.onChange(),
            this.onClose()) : i.noop()
        },
        closeSettings: function(e) {
            e.stopPropagation(),
            e && !t(e.currentTarget).hasClass("button-cancel") && t(e.target).closest(this._selector("edit_event_bubble")).length > 0 || this["new"] || (e.stopPropagation(),
            this.onClose())
        },
        removeInvalid: function(e) {
            t(e.currentTarget).removeClass("text-input_invalid"),
            this._findElem("edit_url_error").hide()
        },
        canDeleteUrlCheck: function() {
            var e = this._findElem("edit_delete_url");
            this.forms.length > 1 ? e.show() : e.hide()
        }
    });
    return a
}),
define("lib/interface/settings/digital_pipeline/mixins/resize_mixin", ["require", "jquery", "underscore", "twig"], function(e) {
    var t = e("jquery")
      , i = e("underscore");
    e("twig");
    return {
        cell_width: 292,
        makeClone: function(e, i, s) {
            var n = t(e.currentTarget)
              , o = n.closest(".digital-pipeline__business_processes").data("id")
              , r = t("[data-id=" + o + "]").find(".digital-pipeline__business_processes-inner")
              , a = t('<div class="cloned ' + i + '"></div>')
              , l = t(r[0]).position()
              , c = 0
              , d = 0
              , u = this;
            return r.each(function(e, i) {
                (t(i).closest("[data-stage-id=142]").length > 0 || t(i).closest("[data-stage-id=143]").length > 0) && c++,
                d += t(i).outerWidth() + 24,
                t(i).closest("[data-stage-id=142]").length > 0 && (d += 44,
                u.long_clone = !0)
            }),
            r.length === c && (d -= 44,
            u.long_clone = !1),
            r.clone().appendTo(a),
            a.outerWidth(d - 24).appendTo(n.closest(".digital-pipeline__row")).css({
                top: l.top,
                left: l.left
            }),
            a.addClass(s),
            r.hide(),
            this.cacheCloneSet(a),
            a
        },
        initDrag: function(e) {
            if (this.onChangeProcessGet() || e.target != e.currentTarget)
                return void e.stopPropagation();
            this.destroyClone(!0);
            var i, s = t(e.currentTarget), n = s.closest(".digital-pipeline__business_processes").data("id"), o = this, r = this.makeClone(e, "drag", "draging");
            this.ui = {},
            r.draggable({
                axis: "x",
                cancel: ".digital-pipeline__buisness-process-dragbutton",
                cursor: "move",
                scroll: !0,
                scrollSensitivity: 30,
                scrollSpeed: 30,
                containment: ".digital-pipeline__row_handler-row",
                start: function(e, t) {
                    o.ui.startPosition = t.position.left
                },
                stop: function(e, t) {
                    o.destroyClone.call(o, !0),
                    o.ui.stopPosition = t.position.left,
                    i = o.ui.startPosition - o.ui.stopPosition,
                    o.changeDragStatuses(n, i),
                    o._$document.trigger("rerender:row", {
                        group_id: o.group_id
                    })
                }
            })
        },
        initLeftResize: function(e) {
            if (this.destroyDrag(!0),
            this.onChangeProcessGet())
                return void e.stopPropagation();
            var i, s = t(e.currentTarget), n = s.closest(".digital-pipeline__business_processes").data("id"), o = this, r = this.makeClone(e, "drag", "left-resize"), a = r.width();
            this.ui = {},
            r.draggable({
                axis: "x",
                cursor: "col-resize",
                scroll: !0,
                scrollSensitivity: 30,
                scrollSpeed: 30,
                snapMode: "inner",
                grid: [o.cell_width, 0],
                start: function(e, t) {
                    o.ui.startPosition = t.position.left,
                    o.ui.lastPosition = t.position.left,
                    r.find(".digital-pipeline__buisness-process-dragbutton").hide()
                },
                drag: function(e, t) {
                    var i = i = o.ui.startPosition - t.position.left;
                    return r.width(a + i),
                    o.ui.lastPosition = t.position.left,
                    r.width() < 300 && 0 > i ? !1 : void 0
                },
                stop: function(e, t) {
                    o.destroyClone.call(o, !0),
                    o.ui.stopPosition = t.position.left,
                    i = o.ui.startPosition - o.ui.stopPosition,
                    o.changeDragStatuses(n, i, !0),
                    o._$document.trigger("rerender:row", {
                        group_id: o.group_id
                    })
                }
            })
        },
        changeDragStatuses: function(e, t, s) {
            var n = Math.floor(Math.abs(t) / this.cell_width)
              , o = this.business_processes.get(e)
              , r = o.get("statuses")
              , a = AMOCRM.constant("settings_pipeline_template_params").data.statuses
              , l = i.map(a, function(e) {
                return e.id
            })
              , c = r[r.length - 1]
              , d = r[0]
              , u = i.indexOf(l, c)
              , h = i.indexOf(l, d);
            if (0 > t)
                for (var _ = 0; n > _; _++)
                    r.shift(),
                    s || r.push(l[u + _ + 1]);
            else
                for (var _ = 0; n > _; _++)
                    r.unshift(l[h - _ - 1]),
                    s || r.pop();
            this.business_processes.trigger("change")
        },
        preStartDrag: function() {
            this.onChangeProcessSet(!0)
        },
        destroyDrag: function() {
            var e = this.cacheCloneGet();
            return e ? void (this.onChangeProcessGet() || (t(".digital-pipeline__business_processes-inner").show(),
            e[0].draggable && e.draggable("destroy"),
            e.off(),
            e.remove())) : !1
        },
        initResize: function(e) {
            if (e.stopPropagation(),
            !this.onChangeProcessGet()) {
                this.destroyClone(!0);
                var i, s = t(e.currentTarget), n = s.closest(".digital-pipeline__business_processes").data("id"), o = this, r = this.makeClone(e, "resize");
                r.resizable({
                    maxHeight: 50,
                    minHeight: 50,
                    handles: {
                        e: r.find(".digital-pipeline__buisness-process-dragbutton_last"),
                        w: r.find(".digital-pipeline__buisness-process-dragbutton_first")
                    },
                    grid: [o.cell_width, 0],
                    start: function(e, t) {
                        r.find(".digital-pipeline__buisness-process-dragbutton").hide()
                    },
                    stop: function(e, t) {
                        i = t.originalSize.width - t.size.width,
                        o.destroyClone.call(o, !0),
                        o.changeResizeStatuses(n, i),
                        o._$document.trigger("rerender:row", {
                            group_id: o.group_id
                        }),
                        o.long_clone = !1
                    },
                    resize: function(e, t) {
                        o.long_clone && r.outerWidth(r.outerWidth() - 44)
                    }
                })
            }
        },
        changeResizeStatuses: function(e, t) {
            var s;
            s = 0 > t ? Math.ceil(Math.abs(t) / this.cell_width) : Math.floor(Math.abs(t) / this.cell_width);
            var n = this.business_processes.get(e)
              , o = n.get("statuses")
              , r = AMOCRM.constant("settings_pipeline_template_params").data.statuses
              , a = i.map(r, function(e) {
                return e.id
            })
              , l = o[o.length - 1]
              , c = i.indexOf(a, l)
              , d = c + s + 1;
            if (0 > t)
                for (var u = 1 + c; d > u; u++)
                    o.push(a[u]);
            else
                for (var u = 1 + c; d > u; u++)
                    o.pop();
            this.business_processes.trigger("change")
        },
        preStartResize: function(e) {
            this.onChangeProcessSet(!0)
        },
        destroyResize: function(e) {
            var i = this.cacheCloneGet();
            return i ? void (this.onChangeProcessGet(!1) || (t(".digital-pipeline__business_processes-inner").show(),
            i[0].resizable && i.resizable("destroy"),
            i.off(),
            i.remove())) : !1
        },
        destroyClone: function(e) {
            e && this.onChangeProcessSet(!1),
            this.destroyResize(),
            this.destroyDrag()
        }
    }
}),
define("lib/interface/settings/digital_pipeline/salesbot/markers", ["require", "jquery", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("lib/common/fn");
    return {
        insertMarker: function(e) {
            var s, n, o, r, a = t(e.target).closest(this._selector("marker_row")).find(this._selector("marker_value")), l = a.text(), c = this._findElem("bot_message");
            "Y" === a.data("single") ? (s = c.prop("selectionStart"),
            r = c.val(),
            n = r.substring(0, s),
            o = r.substring(s, r.length),
            c.val(n + l + o).trigger("change"),
            i.setCursorPosition(c, n.length + l.length)) : (l = t.parseJSON(l),
            c.val(JSON.stringify(l, null, 4)).change())
        }
    }
}),
define("lib/interface/settings/digital_pipeline/matching/model", ["require", "backbone"], function(e) {
    "use strict";
    var t = e("backbone");
    return t.Model.extend({})
}),
define("lib/interface/settings/digital_pipeline/matching/collection", ["require", "backbone", "lib/interface/settings/digital_pipeline/matching/model"], function(e) {
    "use strict";
    var t = e("backbone")
      , i = e("lib/interface/settings/digital_pipeline/matching/model");
    return t.Collection.extend({
        model: i
    })
}),
define("lib/interface/settings/digital_pipeline/matching/builder", ["require", "underscore", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = (e("lib/common/fn"),
    {
        data: {
            leads: {},
            customers: {}
        },
        available: {
            leads: {},
            customers: {}
        },
        inversion: {
            leads: {},
            customers: {}
        }
    });
    return {
        build: function(e, i) {
            t.each(e, function(e) {
                t.each(i, function(t) {
                    e.type === t.type && this.addMatch(e.id, t.id, !1)
                }, this)
            }, this),
            this.buildInversion(e, i)
        },
        buildInversion: function(e, i) {
            t.each(e, function(e) {
                t.each(i, function(t) {
                    this.is_in("leads", e.id, t.id) || this.addMatch(e.id, t.id, !0)
                }, this)
            }, this)
        },
        is_in: function(e, t, i) {
            var s = !1
              , n = this.get(e, t);
            return n && (s = -1 !== n.indexOf(i.toString())),
            s
        },
        has: function(e, s, n) {
            var o = this._getKey(n);
            return t.has(i[o][e], s)
        },
        get: function(e, t, s) {
            var n = this._getKey(s);
            return this.has(e, t, s) ? i[n][e][t] : null
        },
        addMatch: function(e, t, s) {
            var n = this._getKey(s);
            e = e.toString(),
            t = t.toString(),
            i[n].leads[e] || (i[n].leads[e] = []),
            i[n].customers[t] || (i[n].customers[t] = []),
            i[n].leads[e].push(t),
            i[n].customers[t].push(e),
            "data" === n && (i.available.customers[t] || (i.available.customers[t] = []),
            i.available.leads[e] || (i.available.leads[e] = []),
            i.available.leads[e].push(t),
            i.available.customers[t].push(e))
        },
        clearAvailable: function() {
            t.each(["leads", "customers"], function(e) {
                i.available[e] = {}
            }, this)
        },
        addAvailable: function(e, s) {
            var n = String(e)
              , s = "leads" === s ? "customers" : "leads";
            t.each(i.data[s], function(e, o) {
                t.indexOf(e, n) > -1 && t.indexOf(i.available[s][o], n) < 0 && i.available[s][o].push(n)
            }, this)
        },
        removeAvailable: function(e, s) {
            var n = String(e)
              , s = "leads" === s ? "customers" : "leads";
            i.available[s] = t.reduce(i.available[s], function(e, i, s) {
                return e[s] = t.without(i, n),
                e
            }, {}, this)
        },
        getAvailable: function(e, t) {
            var s = String(e);
            if (!i.available[t][s])
                throw new Error("Wrong element id: " + s);
            return i.available[t][s]
        },
        _getKey: function(e) {
            return e ? "inversion" : "data"
        }
    }
}),
define("lib/interface/settings/digital_pipeline/matching/item_view", ["require", "twig", "jquery", "underscore", "lib/core/view", "lib/common/fn", "lib/interface/settings/digital_pipeline/matching/builder"], function(e) {
    "use strict";
    var t = e("twig")
      , i = e("jquery")
      , s = e("underscore")
      , n = e("lib/core/view")
      , o = e("lib/common/fn")
      , r = e("lib/interface/settings/digital_pipeline/matching/builder")
      , a = "/tmpl/digital_pipeline/matching_row.twig";
    return n.extend({
        el: null,
        _template: a,
        selector_lists_items: null,
        model: null,
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this.model.on("filter", this._filterList, this)
        },
        _classes: function() {
            return {
                selector: "js-matching-select",
                selected: "control--select--list--item-selected",
                leads_selector_wrapper: "js-leads",
                customers_selector_wrapper: "js-customers",
                selector_list_item: "control--select--list--item"
            }
        },
        _showFields: function(e, t) {
            e.push("empty"),
            s.each(e, function(e) {
                t.filter(".js-" + e).removeClass("hidden")
            })
        },
        _setLastVariant: function(e, t) {
            return this._setVariant(e, t, "last")
        },
        _setFirstVariant: function(e, t) {
            return this._setVariant(e, t, "first")
        },
        _setVariant: function(e, t, i) {
            var s, n;
            return s = t[i](),
            n = e.find("input"),
            s.hasClass(this._class("selected")) || (n.val(s.data("value")),
            n.trigger("controls:change")),
            s
        },
        events: function() {
            var e = s.extend({}, s.result(n.prototype, "events"));
            return e["controls:select:open " + this._selector("selector")] = "selectField",
            e["controls:change"] = "selectChanged",
            e
        },
        _filterList: function(e) {
            var t, n, o, a, l, c, d = this, u = e.values, h = [].length;
            s.each(["customers", "leads"], function(e) {
                t = d._elem(e + "_selector_wrapper").find(d._selector("selector_list_item")),
                l = this.inverseElementType(e),
                a = String(this.model.get(l)),
                t.each(function() {
                    var t = i(this);
                    return n = String(t.data("value")),
                    0 === parseInt(n) ? (t.removeClass("no-available"),
                    void t.removeClass("used")) : (o = s.indexOf(u[e], n) > -1,
                    h = r.getAvailable(n, e).length,
                    c = 0 !== parseInt(a) ? r.getAvailable(a, l).length : !1,
                    h || d.model.get(e) === n || c ? t.removeClass("no-available") : t.addClass("no-available"),
                    void (o && d.model.get(e) !== n ? t.addClass("used") : t.removeClass("used")))
                })
            }, this)
        },
        selectField: function(e) {
            var t, s;
            t = i(e.target),
            s = t.find('li[data-value="0"] span'),
            s.text(o.i18n("field_not_selected")).attr("title", o.i18n("field_not_selected"))
        },
        inverseElementType: function(e) {
            return "leads" === e ? "customers" : "leads"
        },
        selectChanged: function(e) {
            var t, s, n, o, a, l, c, d, u, h, _;
            return t = i(e.target),
            s = t.closest(this._selector("selector")),
            n = s.hasClass("js-leads") ? "leads" : "customers",
            o = t.val(),
            a = this._elem("selector").not(".js-" + n),
            l = a.find("li"),
            c = a.find(this._selector("selected")),
            d = r.get(n, o, !1) || [],
            h = {
                element_type: n,
                field_id: this.model.get(n)
            },
            this.model.set(n, o),
            _ = {
                prev: h,
                curr: {
                    element_type: n,
                    field_id: o
                },
                model_id: this.model.cid
            },
            this.model.trigger("selected", _),
            0 === o || "0" === o ? void l.removeClass("hidden") : (l.addClass("hidden"),
            this._showFields(d, l),
            u = l.not(".hidden, .used"),
            u.length < 3 && (2 === u.length && (c = this._setLastVariant(a, u)),
            a.attr("disabled", "Y")),
            void ((0 === c.length || c.hasClass("hidden")) && this._setFirstVariant(a, u)))
        },
        render: t._preload([a], "_render"),
        _render: function(e, i) {
            var n, o, r = {};
            r.leads = this.model.get("leads"),
            r.customers = this.model.get("customers"),
            n = s.uniqueId("matching_item_"),
            o = {
                left_select: this.buildSelect(e, n, "leads"),
                right_select: this.buildSelect(i, n, "customers")
            },
            r.leads && (o.left_select.selected = r.leads),
            r.customers && (o.right_select.selected = r.customers),
            this.$el.html(t({
                ref: this._template
            }).render(o)),
            s.defer(s.bind(function() {
                this.$("input").trigger("controls:change")
            }, this)),
            this.trigger("render:finished")
        },
        buildSelect: function(e, t, i) {
            var s = o.convertElementType(i, "single");
            return {
                class_name: "js-matching-select matching-select js-" + i,
                items: e || [],
                name: "props_match][" + t + "][" + s + "_key"
            }
        }
    })
}),
define("lib/interface/settings/digital_pipeline/leads_cf_matching", ["require", "twig", "jquery", "underscore", "lib/core/view", "lib/common/fn", "lib/interface/settings/digital_pipeline/matching/collection", "lib/interface/settings/digital_pipeline/matching/item_view", "lib/interface/settings/digital_pipeline/matching/builder"], function(e) {
    "use strict";
    var t, i = e("twig"), s = e("jquery"), n = e("underscore"), o = e("lib/core/view"), r = e("lib/common/fn"), a = e("lib/interface/settings/digital_pipeline/matching/collection"), l = e("lib/interface/settings/digital_pipeline/matching/item_view"), c = {
        contacts: [],
        leads: [{
            id: "price",
            type: "numeric",
            name: "Budget"
        }, {
            id: "tags",
            type: "tags",
            name: "Tags"
        }, {
            id: "contacts",
            type: "contacts",
            name: "Contacts"
        }, {
            id: "company",
            type: "company",
            name: "Company"
        }],
        companies: [],
        customers: [{
            id: "next_date",
            type: "date",
            name: "Next purchase"
        }, {
            id: "next_price",
            type: "numeric",
            name: "Expected amount"
        }, {
            id: "tags",
            type: "tags",
            name: "Tags"
        }, {
            id: "contacts",
            type: "contacts",
            name: "Contacts"
        }, {
            id: "company",
            type: "company",
            name: "Company"
        }]
    }, d = {
        price: !1,
        tags: !1,
        contacts: !1,
        company: !1,
        props_match: []
    }, u = {
        price: "next_price",
        tags: "tags",
        contacts: "contacts",
        company: "company"
    }, h = e("lib/interface/settings/digital_pipeline/matching/builder");
    return t = o.extend({
        _fields: {
            leads: [],
            customers: []
        },
        _custom_fields: {
            leads: [],
            customers: []
        },
        _select_collection: null,
        _settings: {},
        _$container: null,
        _$dp_body: null,
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.parseSettings(e.settings),
            this._$container = this.$el.closest(".digital-pipeline__edit-bubble"),
            this._$dp_body = s(".digital-pipeline__body"),
            this._select_collection = new a,
            this._select_collection.on("add", this.renderSelector, this),
            this._select_collection.on("selected", this.hideItemsInList, this),
            this.getCustomFields().then(n.bind(function() {
                this.setElement(this._selector("container")),
                this.render(n.bind(function() {
                    this.trigger("loading:finished")
                }, this))
            }, this))
        },
        destroy: function() {
            h.clearAvailable(),
            o.prototype.destroy.apply(this, arguments)
        },
        loadCustomFields: function() {
            return new Promise(n.bind(function(e, t) {
                var i = s.get("/ajax/settings/custom_fields/", {}, n.bind(function(t) {
                    var i;
                    if (t = r.cleanResponse(t),
                    !t || !t.params || !t.params.fields)
                        throw new Error("Invalid response data: " + JSON.stringify(t));
                    if (i = t.params.fields,
                    !t || !t.params || !t.params.fields)
                        throw new Error("Invalid response data: " + JSON.stringify(t));
                    this.parseFields(i.leads, "leads"),
                    this.parseFields(i.customers, "customers"),
                    this.buildMatches(),
                    this.cleanWithoutMatch(),
                    e(t)
                }, this), "json");
                i.fail(t)
            }, this))
        },
        getCustomFields: function() {
            return new Promise(n.bind(function(e) {
                return this._fields.leads.length > 0 && this._fields.customers.length > 0 ? (this.buildMatches(),
                void e()) : void this.loadCustomFields().then(e)
            }, this))
        },
        parseFields: function(e, t) {
            var i, s;
            i = n.map(c[t], function(e) {
                return e.name = r.i18n(e.name),
                e
            }),
            s = n.invert(AMOCRM.cf_types),
            n.each(e, function(e, t) {
                0 === t.indexOf("f_") && !n.isEmpty(e) && n.isObject(e) && (e.id = parseInt(e.id),
                e.type_id = parseInt(e.type_id),
                s[e.type_id] && (e.type = s[e.type_id],
                i.push(e)))
            }, this),
            this._custom_fields[t] = n.map(i, function(e) {
                return n.pick(e, ["id", "type"])
            }),
            i = n.map(i, function(e) {
                return {
                    id: e.id,
                    option: e.name,
                    class_name: "js-" + e.id
                }
            }),
            i.unshift({
                id: 0,
                option: r.i18n("leads" === t ? "Lead field" : "Customer field"),
                class_name: "js-empty"
            }),
            this._fields[t] = i
        },
        addSelector: function(e) {
            n.isEmpty(e) && (e = {},
            e.leads = "0",
            e.customers = "0"),
            this._select_collection.add(e)
        },
        buildMatches: function() {
            h.build(this._custom_fields.leads, this._custom_fields.customers)
        },
        cleanWithoutMatch: function() {
            n.each(["leads", "customers"], function(e) {
                this._fields[e] = n.select(this._fields[e], function(t) {
                    return 0 === t.id || h.has(e, t.id)
                }, this)
            }, this)
        },
        parseSettings: function(e) {
            var t, i, s, o;
            i = {},
            s = /props_match\]\[matching_item_([0-9]+)\]\[(customer_key|lead_key)/,
            t = n.extend({}, d, n.pick(e, n.keys(d))),
            n.each(e, function(e, t) {
                -1 !== t.indexOf("props_match]") && (o = s.exec(t),
                o && o[1] && o[2] && (i[o[1]] || (i[o[1]] = {}),
                i[o[1]][o[2]] = e))
            }),
            n.isArray(t.props_match) || (t.props_match = []),
            t.props_match = t.props_match.concat(n.values(i)),
            this._settings = t
        },
        _classes: function() {
            return {
                container: "js-matching-container",
                body: "task-edit__match-selectors",
                add_button: "js-add-row-link"
            }
        },
        events: function() {
            var e = n.extend({}, n.result(o.prototype, "events"));
            return e["click " + this._selector("add_button")] = "clickAddSelector",
            e
        },
        clickAddSelector: function() {
            this.addSelector()
        },
        renderSelector: function(e) {
            var t = this._addComponent(l, {
                model: e
            });
            t.on("render:finished", this.onResize, this),
            t.render(this._fields.leads, this._fields.customers).then(n.bind(function() {
                this._elem("body").append(t.el),
                this.hideItemsInNewList(t.model)
            }, this))
        },
        _hideItemsInList: function(e, t) {
            var i = t.element_type
              , s = {};
            n.each(["customers", "leads"], function(e) {
                s[e] = this._select_collection.pluck(e)
            }, this),
            e.trigger("filter", {
                type: i,
                values: s
            })
        },
        hideItemsInList: function(e) {
            var t = (e.curr.element_type,
            e.model_id);
            h.addAvailable(e.prev.field_id, e.prev.element_type),
            h.removeAvailable(e.curr.field_id, e.curr.element_type),
            this._select_collection.each(function(i) {
                i.cid !== t && this._hideItemsInList(i, e.curr)
            }, this)
        },
        hideItemsInNewList: function(e) {
            var t = ["leads", "customers"];
            n.each(t, function(t) {
                this._hideItemsInList(e, {
                    element_type: t,
                    field_id: e.get(t)
                })
            }, this)
        },
        onResize: function() {
            var e;
            this._$container = this.$el.closest(".digital-pipeline__edit-bubble"),
            e = this._$container.offset().top + this._$container.height() - this._$dp_body.offset().top - this._$dp_body.height() + 60,
            (!n.isFinite(e) || 0 > e) && (e = 0),
            this._$dp_body.css("padding-bottom", e)
        },
        render: i._preload([l.prototype._template], "_render"),
        _render: function(e) {
            var t, i = 3;
            for (n.each(u, function(e, t) {
                this._settings[t] === !0 && (this.addSelector({
                    leads: t,
                    customers: e
                }),
                --i)
            }, this),
            n.isArray(this._settings.props_match) && n.each(this._settings.props_match, function(e) {
                e && e.lead_key && e.customer_key && h.is_in("leads", e.lead_key, e.customer_key) && (this.addSelector({
                    leads: e.lead_key,
                    customers: e.customer_key
                }),
                i--)
            }, this),
            t = 0; i > t; t++)
                this.addSelector();
            n.isFunction(e) && e()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/mixins/amocrm_mixin", ["require", "jquery", "underscore", "lib/common/fn", "lib/components/mail/api", "lib/components/mail/api_v2", "lib/interface/settings/digital_pipeline/salesbot/markers", "lib/interface/settings/digital_pipeline/helper", "lib/interface/controls/deadline_select", "lib/interface/settings/digital_pipeline/leads_cf_matching"], function(e) {
    var t = e("jquery")
      , i = e("underscore")
      , s = e("lib/common/fn")
      , n = e("lib/components/mail/api")
      , o = (e("lib/components/mail/api_v2"),
    e("lib/interface/settings/digital_pipeline/salesbot/markers"))
      , r = e("lib/interface/settings/digital_pipeline/helper")
      , a = e("lib/interface/controls/deadline_select")
      , l = e("lib/interface/settings/digital_pipeline/leads_cf_matching");
    return {
        initAmocrmEvents: function() {
            this.handler_ns = "." + this.handler,
            this.amocrm_events || this._$document.on("click" + this.ns + this.handler_ns, ".js-mail-settings-link", i.bind(this.mailSettingsNavigate, this)).on("click" + this.ns + this.handler_ns, ".js-navigate-mailboxes", i.bind(this.mailSettingsNavigate, this)).on("change" + this.ns + this.handler_ns, "#template_id", i.bind(this.mailRouting, this)),
            this.amocrm_events = !0
        },
        deadlineInit: function() {
            var e, i = this._findElem("edit_bubble"), s = this._findElem("save_button"), n = i.find(this._selector("deadline_select"));
            n.length && (e = {
                el: n,
                langs: AMOCRM.lang
            },
            this.deadline_select = this._addComponent(a, t.extend(e)),
            this.initAmocrmEvents()),
            this.baseFormInit({
                container: i,
                changeCallback: this.taskCommentChecker,
                revertedCallback: this.taskCommentChecker
            }),
            i.hasClass("digital-pipeline__edit-bubble_new-process") && (s.trigger("button:enable"),
            this.form.model.set("task_text", AMOCRM.lang.tasks_follow_up))
        },
        createLead: function(e) {
            var t = this.$el.find(".digital-pipeline__edit-bubble");
            this.form || this.baseFormInit({
                container: t,
                changeCallback: this.createLeadChecker,
                revertedCallback: this.createLeadChecker
            }),
            e.edit ? this.$el.find(".digital-pipeline__lead-function-select input[checked]").length > 0 && this.$el.find(".checkboxes_dropdown__checkbox_master").addClass("icon-check-minus") : this.createLeadChecker(),
            this.initAmocrmEvents()
        },
        createCustomer: function(e) {
            var t = this.$el.find(".digital-pipeline__edit-bubble")
              , i = t.find(".js-preloader-holder")
              , s = {};
            this.form || this.baseFormInit({
                container: t,
                changeCallback: this.createCustomerChecker,
                revertedCallback: this.createCustomerChecker
            }),
            e.edit ? this.$el.find(".digital-pipeline__customer-function-select input[checked]").length > 0 && this.$el.find(".checkboxes_dropdown__checkbox_master").addClass("icon-check-minus") : this.createCustomerChecker(),
            this.initAmocrmEvents(),
            this.cf_match_view && this.cf_match_view.destroy(),
            s.el = this._findElem("edit_bubble").find(".task-edit__body__form__group"),
            s.settings = e.selected,
            this.cf_match_view = this._addComponent(l, s),
            this.cf_match_view.on("loading:finished", function() {
                i.addClass("hidden")
            })
        },
        createLeadChecker: function(e) {
            var t = this.$el.find(".digital-pipeline__edit-bubble");
            e = e || this.$el.find(".js-trigger-save"),
            t.hasClass("digital-pipeline__edit-bubble_new-process") && (e.trigger("button:enable"),
            e.addClass("button-input_blue"))
        },
        createCustomerChecker: function(e) {
            var t = this.$el.find(".digital-pipeline__edit-bubble");
            e = e || this.$el.find(".js-trigger-save"),
            t.hasClass("digital-pipeline__edit-bubble_new-process") && (e.trigger("button:enable"),
            e.addClass("button-input_blue"))
        },
        sendWebhook: function() {
            var e = this._findElem("edit_bubble");
            this.baseFormInit({
                container: e
            }),
            this.need_validation.type.push("url")
        },
        customTypeChecker: function(e) {
            var t = e.find("#task_type_custom");
            return t.is(":visible") && !t.attr("disabled")
        },
        createCustomTaskType: function(e) {
            var i, n = this, o = e.find("#task_type_custom"), a = o.val();
            return a.length ? void t.ajax({
                url: "/private/tasks/ajax_task_status_edit.php",
                data: {
                    ACTION: "ADD",
                    NAME: a
                },
                dataType: "json",
                type: "POST",
                success: function(t) {
                    "OK" == t.status && (i = AMOCRM.constant("settings_pipeline_template_params").data.custom_task_types || {},
                    i["key_" + t.data.ID] = {
                        id: t.data.ID,
                        option: '<span class="task_type_select__icon icon icon-inline icon-clock-blue-big"></span>' + s.escapeHTML(a)
                    },
                    AMOCRM.constant("task_types", i),
                    e.find('input[name="task_type"]').val(t.data.ID),
                    o.attr("disabled", "disabled"),
                    n.saveProcess({
                        enabled: !1,
                        input_trigger: !0
                    }))
                },
                error: function() {
                    r.errorModal("")
                }
            }) : (o.addClass("text-input_invalid"),
            !1)
        },
        taskCommentChecker: function(e) {
            var t = this._findElem("edit_bubble");
            t.hasClass("digital-pipeline__edit-bubble_new-process") && (e.trigger("button:enable"),
            e.addClass("button-input_blue")),
            this.form.model.get("task_text") || this.form.model.set("task_text", AMOCRM.lang.tasks_follow_up)
        },
        delayChecker: function(e) {
            var t = +this.delay_form.model.get("add_delay");
            i.isNumber(t) && !i.isNaN(t) ? e.trigger("button:enable") : e.trigger("button:disable")
        },
        chatMessageInit: function() {
            var e = this
              , t = this._findElem("edit_bubble")
              , i = this._findElem("marker_controll");
            this.initAmocrmEvents(),
            this.baseFormInit({
                container: t,
                changeCallback: this.chatMessageChecker,
                revertedCallback: this.chatMessageChecker
            }),
            i.on("click", function(t) {
                o.insertMarker.call(e, t)
            })
        },
        chatMessageChecker: function(e) {
            var t = this._findElem("chat_message_textarea");
            t.val().length > 0 ? (e.trigger("button:enable"),
            e.addClass("button-input_blue")) : (e.trigger("button:disable"),
            e.removeClass("button-input_blue"))
        },
        changeStatus: function() {
            var e = this._findElem("edit_bubble")
              , t = this._findElem("save_button");
            this.baseFormInit({
                container: e,
                changeCallback: this.changeStatusCheker,
                revertedCallback: this.changeStatusCheker
            }),
            this.initAmocrmEvents(),
            e.hasClass("digital-pipeline__edit-bubble_new-process") && t.trigger("button:enable")
        },
        changeStatusCheker: function(e) {
            var t = this._findElem("edit_bubble");
            t.hasClass("digital-pipeline__edit-bubble_new-process") && e.trigger("button:enable")
        },
        manageMailing: function(e) {
            var t = this
              , s = this._findElem("edit_bubble");
            this.baseFormInit({
                container: s,
                changeCallback: this.manageMailingOnHasChanged,
                revertedCallback: this.manageMailingOnHasChanged
            }),
            e.mailboxes && (this.mailboxes_collection = new Backbone.Collection,
            i.each(e.mailboxes, function(e) {
                t.mailboxes_collection.push(new Backbone.Model(e))
            })),
            this.initAmocrmEvents()
        },
        manageMailingOnHasChanged: function(e) {
            var t, s, n = +this._elem("mailboxes_select_input").val(), o = e.closest(this._selector("edit_bubble")), r = o.find(".digital-pipeline__bubble-error_unsubscribe"), a = this.mailboxes_collection.get(n);
            0 !== n && a && (t = a.get("smtp"),
            this._elem("digital_pipeline__error_select").toggle(!t),
            this.save_locked = !t,
            e.trigger("button:save:" + (t ? "enable" : "disable"))),
            this.save_locked || (s = i.every(this.form.model.toJSON(), function(e, t) {
                return "unsubscribe_link" === t && (e = !0),
                e
            }),
            e.trigger("button:save:" + (s ? "enable" : "disable"))),
            r.toggle(!!this.form.model.get("unsubscribe_link"))
        },
        mailRouting: function(e) {
            var i = t(e.currentTarget).val();
            "link" === i && (this.blocked_settings && this.deleteFakeProcess(),
            AMOCRM.router.navigate("/mail/inbox/?mailbox-setup=general", {
                trigger: !0
            }))
        },
        mailSettingsNavigate: function() {
            var e;
            return this.save_locked && (e = +this._elem("mailboxes_select_input").val()),
            this._$document.trigger("mailbox:view:settings", e),
            !1
        },
        prepareMailingWrapper: function(e) {
            var s = this
              , n = i.findWhere(this.parent_context.groups, {
                id: this.group_id
            }) ? i.findWhere(this.parent_context.groups, {
                id: this.group_id
            }) : i.findWhere(this.parent_context.groups, {
                cid: this.group_id
            })
              , o = t.Deferred();
            return AMOCRM.constant("amomail").enabled ? (e.group = n,
            e.tags = n.tags,
            e.entity = AMOCRM.getBaseEntity(),
            t.when(this.getMailTemplates(), this.getMailboxes()).then(function(t, i) {
                o.resolve(s.prepareMailing(e, t, i))
            }).fail(function() {
                o.reject(e)
            }),
            o) : (e.amomail = "disabled",
            s.prepareMailing(e, [], []))
        },
        prepareMailing: function(e, t, s) {
            var n = AMOCRM.lang.page.handlers.amocrm.actions.send_email
              , o = {
                id: "",
                class_name: "custom-scroll--placeholder"
            }
              , r = !0
              , a = !0;
            return e.selected && (r = i.findWhere(t, {
                id: +e.selected.template_id
            }),
            a = i.findWhere(s, {
                id: +e.selected.mailbox_id
            })),
            r && t.length || e.fake_new ? e.selected && !e.fake_new || !t.length || t.unshift(i.extend({
                option: n.template_placeholder
            }, o)) : t.unshift(i.extend({
                option: e.selected ? n.template_changed : n.no_templates
            }, o)),
            a && s.length || e.fake_new ? e.selected && !e.fake_new || !s.length || s.unshift(i.extend({
                option: n.mailbox_placeholder
            }, o)) : s.unshift(i.extend({
                option: e.selected ? n.mailbox_changed : n.no_mailboxes
            }, o)),
            e.templates = t,
            e.mailboxes = s,
            e
        },
        getMailTemplates: function() {
            return n.getMailTemplates().then(function(e) {
                return i.each(e.items, function(e) {
                    e.option = e.name
                }),
                e.items
            }).fail(function() {
                r.errorModal("")
            })
        },
        getMailboxes: function() {
            return n.getMailboxes({
                list: "short",
                types: ["shared"],
                active: 1
            }).then(function(e) {
                return i.each(e.items, function(e) {
                    e.option = e.email
                }),
                e.items
            }).fail(function() {
                r.errorModal("")
            })
        },
        googleAnalytics: function(e) {
            var t = this._findElem("edit_bubble");
            this.baseFormInit({
                container: t,
                changeCallback: this.googleAnalyticsChecker,
                revertedCallback: this.googleAnalyticsChecker
            }),
            e.edit || this.googleAnalyticsChecker(),
            this.initAmocrmEvents()
        },
        googleAnalyticsChecker: function(e) {
            var t = this._findElem("edit_bubble");
            e = e || this.$el.find(".js-trigger-save"),
            t.hasClass("digital-pipeline__edit-bubble_new-process") && (e.trigger("button:enable"),
            e.addClass("button-input_blue"))
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/fb_mixin", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        initFbEvents: function() {
            var e;
            this.facebook_events || (this.handler_ns = "." + this.handler,
            e = this.ns + this.handler_ns,
            this._$document.on("change" + e, '.digital-pipeline__edit-forms input[name="account_id"]', t.bind(this.onFbAccountChange, this)).on("change" + e, '.digital-pipeline__edit-forms input[name="campaign_id"]', t.bind(this.renderAdsets, this))),
            this.facebook_events = !0
        },
        onFbAccountChange: function(e) {
            var i = this.handler
              , s = this._findElem("account_input").val();
            return e = e instanceof jQuery.Event ? {} : e,
            this.initFbEvents(),
            s ? (t.isEmpty(e) || (t.isEmpty(this.bp_add[i].options) && (this.bp_add[i].options = {
                accounts: {},
                campaigns: {},
                adsets: {}
            }),
            this.bp_add[i].options.accounts = e.accounts),
            void this.renderFbCampaigns(s, e)) : (this._findElem("campaigns").html(""),
            this._findElem("advert").html(""),
            void this.facebookAdsetsChecker())
        },
        renderFbCampaigns: function(e, i) {
            var s = this.handler;
            this.fetchAdsetData(i, {
                key: "campaigns",
                cabinet_id: e,
                url: AMOCRM.constant("settings_pipeline_template_params").data.endpoints[s].get_campaigns,
                data: {
                    format: "twig",
                    account_id: e
                },
                onBeforeFetch: t.bind(this.facebookAdsetsChecker, this),
                onFetchDone: function(t, i) {
                    t.campaigns[e] = $.extend(t.campaigns[e], i.response.campaigns),
                    t.adsets[e] = $.extend(t.adsets[e], i.response.adsets)
                },
                onLoadedResolve: t.bind(function(t) {
                    return this.getTemplate(this.edit_templates.campaigns).render({
                        campaigns: t.campaigns[e],
                        selected: this.selected[s],
                        handler: s,
                        settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[s]
                    })
                }, this),
                onLoadedFinish: t.bind(function() {
                    this.renderAdsets(i)
                }, this)
            })
        },
        renderAdsets: function(e) {
            var t = this.handler
              , i = this.bp_add[t].options
              , s = this._findElem("account_input").val()
              , n = this._findElem("campaign_input").val()
              , o = this._findElem("edit_bubble");
            return n ? (this._findElem("advert").html(this.getTemplate(this.edit_templates.adsets).render({
                adsets: i.adsets[s][n],
                selected: this.selected[t],
                handler: t,
                settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[t]
            })),
            this.form || this.baseFormInit({
                container: o,
                changeCallback: this.facebookAdsetsChecker,
                revertedCallback: this.facebookAdsetsChecker
            }),
            void (e.edit || this.facebookAdsetsChecker())) : (this.$el.find(".trigger_settings__process__footer").remove(),
            !1)
        },
        facebookAdsetsChecker: function(e) {
            var t = !this._findElem("adset_input").val();
            e = e || this._findElem("save_button"),
            e.trigger("button:" + (t ? "disable" : "enable"))
        },
        clearCacheOptions: function() {
            this.bp_add[this.handler].options = {},
            this.bp_add[this.handler].handle_campaign.options = {}
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/vk_mixin", ["require", "jquery", "underscore"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore");
    return {
        initVkEvents: function() {
            var e;
            this.vk_events || (this.handler_ns = "." + this.handler,
            e = this.ns + this.handler_ns,
            this._$document.on("change" + e, '.digital-pipeline__edit-forms input[name="cabinet_id"]', i.bind(this.onVkCabinetChange, this)).on("change" + e, '.digital-pipeline__edit-forms input[name="client_id"]', i.bind(this.onVkClientsChange, this)).on("change" + e, '.digital-pipeline__edit-forms input[name="campaign_id"]', i.bind(this.renderVkAdv, this))),
            this.vk_events = !0
        },
        onVkCabinetChange: function(e) {
            var t = this.handler
              , s = this._findElem("cabinet_input").val();
            if (e = e instanceof jQuery.Event ? {} : e,
            this.initVkEvents(),
            !s)
                return this._findElem("campaigns").html(""),
                this._findElem("advert").html(""),
                void this.vkAdvertChecker();
            switch (i.isEmpty(e) || (i.isEmpty(this.bp_add[t].options) && (this.bp_add[t].options = {
                cabinets: {},
                campaigns: {},
                ads: {},
                client_cabinets: {}
            }),
            this.bp_add[t].options.cabinets = e.cabinets),
            (i.findWhere(this.bp_add[t].options.cabinets, {
                id: +s
            }) || {}).type) {
            case "general":
                this._findElem("client_cabinets").html(""),
                this.renderVkCampaigns(s, e);
                break;
            case "agency":
                this.renderVkClientCabinets(s, e)
            }
        },
        renderVkClientCabinets: function(e, s) {
            var n = this.handler;
            this.fetchAdsetData(s, {
                key: "client_cabinets",
                cabinet_id: e,
                url: AMOCRM.constant("settings_pipeline_template_params").data.endpoints[n].get_clients,
                data: {
                    format: "twig",
                    cabinet_id: e
                },
                onFetchData: i.bind(function() {
                    this._findElem("client_cabinets").html("")
                }, this),
                onBeforeFetch: i.bind(this.vkAdvertChecker, this),
                onFetchDone: function(i, s) {
                    i.client_cabinets[e] = t.extend(i.client_cabinets[e], s.response.clients)
                },
                onLoadedResolve: i.bind(function(t) {
                    return this.getTemplate(this.edit_templates.client_cabinets).render({
                        clients: t.client_cabinets[e],
                        selected: this.selected[n],
                        handler: n,
                        settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[n]
                    })
                }, this),
                onLoadedFinish: i.bind(function() {
                    this.renderVkCampaigns(e, s, this._findElem("client_input").val())
                }, this)
            })
        },
        onVkClientsChange: function(e) {
            var i = t(e.target)
              , s = i.val()
              , n = this._findElem("cabinet_input").val();
            this.renderVkCampaigns(n, {}, s)
        },
        renderVkCampaigns: function(e, s, n) {
            var o = this.handler;
            this.fetchAdsetData(s, {
                key: "campaigns",
                cabinet_id: e,
                client_id: n,
                url: AMOCRM.constant("settings_pipeline_template_params").data.endpoints[o].get_campaigns,
                data: {
                    format: "twig",
                    cabinet_id: e,
                    client_id: n || ""
                },
                onBeforeFetch: i.bind(this.vkAdvertChecker, this),
                onFetchDone: function(i, s) {
                    i.campaigns[n || e] = t.extend(i.campaigns[n || e], s.response.campaigns),
                    i.ads[n || e] = t.extend(i.ads[n || e], s.response.ads)
                },
                onLoadedResolve: i.bind(function(t) {
                    return this.getTemplate(this.edit_templates.campaigns).render({
                        campaigns: t.campaigns[n || e],
                        selected: this.selected[o],
                        handler: o,
                        settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[o]
                    })
                }, this),
                onLoadedFinish: i.bind(function() {
                    this.renderVkAdv(s)
                }, this)
            })
        },
        renderVkAdv: function(e) {
            var t = this.handler
              , i = this.bp_add[t].options
              , s = this._findElem("campaign_input").val()
              , n = this._findElem("cabinet_input").val()
              , o = this._findElem("client_input").val()
              , r = this._findElem("edit_bubble");
            return s ? (this._findElem("advert").html(this.getTemplate(this.edit_templates.ads).render({
                ads: i.ads[o || n][s],
                selected: this.selected[t],
                handler: t,
                settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[t]
            })),
            this.form || this.baseFormInit({
                container: r,
                changeCallback: this.vkAdvertChecker,
                revertedCallback: this.vkAdvertChecker
            }),
            void (e.edit || this.vkAdvertChecker())) : void this._findElem("advert").html("")
        },
        vkAdvertChecker: function(e) {
            var t = !this._findElem("ads_input").val();
            e = e || this._findElem("save_button"),
            e.trigger("button:" + (t ? "disable" : "enable"))
        },
        clearCacheOptions: function() {
            this.bp_add[this.handler].options = {},
            this.bp_add[this.handler].handle_campaign.options = {}
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/adwords_mixin", ["require", "jquery", "underscore"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore");
    return {
        initAdwordsEvents: function() {
            var e;
            this.handler_ns = "." + this.handler,
            e = this.ns + this.handler_ns,
            this.adwords_events || this._$document.on("change" + e, '.adwords_audience input[name="cabinet_id"]', i.bind(this.renderAdwordsCabinets, this)),
            this.adwords_events = !0
        },
        renderAdwordsCabinets: function(e) {
            var s, n = this.handler, o = this.$el.find('[name="cabinet_id"]').val(), r = this, a = this._findElem("edit_bubble"), l = t('<div style="height:59px"><div class="spinner-icon spinner-icon-abs-center"></div>'), c = t.Deferred();
            return this.initAdwordsEvents(),
            o ? (e.selected && (this.selected[n] = e.selected),
            i.isEmpty(this.bp_add[n].options) || i.isUndefined(this.bp_add[n].options.audiences[o]) ? (r._findElem("audiences").html(""),
            r.adwordsAdvertChecker(),
            r._findElem("audiences").html(l),
            t.ajax({
                url: AMOCRM.constant("settings_pipeline_template_params").data.endpoints[n].get_audiences,
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", r.token)
                },
                data: {
                    format: "twig",
                    cabinet_id: o
                },
                type: "GET"
            }).done(function(e) {
                i.isEmpty(r.bp_add[n].options) && (r.bp_add[n].options = {
                    audiences: {}
                }),
                r.bp_add[n].options.audiences[o] = t.extend(r.bp_add[n].options.audiences[o], e.response.audiences),
                c.resolve(),
                l.remove()
            }).fail(function() {})) : c.resolve(),
            void c.done(function() {
                s = r.getTemplate(r.edit_templates.audiences).render({
                    lang: AMOCRM.lang,
                    audiences: r.bp_add[n].options.audiences[o],
                    selected: r.selected[n],
                    handler: n,
                    settings_link: AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[n]
                }),
                r._findElem("audiences").html(s),
                r.form || r.baseFormInit({
                    container: a,
                    changeCallback: r.adwordsAdvertChecker,
                    revertedCallback: r.adwordsAdvertChecker
                }),
                e.edit || r.adwordsAdvertChecker()
            })) : (r._findElem("audiences").html(""),
            void r.adwordsAdvertChecker())
        },
        adwordsAdvertChecker: function(e) {
            e = e || this._findElem("save_button"),
            this.$el.find('[name="audience_id"]').val() ? e.trigger("button:enable") : e.trigger("button:disable")
        },
        clearCacheOptions: function() {
            this.bp_add[this.handler].options = {},
            this.bp_add[this.handler].handle_audience.options = {}
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/mailchimp_mixin", ["require", "lib/common/fn"], function(e) {
    e("lib/common/fn");
    return {
        mailchimpCallback: function(e) {
            var t = this._findElem("edit_bubble");
            this.form || this.baseFormInit({
                container: t,
                changeCallback: this.mailchimpCampaignsChecker,
                revertedCallback: this.mailchimpCampaignsChecker
            }),
            e.edit || this.mailchimpCampaignsChecker()
        },
        mailchimpCampaignsChecker: function(e) {
            var e = e || this._findElem("save_button")
              , t = this.$el.find('[name="list_id"]').val()
              , i = this.repeatListChecker()
              , s = this.$el.find(".digital-pipeline__edit-bubble").closest(".digital-pipeline__business_processes").data("id")
              , n = this.business_processes.get(s)
              , o = n.get("settings").only_main_contact
              , r = this.$el.find(".digital-pipeline__only_main_contact input").prop("checked");
            t && !(_.indexOf(i, t) > -1) || this.timemachine_changed || Boolean(o) != r ? (e.trigger("button:enable").addClass("button-input_blue"),
            this.timemachine_changed = !1) : e.trigger("button:disable")
        },
        repeatListChecker: function() {
            var e = this
              , t = this.business_processes.where({
                handler_code: "mailchimp"
            })
              , i = []
              , s = this.$el.find(".digital-pipeline__edit-bubble").closest(".digital-pipeline__business_processes").data("id")
              , n = this.business_processes.get(s)
              , o = n ? n.get("settings").list_id : void 0;
            return _.each(t, function(t) {
                var s = t.get("statuses")
                  , n = t.get("settings").list_id;
                _.indexOf(s, e.status) > -1 && (i.push(n),
                n != o && e.$el.find(".control--select--list--item[data-value=" + n + "]").addClass("item-disabled"))
            }),
            i
        },
        delayChecker: function(e) {
            var t = +this.delay_form.model.get("add_delay");
            _.isNumber(t) && !_.isNaN(t) ? e.trigger("button:enable") : e.trigger("button:disable")
        },
        saveTriggerCallback: function() {
            this.timemachine_changed = !0
        },
        clearCacheOptions: function() {
            this.bp_add.mailchimp.options = {},
            this.bp_add.mailchimp.handle_list.options = {}
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/widget_mixin", ["require", "jquery", "underscore"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore");
    return {
        widgetCallback: function(e) {
            this.widget_obj = AMOCRM.widgets.list[e.widget_code];
            var s, n = this._findElem("edit_bubble"), o = this._findElem("save_button"), r = n.find(this._selector("deadline_select"));
            r.length && (s = {
                el: r,
                langs: AMOCRM.lang
            },
            this.deadline_select = this._addComponent(DeadlineSelect, t.extend(s)),
            this.initAmocrmEvents()),
            this.baseFormInit({
                container: n,
                changeCallback: this.taskCommentChecker,
                revertedCallback: this.taskCommentChecker
            }),
            n.hasClass("digital-pipeline__edit-bubble_new-process") && (o.trigger("button:enable"),
            this.form.model.set("task_text", AMOCRM.lang.tasks_follow_up)),
            i.isFunction(this.widget_obj.callbacks.dpSettings) && (this.widget_obj.callbacks.dpSettings(),
            this.positionBubble(n.parent()))
        }
    }
}),
define("lib/interface/settings/digital_pipeline/mixins/bubble_settings_mixin", ["require", "lib/core/users", "lib/interface/settings/digital_pipeline/mixins/amocrm_mixin", "lib/interface/settings/digital_pipeline/mixins/fb_mixin", "lib/interface/settings/digital_pipeline/mixins/vk_mixin", "lib/interface/settings/digital_pipeline/mixins/adwords_mixin", "lib/interface/settings/digital_pipeline/mixins/mailchimp_mixin", "lib/interface/settings/digital_pipeline/mixins/widget_mixin"], function(e) {
    var t = e("lib/core/users");
    return {
        triggers_settings: {
            visit: "siteCallBack"
        },
        bp_add: {
            amocrm: {
                create_task: {
                    options: function() {
                        return {
                            periods: AMOCRM.constant("settings_pipeline_template_params").data.task_periods,
                            users: AMOCRM.constant("settings_pipeline_template_params").data.users,
                            tasks: AMOCRM.constant("settings_pipeline_template_params").data.custom_task_types
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_task.twig",
                    callback_function: "deadlineInit"
                },
                create_lead: {
                    options: function() {
                        return {
                            pipelines: AMOCRM.constant("settings_pipeline_template_params").data.pipelines,
                            users: AMOCRM.constant("settings_pipeline_template_params").data.users,
                            create_lead_params: AMOCRM.constant("settings_pipeline_template_params").data.create_lead_params
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_lead.twig",
                    callback_function: "createLead"
                },
                create_customer: {
                    options: function() {
                        return {
                            users: AMOCRM.constant("settings_pipeline_template_params").data.users,
                            create_customer_params: AMOCRM.constant("settings_pipeline_template_params").data.create_customer_params
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_customer.twig",
                    callback_function: "createCustomer"
                },
                send_analytics: {
                    options: {
                        helper_link: "https://analytics.google.com/"
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_target.twig",
                    callback_function: "googleAnalytics"
                },
                send_form_analytics: {
                    options: {
                        helper_link: "https://analytics.google.com/"
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_target.twig",
                    callback_function: "googleAnalytics"
                },
                send_hook: {
                    options: {
                        helper_link: "https://developers.amocrm.ru/rest_api/webhooks.php"
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_webhooks.twig",
                    callback_function: "sendWebhook"
                },
                send_email: {
                    options: function() {
                        return {
                            managers: t.get()
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_mail.twig",
                    callback_function: "manageMailing",
                    prerender_callback: "prepareMailingWrapper"
                },
                change_status: {
                    options: function() {
                        return {
                            pipelines: AMOCRM.constant("settings_pipeline_template_params").data.pipelines
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_change_status.twig",
                    callback_function: "changeStatus"
                },
                send_chat_message: {
                    options: function() {
                        return {
                            dummy: 1
                        }
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_chat_message.twig",
                    callback_function: "chatMessageInit"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/amocrm_mixin")
            },
            facebook: {
                handle_campaign: {
                    url: function() {
                        return AMOCRM.constant("settings_pipeline_template_params").data.endpoints.facebook.handle_campaign
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_campaign_fb.twig",
                    options: {},
                    callback_function: "onFbAccountChange"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/fb_mixin"),
                delete_callback: !0
            },
            vk: {
                handle_campaign: {
                    url: function() {
                        return AMOCRM.constant("settings_pipeline_template_params").data.endpoints.vk.handle_campaign
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_campaign_vk.twig",
                    options: {},
                    callback_function: "onVkCabinetChange"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/vk_mixin"),
                delete_callback: !0
            },
            adwords: {
                handle_audience: {
                    url: function() {
                        return AMOCRM.constant("settings_pipeline_template_params").data.endpoints.adwords.handle_audience
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_audience_adwords.twig",
                    options: {},
                    callback_function: "renderAdwordsCabinets"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/adwords_mixin"),
                delete_callback: !1
            },
            mailchimp: {
                handle_list: {
                    url: function() {
                        return AMOCRM.constant("settings_pipeline_template_params").data.endpoints.mailchimp.handle_list
                    },
                    template: "/tmpl/digital_pipeline/edit_templates/edit_mailchimp.twig",
                    options: {},
                    callback_function: "mailchimpCallback"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/mailchimp_mixin"),
                delete_callback: !1
            },
            widget: {
                send_widget_hook: {
                    template: "/tmpl/digital_pipeline/edit_templates/edit_widget.twig",
                    options: {},
                    callback_function: "widgetCallback"
                },
                mixin: e("lib/interface/settings/digital_pipeline/mixins/widget_mixin"),
                delete_callback: !1
            }
        }
    }
}),
define("lib/interface/settings/digital_pipeline/item", ["require", "jquery", "underscore", "twig", "cocktail", "lib/common/fn", "lib/core/view", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/base/form", "lib/interface/settings/digital_pipeline/helper", "lib/interface/settings/digital_pipeline/site_settings", "lib/interface/settings/digital_pipeline/mixins/resize_mixin", "lib/interface/settings/digital_pipeline/mixins/bubble_settings_mixin"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/common/fn"), a = e("lib/core/view"), l = e("lib/components/base/modal"), c = e("lib/components/base/confirm"), d = e("lib/components/base/form"), u = e("lib/interface/settings/digital_pipeline/helper"), h = e("lib/interface/settings/digital_pipeline/site_settings"), _ = e("lib/interface/settings/digital_pipeline/mixins/resize_mixin"), p = e("lib/interface/settings/digital_pipeline/mixins/bubble_settings_mixin"), m = i('<div class="digital-pipeline__spinner-holder"><div class="spinner-icon spinner-icon-abs-center"></div>');
    return t = a.extend({
        template: "/tmpl/digital_pipeline/item_tmpl.twig",
        inner_template: "/tmpl/digital_pipeline/item_inner_tmpl.twig",
        error_template: "/tmpl/digital_pipeline/error_item_inner_tmpl.twig",
        ns: ".digital_pipeline_item",
        events: {
            "click .button-cancel": "closeBubble",
            "click .digital-pipeline__edit-item_choose": "saveProcessClick",
            "click .digital-pipeline__edit-item_action": "renderAction",
            "click .js-trigger-save": "saveProcessClick",
            "click .digital-pipeline__add-process-trigger": "addProcess",
            "click .digital-pipeline__short-task": "editSettings",
            "click .digital-pipeline__adw-title": "editSettings",
            "click .digital-pipeline__edit-delete": "deleteProcess",
            "click .digital-pipeline__edit-delay-new-process": "addTrigger",
            "click .digital-pipeline__edit-item_choose-delay": "saveTrigger",
            "click .js-trigger-save-delay": "saveTrigger",
            "mouseenter  .digital-pipeline__business_processes_multiple .digital-pipeline__buisness-process-dragbutton_last": "initResize",
            "touchstart  .digital-pipeline__business_processes_multiple .digital-pipeline__buisness-process-dragbutton_last": "initResize",
            "click .digital-pipeline__buisness-process-dragbutton_last": "preStartResize",
            "mouseenter  .digital-pipeline__business_processes_multiple .digital-pipeline__buisness-process-dragbutton_first": "initLeftResize",
            "touchstart  .digital-pipeline__business_processes_multiple .digital-pipeline__buisness-process-dragbutton_first": "initLeftResize",
            "touchstart .digital-pipeline__business_processes_multiple .digital-pipeline__business_processes-inner-wrapper": "initDrag",
            "mouseenter .digital-pipeline__business_processes_multiple .digital-pipeline__business_processes-inner-wrapper": "initDrag"
        },
        _selectors: function() {
            return this._selectors_obj
        },
        _selectors_obj: {
            user_authorization: ".digital-pipeline__user-authorization",
            save_button: ".js-trigger-save",
            row: ".digital-pipeline__row",
            business_processes: ".digital-pipeline__business_processes",
            business_processes_inner: ".digital-pipeline__business_processes-inner",
            add_process_container: ".digital-pipeline__add-process-container",
            edit_process_container: ".digital-pipeline__edit-process-container",
            add_process_trigger: ".digital-pipeline__add-process-trigger",
            edit_bubble: ".digital-pipeline__edit-bubble",
            title_pointer: ".digital-pipeline__title-pointer",
            edit_forms: ".digital-pipeline__edit-forms",
            handler: "[data-handler]",
            campaigns: ".campaigns",
            advert: ".advert",
            client_cabinets: ".client_cabinets",
            campaign_input: '[name="campaign_id"]',
            cabinet_input: '[name="cabinet_id"]',
            account_input: '[name="account_id"]',
            client_input: '[name="client_id"]',
            ads_input: '[name="ads_id"]',
            adset_input: '[name="adset_id"]',
            mailboxes_select_input: ".digital-pipeline__settings-select_mailbox input",
            chat_message_textarea: ".digital-pipeline__add-chat_message-textarea",
            marker_controll: ".digital-pipeline__add-chat_message-bottom .marker-list__tag",
            marker_value: ".marker-list__tag-value",
            marker_row: ".marker-list__row",
            bot_message: ".digital-pipeline__add-chat_message-textarea",
            digital_pipeline__error_select: ".digital-pipeline__error-select",
            deadline_select: ".control--deadline_select",
            edit_delay_settings: ".digital-pipeline__edit-delay-settings",
            audiences: ".audiences",
            cabinet: ".cabinet"
        },
        edit_templates: {
            facebook: "/tmpl/digital_pipeline/edit_templates/edit_campaign_fb.twig",
            vk: "/tmpl/digital_pipeline/edit_templates/edit_campaign.twig",
            adwords: "/tmpl/digital_pipeline/edit_templates/edit_audience_adwords.twig",
            list: "/tmpl/digital_pipeline/edit_templates/edit_list.twig",
            actions: "/tmpl/digital_pipeline/edit_templates/edit_actions.twig",
            adsets: "/tmpl/digital_pipeline/edit_templates/edit_adsets.twig",
            client_cabinets: "/tmpl/digital_pipeline/edit_templates/edit_clients_cabinets.twig",
            campaigns: "/tmpl/digital_pipeline/edit_templates/edit_campaigns.twig",
            audiences: "/tmpl/digital_pipeline/edit_templates/edit_audiences.twig",
            ads: "/tmpl/digital_pipeline/edit_templates/edit_ads.twig",
            profile: "/tmpl/digital_pipeline/edit_templates/edit_profiles.twig",
            trigger: "/tmpl/digital_pipeline/edit_templates/edit_delay_settings.twig"
        },
        getTemplate: function(e) {
            return n({
                ref: e
            })
        },
        initialize: function(e) {
            a.prototype.initialize.apply(this, arguments),
            this.initEvents(),
            this.business_processes = e.business_processes || {},
            this.handlers = e.handlers,
            this.onRemove = e.onRemove,
            this.onChangeProcessSet = e.onChangeProcessSet,
            this.onChangeProcessGet = e.onChangeProcessGet,
            this.cacheCloneSet = e.cacheCloneSet,
            this.cacheCloneGet = e.cacheCloneGet,
            this.onMetroModal = e.onMetroModal,
            this.getActualHandlers = e.getActualHandlers,
            this.delay_variants = AMOCRM.constant("settings_pipeline_template_params").data.delay_variants,
            this.delay_variants_short = AMOCRM.constant("settings_pipeline_template_params").data.delay_variants_short,
            this.condition_variants = AMOCRM.constant("settings_pipeline_template_params").data.condition_variants,
            this.token = u.startToken(),
            this.adsets = {},
            this.campaigns = {},
            this.ads = {},
            this.selected = {},
            this.need_validation = {
                type: []
            },
            this.validation = {
                url: s.bind(u.urlValidation, this)
            },
            this.parent_context = e.parent_context,
            this.group_id = e.group_id,
            this.status = this.$el.data("stage-id") || e.status_id,
            this.resized = !1,
            this.triggers_with_delay = ["create_task", "create_lead", "create_customer", "send_email", "send_chat_message", "handle_list", "send_widget_hook", "change_status"],
            this.hide_triggers = {
                change_status: ["0"]
            }
        },
        initEvents: function() {
            this._$document.on("mouseout" + this.ns, ".cloned.resize", s.bind(this.destroyResize, this)).on("mousedown " + this.ns, ".digital-pipeline__buisness-process-dragbutton_last", s.bind(this.preStartResize, this)).on("mouseout" + this.ns, ".cloned.drag", s.bind(this.destroyDrag, this)).on("mousedown" + this.ns, ".cloned.drag", s.bind(this.preStartDrag, this)).on("mousedown" + this.ns, ".digital-pipeline__buisness-process-dragbutton_first", s.bind(this.preStartDrag, this)).on("mouseover" + this.ns, ".cloned.drag .digital-pipeline__adw-title", s.bind(this.destroyDrag, this)).on("delete:status", s.bind(this.deleteStatusItem, this))
        },
        render: function(e) {
            var t = i(this.getTemplate(this.template).render(e));
            return this.setElement(t.filter(function() {
                return i(this).attr("data-actions-group-id")
            })),
            t.length > 1 && (this.add_stage = t[0]),
            this
        },
        rerender: function(e, t) {
            var i = this.$el.data("item-loop");
            t = t || {
                digital_handler: this.getActualHandlers(),
                business_processes: this.business_processes.toJSON({}),
                row: {
                    id: this.$el.data("stage-id")
                },
                multiple: this.$el.data("multiple"),
                group_id: this.group_id,
                item_loop: i,
                data: {
                    condition_variants: this.condition_variants
                },
                user_photo: AMOCRM.constant("digital_profiles")[this.handler] && AMOCRM.constant("digital_profiles")[this.handler].profile ? AMOCRM.constant("digital_profiles")[this.handler].profile.avatar : !1
            },
            this.$el.closest(this._selector("row")).hasClass("digital-pipeline__row_handler-row") && this.$el.html(this.getTemplate(this.inner_template).render(t))
        },
        editSettings: function(e, t) {
            var n, a, l = i(e.currentTarget), c = l.closest(this._selector("business_processes_inner")).find(this._selector("edit_process_container")), d = l.closest(this._selector("business_processes")).data("id"), u = this.business_processes.get(d), h = u.get("settings"), _ = u.get("execution_condition"), p = u.get("date_exec"), m = u.get("error"), f = u.get("handler_code"), g = l.closest(this._selector("business_processes_inner")).data("action");
            return s.findWhere(this.parent_context.handlers, {
                code: f
            }).error ? void this.onMetroModal(e) : (this.closeBubble(e),
            this.trigger_conditions = u.get("conditions") || {},
            this.blocked_settings = s.isUndefined(t) || s.isUndefined(t.new_process) ? void 0 : {
                action_id: d
            },
            this.checkExecutionConditionInList(_.id) || (a = this.convertSecInDays(_.id)),
            n = {
                container: c,
                handler: f,
                action: g,
                business_process: u,
                selected: h,
                exact_execution_date: p,
                execution_condition: _ ? s.extend(_, {
                    option: s.findWhere(this.condition_variants, {
                        id: _.id
                    }) ? s.findWhere(this.condition_variants, {
                        id: _.id
                    }).option : AMOCRM.lang.page.after + " " + a + " " + r.numeralWord(+a, AMOCRM.lang.page.delay_days)
                }) : !1,
                error: m,
                edit: s.isUndefined(t) || s.isUndefined(t.new_process) ? !0 : !1,
                fake_new: s.isUndefined(t) || s.isUndefined(t.new_process) ? !1 : !0
            },
            n.exact_execution_date && (n.execution_condition.option = moment.unix(n.exact_execution_date).format(AMOCRM.system.format.date.full)),
            this.handler = f,
            o.mixin(this, this.bp_add[f].mixin),
            void this.renderAction(e, n))
        },
        renderAction: function(e, t) {
            var n, o, r, a = t ? t.container : this._findElem("add_process_container"), l = i('<span class="spinner-icon spinner-icon-abs-center">'), c = t ? t.handler : void 0, d = t ? t.business_process : void 0, u = t ? t.action : i(e.currentTarget).data("action"), h = t ? t.error : !1, _ = t ? t.selected : !1, p = t ? t.execution_condition : !1, m = t ? t.exact_execution_date : !1, f = t ? t.edit : !1, g = t ? t.fake_new : !1, b = this._findElem("add_process_trigger"), v = this, y = this.bp_add[c][u].prerender_callback || null;
            o = "widget" == c ? d.toJSON({}) : this.bp_add[c][u].options,
            s.isFunction(o) && (o = o()),
            b.append(l),
            r = function(e) {
                var t = e;
                s.isFunction(v[y]) && (t = v[y](e)),
                i.when(t).done(function(e) {
                    l.remove(),
                    a.append(v.getTemplate(v.bp_add[c][u].template).render(e)),
                    n = v.bp_add[c][u].callback_function,
                    v.in_edit = !0,
                    v.positionBubble(a),
                    s.isFunction(v[n]) && v[n](e),
                    v._$document.on("click" + v.ns + ".closebubble", s.bind(v.closeBubble, v))
                }).fail(function() {
                    l.remove()
                })
            }
            ,
            this.getOptions(o, c, u).done(function(e) {
                return l.remove(),
                e.action = u,
                e.selected = _,
                e.execution_condition = p,
                e.exact_execution_date = m,
                e.handler = c,
                e.edit = f,
                e.fake_new = g,
                e.error = h,
                e.condition_variants = v.condition_variants,
                e.settings_link = AMOCRM.constant("settings_pipeline_template_params").data.handlers_settings_links[c],
                v.in_edit ? void (s.isFunction(v[n]) && v[n](e)) : r(e)
            }).fail(function() {
                l.remove()
            })
        },
        actionsChecker: function(e) {
            return e = this.googleAnalyticsCountChecker(e)
        },
        positionBubble: function(e) {
            var t = 200
              , s = e.find(this._selector("edit_bubble"))
              , n = s.outerHeight()
              , o = s.offset()
              , r = s.position().left
              , a = o.top
              , l = o.left
              , c = i(".digital-pipeline__hider")
              , d = i("#list_holder")
              , u = d.outerHeight()
              , h = d.offset().top
              , _ = i(window).width()
              , p = s.outerWidth()
              , m = c.offset().top
              , f = t + a + n - u - h;
            n + a + t > u + h && (a - h > n + t && m > a + t ? s.addClass("digital-pipeline__edit-bubble_top") : (i(".digital-pipeline__body").css("padding-bottom", f),
            i(".list-digital-pipeline").css("padding-bottom", f),
            c.css("z-index", 1),
            i(".list__body__holder").css("z-index", 90),
            i(".hs__pane").hide(),
            i(".digital-pipeline").addClass("digital-pipeline_hide-scroller"),
            d.css("margin-bottom", -f))),
            l + p > _ && (s.css({
                left: r - l - p + _ - 40
            }),
            s.addClass("digital-pipeline__edit-bubble_moved"))
        },
        revertBubblePositioning: function() {
            i(".digital-pipeline__body").css("padding-bottom", 0),
            i(".list-digital-pipeline").css("padding-bottom", 0),
            i("#list_holder").css("margin-bottom", 0),
            i(".digital-pipeline__hider").css("z-index", 80),
            i(".list__body__holder").css("z-index", 1),
            i(".hs__pane").show(),
            i(".digital-pipeline").removeClass("digital-pipeline_hide-scroller")
        },
        getOptions: function(e, t, n) {
            var o = this
              , r = i.Deferred();
            return s.isEmpty(e) && "widget" !== t ? i.ajax({
                url: o.bp_add[t][n].url(),
                xhrFields: {
                    withCredentials: !0
                },
                headers: {
                    "X-Auth-Token": o.token
                },
                data: {
                    format: "twig"
                },
                type: "GET"
            }).done(function(t) {
                t.response && !t.response.error ? r.resolve(i.extend(!0, e, t.response)) : (u.errorModal(t.response.error),
                r.reject())
            }).fail(function(e, s) {
                401 == e.status ? i.ajax({
                    url: "/ajax/settings/pipeline/" + o.parent_context.data.element_type + "/" + o.parent_context.pipeline.id + "/token",
                    type: "GET"
                }).done(function(e) {
                    o.token = e.response.token,
                    o.getOptions.call(o, t, n)
                }).fail(function() {
                    u.errorModal(),
                    r.reject()
                }) : (u.errorModal(),
                r.reject())
            }) : r.resolve(e),
            r
        },
        listDataCollector: function(e) {
            var t, i = this._findElem("edit_bubble"), s = i.find("input[name=id]"), n = i.find("input[name=option]"), o = i.find("input[name=name]");
            return s.val(e.data("id")),
            n.val(e.data("option")),
            o.val(e.data("name")),
            t = i.find(".form-items").serializeArray()
        },
        deleteFakeProcess: function() {
            var e = this.business_processes.get(this.blocked_settings.action_id);
            this.business_processes.remove(e),
            this.blocked_settings = void 0,
            i(document).trigger("rerender:row", {
                group_id: this.group_id
            })
        },
        deleteProcess: function(e) {
            var t = i(e.currentTarget)
              , s = t.closest(this._selector("business_processes")).data("id")
              , n = this.business_processes.get(s)
              , o = this;
            this.business_processes.remove(n),
            this.askAudience().done(function(e) {
                o.onRemove(o.handler, s, {
                    id: s,
                    delete_audience: e
                })
            }),
            i(document).trigger("rerender:row", {
                group_id: this.group_id
            })
        },
        askAudience: function() {
            var e, t = i.Deferred();
            return this.bp_add[this.handler].delete_callback ? new c({
                text: AMOCRM.lang.page.audience_text,
                accept_text: AMOCRM.lang.page.buttons.OK,
                decline_text: AMOCRM.lang.page.buttons.cancel,
                button_class: "button-input_blue",
                destroy: function() {
                    this.accepted ? (e = 1,
                    t.resolve(e)) : (e = 0,
                    t.resolve(e))
                },
                accept: function() {
                    this.modal.destroy()
                }
            }) : (e = 0,
            t.resolve(e)),
            t.promise(e)
        },
        saveProcessClick: function(e, t) {
            var s = i(e.currentTarget)
              , n = {
                enabled: s.hasClass("button-input-disabled") ? !0 : !1,
                input_trigger: s.hasClass("button-input") ? !0 : !1,
                $button: s
            };
            this.saveProcess(n)
        },
        saveProcess: function(e) {
            var t, n, o, r = this, a = this._findElem("edit_bubble"), l = a.data("type"), c = a.closest(this._selector("business_processes")).data("id"), d = this._findElem("title_pointer").find(".control--select--list--item-selected").text(), u = {}, h = !0, _ = a.find("[name=action_trigger_id]").val() && "0" !== a.find("[name=action_trigger_id]").val() ? a.find("[name=action_trigger_id]").val() : "0";
            if (e) {
                if (e.enabled)
                    return !1;
                n = e.input_trigger ? a.find(this._selector("edit_forms")).serializeArray() : this.listDataCollector(e.$button)
            }
            if (!(this.need_validation.type.length > 0) || (h = s.every(this.need_validation.type, function(e) {
                return r.validation[e]()
            }))) {
                if (s.isFunction(this.customTypeChecker) && this.customTypeChecker(a))
                    return void this.createCustomTaskType(a);
                t = this.business_processes.get(c),
                u = "widget" === l ? this.formDataTransformerCustomWidget(n, t) : this.formDataTransformer(n),
                o = t.get("conditions") || {},
                d && !u.title && (u[l + "_title"] = d),
                "widget" === l && t.set({
                    widget_id: a.data("widget_id")
                }),
                t.set({
                    execution_condition: {
                        id: _,
                        name: a.find("[name=action_trigger_name]").val() ? a.find("[name=action_trigger_name]").val() : s.findWhere(r.condition_variants, {
                            id: "0"
                        }).name
                    }
                }),
                t.set({
                    date_exec: a.find("[name=action_trigger_date_exec]").val() ? parseInt(a.find("[name=action_trigger_date_exec]").val()) : 0
                }),
                o = s.extend(o, this.trigger_conditions),
                t.set({
                    conditions: o
                }),
                t.set({
                    delay: "delay" === a.find("[name=action_trigger_name]").val() ? +a.find("[name=action_trigger_id]").val() : 0
                }),
                t.set({
                    settings: u
                }),
                this.business_processes.trigger("change"),
                t.unset("fake", "silent"),
                this.blocked_settings = void 0,
                this.revertBubblePositioning(),
                i(document).trigger("rerender:row", {
                    group_id: this.group_id
                })
            }
        },
        closeBubble: function(e) {
            e && !i(e.currentTarget).hasClass("button-cancel") && i(e.target).closest(this._selector("edit_bubble")).length > 0 || this.parent_context.close_blocked || (e && e.stopPropagation(),
            s.isUndefined(this.blocked_settings) || s.isUndefined(this.blocked_settings.action_id) || this.deleteFakeProcess(),
            this.in_edit = !1,
            this.added_delay = !1,
            this.need_validation.type = [],
            i(this._selector("edit_bubble")).remove(),
            this.revertBubblePositioning(),
            this.form && (this.form.destroy(),
            this.form = null),
            this.cf_match_view && s.isFunction(this.cf_match_view.destroy) && this.cf_match_view.destroy(),
            this.edited_process = void 0,
            this._$document.off("click" + this.handler_ns),
            this._$document.off("change" + this.handler_ns),
            this._$document.off("click.closebubble"),
            this[this.handler + "_events"] = null)
        },
        formDataTransformer: function(e) {
            var t = {};
            return s.each(e, function(e) {
                var i = {};
                "task_text" != e.name || e.value || (e.value = AMOCRM.lang.tasks_follow_up),
                i[e.name] = e.value,
                s.extend(t, i)
            }),
            t
        },
        formDataTransformerCustomWidget: function(e, t) {
            var i = {
                widget: {
                    settings: {}
                }
            }
              , n = t.get("template_params");
            return s.each(e, function(e) {
                i.widget.settings[e.name] = e.value,
                n.fields[e.name].value = e.value
            }),
            t.set({
                template_params: n
            }),
            i
        },
        baseFormInit: function(e) {
            var t, i = e.key ? e.key : "form";
            this[i] = this._addComponent(d.View, {
                el: e.container
            }),
            t = e.button ? e.button : this._findElem("save_button"),
            this[i].model.on("has_changes", s.bind(function() {
                this.changeReverted("enable", t, e.changeCallback)
            }, this)).on("has_reverted", s.bind(function() {
                this.changeReverted("disable", t, e.revertedCallback)
            }, this))
        },
        changeReverted: function(e, t, i) {
            t.trigger("button:save:" + e),
            s.isFunction(i) && i.call(this, t)
        },
        deleteStatusItem: function(e, t) {
            t == this.status && this.remove()
        },
        destroy: function() {
            s.isFunction(this.clearCacheOptions) && this.clearCacheOptions(),
            a.prototype.destroy.apply(this, arguments)
        },
        fetchAdsetData: function(e, t) {
            var n, o, r, a = this.handler, c = i.Deferred(), d = this.bp_add[a].options;
            t = t || {},
            n = t.key,
            o = t.cabinet_id,
            r = t.client_id,
            e.selected && (this.selected[a] = e.selected),
            s.isEmpty(d[n]) || s.isUndefined(d[n][r || o]) ? (s.isFunction(t.onFetchData) && t.onFetchData(),
            this._findElem("campaigns").html(m),
            this._findElem("advert").html(""),
            s.isFunction(t.onBeforeFetch) && t.onBeforeFetch(),
            i.ajax({
                type: "GET",
                url: t.url,
                data: t.data,
                beforeSend: s.bind(function(e) {
                    e.setRequestHeader("X-Auth-Token", this.token)
                }, this)
            }).always(function() {
                m.remove()
            }).done(s.bind(function(e) {
                s.isFunction(t.onFetchDone) && t.onFetchDone(d, e),
                c.resolve()
            }, this)).fail(s.bind(function() {
                this._error_modal || (this._error_modal = new l({
                    destroy: s.bind(function() {
                        delete this._error_modal
                    }, this)
                }).showError(null, !1))
            }, this))) : c.resolve(),
            c.done(s.bind(function() {
                s.isFunction(t.onLoadedResolve) && this._findElem(n).html(t.onLoadedResolve(d)),
                s.isFunction(t.onLoadedFinish) && t.onLoadedFinish()
            }, this))
        },
        getConditionVariants: function(e) {
            var t, n = this.hide_triggers[this.getTriggerAction(e)];
            return t = this.needCustomDays() ? this.condition_variants : s.filter(this.condition_variants, function(e) {
                return "0" === e.id || "delay" !== e.name
            }),
            s.isEmpty(n) || (t = s.filter(this.condition_variants, function(e) {
                return -1 == i.inArray(e.id, n)
            })),
            t
        },
        checkExecutionConditionInList: function(e) {
            return !!s.findWhere(this.condition_variants, {
                id: e
            })
        },
        convertSecInDays: function(e) {
            return e / 86400
        },
        needCustomDays: function() {
            return -1 != i.inArray(this.getTriggerAction(), this.triggers_with_delay)
        },
        getHideTriggers: function() {
            return this.hide_triggers[this.getTriggerAction()] ? this.hide_triggers[this.getTriggerAction()] : []
        },
        getTriggerId: function() {
            return this.$el.find("input[name=action_trigger_id]").val()
        },
        getCustomDays: function() {
            var e = parseInt(this.convertSecInDays(this.getTriggerId())) || "0"
              , t = this.$el.find("input[name=action_trigger_name]");
            return "delay" === t.val() ? e : ""
        },
        getExactDate: function() {
            return parseInt(this.$el.find("input[name=action_trigger_date_exec]").val()) || 0
        },
        getTriggerAction: function(e) {
            return e = e || this.$el.find("div[data-action]"),
            e.attr("data-action")
        },
        addTrigger: function(e) {
            if (!this.added_delay) {
                var t, s = this, n = i(e.currentTarget), o = n.closest(".digital-pipeline__edit-delay-new-process");
                o.append(this.getTemplate(this.edit_templates.trigger).render({
                    items: s.getConditionVariants(n.parent()),
                    type: "execution_condition",
                    need_custom_days: s.needCustomDays(),
                    custom_days: s.getCustomDays(),
                    trigger_id: s.getTriggerId(),
                    exact_date: s.getExactDate(),
                    date_formats: AMOCRM.system.format.date
                })),
                t = o.find(".js-trigger-save-delay"),
                this.added_delay = !0,
                this.baseFormInit({
                    container: o,
                    key: "delay_form",
                    button: t,
                    changeCallback: this.delayChecker
                })
            }
        },
        saveTrigger: function(e) {
            e.stopPropagation(),
            e.preventDefault();
            var t, n, o, a = i(e.currentTarget), l = this.$el.find("input[name=action_trigger_id]"), c = this.$el.find("input[name=action_trigger_name]"), d = this.$el.find(".digital-pipeline__delay-title"), u = this.$el.find("input[name=action_trigger_date_exec]");
            t = a.hasClass("button-input") ? a.closest(this._selector("edit_bubble")).find(this._selector("edit_forms")).serializeArray() : this.listDataCollector(a),
            n = this.formDataTransformer(t),
            n.date && n.time && 0 == n.add_delay ? (n.date_exec = moment(n.date + " " + n.time, AMOCRM.system.format.date.full).unix(),
            n.add_delay = 0,
            n.option = n.date + " " + n.time) : (n.date_exec = 0,
            n.add_delay = 60 * n.add_delay * 60 * 24),
            l.val(n.id ? n.id : n.add_delay),
            c.val(n.name ? n.name : "delay"),
            u.val(n.date_exec),
            d.html(n.option ? n.option : AMOCRM.lang.page.after + " " + this.convertSecInDays(n.add_delay) + " " + r.numeralWord(this.convertSecInDays(n.add_delay), AMOCRM.lang.page.delay_days)),
            this._findElem("edit_delay_settings").remove(),
            this.added_delay = !1,
            o = this.triggers_settings[c.val()] || void 0,
            s.isFunction(this[o]) && this[o](),
            s.isFunction(this.saveTriggerCallback) && this.saveTriggerCallback(),
            this.form && this.form.updateModelFromForm(),
            this.checkSiteSettings()
        },
        siteCallBack: function() {
            var e = this.$el.find(".digital-pipeline__edit-delay-new-process");
            this.parent_context.close_blocked = !0,
            this.site_settings = new h({
                settings: this.trigger_conditions,
                $button: e,
                page_context: this.parent_context,
                "new": !1,
                onOpen: s.bind(this.openSiteSettings, this),
                onChange: s.bind(this.changeSiteSettings, this),
                onClose: s.bind(this.closeSiteSettings, this)
            })
        },
        openSiteSettings: function() {
            this.form.model.set("conditions", this.trigger_conditions)
        },
        changeSiteSettings: function() {
            this.form.hasChanges()
        },
        closeSiteSettings: function() {
            this.site_settings && s.isFunction(this.site_settings.destroy) && (this.site_settings.destroy(!0),
            this.parent_context.close_blocked = !1),
            this.checkSiteSettings()
        },
        checkSiteSettings: function() {
            "visit" !== this.form.model.get("action_trigger_name") || r.has_keys(this.form.model.get("conditions"), ["sites"]) && 0 !== this.form.model.get("conditions").sites.length ? this.$el.find(".digital-pipeline__warning-container").text("") : this.$el.find(".digital-pipeline__warning-container").text(AMOCRM.lang.page.site_warning)
        }
    }),
    o.mixin(t, _),
    o.mixin(t, p),
    t
}),
define("lib/interface/settings/digital_pipeline/modal_cell", ["require", "jquery", "underscore", "twig", "cocktail", "lib/core/view", "lib/components/base/confirm", "lib/interface/settings/digital_pipeline/helper", "lib/interface/settings/digital_pipeline/mixins/bubble_settings_mixin"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("cocktail"), r = e("lib/core/view"), a = e("lib/components/base/confirm"), l = e("lib/interface/settings/digital_pipeline/helper"), c = e("lib/interface/settings/digital_pipeline/mixins/bubble_settings_mixin");
    return t = r.extend({
        ns: "digital-pipeline_cell",
        events: {
            "click .js-trigger-save": "saveProcessClick",
            "click .digital-pipeline__logout": "logoutHandler",
            "click .digital-pipeline__user-authorization": "editAuthentication",
            "click .digital-pipeline__add-process-button": "createFakeHandler",
            "click .button-cancel": "closeBubble"
        },
        _selectors: function() {
            return this._selectors_obj
        },
        _selectors_obj: {
            user_authorization: ".digital-pipeline__user-authorization",
            save_button: ".js-trigger-save",
            add_process_container: ".digital-pipeline__add-process-container",
            add_process_button: ".digital-pipeline__add-process-button",
            edit_bubble: ".digital-pipeline__edit-bubble",
            title_pointer: ".digital-pipeline__title-pointer",
            edit_forms: ".digital-pipeline__edit-forms"
        },
        edit_templates: {
            facebook: "/tmpl/digital_pipeline/edit_templates/edit_campaign_fb.twig",
            vk: "/tmpl/digital_pipeline/edit_templates/edit_campaign.twig",
            adwords: "/tmpl/digital_pipeline/edit_templates/edit_audience_adwords.twig",
            list: "/tmpl/digital_pipeline/edit_templates/edit_list.twig",
            actions: "/tmpl/digital_pipeline/edit_templates/edit_actions.twig",
            adsets: "/tmpl/digital_pipeline/edit_templates/edit_adsets.twig",
            campaigns: "/tmpl/digital_pipeline/edit_templates/edit_campaigns.twig",
            audiences: "/tmpl/digital_pipeline/edit_templates/edit_audiences.twig",
            ads: "/tmpl/digital_pipeline/edit_templates/edit_ads.twig",
            client_cabinets: "/tmpl/digital_pipeline/edit_templates/edit_clients_cabinets.twig",
            profile: "/tmpl/digital_pipeline/edit_templates/edit_profiles.twig"
        },
        getTemplate: function(e) {
            return n({
                ref: e
            })
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.business_processes = e.business_processes || {},
            this.handler = e.handler,
            this.handlers = e.handlers,
            this.widget_code = e.widget_code,
            this.id = e.id,
            this.handler_id = e.handler_id,
            this.widget = e.handlers.widget,
            this.settings = e.settings,
            this.langs = e.langs,
            this.group_id = e.target_group,
            this.parent_context = e.parent_context,
            this.logout = {},
            this.need_validation = {
                type: []
            },
            this.modal_context = e.modal_context,
            this.status = e.target_status,
            this.name = e.name,
            this.template_params = e.template_params
        },
        editAuthentication: function(e) {
            if (!this.parent_context.close_blocked) {
                this.closeBubble(e);
                var t, s = i(e.currentTarget), n = s.closest(this._selector("user_authorization")), o = this.handler, r = AMOCRM.constant("digital_profiles")[o] ? AMOCRM.constant("digital_profiles")[o] : void 0;
                r && (r.helper_link = AMOCRM.constant("settings_pipeline_template_params").data.howtowork_links[o]),
                t = {
                    params: r,
                    lang: AMOCRM.lang
                },
                this.in_edit || (n.append(this.getTemplate(this.edit_templates.profile).render(t)),
                this.addBubblePosition(e),
                this.in_edit = !0)
            }
        },
        createFakeHandler: function(e) {
            var t, s = this, n = this.handler, o = this.handler_id, r = this.settings, a = this.widget_code, l = this.langs, c = this.group_id, d = i(e.currentTarget).data("action"), u = [];
            u.push(this.status),
            t = new this.business_processes.model({
                handler_code: n,
                handler_id: o,
                statuses: u,
                settings: r,
                langs: l,
                widget_code: a,
                group_id: s.group_id,
                widget: s.widget,
                execution_condition: 0,
                action: d,
                fake: !0,
                name: this.name,
                template_params: this.template_params
            }),
            t.set("cid", t.cid),
            this.business_processes.add(t),
            this.modal_context.destroy(),
            i(document).trigger("rerender:row", {
                group_id: c,
                new_bp: t.cid,
                handler_id: t.handler_id
            })
        },
        addBubblePosition: function(e) {
            var t = i(e.currentTarget)
              , s = t.position()
              , n = t.find(".digital-pipeline__edit-bubble");
            n.css({
                right: 20,
                top: s.top + 35
            })
        },
        logoutHandler: function(e) {
            this.closeBubble(e);
            var t = this.handler
              , i = {}
              , s = this;
            new a({
                text: AMOCRM.lang.page.handlers[t].warning_logout,
                accept_text: AMOCRM.lang.page.buttons.ok,
                decline_text: AMOCRM.lang.page.buttons.cancel,
                button_class: "button-input_blue",
                destroy: function() {
                    this.accepted && (i[t] = {
                        handler: t,
                        delete_audience: 0
                    },
                    s._$document.trigger("logout:save", i))
                },
                accept: function() {
                    this.modal.destroy()
                }
            })
        },
        closeBubble: function(e, t) {
            e && !i(e.currentTarget).hasClass("button-cancel") && i(e.target).closest(this._selector("edit_bubble")).length > 0 && !i(e.target).closest(this._selector("edit_bubble")).hasClass("digital-pipeline__edit-bubble_actions") || e && i(e.target).closest(".pipeline-select-overlay").length > 0 || (e && e.stopPropagation(),
            this.in_edit = !1,
            this.added_delay = !1,
            this.need_validation.type = [],
            i(this._selector("edit_bubble")).remove(),
            this.form && (this.form.destroy(),
            this.form = null),
            i(document).trigger("hide:toggler"))
        },
        getOptions: function(e, t, n) {
            var o = this
              , r = i.Deferred();
            return s.isEmpty(e) ? i.ajax({
                url: o.bp_add[t][n].url(),
                xhrFields: {
                    withCredentials: !0
                },
                headers: {
                    "X-Auth-Token": o.token
                },
                data: {
                    format: "twig"
                },
                type: "GET"
            }).done(function(t) {
                t.response && !t.response.error ? r.resolve(i.extend(!0, e, t.response)) : (l.errorModal(t.response.error),
                r.reject())
            }).fail(function(e, s) {
                401 == e.status ? i.ajax({
                    url: "/ajax/settings/pipeline/" + o.parent_context.data.element_type + "/" + o.parent_context.pipeline.id + "/token",
                    type: "GET"
                }).done(function(e) {
                    o.token = e.response.token,
                    o.getOptions.call(o, t, n)
                }).fail(function() {
                    l.errorModal(),
                    r.reject()
                }) : (l.errorModal(),
                r.reject())
            }) : r.resolve(e),
            r
        },
        objToArray: function(e, t, i) {
            var n = [];
            return s.each(e, function(e, s) {
                var o = {};
                o[t] = s,
                o[i] = e,
                n.push(o)
            }),
            n
        }
    }),
    o.mixin(t, c),
    t
}),
define("lib/interface/settings/digital_pipeline/mixins/unsorted/visibility", ["require", "underscore"], function(e) {
    "use strict";
    var t = e("underscore");
    return {
        initUnsortedEvents: function() {
            this._$document.on("change" + this.ns, ".js-unsorted-checkbox", t.bind(this.toggle, this))
        },
        toggle: function(e) {
            var t = e.target.checked ? "show" : "hide";
            this.sendRequest(t, e.target.checked)
        },
        switcherRevert: function(e) {
            var t = this.$el.find(".js-unsorted-checkbox")
              , i = t.closest(".switcher_wrapper").find(".switcher");
            t.prop("checked", e),
            i.toggleClass("switcher__off", !e).toggleClass("switcher__on", e)
        },
        sendRequest: function(e, i) {
            $.post("/ajax/unsorted/" + e).done(t.bind(function(e) {
                e = t.extend({}, e),
                e.response && (e = e.response),
                "success" == e.status ? AMOCRM.constant("unsorted").show = i : this.switcherRevert(!i)
            }, this)).fail(t.bind(function() {
                this.switcherRevert(!i)
            }, this))
        }
    }
}),
define("lib/interface/settings/digital_pipeline/source_item", ["require", "twig", "underscore", "lib/core/view"], function(e) {
    "use strict";
    var t, i = e("twig"), s = e("underscore"), n = e("lib/core/view");
    return t = n.extend({
        ns: ".digital_pipeline_unsorted_item",
        events: {},
        templates: {
            phone: "interface/digital_pipeline/lead_sources_templates/phone.twig",
            mail: "interface/digital_pipeline/lead_sources_templates/mail.twig",
            form: "interface/digital_pipeline/lead_sources_templates/form.twig",
            fb_form: "interface/digital_pipeline/lead_sources_templates/fb_form.twig",
            chat: "interface/digital_pipeline/lead_sources_templates/chat.twig",
            social_gso: "interface/digital_pipeline/lead_sources_templates/social_gso.twig",
            salesbot: "interface/digital_pipeline/lead_sources_templates/salesbot.twig"
        },
        getTemplate: function(e) {
            return i({
                ref: e
            })
        },
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this.params = e || {},
            this.parent_context = e.parent_context || {}
        },
        rerender: function(e) {
            var e = e ? e : this.params;
            this.$el.html(this.getTemplate(this.templates[this.params.type]).render(e))
        },
        getSpecificOptions: function(e) {
            if (!s.isString(e) || s.isUndefined(this[e]))
                throw new Error("Wrong option:" + e);
            return this[e]
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/mail", ["require", "jquery", "underscore", "twig", "lib/interface/settings/digital_pipeline/source_item", "lib/components/mail/api"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("twig"),
    e("lib/interface/settings/digital_pipeline/source_item")), o = e("lib/components/mail/api");
    return t = n.extend({
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this.getData()
        },
        getData: function() {
            var e = []
              , t = {}
              , n = i('<span class="spinner-icon spinner-icon-abs-center">')
              , r = this;
            o.getMailboxes().done(function(i) {
                i && i.items && i.items.length > 0 && (e = s.filter(i.items, function(e) {
                    return e.active && !e["private"] && !e.locked
                }),
                t = s.extend({}, {
                    source: {
                        id: r.params.id,
                        type: "mail",
                        active: e.length > 0,
                        elements: e
                    }
                }),
                r.params = t.source,
                r.rerender(t))
            }).fail(function() {
                n.remove()
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/helper", ["require", "underscore", "twig", "lib/core/view", "lib/components/base/form", "lib/interface/mail/mixins/insert_marker"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view")
      , n = e("lib/components/base/form")
      , o = e("lib/interface/mail/mixins/insert_marker");
    return {
        initMarkers: function() {
            var e = this._findElem("marker")
              , t = this._findElem("message");
            e.on("click", function(e) {
                o.insertMarker.call(this, e, t)
            })
        },
        initVars: function(e) {
            var i = this;
            return e = t.extend({
                options: {
                    enable: !1
                }
            }, e),
            i._params = {
                templates: {
                    disabled: "/tmpl/digital_pipeline/chats/" + i._service + "/disabled.twig",
                    enabled: "/tmpl/digital_pipeline/chats/" + i._service + "/enabled.twig",
                    loader: "/tmpl/digital_pipeline/chats/" + i._service + "/loader.twig",
                    page: "/tmpl/digital_pipeline/chats/" + i._service + "/page.twig",
                    pages: "/tmpl/digital_pipeline/chats/" + i._service + "/pages.twig",
                    section: "/tmpl/digital_pipeline/chats/" + i._service + "/section.twig"
                },
                events: {
                    click_main: "none"
                }
            },
            i._data = {
                auth: {
                    need: !0
                },
                account_info: {
                    icon: "",
                    id: "",
                    link: "",
                    name: ""
                },
                pages: {
                    123: {
                        id: 123,
                        name: "Example",
                        subscribed: !1,
                        link: "",
                        icon: ""
                    }
                },
                error: null
            },
            i
        },
        botFormInit: function() {
            this.form = this._addComponent(n.View, {
                el: this.$el.find(".social-integration__bot-settings-form")
            }),
            this.form.model.on("has_changes", t.bind(function() {
                this._findElem("save_bot_message").trigger("button:save:enable")
            }, this)).on("has_reverted", t.bind(function() {
                this._findElem("save_bot_message").trigger("button:save:disable")
            }, this)),
            this.form.model.trigger("has_reverted")
        },
        setLoader: function(e) {
            var t = this;
            return this._dropElemCache("overlay")._elem("overlay").length || (this.$el.append(i({
                ref: t._params.templates.loader
            }).render({})),
            this._dropElemCache("overlay")),
            this._elem("overlay").trigger("overlay:" + (e ? "show" : "hide")),
            t
        },
        checkAmojoPages: function() {
            return t.any(this.pages, function(e) {
                return e.subscribed ? !0 : void 0
            })
        },
        setPageSubscriptionError: function(e, t) {
            var i = this.getSubscriptionPage(e)
              , s = i.find(".social-group-row__error");
            s.text(t)
        },
        getSubscriptionPage: function(e) {
            return this._elem("page").filter('[data-id="%s"]'.replace("%s", e))
        },
        destroy: function() {
            return s.prototype.destroy.apply(this, arguments),
            !0
        }
    }
}),
define("lib/interface/settings/digital_pipeline/chats/facebook", ["require", "jquery", "underscore", "twig", "lib/core/view", "cocktail", "lib/interface/settings/digital_pipeline/chats/helper", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("cocktail"), a = e("lib/interface/settings/digital_pipeline/chats/helper"), l = e("lib/common/fn");
    return t = o.extend({
        _service: "facebook",
        _url: {
            list: "/ajax/v1/chats/origin/facebook/list",
            add: "/ajax/v1/chats/origin/facebook/add",
            disable: "/ajax/v1/chats/origin/facebook/disable",
            status: "/ajax/v1/chats/origin/facebook/status",
            auth: "/ajax/v1/chats/origin/facebook/auth",
            logout: "/ajax/v1/chats/origin/facebook/logout",
            old_fb: {
                deactivate: "/ajax/amochats/facebook"
            }
        },
        _params: null,
        _data: null,
        events: function() {
            var e = this
              , t = {};
            return t["click " + e._selector("subscription_switcher")] = "toggleSubscriptionStateHolder",
            t["click " + e._selector("deactivate")] = "deactivate",
            t["click " + e._selector("connect")] = "connect",
            t
        },
        _classes: function() {
            return {
                link: "chats-integrations-list__link",
                header: "chats-integrations-list__wrapper",
                pages_wrapper: "js-pages_wrapper",
                page: "js-page",
                subscription_switcher: "fb-page-switcher",
                deactivate: "js-deactivate",
                connect: "js-connect-facebook",
                overlay: "js-facebook_overlay"
            }
        },
        initialize: function(e) {
            var t = this;
            o.prototype.initialize.apply(this, arguments),
            this.old_facebook = e.options.old_facebook,
            t.initVars(e).setLoader(!0),
            this._loadFbSDK().then(s.bind(function() {
                Promise.all([t.checkFbStatus(), n._preload(s.values(t._params.templates))()]).then(function(e) {
                    t.fetchData(e[0])
                })["catch"](function() {
                    t.fetchData(!1)
                })
            }, this))["catch"](function() {
                console.log("It's impossible to load Facebook SDK")
            })
        },
        initVars: function() {
            var e = this;
            return e._params = {
                templates: {
                    disabled: "/tmpl/digital_pipeline/chats/" + e._service + "/disabled.twig",
                    enabled: "/tmpl/digital_pipeline/chats/" + e._service + "/enabled.twig",
                    loader: "/tmpl/digital_pipeline/chats/" + e._service + "/loader.twig",
                    page: "/tmpl/digital_pipeline/chats/" + e._service + "/page.twig",
                    pages: "/tmpl/digital_pipeline/chats/" + e._service + "/pages.twig",
                    section: "/tmpl/digital_pipeline/chats/" + e._service + "/section.twig"
                },
                events: {
                    click_main: "none"
                }
            },
            e._data = {
                auth: {
                    need: !0
                },
                account_info: {
                    icon: "",
                    id: "",
                    link: "",
                    name: ""
                },
                pages: {
                    123: {
                        id: 123,
                        name: "Example",
                        subscribed: !1,
                        link: "",
                        icon: ""
                    }
                },
                error: null
            },
            e
        },
        checkFbStatus: function() {
            var e = this;
            return new Promise(function(t, i) {
                e.fbInit(),
                e.initAuth().then(s.bind(function(s) {
                    l.has_keys(s, ["response", "chats", "origin", "status", e._service]) && s.response.chats.origin.status[e._service].active ? (this.token = s.response.chats.origin.status[e._service].token,
                    Promise.all([e.getFbAccountData(), e.getPages(), e.getAmoJoPages()]).then(t, i)) : t(!1)
                }, e), s.bind(function() {
                    t(!1)
                }, e))
            }
            )
        },
        fetchData: function(e) {
            var t = this;
            return e ? (this.account_info = e[0],
            this.pages = e[1].data,
            this.amojo_pages = e[2].response.chats.origin.list[t._service].length > 0 ? e[2].response.chats.origin.list[t._service] : [],
            s.each(this.pages, function(e) {
                var i = +e.id
                  , n = s.findWhere(t.amojo_pages, {
                    page_id: i,
                    enabled: !0
                });
                e.subscribed = !!n,
                l.has_keys(n, ["error"]) && n.error && (e.error = n.error)
            }),
            t._data = {
                auth: {
                    need: !e
                },
                account_info: {
                    icon: e[0].picture.data.url,
                    id: e[0].id,
                    link: e[0].link,
                    name: e[0].name
                },
                pages: this.pages,
                error: null
            },
            t._data.auth.need = !1,
            t.setLoader(!0),
            t.render(e, function() {
                t.setLoader(!1)
            }),
            t) : (t._data.auth.need = !0,
            t.setLoader(!0),
            t.render(e, function() {
                t.setLoader(!1)
            }),
            void 0)
        },
        render: function(e, t) {
            var i, s, o = this, r = "";
            o._data.auth.need ? (i = o._params.templates.disabled,
            s = {
                error: o._data.error
            }) : (i = o._params.templates.enabled,
            s = {
                user_info: o._data.account_info,
                pages: o._data.pages
            }),
            r += n({
                ref: i
            }).render(s),
            o.$el.html(r),
            o._dropElemCache().delegateEvents(),
            t.call(o)
        },
        _loadFbSDK: function() {
            return new Promise(s.bind(function(e, t) {
                this._loadScript({
                    src: "//connect.facebook.com/en_US/sdk.js",
                    onLoad: e,
                    onError: s.bind(function(i) {
                        this._loadScript({
                            src: "/private/widget/proxy.php?target=https://connect.facebook.com/en_US/sdk.js&mode=native&skip_ajax_check=1",
                            onLoad: e,
                            onError: t
                        })
                    }, this)
                })
            }, this))
        },
        _loadScript: function(e) {
            e = e || {},
            i.ajax({
                url: e.src,
                dataType: "script",
                cache: !0
            }).done(s.bind(function(t, i) {
                s.isFunction(e.onLoad) && e.onLoad()
            }, this)).fail(s.bind(function(t, i, n) {
                s.isFunction(e.onError) && e.onError()
            }, this))
        },
        setPageSubscriptionState: function(e, t) {
            var i = this
              , s = i._elem("page").filter('[data-id="%s"]'.replace("%s", e));
            s.find(".switcher").toggleClass("switcher__on", t).toggleClass("switcher__off", !t)
        },
        deactivate: function(e) {
            s.isUndefined(e) || e.stopPropagation();
            var t = this
              , n = {
                request: {
                    chats: {
                        origin: {
                            logout: !0
                        }
                    }
                }
            };
            t.setLoader(!0),
            i.ajax({
                url: t._url.logout,
                method: "post",
                data: n
            }).done(function() {
                t.fetchData()
            }).fail(s.noop)
        },
        toggleSubscriptionStateHolder: function(e) {
            var t, n, o, r, a, c = this, d = i(e.currentTarget).find(".switcher"), u = d.closest(c._selector("page"));
            if (u && u.length)
                return r = u.data("id") + "",
                o = s.findWhere(this.pages, {
                    id: r
                }),
                c.setLoader(!0),
                a = {
                    request: {
                        chats: {
                            origin: [{
                                page_id: o.id
                            }]
                        }
                    }
                },
                o.subscribed ? n = "disable" : (n = "add",
                a.request.chats.origin[0] = s.extend(a.request.chats.origin[0], {
                    page_token: o.access_token,
                    page_name: o.name
                })),
                t = c._url[n],
                i.ajax({
                    url: t,
                    data: a,
                    method: "POST"
                }).done(function(e) {
                    c.setLoader(!1),
                    l.has_keys(e, ["response", "chats", "origin", n, c._service, r, "enabled"]) && (o.subscribed = e.response.chats.origin[n][c._service][r].enabled,
                    c.setPageSubscriptionState(r, !!o.subscribed)),
                    l.has_keys(e, ["response", "chats", "origin", n, c._service, r, "error"]) ? c.setPageSubscriptionError(r, e.response.chats.origin[n][c._service][r].error) : c.setPageSubscriptionError(r, "")
                }).fail(s.noop),
                s.isFunction(e.stopPropagation) && e.stopPropagation(),
                !1
        },
        fbInit: function() {
            var e = this;
            return FB.init({
                appId: AMOCRM.constant("social_apps")[e._service],
                xfbml: !1,
                version: "v2.8",
                status: !0
            }),
            this
        },
        initAuth: function() {
            var e = this;
            return i.ajax({
                method: "get",
                url: e._url.status
            })
        },
        getPages: function() {
            return new Promise(s.bind(function(e, t) {
                FB.api("/me/accounts", {
                    access_token: this.token,
                    fields: "id, name, picture, link, access_token"
                }, function(i) {
                    i && !i.error ? e(i) : t(i.error)
                })
            }, this))
        },
        getFbAccountData: function() {
            return new Promise(s.bind(function(e, t) {
                FB.api("/me", {
                    access_token: this.token,
                    fields: "name, id, picture, link"
                }, function(i) {
                    i && !i.error ? e(i) : t(i.error)
                })
            }, this))
        },
        getAmoJoPages: function() {
            var e = this;
            return i.ajax({
                method: "GET",
                url: e._url.list
            })
        },
        setBackAuth: function() {
            var e = this
              , t = {
                request: {
                    chats: {
                        origin: {
                            fb_account_id: this.fb_account_id,
                            expires_at: this.expired,
                            token: this.token
                        }
                    }
                }
            };
            return i.ajax({
                method: "post",
                data: t,
                url: e._url.auth
            })
        },
        connect: function() {
            var e = this;
            this.fbInit(),
            FB.login(function(t) {
                t.authResponse && (e.setLoader(!0),
                e.token = t.authResponse.accessToken,
                e.fb_account_id = t.authResponse.userID,
                e.expired = t.authResponse.expiresIn,
                e.setBackAuth().done(function(t) {
                    e.token = t.response.chats.origin.login[e._service][e.fb_account_id].token,
                    Promise.all([e.getFbAccountData(), e.getPages(), e.getAmoJoPages()]).then(function(t) {
                        e.fetchData(t),
                        e.old_facebook.enable && e.deactivateOldFacebook()
                    }, function() {
                        e.fetchData()
                    })
                }))
            }, {
                scope: "email, manage_pages, pages_messaging, pages_messaging_subscriptions"
            })
        },
        deactivateOldFacebook: function() {
            i.ajax({
                url: this._url.old_fb.deactivate,
                method: "post",
                dataType: "json",
                data: {
                    action: "deactivate"
                }
            })
        }
    }),
    r.mixin(t, a),
    t
}),
define("lib/interface/settings/digital_pipeline/chats/vk", ["require", "jquery", "underscore", "twig", "store", "lib/core/view", "cocktail", "lib/interface/settings/digital_pipeline/chats/helper", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("store"), r = e("lib/core/view"), a = e("cocktail"), l = e("lib/interface/settings/digital_pipeline/chats/helper"), c = e("lib/common/fn");
    return t = r.extend({
        _service: "vk",
        _url: {
            list: "/ajax/v1/chats/origin/vk/list",
            add: "/ajax/v1/chats/origin/vk/add",
            disable: "/ajax/v1/chats/origin/vk/disable",
            status: "/ajax/v1/chats/origin/vk/status",
            logout: "/ajax/v1/chats/origin/vk/logout"
        },
        _params: null,
        _data: null,
        events: function() {
            var e = this
              , t = {};
            return t["click " + e._selector("page_auth")] = "pageAuth",
            t["click " + e._selector("deactivate")] = "deactivate",
            t
        },
        _classes: function() {
            return {
                link: "chats-integrations-list__link",
                header: "chats-integrations-list__wrapper",
                pages_wrapper: "js-pages_wrapper",
                page: "js-page",
                deactivate: "js-deactivate",
                overlay: "js-vk_overlay",
                page_auth: "js-vk-page-auth"
            }
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments);
            var t = this;
            t.auth = {},
            t.initVars(e).setLoader(!0),
            o.remove("chats_vk_user_result"),
            o.remove("chats_vk_user_error"),
            this.checkPromise(),
            this._$window.on("storage" + this.ns, s.bind(this.localStorageCheck, this)),
            this._$document.on("chats:modal:destroy", s.bind(this.chatsModalDestroy, this))
        },
        chatsModalDestroy: function() {
            this._$window.off("storage" + this.ns)
        },
        checkPromise: function() {
            var e = this;
            Promise.all([e.checkVkStatus(), n._preload(s.values(e._params.templates))()]).then(function(t) {
                e.fetchData(t[0])
            })["catch"](function() {
                e.setLoader(!1)
            })
        },
        checkVkStatus: function() {
            var e = this;
            return new Promise(function(t, i) {
                e.initAuth().then(s.bind(function(i) {
                    c.has_keys(i, ["response", "chats", "origin", "status", e._service, "active"]) && i.response.chats.origin.status[e._service].active ? (c.has_keys(i, ["response", "chats", "origin", "status", e._service, "profile"]) && (e._account_info = i.response.chats.origin.status[e._service].profile),
                    e._account_data = i.response.chats.origin.status[e._service].profile,
                    e.auth.need = !1,
                    e.getPages().done(function(e) {
                        t(e)
                    }).fail(function() {
                        t(!1)
                    })) : (e.auth.need = !0,
                    t(!1)),
                    c.has_keys(i, ["response", "chats", "origin", "status", e._service, "link"]) && (e.auth.link = i.response.chats.origin.status[e._service].link)
                }, e), s.bind(function(e) {
                    t(!1)
                }, e))
            }
            )
        },
        fetchData: function(e) {
            return this.auth.need ? (this.setLoader(!0),
            void this.render(e, function() {
                this.setLoader(!1)
            })) : (c.has_keys(e, ["response", "chats", "origin", "list", this._service]) && (this.pages = e.response.chats.origin.list[this._service]),
            this._data = {
                account_info: {
                    icon: this._account_info.photo,
                    id: this._account_info.id,
                    link: "",
                    name: this._account_info.full_name
                },
                pages: this.pages
            },
            this.setLoader(!0),
            this.render(e, function() {
                this.setLoader(!1)
            }),
            this)
        },
        makeRenderTemplateData: function() {
            var e, t;
            return this.auth.need ? (e = this._params.templates.disabled,
            t = {
                auth_link: this.auth.link
            }) : (e = this._params.templates.enabled,
            t = {
                user_info: this._data.account_info,
                pages: this._data.pages
            }),
            {
                template: e,
                params: t
            }
        },
        render: function(e, t) {
            var i = this.makeRenderTemplateData();
            this._dropElemCache().delegateEvents(),
            this.$el.html(n({
                ref: i.template
            }).render(i.params)),
            t.call(this)
        },
        localStorageCheck: function(e) {
            o.get("chats_vk_user_result") && this.checkPromise(),
            this._$window.off("storage" + this.ns),
            o.remove("chats_vk_user_result"),
            o.remove("chats_vk_user_error"),
            this._$window.on("storage" + this.ns, s.bind(this.localStorageCheck, this))
        },
        setPageSubscriptionState: function(e, t) {
            var i = this.getSubscriptionPage(e);
            i.find(".switcher").toggleClass("switcher__on", t).toggleClass("switcher__off", !t)
        },
        deactivate: function(e) {
            s.isUndefined(e) || e.stopPropagation();
            var t = this
              , n = {
                request: {
                    chats: {
                        origin: {
                            logout: !0
                        }
                    }
                }
            };
            t.setLoader(!0),
            i.ajax({
                url: t._url.logout,
                method: "post",
                data: n
            }).done(function() {
                t.checkPromise()
            })
        },
        pageAuth: function(e) {
            var t, n, r = this, a = i(e.currentTarget).find(".switcher"), l = a.closest(r._selector("page"));
            return l && l.length ? (n = l.data("id") + "",
            t = s.findWhere(this.pages, {
                id: +n
            }),
            void (t.enabled ? (e.preventDefault(),
            r.toggleSubscriptionStateHolder(e)) : (r.setPageSubscriptionState(n, !0),
            r._$window.on("storage" + r.ns, function() {
                o.get("chats_vk_groups_result") && r.toggleSubscriptionStateHolder(e),
                r._$window.off("storage" + r.ns),
                o.remove("chats_vk_groups_result"),
                o.remove("chats_vk_groups_error"),
                r._$window.on("storage" + r.ns, s.bind(r.localStorageCheck, r))
            })))) : void e.preventDefault()
        },
        toggleSubscriptionStateHolder: function(e) {
            var t, n, o, r, a, l = this, d = i(e.currentTarget).find(".switcher"), u = d.closest(l._selector("page")), h = !d.hasClass("switcher__on");
            if (u && u.length)
                return r = u.data("id") + "",
                o = s.findWhere(this.pages, {
                    id: +r
                }),
                l.setLoader(!0),
                a = {
                    request: {
                        chats: {
                            origin: [{
                                id: o.id,
                                name: o.name
                            }]
                        }
                    }
                },
                h ? (n = "add",
                a.request.chats.origin[0] = s.extend(a.request.chats.origin[0], {
                    page_token: o.access_token,
                    page_name: o.name
                })) : n = "disable",
                t = l._url[n],
                i.ajax({
                    url: t,
                    data: a,
                    method: "POST"
                }).done(function(e) {
                    l.setLoader(!1),
                    c.has_keys(e, ["response", "chats", "origin", n, l._service, r, "enabled"]) && (o.enabled = e.response.chats.origin[n][l._service][r].enabled,
                    l.setPageSubscriptionState(r, !!o.enabled)),
                    c.has_keys(e, ["response", "chats", "origin", n, l._service, r, "error"]) ? l.setPageSubscriptionError(r, e.response.chats.origin[n][l._service][r].error) : l.setPageSubscriptionError(r, "")
                }).fail(function() {
                    l.setLoader(!1)
                }),
                s.isFunction(e.stopPropagation) && e.stopPropagation(),
                !1
        },
        initAuth: function() {
            var e = this;
            return i.ajax({
                method: "get",
                url: e._url.status
            })
        },
        getPages: function() {
            var e = this;
            return i.ajax({
                method: "get",
                url: e._url.list,
                type: "json"
            })
        }
    }),
    a.mixin(t, l),
    t
}),
define("lib/interface/settings/digital_pipeline/chats/chat_bot", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/core/view", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = e("lib/core/view"), a = e("lib/components/base/form");
    return t = r.extend({
        _params: null,
        _data: null,
        events: function() {
            var e = this
              , t = {};
            return t["click " + e._selector("deactivate")] = "deactivate",
            t["click " + e._selector("connect")] = "connect",
            t["click " + e._selector("save_bot_token")] = "saveBotToken",
            t
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments);
            var t = this;
            t.initVars(e).setLoader(!0),
            Promise.all([t.checkStatus(), n._preload(s.values(t._params.templates))()]).then(function(e) {
                t.fetchData(e[0], "list")
            })
        },
        initVars: function(e) {
            var t = this;
            return e = s.extend({
                options: {
                    enable: !1
                }
            }, e),
            t._params = {
                templates: {
                    disabled: "/tmpl/digital_pipeline/chats/" + t._service + "/disabled.twig",
                    enabled: "/tmpl/digital_pipeline/chats/" + t._service + "/enabled.twig",
                    loader: "/tmpl/digital_pipeline/chats/" + t._service + "/loader.twig",
                    section: "/tmpl/digital_pipeline/chats/" + t._service + "/section.twig",
                    description: "/tmpl/digital_pipeline/chats/" + t._service + "/description.twig"
                }
            },
            t._data = {
                auth: {
                    need: !0
                },
                error: null
            },
            t
        },
        checkStatus: function() {
            var e = this;
            return i.ajax({
                method: "get",
                dataType: "json",
                url: e._url.list
            })
        },
        fetchData: function(e, t, i) {
            var s, n, r = this, a = e && o.has_keys(e, ["response", "chats", "origin", t, r._service]) && e.response.chats.origin[t][r._service][0] && o.has_keys(e.response.chats.origin[t][r._service][0], ["error"]) && e.response.chats.origin[t][r._service][0].error;
            return a && (n = e.response.chats.origin[t][r._service][0].error),
            r._data.error = n,
            e && t && o.has_keys(e, ["response", "chats", "origin", t, r._service]) && e.response.chats.origin[t][r._service][0] && o.has_keys(e.response.chats.origin[t][r._service][0], ["id"]) ? (s = {
                name: e.response.chats.origin[t][r._service][0].name,
                id: e.response.chats.origin[t][r._service][0].id
            },
            r._data.bot = s,
            r._data.auth.need = !1,
            r.setLoader(!0),
            r.render(e, function() {
                r.setLoader(!1),
                r.botFormInit()
            }),
            r) : (r._data.auth.need = !0,
            r._data.expanded = i,
            r.setLoader(!0),
            r.render(e, function() {
                r.setLoader(!1),
                r.botFormInit()
            }),
            void 0)
        },
        botFormInit: function() {
            this.form = this._addComponent(a.View, {
                el: this.$el.find(".social-integration__bot-settings-form")
            }),
            this.form.model.on("has_changes", s.bind(function() {
                this._findElem("save_bot_token").trigger("button:save:enable")
            }, this)).on("has_reverted", s.bind(function() {
                this._findElem("save_bot_token").trigger("button:save:disable")
            }, this))
        },
        setLoader: function(e) {
            var t = this;
            return this._dropElemCache("overlay")._elem("overlay").length || (this.$el.append(n({
                ref: t._params.templates.loader
            }).render({})),
            this._dropElemCache("overlay")),
            this._elem("overlay").trigger("overlay:" + (e ? "show" : "hide")),
            t
        },
        render: function(e, t) {
            var i, s, o = this, r = "";
            o._data.auth.need ? (i = o._params.templates.disabled,
            s = {
                error: o._data.error,
                expanded: o._data.expanded
            }) : (i = o._params.templates.enabled,
            s = {
                bot: o._data.bot,
                error: o._data.error
            }),
            r += n({
                ref: i
            }).render(s),
            o.$el.html(r),
            o._dropElemCache().delegateEvents(),
            t.call(o)
        },
        deactivate: function(e) {
            s.isUndefined(e) || e.stopPropagation();
            var t = this
              , n = {
                request: {
                    chats: {
                        origin: [{
                            id: t._data.bot.id
                        }]
                    }
                }
            };
            t.setLoader(!0),
            i.ajax({
                url: t._url["delete"],
                method: "post",
                data: n
            }).done(function() {
                t.fetchData()
            }).fail(function() {
                t.setLoader(!1)
            })
        },
        saveBotToken: function() {
            var e, t = this;
            t.setLoader(!0),
            e = {
                request: {
                    chats: {
                        origin: [{
                            token: t.form.model.get("token")
                        }]
                    }
                }
            },
            i.ajax({
                url: t._url.add,
                data: e,
                dataType: "json",
                method: "POST"
            }).done(function(e) {
                t.form.model.updateDefaults(),
                t.form.model.trigger("has_reverted"),
                t.fetchData(e, "add", !0)
            }).fail(function() {
                t.setLoader(!1)
            })
        },
        destroy: function() {
            return r.prototype.destroy.apply(this, arguments),
            !0
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/telegram", ["require", "lib/interface/settings/digital_pipeline/chats/chat_bot"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/chats/chat_bot");
    return t = i.extend({
        _service: "telegram",
        _url: {
            list: "/ajax/v1/chats/origin/telegram/list/",
            add: "/ajax/v1/chats/origin/telegram/add/",
            "delete": "/ajax/v1/chats/origin/telegram/delete/"
        },
        _classes: function() {
            return {
                link: "chats-integrations-list__link",
                header: "chats-integrations-list__wrapper",
                pages_wrapper: "js-pages_wrapper",
                page: "js-page",
                deactivate: "js-deactivate",
                connect: "js-connect-telegram",
                overlay: "js-telegram_overlay",
                bot_settings: "social-integration__bot-settings",
                bot_settings_wrapper: "social-integration__bot-settings-wrapper",
                bot_switcher: "bot-switcher",
                save_bot_token: "js-save-bot-token",
                marker: "marker-list__tag",
                message: "bot-message"
            }
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/viber", ["require", "lib/interface/settings/digital_pipeline/chats/chat_bot"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/chats/chat_bot");
    return t = i.extend({
        _service: "viber",
        _url: {
            list: "/ajax/v1/chats/origin/viber/list/",
            add: "/ajax/v1/chats/origin/viber/add/",
            "delete": "/ajax/v1/chats/origin/viber/delete/"
        },
        _classes: function() {
            return {
                link: "chats-integrations-list__link",
                header: "chats-integrations-list__wrapper",
                pages_wrapper: "js-pages_wrapper",
                page: "js-page",
                deactivate: "js-deactivate",
                connect: "js-connect-viber",
                overlay: "js-viber_overlay",
                bot_settings: "social-integration__bot-settings",
                bot_settings_wrapper: "social-integration__bot-settings-wrapper",
                bot_switcher: "bot-switcher",
                save_bot_token: "js-save-bot-token",
                marker: "marker-list__tag",
                message: "bot-message"
            }
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/salesbot", ["require", "jquery", "underscore", "twig", "lib/core/view", "cocktail", "lib/interface/settings/digital_pipeline/chats/helper", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("cocktail"), a = e("lib/interface/settings/digital_pipeline/chats/helper");
    e("lib/common/fn");
    return t = o.extend({
        _service: "salesbot",
        _url: {
            save: "/ajax/settings/salesbot/save",
            list: "/ajax/settings/salesbot"
        },
        _markers: [{
            code: "{{contact.name}}",
            name: "contact.name"
        }],
        _params: null,
        events: function() {
            var e = this
              , t = {};
            return t["click " + e._selector("toggle")] = "toggleBot",
            t["click " + e._selector("save_bot_message")] = "saveBotMessage",
            t
        },
        _classes: function() {
            return {
                toggle: "js-toggle-salesbot",
                checkbox: "toggle-salesbot",
                marker: "marker-list__tag",
                save_bot_message: "js-save-bot-message",
                message: "bot-message",
                overlay: "js-salesbot_overlay"
            }
        },
        initialize: function(e) {
            var t = this;
            o.prototype.initialize.apply(this, arguments),
            t.initVars(e).setLoader(!0),
            t.fetchData()
        },
        initVars: function() {
            var e = this;
            return e._params = {
                templates: {
                    disabled: "/tmpl/digital_pipeline/chats/" + e._service + "/disabled.twig",
                    enabled: "/tmpl/digital_pipeline/chats/" + e._service + "/enabled.twig"
                }
            },
            e
        },
        fetchData: function() {
            var e = this;
            return i.ajax({
                method: "GET",
                url: e._url.list
            }).done(function(t) {
                e.setLoader(!0),
                e.render(t, function() {
                    t.enabled && (e.botFormInit(),
                    e.initMarkers()),
                    e.setLoader(!1)
                })
            }),
            e
        },
        render: function(e, t) {
            var i, s, o = this, r = "";
            e.enabled ? (i = o._params.templates.enabled,
            s = {
                enabled: e.enabled,
                markers: o._markers,
                message: e.message
            }) : i = o._params.templates.disabled,
            r += n({
                ref: i
            }).render(s),
            o.$el.html(r),
            o._dropElemCache().delegateEvents(),
            t.call(o)
        },
        botToggleRequest: function(e) {
            var t, s = this;
            this.setLoader(!0),
            t = {
                enabled: e
            },
            i.ajax({
                url: s._url.save,
                data: JSON.stringify(t),
                dataType: "json",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            }).done(function(t) {
                s.render(t, function() {
                    s.setLoader(!1),
                    e && (s.botFormInit(),
                    s.initMarkers())
                }),
                s.form.model.updateDefaults(),
                s.form.model.trigger("has_reverted")
            }).fail()
        },
        toggleBot: function(e) {
            var t = i(e.currentTarget).find(this._selector("checkbox"));
            s.isFunction(e.stopPropagation) && e.stopPropagation(),
            this.botToggleRequest("Y" !== t.val())
        },
        saveBotMessage: function() {
            var e, t = this;
            t.setLoader(!0),
            e = {
                message: this.form.model.get("message")
            },
            i.ajax({
                url: t._url.save,
                data: JSON.stringify(e),
                dataType: "json",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            }).done(function() {
                t.form.model.updateDefaults(),
                t.form.model.trigger("has_reverted"),
                t.setLoader(!1)
            }).fail(s.noop)
        }
    }),
    r.mixin(t, a),
    t
}),
define("lib/interface/settings/digital_pipeline/chats/jivosite", ["require", "jquery", "underscore", "twig", "elements_view", "clipboard", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view"), r = e("clipboard"), a = e("lib/common/fn");
    return t = o.extend({
        events: {
            "blur .js-jivosite-input": "onBlurValidate",
            "click .js-jivosite-submit": "transferDataUserToServer",
            "click .js-jivosite-change-state-form": "changeStateRegistrationIntoLogin",
            "click .js-deactivate": "deactivate"
        },
        _classes: function() {
            return {
                copied_tip: "js-tip-copied"
            }
        },
        _selectors: function() {
            return {
                buttonSubmit: ".js-jivosite-submit",
                inputsCollection: ".js-jivosite-input",
                emailInput: ".js-jivosite-email",
                codeForPasting: "#jivosite-embed-code-text",
                targetLinkCopy: "#jivosite-copy-link",
                passwordInput: ".js-jivosite-password",
                domainInput: ".js-jivosite-domain",
                elementChangeStateForm: ".js-jivosite-change-state-form",
                hiddingInputPassword: ".js-saving-password"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            this.setElement(e.$container),
            this.$el.find(".js-jivosite-instruction").removeClass("chats-integrations-description--visible"),
            this.setClipBoard(!0)
        },
        transferDataUserToServer: function() {
            var e = this.getDataFromInputsValues({
                elements: this._elem("inputsCollection")
            })
              , t = this._elem("buttonSubmit");
            return this.forEachValidate() ? (t.trigger("button:load:start"),
            void this.uploadAndLoadData({
                url: "/ajax/amochats/add?service=jivosite",
                type: "POST",
                dataType: "JSON",
                data: e
            })) : !1
        },
        uploadAndLoadData: function(e) {
            var t = this
              , s = this._elem("buttonSubmit");
            i.ajax({
                url: e.url,
                type: e.type,
                dataType: e.dataType,
                data: e.data,
                success: function(e) {
                    e.error ? (t.showAndHideErrorsText({
                        currentElement: t._elem("emailInput"),
                        isShow: !0,
                        txtforError: AMOCRM.lang.user_rights_email_already_added,
                        time: 300
                    }),
                    t._elem("emailInput").addClass("jivosite_settings_error-field"),
                    s.trigger("button:load:stop")) : (t.rerenderJivositeItem({
                        codeForeArea: e.jivosite.result,
                        userMail: e.jivosite.email,
                        userDomain: e.jivosite.domain,
                        date: e.jivosite.date_insert
                    }),
                    s.trigger("button:load:stop"))
                }
            })
        },
        forEachValidate: function() {
            var e = this._elem("inputsCollection")
              , t = this
              , n = s.every(e, function(e) {
                return t.validateForm(i(e))
            });
            return n ? !0 : !1
        },
        onBlurValidate: function(e) {
            var t = i(e.target);
            this.validateForm(t)
        },
        getDataFromInputsValues: function(e) {
            var t = {}
              , s = e.elements;
            return s.each(function() {
                var e = i(this)
                  , s = e.attr("name");
                t[s] = e.val()
            }),
            "true" === this.checkAuth() && (t.auth = !0,
            t.domain = "pseudomain"),
            t
        },
        rerenderJivositeItem: function(e) {
            var t = {
                codeForArea: e.codeForeArea,
                userMail: e.userMail,
                userDomain: e.userDomain,
                date: e.date
            }
              , s = {
                passwordForJivositeInput: a.passwordGen(8),
                emailForJivositeInput: AMOCRM.constant("user").login
            }
              , o = i(n({
                ref: "/tmpl/digital_pipeline/chats/jivosite/index.twig"
            }).render(e.deactivate ? s : t));
            this.$el.replaceWith(o),
            this.setElement(o),
            this.setClipBoard(!0)
        },
        validateForm: function(e) {
            var t = e
              , i = this;
            return this.checkDisabled(e) ? !0 : this.ckeckNotEmptyInput(t) ? (i.showAndHideErrorsText({
                currentElement: t,
                isShow: !0,
                txtforError: AMOCRM.lang.support_caption_error,
                time: 300
            }),
            !1) : this.checkingIsValidInput({
                elementInput: t,
                attr: "data-jivosite"
            }) ? (i.showAndHideErrorsText({
                currentElement: t,
                isShow: !1,
                time: 300
            }),
            !0) : (i.showAndHideErrorsText({
                currentElement: t,
                isShow: !0,
                txtforError: AMOCRM.lang.incorrect_format_data,
                time: 300
            }),
            !1)
        },
        checkDisabled: function(e) {
            return e.prop("disabled")
        },
        ckeckNotEmptyInput: function(e) {
            return "" === e.val()
        },
        checkingIsValidInput: function(e) {
            var t = e.elementInput.attr(e.attr)
              , i = e.elementInput.val()
              , s = e.elementInput;
            return "domain" !== t || this.ckeckNotEmptyInput(s) ? "email" !== t || this.ckeckNotEmptyInput(s) ? ("password" !== t || this.ckeckNotEmptyInput(s)) && ("name" !== t || this.ckeckNotEmptyInput(s)) ? void 0 : !0 : !!this.checkEmailIsValid(i) : !!this.checkingUrlIsValid(i)
        },
        checkingUrlIsValid: function(e) {
            var t = /^([а-€ј-яa-zA-Z0-9]([а-€ј-яa-zA-Z0-9\-]{0,61}[а-€ј-яa-zA-Z0-9])?\.)+[а-€ј-яa-zA-Z]{2,6}$/;
            return e.match(t)
        },
        checkEmailIsValid: function(e) {
            var t = /^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$/;
            return e.match(t)
        },
        showAndHideErrorsText: function(e) {
            this.timer = setTimeout(s.bind(function() {
                var t = e.currentElement.parent()
                  , i = e.currentElement
                  , s = t.nextAll(".js-jivosite-error")
                  , n = e.isShow
                  , o = e.txtforError;
                n ? (s.css("display", "block"),
                s.text(o),
                i.addClass("jivosite_settings_error-field")) : (s.css("display", "none"),
                i.removeClass("jivosite_settings_error-field"))
            }, this), e.time)
        },
        changeStateRegistrationIntoLogin: function() {
            var e = this._elem("buttonSubmit")
              , t = e.find(".button-input-inner__text")
              , i = this._elem("elementChangeStateForm")
              , s = this;
            clearTimeout(s.timer),
            i.attr("data-auth") ? (this.resetErrorInput(this._elem("emailInput")),
            i.text(AMOCRM.lang.have_jivosite_login),
            i.removeAttr("data-auth"),
            t.text(AMOCRM.lang.jivosite_form_button_register),
            this.returnValueMail(),
            this.unDisableInputDomain(),
            this.unsetAuthTrue(),
            this.addPasswordElementLabelAndDisableInput()) : (this.resetErrorInput(this._elem("emailInput")),
            i.attr("data-auth", "true"),
            i.text(AMOCRM.lang.crate_new_accout_jivosite),
            t.text(AMOCRM.lang.jivosite_login),
            this.clearingInputsValue(),
            this.deletePasswordElementLabelAndDisable(),
            this.setAuthTrue())
        },
        clearingInputsValue: function() {
            var e = this._elem("inputsCollection")
              , t = this;
            e.each(function() {
                var e = i(this);
                "name" !== e.attr("data-jivosite") && (t.checkingInputType({
                    $input: e,
                    inputDataAttr: "domain"
                }) ? t.disableInput(e) : e.val(""))
            })
        },
        checkingInputType: function(e) {
            return e.$input.attr("data-jivosite") === e.inputDataAttr
        },
        deletePasswordElementLabelAndDisable: function() {
            var e = this._elem("passwordInput");
            e.prop("disabled", !1),
            e.next(".js-automatic-generic").css("display", "none")
        },
        disableInput: function(e) {
            var t = e;
            t.prop("disabled", !0),
            t.val(""),
            t.addClass("jivosite_setting_field--disabled"),
            this.showAndHideErrorsText({
                isShow: !1,
                currentElement: e,
                time: 300
            }),
            t.removeClass("jivosite_settings_error-field")
        },
        checkAuth: function() {
            var e = this._elem("buttonSubmit");
            return e.attr("data-jivosite-auth")
        },
        setAuthTrue: function() {
            var e = this._elem("buttonSubmit");
            e.attr("data-jivosite-auth", "true")
        },
        unDisableInputDomain: function() {
            var e = this._elem("domainInput");
            e.prop("disabled", !1),
            e.removeClass("jivosite_setting_field--disabled")
        },
        unsetAuthTrue: function() {
            var e = this._elem("buttonSubmit");
            e.removeAttr("data-jivosite-auth")
        },
        addPasswordElementLabelAndDisableInput: function() {
            var e = this._elem("passwordInput")
              , t = this._elem("passwordInput").attr("data-storage-password");
            e.prop("disabled", !0),
            e.val(t),
            e.next(".js-automatic-generic").css("display", "inline")
        },
        returnValueMail: function() {
            var e = this._elem("emailInput")
              , t = AMOCRM.constant("user").login;
            e.val(t),
            this.validateForm(this._elem("emailInput"))
        },
        resetErrorInput: function(e) {
            var t = e;
            t.removeClass("jivosite_settings_error-field"),
            this.showAndHideErrorsText({
                currentElement: t,
                isShow: !1,
                time: 300
            })
        },
        setClipBoard: function(e) {
            return e && !this.clipboard ? this._elem("targetLinkCopy")[0] && (this.clipboard = new r(this._elem("targetLinkCopy")[0],{
                target: s.bind(function() {
                    return this._elem("codeForPasting")[0]
                }, this),
                text: s.bind(function() {
                    return this._elem("codeForPasting").text()
                }, this)
            }),
            this.clipboard.on("success", s.bind(this.onClipBoardAfterCopy, this))) : !e && this.clipboard && this.clipboard.destroy(),
            this
        },
        onClipBoardAfterCopy: function(e) {
            var t = this._elem("copied_tip");
            t.trigger("tip:show"),
            setTimeout(function() {
                t.fadeOut(300)
            }, 2e3),
            e.clearSelection()
        },
        deactivate: function() {
            i.ajax("/ajax/amochats/disconnect?service=jivosite").done(s.bind(function(e) {
                e.response.result && this.rerenderJivositeItem({
                    deactivate: !0
                })
            }, this))
        },
        destroy: function() {
            this.setClipBoard(!1)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/olark", ["require", "jquery", "underscore", "twig", "elements_view", "clipboard"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("elements_view"), r = e("clipboard");
    return t = o.extend({
        events: {
            "click .chats-integrations-list__wrapper": "getDataForOlark",
            "click .js-deactivate": "deactivate"
        },
        _selectors: function() {
            return {
                copyLink: ".js-copy-code",
                codeForPasting: ".js-code-olark"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            this.counterClick = 0,
            this.checkActivatedOlark(e.data.data.olarkEnabled)
        },
        checkActivatedOlark: function(e) {
            e && (this.initClipBoard(),
            this.counterClick = 1)
        },
        getDataForOlark: function() {
            var e = this;
            this.MAX_COUNTER_CLICK = 1,
            this.counterClick < this.MAX_COUNTER_CLICK && i.ajax({
                url: "/ajax/amochats/check/?service=olark",
                type: "POST",
                dataType: "JSON",
                success: function(t) {
                    e.rerenderOlark({
                        olarkDate: t.olark.date_insert,
                        userEmail: t.olark.email,
                        olarkCode: t.olark.result,
                        olarkEnabled: t.olark.enable
                    }),
                    e.counterClick += 1
                }
            })
        },
        rerenderOlark: function(e) {
            var t = i(n({
                ref: "/tmpl/digital_pipeline/chats/olark.twig"
            }).render({
                olarkDate: e.olarkDate,
                olarkCode: e.olarkCode,
                olarkEnabled: e.olarkEnabled
            }));
            this.$el.replaceWith(t),
            this.setElement(t),
            e.olarkEnabled ? (this.toggleDownItem(),
            this.initClipBoard()) : this.counterClick = 0
        },
        toggleDownItem: function() {
            var e = this.$el.find(".integrations-olark-success");
            e.slideDown()
        },
        deactivate: function() {
            i.ajax("/ajax/amochats/disconnect?service=olark").done(s.bind(function(e) {
                e.response.result && this.rerenderOlark({
                    olarkEnabled: !1
                })
            }, this))
        },
        initClipBoard: function() {
            this.clipboard = new r(this._elem("copyLink")[0],{
                target: s.bind(function() {
                    return this._elem("codeForPasting")[0]
                }, this),
                text: s.bind(function() {
                    return this._elem("codeForPasting").text()
                }, this)
            }),
            this.clipboard.on("success", s.bind(function(e) {
                var t = this.$el.find(".js-tip");
                t.show(),
                setTimeout(function() {
                    t.fadeOut(300)
                }, 2e3),
                e.clearSelection()
            }, this))
        },
        destroy: function() {
            this.clipboard && this.clipboard.destroy()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/chats/index", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/view", "lib/components/base/modal", "lib/interface/settings/digital_pipeline/chats/facebook", "lib/interface/settings/digital_pipeline/chats/vk", "lib/interface/settings/digital_pipeline/chats/telegram", "lib/interface/settings/digital_pipeline/chats/viber", "lib/interface/settings/digital_pipeline/chats/salesbot", "lib/interface/settings/digital_pipeline/chats/jivosite", "lib/interface/settings/digital_pipeline/chats/olark"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("lib/core/view"), a = e("lib/components/base/modal"), l = e("lib/interface/settings/digital_pipeline/chats/facebook"), c = e("lib/interface/settings/digital_pipeline/chats/vk"), d = e("lib/interface/settings/digital_pipeline/chats/telegram"), u = e("lib/interface/settings/digital_pipeline/chats/viber"), h = e("lib/interface/settings/digital_pipeline/chats/salesbot"), _ = e("lib/interface/settings/digital_pipeline/chats/jivosite"), p = e("lib/interface/settings/digital_pipeline/chats/olark");
    return t = r.extend({
        events: {
            "click .js-arrow-back": "modalSlideBack",
            "click .js-chat-integrations-item": "toggleSlideForItemsChats",
            "click .js-toggle-up": "slideUpContent"
        },
        _classes: function() {
            return {
                list_item: "chats-integrations-list__item"
            }
        },
        render: s._preload(["/tmpl/digital_pipeline/chats/modal.twig"], "_render"),
        chats: {
            facebook: {
                component: l
            },
            telegram: {
                component: d
            },
            viber: {
                component: u
            },
            vk: {
                component: c
            },
            salesbot: {
                component: h
            }
        },
        _render: function() {
            return this.uploadAndLoadData({
                url: "/ajax/amochats/check"
            }),
            this
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.handlers = [],
            this.render(),
            this._$document.on("page:changed", n.bind(this.pageChangedDestroy, this))
        },
        uploadAndLoadData: function(e) {
            var t = this;
            i.ajax({
                url: e.url,
                data: {
                    service: ["jivosite", "olark", "facebook"]
                },
                success: function(e) {
                    t.modal = new a({
                        class_name: "chats-list-modal modal-list",
                        init: function(i) {
                            i.trigger("modal:loaded"),
                            t.options.$container = i,
                            t.renderTemplates({
                                ref: "/tmpl/digital_pipeline/chats/modal.twig",
                                data: {
                                    passwordForJivositeInput: o.passwordGen(8),
                                    emailForJivositeInput: AMOCRM.constant("user").login,
                                    codeForArea: e.jivosite.result,
                                    userDomain: e.jivosite.domain,
                                    userMail: e.jivosite.email,
                                    date: e.jivosite.date_insert,
                                    jivositeEnabled: e.jivosite.enable,
                                    olarkEnabled: e.olark.enable,
                                    olarkDate: e.olark.date_insert,
                                    olarkCode: e.olark.result,
                                    facebook: {
                                        enable: !0,
                                        visible: !0,
                                        old_facebook: e.facebook
                                    },
                                    vk: {
                                        enable: !0,
                                        visible: !0
                                    },
                                    show: {
                                        jivosite: e.jivosite.visible,
                                        olark: e.olark.visible,
                                        facebook: e.facebook.visible,
                                        viber: !0,
                                        vk: "ru" === AMOCRM.lang_id
                                    },
                                    handlers: t.options.widget_list
                                }
                            }),
                            i.trigger("modal:centrify")
                        },
                        destroy: function() {
                            t.options.onDestroy()
                        }
                    })
                }
            })
        },
        pageChangedDestroy: function() {
            this.modal && this.modal.destroy()
        },
        initChatService: function(e, t, i) {
            e.length && this._addComponent(this.chats[i].component, {
                el: e,
                options: t
            })
        },
        renderTemplates: function(e) {
            var t = i(s({
                ref: e.ref
            }).render(e.data))
              , o = this;
            this.setElement(t),
            this.addTemplatesInContainer(t, e),
            this.initConstructorJivosite(e),
            this.initConstructorOlarkModal(e),
            n.each(this.chats, function(t, i) {
                o.initChatService(o._elem("list_item").filter(".js-" + i), e.data[i], i)
            })
        },
        addTemplatesInContainer: function(e) {
            this.options.$container && this.options.$container.append(e)
        },
        initConstructorJivosite: function(e) {
            this.jivosite = this._addComponent(_, {
                $container: this.$el.find(".js-integrations-jivosite"),
                data: e
            })
        },
        initConstructorOlarkModal: function(e) {
            this.olark = this._addComponent(p, {
                el: this.$el.find(".js-integrations-olark"),
                data: e
            })
        },
        toggleSlideForItemsChats: function(e) {
            var t = i(e.currentTarget).next(".js-chat-integrations-sliding")
              , s = i(e.currentTarget).parent().siblings().find(".js-chat-integrations-sliding");
            t.slideToggle(),
            s.slideUp(),
            i(e.currentTarget).find(".js-jivosite-link-toggle-visibility").toggle()
        },
        slideUpContent: function() {
            var e = this.$el.find(".js-chat-integrations-sliding");
            e.slideUp()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/salesbot/index", ["require", "jquery", "twig", "underscore", "lib/common/fn", "lib/core/view", "lib/components/base/modal", "lib/components/base/form", "lib/interface/settings/digital_pipeline/salesbot/markers"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("lib/core/view"), a = e("lib/components/base/modal"), l = e("lib/components/base/form"), c = e("lib/interface/settings/digital_pipeline/salesbot/markers");
    return t = r.extend({
        _url: {
            list: "/ajax/v1/salesbot/list",
            set: "/ajax/v1/salesbot/set",
            enable: "/ajax/v1/salesbot/enable",
            status: "/ajax/v1/salesbot/status"
        },
        _template: {
            modal: "/tmpl/digital_pipeline/salesbot/modal.twig"
        },
        events: function() {
            var e = this
              , t = {};
            return t["click #salesbot-modal__bot-enable-switcher"] = "toggleBot",
            t["click " + e._selector("save_bot_message")] = "saveBotMessage",
            t["click " + e._selector("markers")] = "insertMarkerOnClick",
            t
        },
        _classes: function() {
            return {
                save_bot_message: "js-save-bot-message",
                title_enable: "bot-settings_enable__title",
                bot_message: "bot-message",
                markers: "marker-list__tag",
                marker_value: "marker-list__tag-value",
                marker_row: "marker-list__row"
            }
        },
        render: function(e) {
            return s._preload([e], n.bind(this._render, this))()
        },
        _render: function() {
            return this.uploadAndLoadData(),
            this
        },
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.render(this._template.modal),
            this._$document.on("page:changed", n.bind(this.pageChangedDestroy, this))
        },
        uploadAndLoadData: function() {
            var e = this;
            Promise.all([new Promise(n.bind(e.getSalesbotStatus, e)), new Promise(n.bind(e.getSalesbotMessage, e),this)]).then(function() {
                e.modal = new a({
                    class_name: "salesbot-list-modal modal-list",
                    init: function(t) {
                        t.trigger("modal:loaded"),
                        e.options.$container = t,
                        e.renderTemplates({
                            ref: e._template.modal,
                            data: {
                                bot_config: e.options.message,
                                status: e.options.active
                            }
                        }),
                        t.trigger("modal:centrify"),
                        e.botFormInit()
                    },
                    destroy: function() {
                        e.options.onDestroy()
                    }
                })
            })
        },
        getSalesbotMessage: function(e) {
            var t = this;
            i.ajax({
                url: t._url.list,
                data: {
                    handler_id: 0
                },
                success: function(i) {
                    o.has_keys(i, ["response", "salesbot", "list"]) && n.each(i.response.salesbot.list, function(e) {
                        return t.options.message = e.text,
                        !1
                    }),
                    e()
                }
            })
        },
        toggleBot: function(e) {
            var t, s = this, n = i(e.currentTarget).prop("checked"), r = {
                request: {
                    salesbot: {
                        enable: n
                    }
                }
            };
            i.ajax({
                url: s._url.enable,
                data: JSON.stringify(r),
                dataType: "json",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                success: function(e) {
                    o.has_keys(e, ["response", "salesbot", "enable"]) && (t = 1 == e.response.salesbot.enable ? "Deactivate" : "Activate",
                    t = o.i18n(t),
                    i(s._selector("title_enable")).text(t))
                }
            })
        },
        saveBotMessage: function() {
            var e = this
              , t = {
                request: {
                    salesbot: {
                        text: e.form.model.get("message")
                    }
                }
            };
            i.ajax({
                url: e._url.set,
                data: JSON.stringify(t),
                dataType: "json",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                success: function(t) {
                    t.response && t.response.salesbot && t.response.salesbot.errors && t.response.salesbot.errors[0] && (new a).showError(!1, !1),
                    e.form.model.updateDefaults(),
                    e.form.model.trigger("has_reverted")
                }
            })
        },
        pageChangedDestroy: function() {
            this.modal && this.modal.destroy()
        },
        botFormInit: function() {
            this.form = this._addComponent(l.View, {
                el: this.$el.find(".bot-settings-form")
            }),
            this.form.model.on("has_changes", n.bind(function() {
                this._findElem("save_bot_message").trigger("button:save:enable")
            }, this)).on("has_reverted", n.bind(function() {
                this._findElem("save_bot_message").trigger("button:save:disable")
            }, this)),
            this.form.model.trigger("has_reverted")
        },
        insertMarkerOnClick: function(e) {
            c.insertMarker.call(this, e)
        },
        renderTemplates: function(e) {
            var t = i(s({
                ref: e.ref
            }).render(e.data));
            this.setElement(t),
            this.addTemplatesInContainer(t, e)
        },
        addTemplatesInContainer: function(e) {
            this.options.$container && this.options.$container.append(e)
        },
        getSalesbotStatus: function(e) {
            var t = this;
            i.ajax({
                url: t._url.status,
                dataType: "json",
                success: function(i) {
                    o.has_keys(i, ["response", "salesbot", "status"]) && (t.options.active = i.response.salesbot.status),
                    e()
                }
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/chat", ["require", "jquery", "underscore", "lib/common/fn", "lib/interface/settings/digital_pipeline/source_item", "lib/interface/settings/digital_pipeline/chats/index", "lib/interface/settings/digital_pipeline/salesbot/index"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/interface/settings/digital_pipeline/source_item"), r = e("lib/interface/settings/digital_pipeline/chats/index"), a = e("lib/interface/settings/digital_pipeline/salesbot/index");
    return t = o.extend({
        events: function() {
            return s.extend({}, o.prototype.events, {
                "click .js-connect-chat": "initChatConnectModal",
                "click .js-salesbot-modal": "initSalesbotConnectModal",
                "click #bot_enable_switcher": "toggleBot"
            })
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.widget_list = [],
            this._url = {
                facebook: "/ajax/v1/chats/origin/facebook/status",
                telegram: "/ajax/v1/chats/origin/telegram/status",
                vk: "/ajax/v1/chats/origin/vk/status",
                viber: "/ajax/v1/chats/origin/viber/status",
                salesbot: "/ajax/v1/salesbot/status",
                all: "/ajax/settings/pipeline/" + this.parent_context.data.element_type + "/" + this.parent_context.pipeline.id + "/sources",
                salesbotEnable: "/ajax/v1/salesbot/enable",
                other_widgets: "/ajax/v1/widgets/list?filter[widget_locations]=lead_sources&full=1"
            },
            this.getChatData()
        },
        getChatData: function() {
            var e = this
              , t = i('<span class="spinner-icon spinner-icon-abs-center">')
              , o = {
                source: {},
                salesbot: {}
            };
            this.$el.append(t),
            Promise.all([e.getData("all"), e.getData("facebook"), e.getData("telegram"), e.getData("vk"), e.getData("viber"), e.getData("salesbot"), e.getData("other_widgets")]).then(function(t) {
                (t[0] && t[0].response && t[0].response.lead_sources.length > 0 || e.checkData(t[1], "facebook") || e.checkData(t[2], "telegram") || e.checkData(t[3], "vk") || e.checkData(t[4], "viber") || e.checkData(t[6], "other_widget")) && (e.params = s.findWhere(t[0].response.lead_sources, {
                    type: "chat"
                }),
                e.oldFacebookToError(),
                e.checkData(t[1], "facebook") && (e.params.elements.push({
                    type: "facebook",
                    name: "Facebook"
                }),
                e.params.active = !0),
                e.checkData(t[2], "telegram") && (e.params.elements.push({
                    type: "telegram",
                    name: "Telegram"
                }),
                e.params.active = !0),
                e.checkData(t[3], "vk") && (e.params.elements.push({
                    type: "vk",
                    name: "VK"
                }),
                e.params.active = !0),
                e.checkData(t[4], "viber") && (e.params.elements.push({
                    type: "viber",
                    name: "Viber"
                }),
                e.params.active = !0),
                t[5] && n.has_keys(t[5], ["response", "salesbot", "status"]) && (o.salesbot.status = t[5].response.salesbot.status),
                s.each(t[6].response.widgets, function(t) {
                    if ("amo_olark" !== t.widget_code) {
                        var i = t.langs[t.current_language]["widget.name"]
                          , s = t.langs[t.current_language]["widget.short_description"];
                        e.widget_list.push(t),
                        e.widget_list[e.widget_list.length - 1].name = i,
                        e.widget_list[e.widget_list.length - 1].short_desc = s,
                        1 === t.active && (e.params.elements.push({
                            type: "other_widget",
                            name: i
                        }),
                        e.params.active = !0)
                    }
                }, e)),
                o.source = s.extend({}, e.params),
                e.rerender(o),
                e.trigger("params:ready", {
                    name: "enable_socials",
                    option: "params"
                })
            })["catch"](function() {
                e.trigger("params:fail", {
                    name: "enable_socials",
                    option: "params"
                }),
                t.remove()
            })
        },
        checkData: function(e, t) {
            return n.has_keys(e, ["response", "chats", "origin", "status", t, "active"]) && e.response.chats.origin.status[t].active
        },
        getData: function(e) {
            var t = this;
            return "other_widgets" !== e || s.isEmpty(t.widget_list) ? i.ajax({
                method: "get",
                type: "json",
                url: t._url[e]
            }) : {}
        },
        oldFacebookToError: function() {
            if (this.params && this.params.elements) {
                var e = s.findWhere(this.params.elements, {
                    type: "facebook"
                });
                s.extend(e, {
                    error: !0
                })
            }
        },
        destroyModal: function() {
            this.ChatsModal && (this.ChatsModal.destroy(!0),
            this.ChatsModal = null,
            i(document).trigger("chats:modal:destroy")),
            this.getChatData()
        },
        initChatConnectModal: function() {
            this.ChatsModal || (this.ChatsModal = new r({
                onDestroy: s.bind(function() {
                    this.destroyModal()
                }, this),
                widget_list: this.widget_list
            }))
        },
        initSalesbotConnectModal: function() {
            this.SalesbotModal || (this.SalesbotModal = new a({
                onDestroy: s.bind(function() {
                    this.destroySalesbotModal()
                }, this),
                status: this.params.active
            }))
        },
        destroySalesbotModal: function() {
            this.SalesbotModal && (this.SalesbotModal.destroy(!0),
            this.SalesbotModal = null,
            i(document).trigger("chats:modal:destroy")),
            this.getChatData()
        },
        toggleBot: function(e) {
            var t = this
              , s = i(e.currentTarget).prop("checked")
              , n = {
                request: {
                    salesbot: {
                        enable: s
                    }
                }
            };
            i.ajax({
                url: t._url.salesbotEnable,
                data: JSON.stringify(n),
                dataType: "json",
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
        }
    })
}),
define("lib/components/amoforms/edit", ["require", "jquery", "underscore", "twig", "clipboard", "lib/components/base/modal", "lib/components/base/confirm", "lib/interface/fast_tags", "FileAPI", "lib/components/base/form", "lib/interface/users_select", "lib/core/users", "vendor/pikaday/pikaday.jquery", "lib/vendor/plugins/jquery.autosize"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("clipboard"), r = e("lib/components/base/modal"), a = e("lib/components/base/confirm"), l = e("lib/interface/fast_tags"), c = e("FileAPI"), d = e("lib/components/base/form"), u = e("lib/interface/users_select"), h = e("lib/core/users");
    return e("vendor/pikaday/pikaday.jquery"),
    e("lib/vendor/plugins/jquery.autosize"),
    t = function(e) {
        this.$modal = i(".modal-amoforms"),
        this.$modal_scroller = this.$modal.find(".modal-scroller"),
        this.$modal_body = this.$modal.find(".modal-body"),
        this.ns = ".amoforms",
        this.params = e.params || {
            form_params: void 0
        },
        this.params.form_server = this.params.form_server || "",
        this.onSave = e.onSave,
        this.can_save_disable = e.can_save_disable,
        this.onOpenNew = s.isFunction(e.onOpenNew) ? e.onOpenNew : s.noop,
        this.onConvert = s.isFunction(e.onConvert) ? e.onConvert : s.noop,
        this.$form = this.$modal_body.find("#amoforms_creation_form"),
        this.$form_name = this.$form.find("#form_name"),
        this.$addtag = this.$form.find("#add_tags"),
        this.$field_name = this.$form.find(".amoforms_field-name_in-form"),
        this.$save_btn = this.$modal.find("#save_cf_settings"),
        this.$setting_panel_toggler = this.$form.find(".amofroms_setting_panel_toggler"),
        this.$setting_logo_type = this.$form.find("#amoforms-input-setting-logo-type"),
        this.$setting_logo_value = this.$form.find("#amoforms-input-setting-logo-value"),
        this.$pikaday_inputs = this.$form.find(".amoform-input-pikaday"),
        this.elements = {
            unsorted_checkbox: this.$form.find("#amoforms_settings_add_to_unsorted"),
            not_for_unsorted: this.$form.find(".amoforms_element_not_for_unsorted")
        },
        this.$form.find("#card_tags").val(this.stringifyTags(this.getTags())),
        this.has_saved = !1,
        this.form_modified = !1,
        this.force_close = !1,
        this.init()
    }
    ,
    t.prototype.init = function() {
        var e = this;
        AMOCRM.router.registerPreventConfig({
            message: AMOCRM.lang.amoforms_confirm_close_modal,
            accept_text: AMOCRM.lang.button_save,
            decline_text: AMOCRM.lang.button_exit,
            accept: function(t) {
                e.saveForm()
            },
            decline: function(t) {
                e.force_close = !0,
                i(document).off("page:show:overlay"),
                t()
            }
        }, "amoform"),
        this.initEvents(),
        this.checkTypeLogo(),
        this.initFileUploader(),
        this.initClipboard(),
        this.initSortable(),
        this.leadsKeyEventsOff(),
        this.watchForm()
    }
    ,
    t.prototype.initEvents = function() {
        var e = this
          , t = moment().lang()
          , n = (new Date).getFullYear();
        e.$pikaday_inputs.pikaday({
            firstDay: 1,
            minDate: new Date(n - 5 + "-01-01"),
            maxDate: new Date(n + 10 + "-12-31"),
            yearRange: [2e3, 2020],
            i18n: {
                months: t._months,
                weekdays: t._weekdays,
                weekdaysShort: t._weekdaysShort
            },
            onSelect: function() {
                i(this._o.trigger).val(moment(new Date(this._d)).format(AMOCRM.system.format.date.date))
            }
        }),
        e.$form.find(".amoforms_field-name_in-form").autosizeInput({
            minWidth: 20,
            maxWidth: 160,
            comfortZone: 5
        }),
        e.$form.find(".amoforms-submit-button-wrapper > input").autosizeInput({
            minWidth: 20,
            maxWidth: 150,
            comfortZone: 10
        }),
        e.$form.find(".card-top-name__row__input-wrapper__input").autosizeInput({
            minWidth: 20,
            maxWidth: 400,
            comfortZone: 10
        }),
        i("#amoforms-input-setting-logo-value").autosizeInput({
            minWidth: 130,
            maxWidth: 296,
            comfortZone: 10
        }),
        e.$form_name.on("focus", function() {
            i(".js-card-name").addClass("in-edit")
        }).on("focusout", function() {
            var e = i(this)
              , t = i(".js-card-name");
            e.val() && !t.hasClass("tags-edit") && t.removeClass("in-edit")
        }),
        e.$field_name.on("focus" + e.ns, function() {
            var t = i(this).closest(".amoforms_field_in-form_wrapper");
            i(".amoforms-row__in__edit").removeClass("amoforms-row__in__edit"),
            t.addClass("amoforms-row__in__edit"),
            e.$form.find(".amoforms_required-field_wrapper").hide(),
            e.$form.find(".amoforms_field-preview_wrapper").show(),
            t.find(".amoforms_field-preview_wrapper").hide(),
            t.find(".amoforms_required-field_wrapper").show()
        }),
        e.$modal.on("click", ".amoforms-row__in__edit", function(e) {
            e.stopPropagation()
        }),
        e.$form.on("focusout", "#amoforms-input-setting-logo-value", function(e) {
            i(this).attr("data-old", i(this).val())
        }),
        e.$modal.on("click" + e.ns, function() {
            var e = i(".amoforms-row__in__edit");
            e.find(".amoforms_field-preview_wrapper").show(),
            e.find(".amoforms_required-field_wrapper").hide(),
            e.find(".amoforms_field-name_in-form").removeClass("amoforms_field-name_in-form_pencil"),
            e.removeClass("amoforms-row__in__edit")
        }),
        e.$form.on("click" + e.ns, ".amoforms_checkbox__helper", function() {
            var t = i(this).siblings("input");
            t.prop("checked") ? (i(this).removeClass("icon-amoform-checkbox-inform").addClass("icon-amoform-checkbox-hide"),
            i(".amoforms_unselected-fields").append(i(this).closest(".amoforms_field_block").addClass("amoforms_field_block-unselected").detach()),
            t.val("off"),
            e.$form.trigger("modified")) : (t.val("on"),
            i("#amoforms-fields-list").append(i(this).closest(".amoforms_field_block").removeClass("amoforms_field_block-unselected").detach()),
            i(this).removeClass("icon-amoform-checkbox-hide").addClass("icon-amoform-checkbox-inform"),
            i(this).closest(".amoforms_field_block").find(".amoforms_field-name_in-form").autosizeInput({
                minWidth: 20,
                maxWidth: 160,
                comfortZone: 10
            }),
            e.$form.trigger("modified"))
        }),
        e.$form.on("click" + e.ns, ".amoforms_checkbox_required > span", function(e) {
            var t = i(this).closest(".amoforms_field_block ")
              , s = i(this).parent().find("input")[0].checked;
            s === !1 ? t.find(".amoforoms-field-name_required").removeClass("hide") : t.find(".amoforoms-field-name_required").addClass("hide"),
            e.stopPropagation()
        }),
        e.$modal.on("click", "#amoforms_button-submit_background-color-block .color-box", function(e) {
            i(e.target).parent().find(".js-tip").trigger("tip:show"),
            e.stopPropagation()
        }),
        e.$modal.on("click", "#amoforms_button-submit_color-block .color-box", function(e) {
            i(e.target).parent().find(".js-tip").trigger("tip:show"),
            e.stopPropagation()
        }),
        e.$form.on("click", ".amoforms-pallete-color-block > span", function(t) {
            var s = i(this).attr("data-color");
            i("#amoforms_button-submit_background-color-block").find(".color-box").css({
                backgroundColor: s
            }),
            i(".amoforms-submit-button-wrapper").css({
                backgroundColor: s
            }),
            i("#amoforms-button-submit-bg-color").val(s),
            i(this).parent().parent().hide(),
            e.form_modified = !0,
            e.validateForm(),
            t.stopPropagation()
        }),
        e.$form.on("click", ".amoforms-pallete-color-font-block > span", function(t) {
            var s = i(this).attr("data-color");
            i("#amoforms_button-submit_color-block").find(".color-box").css({
                backgroundColor: s
            }),
            i(".amoforms-submit-button-wrapper > input").css({
                color: s
            }),
            i("#amoforms-button-submit-font-color").val(s),
            i(this).parent().parent().hide(),
            e.form_modified = !0,
            e.validateForm(),
            t.stopPropagation()
        }),
        e.$modal.on("click", ".amofroms_setting_panel_toggler", function() {
            var t = i("#amoforms_dop_settings_wrapper")
              , s = t.hasClass("dop_settings_open");
            s ? (t.find(".amoforms_setting_panel, .amoforms-dop-settings-info-link").hide(),
            t.removeClass("dop_settings_open"),
            e.$modal_body.removeClass("amoform-modal_sidebar-open"),
            i("#amoforms-input-setting-right-sidebar").val("close"),
            i(this).css({
                color: "#2e3640"
            }),
            t.find(".amofroms_setting_panel_toggler > .icon").removeClass("icon-amoforms-setting-active").addClass("icon-amoforms-setting"),
            e.$form.trigger("modified")) : (t.find(".amoforms_setting_panel, .amoforms-dop-settings-info-link").show(),
            t.addClass("dop_settings_open"),
            e.$modal_body.addClass("amoform-modal_sidebar-open"),
            i("#amoforms-input-setting-right-sidebar").val("open"),
            i(this).css({
                color: "#1e95d1"
            }),
            t.find(".amofroms_setting_panel_toggler > .icon").removeClass("icon-amoforms-setting").addClass("icon-amoforms-setting-active"),
            e.$form.trigger("modified"))
        }),
        e.$form.on("focus" + e.ns, ".amoforms-submit-button-wrapper > input", function() {
            i(this).parent().removeClass("amoforms-submit-button-wrapper-noedit")
        }),
        e.$form.on("focusout" + e.ns, ".amoforms-submit-button-wrapper > input", function() {
            i(this).parent().addClass("amoforms-submit-button-wrapper-noedit")
        }),
        e.$form.on(AMOCRM.click_event + e.ns, "#save_cf_settings", function() {
            return i(this).hasClass("button-input-disabled") ? !1 : (e.saveForm(),
            void (e.has_saved = !0))
        }).on(AMOCRM.click_event + e.ns, "#delete_cf_settings", function() {
            e.deleteForm()
        }).on(AMOCRM.input_event + e.ns, ".cf-name", function() {
            e.$form.trigger("modified")
        }).on("modified" + e.ns, function() {
            e.$modal_body.trigger("modal:centrify"),
            e.form_modified = !0,
            e.validateForm(!1)
        }).on("reverted" + e.ns, function() {
            e.resetForm()
        }),
        e.$form.on("click" + e.ns, "#amoforms_logo_delete", function() {
            var t = "/frontend/images/amocrm_logo_gray.png"
              , s = i(".amoforms__logo")
              , n = s.attr("src");
            return n === t ? !1 : (s.attr("src", t),
            e.$setting_logo_value.val(""),
            i.ajax({
                method: "POST",
                dataType: "json",
                data: {
                    logo_src: n
                },
                url: "/ajax/amoforms/edit/" + e.params.form_id + "/?mode=delete_logo",
                success: function(e, t) {}
            }),
            e.form_modified = !0,
            void e.validateForm())
        }),
        this.$addtag.on("click" + this.ns, s.bind(this.initFastTags, this)),
        e.$form.on("click" + e.ns, "#amoforms_dop_setting-responseuser", function(t) {
            var n = i(t.currentTarget)
              , o = +n.find('input[name="response_user_id"]').val()
              , r = s.pick(h.get(), o);
            new u({
                el: n,
                $container: e.$modal_scroller,
                id: "amoforms_dop_setting-responseuser",
                input_name: "response_user_id",
                class_name: "amoforms_settings__users-select",
                suggest_class_name: "users-select-suggest_amoforms",
                select_one: !0,
                no_absolute_positioning: !0,
                existing_items: r,
                onRenderSuggest: function() {
                    var t = this.$el.offset();
                    this.$list.css({
                        zIndex: 200,
                        top: t.top + e.$modal_scroller.scrollTop() + this.el.offsetHeight + 5,
                        left: t.left - 65 + 10
                    })
                }
            })
        }),
        e.$modal.on("click" + e.ns, ".amoforms-dop-settings-info-link", function() {
            e.showTutorial()
        }),
        e.$form.on("keydown", ".amoforms-validate_number", function(e) {
            return e.keyCode > 47 && e.keyCode < 58 || e.keyCode > 95 && e.keyCode < 106 ? void 0 : !1
        }),
        e.$form.on("click" + e.ns, ".amoforms_form_header_text", function() {
            i(".amoforms_form_text_header_inner").show(),
            i(".amoforms-active-logo-type").removeClass("amoforms-active-logo-type"),
            i("#amoforms_select_logo_file").removeClass("amoforms-active-logo-upload"),
            i(".amoforms_form_header_text").addClass("amoforms-active-logo-type"),
            i("#amoforms_select_logo_file .icon").removeClass("icon-icon-image-upload"),
            i("#amoforms_select_logo_file .icon").addClass("icon-icon-image"),
            i(".amoforms__logo_inner2").hide(),
            e.$setting_logo_type.val("text"),
            e.$setting_logo_value.val(e.$setting_logo_value.attr("data-old")),
            e.$setting_logo_value.css({
                width: 240
            }),
            i("#amoforms_logo_delete").hide(),
            e.$form.trigger("modified")
        }),
        e.$modal.on("input" + e.ns, ".amoforms_field-name_in-form", function(e) {
            i(this).val() ? i(this).removeClass("amoforms-error-input") : i(this).addClass("amoforms-error-input")
        }),
        e.$form.on("click" + e.ns, "#amoforms_select_logo_file", function(t) {
            i(".amoforms_form_text_header_inner").hide(),
            i(".amoforms-active-logo-type").removeClass("amoforms-active-logo-type");
            var s = i("#amoforms_select_logo_file");
            s.addClass("amoforms-active-logo-type "),
            i(".amoforms__logo_inner2").show(),
            i("#amoforms_select_logo_file .icon").addClass("icon-icon-image-upload"),
            i("#amoforms_select_logo_file .icon").removeClass("icon-icon-image"),
            "text" === e.$setting_logo_type.val() && t.preventDefault(),
            "image" == e.params.form_params.settings.logo.type ? e.$setting_logo_value.val(e.params.form_params.settings.logo.value) : e.$setting_logo_value.val(""),
            e.$setting_logo_type.val("image"),
            i("#amoforms_logo_delete").show(),
            e.$form.trigger("modified")
        }),
        e.$form.on("focus" + e.ns, "#amoforms_logo_text_value", function() {
            i(this).addClass("amoforms-logo-type-inedit")
        }),
        e.$form.on("focusout" + e.ns, "#amoforms_logo_text_value", function() {
            i(this).removeClass("amoforms-logo-type-inedit")
        }),
        e.$form.on("change" + e.ns, "#amoforms_logo_text_value", function() {
            e.$setting_logo_value.val(this.value),
            e.$form.trigger("modified")
        }),
        e.$form.on("click" + e.ns, ".amoform-icon-pencil", function() {
            var e = i(this).parent().find("input")
              , t = e.val();
            setTimeout(function() {
                e.val(t),
                e.focus()
            }, 1)
        }),
        e.params.form_id && (e.checkSideBar(e.params.form_params.settings.sidebar),
        e.showEmbedCode(e.params.form_id)),
        e.$form.on("click" + e.ns, "#send-test-data-to-google", function() {
            i.ajax({
                url: "/ajax/amoforms/edit/?request=gua",
                type: "POST",
                dataType: "json",
                data: {}
            })
        }),
        e.elements.unsorted_checkbox.on("change" + e.ns, function() {
            e.handleChangeUnsortedCheckbox()
        }),
        e.elements.not_for_unsorted.on("click" + e.ns, function(t) {
            e.isEnabledUnsorted() && (t.preventDefault(),
            t.stopPropagation())
        }),
        e.$modal.on("click" + e.ns, ".js-amoforms_banner-create-form", function() {
            e.onOpenNew()
        }),
        e.$modal.on("click" + e.ns, ".js-amoforms_banner-convert-form", function() {
            e.onConvert(e.params.form_id)
        })
    }
    ,
    t.prototype.initFastTags = function(e) {
        var t = this
          , s = i(e.currentTarget);
        s.hasClass("tags-manage") || (new l({
            $el: s,
            $input_container: s,
            $container: s.closest(".modal-scroller"),
            id: [this.params.form_id],
            tags: this.getTags(),
            entity: "amoforms",
            replace: !0,
            items_template: "/tmpl/cards/common/fast_tags.twig",
            onSetPositions: function() {
                var e = this.$el.offset();
                this.$list.addClass("fast-tags-suggest_amoforms").css({
                    top: e.top + t.$modal_scroller.scrollTop() + this.el.offsetHeight + 5,
                    left: e.left - 65
                })
            },
            onInit: function() {
                this.setPositions()
            },
            onRenderItemsParams: function() {
                return {
                    can_add: !0
                }
            },
            onSaveSuccess: function(e) {
                var s = i("#card_tags");
                s.val(t.stringifyTags(e)),
                t.existed_tags = e,
                this.hasModifications() && (s.trigger("change"),
                t.list_reload = !0)
            }
        }),
        e.stopPropagation())
    }
    ,
    t.prototype.getTags = function() {
        return s.isUndefined(this.existed_tags) ? i.makeArray(this.$addtag.find('.js-multisuggest-item:not([data-id="add_tag"])').map(function() {
            return {
                id: parseInt(i(this).attr("data-id")) || 0,
                name: i(this).text().trim()
            }
        })) : this.existed_tags
    }
    ,
    t.prototype.stringifyTags = function(e) {
        return s.map(e, function(e) {
            return e.raw_title || e.name
        }).join(", ")
    }
    ,
    t.prototype.handleChangeUnsortedCheckbox = function() {
        this.toggleElementsNotForUnsorted(!this.isEnabledUnsorted())
    }
    ,
    t.prototype.isEnabledUnsorted = function() {
        return this.elements.unsorted_checkbox.is(":checked")
    }
    ,
    t.prototype.toggleElementsNotForUnsorted = function(e) {
        this.elements.not_for_unsorted.toggleClass("disabled", !e)
    }
    ,
    t.prototype.is_changed = function() {
        return this.form_modified
    }
    ,
    t.prototype.showEmbedCode = function(e) {
        var t = this
          , s = i("#amoforms-creation-result-div")
          , n = t.params.form_hash
          , o = t.params.form_server
          , r = t.params.form_params.page
          , a = "id: " + e + ", hash: '" + n + "', locale: '" + AMOCRM.lang_id + "'"
          , l = "<script>var amo_forms_params = {" + a + '};</script><script id="amoforms_script" async="async" src="' + o + '/forms/assets/js/amoforms.js"></script>'
          , c = '[amocrm id="' + e + '" hash="' + n + '" locale="' + AMOCRM.lang_id + '"]';
        s.find("#amoforms-embed-code-text").val(l),
        s.find("#amoforms-embed-short-text").val(c),
        s.find("#amoforms-embed-page").attr("href", r),
        i("#amoforms-form-preview-js-div").height("2000px"),
        s.find("#amoforms-form-preview-js-div").html(l),
        s.find("#amoforms-short-code-text").html(c),
        s.show(),
        t.$modal_body.trigger("modal:centrify")
    }
    ,
    t.prototype.saveForm = function() {
        var e, t = this, n = i("#amoforms_creation_form"), o = n.serializeArray(), r = n.data("form_id") || "";
        t.isEnabledUnsorted() && (s.find(o, function(t, i, s) {
            return "response_user_id" === t.name ? void (e = i) : void 0
        }),
        o.splice(e, 1)),
        o = i.param(o),
        t.$save_btn.trigger("button:save:start"),
        i.ajax({
            url: "/ajax/amoforms/save/" + r,
            type: "POST",
            dataType: "json",
            data: o
        }).done(function(e) {
            var o = e.response.params || {
                save_result: null
            };
            "success" == o.save_result ? ("text" == t.$setting_logo_type.val() && t.setLogoSrc({}),
            n.data("form_id", o.form_id),
            t.params = o,
            t.params.form_id = parseInt(o.form_id),
            t.showEmbedCode(t.params.form_params.id),
            t.$save_btn.trigger("button:saved"),
            t.form_modified = !1,
            s.isFunction(t.onSave) ? t.onSave() : t.force_close === !0 && t.showMessage(AMOCRM.lang.amoforms_form_save_success, "success"),
            AMOCRM.router.preventPageChange(!1, "amoform"),
            i(document).trigger("page:reload")) : t.$save_btn.trigger("button:save:error")
        }).fail(function() {
            t.$save_btn.trigger("button:save:error")
        })
    }
    ,
    t.prototype.checkSideBar = function(e) {
        var t = this
          , s = i("#amoforms_dop_settings_wrapper");
        "open" === e && (s.find(".amoforms_setting_panel, .amoforms-dop-settings-info-link").show(),
        s.addClass("dop_settings_open"),
        t.$modal_body.addClass("amoform-modal_sidebar-open"),
        t.$setting_panel_toggler.css({
            color: "#1E95D1"
        }),
        s.find(".amofroms_setting_panel_toggler > .icon").removeClass("icon-amoforms-setting").addClass("icon-amoforms-setting-active")),
        t.$modal_body.trigger("modal:centrify")
    }
    ,
    t.prototype.initFileUploader = function() {
        var e = this;
        c.event.dnd(window, function(e) {
            i("#amoforms_dnd_logo").toggle(e).focus().toggleClass("amoforms-dnd-overlay-showed", e)
        }, function(t) {
            e.onLoadlogo(t)
        }),
        c.event.on(document.getElementById("choose"), "change", function(t) {
            e.onLoadlogo(t)
        })
    }
    ,
    t.prototype.onLoadlogo = function(e) {
        var t = this
          , i = c.getFiles(e);
        c.filterFiles(i, function(e, t) {
            return /^image/.test(e.type) ? t.width >= 32 && t.height >= 32 : !1
        }, function(e) {
            e.length && t.uploadFiles({
                files: {
                    images: e
                },
                url: "/ajax/amoforms/edit/" + t.params.form_id + "/?mode=change_logo",
                complete: function(e, i) {
                    var s = JSON.parse(i.response) || {
                        file_name: null
                    };
                    "success" == s.status && (t.setLogoSrc(s),
                    t.$setting_logo_value.val(s.file_name),
                    t.$setting_logo_type.val("image"),
                    t.$modal_body.trigger("modal:centrify"))
                }
            })
        })
    }
    ,
    t.prototype.uploadFiles = function(e) {
        e.files && (i("#spinner-profile").show(),
        c.upload({
            url: e.url,
            files: e.files,
            progress: function(e) {},
            complete: function(t, s) {
                i("#spinner-profile").hide(),
                "function" == typeof e.complete && e.complete(t, s)
            }
        }))
    }
    ,
    t.prototype.setLogoSrc = function(e) {
        var t = this
          , s = i("img.amoforms__logo");
        e.src || (e.src = "/frontend/images/amocrm_logo_gray.png"),
        s.attr("src", e.src + "?no_cache=" + Number(new Date)),
        t.$form.trigger("modified")
    }
    ,
    t.prototype.showMessage = function(e, t) {
        var i = new r;
        switch (t) {
        case "success":
            i.showSuccess(e);
            break;
        case "error":
            i.showError(e, !1)
        }
    }
    ,
    t.prototype.resetForm = function() {
        this.form_modified = !1,
        this.$save_btn.trigger("button:save:disable")
    }
    ,
    t.prototype.validateForm = function(e) {
        var t = this
          , s = !0
          , n = i(".form-name-input")
          , o = "" !== n.val()
          , r = i(".cf-name")
          , a = i("#amoforms-fields-list").find(".amoforms_field_block").length;
        r.each(function() {
            t.inputIsValid(this, e) || (s = !1)
        }),
        s && o && a > 0 ? t.$save_btn.trigger("button:save:enable") : t.$save_btn.trigger("button:save:disable")
    }
    ,
    t.prototype.inputIsValid = function(e) {
        var t = i(e)
          , s = t.closest(".amoforms_field_block").find(".control--select--list--item-selected")
          , n = "" != t.attr("name") && !s.hasClass("default-list-title")
          , o = "" != t.val();
        return n && o
    }
    ,
    t.prototype.deleteForm = function() {
        var e = this;
        e.confirm_delete = new a({
            class_name: "modal-list",
            text: AMOCRM.lang.amoforms_confirm_delete_form,
            message: [{
                text: AMOCRM.lang.amoforms_confirm_delete_form_description
            }],
            accept: function() {
                i.ajax({
                    url: "/ajax/amoforms/delete/" + e.params.form_id + "/" + e.params.form_hash,
                    type: "POST",
                    dataType: "json",
                    data: {}
                }).done(function(t) {
                    var s = t.response.params.delete_result;
                    s ? (e.force_close = !0,
                    e.$modal_scroller.trigger("click"),
                    e.showMessage(AMOCRM.lang.amoforms_confirm_delete_form_success, "success"),
                    e.confirm_delete.destroy(),
                    AMOCRM.router.preventPageChange(!1, "amoform"),
                    i(document).trigger("page:reload")) : e.showMessage(t.response.params.errors[0], "error")
                }).fail(function() {
                    e.showMessage(data, "error")
                })
            }
        })
    }
    ,
    t.prototype.initClipboard = function() {
        var e = this;
        e.clipboard = new o(document.getElementById("d_clip_button"),{
            target: function(e) {
                return i("#amoforms-embed-code-text")[0]
            }
        }),
        e.clipboard.on("success", function(e) {
            i("#amoforms-tip_copy-complete").trigger("tip:show"),
            setTimeout(function() {
                i("#amoforms-tip_copy-complete").fadeOut(300)
            }, 2e3),
            e.clearSelection()
        }),
        e.clipboard_short = new o(document.getElementById("d_short_clip_button"),{
            target: function(e) {
                return i("#amoforms-short-code-text")[0]
            }
        }),
        e.clipboard_short.on("success", function(e) {
            i("#amoforms-short-tip_copy-complete").trigger("tip:show"),
            setTimeout(function() {
                i("#amoforms-short-tip_copy-complete").fadeOut(300)
            }, 2e3),
            e.clearSelection()
        })
    }
    ,
    t.prototype.showTutorial = function(e) {
        var t = this;
        new r({
            class_name: "amoforms_inner_modal",
            init: n._preload(["/tmpl/common/amoforms/inner_modal.twig"], function(i) {
                this.modal_body = i,
                this.modal_body.html(n({
                    ref: "/tmpl/common/amoforms/inner_modal.twig"
                }).render()),
                this.modal_body.trigger("modal:centrify"),
                e && t.$modal.hide()
            }),
            destroy: function() {
                e && t.$modal.remove()
            }
        })
    }
    ,
    t.prototype.checkTypeLogo = function() {
        var e = this
          , t = i("#amoforms-input-setting-logo-type").val()
          , s = i("#amoforms_select_logo_file");
        if (0 === t.length && (e.$form.find(".amoforms_form_text_header_inner").hide(),
        s.addClass("amoforms-active-logo-type"),
        e.$form.find(".amoforms__logo_inner2").show(),
        s.addClass("amoforms-active-logo-upload"),
        t.val("image")),
        "image" === t) {
            e.$form.find(".amoforms_form_text_header_inner").hide(),
            s.addClass("amoforms-active-logo-type"),
            s.addClass("amoforms-active-logo-upload"),
            e.$form.find(".amoforms__logo_inner2").show();
            var n = i("img.amoforms__logo")
              , o = e.$setting_logo_value.val();
            o = o ? e.params.form_server + "/forms/img/logo/" + o + "?nocache=" + Math.random() : "/frontend/images/amocrm_logo_gray.png",
            n.attr("src", o),
            i("#amoforms_select_logo_file .icon").addClass("icon-icon-image-upload"),
            i("#amoforms_select_logo_file .icon").removeClass("icon-icon-image")
        }
        "text" === t && (i("img.amoforms__logo").attr("src", "/frontend/images/amocrm_logo_gray.png"),
        e.$form.find(".amoforms_form_text_header_inner").show(),
        i(".amoforms_form_header_text").addClass("amoforms-active-logo-type"),
        i("#amoforms_logo_text_value").val(e.$setting_logo_value.val()),
        e.$form.find(".amoforms__logo_inner2").hide(),
        i("#amoforms_logo_delete").hide(),
        i("#amoforms_select_logo_file .icon").removeClass("icon-icon-image-upload"),
        i("#amoforms_select_logo_file .icon").addClass("icon-icon-image"))
    }
    ,
    t.prototype.destroy = function() {
        var e, t = this;
        t.clipboard.destroy(),
        t.clipboard_short.destroy(),
        t.$form.off(t.ns),
        t.$modal.off(t.ns),
        t.leadsKeyEventsOn(),
        AMOCRM.router.preventPageChange(!1, "amoform"),
        c.event.off(document.getElementById("choose"), "change"),
        c.event.dnd.off(i("#amoforms_dnd_logo")),
        i("#amoforms-fields-list").sortable("destroy"),
        e = "form_id=" + t.params.form_id,
        e += "&settings[logo][type]=" + t.$setting_logo_type.val(),
        e += "&settings[logo][value]=" + t.$setting_logo_value.val(),
        i.ajax({
            url: "/ajax/amoforms/edit/?mode=close",
            type: "POST",
            dataType: "json",
            data: e
        })
    }
    ,
    t.prototype.watchForm = function() {
        var e = this;
        this.form = new d.View({
            el: e.$form
        }),
        this.form.model.on("has_changes", function() {
            e.form_modified = !0,
            AMOCRM.router.preventPageChange(!0, "amoform"),
            e.$save_btn.trigger("button:save:enable"),
            e.has_saved = !1
        }).on("has_reverted", function() {
            return e.has_saved ? (e.has_saved = !0,
            !1) : (e.form_modified = !1,
            AMOCRM.router.preventPageChange(!1, "amoform"),
            void (e.can_save_disable && e.$save_btn.trigger("button:save:disable")))
        })
    }
    ,
    t.prototype.leadsKeyEventsOff = function() {
        "keyEventsOff"in AMOCRM.data.current_view && AMOCRM.data.current_view.keyEventsOff()
    }
    ,
    t.prototype.initSortable = function() {
        var e = this;
        i("#amoforms-fields-list").sortable({
            containment: "parent",
            handle: ".amoforms-cd_dots_wrapper",
            axis: "y",
            items: "> div.amoforms_field_block",
            distance: 5,
            tolerance: "pointer",
            stop: function() {
                e.form_modified = !0,
                e.validateForm()
            }
        })
    }
    ,
    t.prototype.leadsKeyEventsOn = function() {
        "keyEventsOn"in AMOCRM.data.current_view && AMOCRM.data.current_view.keyEventsOn()
    }
    ,
    t
}),
define("lib/components/amoforms/loader", ["require", "jquery", "twig", "underscore", "lib/components/base/modal", "lib/components/base/confirm", "lib/components/amoforms/edit", "lib/core/users"], function(e) {
    "use strict";
    var t, i, s = e("jquery"), n = e("twig"), o = e("underscore"), r = e("lib/components/base/modal"), a = e("lib/components/base/confirm"), l = e("lib/components/amoforms/edit"), c = e("lib/core/users");
    return t = function(e) {
        var t, s, n, a, c;
        switch (e = e || {},
        a = e.mode,
        this.options = e,
        this.onDestroy = o.isFunction(e.onDestroy) ? e.onDestroy : o.noop,
        a) {
        case "create":
        case "edit":
            t = "edit_form.twig",
            n = l;
            break;
        default:
            return
        }
        i && o.isFunction(i.abort) && (i.abort(),
        i = null),
        this._requestData(a, e.form_id).done(o.bind(function(i) {
            return c = i.response.params.errors,
            o.isArray(c) && c.length ? (new r).showError(o.first(c), !1) : (s = this._updateResponseData(i.response),
            void this._initModal({
                template_name: t,
                interface_name: n,
                form_params: o.extend({
                    class_name: "modal-amoforms",
                    can_save_disable: void 0 !== e.can_save_disable ? e.can_save_disable : !0,
                    onSave: e.onSave,
                    onConvert: e.onConvert,
                    onOpenNew: e.onOpenNew
                }, s)
            }))
        }, this)).fail(function(e, t, i) {
            "abort" !== t && (new r).showError(null, !1)
        })
    }
    ,
    t.prototype._initModal = function(e) {
        var t = this
          , i = "modal-amoforms";
        this.modal = new r({
            class_name: i + " " + (t.options.class_name || "modal-list"),
            container: t.options.container,
            init: n._preload(["/tmpl/common/amoforms/" + e.template_name], function(i) {
                this.modal_body = i,
                i.trigger("modal:loaded").html(n({
                    ref: "/tmpl/common/amoforms/" + e.template_name
                }).render(e.form_params)).trigger("modal:centrify"),
                t.Amoforms = new e.interface_name(e.form_params),
                o.isFunction(t.options.onInit) && t.options.onInit.call(t)
            }),
            destroy: function() {
                var e = this;
                if (t.Amoforms.is_changed() && t.Amoforms.force_close !== !0) {
                    var i = new a({
                        class_name: "modal-list modal-leave-confirm",
                        decline_text: AMOCRM.lang.button_exit,
                        accept_text: AMOCRM.lang.button_save,
                        button_class: "button-input_blue",
                        text: AMOCRM.lang.amoforms_confirm_close_modal,
                        accept: function() {
                            t.Amoforms.force_close = !0,
                            t.Amoforms.saveForm(),
                            i.destroy(),
                            t.onDestroy(),
                            t.modal.destroy()
                        },
                        destroy: function() {
                            this.accepted === !1 && (t.Amoforms.force_close = !0,
                            t.onDestroy(),
                            t.modal.destroy())
                        }
                    });
                    return !1
                }
                t.modal_body && t.modal_body.off(),
                e.xhr && "undefined" == typeof e.xhr.status && e.xhr.abort(),
                t.onDestroy(),
                t.Amoforms.destroy()
            }
        })
    }
    ,
    t.prototype._requestData = function(e, t) {
        return i = o.isUndefined(t) ? s.ajax({
            url: "/ajax/amoforms/" + e,
            type: "POST",
            dataType: "json",
            data: {
                in_modal: !0
            }
        }) : s.ajax({
            url: "/ajax/amoforms/" + e + "/" + t,
            type: "POST",
            dataType: "json",
            data: {
                in_modal: !0
            }
        })
    }
    ,
    t.prototype._updateResponseData = function(e) {
        return e.params.pipelines ? (e.params.pipelines = o.toArray(e.params.pipelines),
        o.each(e.params.pipelines, function(e) {
            e.statuses = o.toArray(e.statuses)
        }),
        e.template_params = {
            has_pipelines: e.params.has_pipelines,
            items: e.params.pipelines,
            selected_pipe: {
                name: "pipeline_id"
            },
            name: "status_id"
        }) : e.template_params = {
            has_pipelines: !1,
            selected: e.params.form_params.settings && +e.params.form_params.settings.lead_status,
            items: o.each(e.params.lead_statuses, function(e) {
                e.id = e.ID,
                e.option = e.NAME,
                e.bg_color = e.COLOR
            })
        },
        e.params.managers = {
            items: c.get(),
            selected: e.params.form_params.response_user_id
        },
        e
    }
    ,
    t
}),
define("lib/interface/settings/digital_pipeline/forms/amoforms_form_view", ["require", "jquery", "underscore", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/components/base/form");
    return t = n.View.extend({
        _selectors: function() {
            return {
                responsible: ".amoforms__responsible"
            }
        },
        initialize: function(e) {
            n.View.prototype.initialize.apply(this, arguments)
        },
        setUrl: s.noop,
        initBaseModelFromForm: function() {
            n.View.prototype.initModelFromForm.call(this)
        },
        changeInModel: function(e) {
            var t, o = i(e.currentTarget), r = {}, a = this.getInputValue(o);
            s.isUndefined(o.attr("name")) || (t = o.attr("name").match(/\w+/gi),
            "settings" === t[0] && ("lead_pipe" === t[1] && (r.add_to_unsorted = "unsorted" === a ? "Y" : "N",
            "Y" === r.add_to_unsorted ? this._findElem("responsible").hide() : this._findElem("responsible").show()),
            r[t[1]] = a,
            this.model.set("settings", i.extend(!0, this.model.get("settings"), r))),
            n.View.prototype.changeInModel.apply(this, arguments))
        },
        revert: function() {
            this.model.attributes = i.extend(!0, {}, this.model.defaults),
            this.model.trigger("has_reverted")
        },
        initModelFromForm: function(e) {
            s.isUndefined(e.form_id) || this.model.set({
                id: parseInt(e.form_id)
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/amoforms_model", ["require", "backbone", "underscore", "lib/common/fn", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = e("backbone"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/components/base/form");
    return t = o.Model.extend({
        url: function(e) {
            switch (e) {
            case "update":
                return "/ajax/v1/forms/update";
            case "delete":
                return "/ajax/v1/forms/delete";
            case "create":
                return "/ajax/v1/forms/create";
            default:
                return this.isNew() ? "/ajax/v1/forms/new" : "/ajax/v1/forms/list?id=" + this.id
            }
        },
        save: function() {
            var e = {
                type: "POST",
                contentType: "application/json"
            };
            return e.url = this.isNew() ? this.url("create") : this.url("update"),
            e.data = JSON.stringify({
                request: {
                    form: this._clearData(this.toJSON())
                }
            }),
            i.Model.prototype.save.call(this, s.noop(), e)
        },
        _clearData: function(e) {
            return s.each(e, s.bind(function(t, i) {
                var n = i.match(/\w+/gi);
                !s.isNull(n) && s.size(n) > 1 && delete e[i]
            })),
            e
        },
        parse: function(e) {
            var t;
            switch (e = n.cleanResponse(e),
            t = s.keys(e.forms)[0]) {
            case "new":
            case "list":
                e.forms[t].langs && AMOCRM.addLang(e.forms[t].langs),
                this.response = s.omit(e.forms[t], "langs"),
                this.response.form.fields = s.map(s.toArray(this.response.form.fields), function(e) {
                    return e.selected = !0,
                    e
                }),
                this.attributes = this.response.form;
                break;
            case "create":
                this.response = s.omit(e.forms[t], "langs"),
                this.set("id", this.response.form.id),
                this.set("hash", this.response.form.hash);
                break;
            case "update":
            case "delete":
            }
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/field_view", ["require", "jquery", "underscore", "twig", "lib/core/view", "FileAPI"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("FileAPI");
    return t = o.extend({
        events: {
            "click .js-action-delete": "deleteField",
            "click .js-action-edit": "onClickOpenSettings",
            "click .amoforms__field__name": "focusInput",
            'change :input[type="file"]': "uploadLogo",
            "change :input": "changeInModel",
            "controls:change :input": "changeInModel",
            click: "hideEditable"
        },
        _selectors: function() {
            return {
                settings: ".amoforms__field__settings",
                "delete": ".js-action-delete",
                input_name: ".amoforms__field__name-input",
                input_numeric: ".amoforms-validate_number",
                input_placeholder: ".amoforms_placeholder",
                field_required: ".amoforms__field__required",
                field_paragraph: ".amoforms__textarea_paragraph",
                field_textarea: ".amoforms__textarea",
                field_header: ".amoforms__field__name-header",
                text_input: ".text-input",
                field_logo: ".amoforms_logo_wrapper",
                cursor_inside: ".js-cursor-inside",
                cursor_outside: ".js-cursor-outside",
                logo_upload: ".amoforms__logo_upload",
                logo_errors: ".amoforms__logo_errors"
            }
        },
        _classes: function() {
            return {
                field_editable: "amoforms__fields__container_editable",
                field_inside: "amoforms__fields__container__inner_inside"
            }
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.template_name = "field.twig",
            this.options = e || {},
            this.setEvents(),
            this.onModify = s.isFunction(e.onModify) ? e.onModify : s.noop
        },
        hideEditable: function(e) {
            this.isEditable() ? e.stopPropagation() : this._$document.trigger("controls:hide:private")
        },
        setEvents: function() {
            this._$document.on("controls:hide:private" + this.ns, s.bind(this.onCloseSettings, this)),
            this.listenTo(this.model, "change:required", this.onChangeRequired),
            this.listenTo(this.model, "change:position", this.onChangePosition),
            ("header" === this.model.get("type") || "logotype" === this.model.get("type")) && (this._$document.on("amoforms:headers:left" + this.ns, s.bind(this.moveHeadersLeft, this)),
            this._$document.on("amoforms:headers:right" + this.ns, s.bind(this.moveHeadersRight, this)),
            this._$document.on("amoforms:headers:center" + this.ns, s.bind(this.moveHeadersCenter, this)))
        },
        render: function() {
            this.$el.html(n({
                ref: "/tmpl/digital_pipeline/forms/" + this.template_name
            }).render(s.extend(this.model.toJSON(), {
                styles: this.options.name_position,
                forms_server: this.options.forms_server
            }))),
            this.$el.data("id", this.model.get("id"))
        },
        initAutosize: function() {
            this.model.get("element_type") !== AMOCRM.element_types.amoforms && this._findElem("input_name").autosizeInput({
                minWidth: 0,
                comfortZone: 5
            }),
            this._findElem("field_textarea").trigger("controls:textarea:autosize")
        },
        onChangeRequired: function(e) {
            e.changedAttributes().required ? this._findElem("field_required").show() : this._findElem("field_required").hide()
        },
        onChangePosition: function(e) {
            "header" === e.get("type") ? this._findElem("field_header").css("text-align", e.changedAttributes().position) : this._findElem("field_logo").css("text-align", e.changedAttributes().position)
        },
        deleteField: function() {
            this.options.beforeDelete(this.model.get("element_type")) ? (this.destroy(!0),
            this.options.onDelete(this.model.get("id"))) : (this._findElem("delete").addClass("animated shake"),
            s.delay(s.bind(function() {
                this._findElem("delete").removeClass("animated shake")
            }, this), 200))
        },
        onClickOpenSettings: function() {
            this._$document.trigger("controls:hide"),
            this.isEditable() || (this._findElem("settings").show(),
            this.$el.addClass(this._class("field_editable")),
            this.isInside() ? this.setCursorPosition(this._findElem("cursor_inside")) : this.setCursorPosition(this._findElem("cursor_outside")),
            this.$("select").css("color", "#2E3640"))
        },
        focusInput: function() {
            this.isEditable() && this._findElem("input_name").focus()
        },
        isInside: function() {
            return this.$el.children().hasClass(this._class("field_inside"))
        },
        isEditable: function() {
            return this.$el.hasClass(this._class("field_editable"))
        },
        setCursorPosition: function(e) {
            var t;
            e.length && (e.focus(),
            t = (e.val() || "").length,
            e[0].setSelectionRange(t, t),
            e.animate({
                scrollLeft: 999
            }, "fast"))
        },
        onCloseSettings: function() {
            this.isEditable() && ("logotype" !== this.model.get("type") && this.$(":input.text-input").change(),
            this._elem("settings").hide(),
            this.$el.removeClass(this._class("field_editable")),
            this.options.renderFields(this))
        },
        changeInModel: function(e) {
            var t = i(e.currentTarget)
              , n = t.attr("name").match(/\w+/gi);
            n.length > 3 ? s.reduce(n.slice(2), function(e, i, n, o) {
                return s.last(o) === i && (e[i] = this.getInputValue(t)),
                e[i]
            }, this.model.toJSON(), this) : this.model.set(n[2], this.getInputValue(t)),
            this.checkChanges() && this.onModify(),
            this.initAutosize()
        },
        getInputValue: function(e) {
            var t = "";
            switch (e.attr("type")) {
            case "checkbox":
            case "radio":
                t = e.prop("checked") ? e.val() || "on" : "";
                break;
            case "file":
                t = this.model.get("file_name");
                break;
            default:
                t = i.trim(e.val())
            }
            return t
        },
        checkChanges: function() {
            var e = this.model.hasChanges()
              , t = "has_changes";
            return e || (t = "has_reverted"),
            this.model.trigger(t, {
                type: t
            }),
            e
        },
        moveHeadersLeft: function() {
            this.model.set("position", "left"),
            this.checkChanges() && this.onModify()
        },
        moveHeadersRight: function() {
            this.model.set("position", "right"),
            this.checkChanges() && this.onModify()
        },
        moveHeadersCenter: function() {
            this.model.set("position", "center"),
            this.checkChanges() && this.onModify()
        },
        uploadLogo: function(e) {
            var t = r.getFiles(e)[0]
              , n = this.options.getHash()
              , o = i(e.target).attr("name").match(/\w+/gi);
            t && (this.toggleUploadButton(e.target, !0),
            this.uploadFiles({
                files: {
                    images: t
                },
                url: "/ajax/v1/forms/upload?type=logo&hash=" + n,
                complete: s.bind(function(t, n) {
                    this.toggleUploadButton(e.target, !1);
                    var r = i.parseJSON(n.response)
                      , a = s.isUndefined(r.response.forms) ? r.response : r.response.forms.upload;
                    a.status && "success" === a.status ? (this.model.set(o[2], a.path),
                    this.checkChanges() && (this.onModify(),
                    this.options.renderFields(this),
                    this.onCloseSettings())) : a.error && this.handleError(a)
                }, this)
            }))
        },
        uploadFiles: function(e) {
            e.files && r.upload({
                url: e.url,
                files: e.files,
                progress: s.noop,
                complete: s.bind(function(t, i) {
                    s.isFunction(e.complete) && e.complete(t, i)
                }, this)
            })
        },
        toggleUploadButton: function(e, t) {
            var s = i(e).attr("id")
              , o = i("label[for='" + s + "']");
            t ? o.html(n({
                ref: "/tmpl/digital_pipeline/forms/field/upload_button"
            }).render({
                text: AMOCRM.lang.Uploading + "...",
                load: !0
            })) : o.html(n({
                ref: "/tmpl/digital_pipeline/forms/field/upload_button"
            }).render())
        },
        handleError: function(e) {
            var t = {
                319: AMOCRM.lang["The file size should not exceed"] + " 1 " + AMOCRM.lang.MB,
                320: AMOCRM.lang["Acceptable file formats:"] + " jpeg, png, gif",
                321: AMOCRM.lang["The file could not be uploaded"],
                400: AMOCRM.lang.modal_error_caption
            }
              , i = parseInt(e.error_code) || 400
              , n = t[i] || t[400];
            this._findElem("logo_upload").addClass("animated shake"),
            s.delay(s.bind(function() {
                this._findElem("logo_upload").removeClass("animated shake")
            }, this), 200),
            this._findElem("logo_errors").text(n)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/sidebar_item_view", ["require", "lib/core/view", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/core/view"), s = e("underscore"), n = e("twig");
    return t = i.extend({
        className: "amoforms__sidebar__item",
        events: {
            click: "createField"
        },
        template_name: "sidebar.twig",
        initialize: function(e) {
            e = e || {},
            i.prototype.initialize.apply(this, arguments),
            this.options = e,
            this.render(),
            this.$el.attr({
                "data-type": this.model.get("type"),
                "data-id": this.model.get("id")
            }),
            this.model.get("element_type") !== AMOCRM.element_types.amoforms && (this.selectedItem(),
            this.listenTo(this.model, "change:selected", s.bind(this.selectedItem, this)))
        },
        render: function() {
            this.$el.html(n({
                ref: "/tmpl/digital_pipeline/forms/" + this.template_name
            }).render(this.model.toJSON()))
        },
        selectedItem: function() {
            this.model.get("selected") ? this.$el.hide() : this.$el.show().css("display", "flex")
        },
        createField: function() {
            this.model.set("selected", !0),
            this.options.onSidebarFieldClick(this.model.toJSON())
        },
        destroy: function() {
            this.$el.draggable("destroy"),
            i.prototype.destroy.call(this, !0)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/sidebar_view", ["require", "lib/core/view", "jquery", "underscore", "twig", "lib/interface/settings/digital_pipeline/forms/sidebar_item_view", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("lib/core/view"), s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("lib/interface/settings/digital_pipeline/forms/sidebar_item_view"), a = e("lib/common/fn");
    return t = i.extend({
        className: "amoforms__sidebar",
        _selectors: function() {
            return {
                items: ".amoforms__sidebar__items",
                wrapper: ".amoforms__sidebar__wrapper",
                selected_item: ".amoforms__sidebar__items_showed"
            }
        },
        _classes: function() {
            return {
                item_showed: "amoforms__sidebar__items_showed"
            }
        },
        events: {
            "click .amoforms__sidebar__header": "onShowItems"
        },
        initialize: function(e) {
            i.prototype.initialize.apply(this, arguments),
            this.fields = {},
            this.options = e || {},
            this.initFields(),
            this.stop_animation = !0
        },
        initFields: function() {
            var e = n.toArray(this.collection.groupBy("entity"));
            e.push(e.shift()),
            n.each(e, this.initGroupFields, this),
            this._elem("items").first().addClass(this._class("item_showed")).show()
        },
        onShowItems: function(e) {
            var t = s(e.currentTarget)
              , i = t.siblings(this._elem("items"));
            !i.hasClass(this._class("item_showed")) && this.stop_animation && (this.stop_animation = !1,
            this._findElem("selected_item").removeClass(this._class("item_showed")).slideUp({
                duration: 200,
                done: n.bind(function() {
                    i.addClass(this._class("item_showed")).slideDown({
                        duration: 200,
                        done: n.bind(function() {
                            this.stop_animation = !0
                        }, this)
                    })
                }, this)
            }))
        },
        setSelected: function(e, t) {
            return this.collection.findWhere({
                id: e
            }).set("selected", t).toJSON()
        },
        initGroupFields: function(e, t) {
            var i, l, c, d = e[0].get("element_type");
            switch (d) {
            case AMOCRM.element_types.amoforms:
                i = a.i18n("Additional");
                break;
            default:
                i = a.i18n(a.capitalize(a.getEntityByTypeId(d)))
            }
            l = s(o({
                ref: "/tmpl/digital_pipeline/forms/wrapper/wrapper_sidebar.twig"
            }).render({
                header: i
            })),
            c = n.reduce(e, function(e, t) {
                return this.fields[t.id] = this._addComponent(r, {
                    model: t,
                    onSidebarFieldClick: this.options.onSidebarFieldClick
                }),
                e.appendChild(this.fields[t.id].el),
                e
            }, document.createDocumentFragment(), this),
            l.find(".amoforms__sidebar__items").append(c),
            this.$el.append(l)
        },
        initDraggable: function() {
            var e = this;
            n.each(this.fields, function(t) {
                t.$el.draggable({
                    cursor: "move",
                    connectToSortable: ".js-fields-sortable",
                    helper: "clone",
                    opacity: .7,
                    revert: "invalid",
                    scroll: !1,
                    start: function() {
                        e._$document.trigger("controls:hide:private")
                    }
                })
            }, this)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/setting_view", ["require", "lib/core/view", "jquery", "underscore"], function(e) {
    "use strict";
    var t, i = e("lib/core/view"), s = e("jquery"), n = e("underscore");
    return t = i.extend({
        events: {
            click: "onStopPropagation",
            "click button": "onPreventDefault"
        },
        initialize: function(e) {
            i.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this._$document.on("controls:hide:private" + this.ns, n.bind(this.destroyView, this)),
            this.render()
        },
        destroyView: function() {
            this.destroy(!0)
        },
        render: function() {
            this.$el.hasClass("amoforms__setting-modal-background-image") || (this._render_template(),
            this._render())
        },
        _render_template: function() {
            this.$el.html(this.template())
        },
        _render: n.noop,
        onStopPropagation: function(e) {
            var t = s(e.currentTarget);
            (t.hasClass("amoforms__setting-modal-background-color") || t.hasClass("amoforms__setting-modal-font-color") || t.hasClass("amoforms__setting-modal-submit_background") || t.hasClass("amoforms__setting-modal-submit_color")) && e.stopPropagation()
        },
        onPreventDefault: function(e) {
            e.preventDefault()
        },
        reposition: function() {
            var e = this.options.button.getBoundingClientRect()
              , t = s(this.options.button).position();
            this.$el.css({
                position: "absolute",
                top: t.top + e.height + 10,
                left: t.left + e.width / 2 - this.el.offsetWidth / 2,
                zIndex: 1e3
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/field_form_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("twig");
    return t = i.extend({
        events: n.extend({}, i.prototype.events, {
            "click .amoforms__setting-modal-field-form__btn": "changeFieldForm"
        }),
        changeFieldForm: function(e) {
            var t = s(e.currentTarget)
              , i = t.attr("data-type");
            t.parent().find(".selected").removeClass("selected"),
            t.addClass("selected"),
            s(this.options.button).attr("data-value", i),
            this.options.onChangeSetting(this.options.css_rule, i)
        },
        _render: function() {
            this.$('[data-type="' + this.options.model["field-form"] + '"]').addClass("selected")
        },
        template: function() {
            return o({
                ref: "/tmpl/digital_pipeline/forms/buttons/field_form.twig"
            }).render()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/name_position_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("twig");
    return t = i.extend({
        events: n.extend({}, i.prototype.events, {
            "click .amoforms__setting-modal-name-position__btn": "changeNamePosition"
        }),
        _render: function() {
            this.$('[data-type="' + this.options.model["name-position"] + '"]').addClass("selected")
        },
        changeNamePosition: function(e) {
            var t = s(e.currentTarget)
              , i = t.attr("data-type");
            t.parent().find(".selected").removeClass("selected"),
            t.addClass("selected"),
            s(this.options.button).attr("data-value", t.attr("data-type")),
            this.options.onChangeSetting(this.options.css_rule, i)
        },
        template: function() {
            return o({
                ref: "/tmpl/digital_pipeline/forms/buttons/name_position.twig"
            }).render()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/font_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("twig");
    return t = i.extend({
        events: n.extend({}, i.prototype.events, {
            "click li": "changeFontFamily"
        }),
        changeFontFamily: function(e) {
            var t = s(e.currentTarget);
            t.parent().children(".selected").removeClass("selected"),
            t.addClass("selected"),
            s(this.options.button).attr("data-font-family", t.attr("data-value")),
            this.changeSetting()
        },
        changeSetting: function() {
            n.isFunction(this.options.onChangeSetting) && this.options.onChangeSetting(this.options.css_rule, this.$("li.selected").attr("data-value"))
        },
        _render: function() {
            this.$('[data-value="' + this.options.model.font + '"]').addClass("selected")
        },
        template: function() {
            return o({
                ref: "/tmpl/digital_pipeline/forms/buttons/font.twig"
            }).render()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/form_paddings_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("twig");
    return t = i.extend({
        events: n.extend({}, i.prototype.events, {
            "click .amoforms__setting-modal-form-paddings__btn": "changeFormPaddings"
        }),
        _render: function() {
            this.$('[data-type="' + this.options.model["form-paddings"] + '"]').addClass("selected")
        },
        changeFormPaddings: function(e) {
            var t = s(e.currentTarget)
              , i = t.attr("data-type");
            t.parent().find(".selected").removeClass("selected"),
            t.addClass("selected"),
            s(this.options.button).attr("data-value", i),
            this.options.onChangeSetting(this.options.css_rule, i)
        },
        template: function() {
            return o({
                ref: "/tmpl/digital_pipeline/forms/buttons/form_paddings.twig"
            }).render()
        }
    })
}),
function(e) {
    define("vendor/colorpicker/colorpicker", ["jquery"], function() {
        return function() {
            !function(e) {
                var t = function() {
                    function t(e) {
                        return e.originalEvent.preventDefault && e.originalEvent.preventDefault(),
                        !1
                    }
                    var i = 65
                      , s = '<div class="amoforms colorpicker"><div class="colorpicker_transparent_wrapper"><label class="amoforms__checkbox"><span class="amoforms__checkbox"><input id="transparency_checkbox" type="checkbox" name="transparent"><b></b></span><span class="amoforms_colorpicker_transparent_bg_text">' + AMOCRM.lang["No Background"] + '</span></label></div><div class="colorpicker_inner"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><label for="hex">#</label><input type="text" maxlength="6" size="6" id="hex" /></div><div class="colorpicker_rgb_r colorpicker_field"><label for="rbg_r">R</label><input type="text" maxlength="3" size="3" id="rgb_r" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><label for="rbg_g">G</label><input type="text" maxlength="3" size="3" id="rgb_g" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><label for="rbg_b">B</label><input type="text" maxlength="3" size="3" id="rgb_b" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><label for="hsb_h">H</label><input type="text" maxlength="3" size="3" id="hsb_h" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><label for="hsb_s">S</label><input type="text" maxlength="3" size="3" id="hsb_s" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><label for="hsb_b">B</label><input type="text" maxlength="3" size="3" id="hsb_b" /><span></span></div><div class="colorpicker_submit"></div></div></div>'
                      , n = {
                        eventName: "click",
                        onShow: function() {},
                        onBeforeShow: function() {},
                        onHide: function() {},
                        onChange: function() {},
                        onSubmit: function() {},
                        color: "ff0000",
                        livePreview: !0,
                        flat: !1,
                        isTransparent: !1
                    }
                      , o = function(t, i) {
                        var s = HSBToRGB(t);
                        e(i).data("colorpicker").fields.eq(1).val(s.r).end().eq(2).val(s.g).end().eq(3).val(s.b).end()
                    }
                      , r = function(t, i) {
                        e(i).data("colorpicker").fields.eq(4).val(t.h).end().eq(5).val(t.s).end().eq(6).val(t.b).end()
                    }
                      , a = function(t, i) {
                        e(i).data("colorpicker").fields.eq(0).val(HSBToHex(t)).end()
                    }
                      , l = function(t, i) {
                        e(i).data("colorpicker").isTransparent ? e(i).data("colorpicker").selector.css("backgroundColor", "transparent") : e(i).data("colorpicker").selector.css("backgroundColor", "#" + HSBToHex({
                            h: t.h,
                            s: 100,
                            b: 100
                        })),
                        e(i).data("colorpicker").selectorIndic.css({
                            left: parseInt(150 * t.s / 100, 10),
                            top: parseInt(150 * (100 - t.b) / 100, 10)
                        })
                    }
                      , c = function(t, i) {
                        e(i).data("colorpicker").hue.css("top", parseInt(150 - 150 * t.h / 360, 10))
                    }
                      , d = function(t, i) {
                        e(i).data("colorpicker").isTransparent ? e(i).data("colorpicker").currentColor.css("backgroundColor", "transparent") : e(i).data("colorpicker").currentColor.css("backgroundColor", "#" + HSBToHex(t))
                    }
                      , u = function(t, i) {
                        e(i).data("colorpicker").isTransparent ? e(i).data("colorpicker").newColor.css("backgroundColor", "transparent") : e(i).data("colorpicker").newColor.css("backgroundColor", "#" + HSBToHex(t))
                    }
                      , h = function(t) {
                        var s = t.charCode || t.keyCode || -1;
                        if (s > i && 90 >= s || 32 === s)
                            return !1;
                        var n = e(this).closest(".colorpicker");
                        n.data("colorpicker").livePreview === !0 && _.apply(this)
                    }
                      , _ = function(t) {
                        var i, s = e(this).closest(".colorpicker");
                        s.length && (e(s).data("colorpicker").isTransparent && (e(s).data("colorpicker").transparencyCheckbox.prop("checked", !1),
                        e(s).data("colorpicker").isTransparent = !1),
                        this.parentNode.className.indexOf("_hex") > 0 ? s.data("colorpicker").color = i = HexToHSB(fixHex(this.value)) : this.parentNode.className.indexOf("_hsb") > 0 ? s.data("colorpicker").color = i = fixHSB({
                            h: parseInt(s.data("colorpicker").fields.eq(4).val(), 10),
                            s: parseInt(s.data("colorpicker").fields.eq(5).val(), 10),
                            b: parseInt(s.data("colorpicker").fields.eq(6).val(), 10)
                        }) : s.data("colorpicker").color = i = RGBToHSB(fixRGB({
                            r: parseInt(s.data("colorpicker").fields.eq(1).val(), 10),
                            g: parseInt(s.data("colorpicker").fields.eq(2).val(), 10),
                            b: parseInt(s.data("colorpicker").fields.eq(3).val(), 10)
                        })),
                        t && (o(i, s.get(0)),
                        a(i, s.get(0)),
                        r(i, s.get(0))),
                        l(i, s.get(0)),
                        c(i, s.get(0)),
                        u(i, s.get(0)),
                        s.data("colorpicker").onChange.apply(s, [i, HSBToHex(i), HSBToRGB(i), s.data("colorpicker").parent]))
                    }
                      , p = function(t) {
                        var i, s = e(this).closest(".colorpicker");
                        if (e(s).data("colorpicker").isTransparent = e(this).prop("checked"),
                        e(s).data("colorpicker").isTransparent)
                            i = "transparent";
                        else {
                            var n = s.find(".colorpicker_hue > div").css("top");
                            n = parseInt(n);
                            var o = 360 - 2.4 * n;
                            i = {
                                h: o,
                                s: 0,
                                b: 100
                            }
                        }
                        l(i, s.get(0), !0),
                        c(i, s.get(0), !0),
                        u(i, s.get(0), !0),
                        s.data("colorpicker").onChange.apply(s, [i, HSBToHex(i), HSBToRGB(i), s.data("colorpicker").parent])
                    }
                      , m = function(t) {
                        var i = e(this).closest(".colorpicker");
                        i.data("colorpicker").fields.parent().removeClass("colorpicker_focus")
                    }
                      , f = function() {
                        i = this.parentNode.className.indexOf("_hex") > 0 ? 70 : 65,
                        e(this).closest(".colorpicker").data("colorpicker").fields.parent().removeClass("colorpicker_focus"),
                        e(this).parent().addClass("colorpicker_focus")
                    }
                      , g = function(i) {
                        var s = e(this).parent().find('input[type="text"]').focus()
                          , n = {
                            el: e(this).parent().addClass("colorpicker_slider"),
                            max: this.parentNode.className.indexOf("_hsb_h") > 0 ? 360 : this.parentNode.className.indexOf("_hsb") > 0 ? 100 : 255,
                            y: i.pageY,
                            field: s,
                            val: parseInt(s.val(), 10),
                            preview: e(this).closest(".colorpicker").data("colorpicker").livePreview
                        };
                        return e(document).on("mouseup", n, v),
                        e(document).on("mousemove", n, b),
                        t(i)
                    }
                      , b = function(e) {
                        return e.data.field.val(Math.max(0, Math.min(e.data.max, parseInt(e.data.val + e.pageY - e.data.y, 10)))),
                        e.data.preview && _.apply(e.data.field.get(0), [!0]),
                        !1
                    }
                      , v = function(t) {
                        return _.apply(t.data.field.get(0), [!0]),
                        t.data.el.removeClass("colorpicker_slider").find('input[type="text"]').focus(),
                        e(document).off("mouseup", v),
                        e(document).off("mousemove", b),
                        !1
                    }
                      , w = function(i) {
                        var s = {
                            cal: e(this).closest(".colorpicker"),
                            y: e(this).offset().top
                        };
                        return s.preview = s.cal.data("colorpicker").livePreview,
                        e(document).on("mouseup", s, k),
                        e(document).on("mousemove", s, C),
                        t(i)
                    }
                      , C = function(e) {
                        return _.apply(e.data.cal.data("colorpicker").fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, e.pageY - e.data.y))) / 150, 10)).get(0), [e.data.preview]),
                        !1
                    }
                      , k = function(t) {
                        return o(t.data.cal.data("colorpicker").color, t.data.cal.get(0)),
                        a(t.data.cal.data("colorpicker").color, t.data.cal.get(0)),
                        e(document).off("mouseup", k),
                        e(document).off("mousemove", C),
                        !1
                    }
                      , x = function(t) {
                        y = e(this).offset().top,
                        preview = t.data.cal.data("colorpicker").livePreview,
                        _.apply(t.data.cal.data("colorpicker").fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, t.pageY - y))) / 150, 10)).get(0), [preview])
                    };
                    return downSelector = function(i) {
                        var s = {
                            cal: e(this).closest(".colorpicker"),
                            pos: e(this).offset()
                        };
                        return s.preview = s.cal.data("colorpicker").livePreview,
                        e(document).on("mouseup", s, upSelector),
                        e(document).on("mousemove", s, moveSelector),
                        e(".colorpicker_color", s.cal).one("click", s, moveSelector),
                        i.data = s,
                        moveSelector(i),
                        t(i)
                    }
                    ,
                    moveSelector = function(e) {
                        return _.apply(e.data.cal.data("colorpicker").fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, e.pageY - e.data.pos.top))) / 150, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(150, e.pageX - e.data.pos.left)) / 150, 10)).get(0), [e.data.preview]),
                        !1
                    }
                    ,
                    upSelector = function(t) {
                        ({
                            cal: e(this).parent(),
                            pos: e(this).offset()
                        });
                        return o(t.data.cal.data("colorpicker").color, t.data.cal.get(0)),
                        a(t.data.cal.data("colorpicker").color, t.data.cal.get(0)),
                        e(document).off("mouseup", upSelector),
                        e(document).off("mousemove", moveSelector),
                        !1
                    }
                    ,
                    enterSubmit = function(t) {
                        e(this).addClass("colorpicker_focus")
                    }
                    ,
                    leaveSubmit = function(t) {
                        e(this).removeClass("colorpicker_focus")
                    }
                    ,
                    clickSubmit = function(t) {
                        var i = e(this).parent()
                          , s = i.data("colorpicker").color;
                        i.data("colorpicker").origColor = s,
                        d(s, i.get(0)),
                        i.data("colorpicker").onSubmit(s, HSBToHex(s), HSBToRGB(s), i.data("colorpicker").el, i.data("colorpicker").parent)
                    }
                    ,
                    show = function(t) {
                        var i = e("#" + e(this).data("colorpickerId"));
                        i.data("colorpicker").onBeforeShow.apply(this, [i.get(0)]);
                        var s = e(this).offset()
                          , n = getViewport()
                          , o = s.top + this.offsetHeight
                          , r = s.left;
                        return r + 356 > n.l + n.w && (r -= 356),
                        i.css({
                            left: r + "px",
                            top: o + "px"
                        }),
                        0 != i.data("colorpicker").onShow.apply(this, [i.get(0)]) && i.show(),
                        e(document).on("mousedown", {
                            cal: i
                        }, hide),
                        !1
                    }
                    ,
                    hide = function(t) {
                        isChildOf(t.data.cal.get(0), t.target, t.data.cal.get(0)) || (0 != t.data.cal.data("colorpicker").onHide.apply(this, [t.data.cal.get(0)]) && t.data.cal.hide(),
                        e(document).off("mousedown", hide))
                    }
                    ,
                    isChildOf = function(e, t, i) {
                        if (e === t)
                            return !0;
                        if (e.contains)
                            return e.contains(t);
                        if (e.compareDocumentPosition)
                            return !!(16 & e.compareDocumentPosition(t));
                        for (var s = t.parentNode; s && s !== i; ) {
                            if (s === e)
                                return !0;
                            s = s.parentNode
                        }
                        return !1
                    }
                    ,
                    getViewport = function() {
                        var e = "CSS1Compat" == document.compatMode;
                        return {
                            l: window.pageXOffset || (e ? document.documentElement.scrollLeft : document.body.scrollLeft),
                            t: window.pageYOffset || (e ? document.documentElement.scrollTop : document.body.scrollTop),
                            w: window.innerWidth || (e ? document.documentElement.clientWidth : document.body.clientWidth),
                            h: window.innerHeight || (e ? document.documentElement.clientHeight : document.body.clientHeight)
                        }
                    }
                    ,
                    fixHSB = function(e) {
                        return {
                            h: Math.min(360, Math.max(0, e.h)),
                            s: Math.min(100, Math.max(0, e.s)),
                            b: Math.min(100, Math.max(0, e.b))
                        }
                    }
                    ,
                    fixRGB = function(e) {
                        return {
                            r: Math.min(255, Math.max(0, e.r)),
                            g: Math.min(255, Math.max(0, e.g)),
                            b: Math.min(255, Math.max(0, e.b))
                        }
                    }
                    ,
                    fixHex = function(e) {
                        var t = 6 - e.length;
                        if (t > 0) {
                            for (var i = [], s = 0; t > s; s++)
                                i.push("0");
                            i.push(e),
                            e = i.join("")
                        }
                        return e
                    }
                    ,
                    HexToRGB = function(e) {
                        return e = parseInt(e.indexOf("#") > -1 ? e.substring(1) : e, 16),
                        {
                            r: e >> 16,
                            g: (65280 & e) >> 8,
                            b: 255 & e
                        }
                    }
                    ,
                    HexToHSB = function(e) {
                        return RGBToHSB(HexToRGB(e))
                    }
                    ,
                    RGBToHSB = function(e) {
                        var t = {
                            h: 0,
                            s: 0,
                            b: 0
                        }
                          , i = Math.min(e.r, e.g, e.b)
                          , s = Math.max(e.r, e.g, e.b)
                          , n = s - i;
                        return t.b = s,
                        t.s = 0 != s ? 255 * n / s : 0,
                        0 != t.s ? e.r === s ? t.h = (e.g - e.b) / n : e.g === s ? t.h = 2 + (e.b - e.r) / n : t.h = 4 + (e.r - e.g) / n : t.h = -1,
                        t.h *= 60,
                        t.h < 0 && (t.h += 360),
                        t.s *= 100 / 255,
                        t.b *= 100 / 255,
                        t
                    }
                    ,
                    HSBToRGB = function(e) {
                        if ("transparent" == e)
                            return "transparent";
                        var t = {}
                          , i = Math.round(e.h)
                          , s = Math.round(255 * e.s / 100)
                          , n = Math.round(255 * e.b / 100);
                        if (0 == s)
                            t.r = t.g = t.b = n;
                        else {
                            var o = n
                              , r = (255 - s) * n / 255
                              , a = (o - r) * (i % 60) / 60;
                            360 === i && (i = 0),
                            60 > i ? (t.r = o,
                            t.b = r,
                            t.g = r + a) : 120 > i ? (t.g = o,
                            t.b = r,
                            t.r = o - a) : 180 > i ? (t.g = o,
                            t.r = r,
                            t.b = r + a) : 240 > i ? (t.b = o,
                            t.r = r,
                            t.g = o - a) : 300 > i ? (t.b = o,
                            t.g = r,
                            t.r = r + a) : 360 > i ? (t.r = o,
                            t.g = r,
                            t.b = o - a) : (t.r = 0,
                            t.g = 0,
                            t.b = 0)
                        }
                        return {
                            r: Math.round(t.r),
                            g: Math.round(t.g),
                            b: Math.round(t.b)
                        }
                    }
                    ,
                    RGBToHex = function(t) {
                        var i = [t.r.toString(16), t.g.toString(16), t.b.toString(16)];
                        return e.each(i, function(e, t) {
                            1 === t.length && (i[e] = "0" + t)
                        }),
                        i.join("")
                    }
                    ,
                    RGBstringToHex = function(e) {
                        function t(e) {
                            return ("0" + parseInt(e, 10).toString(16)).slice(-2)
                        }
                        if (!e)
                            return "#FFFFFF";
                        var i = e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                        return i ? "#" + t(i[1]) + t(i[2]) + t(i[3]) : e
                    }
                    ,
                    HSBToHex = function(e) {
                        return "transparent" == e ? "transparent" : RGBToHex(HSBToRGB(e))
                    }
                    ,
                    restoreOriginal = function() {
                        var t = e(this).parent()
                          , i = t.data("colorpicker").origColor;
                        t.data("colorpicker").color = i,
                        o(i, t.get(0)),
                        a(i, t.get(0)),
                        r(i, t.get(0)),
                        l(i, t.get(0)),
                        c(i, t.get(0)),
                        u(i, t.get(0))
                    }
                    ,
                    {
                        init: function(t) {
                            if (t = e.extend({}, n, t || {}),
                            "string" == typeof t.color)
                                "rgb(" == t.color.substring(0, 4) ? t.color = HexToHSB(RGBstringToHex(t.color)) : t.color = HexToHSB(t.color);
                            else if (void 0 !== t.color.r && void 0 !== t.color.g && void 0 !== t.color.b)
                                t.color = RGBToHSB(t.color);
                            else {
                                if (void 0 === t.color.h || void 0 === t.color.s || void 0 === t.color.b)
                                    return this;
                                t.color = fixHSB(t.color)
                            }
                            return this.each(function() {
                                if (!e(this).data("colorpickerId")) {
                                    var i = e.extend({}, t);
                                    i.origColor = t.color;
                                    var n, b = 0;
                                    for (n = 0 === e("#colorpicker_" + b).length; !n; )
                                        b = parseInt(1e4 * Math.random()),
                                        n = 0 === e("#colorpicker_" + b).length;
                                    var v = "colorpicker_" + b;
                                    e(this).data("colorpickerId", v),
                                    i.parent = e(this);
                                    var y = e(s);
                                    y.attr("id", v).attr("data-parent", e(this).attr("id")),
                                    i.flat ? y.appendTo(this).show() : y.appendTo(document.body),
                                    i.fields = y.find('input[type="text"]').on("keyup", h).on("change", _).on("blur", m).on("focus", f),
                                    i.transparencyCheckbox = y.find("#transparency_checkbox").on("change", p),
                                    t.isTransparent && i.transparencyCheckbox.prop("checked", !0),
                                    y.find("span").on("mousedown", g).end().find(">div.colorpicker_current_color").on("click", restoreOriginal),
                                    i.selector = y.find("div.colorpicker_color").on("mousedown", downSelector),
                                    i.selectorIndic = i.selector.find("div div"),
                                    i.el = this,
                                    i.hue = y.find("div.colorpicker_hue div"),
                                    y.find("div.colorpicker_hue").on("mousedown", w),
                                    y.find("div.colorpicker_hue").on("mousedown", {
                                        cal: y
                                    }, x),
                                    i.newColor = y.find("div.colorpicker_new_color"),
                                    i.currentColor = y.find("div.colorpicker_current_color"),
                                    y.data("colorpicker", i),
                                    y.find("div.colorpicker_submit").on("mouseenter", enterSubmit).on("mouseleave", leaveSubmit).on("click", clickSubmit),
                                    o(i.color, y.get(0)),
                                    r(i.color, y.get(0)),
                                    a(i.color, y.get(0)),
                                    c(i.color, y.get(0)),
                                    l(i.color, y.get(0)),
                                    d(i.color, y.get(0)),
                                    u(i.color, y.get(0)),
                                    i.flat ? y.css({
                                        position: "relative",
                                        display: "block"
                                    }) : e(this).on(i.eventName, show)
                                }
                            })
                        },
                        showPicker: function() {
                            return this.each(function() {
                                e(this).data("colorpickerId") && show.apply(this)
                            })
                        },
                        hidePicker: function() {
                            return this.each(function() {
                                e(this).data("colorpickerId") && e("#" + e(this).data("colorpickerId")).hide()
                            })
                        },
                        setColor: function(t) {
                            if ("string" == typeof t)
                                t = "rgb(" == t.substring(0, 4) ? HexToHSB(RGBstringToHex(t)) : HexToHSB(t);
                            else if (void 0 !== t.r && void 0 !== t.g && void 0 !== t.b)
                                t = RGBToHSB(t);
                            else {
                                if (void 0 === t.h || void 0 === t.s || void 0 === t.b)
                                    return this;
                                t = fixHSB(t)
                            }
                            return this.each(function() {
                                if (e(this).data("colorpickerId")) {
                                    var i = e("#" + e(this).data("colorpickerId"));
                                    i.data("colorpicker").color = t,
                                    i.data("colorpicker").origColor = t,
                                    o(t, i.get(0)),
                                    r(t, i.get(0)),
                                    a(t, i.get(0)),
                                    c(t, i.get(0)),
                                    l(t, i.get(0)),
                                    d(t, i.get(0)),
                                    u(t, i.get(0))
                                }
                            })
                        }
                    }
                }();
                e.fn.extend({
                    ColorPicker: t.init,
                    ColorPickerHide: t.hidePicker,
                    ColorPickerShow: t.showPicker,
                    ColorPickerSetColor: t.setColor
                })
            }(jQuery)
        }
        .apply(e, arguments)
    })
}(this),
define("lib/interface/settings/digital_pipeline/forms/buttons/color_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "vendor/colorpicker/colorpicker"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore");
    return e("vendor/colorpicker/colorpicker"),
    t = i.extend({
        render: function() {
            var e = s(this.options.button).find(".color")
              , t = e.css("background-color")
              , i = t.replace(/^.*,(.+)\)/, "$1")
              , o = !1;
            -1 !== t.indexOf("rgba") ? 0 === i && (t = "transparent",
            o = !0) : -1 !== t.indexOf("transparent") && (t = "transparent",
            o = !0),
            this.$el.ColorPicker({
                color: t,
                isTransparent: o,
                flat: !0,
                onChange: n.bind(this.changeColor, this)
            })
        },
        changeColor: function(e, t) {
            var i = "transparent" === t ? t : "#" + t;
            s(this.options.button).find(".color").css("background-color", i),
            this.options.onChangeSetting(this.options.css_rule, i)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/themes_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "twig"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("twig");
    return t = i.extend({
        events: {
            "click li": "changeTheme"
        },
        themes: [{
            settings: {
                "background-color": "transparent",
                font: "Arial",
                "name-position": "left",
                "form-paddings": "no",
                "field-form": "rounded",
                "font-color": "#313942"
            },
            submit: {
                color: "#2184db",
                position: "left"
            },
            headers: "left",
            theme: 0
        }, {
            settings: {
                "background-color": "#f6f7fa",
                font: "PT Sans",
                "name-position": "left",
                "form-paddings": "yes",
                "field-form": "rounded",
                "font-color": "#313942"
            },
            submit: {
                color: "#49b65d",
                position: "center"
            },
            headers: "left",
            theme: 1
        }, {
            settings: {
                "background-color": "#323d45",
                font: "Georgia",
                "name-position": "top",
                "form-paddings": "yes",
                "field-form": "rectangular",
                "font-color": "#FFF"
            },
            submit: {
                color: "#f78d46",
                position: "left"
            },
            headers: "center",
            theme: 2
        }, {
            settings: {
                "background-image": "/forms/img/bg/bg1.jpg",
                font: "PT Sans",
                "name-position": "inside",
                "form-paddings": "yes",
                "field-form": "rounded",
                "font-color": "#FFF"
            },
            submit: {
                color: "#ff5722",
                position: "left"
            },
            headers: "center",
            theme: 3
        }, {
            settings: {
                "background-image": "/forms/img/bg/bg3.jpg",
                font: "Times New Roman",
                "name-position": "inside",
                "form-paddings": "yes",
                "field-form": "rectangular",
                "font-color": "#FFF"
            },
            submit: {
                color: "#f78d46",
                position: "left"
            },
            headers: "center",
            theme: 4
        }, {
            settings: {
                "background-image": "/forms/img/bg/bg2.jpg",
                font: "Lucida Console",
                "name-position": "inside",
                "form-paddings": "yes",
                "field-form": "rounded",
                "font-color": "#FFF"
            },
            submit: {
                color: "#2e95d1",
                position: "left"
            },
            headers: "center",
            theme: 5
        }],
        changeTheme: function(e) {
            var t = s(e.currentTarget).attr("data-value");
            n.isFunction(this.options.onChangeSetting) && (n.each(this.themes[t].settings, n.bind(function(e, t) {
                this.options.onChangeSetting(t, e)
            }, this)),
            this.options.onChangeSetting("submit_background", this.themes[t].submit.color),
            this.options.onChangeSetting("submit_color", "#FFF"),
            this.options.onChangeSetting("submit_position", this.themes[t].submit.position),
            this._$document.trigger("amoforms:headers:" + this.themes[t].headers)),
            s(".amoforms__fields__settings").trigger("amoforms:settings:render")
        },
        reposition: function() {
            var e = this.options.button.getBoundingClientRect()
              , t = s(this.options.button).position();
            this.$el.css({
                position: "absolute",
                top: t.top + e.height + 10,
                left: t.left,
                zIndex: 1e3
            })
        },
        template: function() {
            return o({
                ref: "/tmpl/digital_pipeline/forms/buttons/themes.twig"
            }).render({
                params: this.themes
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/buttons/background_image_view", ["require", "lib/interface/settings/digital_pipeline/forms/setting_view", "jquery", "underscore", "FileAPI"], function(e) {
    "use strict";
    var t, i = e("lib/interface/settings/digital_pipeline/forms/setting_view"), s = e("jquery"), n = e("underscore"), o = e("FileAPI");
    return t = i.extend({
        selectors: {
            file_upload: "input#amoforms__attach_background"
        },
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            o.event.on(s(this.selectors.file_upload).get(0), "change", n.bind(this.uploadBackground, this))
        },
        destroyView: function() {
            i.prototype.destroyView.apply(this, arguments),
            o.event.off(s(this.selectors.file_upload).get(0), "change")
        },
        uploadBackground: function(e) {
            var t = o.getFiles(e)[0]
              , i = this.options.hash;
            t && this.uploadFiles({
                files: {
                    images: t
                },
                url: "/ajax/v1/forms/upload?type=background&hash=" + i,
                complete: n.bind(function(e, t) {
                    var i = s.parseJSON(t.response)
                      , n = i.response.forms.upload;
                    "success" === n.status && this.setBackgroundImage(n.path)
                }, this)
            })
        },
        uploadFiles: function(e) {
            e.files && o.upload({
                url: e.url,
                files: e.files,
                progress: n.noop,
                complete: n.bind(function(t, i) {
                    "function" == typeof e.complete && e.complete(t, i)
                }, this)
            })
        },
        setBackgroundImage: function(e) {
            this.options.onChangeSetting(this.options.css_rule, e)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/settings_view", ["require", "lib/core/view", "jquery", "underscore", "twig", "lib/interface/settings/digital_pipeline/forms/buttons/field_form_view", "lib/interface/settings/digital_pipeline/forms/buttons/name_position_view", "lib/interface/settings/digital_pipeline/forms/buttons/font_view", "lib/interface/settings/digital_pipeline/forms/buttons/form_paddings_view", "lib/interface/settings/digital_pipeline/forms/buttons/color_view", "lib/interface/settings/digital_pipeline/forms/buttons/themes_view", "lib/interface/settings/digital_pipeline/forms/buttons/background_image_view"], function(e) {
    "use strict";
    var t, i = e("lib/core/view"), s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("lib/interface/settings/digital_pipeline/forms/buttons/field_form_view"), a = e("lib/interface/settings/digital_pipeline/forms/buttons/name_position_view"), l = e("lib/interface/settings/digital_pipeline/forms/buttons/font_view"), c = e("lib/interface/settings/digital_pipeline/forms/buttons/form_paddings_view"), d = e("lib/interface/settings/digital_pipeline/forms/buttons/color_view"), u = e("lib/interface/settings/digital_pipeline/forms/buttons/themes_view"), h = e("lib/interface/settings/digital_pipeline/forms/buttons/background_image_view");
    return t = i.extend({
        events: {
            "click .amoforms__fields__settings__btn": "newSetting"
        },
        allowed_settings: {
            themes: u,
            "name-position": a,
            "field-form": r,
            "form-paddings": c,
            font: l,
            "background-color": d,
            submit_background: d,
            "font-color": d,
            submit_color: d,
            "background-image": h
        },
        initialize: function(e) {
            this.options = e || {},
            i.prototype.initialize.apply(this, arguments),
            this.render(),
            s(this.el).on("amoforms:settings:render", n.bind(this.re_render, this))
        },
        render: function() {
            return this.setElement(this._render(), !0)
        },
        _render: function() {
            var e = n.isUndefined(this.model()) ? {} : this.model().toJSON();
            return o({
                ref: "/tmpl/digital_pipeline/forms/" + this.options.template
            }).render({
                model: e
            })
        },
        re_render: function() {
            this.$el.html(this._render())
        },
        newSetting: function(e) {
            var t = e.currentTarget
              , i = s(t).attr("data-type")
              , o = this.options.getHash();
            e.stopPropagation(),
            this._$document.trigger("controls:hide", i),
            this.current_setting = this._addComponent(this.allowed_settings[i], {
                button: t,
                className: "amoforms_button amoforms__setting-modal-" + i,
                onChangeSetting: n.bind(this.changeSetting, this),
                css_rule: i,
                hash: o,
                model: this.model().toJSON()
            }),
            this.appendModal(),
            this.current_setting.reposition()
        },
        changeSetting: function(e, t) {
            var i = {};
            e = this._switchBackground(e),
            i[e] = t,
            this.options.onModify(i)
        },
        _switchBackground: function(e) {
            return ("background-color" === e || "background-image" === e) && (this.changeSetting("background_type", "background-image" === e ? "image" : "color"),
            e = "background"),
            e
        },
        appendModal: function() {
            this.$el.append(this.current_setting.$el)
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/submit_button_view", ["require", "jquery", "underscore", "lib/interface/settings/digital_pipeline/forms/settings_view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/interface/settings/digital_pipeline/forms/settings_view");
    return t = n.extend({
        events: {
            "change .amoforms__submit-button": "onChangeLabel",
            "change .amoforms__submit-button__position": "onChangePosition",
            "click .amoforms__submit-button__btn": "newSetting",
            "click .js-action-edit": "onClickOpenSettings"
        },
        initialize: function(e) {
            n.prototype.initialize.call(this, e),
            this.setEvents()
        },
        _selectors: function() {
            return {
                buttons_wrapper: ".amoforms__submit-button__settings",
                submit_input: ".amoforms__submit-button",
                submit_btn_wrapper: ".amoforms__submit-button__wrapper",
                submit_btn_wrap: ".amoforms__submit-button__wrap",
                submit_button_label: ".amoforms__submit-button__position"
            }
        },
        appendModal: function() {
            this._elem("buttons_wrapper").append(this.current_setting.$el)
        },
        changeSetting: function(e, t) {
            var i = this.model().toJSON();
            i[e] = t,
            this.options.onModify(i)
        },
        setEvents: function() {
            this._$document.on("controls:hide:private" + this.ns, s.bind(this.onCloseSettings, this)),
            this.$el.on("click" + this.ns, s.bind(function(e) {
                this.$el.hasClass("amoforms__fields__submit_editable") || this._$document.trigger("controls:hide:private"),
                e.stopPropagation(),
                s.isUndefined(this.current_setting) || this.current_setting.destroyView()
            }, this))
        },
        onClickOpenSettings: function(e) {
            var t, i, s = this._findElem("submit_input");
            e.stopPropagation(),
            this._$document.trigger("controls:hide"),
            this.$el.addClass("amoforms__fields__submit_editable"),
            this._findElem("buttons_wrapper").show(),
            s.focus(),
            s.val() && (t = s.val().length,
            i = s.get(0),
            i.setSelectionRange(t, t),
            i.scrollLeft = i.scrollWidth)
        },
        onCloseSettings: function(e, t) {
            var i = this._findElem("submit_input");
            if ("submit_color" !== t && "submit_background" !== t) {
                if (0 === i.val().length)
                    return this._findElem("submit_btn_wrapper").addClass("animated shake"),
                    void s.delay(s.bind(function() {
                        this._findElem("submit_btn_wrapper").removeClass("animated shake")
                    }, this), 200);
                this.$el.removeClass("amoforms__fields__submit_editable"),
                this._findElem("buttons_wrapper").hide(),
                i.blur()
            }
        },
        onChangePosition: function(e) {
            var t = i(e.target).val();
            this.changeSetting("submit_position", t)
        },
        checkPositionLabel: function(e) {
            this._findElem("submit_button_label").find('input[data-value="' + e + '"]').prop("checked", !0)
        },
        onChangeLabel: function(e) {
            var t = i(e.currentTarget).val();
            this.changeSetting("label", t),
            this._elem("submit_input").attr("title", t)
        },
        initAutosize: function() {
            this._findElem("submit_input").autosizeInput({
                minWidth: 20,
                maxWidth: 120,
                comfortZone: 2
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/constructor_view", ["require", "jquery", "underscore", "twig", "lib/core/view", "backbone", "lib/interface/settings/digital_pipeline/forms/field_view", "lib/interface/settings/digital_pipeline/forms/sidebar_view", "lib/components/base/form", "lib/interface/settings/digital_pipeline/forms/settings_view", "lib/interface/settings/digital_pipeline/forms/submit_button_view", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("backbone"), a = e("lib/interface/settings/digital_pipeline/forms/field_view"), l = e("lib/interface/settings/digital_pipeline/forms/sidebar_view"), c = e("lib/components/base/form"), d = e("lib/interface/settings/digital_pipeline/forms/settings_view"), u = e("lib/interface/settings/digital_pipeline/forms/submit_button_view"), h = e("lib/common/fn");
    return t = o.extend({
        className: "amoforms__tab-editor",
        _selectors: function() {
            return {
                sortable: ".js-fields-sortable",
                sortable_item: ".amoforms__fields__container",
                right_column: ".amoforms__tab-editor-right",
                left_column: ".amoforms__tab-editor-left",
                fields_edit: ".amoforms__fields__editor",
                css_textarea: ".amoforms__css__textarea",
                css_btn: ".amoforms__css__btn",
                submit_button: ".amoforms__submit-button",
                submit_button_wrapper: ".amoforms__submit-button__wrapper",
                change_font: ".js-amoforms-font",
                change_color: ".js-amoforms-color",
                field_form: ".js-amoforms-border-radius",
                name_position: ".js-change-name-position",
                handler: ".js-amoforms-handler"
            }
        },
        events: function() {
            var e = s.extend({}, s.result(o.prototype, "events"));
            return e["click " + this._selector("css_btn")] = "onShowCss",
            e["click " + this._selector("css_textarea")] = "stopPropagation",
            e["keydown " + this._selector("sortable")] = "_selectAll",
            e
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            this.fields = {},
            this.fields_list = [],
            this.standart_fields = {},
            this.getFromModel = s.isFunction(e.getFromModel) ? e.getFromModel : s.noop,
            this.render(),
            this.initConstructor(),
            this.initButtons(),
            this.initSubmitButton(),
            this._$document.on("controls:hide:private" + this.ns, s.bind(this.onHideCss, this))
        },
        render: function() {
            this.$el.html(n({
                ref: "/tmpl/digital_pipeline/forms/field_block.twig"
            }).render({
                css: this.options.data.form.css
            }))
        },
        stopPropagation: function(e) {
            e.stopPropagation()
        },
        onShowCss: function(e) {
            e.stopPropagation(),
            this._$document.trigger("controls:hide"),
            this._elem("css_textarea").show().trigger("controls:textarea:autosize")
        },
        onHideCss: function() {
            this._elem("css_textarea").val().length || this._elem("css_textarea").hide()
        },
        initConstructor: function() {
            var e = document.createDocumentFragment();
            s.each(this.options.data.form.fields, function(t) {
                var i, n = t.disabled || !1;
                n || (t.element_type === AMOCRM.element_types.amoforms && (i = t.id.split("_"),
                s.isUndefined(this.standart_fields[s.first(i)]) ? this.standart_fields[s.first(i)] = s.last(i) : s.last(i) > this.standart_fields[s.first(i)] ? this.standart_fields[s.first(i)] = s.last(i) : this.standart_fields[s.first(i)] = this.standart_fields[s.first(i)]),
                this.createFieldView({
                    field: t,
                    name_position: this._getStyles()["name-position"]
                }),
                e.appendChild(this.fields[t.id].el))
            }, this),
            this.initSortable(e)
        },
        initSortable: function(e) {
            this._elem("sortable").sortable({
                cursor: "move",
                items: "> .amoforms__fields__container",
                opacity: .7,
                tolerance: "intersect",
                placeholder: "ui-sortable-placeholder",
                sortAnimate: !AMOCRM.is_touch_device,
                sortAnimateDuration: 200,
                zIndex: 1e3,
                scroll: !1,
                forceHelperSizeType: !0,
                forcePlaceholderSizeType: !0,
                over: s.bind(function(e, t) {
                    t.placeholder.css({
                        height: t.item.outerHeight()
                    })
                }, this),
                receive: s.bind(function(e, t) {
                    var i, s = t.item.attr("data-id");
                    i = this.createFieldView({
                        field: this.sidebar.setSelected(s, !0),
                        name_position: this._getStyles()["name-position"]
                    }),
                    t.helper.replaceWith(i.$el),
                    i.initAutosize(),
                    this._renderFields(i)
                }, this),
                update: s.bind(function() {
                    this.updateFields()
                }, this),
                stop: s.noop,
                out: s.noop
            }).disableSelection().append(e).sortable("refresh")
        },
        destroySortable: function() {
            this._elem("sortable").sortable("destroy")
        },
        destroy: function() {
            this.destroySortable(),
            o.prototype.destroy.call(this, !0)
        },
        destroyFieldView: function(e) {
            this.sidebar.setSelected(e, !1)
        },
        createFieldView: function(e) {
            var t = i.extend(!0, {}, e.field) || {}
              , n = t.element_type === AMOCRM.element_types.amoforms ? t.id.split("_") : [];
            return s.isUndefined(n) || 2 !== n.length || (n = s.first(n),
            s.isUndefined(this.standart_fields[n]) ? this.standart_fields[n] = 1 : this.standart_fields[n]++,
            t.id = t.id + "_" + this.standart_fields[n]),
            this.fields[t.id] = this._addComponent(a, {
                model: new c.Model(t),
                name_position: e.name_position,
                className: "amoforms__fields__container amoforms__fields__container_" + t.type,
                onModify: s.bind(this.updateFields, this),
                beforeDelete: s.bind(this.beforeDelete, this),
                forms_server: this.options.data.form_server,
                onDelete: s.bind(function(e) {
                    this.fields[e].model.get("element_type") !== AMOCRM.element_types.amoforms && this.destroyFieldView(e),
                    this.updateFields()
                }, this),
                renderFields: s.bind(this._renderFields, this),
                getHash: s.bind(this._getFormHash, this)
            }),
            this.fields[t.id]
        },
        beforeDelete: function(e) {
            var t;
            return this.updateFields(),
            t = s.reject(this.fields_list, function(e) {
                return e.element_type === AMOCRM.element_types.amoforms
            }),
            !(e !== AMOCRM.element_types.amoforms && s.size(t) < 2)
        },
        appendFieldView: function(e) {
            this._elem("sortable").append(this.fields[e].$el),
            this._renderFields(this.fields[e]),
            this.updateFields()
        },
        updateFields: function() {
            var e = [];
            this._findElem("sortable_item").each(s.bind(function(t, s) {
                e.push(this.fields[i(s).data("id")].model.toJSON())
            }, this)),
            this.fields_list = e,
            this.options.setToModel("fields", this.fields_list)
        },
        initSidebar: function() {
            var e = new r.Collection;
            this.collectionSidebar = e,
            s.each(this.options.data.fields, function(e, t) {
                e.disabled || (e.element_type === AMOCRM.element_types.amoforms && (t = e.id),
                this.collectionSidebar.push(new c.Model(s.extend(e, {
                    id: t,
                    selected: !s.isUndefined(this.fields[t]),
                    entity: h.getEntityByTypeId(e.element_type)
                }))))
            }, this),
            this.sidebar = this._addComponent(l, {
                collection: e,
                onSidebarFieldClick: s.bind(function(e) {
                    var t;
                    e = e || {},
                    t = this.createFieldView({
                        field: e,
                        name_position: this._getStyles()["name-position"]
                    }),
                    this.appendFieldView(t.model.id)
                }, this)
            }),
            this._elem("right_column").append(this.sidebar.$el),
            this.sidebar.initDraggable()
        },
        initButtons: function() {
            this.buttons = this._addComponent(d, {
                template: "buttons.twig",
                model: s.bind(this._getStylesModel, this),
                onModify: s.bind(this._updateStyles, this),
                getHash: s.bind(this._getFormHash, this)
            }),
            this._elem("left_column").prepend(this.buttons.$el)
        },
        initSubmitButton: function() {
            this.submit = this._addComponent(u, {
                template: "submit.twig",
                model: s.bind(this._getSubmitModel, this),
                onModify: s.bind(this._updateSubmitButton, this),
                getHash: s.bind(this._getFormHash, this)
            }),
            this._elem("fields_edit").append(this.submit.$el)
        },
        _getStylesModel: function() {
            return new r.Model(this.getFromModel("styles"))
        },
        _getFormHash: function() {
            return s.isFunction(this.options.getFormHash) ? this.options.getFormHash() : ""
        },
        _getSubmitModel: function() {
            var e = {
                label: this.getFromModel("settings").submit,
                submit_background: this.getFromModel("styles").submit_background,
                submit_color: this.getFromModel("styles").submit_color,
                submit_position: this.getFromModel("styles").submit_position
            };
            return new r.Model(e)
        },
        _getStyles: function() {
            return this.getFromModel("styles")
        },
        _updateSubmitButton: function(e) {
            var t = i.extend(!0, {}, this.getFromModel("settings"))
              , s = this._getStylesModel();
            t.submit = e.label,
            this.options.setToModel("settings", t),
            s.set("submit_background", e.submit_background),
            s.set("submit_color", e.submit_color),
            s.set("submit_position", e.submit_position),
            this.options.setToModel("styles", s.toJSON()),
            this._updateSubmitStyles(s.toJSON())
        },
        _updateStyles: function(e) {
            var t = this.getFromModel("styles")
              , n = i.extend(!0, {}, t, e);
            this.options.setToModel("styles", n),
            s.isUndefined(e["name-position"]) || s.isEqual(t["name-position"], e["name-position"]) ? this._renderStyles() : this._renderFields()
        },
        _renderStyles: function() {
            var e, t = this.getFromModel("styles"), i = {};
            s.each(t, s.bind(function(s, n) {
                switch (n) {
                case "background":
                    "image" === t.background_type ? (this._findElem("fields_edit").css("background", "url(" + this.options.data.form_server + s + ") no-repeat center center").css("background-size", "cover"),
                    e = t["font-color"]) : (this._findElem("fields_edit").css("background", s),
                    e = h.isDarkColor(s) ? "rgba(255, 255, 255, 0.40)" : "rgba(12, 12, 12, 0.40)"),
                    this.$(".amoforms__field__control:not(.amoforms__field__control_header, .amoforms__field__control_terms) input").css("color", e),
                    this.$(".amoforms__field__control:not(.amoforms__field__control_header, .amoforms__field__control_paragraph) textarea").css("color", e),
                    this.$(".amoforms__fields__container__inner_inside .amoforms__field__control:not(.amoforms__field__control_header) textarea").css("color", e),
                    this.$(".amoforms__field__control:not(.amoforms__field__control_header) select option").css("color", e),
                    this.$(".amoforms__field__calendar svg").css("fill", e);
                    break;
                case "font":
                    this._findElem("change_font").css("font-family", s);
                    break;
                case "font-color":
                    this._findElem("change_color").css("color", s);
                    break;
                case "field-form":
                    this._findElem("field_form").css("border-radius", "rounded" === s ? "5px" : "0px");
                    break;
                case "form-paddings":
                    "yes" === s ? (i.editor = "14px 0 28px",
                    this._findElem("submit_button").css("max-width", "337px"),
                    this._findElem("fields_edit").removeClass("amoforms__fields__editor-withoutborders").addClass("amoforms__fields__editor-withborders"),
                    this._findElem("handler").removeClass("amoforms__fields__container__handler-withoutborders")) : (i.editor = "14px 0 28px",
                    this._findElem("fields_edit").removeClass("amoforms__fields__editor-withborders").addClass("amoforms__fields__editor-withoutborders"),
                    this._findElem("handler").addClass("amoforms__fields__container__handler-withoutborders"),
                    this._findElem("submit_button").css("max-width", "388px")),
                    this._findElem("fields_edit").css("padding", i.editor);
                    break;
                case "name-position":
                    "top" === s ? (this._findElem("name_position").removeClass("amoforms__fields__container__inner_inside").addClass("amoforms__fields__container__inner_above"),
                    this._findElem("handler").removeClass("amoforms__fields__container__handler__inner_inside").addClass("amoforms__fields__container__handler__inner_above")) : "inside" === s ? (this._findElem("name_position").removeClass("amoforms__fields__container__inner_above").addClass("amoforms__fields__container__inner_inside"),
                    this._findElem("handler").removeClass("amoforms__fields__container__handler__inner_above").addClass("amoforms__fields__container__handler__inner_inside")) : (this._findElem("name_position").removeClass("amoforms__fields__container__inner_inside").removeClass("amoforms__fields__container__inner_above"),
                    this._findElem("handler").removeClass("amoforms__fields__container__handler__inner_inside").removeClass("amoforms__fields__container__handler__inner_above"))
                }
            }, this)),
            this._updateSubmitStyles(),
            this._autosizeFields()
        },
        _updateSubmitStyles: function(e) {
            e = e || this.getFromModel("styles"),
            s.each(e, s.bind(function(e, t) {
                switch (t) {
                case "submit_background":
                    this._findElem("submit_button_wrapper").css("background", e),
                    this.$('[data-type="submit_background"] .color').css("background", e);
                    break;
                case "submit_color":
                    this._findElem("submit_button").css("color", e),
                    this.$('[data-type="submit_color"] .color').css("background", e);
                    break;
                case "submit_position":
                    this.submit._findElem("submit_btn_wrap").css("text-align", e),
                    this.submit.checkPositionLabel(e)
                }
            }, this)),
            this.submit.initAutosize()
        },
        _renderFields: function(e) {
            e ? e.render() : s.each(this.fields, function(e) {
                e.options.name_position = this._getStyles()["name-position"],
                e.render()
            }, this),
            this._renderStyles()
        },
        _autosizeFields: function() {
            s.each(this.fields, function(e) {
                e.initAutosize()
            }, this)
        },
        _selectAll: function(e) {
            65 === e.keyCode && (e.ctrlKey || e.metaKey) && e.target.select()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/settings_tab_view", ["require", "jquery", "underscore", "twig", "lib/core/view", "lib/interface/fast_tags", "lib/components/base/modal", "lib/interface/card/controls/users_select", "lib/common/fn", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("lib/interface/fast_tags"), a = e("lib/components/base/modal"), l = e("lib/interface/card/controls/users_select"), c = e("lib/common/fn"), d = e("lib/core/users");
    return t = o.extend({
        events: {
            "click #amoforms_dop_setting-responseuser": "selectResponse",
            "click #add_tags": "addTags",
            "click .amoforms__tab-setting-checkbox": "onClickChangeColorText",
            "click .amoforms-dop-settings-info-link": "showTutorial"
        },
        className: "amoforms__tab-settings",
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            this.render()
        },
        render: function() {
            var e = this._prepareParams();
            this.$el.html(this._render(e))
        },
        _render: function(e) {
            return n({
                ref: "/tmpl/digital_pipeline/forms/settings_tab.twig"
            }).render(e)
        },
        selectResponse: function(e) {
            var t = i(e.currentTarget)
              , n = +t.find('input[name="response_user_id"]').val()
              , o = s.pick(d.get(), n)
              , r = this;
            new l({
                el: t,
                $container: r.$el.closest(".modal-scroller"),
                id: "amoforms_dop_setting-responseuser",
                input_name: "response_user_id",
                class_name: "amoforms_settings__users-select",
                suggest_class_name: "users-select-suggest_amoforms",
                select_one: !0,
                no_absolute_positioning: !0,
                existing_items: o,
                onRenderSuggest: function() {
                    var e = this.el.getBoundingClientRect();
                    this.$list.css({
                        zIndex: 200,
                        top: e.top + r.$el.closest(".modal-scroller").scrollTop() + this.el.offsetHeight + 5,
                        left: e.left - 65 + 10
                    })
                }
            })
        },
        addTags: function(e) {
            var t = i(e.currentTarget)
              , n = i.makeArray(t.find('.js-multisuggest-item:not([data-id="add_tag"])').map(function() {
                return {
                    id: parseInt(i(this).attr("data-id")),
                    title: c.escapeHTML(i.trim(i(this).text()))
                }
            }))
              , o = this;
            t.hasClass("tags-manage") || (new r({
                $el: t,
                $input_container: t,
                $container: o.$el.closest(".modal-scroller"),
                tags: n,
                entity: "amoforms",
                replace: !0,
                items_template: "/tmpl/cards/common/fast_tags.twig",
                no_absolute_positioning: !0,
                onSetPositions: function() {
                    var e = this.el.getBoundingClientRect();
                    this.$list.addClass("amoforms__fast-tags-suggest").css({
                        zIndex: 200,
                        top: e.top + o.$el.closest(".modal-scroller").scrollTop() + this.el.offsetHeight + 5,
                        left: e.left - 65 + 7
                    })
                },
                onInit: function() {
                    this.setPositions()
                },
                onRenderItemsParams: function() {
                    return {
                        can_add: !0
                    }
                },
                onSaveSuccess: function(e) {
                    var t = {};
                    s.each(e, function(e) {
                        t[e.id] = {
                            id: e.id,
                            title: e.title || e.name
                        }
                    }),
                    o.options.setToModel("tags", t)
                }
            }),
            e.stopPropagation())
        },
        onClickChangeColorText: function(e) {
            var t = i(e.target);
            t.parent().next().toggleClass("amoforms__text-unchecked")
        },
        _prepareParams: function() {
            var e = i.extend(!0, {}, this.options.settings);
            return e.name = this.options.getFromModel("name"),
            e.has_pipelines = !0,
            e.items = this.options.response.pipelines,
            e.tags = this.options.getFromModel("tags"),
            e.managers = {
                items: d.get(),
                selected: this.options.getFromModel("response_user_id")
            },
            e
        },
        showTutorial: function() {
            this.tutorial_modal = new a({
                class_name: "modal-list modal-list-amoforms_inner_modal",
                init: n._preload(["/tmpl/digital_pipeline/forms/tutorial_modal.twig"], function(e) {
                    this.modal_body = e,
                    this.modal_body.html(n({
                        ref: "/tmpl/digital_pipeline/forms/tutorial_modal.twig"
                    }).render({})).trigger("modal:centrify")
                })
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/placing_tab_view", ["require", "jquery", "underscore", "twig", "lib/core/view", "clipboard", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/core/view"), r = e("clipboard"), a = e("lib/common/fn"), l = 1500;
    return t = o.extend({
        selectors: {
            code: ".amoforms__code",
            success: ".js-copy-success",
            code_link: ".js-form-code-link",
            page_link: ".js-form-page-link",
            wp_code_link: ".js-form-wp-code-link",
            form_code: ".amoforms__form_code",
            wp_code: ".amoforms__wp_form_code",
            page_code: ".amoforms__page_code"
        },
        initialize: function(e) {
            this.options = e || {},
            o.prototype.initialize.apply(this, arguments),
            this.render(),
            this.initClipboard()
        },
        destroy: function() {
            this._clipboards.length && s.invoke(this._clipboards, "destroy"),
            o.prototype.destroy.apply(this, arguments)
        },
        render: function() {
            this.$el.html(this._render(this.options))
        },
        _render: function(e) {
            return n({
                ref: "/tmpl/digital_pipeline/forms/placing_tab.twig"
            }).render(e)
        },
        initClipboard: function() {
            this._clipboards = [this._initFormClipboard(), this._initPageLink(), this._initWPClipboard()],
            s.each(this._clipboards, this._setClipboardEvents, this)
        },
        _setClipboardEvents: function(e) {
            e.on("success", s.bind(function(e) {
                var t = i(e.trigger).parent().next(this.selectors.code)
                  , n = t.find(this.selectors.success);
                e.clearSelection(),
                n.removeClass("hidden"),
                s.delay(function() {
                    n.addClass("hidden")
                }, l)
            }, this)),
            e.on("error", function() {
                a.log({
                    msg: "Copying to clipboard failed"
                })
            })
        },
        _initFormClipboard: function() {
            return new r(this.$(this.selectors.code_link).get(0),{
                target: s.bind(function() {
                    return this.$(this.selectors.form_code).get(0)
                }, this)
            })
        },
        _initWPClipboard: function() {
            return new r(this.$(this.selectors.wp_code_link).get(0),{
                target: s.bind(function() {
                    return this.$(this.selectors.wp_code).get(0)
                }, this)
            })
        },
        _initPageLink: function() {
            return new r(this.$(this.selectors.page_link).get(0),{
                target: s.bind(function() {
                    return this.$(this.selectors.page_code).get(0)
                }, this)
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/forms/amoforms", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/core/view", "lib/components/base/modal", "lib/interface/settings/digital_pipeline/forms/amoforms_form_view", "lib/interface/settings/digital_pipeline/forms/amoforms_model", "lib/components/base/confirm", "lib/interface/settings/digital_pipeline/forms/constructor_view", "lib/interface/settings/digital_pipeline/forms/settings_tab_view", "lib/interface/settings/digital_pipeline/forms/placing_tab_view"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = e("lib/core/view"), a = e("lib/components/base/modal"), l = e("lib/interface/settings/digital_pipeline/forms/amoforms_form_view"), c = e("lib/interface/settings/digital_pipeline/forms/amoforms_model"), d = e("lib/components/base/confirm"), u = e("lib/interface/settings/digital_pipeline/forms/constructor_view"), h = e("lib/interface/settings/digital_pipeline/forms/settings_tab_view"), _ = e("lib/interface/settings/digital_pipeline/forms/placing_tab_view");
    return t = r.extend({
        events: s.extend({
            "click #save_cf_settings.button-input_blue": "saveForm",
            "click .js-form-delete": "deleteForm",
            "click .js-save-to-preview": "saveToPreview"
        }, r.prototype.events || {}),
        _selectors: function() {
            return {
                tabs: ".amoforms__tabs",
                preview_blocked: "#amoforms__preview_blocked",
                save_cf: "#save_cf_settings",
                preview_item: ".amoforms__toggler-item-preview",
                amoforms__preview: ".amoforms__preview",
                "delete": ".amoforms__delete-form"
            }
        },
        template_name: "edit_form.twig",
        initialize: function(e) {
            r.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.has_change = !1,
            this.force_close = !1,
            this.temp_hash = "",
            this.initPreventConfig(),
            this.updateForms = s.isFunction(e.updateForms) ? e.updateForms : s.noop,
            this.form = this._addComponent(l, {
                model: c,
                form_id: e.form_id,
                id: e.form_id
            }),
            this.form.model.fetch({
                type: "GET"
            }).done(s.bind(function() {
                this.initModal()
            }, this))
        },
        initPreventConfig: function() {
            AMOCRM.router.registerPreventConfig({
                message: o.i18n("Save changes?"),
                accept_text: o.i18n("Save"),
                decline_text: o.i18n("Exit without save"),
                accept: s.bind(function(e) {
                    this.saveForm(s.bind(function() {
                        this.has_change = !1,
                        this.modal.destroy(),
                        e()
                    }, this)).done(s.bind(function() {
                        this.showMessage("Done", "success")
                    }, this)).fail(s.bind(function() {
                        this.showMessage("Fail", "error")
                    }, this))
                }, this),
                decline: s.bind(function(e) {
                    this.form.revert(),
                    this.updateTempHash(!0),
                    this.force_close = !0,
                    this.modal.destroy(),
                    e()
                }, this)
            }, "wp_amoform")
        },
        _render: function() {
            return n({
                ref: "/tmpl/digital_pipeline/forms/" + this.template_name
            }).render({
                id: this.form.model.response.form.id,
                hash: this.form.model.response.form.hash,
                language: this.form.model.response.form.settings.language,
                is_new: this.form.model.isNew(),
                disable_delete: this.options.disable_delete
            })
        },
        initModal: function() {
            this.modal = new a({
                class_name: "modal-wp-amoforms modal-list",
                init: n._preload(["/tmpl/digital_pipeline/forms/" + this.template_name], s.bind(function(e) {
                    e.trigger("modal:loaded").html(this._render()),
                    this.setElement(e),
                    this.form.setElement(this.$el),
                    this.initComponents(),
                    e.trigger("modal:centrify")
                }, this)),
                destroy: s.bind(function() {
                    return this.form.model.hasChanges() || this.form.model.isNew() && !this.force_close ? (this.confModal = new d({
                        class_name: "modal-list modal-leave-confirm",
                        decline_text: o.i18n("Exit without save"),
                        accept_text: o.i18n("Save"),
                        button_class: "button-input_blue",
                        text: o.i18n("Save changes?"),
                        accept: s.bind(function() {
                            this.saveForm(s.bind(function() {
                                this.confModal.destroy(),
                                this.modal.destroy()
                            }, this))
                        }, this),
                        destroy: s.bind(function() {
                            this.confModal.accepted === !1 && (this.updateTempHash(!0),
                            this.confModal.modal.hide(),
                            this.form.revert(),
                            this.force_close = !0,
                            this.modal.destroy())
                        }, this)
                    }),
                    !1) : (this.destroy(),
                    AMOCRM.router.preventPageChange(!1, "wp_amoform"),
                    AMOCRM.router.removePreventConfig("wp_amoform"),
                    !0)
                }, this)
            })
        },
        initComponents: function() {
            this.initConstructor(),
            this.initSettingsTabView(),
            this.form.initBaseModelFromForm(),
            this.form.model.isNew() ? AMOCRM.router.preventPageChange(!0, "wp_amoform") : (this.initPlacingTabView(),
            this.watchForm())
        },
        initSettingsTabView: function() {
            this.settings_edit = this._addComponent(h, {
                response: i.extend(!0, {}, this.form.model.response),
                settings: this.getFromModel("settings"),
                setToModel: s.bind(this.setToModel, this),
                getFromModel: s.bind(this.getFromModel, this)
            }),
            this._findElem("tabs").append(this.settings_edit.$el)
        },
        initPlacingTabView: function() {
            this.placing = this._addComponent(_, {
                code: this.form.model.response.code,
                wp_code: this.form.model.response.wp_code,
                page_code: this.form.model.response.page
            }),
            this._findElem("tabs").append(this.placing.el),
            this._findElem("preview_blocked").attr("id", "amoforms__preview"),
            this._findElem("preview_item").removeClass("js-save-to-preview")
        },
        initConstructor: function() {
            var e = i.extend(!0, {}, this.form.model.response);
            this.constructor_edit = this._addComponent(u, {
                data: e,
                setToModel: s.bind(this.setToModel, this),
                getFromModel: s.bind(this.getFromModel, this),
                getFormHash: s.bind(this.getFormHash, this)
            }),
            this._findElem("tabs").append(this.constructor_edit.$el),
            this.constructor_edit.initSidebar(),
            this.constructor_edit._renderFields()
        },
        watchForm: function() {
            this.listenTo(this.form.model, "has_changes", s.bind(this._watchForm, this, !0)),
            this.listenTo(this.form.model, "has_reverted", s.bind(this._watchForm, this, !1))
        },
        _watchForm: function(e) {
            AMOCRM.router.preventPageChange(e, "wp_amoform"),
            this._findElem("save_cf").trigger("button:save:" + (e ? "enable" : "disable"))
        },
        saveForm: function(e) {
            var t = this.form.model.isNew();
            return e = e || s.noop(),
            this._findElem("save_cf").trigger("button:save:start"),
            this.form.model.save().done(s.bind(function() {
                this.setChangesDefault(),
                t && (this.updateTempHash(),
                this._findElem("delete").removeClass("h-hidden"),
                this.initPlacingTabView(),
                this.watchForm()),
                this.updateForms(!0, this.form.model)
            }, this)).fail(s.bind(function() {
                this._findElem("save_cf").trigger("button:save:error")
            }, this)).always(s.bind(function() {
                s.isFunction(e) && e()
            }, this))
        },
        getFromModel: function(e) {
            return this.form.model.get(e)
        },
        getFormHash: function() {
            var e = this.form.model.get("hash");
            return e || (this.temp_hash || (this.temp_hash = this.form.model.response.temp_hash),
            e = this.temp_hash),
            e
        },
        updateTempHash: function(e) {
            if (!s.isEmpty(this.temp_hash)) {
                var t, n = {
                    temp_hash: this.temp_hash
                };
                e ? t = "/ajax/v1/forms/clear_images" : (t = "/ajax/v1/forms/update_hash",
                n.hash = this.form.model.get("hash")),
                i.ajax({
                    url: t,
                    method: "POST",
                    data: JSON.stringify({
                        request: n
                    }),
                    dataType: "json",
                    contentType: "application/json"
                })
            }
        },
        setToModel: function(e, t) {
            this.form.model.set(e, t),
            this.form.checkChanges()
        },
        setChangesDefault: function() {
            this.has_change = !0,
            this._findElem("save_cf").trigger("button:saved"),
            this.form.model.updateDefaults(),
            AMOCRM.router.preventPageChange(!1, "wp_amoform")
        },
        deleteForm: function() {
            var e = this;
            this.form.revert(),
            this.confirm_delete = new d({
                class_name: "modal-list",
                text: o.i18n("Are you sure you want to delete this form?"),
                message: [{
                    text: o.i18n("Note that when you delete the form, you will also need to remove it from all your web site, which it has been installed on")
                }],
                accept: function() {
                    e.form.model.destroy({
                        data: JSON.stringify({
                            request: {
                                id: e.form.model.id
                            }
                        }),
                        dataType: "json",
                        contentType: "application/json",
                        url: e.form.model.url("delete"),
                        type: "POST"
                    }).done(function(t) {
                        t = o.cleanResponse(t),
                        t && t.forms && t.forms["delete"] ? (e.force_close = !0,
                        e.showMessage(o.i18n("The form has been successfully deleted"), "success"),
                        e.confirm_delete.destroy(),
                        e.updateForms(t.forms["delete"], e.form.model, !0)) : e.showMessage(null, "error"),
                        e.modal.destroy()
                    }).fail(function() {
                        e.showMessage(null, "error"),
                        e.updateForms(!1),
                        e.confirm_delete.destroy()
                    })
                }
            })
        },
        showMessage: function(e, t) {
            switch (t) {
            case "success":
                return (new a).showSuccess(e);
            case "error":
                return (new a).showError(e, !1)
            }
        },
        destroy: function() {
            s.isFunction(this.options.onDestroy) && this.options.onDestroy(),
            r.prototype.destroy.apply(this, arguments)
        },
        saveToPreview: function() {
            var e = this;
            this.save_to_peview = new d({
                class_name: "modal-list",
                text: o.i18n("Save changes?"),
                message: [{
                    text: o.i18n("To go to the location settings save the form")
                }],
                decline_text: o.i18n("Cancel"),
                accept_text: o.i18n("Save"),
                accept: function() {
                    e.saveForm().then(function() {
                        e.save_to_peview.destroy(),
                        e._findElem("amoforms__preview").prop("checked", !0)
                    })
                }
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/form", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/components/amoforms/loader", "lib/interface/settings/digital_pipeline/forms/amoforms", "lib/interface/settings/digital_pipeline/helper", "lib/interface/settings/digital_pipeline/source_item"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("twig"),
    e("lib/common/fn")), o = e("lib/components/amoforms/loader"), r = e("lib/interface/settings/digital_pipeline/forms/amoforms"), a = e("lib/interface/settings/digital_pipeline/helper"), l = e("lib/interface/settings/digital_pipeline/source_item"), c = 2;
    return t = l.extend({
        events: {
            "click .js-wp-amoforms": "initAmoforms",
            "click .js-amoforms": "initOldAmoForms"
        },
        initialize: function(e) {
            l.prototype.initialize.apply(this, arguments),
            this.getData()
        },
        _selectors: function() {
            return {
                connect_link_short: ".digital-pipeline__source-connect-link_short"
            }
        },
        getData: function(e) {
            var t = []
              , o = {}
              , r = i('<span class="spinner-icon spinner-icon-abs-center">')
              , a = this;
            this._findElem("connect_link_short").append(r),
            this.getFormData().done(function(i) {
                i = n.cleanResponse(i),
                r.remove(),
                i && i.forms && (t = s.map(i.forms.list, function(e) {
                    return {
                        id: e.form_id,
                        name: e.name,
                        link: e.hash,
                        version: e.version
                    }
                }),
                o = s.extend({}, {
                    source: {
                        id: a.params.id,
                        type: "form",
                        active: !0,
                        elements: t
                    }
                }),
                a.params = o.source,
                a.rerender(o),
                a.trigger("params:ready", {
                    name: "enable_forms",
                    option: "params",
                    force: e
                }))
            }).fail(function() {
                r.remove(),
                a.trigger("params:fail", {
                    name: "enable_forms",
                    option: "params",
                    force: e
                })
            })
        },
        getFormData: function() {
            var e = [];
            return s.each(this.params.elements, function(t) {
                e.push(t.code)
            }),
            i.ajax({
                method: "get",
                url: "/ajax/v1/forms/list"
            })
        },
        initAmoforms: function(e) {
            var t = i(e.currentTarget).attr("data-form-id");
            e.preventDefault(),
            this._initAmoforms(t)
        },
        _initAmoforms: function(e) {
            var t = this;
            this._amoforms || (this._amoforms = this._addComponent(r, {
                entity: AMOCRM.data.current_entity,
                form_id: e,
                elements: t.params.elements,
                onDestroy: s.bind(this.destroyAmoforms, this),
                updateForms: s.bind(function(e, i, n) {
                    var o = t.params.elements
                      , r = {
                        link: i.get("hash"),
                        name: i.get("name"),
                        id: i.get("id"),
                        version: c
                    };
                    e ? n ? t.params.elements = o.filter(function(e) {
                        return e.id != r.id
                    }) : s.findWhere(o, {
                        id: r.id
                    }) ? s.extend(s.findWhere(o, {
                        id: r.id
                    }), r) : o.push(r) : t.params.elements = [],
                    this.rerender({
                        source: t.params
                    })
                }, this)
            }))
        },
        initOldAmoForms: function(e) {
            var t = i(e.currentTarget).attr("data-form-id");
            e.preventDefault(),
            this._amoforms || (this._amoforms = new o({
                mode: "edit",
                form_id: t,
                entity: AMOCRM.data.current_entity,
                onDestroy: s.bind(this.destroyAmoforms, this),
                onConvert: s.bind(this.migrateToNew, this),
                onOpenNew: s.bind(this.openNewFromOld, this)
            }))
        },
        destroyAmoforms: function() {
            this._amoforms = null
        },
        migrateToNew: function(e) {
            this.convertForm(e)
        },
        openNewFromOld: function(e) {
            this._amoforms && this._amoforms.modal && this._amoforms.modal.destroy(),
            this._initAmoforms(e)
        },
        updateFormsList: function() {
            this.getData(!0)
        },
        convertForm: function(e) {
            return i.ajax({
                url: "/ajax/v1/forms/convert",
                dataType: "json",
                data: {
                    request: {
                        id: e
                    }
                },
                type: "POST"
            }).then(s.bind(function(t) {
                t = n.cleanResponse(t),
                t && t.forms.convert === e ? (this.updateFormsList(),
                this.openNewFromOld(e)) : a.errorModal()
            }, this))
        }
    })
}),
define("lib/interface/settings/digital_pipeline/fb_forms/manager", ["require", "jquery", "underscore", "lib/core/view", "twig", "lib/components/base/modal", "lib/components/base/form", "lib/interface/fast_tags", "lib/interface/users_select", "lib/common/fn", "lib/interface/settings/digital_pipeline/helper", "lib/components/base/confirm", "lib/core/users"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/core/view"), o = e("twig"), r = e("lib/components/base/modal"), a = e("lib/components/base/form"), l = e("lib/interface/fast_tags"), c = e("lib/interface/users_select"), d = e("lib/common/fn"), u = e("lib/interface/settings/digital_pipeline/helper"), h = e("lib/components/base/confirm"), _ = e("lib/core/users");
    return t = n.extend({
        _template: "/tmpl/digital_pipeline/fb_forms/modal.twig",
        events: {
            'change input[name="fb_pages_select"]': "loadForm",
            "click .js-fbform-next:not(.button-input-disabled)": "editModal",
            "click .js-fbform-save:not(.button-input-disabled)": "saveForm",
            "click .js-fbforms-delete": "deleteForm",
            "click #fb-forms_dop_setting-responseuser": "selectResponse",
            "click #add_tags": "addTags",
            "change .pipeline-select__pipeline-input": "watchStatus",
            "change .fb-forms__tab-setting-checkbox": "watchTask",
            "click .button-cancel:not(.js-fbforms-delete)": "destroy"
        },
        _selectors: function() {
            return {
                fb_forms_select: ".fb_forms_select",
                fb_pages_select: ".fb_pages_select",
                button_next: ".js-fbform-next",
                form_save: ".js-fbform-save",
                form_save_next: ".js-modal-accept",
                form_delete: ".fbforms-delete",
                controls_wrapper: ".fb-forms__controls-wrapper"
            }
        },
        initialize: function(e) {
            e = e || {},
            n.prototype.initialize.call(this, arguments),
            this.options = e,
            this.cached_forms = {},
            this.current_form = {},
            this.force_close = !1,
            this.has_changes = !1,
            this.token = u.startToken(),
            "create" === e.mode ? this.createModal() : this.editModal(),
            this._$document.on("page:changed", s.bind(this.destroy, this))
        },
        render: function() {
            this.$el.html(o({
                ref: this._template
            }).render(this.prepareRenderData())),
            this.$el.trigger("modal:loaded").trigger("modal:centrify")
        },
        destroy: function() {
            return this.has_changes ? (this.cancelFormModal(),
            !1) : (this.modal && (this.modal.destroy(),
            delete this.modal),
            void n.prototype.destroy.call(this, arguments))
        },
        cancelFormModal: function() {
            var e = this
              , t = new h({
                text: AMOCRM.lang.confirm_close_modal,
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_exit,
                button_class: "button-input_blue",
                accept: function() {
                    e.force_close = !0,
                    e.has_changes = !1,
                    e.saveForm(),
                    t.destroy(),
                    e._destroy_from_modal = !0,
                    e.modal.destroy()
                },
                destroy: function() {
                    e.force_close = !0,
                    e._destroy_from_modal = "undefined" != typeof this.accepted,
                    e.has_changes = !1,
                    e._destroy_from_modal || (e.has_changes = !0,
                    e._confirmed_once = !0),
                    t.modal.$modal.remove(),
                    delete t.modal,
                    e.modal.destroy()
                }
            })
        },
        createModal: function() {
            return this.modal = new r({
                class_name: "modal-list modal-list-fb-forms",
                init: o._preload([this._template], s.bind(this._createModal, this)),
                destroy: s.bind(function() {
                    var e = "boolean" == typeof this._destroy_from_modal ? this._destroy_from_modal : !0;
                    return this.has_changes && !this._confirmed_once ? (this.cancelFormModal(),
                    !1) : (this._confirmed_once && (this._confirmed_once = !1),
                    e)
                }, this)
            }),
            this
        },
        _createModal: function(e) {
            this.setElement(e),
            this.render(),
            this.initForm()
        },
        editForm: function(e, t) {
            var n, a, l, c = this, d = s.keys(e[0].response.settings)[0], u = e[0].response.settings[d], h = "edit" === this.options.mode, p = {
                items: _.get(!1),
                selected: u.settings.settings.responsible_user_id || _.current("id")
            }, m = c.options.template_params, f = [{
                id: "unsorted",
                name: AMOCRM.lang.Unsorted,
                unsorted: !0
            }];
            this.current_form = i.extend({}, u),
            a = this.current_form.settings.settings.fb_form_names,
            n = this.current_form.settings.fields,
            s.forEach(a, function(e) {
                e.selected = n[e.key]
            }),
            m.items = s.reject(m.items, {
                id: "unsorted"
            }),
            m.items = s.union(f, s.toArray(m.items)),
            l = s.isUndefined(u.settings.settings.pipeline_id) || "unsorted" === u.settings.settings.pipeline_id,
            u.settings.settings = Object.assign(u.settings.settings, {
                task_creation_disabled: l,
                hidden_row: l
            }),
            u.settings.settings.create_task = u.settings.settings.task_creation_disabled ? "" : u.settings.settings.create_task,
            this.modal = new r({
                class_name: "modal-list modal-list-fb-forms",
                init: o._preload([this._template], function(e) {
                    this.modal_body = e,
                    this.modal_body.html(o({
                        ref: "interface/digital_pipeline/fb_forms/edit_modal.twig"
                    }).render({
                        editable: h,
                        current_form: u,
                        questions: a,
                        custom_fields: t,
                        form_params: u.settings.settings,
                        selected_value: n,
                        selected_pipeline: u.settings.settings.pipeline_id,
                        selected: u.settings.settings.status_id,
                        managers: p,
                        template_params: c.options.template_params
                    })).trigger("modal:centrify"),
                    c.setElement(e),
                    c.initForm({
                        current_form: u
                    })
                }),
                destroy: s.bind(function() {
                    var e = "boolean" == typeof this._destroy_from_modal ? this._destroy_from_modal : !0;
                    return this.has_changes && !this._confirmed_once ? (this.cancelFormModal(),
                    !1) : (this._confirmed_once && (this._confirmed_once = !1),
                    delete this._destroy_from_modal,
                    e)
                }, this)
            })
        },
        initForm: function(e) {
            var t = this
              , i = [];
            t.form = t._addComponent(a.View, {
                el: this.$el
            }),
            s.isUndefined(e) || s.isUndefined(e.current_form.settings.settings.tags) || s.isNull(e.current_form.settings.settings.tags) || (i = e.current_form.settings.settings.tags.map(function(e) {
                return s.isUndefined(e.frequency) || (e = {
                    id: e.id,
                    raw_title: e.name,
                    title: e.name
                }),
                e.id = parseInt(e.id),
                e
            })),
            t.form.model.set({
                all_tags: i,
                create_task: "" === t.form.model.get("create_task") ? "N" : "Y"
            }),
            t.form.model.updateDefaults(),
            t.form.model.on("has_changes has_reverted", s.bind(t.checkForm, this))
        },
        watchTask: function(e) {
            e.currentTarget.value = "N",
            e.currentTarget.checked && (e.currentTarget.value = "Y")
        },
        watchStatus: function(e) {
            var t = i(".fb-forms__tab-setting-checkbox")
              , s = i(".retractable");
            t.prop("disabled", "unsorted" === e.currentTarget.value),
            "unsorted" === e.currentTarget.value ? (this.form.model.set({
                create_task: "N"
            }),
            t.prop("checked", !1),
            s.hide()) : s.show()
        },
        checkForm: function() {
            var e = this;
            if (this.form.model.has("all_tags")) {
                var t = this.form.model.get("all_tags");
                t.sort(function(e, t) {
                    return e.id > t.id ? 1 : t.id > e.id ? -1 : 0
                }),
                this.form.model.set({
                    all_tags: t
                })
            }
            "" === this.form.model.get("create_task") && this.form.model.set({
                create_task: "N"
            }),
            this.form.hasChanges() ? (e._findElem("form_save_next").trigger("button:save:enable"),
            e.has_changes = !0) : this.form.model.has("fb_forms_select") ? "000" === this.form.model.get("fb_forms_select") ? (e._findElem("form_save_next").trigger("button:save:disable"),
            e.has_changes = !1) : (e._findElem("form_save_next").trigger("button:save:enable"),
            e.has_changes = !0) : (e._findElem("form_save_next").trigger("button:save:disable"),
            e.has_changes = !1)
        },
        editModal: function() {
            var e = this;
            if ("create" === this.options.mode) {
                var t = this.$el.find('input[name="fb_pages_select"]').val()
                  , n = this.$el.find('input[name="fb_forms_select"]').val()
                  , r = s.findWhere(this.cached_forms[t], {
                    id: n
                })
                  , a = e.options.template_params
                  , l = [{
                    id: "unsorted",
                    name: AMOCRM.lang.Unsorted,
                    unsorted: !0
                }]
                  , c = {
                    items: _.get(!1),
                    selected: _.current("id")
                }
                  , d = {
                    task_creation_disabled: !0,
                    hidden_row: !0
                };
                a.items = s.reject(a.items, {
                    id: "unsorted"
                }),
                s.each(a.items, function(e) {
                    e.statuses = s.reject(e.statuses, function(e) {
                        return "142" === e.id || "143" === e.id
                    })
                }),
                a.items = s.union(l, s.toArray(a.items)),
                this.form.destroy(),
                this.getCustomFields().then(function(i) {
                    e.$el.html(o({
                        ref: "interface/digital_pipeline/fb_forms/edit_modal.twig"
                    }).render({
                        page_id: t,
                        form_id: n,
                        form_params: d,
                        current_form: r,
                        questions: r.questions,
                        custom_fields: i,
                        managers: c,
                        template_params: e.options.template_params
                    })),
                    e.initForm()
                }),
                this.options.current_form = r
            } else
                "edit" === this.options.mode && i.when(this.getEditForm(), this.getCustomFields()).then(function(t, i) {
                    e.editForm(t, i)
                })
        },
        getEditForm: function() {
            var e = this
              , t = this.options.form_id;
            return i.ajax({
                url: "/api/forms/facebook/settings",
                type: "GET",
                beforeSend: function(t) {
                    t.setRequestHeader("X-Auth-Token", e.token)
                },
                data: {
                    external_id: t
                }
            })
        },
        saveForm: function() {
            var e, t = this, n = _.current(), o = this.$el.find('input[name="fb_form_name"]'), r = o.data("form-id"), a = {}, l = this.form.model;
            if (this.options.current_form) {
                var c = this.options.current_form.questions;
                e = s.reduce(c, function(e, t) {
                    return e[t.key] = {
                        key: t.key,
                        label: t.label
                    },
                    e
                }, {})
            } else
                e = this.current_form.settings.settings.fb_form_names;
            a.fields = s.omit(this.form.model.toJSON(), "tags", "all_tags", "tags_enabled", "responsible_user_id", "create_task", "pipeline_id", "status_id"),
            l.attributes.create_task = s.isEmpty(l.attributes.create_task) || "N" === l.attributes.create_task ? "N" : "Y",
            a.settings = {
                fb_form_id: r,
                active: !0,
                user_id: n.id,
                fb_form_names: e,
                tags: l.attributes.all_tags,
                responsible_user_id: l.attributes.responsible_user_id,
                create_task: l.attributes.create_task,
                pipeline_id: l.attributes.pipeline_id,
                status_id: l.attributes.status_id
            },
            this._findElem("form_save").trigger("button:save:start"),
            i.ajax({
                url: "/api/forms/facebook/settings",
                type: "POST",
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", t.token)
                },
                dataType: "json",
                data: a
            }).done(function(e) {
                var i, n, o = e.response.result || {
                    save_result: null
                }, r = o.settings.registration_data;
                s.isEmpty(r) || t.registerWebhook(r),
                n = 1 === o.active,
                i = {
                    id: o.external_id,
                    name: o.name
                },
                t.options.updateForms(n, i),
                t.has_changes = !1,
                t._destroy_from_modal = !0,
                t.modal.destroy()
            }).fail(function(e, i, s) {
                t._findElem("form_save").trigger("button:load:stop"),
                t.showMessage(e.responseJSON.response.error, "error")
            })
        },
        deleteForm: function() {
            var e = this
              , t = this.$el.find('input[name="fb_form_name"]')
              , n = t.data("form-inner-id")
              , o = t.data("form-id");
            e.confirm_delete = new h({
                class_name: "modal-list",
                text: AMOCRM.lang.page.fbform.form_delete_confirm,
                message: [{
                    text: ""
                }],
                accept: function() {
                    this.$modal_body.find(".js-modal-accept").trigger("button:load:start"),
                    i.ajax({
                        url: "/api/forms/facebook/delete",
                        data: {
                            id: n
                        },
                        beforeSend: function(t) {
                            t.setRequestHeader("X-Auth-Token", e.token)
                        },
                        type: "POST"
                    }).then(s.bind(function(t) {
                        var i = t.response
                          , s = i.result
                          , n = i.total_form_count;
                        e.has_changes = !1,
                        0 !== n ? (e.confirm_delete.destroy(),
                        e._destroy_from_modal = !0,
                        e.modal.destroy(),
                        e.options.updateForms(s, o, !0),
                        e.showMessage(AMOCRM.lang.page.fbform.form_delete_success, "success")) : (e.confirm_delete.destroy(),
                        e._destroy_from_modal = !0,
                        e.modal.destroy(),
                        e.options.updateForms(!1),
                        e.showMessage(AMOCRM.lang.page.fbform.form_delete_success, "success"))
                    }, this)).fail(function() {
                        e.confirm_delete.destroy(),
                        e.showMessage(data, "error")
                    })
                },
                destroy: function() {
                    e._destroy_from_modal = !1,
                    e._confirmed_once = !0,
                    e.modal.destroy()
                }
            })
        },
        prepareRenderData: function() {
            var e = this.options.pages;
            return s.each(e, function(e) {
                e.option = e.name
            }),
            s.findWhere(e, {
                id: 0
            }) ? e[0] = {
                id: 0,
                option: AMOCRM.lang.page.fbform.form_page
            } : e.unshift({
                id: 0,
                option: AMOCRM.lang.page.fbform.form_page
            }),
            s.extend({}, this.options)
        },
        loadForm: function(e) {
            var t = i(e.currentTarget)
              , s = t.val()
              , n = t.attr("data-prev-value");
            this._findElem("button_next").trigger("button:save:disable"),
            "0" != s ? this._loadForms(s) : (t.val(n),
            this.$(".control--select--input").trigger("controls:change:visual"))
        },
        _loadForms: function(e) {
            var t = this
              , n = this.options.elements
              , o = i.Deferred();
            return t._findElem("fb_forms_select").removeClass("fbform-input-disable").addClass("fb_forms_select-loading"),
            this.cached_forms[e] ? (o.resolve(this.cached_forms),
            this.renderPageForms(e),
            o.promise()) : i.ajax({
                url: "/api/forms/facebook/list",
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", t.token)
                },
                type: "GET",
                dataType: "json",
                data: {
                    page_id: e
                }
            }).done(s.bind(function(r) {
                var a = r.response.forms;
                a = s.reject(a, function(e) {
                    return s.find(n, function(t) {
                        return t.id === e.id
                    })
                }),
                a.length ? (s.each(a, function(e) {
                    e.option = e.name
                }),
                a.length > 1 && a.unshift.apply(a, [{
                    id: "000",
                    name: AMOCRM.lang.page.fbform.select_form,
                    option: AMOCRM.lang.page.fbform.select_form
                }]),
                this.cached_forms[e] = i.extend(!0, {}, a),
                o.resolve(this.cached_forms),
                this.renderPageForms(e)) : (o.resolve(this.cached_forms),
                this.renderPageForms()),
                t._findElem("fb_forms_select").removeClass("fb_forms_select-loading")
            }, this))
        },
        registerWebhook: function(e) {
            var t = this;
            return i.ajax({
                url: "/api/forms/facebook/register",
                data: e,
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", t.token)
                },
                type: "POST",
                dataType: "json"
            })
        },
        getCustomFields: function() {
            return i.ajax({
                url: "/ajax/settings/custom_fields",
                data: {
                    last_place: "leads"
                },
                type: "POST",
                dataType: "json"
            }).then(s.bind(function(e) {
                var t = e.response.params.fields
                  , i = []
                  , n = [AMOCRM.cf_types.text, AMOCRM.cf_types.url, AMOCRM.cf_types.multitext, AMOCRM.cf_types.textarea, AMOCRM.cf_types.streetaddress]
                  , o = [{
                    id: "000",
                    name: AMOCRM.lang.page.fbform.select,
                    option: AMOCRM.lang.page.fbform.select
                }]
                  , r = [{
                    id: "note",
                    name: AMOCRM.lang.page.fbform.note,
                    option: AMOCRM.lang.page.fbform.note,
                    element_type: 2,
                    sort: 99
                }];
                return t.leads = s.without(t.leads, s.findWhere(t.leads, {
                    id: "budget"
                })),
                t = [s.union(t.leads, r), t.contacts, t.companies],
                s.each(t, function(e) {
                    var t = s.sortBy(e, function(e) {
                        return void 0 === e.sort || e.sort
                    });
                    i.push.apply(i, t)
                }),
                i = s.reject(i, function(e) {
                    return e.disabled
                }),
                i = s.filter(i, function(e) {
                    return s.find(n, function(t) {
                        return e.type_id === t || void 0 === e.type_id
                    })
                }),
                s.each(i, function(e) {
                    switch (e.option = e.name,
                    e.element_type) {
                    case AMOCRM.element_types.contacts:
                        e.option = e.option + " (" + AMOCRM.lang.page.fbform.contact.toLowerCase() + ")";
                        break;
                    case AMOCRM.element_types.leads:
                        e.option = e.option + " (" + AMOCRM.lang.page.fbform.lead.toLowerCase() + ")";
                        break;
                    case AMOCRM.element_types.companies:
                        e.option = e.option + " (" + AMOCRM.lang.page.fbform.company.toLowerCase() + ")"
                    }
                    if (s.findKey(e.enums)) {
                        var t = s.keys(e.enums)[0];
                        e.id = e.enums[t].value + "_" + e.id
                    }
                    e.id = e.id + "_" + e.element_type
                }),
                i = s.union(o, i)
            }, this))
        },
        renderPageForms: function(e) {
            var t = this;
            e ? this._findElem("fb_forms_select").replaceWith(o({
                ref: "interface/digital_pipeline/fb_forms/form_select.twig"
            }).render({
                items: t.cached_forms[e]
            })) : this._findElem("fb_forms_select").replaceWith(o({
                ref: "interface/digital_pipeline/fb_forms/form_select.twig"
            }).render({
                items: [{
                    id: "000",
                    name: AMOCRM.lang.page.fbform.all_forms_added,
                    option: AMOCRM.lang.page.fbform.all_forms_added
                }],
                disabled: !0
            })),
            t.initForm(),
            "000" !== t.form.model.get("fb_forms_select") ? this._findElem("button_next").trigger("button:save:enable") : this._findElem("button_next").trigger("button:save:disable")
        },
        showMessage: function(e, t) {
            var i = new r;
            switch (t) {
            case "success":
                i.showSuccess(e);
                break;
            case "error":
                i.showError(e, !1)
            }
        },
        selectResponse: function(e) {
            var t = i(e.currentTarget)
              , n = +t.find('input[name="responsible_user_id"]').val()
              , o = s.pick(_.get(!1), n)
              , r = this;
            new c({
                el: t,
                $container: r.$el.closest(".modal-scroller"),
                id: "fb-forms_dop_setting-responseuser",
                input_name: "responsible_user_id",
                class_name: "fb-forms_settings__users-select",
                suggest_class_name: "users-select-suggest_fb-forms",
                select_one: !0,
                no_absolute_positioning: !0,
                existing_items: o,
                onRenderSuggest: function() {
                    var e = this.el.getBoundingClientRect();
                    this.$list.css({
                        zIndex: 200,
                        top: e.top + r.$el.closest(".modal-scroller").scrollTop() + this.el.offsetHeight + 5,
                        left: e.left - 65 + 10
                    })
                }
            })
        },
        addTags: function(e) {
            var t = i(e.currentTarget)
              , s = i.makeArray(t.find('.js-multisuggest-item:not([data-id="add_tag"])').map(function() {
                return {
                    id: i(this).attr("data-id"),
                    title: d.escapeHTML(i.trim(i(this).text()))
                }
            }))
              , n = this;
            t.hasClass("tags-manage") || (new l({
                $el: t,
                $input_container: t,
                $container: n.$el.closest(".modal-scroller"),
                id: [n.options.form_id],
                tags: s,
                entity: "amoforms",
                replace: !0,
                items_template: "/tmpl/cards/common/fast_tags.twig",
                no_absolute_positioning: !0,
                onSetPositions: function() {
                    var e = this.el.getBoundingClientRect();
                    this.$list.addClass("amoforms__fast-tags-suggest").css({
                        top: e.top + n.$el.closest(".modal-scroller").scrollTop() + this.el.offsetHeight + 5,
                        left: e.left - 59
                    })
                },
                onInit: function() {
                    this.setPositions()
                },
                onRenderItemsParams: function() {
                    return {
                        can_add: !0
                    }
                },
                onSaveSuccess: function(e) {
                    var s = i("#card_tags");
                    t.find(".js-card-tag").remove(),
                    n.form.model.set({
                        all_tags: e
                    }),
                    this.hasModifications() && (s.trigger("change"),
                    n.list_reload = !0)
                }
            }),
            e.stopPropagation())
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/fb_form", ["require", "jquery", "underscore", "lib/interface/settings/digital_pipeline/source_item", "lib/interface/settings/digital_pipeline/helper", "lib/interface/settings/digital_pipeline/fb_forms/manager"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/interface/settings/digital_pipeline/source_item"), o = e("lib/interface/settings/digital_pipeline/helper"), r = e("lib/interface/settings/digital_pipeline/fb_forms/manager"), a = 1001;
    return t = n.extend({
        events: {
            "click .js-fbforms-create": "newModal",
            "click .js-fbforms-edit": "newModal"
        },
        initialize: function(e) {
            var t = this;
            n.prototype.initialize.apply(this, arguments),
            t.fbFormAuth().then(function() {
                return t.getFbFormPages()
            }).then(function() {
                return t.getData()
            })
        },
        _selectors: function() {
            return {
                source_item_body: ".digital-pipeline__source-item-body",
                create_fbforms: ".js-fbforms-create",
                auth_error_text: ".js-auth-error"
            }
        },
        newModal: function(e) {
            var t = this
              , n = i(e.currentTarget)
              , o = n.data("form-id");
            if (s.isUndefined(o)) {
                if (!t.auth)
                    return window.open(t.auth_link, "_blank"),
                    void t._$window.on("focus", s.bind(t.windowFocus, t));
                t._newModal("create", null)
            } else
                t._newModal("edit", o)
        },
        _newModal: function(e, t) {
            var n = this;
            n.fb_loader = new r({
                mode: e,
                entity: AMOCRM.data.current_entity,
                pages: n.pages,
                elements: n.params.elements,
                form_id: t,
                unsorted: n.parent_context.data.unsorted.enabled,
                template_params: n.params.template_params,
                updateForms: s.bind(function(e, t, o) {
                    var r = this.params.elements;
                    this.params.active = e,
                    n.auth = e,
                    e ? (n.auth = !0,
                    o ? this.params.elements = r.filter(function(e) {
                        return e.id != t
                    }) : s.findWhere(r, {
                        id: t.id
                    }) ? s.extend(s.findWhere(r, {
                        id: t.id
                    }), t) : r.push(t),
                    this.rerender({
                        source: this.params
                    })) : (n.params.elements = [],
                    i(document).trigger("page:reload"))
                }, this)
            })
        },
        windowFocus: function() {
            var e = this;
            this._$window.off("focus"),
            e.fbFormAuth().then(function() {
                return e.getFbFormPages()
            }).then(function() {
                return e.getData()
            })
        },
        getFbFormPages: function() {
            var e, t = this, n = i('<span class="spinner-icon spinner-icon-abs-center">'), o = AMOCRM.constant("account").id;
            return e = {
                account_id: o
            },
            i.ajax({
                url: "/api/forms/facebook/pages",
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", t.token)
                },
                type: "POST",
                dataType: "json",
                data: e
            }).then(function(e) {
                e = e.response.pages.data,
                s.each(e, function(e) {
                    e.label = e.name,
                    e.value = e.id
                }),
                t.pages = e
            }).fail(function(e) {
                var i = t._findElem("create_fbforms");
                e.responseJSON && e.responseJSON.response.error_code === a && !t._findElem("auth_error_text").length && i.before('<div class="js-auth-error digital-pipeline__source-item-fbform-error">' + e.responseJSON.response.error + "</div>"),
                i.removeClass("fbforms-hidden"),
                n.remove()
            })
        },
        fbFormAuth: function() {
            var e = this
              , t = i('<span class="spinner-icon spinner-icon-abs-center">')
              , s = {
                type: 2
            };
            return e.token = o.startToken(),
            this._findElem("create_fbforms").addClass("fbforms-hidden"),
            this._findElem("source_item_body").append(t),
            i.ajax({
                url: "/api/triggers/handler/facebook/check_auth",
                beforeSend: function(t) {
                    t.setRequestHeader("X-Auth-Token", e.token)
                },
                data: s,
                type: "POST",
                dataType: "json"
            }).then(function(i) {
                var s = i.response.auth.result;
                e.auth = s,
                s ? e._findElem("auth_error_text").remove() : (e._findElem("create_fbforms").removeClass("fbforms-hidden"),
                t.remove(),
                e.auth_link = i.response.auth.link)
            })
        },
        getData: function() {
            var e = []
              , t = {}
              , n = i('<span class="spinner-icon spinner-icon-abs-center">')
              , o = this;
            this.getFormData().then(function(i) {
                o._findElem("create_fbforms").removeClass("fbforms-hidden"),
                n.remove(),
                s.isUndefined(i.response) || s.isUndefined(i.response.settings) || (e = s.map(i.response.settings, function(e) {
                    return {
                        id: e.external_id,
                        name: e.name
                    }
                })),
                o.auth && (t = s.extend({}, {
                    source: {
                        id: o.id,
                        type: "fb_form",
                        active: !0,
                        elements: e,
                        template_params: {
                            has_pipelines: !0,
                            items: o.parent_context.data.pipelines,
                            selected_pipe: {
                                name: "pipeline_id"
                            },
                            name: "status_id"
                        }
                    }
                }),
                o.params = t.source,
                o.rerender(t),
                o.trigger("params:ready", {
                    name: "enable_forms",
                    option: "params"
                }))
            }).fail(function() {
                o._findElem("create_fbforms").removeClass("fbforms-hidden"),
                n.remove(),
                o.trigger("params:fail", {
                    name: "enable_forms",
                    option: "params"
                })
            })
        },
        getFormData: function() {
            var e = this;
            return e.token = o.startToken(),
            i.ajax({
                method: "POST",
                beforeSend: function(t) {
                    t.setRequestHeader("X-Auth-Token", e.token)
                },
                url: "/api/forms/facebook/forms"
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/phone", ["require", "jquery", "underscore", "twig", "lib/interface/settings/digital_pipeline/source_item"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("twig"),
    e("lib/interface/settings/digital_pipeline/source_item"));
    return t = n.extend({
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            e.active && this.getData()
        },
        getData: function() {
            var e = []
              , t = {}
              , n = i('<span class="spinner-icon spinner-icon-abs-center">')
              , o = this;
            this.$el.append(n),
            this.getWidgetData().done(function(i) {
                s.isUndefined(i.response) || s.isUndefined(i.response.widgets) || (e = s.map(o.params.elements, function(e) {
                    return s.isUndefined(i.response.widgets[e.code].langs) || s.isUndefined(i.response.widgets[e.code].langs[AMOCRM.lang_id]) || s.isUndefined(i.response.widgets[e.code].langs[AMOCRM.lang_id]["widget.name"]) || s.extend(e, {
                        widget_name: i.response.widgets[e.code].langs[AMOCRM.lang_id]["widget.name"]
                    }),
                    e
                }),
                t = s.extend({}, {
                    source: {
                        id: o.params.id,
                        type: "phone",
                        active: !0,
                        elements: e
                    }
                }),
                o.params = t.source,
                o.rerender(t))
            }).fail(function() {
                n.remove()
            })
        },
        getWidgetData: function() {
            var e = [];
            return s.each(this.params.elements, function(t) {
                e.push(t.code)
            }),
            i.ajax({
                method: "get",
                url: "/ajax/v1/widgets/list/",
                data: {
                    filter: {
                        widget_code: e
                    },
                    key_id: 1,
                    full: 1
                }
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/social_buttons/add_domains", ["require", "jquery", "underscore", "twig", "lib/common/fn", "lib/components/base/suggest_manager"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/common/fn"), r = e("lib/components/base/suggest_manager"), a = 13, l = 9;
    return t = r.extend({
        initialize: function(e) {
            r.prototype.initialize.call(this, s.extend({}, e, {
                $el: e.$input_container ? e.$input_container : e.$container,
                existing_items: e.domains || {},
                can_remove: !0,
                topbar_offset: e.topbar_offset || 0,
                no_absolute_positioning: e.no_absolute_positioning,
                render_hidden: e.render_hidden,
                $relative_to: e.$relative_to,
                $container: e.$container,
                lang: e.lang,
                onInit: s.bind(this.onInit, this, e.onInit),
                onModify: s.bind(this.onModify, this)
            }))
        },
        _selectors: function() {
            return s.extend({}, s.result(r.prototype, "_selectors"), {
                remove_icon: ".js-remove-icon",
                add_domain_link: ".js-add-domain-link",
                error_tip: ".js-add-domain-error",
                domain_item: ".js-multisuggest-item"
            })
        },
        onItemChoose: function() {
            r.prototype.onItemChoose.apply(this),
            this.switchPlaceholder()
        },
        onItemRemove: function() {
            r.prototype.onItemRemove.apply(this),
            this.switchPlaceholder()
        },
        switchPlaceholder: function() {
            var e = this._elem("input")
              , t = this.getSelectedItems().length
              , i = this.options.lang
              , s = i.add_site_title
              , n = i.add_site;
            e.attr("placeholder", t ? n : s),
            this._elem("input").trigger("input")
        },
        bindEvents: function() {
            i("html").addClass("has-suggest-manager"),
            this._$document.on("page:change:start" + this.ns + " suggest:manager:destroy" + this.ns, s.bind(this.destroy, this)).on("orientationchange" + this.ns, s.bind(this.setPositions, this)),
            this._elem("input").autosizeInput(),
            this._elem("input").trigger("autosize:important")
        },
        onModify: function() {
            this.trigger("add_domain:modified")
        },
        events: function() {
            var e = s.extend({}, s.result(r.prototype, "events"));
            return e["click " + this._selector("add_domain_link")] = "onClickAdd",
            e["click " + this._selector("remove_icon")] = "onClickIcon",
            e["keydown " + this._selector("input")] = "onInputKeydown",
            e["multisuggest:item:choose"] = "itemChoose",
            e
        },
        getItemHTML: function(e) {
            var t = this;
            return n({
                ref: t.options.item_tmpl
            }).render({
                item: e
            })
        },
        itemChoose: function(e, t) {
            var n = this
              , r = n.getItemsArray()
              , a = s.indexOf(r, t.value) + 1;
            e && e.stopPropagation && e.stopPropagation(),
            a || !i.trim(t.title) ? n._elem("input").val("") : (t.title = o.escapeHTML(t.title),
            n._elem("input").val("").parent("li").before(n.getItemHTML(t))),
            n.$el.trigger("multisuggest:item:choosed")
        },
        onClickIcon: function(e) {
            var t = this
              , s = i(e.target)
              , n = s.closest(t._selector("domain_item"));
            n.trigger("multisuggest:item:remove", !0)
        },
        onInputKeydown: function(e) {
            var t = this.validateDomainInput()
              , i = e.keyCode;
            return this.onKeydownToggleLink(),
            this.removeDomainInputError(),
            this.trigger("add_domains:keyinput"),
            i !== l && i !== a || t ? void 0 : (this.showDomainInputError(),
            !1)
        },
        showDomainInputError: function() {
            var e = this.validateDomainInput()
              , t = this._elem("input")
              , i = t.width()
              , s = this._elem("add_domain_link")
              , n = this._elem("error_tip");
            return e ? !1 : (s.addClass("hidden"),
            void n.addClass("showed").css({
                left: i
            }))
        },
        removeDomainInputError: function() {
            var e = this._elem("error_tip");
            e.removeClass("showed")
        },
        onKeydownToggleLink: function() {
            var e = this._elem("input")
              , t = e.val()
              , i = this._elem("add_domain_link");
            i.toggleClass("hidden", t.length < 3)
        },
        validateDomainInput: function() {
            var e = this._elem("input").val()
              , t = e.match(/^((?:http|https):\/\/)?((?:[\wа-€ј-я®Є-]+)(?:\.[\wа-€ј-я®Є-]+)+)(?:[\wа-€ј-я®Є.,@?^=%&:\/~+#-]*[\wа-€ј-я®Є@?^=%&amp;\/~+#-])$/g);
            return !s.isNull(t)
        },
        onClickAdd: function() {
            var e = this.validateDomainInput();
            e ? this._elem("input").trigger({
                type: "keydown",
                keyCode: 13
            }) : this.showDomainInputError()
        },
        destroy: function() {
            r.prototype.destroy.call(this)
        },
        onInit: function(e) {
            var t = this.options.area
              , i = s.isArray(t) ? s.map(t, function(e) {
                return "fast-tags-" + e
            }).join(" ") : "fast-tags-" + t
              , n = s.isArray(t) ? s.map(t, function(e) {
                return "fast-tags-suggest-" + e
            }).join(" ") : "fast-tags-suggest-" + t;
            this.options.area && (this.$el.addClass(i),
            this.$list.addClass(n)),
            s.isFunction(e) && e.call(this)
        },
        setPositions: function() {
            this.trigger("add_domains:setpositions")
        },
        getItemsArray: function() {
            var e = this.getSelectedItems();
            return e = s.map(e, function(e) {
                return e.title
            }, this)
        },
        saveSuccess: function() {
            var e = this.getSelectedItems();
            return s.isFunction(this.options.onSaveSuccess) && this.options.onSaveSuccess.call(this, e),
            e
        },
        hasModifications: function() {
            var e = this.getSelectedItems();
            return !s.isEqual(this.options.existing_items, e)
        },
        loadItems: s.noop,
        suggestLeaveOnBlur: s.noop,
        save: s.noop,
        escapeDestroy: s.noop
    })
}),
define("lib/interface/settings/digital_pipeline/social_buttons/social_buttons_modal", ["require", "jquery", "twig", "underscore", "lib/common/fn", "clipboard", "lib/core/view", "lib/components/base/modal", "lib/components/base/form", "lib/components/base/confirm", "lib/interface/settings/digital_pipeline/social_buttons/add_domains"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/common/fn"), r = e("clipboard"), a = e("lib/core/view"), l = e("lib/components/base/modal"), c = e("lib/components/base/form"), d = e("lib/components/base/confirm"), u = e("lib/interface/settings/digital_pipeline/social_buttons/add_domains"), h = "/tmpl/digital_pipeline/social_buttons/modal.twig", _ = "position-visual__imitate-button", p = ["top-left", "top-right", "bottom-left", "bottom-right"], m = ["#006f9f", "#001F3F", "#0074D9", "#7FDBFF", "#39CCCC", "#3D9970", "#2ECC40", "#01FF70", "#FFDC00", "#FF851B", "#FF4136", "#85144B", "#F012BE", "#B10DC9", "#111111", "#DDDDDD", "#CCFF33", "#CC99FF", "#FF6699", "#9966FF"], f = '<script>var amo_social_button = {id: %id%, hash: "%hash%", locale: "' + AMOCRM.lang_id + '"};</script><script id="amo_social_button_script" async="async" src="https://%host%/js/button.js"> </script>';
    return t = a.extend({
        params: {
            color: "#006f9f",
            button_position: "top-left",
            is_fixed: "",
            horisontal_position: 120,
            vertical_position: 120,
            button_size: 50,
            orient: 1,
            domains: []
        },
        social_services_params: {},
        social_services: [],
        domains: [],
        force_close: null,
        form: null,
        initialize: function(e) {
            var t = this
              , i = {}
              , e = e || {};
            a.prototype.initialize.apply(this, arguments),
            this.force_close = !1,
            this.social_services_params = this.filterEmptyLinkSocialServices(e.social_services),
            i.options = {},
            i.positions = p,
            i.colors = m,
            i.social_services_params = this.social_services_params,
            i.orient_items = [{
                id: 1,
                option: o.i18n("horisontal_orient")
            }, {
                id: 2,
                option: o.i18n("vertical_orient")
            }],
            t.modal = new l({
                class_name: "modal-list modal-social-button-settings",
                init: s._preload([h], function(e) {
                    t.getData(e, i)
                }),
                destroy: function() {
                    return (t.form && t.form.hasChanges() || t.add_domains && t.add_domains.hasModifications()) && !t.force_close ? (t.confirmCloseModal(),
                    !1) : void 0
                }
            })
        },
        showInstructionsLink: function() {
            AMOCRM.lang_id && "ru" === AMOCRM.lang_id && this._findElem("instructions_link").removeClass("h-hidden")
        },
        filterEmptyLinkSocialServices: function(e) {
            return n.mapObject(e, function(e) {
                return n.filter(e, function(e) {
                    return "" !== e.link
                })
            })
        },
        parseSocialServices: function(e) {
            var t = [];
            n.map(this.social_services_params, function(i) {
                i = n.filter(i, function(t) {
                    return t.id == e[t.type]
                }),
                n.isEmpty(i[0]) || t.push(i[0])
            }),
            this.social_services = t
        },
        renderModal: function(e, t) {
            var i = this;
            n.extend(t.options, i.params),
            t.is_copy_enable = document.queryCommandSupported("copy"),
            e.trigger("modal:loaded").html(s({
                ref: h
            }).render(t)).trigger("modal:centrify"),
            i.setElement(e),
            n.isUndefined(this._code_settings) || (i.showCodeBlock(),
            e.trigger("modal:centrify")),
            i.setPosition(i.params.button_position),
            i.toggleModalPositionBlock(i.params.is_fixed),
            i.removeOverlay(),
            i.form = i._addComponent(c.View, {
                el: i._elem("form")
            }),
            this.showInstructionsLink(),
            i.form.model.on("has_changes", function() {
                i.enableToSave()
            }),
            i.form.model.on("has_reverted", function() {
                i.disableToSave()
            }),
            i.initClipboard(),
            i.initAddDomains()
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("color_picker")] = "showColorPalette",
            e["click " + this._selector("color_tip_item")] = "clickColor",
            e["change " + this._selector("sect_checkbox")] = "clickSector",
            e["change " + this._selector("position_toggler")] = "changeFixedPos",
            e["click " + this._selector("button_code_link")] = "codeClick",
            e["click " + this._selector("instructions_link")] = "showInstructions",
            e["click " + this._selector("save_button") + ":not(.button-input-disabled)"] = "onSaveButtonClick",
            e
        },
        _selectors: function() {
            return {
                overlay: ".js-social-buttons-overlay",
                save_button: ".js-social-buttons-modal-save",
                code_block: ".js-modal-code-block",
                no_code_block: ".js-modal-no-code",
                modal_textarea: ".js-button-code-textarea",
                main_button: ".js-main-amo-button",
                form_button: ".js-form-amo-button",
                color_picker: ".js-modal-colorpicker",
                color_tip: ".js-tip",
                color_tip_item: ".js-tips-item",
                imitate_button: ".js-social-imitate-button",
                position_settings: ".js-position-settings",
                position_visual: ".js-position-visual",
                sect_checkbox: ".js-button-section-radio",
                sect_checkbox_checked: ".js-button-section-radio:checked",
                position_row: ".js-position-row",
                form: ".js-social-buttons-form",
                hidden_color: ".js-button-color-hidden",
                position_toggler: ".js-position-toggler",
                button_code_link: ".js-button-code-link",
                labels: ".js-modal-label",
                domains_input: ".js-domain-input",
                settings_block: ".js-button-pos-settings",
                success_copy_block: ".js-copy-success",
                empty_domains_err: ".js-empty-domains-error",
                add_domains: "#add_domains",
                instructions_link: ".js-help-link"
            }
        },
        removeOverlay: function() {
            this._elem("overlay").removeClass("default-overlay-visible")
        },
        codeClick: function(e) {
            e.preventDefault()
        },
        enableToSave: function() {
            this._elem("save_button").trigger("button:save:enable")
        },
        disableToSave: function() {
            this._elem("save_button").trigger("button:save:disable")
        },
        showColorPalette: function(e) {
            e.stopPropagation(),
            this._elem("color_tip").trigger("tip:show")
        },
        clickColor: function(e) {
            var t = i(e.currentTarget)
              , s = t.find("span").data("color");
            this._setColor(s)
        },
        clickSector: function() {
            var e = this._findElem("sect_checkbox_checked").val();
            this.setPosition(e)
        },
        changeFixedPos: function(e) {
            var t = i(e.target)
              , s = t.prop("checked");
            this.params.is_fixed = t.val(),
            this.toggleModalPositionBlock(s)
        },
        _setColor: function(e) {
            if (!e)
                throw new Error("Wrong color code!");
            this._setPickerColor(e),
            this._setButtonColor(e),
            this._setImitateButtonColor(e),
            this._setFormButtomColor(e),
            this.params.color = e,
            this._elem("hidden_color").val(e).trigger("change")
        },
        _setPosition: function(e) {
            return "" !== e && e ? (this._clearPositionClass(this.params.button_position),
            this.params.button_position = e,
            void this._setPositionClass(this.params.button_position)) : !1
        },
        _setPickerColor: function(e) {
            this._elem("color_picker").css({
                backgroundColor: e
            })
        },
        _setButtonColor: function(e) {
            this._elem("main_button").css({
                backgroundColor: e
            })
        },
        _setFormButtomColor: function(e) {
            this._elem("form_button").css({
                backgroundColor: e
            })
        },
        _setImitateButtonColor: function(e) {
            this._elem("imitate_button").css({
                backgroundColor: e
            })
        },
        setPosition: function(e) {
            this._setPosition(e),
            this._toggleLabels(e)
        },
        _clearPositionClass: function(e) {
            return "" !== e && e ? void this._elem("imitate_button").removeClass(_ + "--" + e) : !1
        },
        _setPositionClass: function(e) {
            return "" !== e && e ? void this._elem("imitate_button").addClass(_ + "--" + e) : !1
        },
        showCodeBlock: function() {
            var e = this._elem("code_block")
              , t = this._elem("no_code_block");
            e.removeClass("hidden"),
            t.addClass("hidden"),
            this.pasteCode()
        },
        pasteCode: function() {
            var e, t = this._elem("modal_textarea"), i = this._generateUrl(), s = this._code_settings.id, n = this._code_settings.hash, o = f.replace("%id%", s).replace("%hash%", n).replace("%host%", i);
            t.val(o),
            t.scrollTop(t.get(0).scrollHeight),
            e = t.scrollTop() + t.height(),
            t.scrollTop(0),
            t.css({
                height: e + 10
            })
        },
        showEmptyDomainsError: function() {
            var e = this._elem("empty_domains_err");
            e.addClass("showed")
        },
        removeEmptyDomainsError: function() {
            var e = this._elem("empty_domains_err");
            e.removeClass("showed")
        },
        _generateUrl: function() {
            var e = window.location.hostname;
            return e = e.split("."),
            e.shift(),
            e.unshift("gso"),
            e = e.join(".")
        },
        toggleModalPositionBlock: function(e) {
            this._elem("settings_block").toggleClass("hidden", !e)
        },
        _toggleLabels: function(e) {
            var t = this._elem("labels");
            t.addClass("hidden").filter(function(t, s) {
                var n = i(s).data("label-type");
                return e.indexOf(n) + 1
            }).removeClass("hidden")
        },
        onSaveButtonClick: function(e, t) {
            var i = n.isUndefined(t) ? !1 : t
              , s = this.domains.length ? !0 : !1;
            return s ? void this.saveSocialSettings(i) : (this.showEmptyDomainsError(),
            this._elem("save_button").trigger("button:save:error"),
            !1)
        },
        saveSocialSettings: function(e) {
            var t = n.isUndefined(e) ? !1 : e
              , i = this.form.model.toJSON() || {};
            this.parseSocialServices(i),
            this.saveData(i, t),
            this._elem("save_button").trigger("button:save:start")
        },
        saveData: function(e, t) {
            var i = this
              , s = n.isUndefined(t) ? !1 : t;
            i._saveData(e).done(function() {
                return i.initAddDomains(),
                i.form.model.updateDefaults(),
                i._elem("save_button").trigger("button:saved"),
                s ? void i.destroy() : void (n.isUndefined(i._code_settings) && i._getData().done(function(e) {
                    e = o.cleanResponse(e),
                    n.isEmpty(e) || (i._code_settings = {},
                    i._code_settings.id = e.include_params.id,
                    i._code_settings.hash = e.include_params.hash,
                    i.showCodeBlock())
                }))
            }).fail(function() {
                i._elem("save_button").trigger("button:save:error")
            })
        },
        _saveData: function(e) {
            var t = this;
            return i.post("/ajax/settings/pipeline/button/settings/", {
                button: e,
                domains: t.domains,
                social_services: t.social_services
            })
        },
        getData: function(e, t) {
            var i = this;
            i._getData().done(function(s) {
                i.getDataDone(s, e, t)
            }).fail(function() {
                o.log({
                    msg: "data fetch faild"
                })
            })
        },
        _getData: function() {
            return i.ajax({
                type: "GET",
                url: "/ajax/settings/pipeline/button/settings/"
            })
        },
        getDataDone: function(e, t, i) {
            var s = this;
            if (e = o.cleanResponse(e),
            !e)
                throw new Error("Invalid response data: " + JSON.stringify(e));
            n.isEmpty(e) || (n.extend(s.params, e.settings.button),
            this._code_settings = {},
            this._code_settings.id = e.include_params.id,
            this._code_settings.hash = e.include_params.hash,
            this.domains = e.domains,
            i.social_settings = s.prepareSocialSettingsTemplateParams(e.settings.social_services),
            i.domains = n.map(this.domains, function(e) {
                return {
                    id: "",
                    title: e
                }
            }, this)),
            s.renderModal(t, i)
        },
        prepareSocialSettingsTemplateParams: function(e) {
            var t = {};
            return n.map(e, function(e) {
                t[e.type] = {
                    id: e.id,
                    name: e.name
                }
            }),
            t
        },
        checkDomains: function() {
            var e = this.domains.length;
            e || this.showEmptyDomainsError()
        },
        confirmCloseModal: function() {
            var e = this;
            (e.form.hasChanges() || e.add_domains.hasModifications()) && new d({
                class_name: "modal-list modal-leave-confirm",
                decline_text: AMOCRM.lang.button_exit,
                accept_text: AMOCRM.lang.button_save,
                button_class: "button-input_blue",
                text: AMOCRM.lang.confirm_close_modal,
                accept: function() {
                    e.onSaveButtonClick(!0),
                    this.destroy()
                },
                destroy: function() {
                    this.accepted === !1 && (e.force_close = !0,
                    e.modal.destroy())
                }
            })
        },
        initClipboard: function() {
            var e = this;
            e.clipboard = new r(document.querySelector(".js-button-code-link"),{
                target: function() {
                    return e._elem("modal_textarea")[0]
                }
            }),
            e.clipboard.on("success", function(t) {
                e._elem("success_copy_block").css({
                    height: e._elem("modal_textarea").outerHeight()
                }).removeClass("hidden"),
                setTimeout(function() {
                    e._elem("success_copy_block").addClass("hidden")
                }, 1500),
                t.clearSelection()
            }),
            e.clipboard.on("error", function(e) {
                o.log({
                    msg: "Copying to clipboard failed"
                })
            })
        },
        initAddDomains: function() {
            var e, t = this, i = AMOCRM.lang.page.social_buttons.modal, s = i.add_site_title, o = i.add_site, r = o;
            e = n.map(t.domains, function(e) {
                return {
                    id: "",
                    raw_title: e,
                    title: e
                }
            }, this),
            r = e.length ? o : s,
            t.add_domains = t._addComponent(u, {
                $el: t._elem("add_domains"),
                $container: t._elem("add_domains"),
                items: {},
                id: [n.uniqueId("domains_")],
                replace: !0,
                domains: e,
                placeholder: r,
                without_input: !1,
                lang: i,
                template: "/tmpl/digital_pipeline/social_buttons/add_domain/add_domain_wrapper.twig",
                items_template: "/tmpl/digital_pipeline/social_buttons/add_domain/add_domain_wrapper.twig",
                item_tmpl: "/tmpl/digital_pipeline/social_buttons/add_domain/add_domain_item.twig",
                onItemChoosed: function() {
                    this.trigger("add_domains:domain_choosed")
                },
                onItemRemoved: function() {
                    this.trigger("add_domains:domain_removed")
                }
            }),
            t.add_domains.on("add_domains:domain_removed", function() {
                t.domains = t.add_domains.getItemsArray(),
                t.checkDomains(),
                t.enableToSave()
            }),
            t.add_domains.on("add_domains:keyinput", function() {
                t.removeEmptyDomainsError()
            }),
            t.add_domains.on("add_domains:domain_choosed", function() {
                t.domains = t.add_domains.getItemsArray(),
                t.onDomainChosed(),
                t.enableToSave()
            })
        },
        onDomainChosed: function() {
            (n.isEmpty(this._code_settings) || n.isUndefined(this._code_settings)) && this.saveSocialSettings()
        },
        showInstructions: function() {
            new l({
                class_name: "button-tutorial",
                init: s._preload(["/tmpl/digital_pipeline/social_buttons/instructions_modal.twig"], function(e) {
                    this.modal_body = e,
                    this.modal_body.html(s({
                        ref: "/tmpl/digital_pipeline/social_buttons/instructions_modal.twig"
                    }).render()),
                    this.modal_body.trigger("modal:centrify")
                })
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/source_items/social_gso", ["require", "jquery", "underscore", "lib/common/fn", "lib/components/base/confirm", "lib/interface/settings/digital_pipeline/social_buttons/social_buttons_modal", "lib/interface/settings/digital_pipeline/source_item"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/components/base/confirm"), r = e("lib/interface/settings/digital_pipeline/social_buttons/social_buttons_modal"), a = e("lib/interface/settings/digital_pipeline/source_item");
    return t = a.extend({
        _social_urls: {
            facebook: "/ajax/v1/chats/origin/facebook/list/",
            vk: "/ajax/v1/chats/origin/vk/list/",
            telegram: "/ajax/v1/chats/origin/telegram/list/",
            viber: "/ajax/v1/chats/origin/viber/list/"
        },
        _forms_url: "/ajax/v1/forms/list",
        _success_statuses: {
            facebook: "FB_PAGE_STATUS_SUCCESS",
            vk: "VK_GROUP_STATUS_SUCCESS",
            telegram: "TG_BOT_STATUS_SUCCESS",
            viber: "VI_BOT_STATUS_SUCCESS"
        },
        social_services: {},
        _selectors: function() {
            return {
                settings_link: ".js-social-button-settings"
            }
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("settings_link")] = "onClickLink",
            e
        },
        initialize: function(e) {
            a.prototype.initialize.apply(this, arguments),
            this.listenTo(this.parent_context, "enable_socials:recieved", function(e) {
                this.checkSocialServices(e)
            }),
            this.listenTo(this.parent_context, "enable_socials:failed", function(e) {
                this.failSocialServices(e)
            }),
            this.listenTo(this.parent_context, "enable_forms:recieved", function(e) {
                this.parseFormsData(e)
            }),
            this.listenTo(this.parent_context, "enable_forms:failed", function(e) {
                this.failSocialServices(e)
            })
        },
        onClickLink: function(e) {
            var t = this;
            s.isEmpty(this.social_services) ? this.modal = new o({
                text: AMOCRM.lang.page.social_buttons.modal.wrong_chats,
                accept_text: AMOCRM.lang.page.buttons.connect,
                decline_text: AMOCRM.lang.page.buttons.button_cancel,
                button_class: "button-input_blue",
                accept: function() {
                    t._$document.find(".js-connect-chat").trigger("click"),
                    t.modal.destroy()
                }
            }) : this.showSocialModal(e)
        },
        showSocialModal: function(e) {
            e.preventDefault(),
            this.social_buttons_settings_modal = this._addComponent(r, {
                social_services: this.social_services
            })
        },
        failSocialServices: function() {
            this.social_services = {},
            this._elem("settings_link").removeClass("hidden")
        },
        parseFormsData: function(e) {
            var t = this
              , i = e.elements
              , n = e.type;
            e.active && (t.social_services[n] = s.map(i, function(e) {
                var t = e.name.split("#")
                  , i = e.name;
                return s.isEmpty(t[1]) || (i = "#" + t[1]),
                {
                    type: n,
                    id: e.id,
                    name: i,
                    link: e.link
                }
            }))
        },
        checkSocialServices: function(e) {
            var t = this
              , i = e.elements
              , n = [];
            s.each(i, function(e) {
                s.has(t._social_urls, e.type) && n.push(this.getSocialServiceList(this._social_urls[e.type]))
            }, this),
            Promise.all(n).then(function(e) {
                var i = {};
                t.parseLinksResponse(e),
                t._elem("settings_link").removeClass("hidden"),
                t.params.active = !0,
                t.params.type = "social_gso",
                i.source = s.extend({}, t.params),
                t.rerender(i)
            })
        },
        parseLinksResponse: function(e) {
            var t, i = s.keys(this._social_urls);
            if (!s.isArray(e))
                throw new Error("Invalid response: " + e);
            s.each(e, function(e) {
                n.has_keys(e, ["response", "chats", "origin", "list"]) && (t = e.response.chats.origin.list,
                s.each(s.keys(t), function(e) {
                    s.indexOf(i, e) > -1 && (s.isEmpty(t[e]) || (this.social_services[e] = this.parseLinkObject(e, t[e])))
                }, this))
            }, this)
        },
        parseLinkObject: function(e, t) {
            var i, n = [], o = this;
            if (s.isUndefined(t[0]))
                throw new Error('Wrong data for "' + e + '" social service! ');
            return i = t,
            s.map(i, function(t) {
                var i = {};
                if (t.status === o._success_statuses[e]) {
                    switch (i.type = e,
                    e) {
                    case "facebook":
                        i.link = "facebook.com/" + t.page_name + "-" + t.page_id,
                        i.id = t.page_id,
                        i.name = t.page_name;
                        break;
                    case "vk":
                        i.link = t.link,
                        i.id = t.id,
                        i.name = t.name;
                        break;
                    case "telegram":
                        i.link = t.username,
                        i.id = t.id,
                        i.name = t.name;
                        break;
                    case "viber":
                        i.link = t.uri,
                        i.id = t.id,
                        i.name = t.name
                    }
                    n.push(i)
                }
            }),
            n
        },
        getSocialServiceList: function(e) {
            return i.ajax({
                method: "GET",
                url: e
            })
        }
    })
}),
define("lib/interface/settings/digital_pipeline/mixins/edit_event_mixin", ["require", "lib/common/fn", "lib/interface/settings/digital_pipeline/site_settings"], function(e) {
    "use strict";
    var t = (e("lib/common/fn"),
    e("lib/interface/settings/digital_pipeline/site_settings"));
    return {
        PIXEL_EVENT: 18,
        _selectors_obj: {
            button_input_add: ".button-input_add",
            trigger_container_data_status_id: ".digital-pipeline__trigger-container[data-status-id=%s]"
        },
        event_constructors: {
            18: t
        },
        editForwardEventSettingsClick: function(e) {
            if (!this.close_blocked) {
                var t = $(e.currentTarget).closest(this._selector("trigger_event"))
                  , i = $(e.currentTarget).closest(this._selector("trigger_container"))
                  , s = i.data("status-id")
                  , n = _.findWhere(this.statuses, {
                    id: s
                })
                  , o = t.data("event-id");
                this.editForwardEventSettings(e, n, o)
            }
        },
        editForwardEventSettings: function(e, t, i, s) {
            this.closeTrigger(e);
            var n = this._findElem("trigger_container_data_status_id", t.id).find(".digital-pipeline__trigger-event[data-event-id =" + i + "]")
              , o = t.forward_events[i].settings;
            this.event_settings = new this.event_constructors[i]({
                settings: o,
                $button: n,
                page_context: this,
                "new": s,
                onChange: _.bind(this.changeEvent, this),
                onClose: _.bind(this.closeEvent, this)
            })
        },
        changeEvent: function() {
            this.checkChanges()
        },
        closeEvent: function() {
            this.close_blocked = !1,
            this.event_settings && _.isFunction(this.event_settings.destroy) && this.event_settings.destroy(!0)
        },
        eventsValidation: function(e, t, i) {
            t.forward_events[this.PIXEL_EVENT].enabled && 0 == t.forward_events[this.PIXEL_EVENT].settings.sites.length && i != this.PIXEL_EVENT && (this.close_blocked = !0,
            this.emptySiteSettingsCheck(e, t),
            this._findElem("button_input_add").trigger("button:disable"))
        },
        emptySiteSettingsCheck: function(e, t) {
            this.editForwardEventSettings(e, t, this.PIXEL_EVENT, !0)
        }
    }
}),
define("lib/interface/settings/digital_pipeline/status_edit_form", ["require", "jquery", "underscore", "twig", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("twig"),
    e("lib/components/base/form"));
    return t = n.View.extend({
        events: function() {
            return s.extend({}, n.View.prototype.events || {}, {
                "click .color-picker": "colorPaletteToggler",
                "click .status-possible-color": "choseColor",
                "click .digital-pipeline__delete-status": "deleteStatusClick"
            })
        },
        initialize: function(e) {
            n.View.prototype.initialize.apply(this, arguments),
            this.checkDpChanges = e.checkDpChanges,
            this.status = e.status,
            this.deleteStatusCallback = e.deleteStatusCallback,
            this.initEvents()
        },
        initEvents: function() {
            var e = this;
            this.model.on("has_changes", function() {
                e.statusNameChange(),
                e.colorChange(),
                e.checkDpChanges()
            }).on("has_reverted", function() {
                e.statusNameChange(),
                e.colorChange(),
                e.checkDpChanges()
            })
        },
        statusNameChange: function() {
            this.status.option = this.model.get("status_name")
        },
        colorPaletteToggler: function(e) {
            var t = this.$el.find(".color-palette");
            e.stopPropagation(),
            t.is(":hidden") ? (this.closeColorPalette(),
            this.$color_palette = t,
            this.$color_palette.show().addClass("color-palette-opened")) : this.closeColorPalette()
        },
        closeColorPalette: function() {
            this.$color_palette && (this.$color_palette.removeClass("color-palette-opened").hide(),
            this.$color_palette = !1)
        },
        choseColor: function(e) {
            var t = i(e.currentTarget).data("color")
              , s = this.$el.find(".status__color");
            s.val(t),
            s.trigger("input"),
            this.closeColorPalette()
        },
        colorChange: function() {
            var e = this.model.get("color")
              , t = this.$el.find(".color-picker")
              , i = this.$el.find(".pipeline_status__head_line");
            t.css({
                "background-color": e
            }),
            i.css({
                "background-color": e,
                color: e
            }),
            this.status.bg_color = e
        },
        deleteStatusClick: function() {
            this.deleteStatus()
        },
        deleteStatus: function() {
            this._$document.trigger("delete:status", this.status.id),
            this.deleteStatusCallback(this.status),
            this.destroy()
        }
    })
}),
define("lib/interface/settings/digital_pipeline/mixins/edit_statuses_mixin", ["require", "lib/interface/settings/digital_pipeline/status_edit_form", "lib/interface/settings/digital_pipeline/item", "lib/components/base/confirm", "lib/common/fn", "underscore", "lib/interface/left_menu/index"], function(e) {
    "use strict";
    var t = e("lib/interface/settings/digital_pipeline/status_edit_form")
      , i = e("lib/interface/settings/digital_pipeline/item")
      , s = e("lib/components/base/confirm")
      , n = e("lib/common/fn")
      , o = e("underscore")
      , r = e("lib/interface/left_menu/index")
      , a = n.delay();
    return {
        edit_templates: {
            headers: "/tmpl/digital_pipeline/edit_templates/edit_statuses.twig",
            header_inner: "/tmpl/digital_pipeline/edit_templates/edit_status_inner.twig",
            header_noedit: "/tmpl/digital_pipeline/header_tmpl_inner.twig",
            triggers: "/tmpl/digital_pipeline/trigger_tmpl.twig"
        },
        _selectors_obj: {
            row_header: ".digital-pipeline__row_header",
            edit_status_input: ".digital-pipeline__edit-status-input",
            row_trigger_row: ".digital-pipeline__row_trigger-row",
            item_add_stage: ".digital-pipeline__add-stage",
            toggler: ".digital-pipeline__toggler",
            delete_status: ".digital-pipeline__delete-status",
            add_stage_plus: ".digital-pipeline__add-stage-plus",
            data_row_handler: "[data-row-handler=%s]",
            data_group_id_n: "[data-group-id=%s]",
            item_head: ".digital-pipeline__item_head[data-stage-id=%s]",
            item_trigger: ".digital-pipeline__item_trigger[data-stage-id=%s]",
            data_stage_id: "[data-stage-id=%s]",
            row_not_header: ".digital-pipeline__row:not(.digital-pipeline__row_header)"
        },
        MINIMAL_STATUSES_LENGTH: 4,
        step_sort: 10,
        editStatusStart: function(e) {
            var i, s, r = this, a = $(e.currentTarget).closest(this._selector("item")), l = a.data("stage-id"), c = this._findElem("row_header"), d = o.findWhere(this.statuses, {
                id: l
            }), u = d.sort / 10 - 1;
            a.html(r.getTemplate(r.edit_templates.header_inner).render({
                row: d,
                rows: this.statuses,
                key: u,
                colors: r.data.statuses_colors
            })).addClass("digital-pipeline__item_head-edit"),
            s = c.find("[data-stage-id=" + d.id + "]"),
            r._addComponent(t, {
                el: s,
                status: d,
                checkDpChanges: o.bind(r.checkChanges, r),
                deleteStatusCallback: o.bind(r.deleteStatus, r)
            }),
            i = c.find("[data-stage-id=" + l + "]").find(this._selector("edit_status_input")),
            n.setCursorPosition(i, 999),
            this.dp_validation.type.push("status"),
            this.status_in_edit = !0,
            this.checkStatusesLength()
        },
        editStatusCancel: function(e) {
            var t = this
              , i = $(e.currentTarget).closest(".digital-pipeline__item")
              , s = i.data("stage-id")
              , n = o.findWhere(this.statuses, {
                id: s
            })
              , r = this.add_new_status ? 500 : 200;
            setTimeout(function() {
                i.html(t.getTemplate(t.edit_templates.header_noedit).render({
                    row: n,
                    rows: t.statuses,
                    key: n.sort / 10 - 1
                })).removeClass("digital-pipeline__item_head-edit")
            }, r),
            this.add_new_status = null
        },
        addNewStatusRevert: function(e) {
            var t = $(e.currentTarget)
              , i = t.closest(this._selector("item")).data("stage-id")
              , s = t.closest(this._selector("item")).next(this._selector("item")).data("stage-id")
              , n = this;
            142 !== s && (clearTimeout(n.added_timeout),
            n.reverted_timeout = setTimeout(function() {
                t.addClass("shorted"),
                n._findElem("data_stage_id", i).animate({
                    "padding-right": "0px"
                }, 100),
                n._findElem("data_stage_id", s).animate({
                    "padding-left": "0px"
                }, 100, function() {
                    t.removeClass("show_plus").removeClass("shorted")
                })
            }, 100))
        },
        addNewStatusPrepare: function(e) {
            var t = $(e.currentTarget)
              , i = t.closest(this._selector("item")).data("stage-id")
              , s = t.closest(this._selector("item")).next(this._selector("item")).data("stage-id")
              , n = this;
            clearTimeout(n.reverted_timeout),
            n.added_timeout = setTimeout(function() {
                t.addClass("show_plus"),
                n._findElem("data_stage_id", i).css({
                    "padding-right": "22px"
                }),
                n._findElem("data_stage_id", s).css({
                    "padding-left": "22px"
                }),
                clearTimeout(n.added_timeout)
            }, 100)
        },
        addNewStatus: function(e) {
            var s, r, a = $(e.currentTarget), l = this, c = $(e.currentTarget).closest(this._selector("item")), d = c.data("stage-id"), u = a.closest(this._selector("item")).next(this._selector("item")).data("stage-id"), h = o.findWhere(this.statuses, {
                id: d
            }).sort, _ = o.findWhere(this.statuses, {
                id: u
            }).sort, p = this._findElem("row_header"), m = this._findElem("row_trigger_row"), f = "new_" + (this.statuses.length + 1), g = {
                option: "",
                id: f,
                bg_color: "#99CCFF",
                forward_events: {},
                sort: l.element_type == n.convertElementType(AMOCRM.element_types.customers, "string") ? _ : h,
                editable: !0
            }, b = l.getTemplate(l.edit_templates.headers).render({
                rows: l.statuses,
                row: g,
                key: h / 10 - 1,
                colors: l.data.statuses_colors,
                only_number: l.element_type == n.convertElementType(AMOCRM.element_types.customers, "string")
            }), v = o.indexOf(this.statuses, o.findWhere(this.statuses, {
                id: d
            })), y = l.$scrollable.scrollLeft();
            this.max_count_statuses && this.statuses.length >= this.max_count_statuses || (g.sort += this.step_sort,
            a.css({
                width: this.cell_width + 26
            }).animate({
                opacity: 0
            }, 300),
            l.$scrollable.animate({
                scrollLeft: y + this.cell_width / 2
            }, 300, function() {
                l._findElem("data_stage_id", u).css({
                    "padding-left": "0px",
                    transition: "none"
                }),
                l._findElem("data_stage_id", d).css({
                    "padding-right": "0px",
                    transition: "none"
                })
            }),
            setTimeout(function() {
                a.hide(),
                a.removeClass("show_plus").removeAttr("style").show()
            }, 500),
            this.add_new_status = !0,
            p.find("[data-stage-id=" + d + "]").after(b),
            this._findElem("data_stage_id", u).css({
                transition: "none",
                "padding-left": "0px"
            }),
            this.$el.find(".digital-pipeline__item_head").addClass("digital-pipeline__item_sortable_helper"),
            c.removeClass("digital-pipeline__item_pre-system"),
            r = p.find("[data-stage-id=" + f + "]").find(this._selector("edit_status_input")),
            n.setCursorPosition(r, 999),
            m.find(l._selector("data_stage_id", d)).after(l.getTemplate(l.edit_templates.triggers).render({
                row: g
            })),
            o.each(this.groups, function(e) {
                var t = l._findElem("data_group_id_n", e.id).find(".digital-pipeline__row_handler-row__single")
                  , s = l._findElem("data_group_id_n", e.id).find("digital-pipeline__row_handler-row__multiple")
                  , n = new i({
                    business_processes: l.collection,
                    handlers: l.handlers,
                    group_id: e.id,
                    handler_code: "",
                    onRemove: o.bind(l.onRemove, l),
                    onChangeProcessSet: o.bind(l.onChangeProcessSet, l),
                    onChangeProcessGet: o.bind(l.onChangeProcessGet, l),
                    cacheCloneSet: o.bind(l.cacheCloneSet, l),
                    cacheCloneGet: o.bind(l.cacheCloneGet, l),
                    parent_context: l,
                    status_id: f
                });
                t.find(l._selector("data_stage_id", d)).after(n.render({
                    business_processes: [],
                    row: {
                        id: f
                    }
                }).$el),
                s.find(l._selector("data_stage_id", d)).after(n.render({
                    business_processes: [],
                    row: {
                        id: f
                    }
                }).$el),
                l.rows[e.id].push(n)
            }),
            this.hideElements(),
            this.resortStatuses(v),
            this.statuses.splice(v + 1, 0, g),
            s = p.find("[data-stage-id=" + f + "]"),
            l._addComponent(t, {
                el: s,
                status: o.findWhere(l.statuses, {
                    id: f
                }),
                checkDpChanges: o.bind(l.checkChanges, l),
                deleteStatusCallback: o.bind(l.deleteStatus, l)
            }),
            this.checkStatusesLength(),
            this.dp_validation.type.push("status"),
            this.resortColumnColor())
        },
        prepareSortable: function(e) {
            var t = this
              , i = $(e.currentTarget)
              , s = i.closest(".digital-pipeline__item_head").data("stage-id");
            i.removeClass("digital-pipeline__item_pre-system").find(t._selector("item_add_stage")).removeClass("show_plus"),
            142 !== s && 143 !== s && $(e.currentTarget).on("mousemove" + t.ns, function() {
                $(".digital-pipeline__item_head").addClass("digital-pipeline__item_sortable_helper"),
                t.hideElements(),
                $(e.currentTarget).off("mousemove" + t.ns)
            })
        },
        initDroppableDelete: function() {
            var e = this.$el.find(".js-dp-status-delete")
              , t = this;
            this.$droppable_delete = e.droppable({
                refreshPositions: !0,
                tolerance: "pointer",
                over: function(e, i) {
                    var s = t.$el.find(".digital-pipeline__item_fake-head")
                      , n = t.$el.find(".digital-pipeline__table");
                    s.css({
                        "max-width": "0px",
                        width: "0px"
                    }),
                    n.sortable("disable"),
                    t.$el.find(".ui-sortable-helper").find(".digital-pipeline__header-inner").addClass("digital-pipeline__header-inner_delete"),
                    t.freezScroll = !0
                },
                drop: function(e, i) {
                    var r = $(i.draggable[0]).data("stage-id")
                      , a = o.findWhere(t.statuses, {
                        id: r
                    })
                      , l = t.$el.find(".digital-pipeline__table")
                      , c = a.option
                      , d = t.element_type == n.convertElementType(AMOCRM.element_types.customers, "string") ? "" : " Ђ" + n.escapeHTML(t.statuses[0].option) + "ї";
                    new s({
                        text: AMOCRM.lang.page.status_delete + " Ђ" + n.escapeHTML(c) + "ї? " + AMOCRM.lang.page.status_delete2 + d + "\n" + AMOCRM.lang.page.status_delete3,
                        accept_text: AMOCRM.lang.button_yes,
                        decline_text: AMOCRM.lang.button_no,
                        accept: function() {
                            t.deleteStatus(a),
                            this.destroy()
                        }
                    }),
                    l.sortable("enable")
                },
                out: function(e, i) {
                    var s = t.$el.find(".digital-pipeline__item_fake-head")
                      , n = t.$el.find(".digital-pipeline__table");
                    t.$el.find(".ui-sortable-helper").find(".digital-pipeline__header-inner").removeClass("digital-pipeline__header-inner_delete"),
                    t.freezScroll = !1,
                    n.sortable("enable"),
                    s.css({
                        "max-width": "150px",
                        width: "150px",
                        display: "table-cell",
                        background: "#e8e8e8"
                    })
                }
            })
        },
        resortStatuses: function(e) {
            for (var t = e + 1; t < this.statuses.length - 1; t++)
                this.statuses[t].sort += this.step_sort
        },
        setPipelinePosition: function(e, t, i) {
            var s = this
              , n = 0
              , o = 10
              , r = s.$scrollable.scrollLeft()
              , a = s.$scrollable.width()
              , l = i.item.outerWidth()
              , c = {
                left: s.$scrollable.offset().left,
                right: s.$scrollable.offset().left + a
            }
              , d = {
                left: i.helper.offset().left,
                right: i.helper.offset().left + l
            }
              , u = 0;
            d.left <= c.left + 50 ? (u = Math.floor((100 - (d.left - c.left)) / 10),
            n = -(o + u)) : d.right >= c.right - 50 && (u = Math.floor((100 - (c.right - d.right)) / 10),
            n = o + u),
            s.$scrollable.scrollLeft(r + n)
        },
        resortColumnColor: function() {
            this.$el.find(".digital-pipeline__row").each(function() {
                $(this).find(".digital-pipeline__item").removeClass("digital-pipeline__item_even").removeClass("digital-pipeline__item_odd"),
                $(this).find(".digital-pipeline__item").each(function(e) {
                    e % 2 === 0 ? $(this).addClass("digital-pipeline__item_odd") : $(this).addClass("digital-pipeline__item_even")
                })
            })
        },
        resortPreSystemStatus: function() {
            var e = this.$el.find(this._selector("item"))
              , t = this;
            e.removeClass("digital-pipeline__item_pre-system").find(this._selector("item_add_stage")).removeClass("show_plus"),
            e.each(function(e, i) {
                var s = $(i)
                  , n = s.data("stage-id")
                  , r = o.findWhere(t.statuses, {
                    id: n
                }).sort
                  , a = o.findWhere(t.statuses, {
                    sort: r + 10
                });
                a && 142 === a.id && s.addClass("digital-pipeline__item_pre-system").find(t._selector("item_add_stage")).addClass("show_plus")
            })
        },
        initSortable: function() {
            var e = this.$el.find(".digital-pipeline__table")
              , t = this;
            this.$sortable = e.sortable({
                helper: "clone",
                opacity: .7,
                placeholder: "digital-pipeline__item_fake-head",
                forceHelperSize: !0,
                handle: ".digital-pipeline__header-inner",
                items: ".digital-pipeline__item_head:not(.digital-pipeline__item_head-system)",
                cancel: ".digital-pipeline__item_head-system",
                cursor: "move",
                scrollSensitivity: 10,
                zIndex: 1e3,
                scroll: !1,
                tolerance: "intersect",
                start: function(i, s) {
                    var n = $(s.item[0])
                      , o = n.clone();
                    if (r.stopHoverMenu(),
                    n.after(o),
                    o.hide(),
                    t.$cloned_status = o,
                    n.show().css({
                        opacity: .2
                    }),
                    e.sortable("refreshPositions"),
                    t.hs.scrollPause(),
                    t._findElem("item_add_stage").hide(),
                    t.$el.find(".digital-pipeline__delete-status-container").addClass("digital-pipeline__delete-status-container_show"),
                    !t.holding) {
                        var l = $(this);
                        t.holding = setInterval(function() {
                            t.freezScroll || (t.setPipelinePosition(this, i, s),
                            a(function() {
                                l.sortable("refreshPositions")
                            }, 50))
                        }, 50)
                    }
                },
                sort: function(e, i) {
                    var s = t.$el.find(".digital-pipeline__item_fake-head")
                      , o = $(i.item[0])
                      , r = o.data("stage-id")
                      , a = $(i.placeholder[0]);
                    t.element_type != n.convertElementType(AMOCRM.element_types.customers, "string") && ($(a.prev(".digital-pipeline__item_head")[0]).data("stage-id") == r || $(a.next(".digital-pipeline__item_head")[0]).data("stage-id") == r ? s.css({
                        "min-width": "0px",
                        width: "0px",
                        background: "none"
                    }) : s.css({
                        "min-width": "150px",
                        width: "150px",
                        background: "#e8e8e8"
                    }))
                },
                beforeStop: function() {
                    var e = t.$el.find(".digital-pipeline__item_fake-head");
                    this.fake_head = e.width() > 1
                },
                stop: function(e, i) {
                    var s = $(i.item[0]);
                    r.startHoverMenu(),
                    clearInterval(t.holding),
                    t.holding = null,
                    t.freezScroll = !1,
                    this.fake_head ? (t.$cloned_status.css({
                        opacity: .2,
                        width: t.cell_width,
                        "max-width": t.cell_width
                    }).show(),
                    s.css({
                        width: "150px",
                        "max-width": "150px",
                        opacity: 0
                    }).animate({
                        width: t.cell_width + "px",
                        "max-width": t.cell_width + "px",
                        opacity: "1"
                    }, 300, function() {
                        t.$cloned_status.animate({
                            width: "0px",
                            "max-width": "0px",
                            opacity: 0
                        }, 500, function() {
                            t.$cloned_status.remove(),
                            t.changeStatusSort(),
                            t.hs.scrollResume(),
                            t.$el.find(".digital-pipeline__delete-status-container").removeClass("digital-pipeline__delete-status-container_show")
                        })
                    })) : (s.css({
                        opacity: 1
                    }),
                    t.$cloned_status.remove(),
                    t.changeStatusSort(),
                    t.hs.scrollResume(),
                    t.$el.find(".digital-pipeline__delete-status-container").removeClass("digital-pipeline__delete-status-container_show")),
                    t._findElem("item_add_stage").removeAttr("style")
                }
            })
        },
        changeStatusSort: function() {
            var e, t = this;
            o.each(t.statuses, function(e) {
                var i = t._findElem("item_head", e.id)
                  , s = i.index();
                e.sort = 10 * s,
                t.checkChanges()
            }),
            e = o.sortBy(t.statuses, function(e) {
                return e.sort
            }),
            this.statuses = e,
            this.resortColumnColor(),
            setTimeout(function() {
                t.resortPreSystemStatus()
            }, 300)
        },
        deleteStatus: function(e) {
            var t = this._findElem("item_head", e.id)
              , i = this._findElem("item_trigger", e.id)
              , s = [];
            i.remove(),
            t.remove(),
            e.deleted = 1,
            this.collection.each(function(t) {
                var i = t.get("statuses")
                  , n = o.indexOf(i, e.id);
                -1 != n && i.splice(n, 1),
                0 == i.length && s.push(t)
            }),
            this.collection.remove(s),
            this.checkStatusesLength(),
            this.checkChanges(),
            this.resortColumnColor()
        },
        statusNameValidation: function() {
            var e = !0
              , t = this;
            return o.each(this.statuses, function(i) {
                0 !== i.option.length || i.deleted || (e = !1,
                t._findElem("data_stage_id", i.id).find(".pipeline_cell-head").addClass("invalid_status"))
            }),
            e
        },
        statusesUpdatePrepare: function() {
            var e = this;
            this.pipeline_for_api.request = {
                pipelines: {
                    update: {}
                }
            },
            this.pipeline_for_api.request.pipelines.update[e.pipeline.id] = {
                id: e.pipeline.id,
                sort: e.pipeline.sort,
                name: e.pipeline.name,
                is_main: e.pipeline.is_main ? "on" : "",
                statuses: {}
            },
            o.each(this.statuses, function(t) {
                t.deleted || (e.pipeline_for_api.request.pipelines.update[e.pipeline.id].statuses[t.id] = {
                    color: t.bg_color,
                    name: t.option,
                    sort: t.sort,
                    pipeline_id: e.pipeline.id
                })
            })
        },
        statusesUpdate: function() {
            var e = this
              , t = $.Deferred();
            return e.deepEqual(e.statuses, e.defaults_statuses) && e.deepEqual(e.pipeline, e.defaults_pipeline) ? t.resolve() : (this.statusesUpdatePrepare(),
            $.ajax({
                url: e.endpoint_statuses,
                data: e.pipeline_for_api,
                type: "POST"
            }))
        },
        deletePipeline: function() {
            var e = this;
            $.ajax({
                url: "/ajax/v1/pipelines/delete",
                method: "POST",
                data: {
                    request: {
                        id: e.pipeline.id
                    }
                }
            }).done(function() {
                e._$document.trigger("pipeline:saved")
            })
        },
        hideElements: function() {
            var e = this.$el.find(".digital-pipeline__business_processes, .digital-pipeline__add-process, .digital-pipeline__connect-items, .digital-pipeline__user-authorization, .digital-pipeline__empty-connect, .clone, .digital-pipeline__add-new-group, .digital-pipeline__trigger-container,.digital-pipeline__trigger-arrow-container, .digital-pipeline__tag-group")
              , t = this._findElem("row_not_header")
              , i = this._findElem("cancel_button")
              , s = this._elem("back_button")
              , n = this.$el.find(".digital-pipeline__table");
            this.close_blocked = !0,
            n.css("margin-bottom", "-65px"),
            e.hide(),
            s.hide(),
            i.show(),
            t.addClass("digital-pipeline__row_in-edit")
        },
        checkStatusesLength: function() {
            var e = o.where(this.statuses, {
                deleted: 1
            }).length
              , t = this.statuses.length
              , i = this._findElem("delete_status")
              , s = this._findElem("add_stage_plus");
            t - e < this.MINIMAL_STATUSES_LENGTH || t < this.MINIMAL_STATUSES_LENGTH ? i.hide() : i.show(),
            t - 3 >= this.data.limits.statuses ? s.hide() : s.show()
        }
    }
}),
define("lib/pages/settings/digital_pipeline", ["require", "jquery", "backbone", "underscore", "twig", "store", "cocktail", "lib/components/base/modal", "lib/components/base/confirm", "lib/core/page", "lib/components/filter/fast_tags", "lib/common/urlparams", "lib/common/hs", "lib/common/fn", "lib/interface/settings/digital_pipeline/helper", "lib/interface/settings/digital_pipeline/item", "lib/interface/settings/digital_pipeline/modal_cell", "lib/interface/settings/digital_pipeline/mixins/unsorted/visibility", "lib/interface/settings/digital_pipeline/source_items/mail", "lib/interface/settings/digital_pipeline/source_items/chat", "lib/interface/settings/digital_pipeline/source_items/form", "lib/interface/settings/digital_pipeline/source_items/fb_form", "lib/interface/settings/digital_pipeline/source_items/phone", "lib/interface/settings/digital_pipeline/source_items/social_gso", "lib/interface/settings/digital_pipeline/mixins/edit_event_mixin", "lib/interface/settings/digital_pipeline/mixins/edit_statuses_mixin", "vendor/jQuery.dotdotdot/src/jquery.dotdotdot"], function(e) {
    "use strict";
    var t, i, s, n = e("jquery"), o = e("backbone"), r = e("underscore"), a = e("twig"), l = e("store"), c = e("cocktail"), d = e("lib/components/base/modal"), u = e("lib/components/base/confirm"), h = e("lib/core/page"), _ = e("lib/components/filter/fast_tags"), p = e("lib/common/urlparams"), m = e("lib/common/hs"), f = e("lib/common/fn"), g = e("lib/interface/settings/digital_pipeline/helper"), b = e("lib/interface/settings/digital_pipeline/item"), v = e("lib/interface/settings/digital_pipeline/modal_cell"), y = e("lib/interface/settings/digital_pipeline/mixins/unsorted/visibility"), w = e("lib/interface/settings/digital_pipeline/source_items/mail"), C = e("lib/interface/settings/digital_pipeline/source_items/chat"), k = e("lib/interface/settings/digital_pipeline/source_items/form"), x = e("lib/interface/settings/digital_pipeline/source_items/fb_form"), M = e("lib/interface/settings/digital_pipeline/source_items/phone"), A = e("lib/interface/settings/digital_pipeline/source_items/social_gso"), O = e("lib/interface/settings/digital_pipeline/mixins/edit_event_mixin"), $ = e("lib/interface/settings/digital_pipeline/mixins/edit_statuses_mixin");
    return e("vendor/jQuery.dotdotdot/src/jquery.dotdotdot"),
    t = o.Model.extend(),
    i = o.Collection.extend({
        model: t
    }),
    s = h.extend({
        endpoint: "/ajax/settings/pipeline/leads",
        template: "/tmpl/digital_pipeline/leads/index.twig",
        group_template: "/tmpl/digital_pipeline/tag_group.twig",
        tags_template: "/tmpl/digital_pipeline/add_tags.twig",
        preload: ["/tmpl/controls/deadline_select.twig", "/tmpl/common/tooltip.twig"],
        user_pic: "/frontend/images/userpic.png",
        cell_width: 306,
        ESC: 27,
        endpoint_statuses: "/ajax/v1/pipelines/set",
        _getEndpoint: function(e) {
            return this.endpoint + (e[0] ? "/" + e[0] : "")
        },
        _selectors: function() {
            return this._selectors_obj
        },
        _selectors_obj: {
            list_top_actions: ".list__top__actions",
            pipeline_name: ".list-top-nav__text-button_dp",
            save_button: ".digital-pipeline__save-button",
            cancel_button: ".digital-pipeline__cancel-button",
            back_button: ".digital-pipeline__back-button",
            trigger_container: ".digital-pipeline__trigger-container",
            trigger_container_edit: ".digital-pipeline__trigger-container_edit",
            trigger_event: ".digital-pipeline__trigger-event",
            edit_event_button: ".js-event-edit",
            edit_event_bubble: ".digital-pipeline__edit-event-bubble",
            edit_bubble: ".digital-pipeline__edit-bubble",
            connect_item: ".digital-pipeline__connect-item",
            user_photo: ".digital-pipeline__user-photo",
            item: ".digital-pipeline__item",
            item_inner: ".digital-pipeline__item-inner",
            dp_lead_sources: ".digital-pipeline__lead-sources",
            dp_row_header: ".digital-pipeline__row_header",
            dp_cell_head: ".pipeline_cell-head",
            dp_add_stage: ".digital-pipeline__add-stage-inner",
            dp_add_stage_fix: ".digital-pipeline__add-stage-hover-fix",
            table_holder: ".list__table__holder",
            tag_wrapper: ".digital-pipeline__tag-container",
            trigger_container_read: ".digital-pipeline__trigger-container_read[data-status-id=%s]",
            row_data_handler_sort: ".digital-pipeline__row[data-handler-sort=%handler_sort]",
            data_handler_name: "[data-handler-name=%s]",
            data_handler_code: "[data-handler-code=%s]",
            data_connect_handler: "[data-connect-handler=%s]",
            data_handler_id: "[data-handler-id]",
            data_group_id_n: "[data-group-id=%s]",
            data_group_id: "[data-group-id]",
            data_actions_group_id: "[data-actions-group-id]",
            data_actions_group_id_n: "[data-actions-group-id=%s]",
            pipeline_table: ".digital-pipeline__table",
            handler_container: ".digital-pipeline__handler-container",
            source_item: ".digital-pipeline__source-item",
            source_item_type: ".digital-pipeline__source-item[data-source-type=%s]",
            business_processes_inner_widget: '.digital-pipeline__business_processes-inner[data-action="send_widget_hook"]',
            business_processes_inner_title: ".digital-pipeline__short-task-inner_settings .digital-pipeline__short-task-title"
        },
        source_item: {
            mail: w,
            chat: C,
            form: k,
            fb_form: x,
            phone: M,
            social_gso: A
        },
        events: function() {
            return r.extend({}, h.prototype.events || {}, {
                "click .digital-pipeline__save-button": "save",
                "click .digital-pipeline__cancel-button": "cancel",
                "click .js-event-edit": "editForwardEvents",
                "click .button-cancel-trigger": "closeTrigger",
                "click .digital-pipeline__trigger-event-action_remove": "deleteForwardEvent",
                "click .digital-pipeline__trigger-event": "changeForwardEvent",
                "click .button-trigger-save": "saveChangeEvents",
                "click .js-digital-pipeline__exit-button": "navigateToLeads",
                "click .js-add-new-group": "addNewGroup",
                "click .js-delete-group": "deleteGroup",
                "click .digital-pipeline__editable-event": "editForwardEventSettingsClick",
                "click .digital-pipeline__header-inner": "editStatusStart",
                "blur .digital-pipeline__edit-status-input": "editStatusCancel",
                "click .color-picker": "colorPaletteToggler",
                "mousedown .digital-pipeline__header-inner": "prepareSortable",
                "click .digital-pipeline__add-stage": "addNewStatus",
                "mouseenter .digital-pipeline__add-stage": "addNewStatusPrepare",
                "mouseleave .digital-pipeline__add-stage": "addNewStatusRevert",
                "click .js-tag-button": "initTags",
                "input .js-customers-days": "statusesDayChecker"
            })
        },
        fixedMenu: r.throttle(function() {
            var e = this._findElem("dp_cell_head").add(this._findElem("dp_add_stage")).add(this._findElem("dp_add_stage_fix"))
              , t = this._$window.scrollTop();
            clearTimeout(this.scroll_stopped),
            e.removeClass("on-scroll-show on-scroll-hide").css("transform", ""),
            this.scroll_stopped = setTimeout(function() {
                e.removeClass("on-scroll-hide").addClass("on-scroll-show").css("transform", "translateY(" + t + "px)")
            }, 200)
        }, 200),
        fixedScenario: r.throttle(function() {
            var e = this._findElem("table_holder")
              , t = this._findElem("tag_wrapper")
              , i = e.scrollLeft()
              , s = this._findElem("dp_lead_sources").outerWidth() + 12;
            clearTimeout(this.scroll_left_stopped),
            t.removeClass("left-scroll-show left-scroll-hide").css("transform", ""),
            this.scroll_left_stopped = setTimeout(function() {
                i > s && t.removeClass("left-scroll-hide").addClass("left-scroll-show").css("transform", "translateX(" + (i - s) + "px)")
            }, 200)
        }, 200),
        deepEqual: function(e, t) {
            if (e === t)
                return !0;
            if (null == e || "object" != typeof e || null == t || "object" != typeof t)
                return !1;
            var i = 0
              , s = 0;
            for (var n in e)
                i += 1;
            for (var n in t)
                if (s += 1,
                !(n in e && this.deepEqual(e[n], t[n])))
                    return !1;
            return i == s
        },
        getTemplate: function(e) {
            return a({
                ref: e
            })
        },
        construct: function(e) {
            var t = n.Deferred()
              , s = this;
            this.data = e.response ? e.response.data : AMOCRM.constant("settings_pipeline_template_params").data,
            AMOCRM.constant("settings_pipeline_template_params") || AMOCRM.constant("settings_pipeline_template_params", e.response),
            this.available = this.data.dp_is_available,
            this.pipeline = this.data.current_pipe,
            this.has_changes = !1,
            this.collection = new i(this.data.actions),
            this.collection.comparator = "delay",
            this.statuses = this.data.statuses,
            this.handlers = r.values(this.data.handlers),
            this.groups = this.data.actions_groups,
            this.cid_group = 0,
            this.element_type = AMOCRM.getBaseEntity(),
            this.lead_sources = this.data.lead_sources,
            this.rows = {},
            this.sources = [],
            r.each(this.groups, function(e) {
                this.rows[e.id] = []
            }, this),
            this.defaults = n.extend(!0, [], this.collection.toJSON()),
            this.defaults_statuses = n.extend(!0, [], this.statuses),
            this.defaults_pipeline = n.extend(!0, [], this.pipeline),
            this.defaults_groups = n.extend(!0, [], this.groups),
            this.logout = {},
            this["delete"] = {
                vk: {
                    actions: {}
                },
                facebook: {
                    actions: {}
                },
                adwords: {
                    actions: {}
                },
                amocrm: {
                    actions: {}
                },
                mailchimp: {
                    actions: {}
                },
                widget: {
                    actions: {}
                }
            },
            this.dp_validation = {
                type: ["group"]
            },
            this.validation = {
                status: r.bind(this.statusNameValidation, this),
                group: r.bind(this.groupValidation, this)
            },
            this.auth_link = {},
            this.pipeline_for_api = {},
            this.freezScroll = !1,
            this.holding = null,
            l.remove("auth_result"),
            l.remove("auth_error"),
            this.token = g.startToken(),
            this.$scrollable = this.$el.find(".js-scroll-x-container"),
            this.renderTopActions(),
            this.initHS(),
            this.initStartItems(),
            this.initStartSource(),
            this.initPreventConfig(),
            this.initEvents(),
            this.initUnsortedEvents(),
            this.initSortable(),
            this.initDroppableDelete(),
            this.getUserpic(),
            this.getHandlersLink(),
            AMOCRM.constant("digital_profiles", {}),
            this.checkStatusesLength(),
            this.checkError(),
            this.buttonAppender(),
            t.done(function(e) {
                s.youtube = e
            }),
            AMOCRM.constant("need_metro_modal") && this.reloadMetroModal(),
            this.close_blocked = !1
        },
        reloadMetroModal: function() {
            this.handlerActionsSplicer().done(r.bind(function(e) {
                var t = n.extend(!0, AMOCRM.constant("metro_modal_options"), {
                    handlers: e,
                    parent_context: this,
                    business_processes: this.collection,
                    auth_link: this.auth_link
                });
                this.openMetroModal(void 0, t),
                AMOCRM.constant("need_metro_modal", !1)
            }, this))
        },
        renderTopActions: function() {
            var e = AMOCRM.router.paths && AMOCRM.router.paths.length > 1 && AMOCRM.router.paths[1]
              , t = /^leads\/.*/.test(e);
            this._findElem("list_top_actions").replaceWith(a({
                ref: "/tmpl/digital_pipeline/common/top_actions.twig"
            }).render({
                back_button: {
                    text: t ? f.i18n("Back") : f.i18n("Exit"),
                    class_name: t ? "js-back-button" : "js-digital-pipeline__exit-button"
                }
            }))
        },
        onNameChange: function(e, t) {
            var i = t.name.toString();
            this.pipeline.id === t.id && (this._elem("pipeline_name").text(i).attr("title", i),
            this.pipeline.name = i,
            this.pipeline.label = i)
        },
        buttonAppender: function(e) {
            var t = this
              , i = e ? r.filter(this.groups, function(t) {
                return t.id == e || t.cid == e ? !0 : void 0
            }) : this.groups;
            r.each(i, function(e) {
                r.each(t.statuses, function(i) {
                    var s = i.id
                      , o = r.isUndefined(e.id) ? t.$el.find(".digital-pipeline__tag-group[data-group-id=" + e.cid + "]") : t.$el.find(".digital-pipeline__tag-group[data-group-id=" + e.id + "]")
                      , a = (o.find(".digital-pipeline__business_processes_multiple").find(".digital-pipeline__business_processes-inner"),
                    o.find("[data-stage-id=" + s + "]"))
                      , l = a.find(".digital-pipeline__business_processes_multiple").find(".digital-pipeline__business_processes-inner")
                      , c = a.find(".digital-pipeline__business_processes_multiple").not(":has(div)")
                      , d = a.find(".digital-pipeline__business_processes_single").find(".digital-pipeline__business_processes-inner")
                      , u = o.find(".digital-pipeline__row_handler-row__multiple")
                      , h = o.find(".digital-pipeline__row_handler-row__single")
                      , _ = h.find("[data-stage-id=" + s + "]")
                      , p = _.find(".digital-pipeline__item-inner")
                      , m = _.height()
                      , f = p.height() + 5
                      , g = u.find("[data-stage-id=" + s + "]")
                      , b = n(t.getTemplate("/tmpl/digital_pipeline/add_process.twig").render());
                    d.length > 0 ? g.find(".digital-pipeline__item-inner").append(b) : m > f ? _.find(".digital-pipeline__item-inner").append(b) : l.length > 0 ? c.length > 0 ? n(c[0]).closest(".digital-pipeline__business_processes_multiple").append(b) : g.append(b) : _.find(".digital-pipeline__item-inner").append(b)
                })
            })
        },
        checkError: function() {
            var e = window.location.hash.replace("#", "")
              , t = e.indexOf("=")
              , i = e.slice(t + 1)
              , s = e.slice(0, t);
            if (i)
                if ("handler" == s)
                    ;
                else if ("action" == s) {
                    var o = this.$el.find(".digital-pipeline__business_processes[data-id=" + i + "]")
                      , r = "multiple" == o.closest(".digital-pipeline__item ").data("handler-type") ? o.find(".digital-pipeline__adw-title") : o.find(".digital-pipeline__short-task-inner_settings")
                      , a = o ? o.offset() : void 0
                      , l = a ? a.left : 100
                      , c = a ? a.top : 0;
                    n("body").animate({
                        scrollTop: c
                    }, {
                        duration: 400
                    }),
                    this.hs.$scroller.animate({
                        scrollLeft: l - 100
                    }, {
                        duration: 400,
                        complete: function() {
                            r.trigger("click")
                        }
                    })
                }
        },
        destruct: function() {
            this._$window.off(this.ns),
            AMOCRM.constant("settings_pipeline_template_params", !1),
            AMOCRM.router.removePreventConfig(),
            AMOCRM.router.preventPageChange(!1),
            this.$sortable.sortable("destroy"),
            this.metro_modal && this.metro_modal.destroy(),
            this.$droppable_delete.droppable("destroy"),
            r.each(this.rows, function(e) {
                r.each(e, function(e) {
                    e.destroy()
                })
            }),
            r.each(this.sources, function(e) {
                e.destroy()
            }),
            n(".list__table__holder").off(this.ns),
            this._$document.off(".dp_metro_modal")
        },
        initEvents: function() {
            this._$document.on("pipelines:name:changed" + this.ns, r.bind(this.onNameChange, this)).on("logout:save" + this.ns, r.bind(this.save, this)).on("rerender:row" + this.ns, r.bind(this.rerenderRow, this)).on("click hide:trigger" + this.ns, r.bind(this.closeTrigger, this)).on("click" + this.ns, ".digital-pipeline__add-process-trigger", r.bind(this.openMetroModal, this)).on("click" + this.ns, ".digital-pipeline__how-to-work-link", r.bind(this.howToWork, this)).on("keydown" + this.ns, r.bind(function(e) {
                e.keyCode == this.ESC && !this.statusNameValidation() && this.add_new_status && AMOCRM.router.back()
            }, this)),
            this._$window.on("scroll" + this.ns, r.bind(this.fixedMenu, this)),
            this.listenTo(this.collection, "add remove change", r.bind(function(e) {
                e && e.get("fake") || this.checkChanges()
            }, this)),
            this.listenTo(this.collection, "change", r.bind(function() {
                this.collection.sort()
            }, this)),
            n(window).on("storage" + this.ns, {
                context: this
            }, this.localStorageCheck),
            n(".list__table__holder").on("scroll" + this.ns, r.bind(this.fixedScenario, this))
        },
        getWidgetsList: function() {
            var e = {}
              , t = {}
              , i = AMOCRM.lang.page.handlers.widget.categories;
            return n.ajax({
                url: "/ajax/v1/widgets/list?filter[widget_locations]=digital_pipeline&full=1",
                dataType: "json",
                type: "GET"
            }).then(r.bind(function(s) {
                return r.map(s.response.widgets, function(s) {
                    return t = r.difference(Object.keys(s.categories), ["recommended"]),
                    e = {
                        name: s.langs[s.current_language][s.name],
                        code: s.widget_code,
                        id: s.widget_id,
                        widget_code: s.widget_code,
                        category: r.isUndefined(r.first(t)) ? i.user : i[r.first(t)],
                        short_desc: s.langs[s.current_language]["widget.short_description"],
                        desc: s.langs[s.current_language]["widget.description"],
                        login: s.langs[s.current_language]["settings.login"],
                        logo: s.dp.logo,
                        settings: {
                            widget: {
                                settings: {}
                            }
                        },
                        template_params: {
                            settings: {
                                logo: s.dp.logo
                            },
                            fields: {}
                        },
                        active: s.active,
                        langs: s.langs,
                        rating: s.rating,
                        sort: 4,
                        actions_type: s.dp.action_multiple ? "multiple" : "single",
                        widget: !0,
                        action: "send_widget_hook",
                        error: null,
                        has_profile: !0
                    },
                    r.each(s.dp.settings, function(t, i) {
                        t.name = s.langs[s.current_language][t.name],
                        e.template_params.fields[i] = t,
                        e.settings.widget.settings[i] = ""
                    }),
                    e
                })
            }, this))
        },
        handlerActionsSplicer: function() {
            var e = this.collection.findWhere({
                action: "send_analytics"
            })
              , t = n.Deferred()
              , i = function(t) {
                var i = n.extend(!0, {}, t)
                  , s = r.findWhere(i, {
                    code: "amocrm"
                }).actions;
                return e && delete s.send_analytics,
                delete s.send_form_analytics,
                i
            };
            return this.handlers_widgets ? t.resolve(i(this.handlers)) : this.getWidgetsList().done(r.bind(function(e) {
                this.handlers_widgets = e,
                this.handlers = this.handlers.concat(e),
                t.resolve(i(this.handlers))
            }, this)),
            t.promise()
        },
        searchWidgets: function(e) {
            var t = n(e.currentTarget)
              , i = (t.val() || "").toLowerCase()
              , s = f.transliterate(i);
            n("#metro-modal-search__clear-btn").show(),
            i.length > 2 ? (r.each(this.handlers, function(e) {
                var t = (e.name || e.code || "").toLowerCase()
                  , n = e.code
                  , o = this.metro_modal.$modal.find('.dp-handler-widgets[data-handler-code="' + n + '"]');
                !t || t.indexOf(i) < 0 && t.indexOf(s) < 0 ? o.hide() : o.show()
            }, this),
            this.metro_modal.$modal.find(".dp-handler-widgets:visible").length ? this.metro_modal.$modal.find(".handlers-not-found").hide() : this.metro_modal.$modal.find(".handlers-not-found").show()) : "" === i && this.clearSearch()
        },
        clearSearch: function() {
            this.metro_modal.$modal.find(".handlers-not-found").hide(),
            n("#metro-modal-search__clear-btn").hide(),
            this.metro_modal.$modal.find("#widgets_search_input").val(""),
            this.metro_modal.$modal.find(".dp-handler-widgets").show()
        },
        openMetroModal: function(e, t) {
            var i, s, o = e ? n(e.currentTarget) : void 0, l = o ? o.closest(".digital-pipeline__item") : void 0, c = l ? l.data("stage-id") : void 0, u = l ? l.data("actions-group-id") : void 0, h = this;
            this.handlerActionsSplicer().done(r.bind(function(e) {
                t = t || {
                    handlers: e,
                    parent_context: this,
                    business_processes: this.collection,
                    user_photos: AMOCRM.constant("digital_profiles"),
                    auth_link: this.auth_link,
                    target_group: u,
                    target_status: c
                },
                AMOCRM.constant("metro_modal_options", t),
                s = r.filter(t.handlers, function(e) {
                    return e.widget ? void 0 : e
                }),
                i = r.sortBy(r.where(t.handlers, {
                    widget: !0
                }), function(e) {
                    return -e.active
                }),
                t.handlers = s.concat(i),
                this.metro_modal = new d({
                    class_name: "metro-modal modal-list",
                    init: a._preload(["/tmpl/digital_pipeline/modal_templates/metro_modal.twig"], function(e) {
                        e.trigger("modal:loaded").html(a({
                            ref: "/tmpl/digital_pipeline/modal_templates/metro_modal.twig"
                        }).render(t)).trigger("modal:centrify").find(".digital-pipeline__connect-description").dotdotdot(),
                        h._$document.on("input" + h.ns + ".dp_metro_modal", "#widgets_search_input", r.bind(h.searchWidgets, h)).on("click" + h.ns + ".dp_metro_modal", "#metro-modal-search__clear-btn", r.bind(h.clearSearch, h)),
                        r.each(t.handlers, function(i) {
                            new v({
                                el: e.find("[data-handler-code=" + i.code + "]"),
                                type: e.find("[data-handler-code=" + i.code + "]").data("handler-type"),
                                handler: i.widget ? "widget" : e.find("[data-handler-code=" + i.code + "]").data("handler-code"),
                                handler_id: i.id,
                                settings: i.settings,
                                widget_code: i.widget_code,
                                langs: i.langs,
                                handlers: t.handlers,
                                target_status: t.target_status,
                                target_group: t.target_group,
                                parent_context: t.parent_context,
                                modal_context: h.metro_modal,
                                business_processes: t.business_processes,
                                cached_button: o,
                                name: i.name,
                                template_params: i.template_params
                            })
                        })
                    })
                })
            }, this))
        },
        initStartItems: function() {
            var e, t = this;
            this._findElem("data_actions_group_id").each(function() {
                var i = n(this).data("actions-group-id");
                e = new b({
                    el: this,
                    business_processes: t.collection,
                    handlers: t.handlers,
                    group_id: i,
                    onRemove: r.bind(t.onRemove, t),
                    onChangeProcessSet: r.bind(t.onChangeProcessSet, t),
                    onChangeProcessGet: r.bind(t.onChangeProcessGet, t),
                    cacheCloneSet: r.bind(t.cacheCloneSet, t),
                    cacheCloneGet: r.bind(t.cacheCloneGet, t),
                    parent_context: t,
                    getActualHandlers: r.bind(function() {
                        return t.handlers
                    }, t),
                    onMetroModal: r.bind(t.openMetroModal, t)
                }),
                t.rows[i].push(e)
            }),
            this.fillWidgetModel()
        },
        fillWidgetModel: function() {
            var e = this
              , t = {}
              , i = []
              , s = "?filter[widget_id][]=";
            e._elem("business_processes_inner_widget").each(function() {
                var e = n(this);
                t[e.data("widget-id")] || (t[e.data("widget-id")] = []),
                t[e.data("widget-id")].push(e)
            }),
            r.isEmpty(t) || (i = r.keys(t),
            s += i.join("&filter[widget_id][]="),
            n.ajax({
                url: "/ajax/v1/widgets/list/" + s + "&full=1",
                dataType: "json",
                type: "GET",
                success: function(i) {
                    var s, o, a, l, c, d, u, h;
                    i && f.has_keys(i, ["response", "widgets"]) && r.isArray(i.response.widgets) && i.response.widgets.forEach(function(i) {
                        h = i.langs[i.current_language][i.name],
                        d = i.dp.settings,
                        u = i.logo,
                        r.each(d, function(e) {
                            e.name && (e.name = i.langs[i.current_language][e.name])
                        }),
                        t[i.widget_id].forEach(function(t) {
                            t.find(e._selectors().business_processes_inner_title).text(h),
                            l = {},
                            c = {
                                settings: {
                                    logo: u
                                },
                                fields: {}
                            },
                            s = t.parent().data("id"),
                            o = e.collection.get(s),
                            a = o.get("settings"),
                            a && f.has_keys(a, ["widget", "settings"]) && (r.each(d, function(e, t) {
                                e.value = a.widget.settings[t] ? a.widget.settings[t] : "",
                                c.fields[t] = n.extend(!0, {}, e),
                                l[t] = e.value
                            }),
                            a.widget.settings = l),
                            o.set({
                                template_params: c,
                                settings: a,
                                name: h
                            }, {
                                silent: !0
                            }),
                            e.rerenderRow(null, {
                                group_id: o.get("group_id")
                            })
                        })
                    })
                }
            }))
        },
        initStartSource: function() {
            var e, t = this;
            r.each(this.lead_sources, function(i) {
                var s = this._findElem("source_item_type", i.type);
                r.isFunction(t.source_item[i.type]) && (e = new t.source_item[i.type]({
                    el: s,
                    id: i.id,
                    active: i.active,
                    type: i.type,
                    elements: i.elements,
                    parent_context: t
                })),
                this.sources.push(e)
            }, this),
            r.each(t.sources, function(e) {
                t.listenTo(e, "params:ready", function(i) {
                    t.getSpecificSourceOptions(e, i)
                }),
                t.listenTo(e, "params:fail", function(i) {
                    t.failSpecificSourceOptions(e, i)
                })
            })
        },
        getSpecificSourceOptions: function(e, t) {
            var i = t.name
              , s = t.option
              , n = t.force
              , o = e.getSpecificOptions(s);
            if (r.has(this, i) && !n)
                throw new Error("This property already exist:" + i);
            if (r.isUndefined(o))
                throw new Error("Some wrong options called: " + s);
            this[i] = o,
            this.trigger(i + ":recieved", this[i])
        },
        failSpecificSourceOptions: function(e, t) {
            var i = t.name
              , s = t.option;
            this.trigger(i + ":failed", s)
        },
        initTags: function(e) {
            var t = this
              , i = n(e.currentTarget)
              , s = i.closest(".digital-pipeline__tag-group")
              , o = s.data("group-id")
              , a = r.findWhere(this.groups, {
                id: o
            }) ? r.findWhere(this.groups, {
                id: o
            }) : r.findWhere(this.groups, {
                cid: o
            });
            s.find(".digital-pipeline__tag-error").removeClass("digital-pipeline__tag-error_show"),
            e.stopPropagation(),
            this.tags = new _({
                $el: i,
                entity: t.element_type,
                tags: a.tags ? r.map(a.tags, function(e) {
                    return {
                        name: e.name,
                        id: e.id
                    }
                }) : [],
                cant_add: !0,
                suggest_class_name: "digital-pipelines__tags",
                items_template: "/tmpl/digital_pipeline/add_tags.twig",
                onInit: function() {
                    this.setPositions()
                },
                onDestroy: function() {
                    var e = r.map(this.getSelectedItems(), function(e) {
                        return {
                            id: e.id,
                            name: e.title
                        }
                    });
                    a.tags = e,
                    t.checkChanges(),
                    t.tags = null
                }
            })
        },
        initPreventConfig: function() {
            AMOCRM.router.registerPreventConfig({
                accept_text: AMOCRM.lang.button_save,
                decline_text: AMOCRM.lang.button_cancel,
                accept: r.bind(function(e) {
                    this.save(function() {
                        e()
                    })
                }, this),
                decline: function(e) {
                    AMOCRM.router.preventPageChange(!1),
                    e()
                }
            })
        },
        initHS: function() {
            this.hs = this._addComponent(m, {
                wrapper: this.$scrollable.parent(),
                scroller: this.$scrollable,
                hide_scrollbar: !0
            })
        },
        topTogglerClick: function(e) {
            var t = p.getQueryString();
            return this.$(".control-toggler__item-selected").not(e.currentTarget).removeClass("control-toggler__item-selected"),
            AMOCRM.router.navigate(e.currentTarget.getAttribute("href") + (t ? "?" + t : ""), {
                trigger: !0,
                no_loading: !0
            }),
            !1
        },
        getHandlersLink: function() {
            var e = this;
            r.each(this.handlers, function(t) {
                (!t.active || t.error) && e.getLink.call(e, t.code)
            })
        },
        getLink: function(e) {
            var t, i = this;
            AMOCRM.constant("settings_pipeline_template_params").data.endpoints[e] && AMOCRM.constant("settings_pipeline_template_params").data.endpoints[e].check_auth && n.ajax({
                url: AMOCRM.constant("settings_pipeline_template_params").data.endpoints[e].check_auth,
                beforeSend: function(e) {
                    e.setRequestHeader("X-Auth-Token", i.token)
                }
            }).done(function(s) {
                t = s.response.auth.link,
                t && (i.auth_link[e] = t)
            })
        },
        makeHandlerError: function(e, t, i) {
            var s = r.findWhere(this.handlers, {
                code: e
            })
              , n = '<span class="icon icon-dashboard-todo-tile-danger digital-pipeline__error-icon"></span>'
              , o = this.$el.find(".digital-pipeline__business_processes-inner_" + e).find(".digital-pipeline__business_processes-inner-wrapper_error-container");
            s.error = {
                error: t,
                error_message: i
            },
            o.append(n)
        },
        localStorageCheck: function(e) {
            l.get("auth_result") ? (e.data.context.metro_modal.destroy(),
            AMOCRM.constant("need_metro_modal", !0),
            n(document).trigger("page:reload")) : l.get("auth_error") && g.errorModal(l.get("auth_error")),
            n(window).off("storage" + this.ns),
            l.remove("auth_result"),
            l.remove("auth_error")
        },
        onRemove: function(e, t, i) {
            this["delete"][e].actions[t] = i
        },
        cacheCloneSet: function(e) {
            this.$clone = e
        },
        cacheCloneGet: function() {
            return this.$clone
        },
        onChangeProcessSet: function(e) {
            e ? this.hs.scrollPause() : (this._$document.off("mousemove"),
            this.hs.scrollResume()),
            this.in_process = e
        },
        onChangeProcessGet: function() {
            return this.in_process
        },
        rerenderRow: function(e, t) {
            r.each(this.rows[t.group_id], function(e) {
                e.rerender(t.error)
            }),
            this.buttonAppender(t.group_id),
            t.new_bp && this.renderFakeAction(t)
        },
        renderFakeAction: function(e) {
            setTimeout(function() {
                var t = n(".digital-pipeline__business_processes[data-id=" + e.new_bp + "]");
                e.new_bp && (t.find(".digital-pipeline__short-task-inner_settings").trigger("click", {
                    new_process: !0,
                    bp_model: e.bp_model
                }),
                t.find(".digital-pipeline__adw-title").trigger("click", {
                    new_process: !0,
                    bp_model: e.bp_model
                }))
            }, 100)
        },
        groupValidation: function() {
            var e = this
              , t = r.filter(this.groups, function(e) {
                return 0 != e.tags.length || e.main ? void 0 : !0
            })
              , i = r.filter(t, function(t) {
                return r.some(e.collection.models, function(e) {
                    return e.get("group_id") == t.id || e.get("group_id") == t.cid ? !0 : void 0
                }) ? void 0 : !0
            });
            return e._findElem("data_group_id").find("digital-pipeline__tag-error").removeClass("digital-pipeline__tag-error"),
            i.length > 0 ? void r.each(i, function(t) {
                var i = t.id ? t.id : t.cid;
                e._findElem("data_group_id_n", i).find(".digital-pipeline__tag-error").addClass("digital-pipeline__tag-error_show")
            }) : !0
        },
        addNewGroup: function() {
            var e, t, i = this, s = this.cid_group++, o = "c" + s, a = {
                cid: o,
                pipe_id: this.pipeline.id,
                tags: [],
                main: 0
            }, l = {
                group: a,
                rows: this.statuses,
                digital_handler: this.handlers,
                business_processes: this.collection.toJSON(),
                dp_is_available: this.available
            }, c = this._findElem("pipeline_table");
            this.rows[o] = [],
            this.groups.push(a),
            t = n(this.getTemplate(this.group_template).render(l)),
            c.find(".digital-pipeline__add-new-group").before(t),
            this._findElem("data_actions_group_id_n", o).each(function() {
                e = new b({
                    el: this,
                    business_processes: i.collection,
                    handlers: i.handlers,
                    group_id: o,
                    handler_code: "",
                    onRemove: r.bind(i.onRemove, i),
                    onChangeProcessSet: r.bind(i.onChangeProcessSet, i),
                    onChangeProcessGet: r.bind(i.onChangeProcessGet, i),
                    getActualHandlers: r.bind(function() {
                        return i.handlers
                    }, i),
                    cacheCloneSet: r.bind(i.cacheCloneSet, i),
                    cacheCloneGet: r.bind(i.cacheCloneGet, i),
                    parent_context: i
                }),
                i.rows[o].push(e)
            }),
            this.buttonAppender(o)
        },
        deleteGroup: function(e) {
            var t, i = n(e.currentTarget).closest(".digital-pipeline__tag-group"), s = i.data("group-id"), o = this;
            r.each(this.rows[s], function(e) {
                e.destroy()
            }),
            delete this.rows[s],
            t = r.indexOf(this.groups, r.findWhere(o.groups, {
                id: s
            }) > -1) ? r.indexOf(this.groups, r.findWhere(o.groups, {
                id: s
            })) : r.indexOf(this.groups, r.findWhere(o.groups, {
                cid: s
            })),
            this.groups.splice(t, 1),
            i.remove(),
            this.checkChanges()
        },
        rerenderItemTable: function() {
            r.each(this.rows, function(e) {
                r.each(e, function(e) {
                    e.rerender()
                })
            })
        },
        checkChanges: function() {
            var e, t = this, i = [{
                defaults: t.defaults,
                obj: t.collection.toJSON()
            }, {
                defaults: t.defaults_statuses,
                obj: t.statuses
            }, {
                defaults: t.defaults_pipeline,
                obj: t.pipeline
            }, {
                defaults: t.defaults_groups,
                obj: t.groups
            }], s = this._elem("save_button"), n = this._elem("cancel_button"), o = this._elem("back_button");
            e = r.every(i, function(e) {
                return t.deepEqual(e.defaults, e.obj)
            }),
            this.has_changes = !e,
            s.trigger("button:" + (e ? "disable" : "enable")),
            o.trigger("button:" + (e ? "enable" : "disble")),
            e ? n.hide() : n.show(),
            e ? o.show() : o.hide(),
            AMOCRM.router.preventPageChange(this.has_changes)
        },
        editForwardEvents: function(e) {
            if (!this.close_blocked) {
                this.closeTrigger(e);
                var t, i = n(e.currentTarget), s = i.closest(this._selector("trigger_container")), o = s.data("status-id"), l = r.findWhere(this.statuses, {
                    id: o
                }), c = s.offset(), d = c.top, u = c.left, h = window.innerHeight, _ = window.pageYOffset, p = n(a({
                    ref: "/tmpl/digital_pipeline/trigger_inner_tmpl.twig"
                }).render({
                    row: l,
                    type: "edit",
                    buttons: !0
                }));
                s.addClass("digital-pipeline__trigger-container_in_edit"),
                i.hasClass("digital-pipeline__add-event") && i.hide(),
                t = s.outerHeight(),
                this.$el.append(p),
                this.hs.scrollPause();
                var m = d - _
                  , f = h - m - t
                  , p = this._findElem("trigger_container_edit")
                  , g = p.outerHeight();
                t + 200 > f ? p.css({
                    top: d - g - 15,
                    left: u - 65
                }).addClass("dp__trigger-edit-top") : p.css({
                    top: d + t + 15,
                    left: u - 65
                }).removeClass("dp__trigger-edit-top"),
                this.edited_status = l,
                this.cloned_status = n.extend(!0, {}, this.edited_status)
            }
        },
        deleteForwardEvent: function(e) {
            this.closeTrigger(e);
            var t, i = n(e.currentTarget).closest(this._selector("trigger_event")), s = i.closest(this._selector("trigger_container")), o = s.data("status-id"), a = r.findWhere(this.statuses, {
                id: o
            }), l = i.data("event-id");
            this.edited_status = a,
            this.cloned_status = n.extend(!0, {}, this.edited_status),
            t = r.findWhere(this.cloned_status.forward_events, {
                id: l
            }),
            t.enabled = 0,
            this.clearEventSettings(t),
            this.close_blocked = !1,
            this.saveChangeEvents(e, l)
        },
        clearEventSettings: function(e) {
            18 == e.id ? e.settings = {
                sites: []
            } : e.settings = null
        },
        changeForwardEvent: function(e) {
            var t = n(e.currentTarget)
              , i = t.closest(this._selector("trigger_container")).data("status-id")
              , s = this._findElem("trigger_container_read", i)
              , o = this.cloned_status
              , a = t.data("action")
              , l = t.data("event-id");
            "add" == a ? (r.findWhere(o.forward_events, {
                id: l
            }).enabled = 1,
            s.append(t),
            this.saveChangeEvents(e)) : "information" == a && this.howToWork(e, t.data("event-information"))
        },
        saveChangeEvents: function(e, t) {
            var i = n(e.currentTarget)
              , s = i.closest(this._selector("item_inner"))
              , o = i.closest(this._selector("trigger_container")).data("status-id")
              , a = r.findWhere(this.statuses, {
                id: o
            });
            this.cloned_status && n.extend(this.edited_status, this.cloned_status),
            this.closeTrigger(e),
            s.html(this.getTemplate("/tmpl/digital_pipeline/trigger_inner_tmpl.twig").render({
                row: a,
                type: "read"
            })),
            this.checkChanges(),
            this.eventsValidation(e, a, t)
        },
        save: function(e, t) {
            var i, s = {
                statuses: this.statuses,
                actions: this.collection.toJSON(),
                logout: t,
                actions_groups: this.groups,
                delete_actions: this["delete"]
            }, o = this, a = this._elem("save_button");
            if (this.tags && this.tags.destroy(),
            t && (this.has_changes = !0,
            n(window).off("storage" + this.ns),
            l.remove("auth_result"),
            l.remove("auth_error")),
            this.has_changes) {
                if (this.dp_validation.type.length > 0 && (i = r.every(this.dp_validation.type, function(e) {
                    return o.validation[e]()
                }),
                !i))
                    return;
                if (!this.available && !this.available_save && !t)
                    return void this.callAvailableModal(e, t);
                a.trigger("button:load:start"),
                n.ajax({
                    url: "/ajax/settings/pipeline/" + this.element_type + "/" + this.pipeline.id + "/save",
                    method: "POST",
                    data: s
                }).done(function(t) {
                    "success" == t.status ? (AMOCRM.router.removePreventConfig(),
                    AMOCRM.router.preventPageChange(!1),
                    r.isFunction(e) ? (o.statusesUpdate(),
                    e()) : o.statusesUpdate().done(function() {
                        AMOCRM.router.removePreventConfig(),
                        AMOCRM.router.preventPageChange(!1),
                        o.metro_modal && o.metro_modal.destroy(),
                        o.update_tarif ? AMOCRM.router.navigate("/settings/pay/", {
                            trigger: !0
                        }) : n(document).trigger("page:reload")
                    }).fail(function() {
                        g.errorModal(),
                        a.trigger("button:load:stop")
                    })) : (g.errorModal(t.error),
                    a.trigger("button:load:stop"))
                }).fail(function() {
                    g.errorModal(),
                    a.trigger("button:load:stop")
                })
            }
        },
        cancel: function() {
            AMOCRM.router.preventPageChange(!1),
            this._$document.trigger("page:reload")
        },
        navigateToLeads: function() {
            AMOCRM.router.navigate("/leads/pipeline/" + this.pipeline.id, {
                trigger: !0
            })
        },
        callAvailableModal: function(e, t) {
            var i = this;
            new u({
                class_name: "digital-pipeline__available-modal",
                template: "/tmpl/digital_pipeline/modal_templates/available_modal.twig",
                entity: i.element_type,
                disable_overlay_click: !0,
                destroy: function() {
                    i.available = !0,
                    i.save(e, t)
                },
                accept: function() {
                    i.update_tarif = !0,
                    this.modal.destroy()
                }
            })
        },
        howToWork: function(e, t) {
            var i = this
              , s = t || n(e.currentTarget).closest(this._selector("connect_item")).data("connect-handler") || n(e.currentTarget).closest(this._selector("handler_container")).data("handler-code") || n(e.currentTarget).closest(this._selector("item")).data("handler-name") || n(e.currentTarget).closest(this._selector("edit_event_bubble")).data("event-service") || n(e.currentTarget).closest(this._selector("edit_bubble")).data("handler");
            new d({
                class_name: "modal-how-to-work modal-list",
                init: function(e) {
                    e.trigger("modal:loaded").html(i.getTemplate("/tmpl/digital_pipeline/how_to_work/" + s + "/" + AMOCRM.lang_id + ".twig").render()).trigger("modal:centrify")
                }
            })
        },
        getUserpic: function() {
            var e = this;
            r.each(this.data.endpoints, function(t, i) {
                var s = i
                  , o = r.findWhere(e.handlers, {
                    code: s
                });
                t.profile && o.active && !o.error && n.ajax({
                    beforeSend: function(t) {
                        t.setRequestHeader("X-Auth-Token", e.token)
                    },
                    url: t.profile
                }).done(function(t) {
                    AMOCRM.constant("digital_profiles")[s] = t.response,
                    n("[data-handler-code=" + s + "]").find(".digital-pipeline__user-photo").attr("src", t.response.profile.avatar || e.user_pic)
                }).fail(function(t) {
                    f.has_keys(t, ["responseJSON", "response", "error"]) && f.has_keys(t, ["responseJSON", "response", "error_code"]) && t.responseJSON.response.error_code === e.data.errors.handler_auth_error.code && t.responseJSON.response.error === e.data.errors.handler_auth_error.error && (e.getLink(s),
                    e.makeHandlerError(s, t.responseJSON.response.error_code, t.responseJSON.response.error))
                })
            })
        },
        closeTrigger: function(e) {
            var t = this._findElem("edit_event_button");
            r.isUndefined(e) || e.stopPropagation(),
            this.cloned_status = null,
            !n(e.currentTarget).hasClass("button-cancel-trigger") && !n(e.currentTarget).hasClass("save-site") && n(e.target).closest(this._selector("edit_event_bubble")).length > 0 || this.close_blocked || AMOCRM.constant("show_MainTour") || (t.show(),
            this._findElem("trigger_container_edit").remove(),
            this.closeEvent(),
            this.destroyEventsForms(),
            this.hs.scrollResume(),
            n(document).trigger("hide:toggler"))
        },
        destroyEventsForms: function() {
            r.each(this.events_forms, function(e) {
                e.destroy()
            })
        }
    }),
    c.mixin(s, O),
    c.mixin(s, $),
    c.mixin(s, y),
    s
}),
define("lib/pages/settings/customers/digital_pipeline", ["require", "jquery", "underscore", "lib/common/fn", "lib/pages/settings/digital_pipeline", "lib/interface/settings/digital_pipeline/status_edit_form"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/common/fn"), o = e("lib/pages/settings/digital_pipeline"), r = e("lib/interface/settings/digital_pipeline/status_edit_form");
    return t = o.extend({
        endpoint: "/ajax/settings/pipeline/customers",
        template: "/tmpl/digital_pipeline/customers/index.twig",
        edit_templates: i.extend({}, o.prototype.edit_templates, {
            header_noedit: "/tmpl/digital_pipeline/customers/header_tmpl_inner.twig",
            header_inner: "/tmpl/digital_pipeline/customers/edit_status_inner.twig",
            headers: "/tmpl/digital_pipeline/customers/edit_statuses.twig"
        }),
        endpoint_statuses: "/ajax/v1/customers_periods/set",
        step_sort: 1,
        max_count_statuses: 13,
        renderTopActions: s.noop,
        editStatusStart: function(e) {
            var t, o = this, a = i(e.currentTarget).closest(this._selector("item")), l = a.data("stage-id"), c = this._findElem("row_header"), d = s.findWhere(this.statuses, {
                id: l
            });
            if (d.editable) {
                var u;
                a.html(o.getTemplate(o.edit_templates.header_inner).render({
                    row: d,
                    colors: o.data.statuses_colors,
                    only_number: !0
                })).addClass("digital-pipeline__item_head-edit"),
                u = c.find("[data-stage-id=" + d.id + "]"),
                o._addComponent(r, {
                    el: u,
                    status: d,
                    checkDpChanges: s.bind(o.checkChanges, o),
                    deleteStatusCallback: s.bind(o.deleteStatus, o)
                }),
                t = c.find("[data-stage-id=" + l + "]").find(this._selector("edit_status_input")),
                t.autosizeInput(),
                n.setCursorPosition(t, 999),
                this.dp_validation.type.push("status"),
                this.status_in_edit = !0,
                this.checkStatusesLength(),
                this.edited_status = {
                    id: l,
                    $el: a
                }
            }
        },
        statusesDayChecker: function(e) {
            var t = i(e.currentTarget)
              , s = t.val()
              , o = t.closest(".digital-pipeline__head-title-inner").find(".digital-pipeline__edit-status-input-days-placeholder");
            o.html(n.numeralWord(s, n.i18n("day,days,days,days")) + " " + AMOCRM.lang.page.before_purchase),
            t.autosizeInput()
        },
        statusesUpdatePrepare: function() {
            var e, t, n = this, o = {};
            this.pipeline_for_api.request = {
                customers_periods: {
                    update: []
                }
            },
            s.each(this.statuses, function(s, r) {
                for (var a = r + 1; a < n.statuses.length; a++)
                    if (!n.statuses[a].deleted) {
                        t = n.statuses[a];
                        break
                    }
                e = "system" != s.type && t && t.option ? s.option - t.option : s.option,
                !s.deleted && s.editable && (o = {
                    color: s.bg_color,
                    period: e,
                    sort: s.sort
                },
                parseInt(s.id) > 0 && (o = i.extend(o, {
                    id: s.id
                })),
                n.pipeline_for_api.request.customers_periods.update.push(o))
            })
        },
        statusNameValidation: function() {
            var e, t, i, n = !0, o = this;
            return s.each(this.statuses, function(s, r) {
                i = !0,
                e = o.statuses[r - 1],
                t = o.statuses[r + 1],
                "system" != s.type && (s.option = parseInt(s.option),
                i = s.option > 0,
                i && e && "system" != e.type && e.option && (e.option = parseInt(e.option),
                i = s.option < e.option),
                i && t && "system" != t.type && t.option && (t.option = parseInt(t.option),
                i = s.option > t.option)),
                s.editable && 0 == s.option.length && !s.deleted && (n = !1),
                n = n && i
            }),
            n
        },
        resortStatuses: function(e) {
            for (var t = e; t > 0; t--)
                this.statuses[t].sort += this.step_sort
        },
        changeStatusSort: s.noop
    })
}),
define("lib/pages/settings/dp_controller", ["require", "lib/pages/settings/digital_pipeline", "lib/pages/settings/customers/digital_pipeline", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("lib/pages/settings/digital_pipeline"), s = e("lib/pages/settings/customers/digital_pipeline"), n = e("lib/common/fn");
    return t = function(e) {
        var t = AMOCRM.getBaseEntity() == n.convertElementType(AMOCRM.element_types.customers, "string") ? s : i;
        return new t(e)
    }
}),
define("lib/components/lists/elements", ["require", "lib/components/lists/edit/updatable_list", "underscore", "twig", "lib/common/urlparams", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("lib/components/lists/edit/updatable_list"), s = e("underscore"), n = e("twig"), o = e("lib/common/urlparams"), r = e("lib/common/fn");
    return t = i.extend({
        max_page: 0,
        page: 0,
        list_header: null,
        $pagination: null,
        _$summary: null,
        _$list_holder: null,
        $scroller: null,
        list_items: null,
        _catalog_id: null,
        _fields: null,
        search: null,
        events: function() {
            return s.extend({}, s.result(i.prototype, "events"), {
                "click .js-list-row:not(.js-list-row-head)": "clickRowHolder",
                "mousedown .js-list-row:not(.js-list-row-head)": "markRowToShow",
                mousemove: "unMarkRowsFromShow"
            })
        },
        initialize: function(e) {
            i.prototype.initialize.apply(this, arguments),
            this._$list_holder = $("#list_holder"),
            e && e.catalog_id && this.setCatalogId(e.catalog_id)
        },
        setCatalogId: function(e) {
            this._catalog_id = e
        },
        setElement: function(e) {
            var t = i.prototype.setElement.apply(this, arguments);
            return this.$scroller = this.$el.parent(),
            this.initHS(),
            this.initListHeader({
                entity: this._catalog_id
            }),
            t
        },
        initFilter: function(e) {
            var t = {
                el: $(".js-filter-sidebar"),
                is_list: !0,
                active_selector: !1,
                active_class: !1,
                disabled_users: !0,
                has_pipelines: !1,
                can_save_preset: !1,
                separate_order_by: !0
            };
            return i.prototype.initFilter.call(this, e, t)
        },
        fetched: function(e) {
            var t = e[0]
              , n = e[1];
            s.extend(t, {
                items: s.map(t.catalog_elements, this.parseElementFromResponse, this),
                fields: this.getFields(),
                summary: {
                    count: t.catalog_elements.length,
                    total: t.pagination.total
                },
                filter: {
                    pipelines: !1,
                    statuses: {}
                },
                pagination: s.pick(t.pagination.pages, ["total", "current"])
            }),
            this.page = t.pagination.current,
            this.max_page = t.pagination.total,
            s.each(t.items, function(e) {
                s.extend(e, {
                    entity: "catalogs"
                })
            }),
            i.prototype.fetched.call(this, [t, n])
        },
        loadPage: function(e) {
            e.query_string && e.query_string.length > 0 ? e.query_string += "&" : e.query_string = "",
            e.query_string += "catalog_id=" + this._catalog_id,
            i.prototype.loadPage.call(this, e)
        },
        reloadListData: function() {
            var e = {
                page: this.page || 1,
                query_string: o.getQueryString()
            };
            this.loadPage(e)
        },
        preloadListData: function() {
            return new Promise(s.bind(function(e) {
                this.loadPage({
                    page: this.page || 1,
                    query_string: o.getQueryString(),
                    fetched: function(t, i) {
                        e(t, i)
                    },
                    sync_params: {
                        page_xhr: !1
                    }
                })
            }, this))
        },
        setFields: function(e) {
            return this._fields = e,
            this.setData({
                fields: e
            }),
            this
        },
        getFields: function() {
            return this._fields || []
        },
        clickRowHolder: function(e) {
            var t, i = $(e.target).closest(".js-list-row"), s = i.hasClass("js-click_able");
            return this.unMarkRowsFromShow(),
            s ? (t = this.list_items.findWhere({
                id: i.data("id")
            }),
            void (t && this.trigger("element_clicked", {
                item: t
            }))) : !1
        },
        markRowToShow: function(e) {
            var t = $(e.target).closest(".js-list-row");
            t.addClass("js-click_able")
        },
        unMarkRowsFromShow: function() {
            this.$(".js-list-row:not(.js-list-row-head)").removeClass("js-click_able")
        },
        render: function() {
            var e;
            i.prototype.render.apply(this, arguments),
            e = this.list_items.length > 0,
            this._$list_holder.find(".list__no-items").toggle(!e),
            e ? (this._$list_holder.find(".js-list-columns-group").show(),
            this._$list_holder.find(".ui-resizable-handle").show()) : (this._$list_holder.find(".js-list-columns-group").hide(),
            this._$list_holder.find(".ui-resizable-handle").hide()),
            this._$list_holder.find(".list__table__holder").toggleClass("no-scroller", !e),
            this.$el.toggleClass("list__table-no-items", !e)
        },
        setSummaryElement: function(e) {
            this._$summary = e
        },
        setListAllCheckerElement: function(e) {
            this.$list_all_checker = e
        },
        renderSummary: n._preload(["/tmpl/catalogs/common/search_summary.twig"], "_renderSummary"),
        _renderSummary: function(e) {
            this._$summary.length && this._$summary.html(n({
                ref: "/tmpl/catalogs/common/search_summary.twig"
            }).render(e))
        },
        setPaginationElement: function(e) {
            this.$pagination = e
        },
        _renderPagination: function(e) {
            var t = s.result(e, "pagination");
            this.$pagination ? t || r.log({
                msg: "Pagination not defined"
            }) : r.log({
                msg: "this.$pagination not defined"
            }),
            this.$pagination.attr("data-max-page", t.max_page),
            t.max_page <= 1 ? this.$pagination.closest(".list__body-right").removeClass("list__body-right_has-footer") : (this.$pagination.closest(".list__body-right").addClass("list__body-right_has-footer"),
            i.prototype._renderPagination.apply(this, arguments))
        }
    })
}),
define("lib/interface/catalogs/base_element", ["require", "underscore", "twig", "lib/core/view", "lib/components/base/form", "lib/interface/catalogs/element/model", "lib/common/user_rights"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("lib/core/view")
      , n = e("lib/components/base/form")
      , o = e("lib/interface/catalogs/element/model")
      , r = e("lib/common/user_rights");
    return s.extend({
        _catalog: null,
        _fields: null,
        _form: null,
        model: null,
        has_changes: !1,
        can_save: !1,
        initialize: function(e) {
            this.parseParams(e),
            s.prototype.initialize.apply(this, arguments),
            i._preload(t.result(this, "preload"), t.bind(function() {
                this.initForm(),
                this.render(e),
                this.renderFinished()
            }, this))()
        },
        parseParams: function(e) {
            if (!e || !e.fields || !e.catalog)
                throw new Error("Invalid params: " + JSON.stringify([e]));
            this.setFields(e.fields),
            this._catalog = e.catalog
        },
        initForm: function() {
            return this._form = this._addComponent(n.View, {
                model: o
            }),
            this
        },
        prepareModel: function(e, i) {
            return this.model || (this.model = this._form.model,
            i && this.model.setFields(i),
            this.model.on("has_changes", function() {
                this.applyChanges(!0)
            }, this),
            this.model.on("has_reverted", function() {
                this.applyChanges(!1)
            }, this)),
            this.model.setFromAPI(t.extend({
                catalog_id: this._catalog.id
            }, e)),
            this.model.editable(r.getRights("catalogs", "edit")),
            this
        },
        save: function() {
            this._form.save({
                success: t.bind(this.afterSave, this),
                error: t.bind(function() {
                    this.trigger("save:failed")
                }, this)
            })
        },
        afterSave: function() {
            this._form.revert(),
            this.trigger("saved", t.clone(this.model.attributes))
        },
        setFields: function(e) {
            return this.model && this.model.setFields(e),
            this
        },
        canSave: function() {
            if (!this.model.editable())
                return !1;
            var e = this.model.get("name");
            return e ? (e = e.toString().trim(),
            e.length > 0) : (this.$el.find("input[name=name]").addClass("validate-has-error"),
            !1)
        },
        changeName: function() {
            var e = this.$el.find("input[name=name]");
            e.val().length > 0 && this.$el.find("input[name=name]").removeClass("validate-has-error")
        },
        _classes: function() {
            return t.extend({}, t.result(s.prototype, "_classes"), {
                element: "js-element"
            })
        },
        events: {
            "keyup input[name=name]": "changeName"
        },
        applyChanges: function(e) {
            return this.has_changes = this.model.editable() && !!e,
            this.can_save = this.has_changes && this.canSave(),
            this.trigger("state_changed", this),
            this
        },
        renderFinished: function() {
            this.applyChanges(!1)
        },
        _template: "/tmpl/catalogs/element.twig",
        preload: function() {
            return [this._template]
        },
        render: function(e) {
            var t = this._template
              , s = i({
                ref: t
            });
            this.prepareModel(e.item, e.fields);
            var n = this.getRenderParams(e);
            this.$el.addClass("element_detail_wrapper"),
            this.$el.html(s.render(n)),
            this._dropElemCache(),
            this._form.setElement(this._elem("element")),
            this._form.setUrl()
        },
        getRenderParams: function(e) {
            return {
                item: e.item || {},
                catalog: this._catalog,
                fields: this.model.getFields(),
                values: this.model.getValues()
            }
        }
    })
}),
define("lib/interface/catalogs/element/in_modal", ["require", "underscore", "lib/interface/catalogs/base_element"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("lib/interface/catalogs/base_element");
    return t = s.extend({
        $overlay: null,
        _$page_holder: null,
        initialize: function(e) {
            this.once("render:success", this.show, this),
            this._$body.one("click" + this.ns, this._selector("element_overlay"), i.bind(this.destroy, this)),
            this._$page_holder = $("#page_holder"),
            this.setOverlay(!0),
            s.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            this.hide(),
            this.setOverlay(!1),
            this.remove(),
            s.prototype.destroy.apply(this, arguments)
        },
        save: function() {
            this._elem("save_btn").trigger("button:load:start"),
            s.prototype.save.apply(this, arguments)
        },
        afterSave: function() {
            s.prototype.afterSave.apply(this, arguments),
            this.destroy()
        },
        _classes: function() {
            return i.extend({}, i.result(s.prototype, "_classes"), {
                element_overlay: "js-element_overlay",
                save_btn: "js-modal-accept",
                cancel_btn: "button-cancel "
            })
        },
        show: function() {
            return this.toggle(!0)
        },
        hide: function() {
            return this.toggle(!1)
        },
        toggle: function(e) {
            return this.$el.toggleClass("expanded", e),
            this
        },
        setOverlay: function(e) {
            return this.$overlay && e ? this : this.$overlay || e ? (e ? (this.$overlay = $('<div class="default-overlay js-element_overlay element_overlay"></div>'),
            this._$page_holder.append(this.$overlay),
            this.$overlay.trigger("overlay:show")) : e || (this.$overlay.trigger("overlay:hide"),
            this.$overlay = null),
            this) : this
        },
        events: function() {
            var e = i.result(s.prototype, "events", {});
            return e["click " + this._selector("save_btn") + ":not(.button-input-disabled)"] = "clickSaveBtn",
            e["click " + this._selector("cancel_btn")] = "clickCancelBtn",
            e
        },
        clickSaveBtn: function() {
            this.can_save && this.save()
        },
        clickCancelBtn: function() {
            this.destroy()
        },
        applyChanges: function(e) {
            return s.prototype.applyChanges.apply(this, arguments),
            this._elem("save_btn").trigger("button:save:" + (this.can_save ? "enable" : "disable")),
            this
        },
        renderFinished: function() {
            s.prototype.renderFinished.apply(this, arguments),
            this.trigger("render:success")
        },
        render: function(e) {
            s.prototype.render.apply(this, arguments),
            this._$page_holder.append(this.$el)
        }
    })
}),
define("lib/interface/catalogs/base_catalog", ["require", "lib/core/view", "jquery", "underscore", "twig", "cocktail", "lib/interface/card/linked/mixins/current_element", "lib/common/fn", "lib/components/fields/mixins/parser"], function(e) {
    "use strict";
    var t, i = e("lib/core/view"), s = e("jquery"), n = e("underscore"), o = e("twig"), r = e("cocktail"), a = e("lib/interface/card/linked/mixins/current_element"), l = e("lib/common/fn"), c = e("lib/components/fields/mixins/parser");
    return t = i.extend({
        $el: null,
        _info: null,
        initialize: function(e) {
            i.prototype.initialize.apply(this, arguments),
            this.parseParams(e),
            o._preload(n.result(this, "preload", []), n.bind(function() {
                this._initialize(e)
            }, this))()
        },
        _initialize: function(e) {
            this.prepareFor(parseInt(e.id, 10))
        },
        prepareFor: function(e) {
            return Promise.all(this.getPreparePromises(e)).then(n.bind(this._prepareFor, this))["catch"](n.bind(function(e) {
                console.error(e)
            }, this)),
            this
        },
        _prepareFor: function(e) {
            var t = e[0]
              , i = e[1];
            this.setInfo(t),
            this.setFields(i)
        },
        getPreparePromises: function(e) {
            return [this.loadInfo(e), this.loadFields(e)]
        },
        loadInfo: function(e) {
            return this.loadData("/ajax/v1/catalogs/list/", {
                id: e
            }, "catalogs", !0)
        },
        loadFields: function(e) {
            return this.loadData("/ajax/catalogs/" + e + "/fields/", {}, "", !1)
        },
        loadData: function(e, t, i, o) {
            return new Promise(n.bind(function(r, a) {
                var c = s.get(e, t, n.bind(function(e) {
                    e = l.cleanResponse(e);
                    var t = i ? e[i] : e;
                    if (!t)
                        throw new Error("Invalid response data: " + JSON.stringify(e));
                    r(o ? n.first(n.values(t)) : t)
                }, this), "json");
                c.fail(a)
            }, this))
        },
        parseParams: function(e) {
            if (!e)
                throw new Error("Please, read docs for initialize function");
            if (!e.id)
                throw new Error("Element type id must be defined in params")
        },
        setInfo: function(e) {
            this._info = l.parseLinkedType(e)
        },
        getInfo: function(e) {
            var t = this._info || {};
            return e && (t = t[e] || null),
            t
        },
        preload: []
    }),
    r.mixin(t, a, c),
    t
}),
define("lib/interface/catalogs/catalog/in_list", ["require", "jquery", "underscore", "twig", "lib/components/lists/elements", "lib/interface/catalogs/element/in_modal", "lib/interface/card/custom_fields", "lib/interface/catalogs/base_catalog", "lib/common/fn", "lib/common/user_rights"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("twig"), o = e("lib/components/lists/elements"), r = e("lib/interface/catalogs/element/in_modal"), a = e("lib/interface/card/custom_fields"), l = e("lib/interface/catalogs/base_catalog"), c = e("lib/common/fn"), d = e("lib/common/user_rights");
    return t = l.extend({
        _list: null,
        _custom_fields_modal: null,
        initialize: function(e) {
            this.setLoader(!0),
            this._$document.on("catalogs:name:changed", s.bind(function(e, t, i) {
                +t === +this._info.id && i && this.applyName(i)
            }, this)),
            l.prototype.initialize.apply(this, arguments)
        },
        _initialize: function(e) {
            this.initList(e.id),
            this.prepareFor(e.id)
        },
        prepareFor: function(e) {
            this._list.setCatalogId(e),
            l.prototype.prepareFor.apply(this, arguments)
        },
        _prepareFor: function(e) {
            var t = e[0]
              , i = e[1]
              , s = e[2]
              , n = e[3];
            this.setInfo(t),
            this.setFields({
                fields: i,
                columns_settings: s
            }),
            this._list.fetched(n),
            this.setLoader(!1)
        },
        getPreparePromises: function(e) {
            var t = l.prototype.getPreparePromises.apply(this, arguments);
            return t.push(this.loadColumnsSettings(e), this._list.preloadListData()),
            t
        },
        initList: function(e) {
            return this._list = this._addComponent(o, {
                catalog_id: e,
                url: "/ajax/v1/catalog_elements/list/",
                el: this.getTableElement(),
                max_page: 2,
                need_toggler: !1,
                has_pipelines: !1
            }),
            this._list.on("element_clicked", function(e) {
                e && e.item && this.showDetail(s.clone(e.item.attributes))
            }, this),
            this._list.setCatalogId(e),
            this._list.setListItemsUrl("/ajax/v1/catalog_elements/list/"),
            this
        },
        loadColumnsSettings: function(e) {
            return this.loadData("/ajax/columns_settings/", {
                entity: e
            }, "settings", !1)
        },
        setInfo: function(e) {
            var t = this._info || {}
              , i = d.getRights("catalogs", "add");
            return l.prototype.setInfo.apply(this, arguments),
            t.name !== e.name && this.applyName(e.name),
            this._elem("add_btn").toggleClass(this._class("disabled"), !i),
            this._elem("add_btn").toggleClass("button-input-disabled", !i),
            this._elem("add_btn").toggleClass("button-input_blue", i),
            this
        },
        setFields: function(e) {
            var t = e.columns_settings;
            e = e.fields;
            var i = !(!t || !t.columns);
            i || (t = {
                width: 0,
                columns: []
            }),
            l.prototype.setFields.call(this, e),
            i && s.each(this._fields, function(e) {
                var i = s.findWhere(t.columns, {
                    code: e.code
                });
                return i ? (e.shown = !0,
                void (e.width = i.width ? i.width : 7)) : void (e.shown = !1)
            });
            var n = s.sortBy(this.getFields(), function(e) {
                return s.findIndex(t.columns, {
                    code: e.code
                })
            })
              , o = !1;
            if (s.each(n, function(e) {
                var t = e.default_code;
                e.width ? ("price" == t || "quantity" == t || "sku" == t) && (o = !0) : (("price" == t || "quantity" == t || "sku" == t) && (e.width = 10,
                "sku" == t && (e.width = 12),
                o = !0),
                "name" == t && (e.width = 55))
            }),
            o) {
                var r = n[3];
                n[3] = n[0],
                n[0] = r
            }
            return this._list.setFields(n),
            this.renderTable(n, t.width),
            this.renderFilter(this.getFields()),
            this
        },
        extractFieldForFilter: function(e) {
            var t, i = "filter[custom_fields][" + e.id + "]";
            if (e.filterable && e.custom_field)
                switch (e.type_code) {
                case "url":
                case "multitext":
                case "textarea":
                case "text":
                case "streetaddress":
                    return {
                        id: i,
                        name: i,
                        title: e.title,
                        placeholder: "",
                        template: "input"
                    };
                case "numeric":
                    return {
                        title: e.title,
                        template: "numeric",
                        from: {
                            id: i + "[from]",
                            name: i + "[from]",
                            placeholder: ""
                        },
                        to: {
                            id: i + "[to]",
                            name: i + "[to]",
                            placeholder: ""
                        }
                    };
                case "checkbox":
                    return {
                        id: i,
                        name: i,
                        title: e.title,
                        selected: "",
                        items: {
                            2: {
                                option: c.i18n("Yes"),
                                id: "Y"
                            },
                            1: {
                                option: c.i18n("No"),
                                id: "N"
                            },
                            0: {
                                option: c.i18n("Ignore"),
                                id: ""
                            }
                        },
                        template: "select"
                    };
                case "radiobutton":
                case "select":
                    if (!e.enums)
                        return;
                    return t = [{
                        option: "select" === e.type_code ? "..." : c.i18n("Ignore"),
                        id: ""
                    }, {
                        option: c.i18n("Not filled"),
                        id: "empty"
                    }],
                    t = t.concat(s.map(e.enums, function(e) {
                        return {
                            option: e.value,
                            id: e.id
                        }
                    })),
                    {
                        id: i,
                        name: i,
                        cssClass: i,
                        title: e.title,
                        selected: "",
                        items: t,
                        template: "select"
                    };
                case "multiselect":
                    if (!e.enums)
                        return;
                    return t = [{
                        option: c.i18n("Not filled"),
                        id: "empty"
                    }],
                    t = t.concat(s.map(e.enums, function(e) {
                        return {
                            option: e.value,
                            id: e.id
                        }
                    })),
                    {
                        id: i,
                        name: i,
                        title_numeral: c.i18n("value,values"),
                        title: e.title,
                        items: t,
                        template: "checkboxes_dropdown"
                    };
                case "birthday":
                    return {
                        name: {
                            from: i + "[from]",
                            to: i + "[to]"
                        },
                        title: e.title,
                        template: "date_field",
                        title_format: "MMMM",
                        data_format: AMOCRM.system.format.date.date_short
                    };
                case "date":
                    return {
                        name: {
                            from: i + "[from]",
                            to: i + "[to]"
                        },
                        title: e.title,
                        template: "date_field",
                        title_format: !1,
                        data_format: !1
                    };
                case "smart_address":
                }
        },
        events: function() {
            var e = s.result(l.prototype, "events", {});
            return e["click " + this._selector("add_btn") + ":not(" + this._selector("disabled") + ")"] = "clickAddButtonHolder",
            e["click " + this._selector("edit_custom_fields_btn")] = "clickEditCustomFieldsButtonHolder",
            e
        },
        clickAddButtonHolder: function() {
            this.showDetail()
        },
        clickEditCustomFieldsButtonHolder: function() {
            this._custom_fields_modal || (this._custom_fields_modal = this._addComponent(a, {
                element_type: this._info.id,
                destroy: s.bind(function() {
                    if (this._custom_fields_modal.has_changes) {
                        var e = this.getInfo();
                        this.prepareFor(e.id)
                    }
                    this._custom_fields_modal = null
                }, this),
                enable_groups: !1,
                enable_required: !1
            }))
        },
        showDetail: function(e) {
            return this.element && this._destroyComponent(this.element),
            this.element = this._addComponent(r, {
                catalog: this.getInfo(),
                fields: this.getFields(),
                item: e || null
            }),
            this.element.on("saved", function(e) {
                this._list.updateModel(e) || this._list.reloadListData()
            }, this),
            this
        },
        preload: ["/tmpl/catalogs/list/overlay.twig", "/tmpl/list/inner.twig"],
        _classes: function() {
            return s.extend({}, s.result(l.prototype, "_classes") || {}, {
                overlay: "js-elements_list_overlay",
                catalog_name: "js-catalog_name",
                table_wrapper: "js-elements_list_body",
                add_btn: "js-add_element_btn",
                disabled: "js-disabled",
                edit_custom_fields_btn: "js-edit_custom_fields",
                list_summary: "js-list_summary",
                list_pagination: "js-list_pagination"
            })
        },
        _selectors: function() {
            return {
                list_all_checker: "#list_all_checker"
            }
        },
        getTableElement: function() {
            return document.getElementById("list_table")
        },
        setLoader: function(e) {
            var t;
            return this._dropElemCache("overlay")._elem("overlay").length || (t = n({
                ref: "/tmpl/catalogs/list/overlay.twig"
            }),
            this.$el.append(t.render({})),
            this._dropElemCache("overlay")),
            this._elem("overlay").trigger("overlay:" + (e ? "show" : "hide")),
            i(this.$el.parent()).toggleClass("has_overlay", e),
            this
        },
        applyName: function(e) {
            return this._elem("catalog_name").text(e.toString()),
            AMOCRM.setTitle(e.toString()),
            this
        },
        renderTable: function(e, t) {
            var i = n({
                ref: "/tmpl/list/inner.twig"
            })
              , s = {
                fields: e,
                items: [],
                is_plug: !0,
                no_list_settings: !0,
                no_reset_link: !0
            };
            return t > 0 && (s.width = t),
            this._list.undelegateEvents(),
            this._elem("table_wrapper").html(i.render(s)),
            this._list.setElement(this.getTableElement()),
            this._list.setSummaryElement(this._elem("list_summary")),
            this._list.setPaginationElement(this._elem("list_pagination")),
            this._list.setListAllCheckerElement(this._elem("list_all_checker")),
            this
        },
        renderFilter: function(e) {
            var t = {
                url: "/catalogs/" + this.getInfo("id") + "/",
                display_state: !1,
                items: [],
                groups_cf: !1,
                custom_fields: []
            }
              , i = s.filter(e, function(e) {
                return -1 !== ["date_create", "date_modify"].indexOf(e.id) && e.filterable === !0
            });
            t.items = {
                all: {
                    label: c.i18n("All"),
                    link: "/catalogs/" + this.getInfo("id") + "/",
                    sort: 1e3
                },
                created_3_days: {
                    label: c.i18n("Created") + " " + c.i18n("Past 3 days").toLowerCase(),
                    link: "/catalogs/" + this.getInfo("id") + "/?filter[date][type]=create&filter[date][from]=" + moment().tz(AMOCRM.system.timezone).subtract("days", 3).format(AMOCRM.system.format.date.date) + "&filter[date][to]=" + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date) + "&useFilter=y&sel=created_3_days",
                    sort: 2e3
                },
                modified_3_days: {
                    label: c.i18n("Modified") + " " + c.i18n("Past 3 days").toLowerCase(),
                    link: "/catalogs/" + this.getInfo("id") + "/?filter[date][type]=modify&filter[date][from]=" + moment().tz(AMOCRM.system.timezone).subtract("days", 3).format(AMOCRM.system.format.date.date) + "&filter[date][to]=" + moment().tz(AMOCRM.system.timezone).format(AMOCRM.system.format.date.date) + "&useFilter=y&sel=created_3_days",
                    sort: 3e3
                }
            },
            i.length && (t.date = {
                to_name: "filter[date][to]",
                from_name: "filter[date][from]",
                switcher: s.map(i, function(e) {
                    var t = {
                        name: "filter[date][type]",
                        value: "",
                        label: "",
                        selected: "date_create" === e.id
                    };
                    switch (e.id) {
                    case "date_create":
                        t.value = "create",
                        t.label = c.i18n("Created");
                        break;
                    case "date_modify":
                        t.value = "modify",
                        t.label = c.i18n("Modified")
                    }
                    return t
                }),
                items: [{
                    id: 1,
                    label: c.i18n("Today")
                }, {
                    id: 2,
                    label: c.i18n("Past 3 days")
                }, {
                    id: "current_week",
                    label: c.i18n("Last week")
                }, {
                    id: "current_month",
                    label: c.i18n("Last month")
                }, {
                    id: "current_quarter",
                    label: c.i18n("Last quarter")
                }]
            }),
            s.each(e, function(e) {
                var i;
                (i = this.extractFieldForFilter(e)) && t.custom_fields.push(i)
            }, this),
            this._list.search.filter.refresh(t, {
                full: !0
            }),
            this._list.search.filter.refreshPresets(t, {
                full: !0
            })
        }
    })
}),
define("lib/pages/catalogs", ["require", "underscore", "jquery", "lib/core/page", "lib/components/base/modal", "lib/interface/catalogs/catalog/in_list", "lib/common/fn", "lib/common/user_rights", "lib/components/lists/actions/import", "cocktail"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("lib/core/page"), o = e("lib/components/base/modal"), r = e("lib/interface/catalogs/catalog/in_list"), a = e("lib/common/fn"), l = e("lib/common/user_rights"), c = e("lib/components/lists/actions/import"), d = e("cocktail");
    return t = n.extend({
        endpoint: "/ajax/v1/catalogs/list/",
        _endpoint_data: null,
        _endpoint_type: "GET",
        template: "/tmpl/catalogs/index.twig",
        preload: ["/tmpl/catalogs/index.twig"],
        components: function() {
            return []
        },
        catalog: null,
        template_params: {},
        construct: function(e) {
            var t;
            n.prototype.construct.apply(this, arguments),
            e && e.response ? this.parseResponse(e.response) : (t = AMOCRM.constant("catalogs_template_params")) && this.parseResponse(t),
            this.preparePageForCatalog(e.route_args[0])
        },
        destruct: function() {
            return n.prototype.destruct.apply(this, arguments)
        },
        initCatalogManager: function(e) {
            return this.catalog ? (this.catalog.prepareFor(e),
            this) : (this.catalog = this._addComponent(r, {
                id: e,
                el: this._elem("list_wrapper")
            }),
            this)
        },
        preparePageForCatalog: function(e) {
            var t, n;
            e && i.has(AMOCRM.constant("catalogs"), e) || (e = Object.keys(AMOCRM.constant("catalogs"))[0],
            s.isNumeric(e) ? (t = "/catalogs/" + e,
            n = !1) : (t = "/contacts/list/contacts/",
            n = !0,
            this.destruct()),
            AMOCRM.router.navigate(t, {
                trigger: n,
                replace: n
            })),
            n || this.initCatalogManager(e)
        },
        makeRequest: function(e, t) {
            if (!this.last_xhr) {
                i.isFunction(e) && (t = e,
                e = null);
                var s = this.setEndpointData(e)._makeRequest({});
                this.last_xhr = s,
                s.success(i.bind(function(e) {
                    delete this.last_xhr,
                    e = a.cleanResponse(e),
                    this.parseResponse(e),
                    this.hasErrorsInResponse(e) || t && i.isFunction(t) && t.call(this, e)
                }, this))
            }
        },
        _makeRequest: function() {
            var e = n.prototype._makeRequest.apply(this, arguments);
            return this.setEndpointData({}),
            e
        },
        _getEndpointData: function() {
            return i.extend({}, i.result(n.prototype, "_getEndpointData") || {}, this._endpoint_data || {})
        },
        _getEndpointType: function() {
            return this._endpoint_type
        },
        setEndpointData: function(e) {
            return this._endpoint_data = e,
            this
        },
        parseResponse: function(e) {
            return e && e.template && (this.template_params = e.template),
            e && e.data && (this.template_data = e.data),
            this
        },
        getTemplateParams: function(e) {
            return this.getFromArray.apply(this, i.union([this.template_params], arguments))
        },
        getTemplateData: function(e) {
            return this.getFromArray.apply(this, i.union([this.template_data], arguments))
        },
        hasErrorsInResponse: function(e) {
            return e.error ? (this.showError(e.error),
            !0) : !1
        },
        showError: function(e, t) {
            var s = i.isFunction(t);
            new o({
                init: function() {
                    this.showError(e, s),
                    s && this.$modal.on("click", ".js-modal-try-again", i.bind(function() {
                        this.destroy(),
                        t()
                    }, this))
                }
            })
        },
        toggle: function(e, t) {
            return e ? (i.isArray(e) || (e = [e]),
            e.length ? (i.each(e, function(e) {
                var n;
                e && (i.isString(e) && (n = this._elem(e),
                n.length || (n = this.$(e)),
                e = n),
                e = s(e),
                e.length && e.toggleClass("hidden", !t))
            }, this),
            this) : this) : this
        },
        getFromArray: function(e, t) {
            var s = e;
            return t ? (i.isArray(t) || (t = i.rest(arguments, 1)),
            i.each(t, function(e) {
                s = s && i.has(s, e) ? s[e] : null
            }),
            s) : s
        },
        hasRightsFor: function(e, t) {
            return void 0 === t && (t = e,
            e = "catalogs_manage"),
            l.getRights(e, t)
        },
        _classes: function() {
            return i.extend({}, i.result(n.prototype, "_classes") || {}, {
                add_catalog: "js-add_catalog",
                catalogs_list: "js-catalogs_list",
                list_wrapper: "list"
            })
        },
        events: function() {
            var e = i.result(n.prototype, "events", {});
            return e
        },
        _renderPage: function(e) {
            e = e || {};
            var t = {
                multi_page: !0,
                template: {
                    page: {
                        section: "catalogs_index"
                    }
                }
            };
            return t.fields = {
                name: {
                    default_code: "",
                    code: "name",
                    title: a.i18n("Name"),
                    shown: !0,
                    sort: "name",
                    sortable: !0,
                    sorted: !1,
                    width: !1,
                    template: "name",
                    template_params: null,
                    format: !1
                }
            },
            t.items = [],
            t.no_reset_link = !0,
            t.button_more = {
                inner_class_name: "button-input-more-inner",
                svg_class_name: "controls--button-more",
                class_name: "button-input-more content__top__action__btn-more",
                context_menu: {
                    "import": {
                        svg_icon: "upload",
                        class_name: "js-list-import",
                        text: a.i18n("DEALS_LIST_IMPORT")
                    },
                    edit_custom_fields: {
                        svg_icon: "settings-key",
                        class_name: "js-edit_custom_fields",
                        text: a.i18n("Lists properties")
                    }
                }
            },
            l.isAdmin() || delete t.button_more.context_menu.edit_custom_fields,
            l.getRights("catalogs", "add") || delete t.button_more.context_menu["import"],
            0 === i.size(t.button_more.context_menu) && delete t.button_more,
            e.response = t,
            n.prototype._renderPage.apply(this, arguments)
        }
    }),
    d.mixin(t, c),
    t
}),
define("lib/pages/support/orders/create", ["require", "underscore", "twig", "lib/core/page", "clipboard", "lib/components/base/modal", "lib/common/fn"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("twig"), n = e("lib/core/page"), o = e("clipboard"), r = e("lib/components/base/modal"), a = e("lib/common/fn");
    return t = n.extend({
        endpoint: "/ajax/_support/orders/create/",
        template: "/tmpl/system/support/orders/create.twig",
        preload: ["/tmpl/controls/select.twig", "/tmpl/controls/toggler.twig", "/tmpl/controls/input.twig", "/tmpl/system/support/orders/create/account_summary.twig"],
        template_params: {},
        current_state: {
            currency: "RUB",
            account_id: 0,
            order_type: null,
            first_data_order_id: 0,
            tariff_id: null
        },
        last_order_params: null,
        _selectors: function() {
            return i.extend({}, i.result(n.prototype, "_selectors") || {}, {})
        },
        _classes: function() {
            return i.extend({}, i.result(n.prototype, "_selectors") || {}, {
                search: "js-search",
                create: "js-create",
                reload: "js-reload",
                copy: "js-copy",
                account_id: "js-account_id",
                select: "js-select",
                order_type: "js-order_type",
                months: "js-months",
                users: "js-users",
                price: "js-price",
                zendesk: "js-zendesk",
                order_link: "js-order_link",
                comment: "js-comment",
                copied_tip: "js-copied_tip",
                rec_pay_order: "js-rec_pay_order",
                account_version: "js-account_version",
                expected_price: "js-expected_price",
                group_leave_this_price: "js-group_leave_this_price",
                account_id_wrapper: "js-account_wrapper",
                rec_pay_order_wrapper: "js-rec_pay_order_wrapper",
                account_version_wrapper: "js-account_version_wrapper",
                order_type_wrapper: "js-order_type_wrapper",
                currency_wrapper: "js-currency_wrapper",
                tariff_wrapper: "js-tariff_wrapper",
                pay_system_wrapper: "js-pay_system_wrapper",
                account_user_wrapper: "js-account_user_wrapper",
                months_wrapper: "js-months_wrapper",
                users_wrapper: "js-users_wrapper",
                price_wrapper: "js-price_wrapper",
                expected_price_wrapper: "js-expected_price_wrapper",
                zendesk_wrapper: "js-zendesk_wrapper",
                comment_wrapper: "js-comment_wrapper",
                create_wrapper: "js-create_wrapper",
                reload_wrapper: "js-reload_wrapper",
                order_link_wrapper: "js-order_link_wrapper",
                account_summary: "js-account_summary",
                description_head: "js-description_head",
                description_account_summary: "js-description_account_summary",
                description_order_type: "js-description_order_type",
                description_base_options: "js-description_base_options",
                description_number_options: "js-description_number_options",
                description_comments: "js-description_comments",
                description_results: "js-description_results",
                description_reload: "js-description_reload",
                description_text_input_account_id: "js-description_text-input_account_id",
                description_text_number_option: "js-description_text-number_option",
                description_text_order_type: "js-description_text-order_type",
                description_text_results: "js-description_text-results",
                interface_v1_detected: "js-description_text-interface_v1-detected",
                first_data_detected: "js-description_text-first_data-detected"
            })
        },
        construct: function(e) {
            var t;
            n.prototype.construct.apply(this, arguments),
            (t = AMOCRM.constant("create_order_template_params")) ? this.parseResponse(t) : e && e.response && this.parseResponse(e.response),
            this.initClipboard()
        },
        initClipboard: function() {
            var e = this._initComponent(o, [this._elem("copy")[0], {
                target: i.bind(function() {
                    return this._elem("order_link")[0]
                }, this),
                text: i.bind(function() {
                    return this._elem("order_link").val()
                }, this)
            }]);
            return e.on("success", i.bind(function(e) {
                var t = this._elem("copied_tip");
                t.show(),
                setTimeout(function() {
                    t.fadeOut(300)
                }, 2e3),
                e.clearSelection()
            }, this)),
            this
        },
        destruct: function() {
            n.prototype.destruct.apply(this, arguments)
        },
        events: function() {
            var e = {};
            return e["click " + this._selector("search")] = "onSearchClick",
            e["change " + this._selector("select") + ".currency"] = "onCurrencyChange",
            e["controls:change " + this._selector("select") + ".currency"] = "onCurrencyChange",
            e["click " + this._selector("create")] = "onCreateClick",
            e["click " + this._selector("order_type") + " .control-toggler__item"] = "onOrderTypeClick",
            e["controls:change " + this._selector("select") + ".tariff"] = "onTariffChange",
            e["click " + this._selector("reload")] = "onReloadClick",
            i.each(["change", "keyup", "input", "blur"], function(t) {
                i.each(["months", "users", "price", "zendesk"], function(i) {
                    e[[t, this._selector(i)].join(" ")] = "checkCanCreateOrder"
                }, this)
            }, this),
            i.extend({}, i.result(n.prototype, "events") || {}, e)
        },
        onSearchClick: function() {
            this._elem("account_id").prop("disabled") || this.setCurrentState("account_id", 0).loadAccount(this._elem("account_id").val())
        },
        onCurrencyChange: function() {
            var e = this.getCurrentState("currency");
            e != this.loadCurrentState("currency").getCurrentState("currency") && this.renderCurrencyDependencies()
        },
        onOrderTypeClick: function(e) {
            var t = $(e.target)
              , i = this.getCurrentState("order_type")
              , s = t.data("id");
            s && i != s && this.setCurrentState("order_type", s).applyOrderType(s)
        },
        onCreateClick: function() {
            var e = {
                action: "create_order",
                account_id: this.getCurrentState("account_id"),
                tariff_id: this._elem("select").filter(".tariff").find("input").val(),
                pay_system: this._elem("select").filter(".pay_system").find("input").val(),
                account_user: this._elem("select").filter(".account_user").find("input").val(),
                leave_this_price: this._elem("select").filter(".leave_this_price").find("input").val(),
                order_type: this._elem("order_type").find(".control-toggler__item-selected").data("id"),
                months_count: this._elem("months").val(),
                users_count: this._elem("users").val(),
                price: this._elem("price").val(),
                zendesk: this._elem("zendesk").val(),
                comment: this._elem("comment").val()
            };
            (e = this.checkOrderParams(e)) && this.createOrder(e)
        },
        checkCanCreateOrder: function() {
            var e = !1;
            i.each(["months", "users", "price", "zendesk"], function(t) {
                if (!e) {
                    var i = this._elem(t);
                    i.closest(".js-controls_group").hasClass("hidden") || (e = 0 === i.val().toString().trim().length)
                }
            }, this),
            this.toggle(["create_wrapper", "description_results"], !e),
            e = !1,
            i.each(["months", "users"], function(t) {
                if (!e) {
                    var i = this._elem(t);
                    i.closest(".js-controls_group").hasClass("hidden") || (e = 0 === i.val().toString().trim().length)
                }
            }, this),
            e ? this._elem("expected_price").val("") : this._elem("expected_price").val(this.calculateExpectedPrice())
        },
        onTariffChange: function() {
            var e = this.getCurrentState("tariff_id")
              , t = this.getSelectedTariff("id");
            e != t && this.applyTariff(t)
        },
        onReloadClick: function() {
            this._$document.trigger("page:reload")
        },
        createOrder: function(e) {
            this.last_order_params = e,
            this.makeRequest(e, function() {
                var e = ["order_link_wrapper"]
                  , t = ["create"];
                this.getTemplateParams("controls", "inputs", "order_link", "value") && this._elem("order_link").val(this.getTemplateParams("controls", "inputs", "order_link", "value")),
                delete this.last_order_params,
                this._elem("description_text_results").each(function() {
                    var i = $(this)
                      , s = i.data("type");
                    "create" === s ? t.push(i) : "copy" === s && e.push(i)
                }),
                this.toggle(e, !0).toggle(t, !1);
                var i;
                i = this.getCurrentState("first_data_order_id") ? this.i18n("Order created, don't forget to change FirstData order #") + this.getCurrentState("first_data_order_id") : this.i18n("Order successfully created"),
                (new r).showSuccess(i, null, 3e3)
            })
        },
        loadAccount: function(e) {
            e = e.toString().replace(/[^\d]/, ""),
            e.length < 1 || this.makeRequest({
                action: "load_account",
                account_id: e
            }, function() {
                this._elem("account_id").prop("disabled", !0),
                this.setCurrentState("account_id", e).initFirstData().initAccountVersion().renderOrderType().renderAccountUser().toggle(["order_type_wrapper", "currency_wrapper", "account_user_wrapper", "group_leave_this_price", "zendesk_wrapper", "comment_wrapper", "reload_wrapper", "price_wrapper", "expected_price_wrapper", "account_summary", "description_account_summary", "description_order_type", "description_base_options", "description_number_options", "description_comments", "description_reload"], !0).toggle(["search", "description_text_input_account_id"], !1).checkNeedHideHeadDescription().renderAccountSummary();
            })
        },
        makeRequest: function(e, t) {
            if (!this.last_xhr) {
                var s = this.setEndpointData(e)._makeRequest({});
                this.last_xhr = s,
                s.success(i.bind(function(e) {
                    delete this.last_xhr,
                    e = a.cleanResponse(e),
                    this.parseResponse(e),
                    this.hasErrorsInResponse(e) || t && i.isFunction(t) && t.call(this, e)
                }, this))
            }
        },
        _makeRequest: function() {
            var e = n.prototype._makeRequest.apply(this, arguments);
            return this.setEndpointData({}),
            e
        },
        _getEndpointData: function() {
            return i.extend({}, i.result(n.prototype, "_getEndpointData") || {}, this._endpoint_data || {})
        },
        setEndpointData: function(e) {
            return this._endpoint_data = e,
            this
        },
        getCurrentState: function(e) {
            return e ? this.current_state[e] : this.current_state
        },
        setCurrentState: function(e, t) {
            var s;
            return null == e ? this : ("object" == typeof e ? s = e : (s = {})[e] = t,
            this.current_state = i.extend(this.current_state, s),
            this)
        },
        loadCurrentState: function(e) {
            var t = {
                currency: this._elem("select").filter(".currency").find("input").val(),
                order_type: this._elem("order_type").find(".control-toggler__item-selected").data("id")
            };
            return e ? this.setCurrentState(e, t[e]) : this.setCurrentState(t)
        },
        parseResponse: function(e) {
            return e && e.template && (this.template_params = e.template),
            e && e.data && (this.template_data = e.data),
            this
        },
        getTemplateParams: function(e) {
            return this.getFromArray.apply(this, i.union([this.template_params], arguments))
        },
        getTemplateData: function(e) {
            return this.getFromArray.apply(this, i.union([this.template_data], arguments))
        },
        applyOrderType: function(e) {
            var t = []
              , i = [];
            return this.renderCurrency(),
            this._elem("description_text_order_type").each(function() {
                var s = $(this)
                  , n = s.data("order_type");
                n === e ? t.push(s) : i.push(s)
            }),
            -1 !== ["new", "renew", "subscribe"].indexOf(e) ? t.push("group_leave_this_price") : i.push("group_leave_this_price"),
            this.toggle(t, !0).toggle(i, !1)
        },
        applyNumberOptions: function(e) {
            var t, s = [], n = [];
            switch (e) {
            case "new":
            case "renew":
                s.push("months_wrapper"),
                this.getSelectedTariff("by_user") ? s.push("users_wrapper") : n.push("users_wrapper");
                break;
            case "subscribe_add_users":
                s.push("months_wrapper", "users_wrapper");
                break;
            case "subscribe":
                s.push("months_wrapper"),
                n.push("users_wrapper");
                break;
            case "add_users":
                s.push("users_wrapper"),
                n.push("months_wrapper")
            }
            return i.each(n, function(e) {
                var t = this._elem(e).find("input");
                t.val(""),
                t.trigger("change").trigger("controls:change")
            }, this),
            this.toggle(s, !0).toggle(n, !1),
            t = s.map(function(e) {
                return e.toString().replace("_wrapper", "")
            }),
            s = [],
            n = [],
            this._elem("description_text_number_option").each(function() {
                var i = $(this)
                  , o = i.data("order_type").toString().split(",")
                  , r = i.data("count_type");
                -1 === o.indexOf(e) || -1 === t.indexOf(r) ? n.push(i) : s.push(i)
            }),
            this.toggle(s, !0).toggle(n, !1)
        },
        applyTariff: function(e) {
            return this.setCurrentState("tariff_id", e).applyNumberOptions(this.getCurrentState("order_type")).checkCanCreateOrder(),
            this
        },
        initAccountVersion: function() {
            var e = this.getTemplateParams("controls", "inputs", "account_version", "value");
            return this._elem("account_version").val(e),
            this._elem("account_version").trigger("change"),
            this._elem("account_version").trigger("controls:change"),
            this.toggle("interface_v1_detected", !!this.getTemplateData("account_info", "is_old")),
            this.toggle("account_version_wrapper", !0),
            this
        },
        initFirstData: function() {
            var e = this.getTemplateParams("controls", "inputs", "rec_pay_order", "value");
            return e && (this._elem("rec_pay_order").val(e),
            this._elem("rec_pay_order").trigger("change"),
            this._elem("rec_pay_order").trigger("controls:change")),
            this.toggle(["first_data_detected", "rec_pay_order_wrapper"], !!e),
            this.setCurrentState("first_data_order_id", e)
        },
        checkNeedHideHeadDescription: function() {
            var e = this._elem("description_head").find(".js-description_text").not(".hidden").length > 0;
            return this.toggle("description_head", e),
            this
        },
        hasErrorsInResponse: function(e) {
            return 100 == e.error_code && this.last_order_params ? (this.showError(e.error, i.bind(function() {
                this.createOrder(i.extend({
                    agree: 1
                }, this.last_order_params))
            }, this)),
            !0) : e.error ? (this.showError(e.error),
            !0) : !1
        },
        showError: function(e, t) {
            var s = i.isFunction(t);
            new r({
                init: function() {
                    this.showError(e, s),
                    s && this.$modal.on("click", ".js-modal-try-again", i.bind(function() {
                        this.destroy(),
                        t()
                    }, this))
                }
            })
        },
        checkOrderParams: function(e) {
            var t = ["account_id", "tariff_id", "months_count", "users_count", "price"];
            return t.forEach(function(t) {
                e[t] = e[t].toString().replace(/\D/g, "") || 0,
                e[t] = parseInt(e[t], 10)
            }),
            e.account_id ? e.tariff_id ? e.pay_system ? e.order_type ? e.price ? e.account_user ? e.leave_this_price ? e.zendesk ? e.comment ? this.zendeskCorrect() ? e : (this.showError(this.i18n("Link to Zendesk ticket is incorrect")),
            !1) : (this.showError(this.i18n("Comment field cannot be empty. Please add a comment.")),
            !1) : (this.showError(this.i18n("Zendesk ticket")),
            !1) : (this.showError(this.i18n("Choose an option for the Amount of the next auto order")),
            !1) : (this.showError(this.i18n("Please choose a User")),
            !1) : (this.showError(this.i18n("Please enter Order Amount")),
            !1) : (this.showError(this.i18n("Please choose order type")),
            !1) : (this.showError(this.i18n("Please choose Method of Payment")),
            !1) : (this.showError(this.i18n("Please choose a Plan")),
            !1) : (this.showError(this.i18n("Please enter Account id and search for the matching account first")),
            !1)
        },
        toggle: function(e, t) {
            return e ? (i.isArray(e) || (e = [e]),
            e.length ? (i.each(e, function(e) {
                var s;
                e && (i.isString(e) && (s = this._elem(e),
                s.length || (s = this.$(e)),
                e = s),
                e = $(e),
                e.length && e.toggleClass("hidden", !t))
            }, this),
            this) : this) : this
        },
        zendeskCorrect: function() {
            var e = this._elem("zendesk").val();
            return e ? "string" != typeof e ? !1 : e.length < 33 ? !1 : /^https:\/\/amocrm(ru)?\.zendesk\.com\/agent\/tickets\/[\d]+[\/]?$/i.test(e) : !1
        },
        calculateExpectedPrice: function() {
            var e, t = {
                months_count: this._elem("months").val(),
                current_users_count: this.getTemplateData("account_info", "paid_users"),
                one_month_price: 0,
                addition_days_count: this.getTemplateData("account_info", "pay_info", "days_left") + 1,
                addition_users_count: this._elem("users").val(),
                one_month_price_base: 0
            }, s = 0;
            if (e = this.getSelectedTariff(),
            !e)
                return 0;
            if (e = i.extend({
                price: 0,
                prices: [],
                by_user: !1,
                lang: "en"
            }, e),
            t.one_month_price_base = e.price,
            (t.one_month_price = this.findPriceByMonth(t.months_count, e.prices)) && (t.one_month_price = t.one_month_price.price),
            !t.one_month_price || !t.one_month_price_base)
                return 0;
            switch (e.by_user || (t.current_users_count = t.addition_users_count = 1),
            i.each(t, function(e, i) {
                t[i] = parseFloat(e)
            }),
            this.getCurrentState("order_type")) {
            case "new":
            case "renew":
                s = t.months_count * t.addition_users_count * t.one_month_price;
                break;
            case "subscribe_add_users":
                s = this.round(t.addition_days_count / 30 * t.addition_users_count, 2) * t.one_month_price_base,
                s += t.months_count * (t.addition_users_count + t.current_users_count) * t.one_month_price;
                break;
            case "subscribe":
                s = t.months_count * t.current_users_count * t.one_month_price;
                break;
            case "add_users":
                s = this.round(t.addition_days_count / 30 * t.addition_users_count, 2) * t.one_month_price_base
            }
            return this.round(s, "en" === e.lang ? 2 : 0)
        },
        findPriceByMonth: function(e, t) {
            var s = null;
            return i.each(t, function(t) {
                s || (t = i.extend({
                    months_from: 0,
                    months_to: 0,
                    price: 0
                }, t),
                e < t.months_from || t.months_to && e > t.months_to || (s = t))
            }),
            s
        },
        getSelectedTariff: function(e) {
            var t = this._elem("select").filter(".tariff").find("input").val();
            return t ? "id" === e ? t ? t : null : this.getTemplateData.apply(this, i.union(["tariffs", t], arguments)) : null
        },
        getAccountTariff: function(e) {
            var t = this.getTemplateData("account_info", "tariff_id");
            return t ? "id" === e ? t : this.getTemplateData.apply(this, i.union(["tariffs", t], arguments)) : null
        },
        i18n: function(e) {
            return AMOCRM.lang[e] ? AMOCRM.lang[e] : e
        },
        round: function(e, t) {
            return t = t ? Math.pow(10, t) : 1,
            Math.round(e * t) / t
        },
        getFromArray: function(e, t) {
            var s = e;
            return t ? (i.isArray(t) || (t = i.rest(arguments, 1)),
            i.each(t, function(e) {
                s = s && i.has(s, e) ? s[e] : null
            }),
            s) : s
        },
        prepareOrderData: function(e) {
            var t = i.clone(e) || {}
              , s = i.clone(t.elongation_basket_item) || {}
              , n = i.clone(s.properties) || {}
              , o = ["tariff_id", "current_users_count", "add_users_count", "current_account_users_count", "elongation_month_count", "additional_users_count", "number_of_paid_days", "number_of_paid_months"];
            if (!n)
                throw new Error("Invalid order data");
            return i.each(o, function(e) {
                var t = n[e];
                n[e] = t ? parseFloat(t) : 0
            }),
            i.each(["id", "quantity", "price", "product_id"], function(e) {
                var t = s[e];
                s[e] = t ? parseFloat(t) : 0
            }),
            i.each(["id", "price", "discount_value"], function(e) {
                var i = t[e];
                t[e] = i ? parseFloat(i) : 0
            }),
            n.total_users = n.current_account_users_count + n.additional_users_count,
            n.price_for_one_month_per_user = this.round(s.price / n.total_users, 2),
            s.total_price = this.round(s.quantity * s.price),
            s.properties = n,
            t.elongation_basket_item = s,
            t
        },
        renderOrderType: function(e) {
            var t = s({
                ref: "/tmpl/controls/toggler.twig"
            });
            return e || (e = this.getTemplateParams("controls", "tabs", "order_type")),
            this._elem("order_type").replaceWith(t.render(e)),
            this._dropElemCache("order_type"),
            this.loadCurrentState("order_type").applyOrderType(this.getCurrentState("order_type"))
        },
        renderCurrency: function(e) {
            var t;
            return e || (e = this.getTemplateParams("controls", "selects", "currency")),
            e = i.clone(e),
            "renew" === this.getCurrentState("order_type") && (t = this.getAccountTariff("currency"),
            e.items = i.filter(e.items, function(e) {
                return t === e.id
            }, this)),
            this.renderSelect("currency", e).loadCurrentState("currency").renderCurrencyDependencies()
        },
        renderAccountUser: function(e) {
            return e || (e = this.getTemplateParams("controls", "selects", "account_user")),
            this.renderSelect("account_user", e)
        },
        renderTariff: function(e) {
            var t;
            return e || (e = this.getTemplateParams("controls", "selects", "tariff")),
            e = i.clone(e),
            "renew" === this.getCurrentState("order_type") ? (t = this.getAccountTariff("id"),
            e.items = i.filter(e.items, function(e) {
                return t == e.id
            }, this)) : "new" === this.getCurrentState("order_type") && (t = this.getAccountTariff("id")) && (e.items = i.reject(e.items, function(e) {
                return t == e.id
            }, this)),
            this._renderCurrencyDependencies("tariff", e).applyTariff(this.getSelectedTariff("id"))
        },
        renderPaySystem: function(e) {
            return this._renderCurrencyDependencies("pay_system", e)
        },
        renderCurrencyDependencies: function() {
            return this.renderTariff().renderPaySystem().toggle(["pay_system_wrapper", "tariff_wrapper"], !0)
        },
        _renderCurrencyDependencies: function(e, t) {
            t || (t = this.getTemplateParams("controls", "selects", e));
            var s = i.clone(t)
              , n = this.getCurrentState("currency");
            return s.items = i.filter(s.items, function(e) {
                return e.currency == n
            }, this),
            this.renderSelect(e, s)
        },
        renderSelect: function(e, t) {
            var n = s({
                ref: "/tmpl/controls/select.twig"
            });
            return t = i.clone(t),
            t.disabled = i.size(t.items) < 2,
            this._elem("select").filter("." + e).replaceWith(n.render(t)),
            this._dropElemCache("select"),
            this
        },
        renderAccountSummary: function() {
            var e = s({
                ref: "/tmpl/system/support/orders/create/account_summary.twig"
            })
              , t = i.extend(this.getTemplateData("account_info"), {
                tariff: this.getAccountTariff()
            });
            return this._elem("account_summary").html(e.render(i.extend({
                lang: AMOCRM.lang
            }, t))),
            this
        }
    })
}),
define("lib/components/base/page", ["require", "jquery", "underscore", "backbone", "elements_view", "pubsub", "lib/common/fn", "lib/components/filter/filter"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = (e("backbone"),
    e("elements_view")), o = e("pubsub"), r = e("lib/common/fn");
    e("lib/components/filter/filter");
    return t = n.extend({
        ns: ".default:page:ns",
        overlay_class_name: "list__overlay",
        $overlay_container: null,
        initialize: function() {
            this.setElement(i("#page_holder")),
            this.setNS(),
            this.className && this.$el.addClass(this.className),
            this._initComponents.apply(this, arguments),
            this._$document.on("page:change:loader" + this.ns, s.bind(this._showOverlay, this)),
            this.$el.on("click" + this.ns, ".js-filter-preset-link", s.bind(this._presetLinkClick)),
            AMOCRM.setTitle(this._title()),
            o.publish("overlay:hide", {
                el: i("#page_change_loader")
            })
        },
        destroy: function() {
            this._$document.off(this.ns),
            this.el.className = "",
            this._page_components.active = s.omit(this._page_components.active, function(e) {
                return this._destroyComponent(e),
                !0
            }, this),
            this.undelegateEvents().stopListening(),
            this.$el.removeData().off().unbind()
        },
        _presetLinkClick: function(e) {
            var t = i(e.currentTarget);
            t.parent().find(".filter__list__item-selected").removeClass("filter__list__item-selected"),
            t.addClass("filter__list__item-selected")
        },
        setNS: function() {
            this.ns = "." + AMOCRM.data.current_entity + ":page:ns"
        },
        _title: function() {
            return AMOCRM.lang[AMOCRM.getBaseEntity() + "_head_title"]
        },
        _showOverlay: function() {
            this.$page_change_overlay = i('<div class="default-overlay ' + this.overlay_class_name + '" id="page_change_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
            (s.isFunction(this.overlayContainer) && this.overlayContainer() || this.$el).append(this.$page_change_overlay),
            o.publish("overlay:show", {
                el: this.$page_change_overlay
            })
        },
        _initComponents: function() {
            var e;
            this._page_components = {
                active: [],
                all: {}
            },
            e = this.components && this.components.apply(this, arguments),
            s.each(e, function(e) {
                this._addComponent.apply(this, e)
            }, this)
        },
        _addComponent: function() {
            if (!s.isFunction(arguments[0]))
                throw "First argument of a component must be a function";
            var e = arguments[0]
              , t = Array.prototype.slice.call(arguments, 1)
              , i = this._initComponent(e, t)
              , n = "component_" + r.randHex();
            return i.__page_component_hash = n,
            this._page_components.active.push(i),
            this._page_components.all[n] = {
                Component: e,
                args: t
            },
            i
        },
        _initComponent: function(e, t) {
            var i = Object.create(e.prototype);
            return e.apply(i, t),
            i
        },
        _destroyComponent: function(e) {
            return e && e.__page_component_hash && (s.isFunction(e.destroy) ? e.destroy() : s.isFunction(e.remove) && e.remove(),
            e = null),
            this
        },
        _disableComponent: function(e) {
            var t;
            return e && e.__page_component_hash && (t = s.indexOf(this._page_components.active, e),
            this._destroyComponent(e),
            -1 !== t && this._page_components.active.splice(t, 1)),
            this
        },
        _enableComponent: function(e) {
            var t;
            return e && e.__page_component_hash && -1 === s.indexOf(this._page_components.active, e) && (t = this._page_components.all[e.__page_component_hash],
            e = this._initComponent(t.Component, t.args)),
            this
        }
    })
}),
define("lib/components/support/support_api", ["require", "underscore", "lib/components/mail/base_api"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/components/mail/base_api")
      , s = function() {
        i.apply(this, arguments)
    }
      , n = function() {
        s = new s("/support/api/v1"),
        s.loadBackendVersion(),
        this.setBackendVersion = t.bind(s.setBackendVersion, s)
    };
    return t.extend(s.prototype, i.prototype, {
        request: i.prototype._request,
        checkAccount: t.noop,
        getParams: function() {
            var e = AMOCRM.constant("amomail_support").server_base
              , t = AMOCRM.constant("amomail_support").auth_token || {};
            return {
                base_url: e + this.base_path,
                auth_token: t || ""
            }
        }
    }),
    t.extend(n.prototype, {
        getMailbox: function(e, t) {
            var i = s.makeUrl("/accounts/" + e + "/mailboxes/" + t);
            return s.request("GET", i)
        },
        getMailboxes: function(e) {
            var t = s.makeUrl("/accounts/" + e + "/mailboxes");
            return s.request("GET", t)
        },
        connectMailbox: function(e, t) {
            var i = s.makeUrl("/accounts/" + e + "/mailboxes/" + t + "/connect");
            return s.request("POST", i)
        },
        diagnoseMailbox: function(e, t) {
            var i = s.makeUrl("/accounts/" + e + "/mailboxes/" + t + "/diagnostic");
            return s.request("POST", i)
        },
        diagnoseSettings: function(e) {
            var t = s.makeUrl("/settings/diagnostic");
            return s.request("POST", t, e)
        },
        getMailboxDiagnosticStatus: function(e, t, i) {
            var n = s.makeUrl("/accounts/" + e + "/mailboxes/" + t + "/diagnostic/" + i);
            return s.request("GET", n)
        },
        getSettingsDiagnosticStatus: function(e) {
            var t = s.makeUrl("/settings/diagnostic/" + e);
            return s.request("GET", t)
        }
    }),
    new n
}),
define("lib/pages/support/card", ["require", "jquery", "underscore", "lib/common/fn", "lib/common/urlparams", "lib/components/base/page", "lib/components/base/form", "twig", "lib/components/base/modal", "lib/components/support/support_api"], function(e) {
    "use strict";
    var t, i, s, n, o, r, a = e("jquery"), l = e("underscore"), c = e("lib/common/fn"), d = e("lib/common/urlparams"), u = e("lib/components/base/page"), h = e("lib/components/base/form"), _ = e("twig"), p = e("lib/components/base/modal"), m = e("lib/components/support/support_api");
    return t = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            a.ajax({
                url: this.url,
                type: "POST",
                dataType: "json",
                data: a.extend({
                    action: "save"
                }, this.toJSON())
            }).always(l.bind(function() {
                this.is_saving = !1
            }, this)).done(l.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(l.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    o = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            a.ajax({
                url: "/ajax" + window.location.pathname,
                dataType: "json",
                type: "POST",
                data: a.extend({
                    action: "manage_props"
                }, this.toJSON())
            }).always(l.bind(function() {
                this.is_saving = !1
            }, this)).done(l.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(l.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    i = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            a.ajax({
                url: "/ajax" + window.location.pathname,
                dataType: "json",
                type: "POST",
                data: a.extend({
                    action: "recount"
                }, this.toJSON())
            }).always(l.bind(function() {
                this.is_saving = !1
            }, this)).done(l.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(l.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    n = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            a.ajax({
                url: "/ajax" + window.location.pathname,
                dataType: "json",
                type: "POST",
                data: this.toJSON()
            }).always(l.bind(function() {
                this.is_saving = !1
            }, this)).done(l.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(l.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    s = h.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            a.ajax({
                url: "/ajax" + window.location.pathname,
                dataType: "json",
                type: "POST",
                data: a.extend({
                    action: "transfer"
                }, this.toJSON())
            }).always(l.bind(function() {
                this.is_saving = !1
            }, this)).done(l.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(l.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    r = u.extend({
        overlay_class_name: "aside-page-overlay",
        transition: {
            animation_time: 1,
            delay: .5
        },
        overlayContainer: function() {
            return a("#page_holder")
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        _selectors: function() {
            return {
                users_wrapper: "#users_wrapper",
                save_btn: "#save_btn"
            }
        },
        _classes: function() {
            return {
                card_region_wrapper: "card_region_wrapper",
                card_region_table: "card_region_table",
                card_region_table_value: "card_region__table_value",
                recount_btn: "js-save-recount",
                transfer_btn: "js-save-recount"
            }
        },
        events: function() {
            return l.extend({
                "click #save_btn": "saveChanges",
                "click #js-button-get_recount": "recountAccount",
                "click #js-button-get_transfer": "transferAccount",
                "click #js-button-get_all_leads_num": "getAllLeadsNum",
                "click #js-button-get_all_contacts_num": "getAllContactsNum",
                "click #js-button-get_all_companies_num": "getAllCompaniesNum",
                "click #js-button-get_last_week_leads_num": "getLastWeekLeadsNum",
                "click #js-button-get_last_week_contacts_num": "getLastWeekContactsNum",
                "click #js-button-get_last_week_companies_num": "getLastWeekCompaniesNum",
                "click #js-button-get_widgets": "getWidgetsInfo",
                "click #js-button-get_log": "getLog",
                "click #js-button-get_orders": "getOrders",
                "click #js-button-get_extend": "extendAccount",
                "click #js-button-get_manage_props": "manageProps",
                "click #js-button-get_last_week_users_auth": "getLastWeekUsersAuth",
                "click #js-button-get_check_block": "checkBlock",
                "click #js-button-get_mailbox_list": "mailboxList",
                "click .widget-uninstall": "uninstallWidget",
                "click .widget-delete_installation": "deleteWidgetInstallation"
            }, u.prototype.events || {}, {})
        },
        initialize: function(e) {
            return u.prototype.initialize.call(this),
            e ? (this.initParams(e),
            this.initPageChange(),
            this.initFormWatch(),
            _._preload(["/tmpl/system/support/common/card/region.twig"])(),
            void (this.log_offset = 0)) : void console.error("Options not defined")
        },
        initParams: function(e) {
            return e.entity ? (this.entity = e.entity,
            void (e.res && e.res.response ? this.params = e.res.response.js_params : this.params = AMOCRM.constant(this.entity + "_card_template_params"))) : void console.error("Entity in options not defined")
        },
        initPageChange: function() {
            AMOCRM.router.registerPreventConfig({
                accept: l.bind(function(e) {
                    l.isFunction(e) && e()
                }, this),
                decline: l.noop()
            })
        },
        initFormWatch: function() {
            this.changes = {
                has_changes: !1,
                can_save: !1
            },
            this.form = this._addComponent(h.View, {
                model: t,
                el: a("#card_form"),
                onSaveForm: l.bind(function(e) {
                    this.initParams({
                        res: e,
                        entity: this.entity
                    }),
                    this._elem("save_btn").trigger("button:saved"),
                    this.applyChanges(!1),
                    AMOCRM.router.navigate(d.setQueryParam({
                        reload: c.randHex()
                    }, {
                        replace: !0
                    }), {
                        trigger: !0
                    })
                }, this),
                onSaveError: l.noop()
            }),
            this.form.model.on("has_changes", l.bind(function() {
                this.applyChanges(!0)
            }, this)).on("has_reverted", l.bind(function() {
                this.applyChanges(!1)
            }, this))
        },
        applyChanges: function(e) {
            this.changes.has_changes = e || !1,
            this.changes.can_save = this.changes.has_changes,
            this.changes.can_save ? this._elem("save_btn").trigger("button:save:enable") : this._elem("save_btn").trigger("button:save:disable"),
            AMOCRM.router.preventPageChange(this.changes.has_changes)
        },
        getAllLeadsNum: function() {
            this.loadAdditionalTable("get_all_leads_num")
        },
        getAllContactsNum: function() {
            this.loadAdditionalTable("get_all_contacts_num")
        },
        getAllCompaniesNum: function() {
            this.loadAdditionalTable("get_all_companies_num")
        },
        getLastWeekLeadsNum: function() {
            this.loadAdditionalTable("get_last_week_leads_num")
        },
        getLastWeekContactsNum: function() {
            this.loadAdditionalTable("get_last_week_contacts_num")
        },
        getLastWeekCompaniesNum: function() {
            this.loadAdditionalTable("get_last_week_companies_num")
        },
        getWidgetsInfo: function() {
            this.loadAdditionalTable("get_widgets")
        },
        getLastWeekUsersAuth: function() {
            this.loadAdditionalTable("get_last_week_users_auth")
        },
        getOrders: function() {
            this.loadAdditionalTable("get_orders")
        },
        recountAccount: function() {
            this.openRecountModal()
        },
        manageProps: function() {
            this.openManagePropsModal()
        },
        transferAccount: function() {
            this.openTransferModal()
        },
        uninstallWidget: function(e) {
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: {
                    action: "uninstall_widget",
                    widget_id: a(e.currentTarget).data("id")
                },
                dataType: "json",
                type: "POST"
            }).done(function(e) {
                e.response ? AMOCRM.router.navigate(d.setQueryParam({
                    reload: c.randHex()
                }, {
                    replace: !0
                }), {
                    trigger: !0
                }) : (new p).showError()
            })
        },
        deleteWidgetInstallation: function(e) {
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: {
                    action: "delete_widget_installation",
                    widget_id: a(e.currentTarget).data("id")
                },
                dataType: "json",
                type: "POST"
            }).done(function(e) {
                e.response ? AMOCRM.router.navigate(d.setQueryParam({
                    reload: c.randHex()
                }, {
                    replace: !0
                }), {
                    trigger: !0
                }) : (new p).showError()
            })
        },
        extendAccount: function() {
            var e = this;
            e.modal = new p({
                class_name: "modal__support_card",
                init_animation: !0,
                init: _._preload(["/tmpl/system/support/stnuocca/extend.twig"], function(t) {
                    t.trigger("modal:loaded").html(_({
                        ref: "/tmpl/system/support/stnuocca/extend.twig"
                    }).render()).trigger("modal:centrify"),
                    e.form = e._addComponent(h.View, {
                        model: n,
                        el: t,
                        extend_btn: t.find(".js-save-extend"),
                        onSaveForm: l.bind(function(t) {
                            e.form.options.extend_btn.trigger("button:saved"),
                            e.modal.destroy(),
                            (new p).showSuccess("OK"),
                            AMOCRM.router.navigate(d.setQueryParam({
                                reload: c.randHex()
                            }, {
                                replace: !0
                            }), {
                                trigger: !0
                            })
                        }, this),
                        onSaveError: function() {
                            e.modal.showError()
                        }
                    }),
                    e.form.model.on("has_changes", l.bind(function() {
                        e.form.model.get("comment") ? (e.form.options.extend_btn.trigger("button:save:enable"),
                        t.find(".support_textarea").removeClass("has_error")) : e.form.options.extend_btn.trigger("button:save:disable")
                    }, this)).on("has_reverted", l.bind(function() {
                        e.form.options.extend_btn.trigger("button:save:disable"),
                        t.find(".support_textarea").addClass("has_error")
                    })),
                    t.on("click", ".js-save-extend", function() {
                        return e.form.options.extend_btn.hasClass("button-input-disabled") ? (t.find(".support_textarea").addClass("has_error"),
                        !1) : (e.form.options.extend_btn.trigger("button:save:start"),
                        void e.form.save())
                    }).on("change", "input[name=action]:radio", function() {
                        var i = e.form.model.get("action")
                          , s = {
                            name: "date",
                            type: "single",
                            placeholder: "...",
                            value: a("#account_" + i + "_end").val()
                        };
                        t.find(".extend_input").html(_({
                            ref: "/tmpl/controls/date_field.twig"
                        }).render(s)),
                        e.form.updateModelFromForm(),
                        e.form.model.set("action", i)
                    })
                })
            })
        },
        showTransferModal: function(e, t) {
            var i = this;
            i.modal = new p({
                class_name: "modal__support_card",
                init_animation: !0,
                init: _._preload(["/tmpl/system/support/stnuocca/transfer.twig"], function(n) {
                    n.trigger("modal:loaded").html(_({
                        ref: "/tmpl/system/support/stnuocca/transfer.twig"
                    }).render({
                        params: e.response,
                        new_id: t
                    })).trigger("modal:centrify"),
                    i.form = i._addComponent(h.View, {
                        model: s,
                        el: n,
                        transfer_btn: n.find(".js-save-transfer"),
                        onSaveForm: l.bind(function(e) {
                            i.form.options.transfer_btn.trigger("button:saved"),
                            i.modal.destroy(),
                            (new p).showSuccess("OK"),
                            AMOCRM.router.navigate(d.setQueryParam({
                                reload: c.randHex()
                            }, {
                                replace: !0
                            }), {
                                trigger: !0
                            })
                        }, this),
                        onSaveError: function() {
                            i.modal.showError()
                        }
                    }),
                    i.form.model.on("has_changes", l.bind(function() {
                        i.form.model.get("comment") ? (i.form.options.transfer_btn.trigger("button:save:enable"),
                        n.find(".support_textarea").removeClass("has_error")) : i.form.options.transfer_btn.trigger("button:save:disable")
                    }, this)).on("has_reverted", l.bind(function() {
                        i.form.options.transfer_btn.trigger("button:save:disable"),
                        n.find(".support_textarea").addClass("has_error")
                    })),
                    n.on("click", ".js-save-transfer", function() {
                        return i.form.options.transfer_btn.hasClass("button-input-disabled") ? (n.find(".support_textarea").addClass("has_error"),
                        !1) : (i.form.options.transfer_btn.trigger("button:save:start"),
                        void i.form.save())
                    })
                })
            })
        },
        openTransferModal: function() {
            var e = this;
            e.modal = new p({
                class_name: "modal__support_card",
                init_animation: !0,
                init: _._preload(["/tmpl/system/support/stnuocca/transfer_enter_id.twig"], function(t) {
                    t.trigger("modal:loaded").html(_({
                        ref: "/tmpl/system/support/stnuocca/transfer_enter_id.twig"
                    }).render()).trigger("modal:centrify"),
                    t.on("click", ".js-save-transfer_account_id", function() {
                        var i = t.find(".js-transfer-account-id").val();
                        return i === a("#account_id").val() ? void e.modal.showError("јккаунта не существует или попытка переноса в текущий аккаунт") : void a.ajax({
                            url: "/ajax" + window.location.pathname,
                            data: "action=transfer&new_account=" + i,
                            dataType: "json",
                            type: "POST"
                        }).done(function(t) {
                            return t.response.account ? (e.modal.destroy(),
                            void e.showTransferModal(t, i)) : void e.modal.showError("јккаунта не существует или попытка переноса в текущий аккаунт")
                        })
                    })
                })
            })
        },
        openManagePropsModal: function() {
            var e = this;
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: "action=manage_props",
                dataType: "json",
                type: "POST"
            }).done(function(t) {
                e.modal = new p({
                    class_name: "modal__support_card",
                    init_animation: !0,
                    init: _._preload(["/tmpl/system/support/stnuocca/recount.twig"], function(i) {
                        i.trigger("modal:loaded").html(_({
                            ref: "/tmpl/system/support/stnuocca/recount.twig"
                        }).render({
                            params: t.response
                        })).trigger("modal:centrify"),
                        e.form = e._addComponent(h.View, {
                            model: o,
                            el: i,
                            recount_btn: i.find(".js-save-recount"),
                            onSaveForm: l.bind(function(t) {
                                e.form.options.recount_btn.trigger("button:saved"),
                                e.modal.destroy(),
                                (new p).showSuccess("OK"),
                                AMOCRM.router.navigate(d.setQueryParam({
                                    reload: c.randHex()
                                }, {
                                    replace: !0
                                }), {
                                    trigger: !0
                                })
                            }, this),
                            onSaveError: function() {
                                e.modal.showError()
                            }
                        }),
                        e.form.model.on("has_changes", l.bind(function() {
                            e.form.model.get("comment") ? (e.form.options.recount_btn.trigger("button:save:enable"),
                            i.find(".support_textarea").removeClass("has_error")) : e.form.options.recount_btn.trigger("button:save:disable")
                        }, this)).on("has_reverted", l.bind(function() {
                            e.form.options.recount_btn.trigger("button:save:disable"),
                            i.find(".support_textarea").addClass("has_error")
                        })),
                        i.on("click", ".js-save-recount", function() {
                            return e.form.options.recount_btn.hasClass("button-input-disabled") ? (i.find(".support_textarea").addClass("has_error"),
                            !1) : (e.form.options.recount_btn.trigger("button:save:start"),
                            void e.form.save())
                        })
                    })
                })
            })
        },
        openRecountModal: function() {
            var e = this;
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: "action=recount",
                dataType: "json",
                type: "POST"
            }).done(function(t) {
                e.modal = new p({
                    class_name: "modal__support_card",
                    init_animation: !0,
                    init: _._preload(["/tmpl/system/support/stnuocca/recount.twig"], function(s) {
                        s.trigger("modal:loaded").html(_({
                            ref: "/tmpl/system/support/stnuocca/recount.twig"
                        }).render({
                            params: t.response
                        })).trigger("modal:centrify"),
                        e.form = e._addComponent(h.View, {
                            model: i,
                            el: s,
                            recount_btn: s.find(".js-save-recount"),
                            onSaveForm: l.bind(function(t) {
                                t.response.error ? (e.form.options.recount_btn.trigger("button:save:error"),
                                e.modal.showError(t.response.error)) : (e.form.options.recount_btn.trigger("button:saved"),
                                e.modal.destroy(),
                                (new p).showSuccess("OK"),
                                AMOCRM.router.navigate(d.setQueryParam({
                                    reload: c.randHex()
                                }, {
                                    replace: !0
                                }), {
                                    trigger: !0
                                }))
                            }, this),
                            onSaveError: function() {
                                e.modal.showError()
                            }
                        }),
                        e.form.model.on("has_changes", l.bind(function() {
                            e.form.model.get("comment") ? (e.form.options.recount_btn.trigger("button:save:enable"),
                            s.find(".support_textarea").removeClass("has_error")) : e.form.options.recount_btn.trigger("button:save:disable")
                        }, this)).on("has_reverted", l.bind(function() {
                            e.form.options.recount_btn.trigger("button:save:disable"),
                            s.find(".support_textarea").addClass("has_error")
                        })),
                        s.on("click", ".js-save-recount", function() {
                            return e.form.options.recount_btn.hasClass("button-input-disabled") ? (s.find(".support_textarea").addClass("has_error"),
                            !1) : (e.form.options.recount_btn.trigger("button:save:start"),
                            void e.form.save())
                        }).on("change", "#account_tariff_id", function() {
                            var t = s.find(".control--select--list--item-selected").data("price-per-user");
                            s.find("#recount_new_price_per_user").val(t),
                            0 === s.find(".control--select--list--item-selected").data("by-user") ? s.find("#recount_new_user_count").closest("tr").hide() : s.find("#recount_new_user_count").closest("tr").show(),
                            e.form.model.set("new_price_per_user", t)
                        })
                    })
                })
            })
        },
        loadAdditionalTable: function(e) {
            var t = "#js-button-" + e;
            a(t).prop("disabled", !0),
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: "action=" + e,
                dataType: "json",
                type: "POST"
            }).done(function(e) {
                a(t).addClass("button-input-disabled"),
                a("#card_form").append(_({
                    ref: "/tmpl/system/support/common/card/region.twig"
                }).render(e.response))
            }).fail(function() {
                a(t).prop("disabled", !1)
            })
        },
        getLog: function() {
            var e = this
              , t = "#js-button-get_log";
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: {
                    action: "get_log",
                    offset: e.log_offset
                },
                dataType: "json",
                type: "POST"
            }).done(function(i) {
                l.size(i.response.table.values) >= 50 ? e.log_offset += 50 : (a(t).prop("disabled", !0),
                a(t).addClass("button-input-disabled")),
                a("#card_form").append(_({
                    ref: "/tmpl/system/support/common/card/region.twig"
                }).render(i.response))
            })
        },
        checkBlock: function() {
            var e = "#js-button-get_check_block";
            a(e).prop("disabled", !0),
            a.ajax({
                url: "/ajax" + window.location.pathname,
                data: "action=check_block",
                dataType: "json",
                type: "POST"
            }).done(function(t) {
                a(e).addClass("button-input-disabled"),
                a("#card_form").append(_({
                    ref: "/tmpl/system/support/stnuocca/block_status.twig"
                }).render(t.response))
            }).fail(function() {
                a(e).prop("disabled", !1)
            })
        },
        mailboxList: function() {
            var e = this
              , t = "#js-button-get_mailbox_list"
              , i = {
                id: e.form.model.attributes["account[id]"],
                subdomain: e.form.model.attributes["account[subdomain]"]
            };
            a(t).prop("disabled", !0),
            m.getMailboxes(i.id).done(l.bind(function(e) {
                a(t).addClass("button-input-disabled"),
                a("#card_form").append(_({
                    ref: "/tmpl/system/support/mailboxes/tables/list.twig"
                }).render({
                    mailboxes: e,
                    account_id: i.id
                }))
            })).fail(l.bind(function(e, i, s) {
                console.log(e),
                404 === e.status ? a("#card_form").append("<p>Ќе удалось найти €щики<p>") : a("#card_form").append("<p>ќшибка (" + s + ")<p>"),
                a(t).prop("disabled", !1)
            }))
        },
        saveChanges: function() {
            this.changes.can_save && (this._elem("save_btn").trigger("button:load:start"),
            this.form.save())
        },
        destroy: function() {
            u.prototype.destroy.call(this)
        }
    })
}),
define("lib/pages/support/mailboxes/card", ["require", "jquery", "underscore", "lib/pages/support/card", "lib/components/support/support_api", "twig"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/pages/support/card"), o = e("lib/components/support/support_api"), r = e("twig");
    return t = n.extend({
        options: null,
        initialize: function(e) {
            this.options = e || {},
            this.options.entity = e.entity || "mailbox_card",
            n.prototype.initialize.call(this, this.options),
            "mailbox_card" === this.options.entity && this.renderPage()
        },
        _title: function() {
            return AMOCRM.lang.support_amomail_mailbox_card
        },
        events: function() {
            return s.extend({
                "click #button-connect": "mailboxConnect",
                "click #button-diagnostic": "mailboxDiagnose"
            }, n.prototype.events || {}, {})
        },
        destroy: function() {
            clearTimeout(this.mds_timeout_id),
            n.prototype.destroy.call(this)
        },
        renderPage: function() {
            var e = this
              , t = e.getRouteParams(this.options.route_args)
              , n = AMOCRM.constant("support_mailbox_template_params");
            n || (n = e.getTemplateParams()),
            r._preload(["/tmpl/" + n.template.name, "/tmpl/system/support/mailboxes/tables/detail.twig", "/tmpl/system/support/mailboxes/diagnostic_result.twig"], function() {
                i("#page_holder").html(r({
                    ref: "/tmpl/" + n.template.name
                }).render(n)),
                o.getMailbox(t.account_id, t.mailbox_id).done(s.bind(function(t) {
                    e.bindButtons(t.state, t.type, t.auth_type),
                    e.renderTable(t)
                }))
            })()
        },
        renderTable: function(e) {
            i("#card_form").append(r({
                ref: "/tmpl/system/support/mailboxes/tables/detail.twig"
            }).render({
                data: e
            }))
        },
        bindButtons: function(e, t, s) {
            var n = i("#button-connect")
              , o = i("#button-diagnostic");
            "not-connected" === e ? n.attr("disabled", !1).trigger("button:save:enable") : "connecting" === e ? n.attr("disabled", !0).trigger("button:save:disable").trigger("button:save:start") : (n.attr("disabled", !0),
            n.attr("disabled", !0).trigger("button:save:disable")),
            "internal" === t ? o.attr("disabled", !0).trigger("button:save:disable") : o.attr("disabled", !1).trigger("button:save:enable")
        },
        mailboxConnect: function() {
            var e = this
              , t = i("#button-connect")
              , s = e.getRouteParams(this.options.route_args);
            t.attr("disabled", !0).trigger("button:save:disable").trigger("button:save:start"),
            o.connectMailbox(s.account_id, s.mailbox_id)
        },
        mailboxDiagnose: function() {
            var e = this
              , t = i("#button-diagnostic")
              , n = e.getRouteParams(this.options.route_args);
            t.attr("disabled", !0).trigger("button:save:disable").trigger("button:save:start"),
            o.diagnoseMailbox(n.account_id, n.mailbox_id).done(s.bind(function(t) {
                t.id && (n.task_id = t.id,
                e.mailboxDiagnosticStatus(n))
            }))
        },
        mailboxDiagnosticStatus: function(e) {
            var t = this
              , n = i("#button-diagnostic")
              , a = null;
            o.getMailboxDiagnosticStatus(e.account_id, e.mailbox_id, e.task_id).done(s.bind(function(s) {
                s !== a && (i("#diagnostic_result").html(r({
                    ref: "/tmpl/system/support/mailboxes/tables/diagnostic_result.twig"
                }).render({
                    title: s.status,
                    created_at: s.created_at,
                    checks: s.checks
                })),
                a = s),
                "complete" === s.status ? n.attr("disabled", !1).trigger("button:load:stop").trigger("button:save:enable") : t.mds_timeout_id = setTimeout(function() {
                    t.mailboxDiagnosticStatus(e)
                }, 5e3)
            }))
        },
        getRouteParams: function(e) {
            return {
                account_id: e[0],
                mailbox_id: e[1]
            }
        },
        getTemplateParams: function() {
            var e = this.getRouteParams(this.options.route_args);
            return {
                lang: {
                    title: AMOCRM.lang.support_amomail_mailbox_card,
                    page: {
                        title: AMOCRM.lang.support_amomail_mailbox_card
                    }
                },
                template: {
                    name: "system/support/mailboxes/card.twig",
                    page: {
                        section: "support_card"
                    },
                    controls: {
                        suggest_params: {
                            value: AMOCRM.lang.support_amomail_mailbox + " є " + e.mailbox_id,
                            name: "mailbox[title]",
                            id: "mailbox_name",
                            styled_input: !0,
                            disabled: !0,
                            class_name: "text-input card-top-name__row__input-wrapper__input card-big-input",
                            input_class_name: "js-suggest-main-name card-top-name__row__input-wrapper__input card-big-input"
                        },
                        buttons: {
                            connect: {
                                text: AMOCRM.lang.support_amomail_btn_connect,
                                type: "button",
                                id: "button-connect",
                                disabled: !0,
                                class_name: "button-input_blue js-connect-button"
                            },
                            diagnostic: {
                                text: AMOCRM.lang.support_amomail_btn_diagnostic,
                                type: "button",
                                id: "button-diagnostic",
                                class_name: "button-input_blue js-connect-button"
                            }
                        }
                    }
                }
            }
        }
    })
}),
define("lib/pages/support/calls/page", ["require", "lib/core/page", "lib/components/base/form", "lib/components/base/modal", "twig", "underscore"], function(e) {
    "use strict";
    var t, i, s = e("lib/core/page"), n = e("lib/components/base/form"), o = e("lib/components/base/modal"), r = e("twig"), a = e("underscore");
    return t = n.Model.extend({
        save: function(e) {
            this.is_saving || (this.is_saving = !0,
            $.ajax({
                url: "/ajax" + window.location.pathname,
                dataType: "json",
                type: "POST",
                data: this.toJSON()
            }).always(a.bind(function() {
                this.is_saving = !1
            }, this)).done(a.bind(function(t) {
                e.success.call(this, t)
            }, this)).fail(a.bind(function() {
                e.error.call(this)
            }, this)))
        }
    }),
    i = s.extend({
        endpoint: "/ajax/_support/calls_info/",
        template: "/tmpl/system/support/calls/main.twig",
        overlay_class_name: "aside-page-overlay",
        _selectors: function() {
            return {
                calls_add_key_form: "#calls_add_key_form",
                last_sync_form: "#last_sync_form",
                sync_errors_form: "#sync_errors_form",
                info_by_uid_form: "#info_by_uid_form"
            }
        },
        events: function() {
            return {
                "click #last_sync": "getLastSync",
                "click #sync_errors": "getSyncErrors",
                "click #get_info_by_uid": "getInfoByUid",
                "click #new_key": "createNewKey"
            }
        },
        getLastSync: function() {
            return this.last_sync_form.model.get("account_id") ? (this.$el.find(this._selector("last_sync_form")).find("input").removeClass("has_error"),
            void this.last_sync_form.save()) : (this.$el.find(this._selector("last_sync_form")).find("input").addClass("has_error"),
            !1)
        },
        getSyncErrors: function() {
            return this.sync_errors_form.model.get("account_id") && this.sync_errors_form.model.get("widget_code") ? (this.$el.find(this._selector("sync_errors_form")).find("input").removeClass("has_error"),
            void this.sync_errors_form.save()) : (this.$el.find(this._selector("sync_errors_form")).find("input").addClass("has_error"),
            !1)
        },
        getInfoByUid: function() {
            return this.info_by_uid_form.model.get("account_id") && this.info_by_uid_form.model.get("widget_code") && this.info_by_uid_form.model.get("uid") ? (this.$el.find(this._selector("info_by_uid_form")).find("input").removeClass("has_error"),
            void this.info_by_uid_form.save()) : (this.$el.find(this._selector("info_by_uid_form")).find("input").addClass("has_error"),
            !1)
        },
        createNewKey: function() {
            return this.calls_add_key_form.model.get("account_id") && this.calls_add_key_form.model.get("widget_code") ? (this.$el.find(this._selector("calls_add_key_form")).find("input").removeClass("has_error"),
            void this.calls_add_key_form.save()) : (this.$el.find(this._selector("calls_add_key_form")).find("input").addClass("has_error"),
            !1)
        },
        initialize: function(e) {
            s.prototype.initialize.call(this, e),
            this.last_sync_form = this._addComponent(n.View, {
                model: t,
                el: this._$document.find("#last_sync_form"),
                onSaveForm: a.bind(function(e) {
                    this.modal = new o({
                        class_name: "modal__support_card content__support_card",
                        init_animation: !0,
                        init: r._preload(["/tmpl/system/support/calls/sync_info.twig"], function(t) {
                            t.trigger("modal:loaded").html(r({
                                ref: "/tmpl/system/support/calls/sync_info.twig"
                            }).render({
                                params: e.response
                            })).css("width", "670px").trigger("modal:centrify"),
                            this.modal_body = t
                        })
                    })
                }, this)
            }),
            this.sync_errors_form = this._addComponent(n.View, {
                model: t,
                el: this._$document.find("#sync_errors_form"),
                onSaveForm: a.bind(function(e) {
                    this.modal = new o({
                        class_name: "modal__support_card content__support_card",
                        init_animation: !0,
                        init: r._preload(["/tmpl/system/support/calls/sync_errors.twig"], function(t) {
                            var i = e.response[0] ? "90%" : "400px";
                            t.trigger("modal:loaded").html(r({
                                ref: "/tmpl/system/support/calls/sync_errors.twig"
                            }).render({
                                params: e.response
                            })).css("width", i).trigger("modal:centrify"),
                            this.modal_body = t
                        })
                    })
                }, this)
            }),
            this.info_by_uid_form = this._addComponent(n.View, {
                model: t,
                el: this._$document.find("#info_by_uid_form"),
                onSaveForm: a.bind(function(e) {
                    this.modal = new o({
                        class_name: "modal__support_card content__support_card",
                        init_animation: !0,
                        init: r._preload(["/tmpl/system/support/calls/call_info.twig"], function(t) {
                            t.trigger("modal:loaded").html(r({
                                ref: "/tmpl/system/support/calls/call_info.twig"
                            }).render({
                                params: e.response
                            })).css("width", "500px").trigger("modal:centrify"),
                            this.modal_body = t
                        })
                    })
                }, this)
            }),
            this.calls_add_key_form = this._addComponent(n.View, {
                model: t,
                el: this._$document.find("#calls_add_key_form"),
                onSaveForm: a.bind(function(e) {
                    this.modal = new o({
                        class_name: "modal__support_card",
                        init_animation: !0,
                        init: r._preload(["/tmpl/system/support/calls/key.twig"], function(t) {
                            t.trigger("modal:loaded").html(r({
                                ref: "/tmpl/system/support/calls/key.twig"
                            }).render({
                                params: e.response
                            })).css("width", "600px").trigger("modal:centrify")
                        })
                    })
                }, this)
            })
        },
        _title: function() {
            return AMOCRM.lang.page.title
        }
    })
}),
define("lib/pages/routes", ["require", "lib/pages/dashboard", "lib/pages/leads/pipeline_in_list", "lib/pages/unsorted/list", "lib/pages/leads/list", "lib/pages/leads/list", "lib/pages/leads/pipeline", "lib/pages/feed_card", "lib/pages/feed_card", "lib/pages/customers/list", "lib/pages/customers/pipeline", "lib/pages/customers/list", "lib/pages/feed_card", "lib/pages/feed_card", "lib/pages/contacts/list", "lib/pages/contacts/list", "lib/pages/feed_card", "lib/pages/feed_card", "lib/pages/feed_card", "lib/pages/feed_card", "lib/pages/unsorted/card", "lib/pages/mail/page", "lib/pages/mail/thread", "lib/pages/todos/list", "lib/pages/todos/list", "lib/pages/todos/line", "lib/pages/todos/calendar", "lib/pages/list", "lib/pages/list", "lib/pages/reports/winlost", "lib/pages/reports/by_activities", "lib/pages/reports/consolidated", "lib/pages/reports/calls", "lib/pages/reports/goals", "lib/pages/reports/goals", "lib/pages/reports/goals", "lib/pages/settings/goals", "lib/pages/settings/profile", "lib/pages/settings/settings", "lib/pages/settings/statuses", "lib/pages/settings/custom_fields", "lib/pages/settings/triggers", "lib/pages/settings/scoring", "lib/interface/widget_settings", "lib/pages/development", "lib/pages/settings/safety", "lib/pages/settings/safety", "lib/pages/user_rights", "lib/pages/settings/dp_controller", "lib/pages/settings/dp_controller", "lib/pages/catalogs", "lib/pages/support/orders/create", "lib/pages/support/mailboxes/card", "lib/pages/support/calls/page"], function(e) {
    "use strict";
    return {
        "dashboard/": ["dashboard", e("lib/pages/dashboard")],
        "leads/list/pipeline/(:id)(/)(page/:page/)": ["leads", e("lib/pages/leads/pipeline_in_list")],
        "leads/list/(pipeline/:id/)unsorted(/)(page/:page/)": ["leads-unsorted", e("lib/pages/unsorted/list")],
        "leads/list/(page/:page/)": ["leads", e("lib/pages/leads/list")],
        "leads/trash/(page/:page/)": ["leads-trash", e("lib/pages/leads/list")],
        "leads/pipeline/(:id)(/)(?*qs)": ["leads-pipeline", e("lib/pages/leads/pipeline")],
        "leads/detail/:id": ["leads", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "leads/add/": ["leads", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "customers/list(/page/:page)(/)": ["customers", e("lib/pages/customers/list")],
        "customers/pipeline(*plug)": ["customers-pipeline", e("lib/pages/customers/pipeline")],
        "customers/trash/(page/:page/)": ["customers-trash", e("lib/pages/customers/list")],
        "customers/detail/:id": ["customers", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "customers/add/": ["customers", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "contacts/list/(:element_type/)(page/:page/)": ["contacts", e("lib/pages/contacts/list")],
        "contacts/trash/(page/:page/)": ["contacts-trash", e("lib/pages/contacts/list")],
        "contacts/detail/:id": ["contacts", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "contacts/add/": ["contacts", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "companies/detail/:id": ["companies", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "companies/add/": ["companies", e("lib/pages/feed_card"), {
            is_card: !0
        }],
        "unsorted/detail/:id": ["unsorted", e("lib/pages/unsorted/card"), {
            is_card: !0
        }],
        "mail/:folder/(:box/)(page/:page/)": ["mail", e("lib/pages/mail/page")],
        "mail/thread/:id": ["mail", e("lib/pages/mail/thread"), {
            is_card: !0
        }],
        "todo/list/(page/:page/)": ["todo", e("lib/pages/todos/list")],
        "todo/trash/(page/:page/)": ["todo-trash", e("lib/pages/todos/list")],
        "todo/line(/)": ["todo-line", e("lib/pages/todos/line")],
        "todo/calendar/(:view)(/)": ["todo-calendar", e("lib/pages/todos/calendar")],
        "events/list/(page/:page/)": ["events", e("lib/pages/list")],
        "authlog/list/(page/:page/)": ["authlog", e("lib/pages/list")],
        "stats/": ["stats", e("lib/pages/reports/winlost")],
        "stats/by_activities/": ["stats", e("lib/pages/reports/by_activities")],
        "stats/consolidated/(:report/)": ["stats", e("lib/pages/reports/consolidated")],
        "stats/calls/(:report/)": ["statsCalls", e("lib/pages/reports/calls")],
        "stats/goals/": ["stats", e("lib/pages/reports/goals")],
        "stats/goals/leads_price/": ["stats", e("lib/pages/reports/goals")],
        "stats/goals/leads_count/": ["stats", e("lib/pages/reports/goals")],
        "stats/goals/settings/": ["stats", e("lib/pages/settings/goals")],
        "settings/profile(/)": ["settings", e("lib/pages/settings/profile")],
        "settings/": ["settings", e("lib/pages/settings/settings")],
        "settings/statuses/": ["settings", e("lib/pages/settings/statuses")],
        "settings/custom_fields/": ["settings", e("lib/pages/settings/custom_fields")],
        "settings/processes/": ["settings", e("lib/pages/settings/triggers")],
        "settings/scoring/": ["settings", e("lib/pages/settings/scoring")],
        "settings/widgets(/)": ["widgetsSettings", e("lib/interface/widget_settings")],
        "settings/dev/(page/:page/)": ["dev", e("lib/pages/development")],
        "settings/security/": ["settings", e("lib/pages/settings/safety")],
        "backup/(:key/)": ["settings", e("lib/pages/settings/safety")],
        "settings/users(/)": ["settings", e("lib/pages/user_rights")],
        "settings/pipeline/leads(/)(:id)(/)": ["leads-dp", e("lib/pages/settings/dp_controller")],
        "settings/pipeline/customers(/)(:id)(/)": ["customers-dp", e("lib/pages/settings/dp_controller")],
        "catalogs(/)(:id)(/)(page/:page/)": ["catalogs", e("lib/pages/catalogs"), {
            ajax_load: !0
        }],
        "_support/orders/create/": ["support", e("lib/pages/support/orders/create")],
        "_support/amomail/:accountId/mailbox/:id(/)": ["support", e("lib/pages/support/mailboxes/card")],
        "_support/calls_info/": ["support", e("lib/pages/support/calls/page")]
    }
}),
define("lib/components/auth_modal", ["jquery"], function(e) {
    var t = function(t) {
        document.getElementById("session_end_modal") || document.getElementById("authentication") || (e("body").css("overflow", "hidden").prepend('<div id="session_end_modal" class="session_end_modal" style="position:fixed;top:0;height:100%;width:100%;z-index:1010;left:0">					 				<div class="default-overlay" id="session_end_overlay" style="background: rgba(255,255,255,0.6);"></div>									<iframe name="session_end_frame" style="width:100%;height:100%;position:fixed;z-index:9999999;" src="/private/account/restore_session.php"></iframe>							    </div>'),
        this.url = t || !1,
        this.$modal = e("#session_end_modal"),
        this.$overlay = e("#session_end_overlay"),
        AMOCRM.auth_modal = this),
        e("#session_end_overlay").addClass("default-overlay-visible")
    };
    return t.prototype.destroy = function() {
        this.$modal.remove(),
        this.$overlay.removeClass("default-overlay-visible"),
        this.$overlay.remove(),
        e("body").css("overflow", "auto"),
        this.url && AMOCRM.router.navigate(this.url, {
            trigger: !0
        }),
        delete window.AMOCRM.auth_modal
    }
    ,
    t
}),
define("lib/components/base/payment", ["require", "underscore", "jquery", "lib/common/fn", "lib/components/base/modal", "lib/components/base/confirm", "lib/common/urlparams", "lib/interface/support"], function(e) {
    var t, i = e("underscore"), s = e("jquery"), n = e("lib/common/fn"), o = e("lib/components/base/modal"), r = e("lib/components/base/confirm"), a = e("lib/common/urlparams"), l = e("lib/interface/support");
    return t = function() {
        var e = this;
        e.controls = {
            $document: s(document),
            $gift_spans: {}
        },
        e.$modal_obj = !1,
        e.callbacks = {},
        e.allow_zero_elongation_month = !0,
        e.$numeral_controls = s(".numeral"),
        e.$numeral_controls.length < 1 && (e.$numeral_controls = !1),
        e.constants = {
            error_class: "validate-has-error",
            slide_duration: 200,
            default_elongation_month_count: 12,
            action_class: ".pay",
            click_event: AMOCRM.click_event + ".pay",
            payment_postfix_event: ".pay_modal",
            elongation_disabled_class: "disabled",
            coupon_none: "none",
            addition_months_coupons: {
                amocrm1: 1,
                amocrm2: 2,
                amocrm3: 3,
                amocrm6: 6,
                amocrm9: 9
            },
            precision: 0,
            pay_systems: AMOCRM.constant("pay_systems"),
            person_types: AMOCRM.constant("person_types")
        },
        e.payment_controls = {},
        e.selected_tariff = {}
    }
    ,
    t.prototype.getHiddenMonthByCoupon = function(e) {
        if (e = e.toString().trim(),
        !e.length)
            return !1;
        var t = this.getHiddenMonthCoupons();
        return t.hasOwnProperty(e) ? t[e] : !1
    }
    ,
    t.prototype.getHiddenMonthCoupons = function() {
        return this.constants.addition_months_coupons
    }
    ,
    t.prototype.cancel_rec_pay_usa = function(e) {
        var t = this;
        t.overlay_start(),
        s.post("/private/ajax/payment_old_actions.php", {
            ajax: "y",
            ACTION: "CANCEL_REC_PAY_USA"
        }).done(function(i) {
            t.overlay_stop(),
            i.state && "success" == i.state && (t.account.rec_pay_on = !1,
            "function" == typeof e && e())
        })
    }
    ,
    t.prototype.get_locale_id = function(e) {
        var t = this;
        e = e || t.account.locale.int_curr_symbol;
        var i = s.trim(e);
        return i = "UAH" == i ? "ua" : "USD" == i ? "en" : "KZT" == i ? "kz" : "ru"
    }
    ,
    t.prototype.bind_clicks_base = function() {
        var e = this
          , t = e.constants.click_event;
        e.controls.$plus_button && e.controls.$plus_button.on(t, function() {
            e.recount_prices(e.account.addition_users_count + 1)
        }),
        e.controls.$minus_button && e.controls.$minus_button.on(t, function() {
            e.recount_prices(e.account.addition_users_count - 1)
        }),
        e.controls.$document && e.controls.$document.one(e.constants.click_event, "#enter_coupone", function() {
            var t = s(this)
              , i = s("#coupon_code")
              , n = i.parent();
            t.hide(),
            n.toggleClass("js-item-animate-remove"),
            e.controls.$document.on("keyup" + e.constants.action_class, "#coupon_code", function() {
                var t = i.val() || "";
                t.length > 0 ? (e.account.coupon_code = t,
                e.refresh_data({
                    callbacks: {
                        success: function() {
                            e.check_coupon_input(i)
                        }
                    }
                })) : e.account.coupon_sale_in_percent > 0 ? (e.account.coupon_code = e.constants.coupon_none,
                e.refresh_data({
                    callbacks: {
                        success: function() {
                            i.removeClass(e.constants.error_class)
                        }
                    }
                })) : (e.account.coupon_code = e.constants.coupon_none,
                i.removeClass(e.constants.error_class),
                e.recount_prices())
            })
        }),
        e.controls.$addition_users_input && e.controls.$addition_users_input.on("keypress" + e.constants.action_class, function(e) {
            n.digits_only(e)
        }).on("keyup" + e.constants.action_class, function() {
            var t = s(this)
              , i = t.val().replace(/\D/g, "");
            i.length > 0 && (i = parseInt(i, 10),
            e.recount_prices(i))
        })
    }
    ,
    t.prototype.check_coupon_input = function(e) {
        if (e = e || s("#coupon_code"),
        e && e.length) {
            var t = this;
            return t.isCouponReadyForPay() ? void e.removeClass(t.constants.error_class) : (e.addClass(t.constants.error_class),
            void t.controls.$document.on("focus" + t.constants.action_class, "#coupon_code", function() {
                e.removeClass(t.constants.error_class)
            }))
        }
    }
    ,
    t.prototype.initial_parse_numbers = function() {
        var e, t = this, i = ["tariff_one_month_price_base", "one_user_price_before_term_end"], s = ["current_users_count", "coupon_sale_in_percent", "total_users_count", "addition_users_count", "elongation_month_count", "min_users_add_count", "trial_days_left"];
        for (e = 0; e < i.length; e++)
            t.account[i[e]] = parseFloat(t.account[i[e]]);
        for (e = 0; e < s.length; e++)
            t.account[s[e]] = parseInt(t.account[s[e]], 10)
    }
    ,
    t.prototype.check_selected_tariff = function(e) {
        var t = this;
        t.selected_tariff.unlimited_users = !1,
        t.selected_tariff.by_user ? !t.account.is_old_payment && t.current_tariff_selected() && t.account.has_tariff || (t.account.current_users_count = 0) : (t.account.addition_users_count = 0,
        t.selected_tariff.users_count < 1 ? (t.account.current_users_count = 1,
        t.selected_tariff.unlimited_users = !0) : t.account.current_users_count = t.selected_tariff.users_count),
        e && t.check_need_header_modify(),
        t.account.tariff_one_month_price_base = t.selected_tariff.price,
        t.account.tariff_month_sales_percents = t.selected_tariff.months_sales_percents
    }
    ,
    t.prototype.check_need_header_modify = function() {
        var e, t;
        e = "trial" === this.account.addition_info.account.state,
        e = e || this.account.addition_info.account.expired && "by_user" === this.account.addition_info.account.state,
        t = this.account.addition_info.account.overflow.state,
        t = t && this.selected_tariff.active,
        t = t && "by_user" !== this.account.addition_info.account.state,
        t = t && !this.current_tariff_selected(),
        e ? this.selected_tariff.by_user ? this.modify_header_by_user(this.selected_tariff) : this.modify_header_package(this.selected_tariff) : t && this.modify_overflow(this.selected_tariff)
    }
    ,
    t.prototype.modify_overflow = function(e) {
        var t, o, r, a, l;
        if (e = e || this.selected_tariff,
        r = e.recommendations,
        "undefined" == typeof ("undefined" !== AMOCRM.lang.form.header.templates) && AMOCRM.lang.form.header.templates == "undefined".from.length) {
            if (t = AMOCRM.lang.form.header.templates.overflow.recommendation,
            e.by_user) {
                switch (this.account.addition_users_count = r.min_users_count,
                o = AMOCRM.lang.form.header.templates.overflow.tariff_users_count,
                o = o.replace("#tariff#", e.name).replace("#users_count#", n.numeralWord(r.min_users_count, AMOCRM.lang.users, !0)),
                t = t.replace("#tariff#", o),
                o = AMOCRM.lang.form.header.templates.overflow.limit_one_user,
                r.reason) {
                case "contacts":
                    o = o.replace("#limit_count#", n.numeralWord(r.tariff_quote_contacts, AMOCRM.lang.contacts_and_companies, !0));
                    break;
                case "deals":
                    o = o.replace("#limit_count#", n.numeralWord(r.tariff_quote_deals, AMOCRM.lang.leads, !0));
                    break;
                case "disk_space":
                    o = o.replace("#limit_count#", n.formatFileSize(1024 * r.tariff_quote_disk_space * 1024));
                    break;
                default:
                    o = ""
                }
                t = t.replace("#limit_one_user#", o)
            } else
                l = {
                    tariff_quote_users: "used_users_count",
                    tariff_quote_contacts: "used_contacts_count",
                    tariff_quote_deals: "used_deals_count",
                    tariff_quote_disk_space: "used_disk_space_count"
                },
                a = !1,
                i.each(l, function(e, t) {
                    r[t] > 0 && r[t] < r[e] && (a = !0)
                }),
                a && (t = AMOCRM.lang.form.header.templates.overflow.not_recommended),
                t = t.replace("#tariff#", e.name),
                t = t.replace("#limit_one_user#", "");
            s("#billing__quota_exceeded__recommendation").text(t)
        }
    }
    ,
    t.prototype.modify_header_package = function(e) {
        var t, o, r, a, l = "";
        e.active && (t = e.recommendations,
        o = AMOCRM.lang.form.header.templates.addition.not_recommended,
        r = {
            tariff_quote_users: "used_users_count",
            tariff_quote_contacts: "used_contacts_count",
            tariff_quote_deals: "used_deals_count",
            tariff_quote_disk_space: "used_disk_space_count"
        },
        i.each(r, function(e, i) {
            if (t[i] > 0 && t[i] < t[e])
                switch (l.length && (l += ", "),
                i) {
                case "tariff_quote_users":
                    l += n.numeralWord(t[e], AMOCRM.lang.users, !0);
                    break;
                case "tariff_quote_contacts":
                    l += n.numeralWord(t[e], AMOCRM.lang.contacts_and_companies, !0);
                    break;
                case "tariff_quote_deals":
                    l += n.numeralWord(t[e], AMOCRM.lang.leads, !0);
                    break;
                case "tariff_quote_disk_space":
                    l += n.formatFileSize(1024 * t[e] * 1024)
                }
        }, this),
        l.length ? (o = o.replace("#tariff_name#", e.name),
        o = o.replace("#used_limits_count#", l),
        a = "//www.amocrm." + ("ru" === AMOCRM.lang_id ? "ru" : "com") + "/buy/compare/",
        o += '<div><a href="' + a + '">' + AMOCRM.lang.read_more + "</a></div>") : o = "",
        s("#billing__form__header__addition").html(o))
    }
    ,
    t.prototype.modify_header_by_user = function(e) {
        var t, i, o, r;
        switch (e = e || this.selected_tariff,
        r = e.recommendations,
        this.account.addition_users_count = r.min_users_count,
        t = "users" == r.reason ? AMOCRM.lang.form.header.templates.addition.base_users : AMOCRM.lang.form.header.templates.addition.base,
        t = t.replace("#users_count#", n.numeralWord(r.min_users_count, AMOCRM.lang.users_in_qoutas_modal, !0)),
        i = AMOCRM.lang.form.header.templates.addition.limit_one_user,
        r.reason) {
        case "contacts":
            i = i.replace("#limit_count#", n.numeralWord(r.tariff_quote_contacts, AMOCRM.lang.contacts_and_companies, !0)),
            o = n.numeralWord(r.used_contacts_count, AMOCRM.lang.contacts_and_companies, !0);
            break;
        case "deals":
            i = i.replace("#limit_count#", n.numeralWord(r.tariff_quote_deals, AMOCRM.lang.leads, !0)),
            o = n.numeralWord(r.used_deals_count, AMOCRM.lang.leads, !0);
            break;
        case "disk_space":
            i = i.replace("#limit_count#", n.formatFileSize(1024 * r.tariff_quote_disk_space * 1024)),
            o = n.formatFileSize(1024 * r.used_disk_space_count * 1024);
            break;
        default:
            i = ""
        }
        t = t.replace("#used_limits_count#", o),
        t = t.replace("#limit_one_user#", i),
        s("#billing__form__header__addition").html(t)
    }
    ,
    t.prototype.check_elongation_period = function(e, t) {
        if (e[t])
            return t;
        var s = i.keys(e);
        return i.last(s)
    }
    ,
    t.prototype.recount_prices = function(e, t) {
        var i = this;
        t = !!t,
        "undefined" == typeof e && (e = i.account.addition_users_count),
        i.account.addition_users_count = parseInt(e, 10),
        i.account.addition_users_count < i.account.min_users_add_count && (i.account.addition_users_count = i.account.min_users_add_count),
        i.check_selected_tariff(t),
        i.update_months_prices(),
        i.account.elongation_month_count = i.check_elongation_period(i.account.tariff_month_init_prices, i.account.elongation_month_count),
        i.set_order_not_empty();
        var s = i.account.elongation_month_count
          , n = i.account.addition_users_count
          , o = i.get_sale(s);
        i.account.tariff_current_period_name = i.account.tariff_month_periods[s],
        i.account.elongation_end_date = i.get_elongation_end_date(s),
        i.account.tariff_one_month_price = i.account.tariff_one_month_price_base - o,
        i.account.tariff_one_month_price_with_coupon = i.apply_coupon_sale(i.account.tariff_one_month_price),
        i.account.sale = o * s,
        i.account.sale_text = i.get_currency(i.account.sale * i.account.total_users_count),
        i.selected_tariff.by_user && !i.account.is_old_payment && i.account.days_before_end_date > 0 && i.current_tariff_selected() ? i.account.addition_price = Math.round(100 * n * i.account.tariff_one_month_price_base * i.account.days_before_end_date / 30) / 100 : i.account.addition_price = 0,
        i.account.addition_price_with_coupon = i.apply_coupon_sale(i.account.addition_price),
        i.account.addition_users_one_month_price = n * i.account.tariff_one_month_price_base,
        i.account.elongation_price = i.get_elongation_price(),
        i.account.elongation_price_with_coupon = i.apply_coupon_sale(i.account.elongation_price),
        i.account.total_price = i.get_total_price(),
        i.account.total_price_with_coupon = i.account.elongation_price_with_coupon + i.account.addition_price_with_coupon,
        i.update_months_prices();
        var r = i.get_elongation_price(i.selected_tariff.price);
        i.account.coupon_sale_addition_users = i.account.addition_price - i.account.addition_price_with_coupon,
        i.account.coupon_sale_elongation = r - i.account.elongation_price_with_coupon,
        i.account.coupon_sale = Math.round(i.account.total_price - i.account.total_price_with_coupon),
        i.account.total_price_with_coupon = Math.round(i.account.total_price_with_coupon),
        i.apply_new_prices()
    }
    ,
    t.prototype.current_tariff_selected = function() {
        return this.account.current_tariff_id == this.selected_tariff.id
    }
    ,
    t.prototype.update_months_prices = function() {
        var e = this;
        e.account.tariff_month_init_prices = {},
        i.keys(e.account.tariff_month_periods).forEach(function(t) {
            var s = parseInt(t, 10)
              , n = e.selected_tariff.prices[t] || e.selected_tariff.prices[0]
              , o = e.account.total_users_count
              , r = e.apply_coupon_sale(e.selected_tariff.price * o * s * e.selected_tariff.months_sales_percents[t])
              , a = e.get_elongation_price(n, s);
            !e.selected_tariff.prices[t] && i.indexOf(i.values(e.getHiddenMonthCoupons()), s) < 0 || (e.account.tariff_month_init_prices[t] || (e.account.tariff_month_init_prices[t] = {}),
            e.account.tariff_month_init_prices[t].price = e.get_currency(Math.round(a)),
            e.account.tariff_month_init_prices[t].discount = "-" + e.get_currency(Math.round(r)))
        })
    }
    ,
    t.prototype.apply_new_prices = function() {
        var e, t, i = this, o = ["addition_price", "addition_price_with_coupon", "elongation_price", "elongation_price_with_coupon", "total_price", "total_price_with_coupon", "coupon_sale", "coupon_sale_addition_users", "coupon_sale_elongation", "addition_users_one_month_price", "tariff_one_month_price", "tariff_one_month_price_base"], r = ["total_price", "total_price_with_coupon"], a = ["addition_users_count", "elongation_month_count", "tariff_current_period_name", "elongation_end_date", "tariff_one_month_price", "sale", "addition_price", "addition_price_with_coupon", "addition_price_text", "addition_price_with_coupon_text", "elongation_price", "elongation_price_with_coupon", "elongation_price_text", "elongation_price_with_coupon_text", "total_price", "total_price_with_coupon", "total_price_text", "total_price_with_coupon_text", "total_users_count", "tariff_one_month_price_with_coupon", "coupon_sale_text", "coupon_sale_addition_users", "coupon_sale_elongation", "sale_text", "addition_users_one_month_price_text", "tariff_one_month_price_text", "tariff_one_month_price_base_text"];
        for (e = 0; e < o.length; e++)
            i.account[o[e] + "_text"] = i.get_currency(i.account[o[e]]);
        for (e = 0; e < r.length; e++)
            i.account[r[e] + "_text"] = i.account[r[e] + "_text"].replace("руб", "–.");
        for (e = 0; e < a.length; e++)
            i.apply_span_text(a[e]);
        i.account.tariff_gift_text = i.account.tariff_month_init_prices[i.account.elongation_month_count].gift || "",
        i.selected_tariff.months_gifts.hasOwnProperty(i.account.elongation_month_count) ? (t = i.account.elongation_month_count,
        i.account.tariff_gift_text = i.selected_tariff.months_gifts[t].text) : i.account.tariff_gift_text = "",
        i.apply_span_text("tariff_gift_text"),
        i.controls.$addition_users_input && i.controls.$addition_users_input.val(i.account.addition_users_count).change(),
        i.controls.$month_input && i.controls.$month_input.val(i.account.elongation_month_count).change(),
        "function" == typeof i.set_elongation_month_count_visual && i.set_elongation_month_count_visual(i.account.elongation_month_count),
        i.controls.$zero_elongation_month_selector && (i.allow_zero_elongation_month ? i.controls.$zero_elongation_month_selector.removeClass(i.constants.elongation_disabled_class) : i.controls.$zero_elongation_month_selector.addClass(i.constants.elongation_disabled_class)),
        i.$numeral_controls && i.$numeral_controls.each(function() {
            var e = s(this)
              , t = "" + e.data("lang")
              , o = "" + e.data("property");
            t.length > 0 && o.length > 0 && i.account[o] && AMOCRM.lang[t] && e.text(n.numeralWord(i.account[o], AMOCRM.lang[t]))
        }),
        i.check_coupon_input(),
        "function" == typeof i.callbacks.apply_new_prices && i.callbacks.apply_new_prices()
    }
    ,
    t.prototype.get_total_price = function(e) {
        var t = this
          , i = t.account.addition_price
          , s = e || t.account.elongation_price;
        return i + s
    }
    ,
    t.prototype.get_elongation_price = function(e, t) {
        var i = this
          , s = i.account.total_users_count
          , n = t || i.account.elongation_month_count
          , o = e || i.account.tariff_one_month_price;
        return s * n * o
    }
    ,
    t.prototype.apply_coupon_sale = function(e) {
        var t = this
          , i = t.account.coupon_sale_in_percent;
        if (0 >= i || i >= 100 || 0 == e)
            return e;
        var s = e * (i / 100);
        return e - s
    }
    ,
    t.prototype.get_currency = function(e) {
        var t = this
          , i = t.constants.precision;
        return n.currency(e, !1, i, t.account.locale)
    }
    ,
    t.prototype.get_sale = function(e) {
        var t = this
          , i = t.account.tariff_month_sales_percents
          , s = t.account.tariff_one_month_price_base;
        return i && i.hasOwnProperty(t.account.elongation_month_count) ? i[e] * s : 0
    }
    ,
    t.prototype.get_elongation_end_date = function(e) {
        var t = this
          , i = moment(t.account.term_end_date, AMOCRM.system.format.date.date)
          , s = moment();
        return e = e || t.account.elongation_month_count,
        s > i && (i = s),
        e && i.add("M", e),
        this.account.is_trial && this.account.trial_days_left && i.add("d", this.account.trial_days_left),
        i.format(AMOCRM.system.format.date.date)
    }
    ,
    t.prototype.set_order_not_empty = function() {
        var e = this;
        e.account.addition_users_count < 1 || e.account.elongation_month_count < 1 ? e.account.addition_users_count < 1 ? (e.account.elongation_month_count < 1 ? e.account.elongation_month_count = e.constants.default_elongation_month_count : !e.current_tariff_selected() && e.selected_tariff.by_user && (e.account.addition_users_count = 1),
        e.allow_zero_elongation_month = !1) : e.current_tariff_selected() ? e.account.addition_users_count < 1 && (e.account.addition_users_count = e.account.min_users_add_count) : e.account.elongation_month_count = e.constants.default_elongation_month_count : e.allow_zero_elongation_month = e.current_tariff_selected(),
        e.account.total_users_count = e.account.addition_users_count + e.account.current_users_count,
        e.account.total_users_count > e.account.max_users_count_in_account && e.account.addition_users_count > 0 && (e.account.addition_users_count = e.account.max_users_count_in_account - e.account.current_users_count,
        e.set_order_not_empty())
    }
    ,
    t.prototype.apply_span_text = function(e) {
        var t = this;
        t.controls.$spans || (t.controls.$spans = {}),
        t.controls.$spans[e] || (t.controls.$spans[e] = s("span." + e)),
        t.controls.$spans[e].length > 0 ? t.controls.$spans[e].text(t.account[e]) : t.controls.$spans[e] = !0
    }
    ,
    t.prototype.set_options = function(e, t) {
        var i = this
          , n = ["res", "response", "params", "component"];
        e = e || {};
        for (var o = 0; o < n.length; o++)
            e[n[o]] && (e = e[n[o]]);
        i.account = i.account || {};
        var r, a = AMOCRM.constant("payment_account_properties") || {};
        if (e.tariff_one_month_price_text)
            for (r in e)
                e.hasOwnProperty(r) && (i.account[r] = e[r]);
        else
            for (r in a)
                a.hasOwnProperty(r) && (i.account[r] = a[r]);
        return i.account && i.account.account_id ? (i.initial_parse_numbers(),
        "function" == typeof i.initialization && i.initialization(),
        void ("function" == typeof i.callbacks.after_initialization && i.callbacks.after_initialization())) : void s.get("/ajax/settings/pay/").done(function(e) {
            "function" == typeof t && t(e),
            i.set_options(e, !1)
        })
    }
    ,
    t.prototype.refresh_data = function(e) {
        e = e || {},
        e.callbacks = e.callbacks || {};
        var t = this
          , i = t.get_ajax_args();
        i.action = "refresh",
        s.get("/ajax/settings/pay/", i).done(function(i) {
            t.set_options(i, !1),
            t.recount_prices(),
            "function" == typeof e.callbacks.success && e.callbacks.success()
        })
    }
    ,
    t.prototype.open_confirm_modal = function(e) {
        var t = this;
        t.$confirm_modal || (e = s.extend({
            callbacks: {},
            messages: {
                text: AMOCRM.lang.payment_confirm_pay_modal.replace("TOTAL_PRICE", t.account.total_price_with_coupon_text),
                decline_text: AMOCRM.lang.confirm__no,
                accept_text: AMOCRM.lang.confirm__yes
            }
        }, e),
        t.$modal_obj && t.$modal_obj.hide(),
        t.$confirm_modal = new r({
            class_name: "modal-list modal-leave-confirm",
            decline_text: e.messages.decline_text,
            accept_text: e.messages.accept_text,
            text: e.messages.text,
            accept: function() {
                this.modal.destroy()
            },
            destroy: function() {
                1 == this.accepted && "function" == typeof e.callbacks.accept && e.callbacks.accept(),
                "function" == typeof e.callbacks.destroy && e.callbacks.destroy(),
                t.$modal_obj && t.$modal_obj.show(),
                t.$confirm_modal && (t.$confirm_modal = !1)
            }
        }))
    }
    ,
    t.prototype.get_ajax_args = function() {
        var e = this;
        return {
            ajax: "y",
            elongation: e.account.elongation_month_count || 0,
            add_users_count: e.account.addition_users_count || 0,
            coupon_code: e.account.coupon_code || !1,
            account_id: e.account.account_id || "other",
            other_user_id: a.getQueryParam("other_user_id") || 0,
            need_by_user_tariffing: e.account.need_by_user_tariffing ? "Y" : "N",
            tariff_currency: a.getQueryParam("tariff_currency") || "none",
            chosen_tariff: e.selected_tariff ? e.selected_tariff.id : !1
        }
    }
    ,
    t.prototype.is_inputs_empty = function(e) {
        if (!e || e.length < 1)
            return !1;
        var t = this
          , i = !1;
        return s.each(e.find("input[type=text]"), function() {
            var e = s(this);
            "none" != e.css("display") && !e.hasClass("not_require") && e.val().length < 1 && (e.addClass(t.constants.error_class),
            e.focus(function() {
                e.removeClass(t.constants.error_class)
            }),
            i = !0)
        }),
        s.each(e.find("textarea"), function() {
            var e = s(this);
            "none" != e.css("display") && !e.hasClass("not_require") && e.val().length < 1 && (e.addClass(t.constants.error_class),
            e.focus(function() {
                e.removeClass(t.constants.error_class)
            }),
            i = !0)
        }),
        i
    }
    ,
    t.prototype.is_valid_ur_inn = function(e) {
        if (e = s.trim(e),
        10 == e.length && e.match(/\d+/)) {
            var t = 2 * parseInt(e.charAt(0)) + 4 * parseInt(e.charAt(1)) + 10 * parseInt(e.charAt(2)) + 3 * parseInt(e.charAt(3)) + 5 * parseInt(e.charAt(4)) + 9 * parseInt(e.charAt(5)) + 4 * parseInt(e.charAt(6)) + 6 * parseInt(e.charAt(7)) + 8 * parseInt(e.charAt(8));
            return t %= 11,
            t %= 10,
            parseInt(e.charAt(9)) == t
        }
        return !1
    }
    ,
    t.prototype.is_valid_kpp = function(e) {
        return e = s.trim(e),
        9 == e.length && /\d+/.test(e)
    }
    ,
    t.prototype.is_valid_phys_inn = function(e) {
        if (e = s.trim(e),
        12 == e.length && /\d+/.test(e)) {
            var t = 7 * parseInt(e.charAt(0)) + 2 * parseInt(e.charAt(1)) + 4 * parseInt(e.charAt(2)) + 10 * parseInt(e.charAt(3)) + 3 * parseInt(e.charAt(4)) + 5 * parseInt(e.charAt(5)) + 9 * parseInt(e.charAt(6)) + 4 * parseInt(e.charAt(7)) + 6 * parseInt(e.charAt(8)) + 8 * parseInt(e.charAt(9));
            t %= 11,
            t %= 10;
            var i = 3 * parseInt(e.charAt(0)) + 7 * parseInt(e.charAt(1)) + 2 * parseInt(e.charAt(2)) + 4 * parseInt(e.charAt(3)) + 10 * parseInt(e.charAt(4)) + 3 * parseInt(e.charAt(5)) + 5 * parseInt(e.charAt(6)) + 9 * parseInt(e.charAt(7)) + 4 * parseInt(e.charAt(8)) + 6 * parseInt(e.charAt(9)) + 8 * parseInt(e.charAt(10));
            return i %= 11,
            i %= 10,
            parseInt(e.charAt(10)) == t && parseInt(e.charAt(11)) == i
        }
        return !1
    }
    ,
    t.prototype.is_valid_unp = function(e) {
        if (e = s.trim(e),
        9 == e.length && /\d+/.test(e)) {
            var t = 29 * parseInt(e.charAt(0)) + 23 * parseInt(e.charAt(1)) + 19 * parseInt(e.charAt(2)) + 17 * parseInt(e.charAt(3)) + 13 * parseInt(e.charAt(4)) + 7 * parseInt(e.charAt(5)) + 5 * parseInt(e.charAt(6)) + 3 * parseInt(e.charAt(7));
            return t %= 11,
            parseInt(e.charAt(8)) == t
        }
        return !1
    }
    ,
    t.prototype.is_valid_bin = function(e) {
        if (e = s.trim(e),
        12 == e.length && /\d+/.test(e)) {
            var t = 1 * parseInt(e.charAt(0)) + 2 * parseInt(e.charAt(1)) + 3 * parseInt(e.charAt(2)) + 4 * parseInt(e.charAt(3)) + 5 * parseInt(e.charAt(4)) + 6 * parseInt(e.charAt(5)) + 7 * parseInt(e.charAt(6)) + 8 * parseInt(e.charAt(7)) + 9 * parseInt(e.charAt(8)) + 10 * parseInt(e.charAt(9)) + 11 * parseInt(e.charAt(10))
              , i = t % 11;
            return 10 == i && (t = 3 * parseInt(e.charAt(0)) + 4 * parseInt(e.charAt(1)) + 5 * parseInt(e.charAt(2)) + 6 * parseInt(e.charAt(3)) + 7 * parseInt(e.charAt(4)) + 8 * parseInt(e.charAt(5)) + 9 * parseInt(e.charAt(6)) + 10 * parseInt(e.charAt(7)) + 11 * parseInt(e.charAt(8)) + 1 * parseInt(e.charAt(9)) + 2 * parseInt(e.charAt(10)),
            i = t % 11),
            parseInt(e.charAt(11)) == i && 0 != t
        }
        return !1
    }
    ,
    t.prototype.is_valid_egrpou = function(e) {
        if (e = s.trim(e),
        8 == e.length && /\d+/.test(e)) {
            if (parseInt(e) < 3e7 || parseInt(e) > 6e7) {
                var t = 1 * parseInt(e.charAt(0)) + 2 * parseInt(e.charAt(1)) + 3 * parseInt(e.charAt(2)) + 4 * parseInt(e.charAt(3)) + 5 * parseInt(e.charAt(4)) + 6 * parseInt(e.charAt(5)) + 7 * parseInt(e.charAt(6));
                return k = t % 11,
                10 == k && (t = 3 * parseInt(e.charAt(0)) + 4 * parseInt(e.charAt(1)) + 5 * parseInt(e.charAt(2)) + 6 * parseInt(e.charAt(3)) + 7 * parseInt(e.charAt(4)) + 8 * parseInt(e.charAt(5)) + 9 * parseInt(e.charAt(6)),
                k = t % 11),
                parseInt(e.charAt(7)) == k
            }
            var t = 7 * parseInt(e.charAt(0)) + 1 * parseInt(e.charAt(1)) + 2 * parseInt(e.charAt(2)) + 3 * parseInt(e.charAt(3)) + 4 * parseInt(e.charAt(4)) + 5 * parseInt(e.charAt(5)) + 6 * parseInt(e.charAt(6));
            return k = t % 11,
            10 == k && (t = 9 * parseInt(e.charAt(0)) + 3 * parseInt(e.charAt(1)) + 4 * parseInt(e.charAt(2)) + 5 * parseInt(e.charAt(3)) + 6 * parseInt(e.charAt(4)) + 7 * parseInt(e.charAt(5)) + 8 * parseInt(e.charAt(6)),
            k = t % 11),
            parseInt(e.charAt(7)) == k
        }
        return !1
    }
    ,
    t.prototype.getLastLegalOrderProps = function(e) {
        var t = null;
        return this.account && this.account.last_legal_order_props && (t = this.account && this.account.last_legal_order_props),
        t && e && (t = i.has(t, e) ? t[e] : ""),
        t
    }
    ,
    t.prototype.get_company_state = function() {
        var e = {
            company_inn: s.trim(s("#u-company-inn").val()),
            company_unp: s.trim(s("#u-company-unp").val()),
            company_bin: s.trim(s("#u-company-bin").val()),
            ua_company_inn: s.trim(s("#u-company-egrpou").val())
        };
        return "" != s.trim(e.company_inn) ? "ru" : "" != s.trim(e.company_unp) ? "by" : "" != s.trim(e.company_bin) ? "kz" : "" != s.trim(e.company_egrpou) ? "ua" : void 0
    }
    ,
    t.prototype.change_is_individual = function(e) {
        s("input#u-is-individual").parents("label.is_individual").find("div").first().hasClass("hidden") || (e.is(":checked") ? s("input#u-company-kpp").addClass("hidden") : s("input#u-company-kpp").removeClass("hidden"))
    }
    ,
    t.prototype.validation_company_common_id = function(e, t) {
        var i, n = this, o = e.val();
        return void 0 == t && (t = !1),
        e.removeClass(n.constants.error_class),
        s("input#u-company-kpp").removeClass(n.constants.error_class),
        n.is_valid_ur_inn(o) ? 0 == t ? (n.update_modal_for_ps_1_1("ru", o),
        s("#u-is-individual").prop("checked", !1),
        n.change_is_individual(s("#u-is-individual")),
        i = !0) : s("#u-is-individual").is(":checked") ? (i = !1,
        e.addClass(n.constants.error_class)) : i = !0 : n.is_valid_phys_inn(o) ? 0 == t ? (n.update_modal_for_ps_1_1("ru", o),
        s("#u-is-individual").prop("checked", "checked"),
        n.change_is_individual(s("#u-is-individual")),
        i = !0) : s("#u-is-individual").is(":checked") ? i = !0 : (e.addClass(n.constants.error_class),
        i = !1) : n.is_valid_bin(o) ? (0 == t && n.update_modal_for_ps_1_1("kz", o),
        i = !0) : n.is_valid_unp(o) ? (0 == t && n.update_modal_for_ps_1_1("by", o),
        i = !0) : n.is_valid_egrpou(o) ? (0 == t && n.update_modal_for_ps_1_1("ua", o),
        i = !0) : (0 == t && n.update_modal_for_ps_1_1("ru", ""),
        e.addClass(n.constants.error_class),
        i = !1),
        i
    }
    ,
    t.prototype.update_modal_for_ps_1_1 = function(e, t) {
        void 0 != t && (s("#u-company-inn").val(""),
        s("#u-company-unp").val(""),
        s("#u-company-bin").val(""),
        s("#u-company-egrpou").val(""),
        s(".modal-company_state").addClass("hidden"),
        "ru" == e ? (s("#u-company-inn").val(t),
        s("#u-company-kpp").removeClass("hidden"),
        s("#u-is-individual").parents("label.is_individual").find("div").removeClass("hidden")) : "ua" == e ? (s("#u-company-egrpou").val(t),
        s("#modal-company_state_ua").removeClass("hidden")) : "kz" == e ? (s("#u-company-bin").val(t),
        s("#modal-company_state_kz").removeClass("hidden")) : "by" == e && (s("#u-company-unp").val(t),
        s("#modal-company_state_by").removeClass("hidden")),
        s("#u-is-individual").prop("checked", !1),
        ("ua" == e || "by" == e || "kz" == e) && (s("#u-company-kpp").addClass("hidden"),
        s("#u-is-individual").parents("label.is_individual").find("div").addClass("hidden")))
    }
    ,
    t.prototype.get_card_data = function() {
        var e = this;
        return {
            card_name: s("#u-name-on-card").val(),
            card_code: e.payment_controls.$cvv_field.val(),
            card_month: e.payment_controls.$month_field.val(),
            card_year: e.payment_controls.$year_field.val(),
            card_number: n.replaceAll(" ", "", e.payment_controls.$card_number.val())
        }
    }
    ,
    t.prototype.credit_card_ready = function() {
        var e = this
          , t = !1;
        if (!e.payment_controls.$cvv_field)
            return !1;
        var i = e.get_card_data()
          , s = moment(moment(i.card_month + "/" + i.card_year, "MM/YYYY"))
          , n = moment(moment().format("MM/YYYY"), "MM/YYYY");
        return i.card_number.length < 12 || i.card_number.length > 19 ? (e.payment_controls.$card_number.addClass(e.constants.error_class),
        e.payment_controls.$card_number.focus(function() {
            e.payment_controls.$card_number.removeClass(e.constants.error_class)
        }),
        t = !0) : e.payment_controls.$card_number.removeClass(e.constants.error_class),
        (e.payment_controls.$month_field.hasClass(e.constants.error_class) || e.payment_controls.$year_field.hasClass(e.constants.error_class)) && (t = !0),
        n > s ? (e.payment_controls.$month_field.addClass(e.constants.error_class),
        e.payment_controls.$month_field.focus(function() {
            e.payment_controls.$month_field.removeClass(e.constants.error_class)
        }),
        e.payment_controls.$year_field.addClass(e.constants.error_class),
        e.payment_controls.$year_field.focus(function() {
            e.payment_controls.$year_field.removeClass(e.constants.error_class)
        }),
        t = !0) : (e.payment_controls.$month_field.removeClass(e.constants.error_class),
        e.payment_controls.$year_field.removeClass(e.constants.error_class)),
        0 == t
    }
    ,
    t.prototype.check_jquery_objects = function(e) {
        var t;
        for (t in e)
            e.hasOwnProperty(t) && e[t] && e[t].length < 1 && (e[t] = !1);
        return e
    }
    ,
    t.prototype.init_invoice_controls = function() {
        var e = this
          , t = !1;
        e.payment_controls = s.extend(e.payment_controls, {
            $send_mail_button: s("#email-send"),
            $send_mail_proceed_button: s("#send_mail_proceed"),
            $send_mail_form: s("#send_email_form"),
            $send_mail_input_mail_to: s("#send_mail_to"),
            $send_mail_input_mail_body: s("#send_mail_body")
        }),
        e.payment_controls = e.check_jquery_objects(e.payment_controls),
        e.payment_controls.$send_mail_proceed_button && (t = "" + e.payment_controls.$send_mail_proceed_button.data("order-id")),
        t && e.payment_controls.$send_mail_button && e.payment_controls.$send_mail_form && (e.payment_controls.$send_mail_button.on(AMOCRM.click_event + e.constants.payment_postfix_event, function() {
            e.payment_controls.$send_mail_form.toggle()
        }),
        e.payment_controls.$send_mail_proceed_button.on(AMOCRM.click_event + e.constants.payment_postfix_event, function() {
            s.post("/private/account/invoice.php?compact=yes&ajax=y", {
                ORDER_ID: t,
                mail_to: "" + e.payment_controls.$send_mail_input_mail_to.val(),
                mail_body: "" + e.payment_controls.$send_mail_input_mail_body.val()
            }).done(function(e) {
                !e.state || "success" != e.state
            })
        }))
    }
    ,
    t.prototype.init_usa_controls = function() {
        var e, t = this, i = ["$card_number", "$month_field", "$year_field", "$cvv_field"];
        for (t.payment_controls = s.extend(t.payment_controls, {
            $card_number: s("#u-card-number"),
            $month_field: s("#u-card-expiration-month"),
            $year_field: s("#u-card-expiration-year"),
            $cvv_field: s("#u-card-cvv"),
            $paypal_button: s("#pay-with-paypal-button")
        }),
        t.payment_controls = t.check_jquery_objects(t.payment_controls),
        e = 0; e < i.length; e++)
            t.payment_controls.hasOwnProperty(i[e]) && t.payment_controls[i[e]] && t.payment_controls[i[e]].on("keypress" + t.constants.payment_postfix_event, function(e) {
                n.digits_only(e)
            });
        t.payment_controls.$card_number && t.payment_controls.$card_number.on("keyup" + t.constants.payment_postfix_event, function() {
            var i = t.payment_controls.$card_number.val()
              , n = i.replace(" ").replace(/\D/g, "")
              , o = "";
            for (e = 0; e < n.length && void 0 != n[e]; e++)
                o += n[e],
                (3 == e || 7 == e || 11 == e || 15 == e) && (o += " ");
            s.trim(i) != s.trim(o) && t.payment_controls.$card_number.val(o)
        }),
        t.payment_controls.$cvv_field && t.payment_controls.$cvv_field.on("keyup" + t.constants.payment_postfix_event, function() {
            var e = t.payment_controls.$cvv_field.val()
              , i = e.replace(" ").replace(/\D/g, "");
            0 != i.length && 3 != i.length && 4 != i.length ? t.payment_controls.$cvv_field.addClass(t.constants.error_class) : t.payment_controls.$cvv_field.removeClass(t.constants.error_class)
        }),
        t.payment_controls.$month_field && t.payment_controls.$month_field.on("keyup" + t.constants.payment_postfix_event, function() {
            var e = parseInt(t.payment_controls.$month_field.val(), 10);
            e > 12 || 1 > e ? t.payment_controls.$month_field.addClass(t.constants.error_class) : t.payment_controls.$month_field.removeClass(t.constants.error_class)
        }),
        t.payment_controls.$year_field && t.payment_controls.$year_field.on("keyup" + t.constants.payment_postfix_event, function() {
            var e = parseInt(t.payment_controls.$year_field.val(), 10)
              , i = (new Date).getFullYear()
              , s = i + 5;
            e > 1e3 && i > e || e > s ? t.payment_controls.$year_field.addClass(t.constants.error_class) : t.payment_controls.$year_field.removeClass(t.constants.error_class)
        }),
        t.controls.$document && t.controls.$document.on(AMOCRM.click_event + t.constants.payment_postfix_event, "#pay-with-paypal-button", function() {
            t.create_order(null, !1, "paypal")
        })
    }
    ,
    t.prototype.change_payment_system = function(e, t, i) {
        i = i || !1,
        t = 0 != t;
        var n = this;
        n.payment_controls && n.payment_controls.$payment_methods && (e.hasClass("modal-body") && (e = e.find(".payment_method-left")),
        s.each(n.payment_controls.$payment_methods, function() {
            var t = s(this);
            e.removeClass(t.attr("for")),
            t.find(".control-radio input").is(":checked") && e.addClass(t.attr("for"))
        }),
        t && e && (i ? setTimeout(function() {
            e.trigger("modal:centrify")
        }, 400) : e.trigger("modal:centrify")))
    }
    ,
    t.prototype.getPaySystemID = function(e) {
        return e.find(".control-radio input[name=choose_pay_system_id]:checked").val()
    }
    ,
    t.prototype.hasLegalPropsDiff = function(e, t) {
        var s = []
          , n = {
            company_name: !0,
            company_inn: !0,
            company_kpp: !0,
            company_unp: !0,
            company_bin: !0,
            company_egrpou: !0,
            is_individual: !0
        };
        return i.each(e, function(e, o) {
            n[o] && (i.has(t, o) ? ("" + t[o]).trim() !== ("" + e).trim() && s.push({
                field: o,
                prev: e,
                now: t[o]
            }) : s.push({
                field: o,
                prev: e,
                now: null
            }))
        }),
        s
    }
    ,
    t.prototype.isLegalPaySystem = function(e) {
        var t, s, n = this.constants.pay_systems, o = this.constants.person_types, r = [n.cashless_ru, n.cashless_ua, n.cashless_kz], a = [o.legal_ru, o.legal_ua, o.legal_kz], l = /prefix_(\d+)_(\d+)/.exec(e);
        return l[1] && l[2] ? (t = parseInt(l[1]),
        s = parseInt(l[2]),
        -1 !== i.indexOf(r, t) && -1 !== i.indexOf(a, s)) : !1
    }
    ,
    t.prototype.getUserDetails = function(e) {
        return {
            full_name: e.find("input.full_name").val(),
            phone_number: e.find("input.phone_number").val(),
            company_name: e.find("input.company_name").val(),
            ur_address: s.trim(e.find("input.ur_address").val()),
            company_inn: s.trim(e.find("input.company_inn").val()),
            company_kpp: s.trim(e.find("input.company_kpp").val()),
            company_unp: s.trim(e.find("input.company_unp").val()),
            company_bin: s.trim(e.find("input.company_bin").val()),
            company_egrpou: s.trim(e.find("input.company_egrpou").val()),
            actual_address: e.find("textarea.actual_address").val(),
            actual_address_fiz: e.find("textarea.actual_address_fiz").val(),
            is_individual: e.find("input#u-is-individual").is(":checked") ? "y" : "n"
        }
    }
    ,
    t.prototype.fieldsFilledWithValidData = function(e, t, i) {
        var n, o, r, a;
        return this.payment_controls && this.payment_controls.$proceed_button ? this.payment_controls.$proceed_button.hasClass("bill-button-not_accepted") ? !1 : t ? (n = "paypal" !== i ? this.getPaySystemID(e) : "prefix_5_3",
        o = this.is_inputs_empty(e),
        "prefix_1_1" == n && (r = s("input#u-company-common-id"),
        a = s("input#u-company-kpp"),
        o = !this.validation_company_common_id(r, !0) || o,
        "ru" == this.get_company_state() && 0 == a.hasClass("hidden") && (this.is_valid_kpp(a.val()) || (a.addClass(this.constants.error_class),
        o = !this.is_valid_kpp(a.val()) || o))),
        !o) : !0 : !1
    }
    ,
    t.prototype.create_order = function(e, t, i) {
        var r = this;
        if (t = t && null != e,
        i = i || "",
        r.fieldsFilledWithValidData(e, t, i)) {
            t = null != e;
            var l = r.get_ajax_args()
              , c = r.payment_controls.$proceed_button.data("order_id") || !1
              , d = "y" == r.payment_controls.$proceed_button.data("confirm")
              , u = !!r.payment_controls.$cvv_field;
            u ? (l.credit_card = r.get_card_data(),
            t && (l.credit_card.set_req_pay = e.find(".control-checkbox").find("input").prop("checked") ? "y" : "n")) : t && (l.user_details = this.getUserDetails(e)),
            l.confirm_order = "Y",
            c ? (l.pay_system_id = "prefix_7_3",
            l.order_id = c) : t && "paypal" != i ? l.pay_system_id = e.find(".control-radio input[name=choose_pay_system_id]:checked").val() : l.pay_system_id = "prefix_5_3",
            d && (l.confirm_recurring_payment = "y"),
            r.overlay_start(),
            s.post("/ajax/settings/pay/", l, function(t) {
                for (r.overlay_stop(),
                "object" != typeof t && (t = s.parseJSON(t)); t.response; )
                    t = t.response;
                if (t.state && "error" == t.state)
                    return t.order_id && r.payment_controls.$proceed_button.data("order_id", t.order_id),
                    t.need_confirm && "y" == t.need_confirm && t.errors && t.errors[0] && r.open_confirm_modal({
                        callbacks: {
                            accept: function() {
                                r.payment_controls.$proceed_button.data("confirm", "y"),
                                r.create_order(e, !1)
                            }
                        },
                        messages: {
                            decline_text: AMOCRM.lang.confirm__no,
                            accept_text: AMOCRM.lang.confirm__yes,
                            text: t.errors[0]
                        }
                    }),
                    void (r.payment_controls.$card_number && (r.payment_controls.$card_number_error || (r.payment_controls.$card_number_error = s("#card-number-error"),
                    r.payment_controls.$card_number_error.length < 0 && (r.payment_controls.$card_number_error = !1)),
                    r.payment_controls.$card_number_error && t.errors && t.errors[0] && (!t.need_confirm || "y" != t.need_confirm) && (r.payment_controls.$card_number_error.text(t.errors[0]),
                    r.payment_controls.$card_number_error.show()),
                    r.payment_controls.$card_number.addClass(r.error_class),
                    r.payment_controls.$card_number.focus(function() {
                        r.payment_controls.$card_number_error.text(""),
                        r.payment_controls.$card_number_error.hide(),
                        r.payment_controls.$card_number.removeClass(r.error_class)
                    }),
                    r.payment_controls.$paypal_button && r.payment_controls.$paypal_button.hide()));
                if (t.state && "success" == t.state && t.pay_type && "firstdata" == t.pay_type) {
                    r.$modal_obj && (r.$modal_obj.force_close = !0,
                    r.$modal_obj.destroy());
                    var i = new o({
                        destroy: function() {
                            return AMOCRM.router.navigate(a.setQueryParam({
                                reload: n.randHex()
                            }, {
                                replace: !0
                            }), {
                                trigger: !0
                            }),
                            !0
                        }
                    });
                    return void i.showSuccess(AMOCRM.lang.pay_success, !1, 2e3)
                }
                r.show_order_result(e, t.html_page, l.pay_system_id, !0)
            })
        }
    }
    ,
    t.prototype.show_order_result = function(e, t, i, r) {
        var c = this
          , d = function(e) {
            e.on(c.constants.click_event, "#pay-support", function() {
                c.$modal_obj.hide(),
                new l({
                    callbacks: {
                        on_destroy: function() {
                            c.$modal_obj.show()
                        }
                    }
                })
            }),
            e.on(c.constants.click_event, "a.html", function(e) {
                return window.open(s(this).attr("href")),
                e.preventDefault(),
                !1
            }),
            c.init_invoice_controls()
        };
        null != e && e.hasClass("modal-body") ? (e.trigger("modal:loaded").html(t).trigger("modal:centrify").addClass(i).addClass("step-2"),
        d(e)) : (c.$modal_obj && (c.$modal_obj.force_close = !0,
        c.$modal_obj.destroy()),
        c.$modal_obj = new o({
            class_name: "modal-list modal-payment-choose",
            init: function(e) {
                e.trigger("modal:loaded").html(t).trigger("modal:centrify").addClass(i).addClass("step-2"),
                d(e)
            },
            destroy: function() {
                c.modal_destroy_base(this)
            }
        })),
        r && c.$modal_obj && (c.$modal_obj.force_close = !0,
        c.$modal_obj.on_close = function() {
            AMOCRM.router.navigate(a.setQueryParam({
                reload: n.randHex()
            }, {
                replace: !0
            }), {
                trigger: !0
            })
        }
        )
    }
    ,
    t.prototype.modal_destroy_base = function(e, t) {
        var i, s = this;
        if (t = t || {},
        s.modal_body && s.modal_body.off(),
        e.xhr && "undefined" == typeof e.xhr.status && e.xhr.abort(),
        s.payment_controls.$support_button && s.payment_controls.$support_button.off(AMOCRM.click_event),
        "function" == typeof s.$modal_obj.on_close && s.$modal_obj.on_close(),
        "function" == typeof t.on_close && t.on_close(),
        s.payment_controls)
            for (i in s.payment_controls)
                s.payment_controls.hasOwnProperty(i) && s.payment_controls[i] && "function" == typeof s.payment_controls[i].off && s.payment_controls[i].off(s.constants.payment_postfix_event);
        s.$modal_obj = !1,
        s.payment_controls = {}
    }
    ,
    t.prototype.overlay_start = function() {
        var e = this;
        return e.$modal_obj ? void e.$modal_obj.$modal.find(".modal-body").hide() : (e.$work_area || (e.$work_area = s("#work_area")),
        (void 0 == e.$overlay || 0 == e.$overlay) && (e.$overlay = s('<div class="default-overlay pay-modal-overlay" id="pay_loader"><span class="spinner-icon spinner-icon-abs-center"></span></div>'),
        e.$work_area.append(e.$overlay)),
        void (e.$overlay.now_visible || (e.$overlay.trigger("overlay:show"),
        e.$overlay.now_visible = !0)))
    }
    ,
    t.prototype.overlay_stop = function() {
        var e = this;
        e.$modal_obj && e.$modal_obj.$modal.find(".modal-body").show(),
        e.$overlay && e.$overlay.now_visible && (e.$overlay.trigger("overlay:hide"),
        e.$overlay.now_visible = !1)
    }
    ,
    t.prototype.can_use_hidden_month = function() {
        return ("en" === this.get_locale_id() || this.account.has_paid_orders) && this.selected_tariff.prices.hasOwnProperty("0")
    }
    ,
    t.prototype.destroy = function() {
        var e, t = this;
        if (t.controls)
            for (e in t.controls)
                t.controls.hasOwnProperty(e) && t.controls[e] && "function" == typeof t.controls[e].off && t.controls[e].off(t.constants.action_class);
        t.account = null,
        t.constants = null,
        "function" == typeof t.callbacks.after_destroy && t.callbacks.after_destroy()
    }
    ,
    i.extend(t.prototype, {
        isCouponReadyForPay: function() {
            return this.account.coupon_code === this.constants.coupon_none ? !0 : this.getHiddenMonthByCoupon(this.account.coupon_code) && this.can_use_hidden_month() ? !0 : this.account.coupon_code.length <= 0 || this.account.coupon_exist === !0
        }
    }),
    t
}),
define("lib/interface/payment_page", ["require", "underscore", "jquery", "lib/common/fn", "lib/components/base/modal", "twigjs", "lib/common/urlparams", "lib/components/base/payment", "lib/interface/support", "FileAPI"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("lib/common/fn"), o = e("lib/components/base/modal"), r = e("twigjs"), a = e("lib/common/urlparams"), l = e("lib/components/base/payment"), c = e("lib/interface/support"), d = e("FileAPI");
    return t = function(t) {
        this.Payment = new l;
        var u = this.Payment;
        u.initialize = function() {
            var e, t = this;
            this.$el = s("#page_holder"),
            t.controls = s.extend(t.controls, {
                $form: s("form#pay_form"),
                $month_selectors_wrapper: s("#month_selector"),
                $addition_users_input: s("#additional_licenses_input"),
                $plus_button: s("#plus_button"),
                $minus_button: s("#minus_button"),
                $rate_selector: s("#rate_selector"),
                $month_input: s("#elongation_month_input"),
                $recent_orders_rows: s("#recent_orders").find(".billing__form__recent_orders__order"),
                $proceed_button: s("#proceed_checkout_button"),
                $rec_pay_button: s("#rec_pay"),
                $total_block: s(".billing__form__purchase__total"),
                $subscription_switcher: s("#subscription_switch"),
                $control_toggler__item_bill_type_free: s(".control-toggler__item.bill_type-free"),
                $result_addition: s("#result_addition_users"),
                $result_elongation: s("#result_elongation"),
                $billing__form__top__right: s(".billing__form__top__right"),
                $billing__form__purchase: s(".billing__form__purchase"),
                $month_init_prices: s(".tariff_month_init_prices"),
                $total_users_count_wrapper: s("#total_users_count_wrapper"),
                $users_count_selector: s("#billing__form__users_count_selector"),
                $bill_type__switcher: s("#bill_type__switcher"),
                $cant_switch_to_tariff_text: s("#cant_switch_to_tariff_text"),
                $tariffs_holder: s("#billing_tariffs_holder"),
                $middle_tariff_block: s("#middle_tariff_block"),
                $first_tariff_block: s("#first_tariff_block")
            }),
            s(document).on("click", ".js-billing-tariff", function() {
                var e = s(this)
                  , i = e.closest(".billing_form__tariffs_wrapper").attr("id")
                  , n = {
                    right_tariff_block: "#left_tariff_block",
                    left_tariff_block: "#right_tariff_block"
                };
                t.controls.$tariffs_holder.trigger("tariffs:fade:remove"),
                s(".billing_form__tariff_block").removeClass("selected"),
                s(n[i]).addClass("faded_wrapper"),
                e.addClass("selected")
            }).on("click", ".js-tariff-close", function(e) {
                var i = s(this).closest(".billing_form__tariff_block")
                  , n = t.controls.$middle_tariff_block || t.controls.$first_tariff_block
                  , o = n.find(".billing_form__tariff_block");
                i.removeClass("selected"),
                t.controls.$tariffs_holder.trigger("tariffs:fade:remove"),
                o.trigger("click"),
                e.stopPropagation()
            }).on("tariffs:fade:remove", "#billing_tariffs_holder", function() {
                s(".billing_form__tariffs_wrapper").removeClass("faded_wrapper")
            }),
            e = t.controls.$tariffs_holder.length && (e = t.controls.$tariffs_holder.find(".billing_form__tariff_block.selected").get(0)) ? parseInt(e.getAttribute("data-tariff-id"), 10) : t.account.recommended_tariff_id ? t.account.recommended_tariff_id : i.keys(t.account.tariffs)[0],
            e && t.account.tariffs && (t.selected_tariff = t.account.tariffs[e],
            t.account.tariff_month_sales_percents = t.selected_tariff.months_sales_percents,
            t.account.tariff_one_month_price_base = t.selected_tariff.price),
            t.controls.$month_selectors = t.controls.$month_selectors_wrapper.find(".billing__form__extend__subscription_rates_wrapper__rate"),
            t.controls.$zero_elongation_month_selector = t.controls.$month_selectors.filter(".data_value_0"),
            t.controls.$billing__form__purchase__button = t.controls.$form.find(".billing__form__purchase__button"),
            t.controls.$billing__form__purchase__total__discount = t.controls.$total_block.find(".billing__form__purchase__total__discount"),
            t.controls.$billing__form__purchase__coupon_sale = t.controls.$total_block.find(".coupon_sale"),
            t.controls = t.check_jquery_objects(t.controls),
            t.controls.$form.submit(function() {
                return !1
            }),
            t.callbacks.apply_new_prices = function() {
                t.controls.$total_users_count_wrapper.toggle(!t.selected_tariff.unlimited_users),
                t.account.addition_price <= 0 ? (t.controls.$result_addition && t.controls.$result_addition.slideUp(t.constants.slide_duration),
                t.controls.$result_elongation && t.controls.$result_elongation.find(".billing__form__purchase__summary__price").hide()) : (t.controls.$result_addition && t.controls.$result_addition.slideDown(t.constants.slide_duration),
                t.controls.$result_elongation && t.controls.$result_elongation.find(".billing__form__purchase__summary__price").show()),
                t.account.elongation_month_count < 1 ? (t.controls.$result_addition && t.controls.$result_addition.find(".billing__form__purchase__summary__price").hide(),
                t.controls.$billing__form__purchase && t.controls.$billing__form__purchase.addClass("no_elongation"),
                t.controls.$billing__form__top__right && t.controls.$billing__form__top__right.addClass("no_elongation"),
                t.controls.$result_elongation && t.controls.$result_elongation.slideUp(t.constants.slide_duration)) : (t.controls.$result_addition && t.controls.$result_addition.find(".billing__form__purchase__summary__price").show(),
                t.controls.$billing__form__purchase && t.controls.$billing__form__purchase.removeClass("no_elongation"),
                t.controls.$billing__form__top__right && t.controls.$billing__form__top__right.removeClass("no_elongation"),
                t.controls.$result_elongation && t.controls.$result_elongation.slideDown(t.constants.slide_duration));
                var e = t.account.tariff_gift_text && t.account.tariff_gift_text.length > 0;
                t.controls.$billing__form__purchase__coupon_sale && (t.account.coupon_sale_in_percent > 0 ? (t.controls.$billing__form__purchase__coupon_sale.show(),
                e = !0) : t.controls.$billing__form__purchase__coupon_sale.hide()),
                e ? (t.controls.$billing__form__purchase__button && t.controls.$billing__form__purchase__button.addClass("expanded"),
                t.controls.$billing__form__purchase__total__discount && t.controls.$billing__form__purchase__total__discount.addClass("expanded")) : (t.controls.$billing__form__purchase__button && t.controls.$billing__form__purchase__button.removeClass("expanded"),
                t.controls.$billing__form__purchase__total__discount && t.controls.$billing__form__purchase__total__discount.removeClass("expanded"))
            }
            ,
            d.event.on(document.getElementById("upd_upload_file"), "change", function(e) {
                var t = d.getFiles(e)
                  , n = this.getAttribute("order-id");
                if (t && 1 == t.length) {
                    var r = new o({});
                    t[0].size < 10 * d.MB ? d.upload({
                        url: "/private/ajax/settings/upd_upload.php?order_id=" + n,
                        files: {
                            file_upd: t[0]
                        },
                        complete: function(e, t) {
                            var o = {};
                            try {
                                o = s.parseJSON(t.response).response
                            } catch (a) {}
                            if (!o.result && o.errors) {
                                var l = void 0 === o.file || o.file ? "" : i.values(o.errors).join("<br>");
                                r._showError(l, !1)
                            } else
                                r._showSuccess("", function() {
                                    s("label#" + n).text(AMOCRM.lang.update_upd)
                                }, 0)
                        }
                    }) : r._showError(AMOCRM.lang.upd_file_size_error, !1)
                }
            }),
            t.recount_prices(t.account.addition_users_count, !0)
        }
        ,
        u.bind_clicks = function() {
            var t = this;
            t.bind_clicks_base(),
            t.controls.$document && (this.$el.on(AMOCRM.click_event, ".plug-users_groups-body-button", function() {
                new c
            }),
            t.controls.$document.on(t.constants.click_event, "#proceed_checkout_button", function() {
                var e = function() {
                    t.controls.$proceed_button.data("proceed", "Y"),
                    t.open_payment_type_modal()
                };
                if ("Y" !== t.controls.$proceed_button.data("proceed")) {
                    if (t.isCouponReadyForPay())
                        return void e.call(this);
                    var i = {
                        callbacks: {
                            accept: e
                        },
                        messages: {
                            text: AMOCRM.lang.payment_confirm_wrong_coupon
                        }
                    };
                    t.open_confirm_modal(i)
                }
            }).on(t.constants.click_event, "div.open_modal_page", function() {
                var e = s(this).find("span.open_modal_page")
                  , i = e.data("href")
                  , n = e.closest(".billing__form__recent_orders__order")
                  , o = n.data("currency");
                o ? o += " " : o = !1,
                t.show_iframe_modal(i, o)
            }).on(t.constants.click_event, "button.billing__form__purchase__button", function() {
                var e = s(this)
                  , i = e.closest(".billing__form__recent_orders__order");
                i.find("div.open_modal_page").trigger(t.constants.click_event)
            }).on(t.constants.click_event, "#need_by_user_tariffing_button", function() {
                t.overlay_start(),
                s(document).one("page:change:stop", i.bind(t.overlay_stop, t)),
                AMOCRM.router.navigate(a.setQueryParam({
                    need_by_user_tariffing: "Y"
                }, {
                    replace: !0
                }), {
                    trigger: !0
                })
            }).on(t.constants.click_event, "#choose-free-tariff-button", function() {
                "ru" === t.account.lang_id ? e(["lib/interface/payment_sharing"], function(e) {
                    new e
                }) : s.post("/ajax/settings/payment", {
                    action: "choose_free_tariff"
                }).done(function(e) {
                    if (e.response && (e = e.response),
                    "success" == e.status || "fail" == e.status) {
                        t.$modal_obj && (t.$modal_obj.force_close = !0,
                        t.$modal_obj.destroy());
                        var i = new o({
                            destroy: function() {
                                return "success" == e.status && AMOCRM.router.navigate(a.setQueryParam({
                                    reload: n.randHex(),
                                    show_free_inset: "Y"
                                }, {
                                    replace: !0
                                }), {
                                    trigger: !0
                                }),
                                !0
                            }
                        })
                    }
                    "success" == e.status ? i.showSuccess(AMOCRM.lang.free_chosen) : "fail" == e.status && i.showError(e.errors[0], !1)
                })
            }).on(t.constants.click_event, "#currency_switcher .control-toggler__item:not(.control-toggler__item-selected)", function() {
                t.overlay_start(),
                s(document).one("page:change:stop", i.bind(t.overlay_stop, t)),
                AMOCRM.router.navigate(a.setQueryParam({
                    tariff_currency: s(this).data("currency")
                }, {
                    replace: !0
                }), {
                    trigger: !0
                })
            }).on(t.constants.click_event, "#subscription_switch", function() {
                if (t.controls.$month_selectors_wrapper) {
                    var e = s(this);
                    "Y" != e.data("process") && (e.data("process", "Y"),
                    setTimeout(function() {
                        e.data("process", "N")
                    }, 100),
                    t.account.elongation_month_count = e.find(".switcher").hasClass("switcher__on") ? t.constants.default_elongation_month_count : 0,
                    t.recount_prices())
                }
            }).on(t.constants.click_event, "#quota_exceeded__read_more", function() {
                t.open_quota_modal()
            }).on(t.constants.click_event, "#rec_pay .switcher_wrapper", function() {
                var e = s("#rec_pay");
                t.open_confirm_modal({
                    callbacks: {
                        accept: function() {
                            t.cancel_rec_pay_usa(function() {
                                e.hide()
                            }),
                            t.$modal_obj && (t.$modal_obj.force_close = !0,
                            t.$modal_obj.destroy())
                        },
                        destroy: function() {
                            e.find(".switcher").removeClass("switcher__off").addClass("switcher__on")
                        }
                    },
                    messages: {
                        decline_text: AMOCRM.lang.confirm__no,
                        accept_text: AMOCRM.lang.confirm__yes,
                        text: AMOCRM.lang.payment_confirm_rec_modal
                    }
                })
            }).on(t.constants.click_event, ".js-upd-upload-button", function() {
                s("#upd_upload_file").attr("order-id", this.getAttribute("id"))
            }),
            t.controls.$control_toggler__item_bill_type_free && t.controls.$control_toggler__item_bill_type_free.hasClass("has_overflow") && t.controls.$control_toggler__item_bill_type_free.prop("disabled", !0),
            t.controls.$document.on(t.constants.click_event, "#billing_tariffs_holder .billing_form__tariff_block", function() {
                var e = s(this);
                t.switch_bill_type(e)
            }))
        }
        ,
        u.show_iframe_modal = function(e, t) {
            var i = this;
            if (t = t || !1,
            !("string" != typeof e || e.length < 3)) {
                if (e.indexOf("documents.php") > -1)
                    return void window.open(e);
                i.overlay_start(),
                s.get(e, {
                    ajax: "y"
                }).done(function(n) {
                    i.overlay_stop();
                    try {
                        var a = s.parseJSON(n);
                        a && (n = a)
                    } catch (l) {}
                    for (; n.response; )
                        n = n.response;
                    return n.order_id ? void i.open_payment_type_modal(n.order_id) : (i.$modal_obj && i.$modal_obj.destroy(),
                    void (i.$modal_obj = new o({
                        class_name: "modal-list modal-payment-frame lang_id-" + i.get_locale_id(t),
                        centrify_animation: !0,
                        init: function(t) {
                            var o = r({
                                ref: "/tmpl/common/modal/iframe.twig"
                            })
                              , a = "";
                            a = n.html_page ? n.html_page : o.render({
                                frame_url: e
                            }),
                            t.addClass("step-2").addClass("modal_payment_choose").trigger("modal:loaded").html(a).trigger("modal:centrify");
                            var l = s("#order_system_info");
                            l.length > 0 && (n.pay_system = {
                                id: l.data("pay_system_id"),
                                person_type_id: l.data("person_type_id")
                            }),
                            n.pay_system && n.pay_system.id && n.pay_system.person_type_id && t.addClass("prefix_" + n.pay_system.id + "_" + n.pay_system.person_type_id),
                            i.show_order_result(t)
                        },
                        destroy: function() {
                            i.modal_destroy_base(this, {})
                        }
                    })))
                })
            }
        }
        ,
        l.prototype.switch_bill_type = function(e) {
            var t = e.hasClass("bill_type-free") ? "free" : "paid"
              , i = e.data("tariff_type-type");
            u.selected_tariff = u.account.tariffs[e.data("tariff-id")],
            u.selected_tariff.by_user && u.current_tariff_selected() && (u.account.addition_users_count = u.account.addition_users_count_original,
            u.account.current_users_count = u.account.current_users_count_original),
            u.controls.$month_selectors.each(function() {
                var e = s(this)
                  , t = e.data("value")
                  , i = e.find(".billing__form__extend__subscription_rates_wrapper__rate__gift");
                u.selected_tariff.months_gifts.hasOwnProperty(t) ? i.text(u.selected_tariff.months_gifts[t].text) : i.text("")
            }),
            u.controls_cache = u.controls_cache || {},
            u.controls_cache.free = u.controls_cache.free || [s(".billing__form__top__right"), s("#currency_switcher")],
            u.controls_cache.$bill_type__wrapper = u.controls_cache.$bill_type__wrapper || s("#bill_type__wrapper"),
            u.controls_cache.$billing__form__top = u.controls_cache.$billing__form__top || s(".billing__form__top"),
            u.controls_cache.$extend_subscription_toggle = u.controls_cache.$extend_subscription_toggle || s("#billing__form__extend_subscription_toggle"),
            u.controls.$users_count_selector && u.controls.$users_count_selector.toggle("by_user" === i),
            u.controls_cache.$extend_subscription_toggle && u.controls_cache.$extend_subscription_toggle.toggle("by_user" === i && u.current_tariff_selected()),
            u.controls_cache.$bill_type__wrapper.removeClass("free_account paid_account").addClass(t + "_account"),
            u.controls_cache.$billing__form__top.removeClass("free paid").addClass(t),
            s.each(u.controls_cache.free, function() {
                this.css("visibility", "free" === t ? "hidden" : "visible")
            }),
            "paid" === t && u.recount_prices(u.account.addition_users_count, !0)
        }
        ,
        l.prototype.open_quota_modal = function() {
            var e = this;
            e.overlay_start(),
            e.$modal_obj && e.$modal_obj.destroy();
            var t = e.get_locale_id()
              , i = " about_quotas" + t;
            e.$modal_obj = new o({
                class_name: "modal-list modal-about_quotas" + i,
                centrify_animation: !0,
                init: function(t) {
                    e.overlay_stop();
                    var i = r({
                        ref: "/tmpl/settings/payment/quota_modal.twig"
                    })
                      , s = {
                        quote_deals: e.account.quote_deals,
                        quote_contacts: e.account.quote_contacts,
                        quote_disk_space: e.account.quote_disk_space,
                        used_users_count: e.account.used_users_count,
                        used_deals_count: e.account.used_deals_count,
                        used_disk_space_count: e.account.used_disk_space_count,
                        used_contacts_count: e.account.used_contacts_count,
                        current_users_count: e.account.real_current_users_count,
                        quotas: e.account.quotas
                    };
                    t.trigger("modal:loaded").html(i.render({
                        user_account: s,
                        lang: AMOCRM.lang,
                        lang_id: e.get_locale_id()
                    })).trigger("modal:centrify"),
                    t.addClass("modal__about_quotas")
                },
                destroy: function() {
                    e.modal_destroy_base(this, {})
                }
            })
        }
        ,
        u.open_payment_type_modal = function(e) {
            var t = this;
            e = e || !1,
            t.$modal_obj && t.$modal_obj.destroy();
            var i = t.get_locale_id()
              , s = " lang_id-" + i;
            e && (s += " with_order"),
            t.$modal_obj = new o({
                class_name: "modal-list modal-payment-choose" + s,
                init: function(i) {
                    var s = r({
                        ref: "/tmpl/settings/payment/modal.twig"
                    })
                      , n = AMOCRM.constant("user")
                      , o = {
                        sale: t.account.coupon_sale_text,
                        dont_show_sale: t.account.coupon_sale < 1,
                        total: t.account.total_price_with_coupon_text,
                        gift: t.account.tariff_gift_text
                    }
                      , a = {
                        actual_address: t.account.user_actual_address,
                        actual_address_fiz: t.account.user_actual_address_fiz,
                        company_name: t.account.user_company_name,
                        full_name: t.account.user_full_name,
                        year: moment().format("YYYY"),
                        phone_number: t.account.user_phone_number,
                        ur_address: t.account.user_ur_address,
                        company_inn: t.account.user_company_inn,
                        company_unp: t.account.user_company_unp,
                        company_kpp: t.account.user_company_kpp,
                        is_individual: t.account.is_individual,
                        company_bin: t.account.user_company_bin,
                        company_egrpou: t.account.user_company_egrpou,
                        email: n && n.login ? n.login : ""
                    };
                    i.trigger("modal:loaded").html(s.render({
                        pay_systems: t.account.pay_systems,
                        user_data: a,
                        prices: o,
                        lang: AMOCRM.lang,
                        lang_id: t.get_locale_id(),
                        order_id: e,
                        rec_pay: t.account.rec_pay_on
                    })).addClass("modal_payment_choose").trigger("modal:centrify"),
                    t.init_modal_management(i)
                },
                destroy: function() {
                    return t.modal_destroy(this, {
                        on_close: function() {
                            t.controls.$document && t.controls.$document.off(t.constants.payment_postfix_event),
                            t.controls.$proceed_button && t.controls.$proceed_button.data("proceed", "")
                        }
                    })
                }
            })
        }
        ,
        u.init_fields_ps_1_1 = function(e) {
            var t = this;
            if ("ru" == t.get_locale_id()) {
                var i = t.get_company_state();
                void 0 == i && (i = "ru"),
                "ru" == t.get_locale_id() && s("input#u-is-individual").change(function() {
                    var e = s(this);
                    t.change_is_individual(e)
                }),
                "ru" == i ? s("#u-company-common-id").val(s("#u-company-inn").val()) : "ua" == i ? s("#u-company-common-id").val(s("#u-company-egrpou").val()) : "kz" == i ? s("#u-company-common-id").val(s("#u-company-bin").val()) : "by" == i && s("#u-company-common-id").val(s("#u-company-unp").val()),
                t.update_modal_for_ps_1_1(i, s("#u-company-common-id").val()),
                s("input#u-company-common-id").focus(function() {
                    s(this).removeClass(t.constants.error_class)
                }),
                s("input#u-company-common-id").change(function() {
                    var e = s(this);
                    t.validation_company_common_id(e)
                });
                var n = s("<div class='org_inn_list'> </div>")
                  , o = {};
                e.find("input").focusin(function() {
                    n.fadeOut(100)
                }),
                s("body").on("keyup", "input#u-company-common-id, input#u-company-name", function(e) {
                    if (9 != e.keyCode && 16 != e.keyCode) {
                        var t = s(this)
                          , i = {
                            query: s(this).val()
                        };
                        s.ajax({
                            type: "POST",
                            headers: {
                                Authorization: "Token 69977fdb28699ceac8fd4ee798731b20c2f538a1",
                                Accept: "application/json, text/javascript",
                                "Content-Type": "application/json"
                            },
                            url: "https://dadata.ru/api/v2/suggest/party",
                            dataType: "json",
                            data: JSON.stringify(i),
                            success: function(e) {
                                o.length = 0,
                                o = e.suggestions,
                                n.html("").fadeOut(0),
                                s.each(e.suggestions, function(e, t) {
                                    e > 3 || n.append("<div class='choice_org' id='index" + e + "'>" + t.value + "</div>")
                                }),
                                e.suggestions.length > 0 && n.fadeIn(0).insertAfter(t)
                            }
                        })
                    }
                }),
                s("body").on("click", function() {
                    n.fadeOut(100)
                }),
                s("body").on("click", ".org_inn_list .choice_org", function() {
                    n.fadeOut(100);
                    var e = s(this).attr("id").slice(5);
                    "LEGAL" == o[e].data.type ? (s("input#u-is-individual").prop({
                        checked: !1
                    }),
                    s("input#u-company-kpp").val(o[e].data.kpp).removeClass("hidden")) : (s("input#u-is-individual").prop({
                        checked: !0
                    }),
                    s("input#u-company-kpp").val("").addClass("hidden")),
                    s("input#u-company-name").val(o[e].data.name.short_with_opf),
                    s("input#u-ur-address").val(o[e].data.address.value),
                    s("input#u-company-common-id").val(o[e].data.inn),
                    null == t.constants && (t.constants = {
                        error_class: "validate-has-error"
                    }),
                    t.validation_company_common_id(s("input#u-company-common-id"))
                }),
                "ru" == i && (t.is_valid_ur_inn(s("#u-company-common-id").val()) || t.is_valid_phys_inn(s("#u-company-common-id").val())) && (t.is_valid_phys_inn(s("#u-company-common-id").val()) && s("input#u-is-individual").prop("checked", "checked"),
                t.change_is_individual(s("input#u-is-individual")))
            }
        }
        ,
        u.init_modal_management = function(e) {
            var t = this
              , i = !1;
            t.payment_controls = {
                $proceed_button: e.find(".js-bill-button"),
                $payment_div: e.find(".payment_method-left"),
                $payment_methods: e.find("label.choose_pay_system_id"),
                $cvv_field: s("#u-card-cvv")
            },
            t.payment_controls = t.check_jquery_objects(t.payment_controls),
            i = !!t.payment_controls.$cvv_field,
            i ? t.init_usa_controls() : t.payment_controls.$payment_methods.find("input").on("controls:change", function() {
                t.change_payment_system(e)
            }),
            t.change_payment_system(e),
            t.init_fields_ps_1_1(e),
            t.payment_controls.$proceed_button && t.payment_controls.$proceed_button.on(t.constants.click_event, function() {
                t.onPayButtonClick(e, i, t.getLastLegalOrderProps())
            })
        }
        ,
        u.onPayButtonClick = function(e, t, s) {
            var n, o;
            return t && !this.payment_controls.$proceed_button.data("order_id") ? void (!this.is_inputs_empty(e) && this.credit_card_ready() && this.open_confirm_modal({
                callbacks: {
                    accept: i.bind(function() {
                        this.create_order(e, !1)
                    }, this)
                }
            })) : (n = this.isLegalPaySystem(this.getPaySystemID(e)),
            o = this.hasLegalPropsDiff(s, this.getUserDetails(e)),
            n && s && o.length ? void (this.fieldsFilledWithValidData(e, !0) && this.open_confirm_modal({
                messages: {
                    text: AMOCRM.lang.accept_legal_changes,
                    accept_text: AMOCRM.lang.Agree,
                    decline_text: AMOCRM.lang.Disagree
                },
                callbacks: {
                    accept: i.bind(function() {
                        this.create_order(e, !1)
                    }, this)
                }
            })) : void this.create_order(e, !0))
        }
        ,
        u.modal_destroy = function(e, t) {
            var i = this;
            return i.$modal_obj.force_close !== !0 ? (i.open_confirm_modal({
                callbacks: {
                    accept: function() {
                        i.$modal_obj && (i.$modal_obj.force_close = !0,
                        i.$modal_obj.destroy())
                    }
                },
                messages: {
                    decline_text: AMOCRM.lang.confirm__no,
                    accept_text: AMOCRM.lang.confirm__yes,
                    text: AMOCRM.lang.payment_confirm_close_modal
                }
            }),
            !1) : (i.modal_destroy_base(e, t),
            !0)
        }
        ,
        u.init_selector = function() {
            var e = this
              , t = e.constants.click_event;
            e.controls.$month_selectors && e.controls.$month_selectors.on(t, function() {
                var t = s(this);
                if (!t.hasClass(e.constants.elongation_disabled_class)) {
                    var i = parseInt(t.data("value"), 10);
                    !e.allow_zero_elongation_month && 1 > i || (e.account.elongation_month_count = i,
                    e.recount_prices(),
                    e.set_elongation_month_count_visual(e.account.elongation_month_count))
                }
            })
        }
        ,
        u.switch_subscription_selector = function(e) {
            u.controls.$subscription_switcher && u.controls.$subscription_switcher.find(".switcher").toggleClass("switcher__on", e).toggleClass("switcher__off", !e),
            u.controls.$month_selectors_wrapper && u.controls.$month_selectors_wrapper.toggle(e)
        }
        ,
        u.showHiddenMonth = function(e, t) {
            var i = this
              , s = i.controls.$month_selectors.filter(".data_value_" + e);
            s.hasClass("display_none") && (s.removeClass("display_none").addClass("display_none_d"),
            t.addClass("display_none"))
        }
        ,
        u.set_elongation_month_count_visual = function(e) {
            var t = this
              , n = t.account.tariffs[t.selected_tariff.id].prices.hasOwnProperty("0")
              , o = i.keys(t.account.tariffs[t.selected_tariff.id].prices)
              , r = !1
              , a = t.getHiddenMonthByCoupon(t.account.coupon_code);
            if (o = i.map(o, function(e) {
                return parseInt(e, 10)
            }),
            o = i.filter(o, function(e) {
                return e > 0
            }),
            o = i.map(o, function(e) {
                return ".data_value_" + e.toString()
            }).join(", "),
            e = e || t.account.elongation_month_count,
            t.switch_subscription_selector(e >= 1),
            t.controls.$month_selectors) {
                var l = t.controls.$month_selectors.filter(".data_value_" + e)
                  , c = t.controls.$month_selectors.filter(o).last();
                if (t.controls.$month_selectors.filter(".display_none_d").removeClass("display_none_d").addClass("display_none"),
                t.controls.$month_selectors.filter(o).removeClass("display_none"),
                t.controls.$month_selectors.not(o).addClass("display_none"),
                t.selected_tariff.id && !n ? (t.controls.$month_selectors.addClass("display_none"),
                s.each(t.selected_tariff.prices, function(e) {
                    e > 0 && (t.controls.$month_selectors.filter(".data_value_" + e).removeClass("display_none"),
                    r || (r = !0,
                    t.constants.default_elongation_month_count = e))
                })) : t.can_use_hidden_month() && a ? t.showHiddenMonth(a, c) : t.can_use_hidden_month() && c.removeClass("display_none"),
                l.length < 1)
                    return;
                if (l.hasClass("display_none") && !l.hasClass("data_value_0") || l.hasClass("data_value_0") && !n) {
                    switch (t.account.elongation_month_count = t.constants.default_elongation_month_count,
                    t.constants.default_elongation_month_count) {
                    case 36:
                        t.constants.default_elongation_month_count = 24;
                        break;
                    case 24:
                        t.constants.default_elongation_month_count = 12;
                        break;
                    case 12:
                        t.constants.default_elongation_month_count = 9;
                        break;
                    case 9:
                        t.constants.default_elongation_month_count = 6;
                        break;
                    case 6:
                        t.constants.default_elongation_month_count = 36
                    }
                    return void t.recount_prices()
                }
                var d, u, h = t.controls.$month_selectors.filter(":not(.display_none)"), _ = h.index(l), p = 0;
                d = 132,
                u = Math.round(d * _),
                h.each(function() {
                    var e = s(this)
                      , i = parseInt(e.data("value"), 10);
                    e.css("left", Math.round(d * p++) + "px"),
                    t.controls.$month_init_prices && t.account.tariff_month_init_prices && t.account.tariff_month_init_prices[i] && t.account.tariff_month_init_prices[i].price && t.controls.$month_init_prices.filter(".month_value_" + i).text(t.account.tariff_month_init_prices[i].price)
                }),
                t.controls.$month_selectors_wrapper.css("width", Math.round(d * --p)),
                t.controls.$rate_selector && t.controls.$rate_selector.css("left", u + "px"),
                t.controls.$month_selectors.removeClass("selected"),
                l.addClass("selected")
            }
        }
        ,
        u.check_order = function() {
            var e = this
              , t = parseInt(a.getQueryParam("order_id"), 10);
            t > 0 && e.controls.$recent_orders_rows && e.controls.$recent_orders_rows.each(function() {
                var i = s(this)
                  , n = i.data("order_id");
                return n == t ? (i.find("div.open_modal_page").trigger(e.constants.click_event),
                !1) : !0
            })
        }
        ,
        u.initialization = function() {
            var e = this;
            e.initialized || (e.constants.elongation_disabled_class = "billing__form__extend__subscription_disabled",
            s(document).trigger("page:change:stop"),
            e.initialize(),
            AMOCRM.setTitle(AMOCRM.lang.setting_billing_head_title),
            e.bind_clicks(),
            e.init_selector(),
            e.check_order(),
            e.initialized = !0)
        }
        ,
        u.set_options(t, !1)
    }
    ,
    t.prototype.destroy = function() {
        this.Payment && this.Payment.destroy(),
        delete this.Payment
    }
    ,
    t
}),
define("lib/pages/support/list", ["require", "jquery", "lib/components/base/page", "lib/common/hs", "lib/common/urlparams", "lib/components/lists/base/header", "lib/components/base/modal", "lib/common/browserdetect"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("lib/components/base/page"), n = e("lib/common/hs"), o = e("lib/common/urlparams"), r = e("lib/components/lists/base/header"), a = e("lib/components/base/modal"), l = e("lib/common/browserdetect"), c = "Mac" === l.OS ? "altKey" : "ctrlKey", d = {
        left: 37,
        right: 39
    };
    return t = s.extend({
        overlay_class_name: "aside-page-overlay",
        transition: {
            animation_time: 1,
            delay: .5
        },
        overlayContainer: function() {
            return i("#page_holder")
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        _selectors: function() {
            return {
                list_head: "#list_head",
                users_wrapper: "#users_wrapper",
                search_input: "#search_input",
                account_id: "#account",
                button_create: ".button-input#create"
            }
        },
        _classes: function() {
            return {
                table_holder: "list__table__holder",
                list_head: "list_head"
            }
        },
        events: function() {
            var e = {
                "click .button-input#search": "search",
                "click .button-input#create": "create_ticket",
                "click .js-review-delete-link": "deleteReview",
                "click .mobile_version_save": "saveMobile",
                "input #account": "enable_create"
            };
            return _.extend(e, s.prototype.events || {}, {})
        },
        initialize: function(e) {
            var t = this;
            return s.prototype.initialize.call(this),
            e ? (this.initParams(e),
            this.initComponents(),
            void i(document).on("click" + this.ns, ".js-pagination-link", function(e) {
                t.navigatePage(null, parseInt(i(e.target).data("page")))
            }).on("click" + this.ns, "#list_pagination .pagination-buttons > button", function() {
                var e = i(this);
                e.hasClass("js-pagination-prev") ? t.navigatePage(-1) : e.hasClass("js-pagination-next") && t.navigatePage(1)
            }).on("keyup" + this.ns, function(e) {
                return i("input:focus").length > 0 ? !1 : void (e[c] && e.keyCode === d.right && !i("#card_holder").hasClass("content__card-holder-active") && (t.navigatePage(1),
                e.preventDefault()))
            }).on("keyup" + this.ns, function(e) {
                return i("input:focus").length > 0 ? !1 : void (e[c] && e.keyCode === d.left && !i("#card_holder").hasClass("content__card-holder-active") && (t.navigatePage(-1),
                e.preventDefault()))
            })) : void console.error("Options not defined")
        },
        search: function() {
            var e = this._elem("search_input").val();
            AMOCRM.router.navigate("_support/search_wbs/?term=" + e, {
                trigger: !0
            })
        },
        navigatePage: function(e, t) {
            var i = o.getParam("page") || 1
              , s = t || parseInt(i) + (e || 1);
            AMOCRM.router && AMOCRM.router.navigate && AMOCRM.router.navigate(o.setParam({
                page: 1 === s ? "" : s
            }), {
                trigger: !0
            })
        },
        create_ticket: function() {
            window.open("/_support/search_wbs/?create_wbs=Y&account_id=" + this._elem("account_id").val())
        },
        deleteReview: function(e) {
            var t = confirm("¬ы действительно хотите удалить данный комментарий?")
              , s = i(e.currentTarget).data("widget-id")
              , n = i(e.currentTarget).data("account-id");
            return t && i.get("/ajax/_support/reviews/list/?delete[account_id]=" + n + "&delete[widget_id]=" + s, function(e) {
                "success" === e.status ? ((new a).showSuccess(),
                i(document).trigger("page:reload")) : (new a).showError("", !1)
            }, "json"),
            !1
        },
        saveMobile: function(e) {
            var t = i("#mobile_version_number")[0].value
              , s = confirm("¬ы уверены, что хотите сменить текущую стабильную версию функционала мобильных приложений на " + t + "?");
            s && i.post("/ajax/_support/mobile/list/?new_version=" + t, function(e) {
                "success" === e.status ? ((new a).showSuccess(),
                i(document).trigger("page:reload")) : (new a).showError("", !1)
            }, "json")
        },
        enable_create: function() {
            this._elem("account_id").val().length > 3 ? this._elem("button_create").removeClass("button-input-disabled") : this._elem("button_create").addClass("button-input-disabled")
        },
        initParams: function(e) {
            return e.entity ? void (this.entity = e.entity) : void console.error("Entity in options not defined")
        },
        initComponents: function() {
            "mobile" !== this.entity && (this._addComponent(n, {
                wrapper: this._elem("table_holder").parent(),
                scroller: this._elem("table_holder")
            }),
            this._addComponent(r, {
                el: this._elem("list_head")
            }))
        },
        destroy: function() {
            i(document).off(this.ns),
            s.prototype.destroy.call(this)
        }
    })
}),
define("lib/pages/account/card", ["require", "jquery", "underscore", "lib/pages/support/card"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/pages/support/card");
    return t = n.extend({
        events: function() {
            return s.extend({
                "click .cancel_recurring_payment": "cancelRecPay"
            }, s.result(n.prototype, "events"))
        },
        cancelRecPay: function() {
            i.post("/private/ajax/payment_old_actions.php", {
                ajax: "y",
                ACTION: "CANCEL_REC_PAY_USA",
                account: this.id
            }).done(s.bind(function() {
                this._$document.trigger("page:reload")
            }, this))
        }
    })
}),
define("lib/pages/support/mailboxes/mail_connect_card", ["require", "jquery", "underscore", "lib/pages/support/mailboxes/card", "lib/components/support/support_api", "twig"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("underscore"), n = e("lib/pages/support/mailboxes/card"), o = e("lib/components/support/support_api"), r = e("twig");
    return t = n.extend({
        options: null,
        events: function() {
            return {
                "submit #mail_connect_card_form": "mailConnectDiagnose"
            }
        },
        initialize: function(e) {
            this.options = e || {},
            this.options.entity = e.entity || "test_mail_connection_card",
            n.prototype.initialize.call(this, this.options)
        },
        destroy: function() {
            n.prototype.destroy.call(this)
        },
        _title: function() {
            return AMOCRM.lang.page.title
        },
        mailConnectDiagnose: function() {
            var e = this
              , t = i("#mail_connect_card_form")
              , n = i("#button-diagnostic")
              , r = this.objectifyForm(t.serializeArray());
            n.attr("disabled", !0).trigger("button:save:disable").trigger("button:save:start"),
            o.diagnoseSettings(r).done(s.bind(function(t) {
                t.id && e.mailDiagnosticStatus(t.id)
            })).fail(s.bind(function(e, t, s) {
                i("#diagnostic_result").html("<p>ќшибка (" + s + ")<p>"),
                n.attr("disabled", !1).trigger("button:load:stop").trigger("button:save:enable")
            }))
        },
        mailDiagnosticStatus: function(e) {
            var t = this
              , n = i("#button-diagnostic")
              , a = null;
            o.getSettingsDiagnosticStatus(e).done(s.bind(function(s) {
                s !== a && (i("#diagnostic_result").html(r({
                    ref: "/tmpl/system/support/mailboxes/tables/diagnostic_result.twig"
                }).render({
                    title: s.status,
                    created_at: s.created_at,
                    checks: s.checks
                })),
                a = s),
                "complete" === s.status ? n.attr("disabled", !1).trigger("button:load:stop").trigger("button:save:enable") : t.mds_timeout_id = setTimeout(function() {
                    t.mailDiagnosticStatus(e)
                }, 5e3)
            }))
        },
        objectifyForm: function(e) {
            for (var t = {}, i = 0; i < e.length; i++)
                t[e[i].name] = e[i].value;
            return t
        }
    })
}),
define("lib/common/nav", ["require", "jquery", "backbone", "underscore", "twigjs", "lib/components/auth_modal", "lib/common/urlparams", "lib/common/fn", "lib/dev/meter/meter", "lib/interface/payment_page", "lib/pages/support/list", "lib/pages/support/card", "lib/pages/account/card", "lib/components/base/scroll_saver", "lib/pages/support/mailboxes/mail_connect_card"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("backbone"), n = e("underscore"), o = e("twigjs"), r = e("lib/components/auth_modal"), a = e("lib/common/urlparams"), l = e("lib/common/fn"), c = e("lib/dev/meter/meter"), d = e("lib/interface/payment_page"), u = e("lib/pages/support/list"), h = e("lib/pages/support/card"), _ = e("lib/pages/account/card"), p = e("lib/components/base/scroll_saver"), m = e("lib/pages/support/mailboxes/mail_connect_card"), f = function(t) {
        var s, r, a = function(e, s) {
            var r, a, d = i(s.active_element), u = t.holder && !AMOCRM.data.entity_changed ? t.holder : "page_holder";
            e.response && e.response.template && e.response.template.name && (t.template = "/tmpl/" + e.response.template.name),
            c.mrk(),
            a = o({
                ref: t.template
            }).render(i.extend(!0, e.response, {
                lang: AMOCRM.lang
            }, t.template_data || {})),
            l.replaceHtml(document.getElementById(u), a),
            c.msr("TEMPLATE_RENDERED"),
            n.isFunction(s.callback) && s.callback(),
            !AMOCRM.is_touch_device && d.length && "search_input" === d.attr("id") && (r = i("#search_input"),
            r.closest(".content__top__inner").addClass("search-in-focus"),
            r.focus()),
            AMOCRM.data.current_view = new t.handler(i.extend({}, t.handler_params, {
                res: e
            }) || {
                res: e
            }),
            i(document).trigger("widgets:load")
        }, d = function(s) {
            var n = i.Deferred();
            return s = s || {},
            i(document).trigger("page:change:loader.common"),
            t.res ? void a(t.res, s) : (e(["/frontend/build/templates.js"], n.resolve),
            void i.when(i.ajax({
                page_xhr: !0,
                url: t.url,
                data: t.ctx.querystring,
                dataType: "json",
                type: "POST"
            }), n.promise()).then(function(e) {
                AMOCRM.data.current_view && (AMOCRM.data.current_view.destroy(),
                AMOCRM.data.current_view = !1),
                a(e[0], s)
            }))
        };
        t.ctx.first_load ? (s = i.Deferred(),
        r = i.Deferred(),
        e(["/frontend/build/templates.js"], s.resolve),
        i(r.resolve),
        i.when(s.promise(), r.promise()).then(function() {
            AMOCRM.data.current_view = new t.handler(t.handler_params),
            i(document).trigger("widgets:load")
        })) : AMOCRM.data.card_page && AMOCRM.data.current_view ? AMOCRM.data.card_page.cardBack(function(e) {
            !e && AMOCRM.data.current_view instanceof t.handler || d()
        }) : d({
            active_element: document.activeElement,
            callback: function() {
                AMOCRM.data.card_page && AMOCRM.data.card_page.destroy()
            }
        })
    };
    return i(document).on("page:reload list:reload", function(e, t) {
        var i = "";
        t === !0 && (AMOCRM.data.current_entity = "no_entity"),
        AMOCRM.router.navigate(a.setQueryParam({
            reload: l.randHex()
        }), {
            trigger: !0,
            replace: !0
        }),
        i = a.removeQueryParam("reload"),
        AMOCRM.router.navigate(window.location.pathname + (i ? "?" + i : ""), {
            trigger: !1,
            replace: !0
        })
    }),
    i.ajaxSetup({
        beforeSend: function(e, t) {
            e.always(function(e, i, n) {
                var o, l;
                "Unauthorized" === n && 401 === +e.getResponseHeader("X-Core-Status") && (o = a.getQueryString(),
                l = s.history.location.pathname + (o ? "?" + o : ""),
                t.page_xhr ? (AMOCRM.router.authRoute(),
                AMOCRM.router.navigate(a.setQueryParam({
                    show_auth: "yes"
                }), {
                    replace: !0
                })) : l = void 0,
                new r(l))
            }),
            t.page_xhr && (AMOCRM.page_xhr && n.isFunction(AMOCRM.page_xhr.abort) && 4 !== +AMOCRM.page_xhr.readyState && AMOCRM.page_xhr.abort(),
            AMOCRM.page_xhr = e,
            e.done(function() {
                AMOCRM.data.card_page && !t.page_is_card && t.destroy_card !== !1 && AMOCRM.data.card_page.destroy()
            }).done(function() {
                t.no_page_change || i(document).trigger("page:changed", [{
                    querystring: a.getQueryString()
                }]),
                p.restorePosition()
            }),
            AMOCRM.setTitle(AMOCRM.lang[AMOCRM.getBaseEntity() + "_head_title"])),
            e.done(function(e) {
                n.isObject(e) && e.response && (e.response.lang && AMOCRM.addLang(e.response.lang),
                e.response.user_rights && AMOCRM.constant("user_rights", i.extend(AMOCRM.constant("user_rights"), e.response.user_rights)),
                l.has_keys(e, ["response", "redirect"]) && n.isString(e.response.redirect) && e.response.redirect.length > 0 && AMOCRM.router.navigate(e.response.redirect, {
                    trigger: !0,
                    replace: !0
                }))
            })
        }
    }),
    t = {
        list_support: function(e) {
            var t = "/ajax/_support/" + e.entity + "/list/";
            e.params && e.params.page > 0 && (t += "page/" + e.params.page + "/"),
            f({
                url: t,
                template: "/tmpl/system/support/list.twig",
                handler: u,
                handler_params: {
                    entity: e.entity
                },
                ctx: e
            })
        },
        unban_list_support: function(e) {
            var t = "/ajax/_support/unban_account/";
            e.params && e.params.page > 0 && (t += "page/" + e.params.page + "/"),
            f({
                url: t,
                template: "/tmpl/system/support/list.twig",
                handler: u,
                handler_params: {
                    entity: "unban_account"
                },
                ctx: e
            })
        },
        unban_action_list_support: function(e) {
            var t = "/ajax/_support/unban_account/";
            e.params && e.params.domain && (t += "unban_subdomain/" + e.params.domain + "/"),
            f({
                url: t,
                template: "/tmpl/system/support/list.twig",
                handler: u,
                handler_params: {
                    entity: "unban_account"
                },
                ctx: e
            })
        },
        search_list_support: function(e) {
            var t = "/ajax/_support/search_wbs/";
            e.params && e.params.page > 0 && (t += "page/" + e.params.page + "/"),
            f({
                url: t,
                template: "/tmpl/system/support/search/list.twig",
                handler: u,
                handler_params: {
                    entity: "search_wbs"
                },
                ctx: e
            })
        },
        mail_connection_support: function(e) {
            var t = "/ajax/_support/test_mail_connection/";
            f({
                url: t,
                template: "/tmpl/system/support/mailboxes/form.twig",
                handler: m,
                ctx: e
            })
        },
        card_support: function(e) {
            f({
                url: "/ajax/_support/" + e.entity + "/detail/" + e.id,
                template: "/tmpl/system/support/card.twig",
                handler: "accounts" === e.entity ? _ : h,
                handler_params: {
                    id: e.id,
                    entity: e.entity
                },
                ctx: e
            })
        },
        pay: function(e) {
            f({
                handler: d,
                data: e.querystring,
                url: "/ajax/settings/pay/",
                template: "/tmpl/settings/payment/page.twig",
                ctx: e
            })
        }
    }
}),
define("lib/common/page_preventer", ["require", "underscore", "backbone", "lib/components/base/confirm"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("backbone")
      , s = e("lib/components/base/confirm")
      , n = {
        message: AMOCRM.lang.page_leave_has_changes,
        accept_text: "OK",
        decline_text: AMOCRM.lang.button_cancel,
        accept: null,
        decline: null
    }
      , o = {}
      , r = {}
      , a = !1
      , l = $(document);
    i.History.prototype.navigate = t.wrap(i.History.prototype.navigate, function(e, t, i) {
        var s = this
          , n = function() {
            AMOCRM.router.preventPageChange(!1),
            e.call(s, t, i)
        };
        a && i.trigger ? AMOCRM.router.confirmPageChange(c.getChanges(), n) : n()
    }),
    $(window).on("beforeunload", function() {
        return a ? AMOCRM.lang.page_leave_has_changes : void 0
    });
    var c = {
        getPreventFlag: function() {
            return a
        },
        getTrackChanges: function() {
            return c.getChanges()
        },
        preventPageChange: function(e, i) {
            var s = void 0 === e ? !0 : e;
            return i = c.checkCode(i),
            s ? r[i] && (o[i] = $.extend({}, n, r[i])) : delete o[i],
            a = t.keys(o).length > 0,
            this
        },
        registerPreventConfig: function(e, t) {
            r[c.checkCode(t)] = e
        },
        removePreventConfig: function(e) {
            e = c.checkCode(e),
            r[e] && delete r[e]
        },
        confirmPageChange: function(e, i) {
            var n = t.bind(this.confirmPageChange, this);
            i = t.isFunction(i) ? i : t.noop,
            l.trigger("menu:icon:restore").trigger("page:change:stop"),
            AMOCRM.router.prevent_page_confirm || (this.declined = !1,
            AMOCRM.router.prevent_page_confirm = !0,
            new s({
                class_name: "modal-list modal-leave-confirm",
                decline_text: e.decline_text,
                accept_text: e.accept_text,
                button_class: e.gray_button ? "" : "button-input_blue",
                text: e.message || AMOCRM.lang.card_page_leave_has_changes,
                init: function() {
                    "function" == typeof e.init && e.init(function() {
                        i()
                    })
                },
                accept: function() {
                    "function" == typeof e.accept ? e.accept(function() {
                        i()
                    }) : i(),
                    this.modal.destroy()
                },
                destroy: function() {
                    this.accepted !== !1 || this.declined || (this.declined = !0,
                    "function" == typeof e.decline ? e.decline(function() {
                        i()
                    }, this.accepted) : i()),
                    "function" == typeof e.destroy && e.destroy(),
                    t.keys(o).length <= 1 ? AMOCRM.router.prevent_page_confirm = !1 : (delete o[t.first(t.keys(o))],
                    n())
                }
            }))
        },
        checkCode: function(e) {
            return e || AMOCRM.data.current_entity
        },
        getChanges: function() {
            return t.first(t.values(o)) || {}
        }
    };
    return c
}),
define("lib/core/router", ["require", "jquery", "backbone", "underscore", "cocktail", "es6promise", "lib/common/fn", "lib/pages/routes", "lib/common/urlparams", "lib/common/nav", "lib/common/cookie", "lib/widgets", "lib/common/page_preventer", "lib/dev/meter/meter", "lib/components/base/scroll_saver", "lib/interface/left_menu/index"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("backbone"), n = e("underscore"), o = e("cocktail"), r = e("es6promise"), a = e("lib/common/fn"), l = e("lib/pages/routes"), c = e("lib/common/urlparams"), d = e("lib/common/nav"), u = e("lib/common/cookie"), h = e("lib/widgets"), _ = e("lib/common/page_preventer"), p = e("lib/dev/meter/meter"), m = e("lib/components/base/scroll_saver"), f = i(document), g = function() {
        return AMOCRM.data.current_view && n.isFunction(AMOCRM.data.current_view._getInstance) ? AMOCRM.data.current_view._getInstance() : AMOCRM.data.current_view
    }, b = s.Router.prototype._bindRoutes, v = !1, y = !1;
    return e("lib/interface/left_menu/index"),
    r.polyfill(),
    t = s.Router.extend({
        base_entities: ["leads", "contacts", "todo", "companies", "customers"],
        all_entities: [],
        routes: n.extend(l, {
            "settings/pay/(?*qs)": "settings_pay",
            ":entity(/)": "rememberedEntity",
            "_support/:entity/detail/:id(?*qs)": "cardSupport",
            "_support/:entity/list/(?*qs)": "listSupport",
            "_support/:entity/list/page/:page/(?*qs)": "listSupportPage",
            "_support/unban_account/(?*qs)": "listSupportUnban",
            "_support/unban_account/page/:page/(?*qs)": "listSupportUnbanPage",
            "_support/unban_account/unban_subdomain/:domain(?*qs)": "listSupportUnbanDomain",
            "_support/search_wbs/(?*qs)": "listSupportSearchPage",
            "_support/test_mail_connection(/)": "listSupportMainConnectionPage",
            "*notFound": "notFound"
        }),
        _bindRoutes: function() {
            var e = [];
            this.routes && (this.routes = n.chain(n.result(this, "routes")).reduce(function(t, i, s) {
                return n.isString(i) ? t[s] = i : (e.push([s, i[0], i[1], i[2] || {}]),
                this.all_entities = n.chain(this.all_entities).union([i[0]]).uniq().value()),
                t
            }, {}, this).value(),
            b.apply(this, arguments),
            n.reject(e, function(e) {
                return this.addRoute.apply(this, e),
                !0
            }, this))
        },
        notFound: function() {
            this.routeWrap("page404")
        },
        listSupport: function(e, t) {
            this.routeWrap(e + "_list_support", {
                querystring: t || "",
                entity: e
            })
        },
        listSupportPage: function(e, t, i) {
            this.routeWrap(e + "_list_support", {
                params: {
                    page: t
                },
                querystring: i || "",
                entity: e
            })
        },
        listSupportUnban: function(e) {
            this.routeWrap("account_unban_list_support", {
                querystring: e || "",
                entity: "unban_account"
            })
        },
        listSupportUnbanPage: function(e, t) {
            this.routeWrap("account_unban_list_support", {
                params: {
                    page: e
                },
                querystring: t || "",
                entity: "unban_account"
            })
        },
        listSupportUnbanDomain: function(e, t) {
            this.routeWrap("account_unban_action_list_support", {
                params: {
                    domain: e
                },
                querystring: t || "",
                entity: "unban_account"
            })
        },
        listSupportSearchPage: function(e) {
            this.routeWrap("account_search_list_support", {
                querystring: e || "",
                entity: "search_wbs"
            })
        },
        listSupportMainConnectionPage: function() {
            this.routeWrap("account_mail_connection_support", {
                entity: "mail_connection"
            })
        },
        cardSupport: function(e, t, i) {
            this.routeWrap(e + "_card_support", {
                querystring: i || "",
                id: t,
                entity: e
            })
        },
        rememberedEntity: function(e) {
            var t = {
                leads: "pipeline",
                customers: "pipeline",
                todo: "line",
                contacts: "list",
                calendar: "month",
                catalogs: ""
            }
              , i = {
                leads: "LAST_PLACE_DEALS",
                customers: "LAST_PLACE_CUSTOMERS",
                todo: "LAST_PLACE_TODO",
                contacts: "LAST_PLACE_CONTACTS",
                catalogs: "LAST_PLACE_CATALOGS",
                month: "LAST_PLACE_CALENDAR"
            }
              , s = u.get(i[e]);
            s && -1 === s.indexOf("undefined") && -1 === s.indexOf("null") || (s = t[e]),
            s || this.notFound(),
            AMOCRM.router.navigate("/" + e + "/" + s + "/", {
                trigger: !0,
                replace: !0
            })
        },
        settings_pay: function(e) {
            this.routeWrap("settings_pay", {
                querystring: e || ""
            })
        },
        back: function(e) {
            var t, n = AMOCRM.getBaseEntity(), o = "";
            if (y && e !== !0)
                _.getPreventFlag() ? this.confirmPageChange(_.getTrackChanges(), function() {
                    s.history.history.back()
                }) : s.history.history.back();
            else if (i.inArray(AMOCRM.getBaseEntity(), ["leads", "companies", "contacts", "todo", "mail", "customers", "unsorted"]) >= 0) {
                switch ("companies" === n && (n = "contacts",
                o = "companies/"),
                AMOCRM.getBaseEntity()) {
                case "customers":
                    t = "/customers/pipeline/";
                    break;
                case "unsorted":
                case "leads":
                    t = "/leads/";
                    break;
                case "mail":
                    t = "/" + n + "/inbox/";
                    break;
                default:
                    t = "/" + n + "/list/" + o
                }
                this.navigate(t, {
                    trigger: !0
                })
            }
        },
        addRoute: function(e, t, i, s) {
            return this.route(e, n.bind(function() {
                var e = c.getQueryString()
                  , o = Array.prototype.slice.call(arguments);
                e && o.pop(),
                this.routeWrap(t + "_null", n.extend({
                    handler: i,
                    args: o
                }, s || {}))
            }, this)),
            this
        },
        routeWrap: function(e, t) {
            var o = e.toString().split("_")
              , r = o.splice(1).join("_");
            t = t || {
                querystring: ""
            },
            AMOCRM.constant("auth_page") !== !0 && (h.prototype.clear_widgets_block(),
            v || t.ajax_load === !0 ? AMOCRM.first_load = !1 : t.first_load = !0,
            y === s.history.fragment && (t.is_back = !0),
            y = v,
            v && (t.path_changed = !0),
            this.storePath(s.history.fragment),
            AMOCRM.getBaseEntity() !== AMOCRM.getBaseEntity(o[0]) ? (t.entity_changed = !0,
            AMOCRM.data.entity_changed = !0) : (!AMOCRM.page_xhr || AMOCRM.page_xhr && 4 === AMOCRM.page_xhr.readyState) && (AMOCRM.data.entity_changed = !1),
            AMOCRM.data.page_changed = AMOCRM.data.current_entity !== o[0],
            AMOCRM.data.current_entity !== a.getMatchingEntity(o[0]) ? m.clearPosition() : t.is_card && !AMOCRM.data.card_page && m.savePosition(),
            AMOCRM.data.current_entity = o[0],
            AMOCRM.data.is_card = !!t.is_card,
            AMOCRM.data.from_card = !!AMOCRM.data.card_page,
            AMOCRM.data.entity_changed && f.triggerHandler("page:entity_changed", [n.extend({}, t)]),
            t.handler ? new Promise(n.bind(this.routeCheckCardBack, this, t)).then(n.bind(this.routeHandlerInit, this)) : n.isFunction(d[r]) && (AMOCRM.first_load ? i(function() {
                d[r](t),
                p.mrk("requestStart").msr("DOM_LOADED")
            }) : d[r](t)),
            v = s.history.fragment)
        },
        storePath: function(e) {
            n.isArray(this.paths) || (this.paths = []),
            this.paths.unshift(e)
        },
        routeHandlerInit: function(e) {
            var t, i = g();
            AMOCRM.data.card_page && (AMOCRM.data.card_page.destroy(),
            AMOCRM.data.card_page = !1),
            i && !e.is_card && (i.destroy(),
            AMOCRM.data.current_view = !1),
            t = new e.handler({
                route_args: e.args
            }),
            e.is_card ? AMOCRM.data.card_page = t : AMOCRM.data.current_view = t
        },
        routeCheckCardBack: function(e, t, i) {
            var s = !1;
            !AMOCRM.data.is_card && AMOCRM.data.card_page && AMOCRM.data.current_view && AMOCRM.router.paths.length > 3 && AMOCRM.router.paths[0] === AMOCRM.router.paths[2] ? AMOCRM.data.card_page.cardBack(n.bind(function(i) {
                s = !(g()instanceof e.handler),
                i || s ? (s && (AMOCRM.data.entity_changed = !0),
                m.savePosition(),
                t(e)) : f.triggerHandler("page:changed")
            }, this)) : t(e)
        }
    }),
    o.mixin(t, _),
    AMOCRM.router = new t,
    s.history.start({
        pushState: !0
    }),
    AMOCRM.router
}),
define("lib/tour/qualification_form", ["require", "jquery", "twig", "underscore", "lib/components/base/modal", "lib/components/base/form"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/components/base/modal"), r = e("lib/components/base/form");
    return t = function(e) {
        e = e || {},
        this.ns = ".qualify_form",
        this.controls = {},
        this.ajax_timeout = 6e4,
        this.Modal = new o({
            class_name: "qualify-form-modal",
            disable_overlay_click: !0,
            init: s._preload(["/tmpl/tour/qualification_form.twig"], n.bind(function(e) {
                this.$modal_body = e,
                i.ajax({
                    url: "/private/account/qualification_form",
                    method: "GET",
                    data: {
                        action: "get_params"
                    },
                    dataType: "json",
                    timeout: this.ajax_timeout,
                    context: this,
                    error: n.bind(function(e) {}, this),
                    success: n.bind(function(t) {
                        return t.error || !t.fields ? !1 : (e.on("modal:loaded" + this.ns, n.bind(function() {
                            this.controls.$submit_btn = this.$modal_body.find("#qualify-form_submit"),
                            this.form = new r.View({
                                el: e
                            }),
                            this.form.model.on("has_changes", n.bind(function() {
                                this.validateForm(),
                                e.trigger("modal:centrify")
                            }, this)).on("has_reverted", n.bind(function() {
                                this.controls.$submit_btn.trigger("button:save:disable"),
                                e.trigger("modal:centrify")
                            }, this)),
                            this.$modal_body.on("blur" + this.ns, "input", function() {
                                AMOCRM.is_touch_device && i(document).scrollTop(0)
                            }).on("click" + this.ns, ".js-qualify_form_variant", n.bind(function(e) {
                                var t = i(e.currentTarget)
                                  , s = t.closest(".qualify-form_field-values").find("input[type=text]");
                                s.toggleClass("hidden", !t.hasClass("custom_variant")),
                                this.validateForm()
                            }, this)).on("change" + this.ns, ".control--select--input[name=role_in_company]", n.bind(function(t) {
                                var s = i(t.currentTarget)
                                  , n = s.closest(".qualify-form_field-values").find("input[type=text]");
                                "2630278" == s.val() || "2918162" == s.val() ? n.removeClass("hidden").css({
                                    "margin-top": 10
                                }) : n.addClass("hidden").css({
                                    "margin-top": "inherit"
                                }),
                                e.trigger("modal:centrify"),
                                this.validateForm()
                            }, this)).on("click" + this.ns, "#qualify-form_submit", n.bind(this.sendForm, this)).on("submit" + this.ns, "#qualification_form", n.bind(function(e) {
                                e.preventDefault(),
                                this.sendForm()
                            }, this)),
                            this.controls.$submit_btn.trigger("button:save:disable")
                        }, this)),
                        e.html(s({
                            ref: "/tmpl/tour/qualification_form.twig"
                        }).render({
                            fields: t.fields,
                            lang: t.lang,
                            account_lang: t.account_lang
                        })).trigger("modal:loaded").trigger("modal:centrify"),
                        i(document).off("page:entity_changed.modal:core"),
                        void i(window).scrollTop(0))
                    }, this)
                })
            }, this)),
            destroy: n.bind(function() {
                this._destroyed || (this._destroyed = !0,
                this.$modal_body.off(this.ns),
                this.form && this.form.destroy(),
                n.isFunction(e.destroy) && e.destroy())
            }, this)
        })
    }
    ,
    t.prototype.validateForm = function(e) {
        var t = !0
          , i = this.$modal_body.find("#qualification_form").serializeArray();
        return i.forEach(n.bind(function(i) {
            return i.name.match(/.+_custom_variant$/) && this.$modal_body.find("#qualify-form_" + i.name).hasClass("hidden") ? !0 : void (!i.value.trim().length || i.name.match(".+_count$") && i.value.match(/[^0-9]/) ? (t = !1,
            e && (this.$modal_body.find("input[name=" + i.name + "]").addClass("qualify-form_error-field"),
            this.$modal_body.find("input[name=" + i.name + "]").closest(".control--select").find(".control--select--wrapper").addClass("qualify-form_error-field"))) : (this.$modal_body.find("input[name=" + i.name + "]").removeClass("qualify-form_error-field"),
            this.$modal_body.find("input[name=" + i.name + "]").closest(".control--select").find(".control--select--wrapper").removeClass("qualify-form_error-field")))
        }, this)),
        t ? this.controls.$submit_btn.trigger("button:save:enable") : this.controls.$submit_btn.trigger("button:save:disable"),
        t
    }
    ,
    t.prototype.sendForm = function() {
        return this.validateForm(!0) ? (i.ajax({
            url: "/private/account/qualification_form",
            method: "POST",
            data: this.$modal_body.find("#qualification_form").serialize(),
            dataType: "json",
            timeout: this.ajax_timeout
        }),
        void this.Modal.destroy()) : !1
    }
    ,
    t.prototype.showError = function(e, t) {
        t = t || "",
        (new o).showError(e + " (" + t + ")", !1)
    }
    ,
    t
}),
define("lib/common/router", ["require", "lib/core/router"], function(e) {
    "use strict";
    return e("lib/core/router")
}),
define("lib/tour/request_demo", ["require", "jquery", "twig", "underscore", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = (e("jquery"),
    e("twig")), s = e("underscore"), n = e("lib/components/base/modal");
    return t = function() {
        this.ns = ".demo_form",
        this.controls = {},
        this.Modal = new n({
            class_name: "demo-form-modal",
            init: i._preload(["/tmpl/tour/request_demo.twig"], s.bind(function(e) {
                this.$modal_body = e,
                this.$modal_body.on("click" + this.ns, "#req-demo_btn", s.bind(function() {
                    this.Modal.destroy(),
                    window.open("https://www.amocrm.com/support/demo.php")
                }, this)),
                e.html(i({
                    ref: "/tmpl/tour/request_demo.twig"
                }).render()).trigger("modal:loaded").trigger("modal:centrify")
            }, this)),
            destroy: s.bind(function() {
                this.$modal_body.off()
            }, this)
        })
    }
}),
define("lib/tour/wordpress_review", ["require", "jquery", "twig", "underscore", "lib/components/base/modal"], function(e) {
    "use strict";
    var t, i = e("jquery"), s = e("twig"), n = e("underscore"), o = e("lib/components/base/modal");
    return t = function() {
        this.ns = ".wp_review",
        this.controls = {},
        this.ajax_timeout = 6e4,
        this.Modal = new o({
            class_name: "wp_review",
            init: s._preload(["/tmpl/tour/wordpress_review.twig"], n.bind(function(e) {
                this.$modal_body = e,
                this.$modal_body.on("click" + this.ns, "#wp_review_btn", n.bind(function() {
                    AMOCRM.constant("show_wp_review_value", "Y"),
                    this.Modal.destroy(),
                    window.open("https://wordpress.org/support/view/plugin-reviews/amoforms?filter=5")
                }, this)),
                e.html(s({
                    ref: "/tmpl/tour/wordpress_review.twig"
                }).render()).trigger("modal:loaded").trigger("modal:centrify")
            }, this)),
            destroy: n.bind(function() {
                var e = AMOCRM.constant("show_wp_review_value");
                "number" == typeof e && (e += 1),
                i.ajax({
                    url: "/private/account/wp_review",
                    method: "POST",
                    data: {
                        action: "update",
                        counter: e
                    },
                    dataType: "json",
                    timeout: this.ajax_timeout
                }),
                this.$modal_body.off()
            }, this)
        })
    }
}),
define("lib/tour/welcome/step", ["require", "underscore", "elements_view", "lib/common/fn"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("elements_view")
      , s = e("lib/common/fn")
      , n = function(e) {
        this.tour[e]()
    }
      , o = function(e, i, s) {
        e.remove(),
        i.click(),
        t.isFunction(s) && s()
    };
    return i.extend({
        className: "welcome-tour__step",
        sub_steps: [],
        ns: ".welcome:tour:step_" + s.randHex(),
        _classes: function() {
            return {
                body_step: "welcome-tour-step-",
                sidebar: "welcome-tour__step__sidebar",
                content: "welcome-tour__step__content",
                animate: "welcome-tour__step-animated",
                changing: "welcome-tour__step-changing",
                hole_overlay: "welcome-tour__hole-overlay",
                click_helper: "welcome-tour__click-helper",
                arrow: "welcome-tour__step__arrow",
                garbage: "welcome-tour__garbage"
            }
        },
        holeOverlayTemplate: t.template('<div class="welcome-tour__hole-overlay" style="width: <%= parseInt(width, 10) %>px; height: <%= parseInt(top, 10) %>px; left: <%= parseInt(left, 10) %>px; top: 0"></div><div class="welcome-tour__hole-overlay" style="left: <%= parseInt(left + width, 10) %>px; top: 0; height: 100%; right: 0"></div><div class="welcome-tour__hole-overlay" style="top: <%= parseInt(top + height, 10) %>px; width: <%= parseInt(width, 10) %>px; bottom: 0; left: <%= parseInt(left, 10) %>px"></div><div class="welcome-tour__hole-overlay" style="top: 0; width: <%= parseInt(left, 10) %>px; height: 100%; left: 0;"></div>'),
        template: t.template('<div class="welcome-tour__step__sidebar <%= data.sidebar_class_name %>"><h1 class="welcome-tour__step__sidebar__caption"><%= data.caption %></h1><div class="welcome-tour__step__sidebar__text"><% print("<p>" + data.text.join("</p><p>") + "</p>") %></div><div class="welcome-tour__step__controls"><div class="welcome-tour__step__controls__control left welcome-tour__step__sidebar__back"><button type="button" class="button-input button-cancel" id="welcome_tour_back" style="<% if (data.at == 1) { %>visibility: hidden<% } %>">' + AMOCRM.lang.button_back + '</button></div><div class="welcome-tour__step__controls__control center"><div class="welcome-tour__step__controls__steps"><% for (var i = 0; i < data.steps_count; i++) { %><span class="welcome-tour__step__controls__steps__step <% if (i <= (data.at - 1)) { %>current<% } %>"></span><% } %></div></div><div class="welcome-tour__step__controls__control right welcome-tour__step__sidebar__next"><button class="button-input" id="welcome_tour_next"><span class="button-input-inner"><span class="button-input-inner__text">' + AMOCRM.lang.button_next + '</span></span></button></div></div></div><% if (!data.no_content) { %><div class="welcome-tour__step__content"></div><% } %>'),
        arrowTemplate: t.template('<div class="welcome-tour__step__arrow welcome-tour__step__arrow-<%= data.at %> <%= data.position %>"><span><%= data.text %></span></div>'),
        events: {
            "click #welcome_tour_next": "next",
            "click #welcome_tour_back": "back",
            "click .welcome-tour__step__sidebar": "checkStopPropagation",
            "click .welcome-tour__hole-overlay": "stopPropagation"
        },
        initialize: function(e) {
            i.prototype.initialize.apply(this, arguments),
            e = e || {},
            this.at = e.at,
            this.code = e.code,
            this.steps_count = e.steps_count,
            this.tour = e.tour,
            this.cur_ns = this.ns + ".welcome:tour:step_" + this.code,
            this._$body.on("click" + this.ns, ".welcome-tour__hole-overlay", t.bind(this.stopPropagation, this)).on("click" + this.ns, ".welcome-tour__step__arrow", t.bind(this.stopPropagation, this)).on("blur" + this.ns, "input", t.bind(this.keyboardHide, this)).addClass(this._class("body_step") + this.code).scrollTop(0)
        },
        destroy: function() {
            this.destroyed = !0,
            this.stopHoleOverlay(),
            this._$body.find(this._selector("garbage")).remove(),
            this._$body.removeClass(this._class("body_step") + this.code),
            this._$body.off(this.ns),
            this._$document.off(this.ns),
            this.remove()
        },
        changeStep: function(e) {
            this.stopHoleOverlay(),
            "refresh" === e ? n.call(this, e) : (this.$el.prepareTransition().on(AMOCRM.transition_event, t.bind(function() {
                n.call(this, e)
            }, this)).removeClass(this._class("animate")),
            this.$el.addClass(this._class("changing")))
        },
        keyboardHide: function() {
            AMOCRM.is_touch_device && t.delay(t.bind(function() {
                this._$body.find("input:focus").length || this._$body.scrollTop(0)
            }, this), 50)
        },
        checkStopPropagation: function(e) {
            $(e.target).closest("button").length || this.stopPropagation(e)
        },
        stopPropagation: function(e) {
            e.stopPropagation()
        },
        render: function(e) {
            AMOCRM.first_load || !e.page_changed ? this._render(e) : this._$document.on("page:changed" + this.ns, t.bind(function() {
                this._render(e)
            }, this))
        },
        _render: function(e) {
            this.template_params = t.extend({}, e, this.template_params),
            this.$el.html(this.template({
                data: this.template_params
            })),
            this.$el.trigger("rendered"),
            t.delay(t.bind(function() {
                this.animate()
            }, this), 1),
            this.sub_steps.length && this.initSubSteps()
        },
        animate: function(e) {
            this.$el.prepareTransition().addClass(this._class("animate"))
        },
        next: function() {
            this.changeStep("next")
        },
        back: function() {
            this.changeStep("back")
        },
        refresh: function() {
            this.changeStep("refresh")
        },
        hide: function() {
            this.tour.hide(),
            this._elem("sidebar").hasClass("right") && this.$el.css("left", "auto"),
            this.$el.width(this._elem("sidebar")[0].offsetWidth)
        },
        show: function() {
            this.tour.show(),
            this.$el.css({
                width: "",
                left: ""
            })
        },
        holeOverlay: function(e) {
            var i = e.$el && e.$el.offset()
              , s = e.offsets || {}
              , n = e.sub_step_index;
            this.destroyed !== !0 && (this.hide(),
            this._$body.append(this.holeOverlayTemplate({
                left: i.left + (s.left || 0),
                top: i.top + (s.top || 0),
                width: e.$el[0].offsetWidth + (s.right || 0),
                height: e.$el[0].offsetHeight + (s.bottom || 0)
            })),
            n !== !1 && (n = n || this._last_sub_step_index || 1,
            this.showArrows(n - 1, !0)),
            n && (this._last_sub_step_index = n),
            this._$window.off(".welcome-tour:substep-resize-one").one("resize.welcome-tour:substep-resize-one", t.bind(function() {
                this.stopHoleOverlay()
            }, this)),
            this._$window.off(".welcome-tour:substep-resize").on("resize.welcome-tour:substep-resize", t.bind(t.debounce(function() {
                this.holeOverlay(e)
            }, 300), this)))
        },
        stopHoleOverlay: function() {
            this.show(),
            this.stopArrows(),
            this._$body.find(this._selector("hole_overlay")).remove(),
            this._$body.find(this._selector("garbage")).remove(),
            this._$window.off(".welcome-tour:substep-resize-one").off(".welcome-tour:substep-resize")
        },
        initSubSteps: function() {
            this[this.sub_steps[0]]()
        },
        click: function(e, i) {
            var s = $('<div class="' + this._class("click_helper") + '"></div>')
              , n = e.offset();
            this.destroyed !== !0 && (s.css({
                top: n.top + e[0].offsetHeight / 2,
                left: n.left + e[0].offsetWidth / 2
            }),
            this._$body.append(s),
            s.prepareTransition().addClass(this._class("click_helper") + "-animated"),
            t.delay(function() {
                o(s, e, i)
            }, 400))
        },
        stopArrows: function() {
            this._$body.find(this._selector("arrow")).remove(),
            this._$window.off(".welcome-tour:substep-resize-arrows-one").off(".welcome-tour:substep-resize-arrows")
        },
        showArrows: function() {
            e(["webfontloader"], t.bind(function(e, i) {
                i.load({
                    google: {
                        families: ["Neucha::latin,cyrillic"]
                    },
                    active: t.bind(function() {
                        this._showArrows.apply(this, e)
                    }, this)
                })
            }, this, [].splice.call(arguments, 0)))
        },
        _showArrows: function(e, i) {
            var s, n, o, r, a, l = 0;
            e = e || 0,
            a = t.isArray(this.arrows) ? this.arrows[e] : this.arrows,
            this.stopArrows(),
            t.each(a, function(e, i) {
                switch (n = $(this.arrowTemplate({
                    data: e
                })),
                s = $(i),
                o = s.offset(),
                r = t.extend({}, e.style || {}),
                e.position) {
                case "right":
                    t.extend(r, {
                        left: o.left + s[0].offsetWidth,
                        top: o.top + s[0].offsetHeight / 2
                    });
                    break;
                case "bottom":
                    t.extend(r, {
                        left: o.left,
                        top: o.top + s[0].offsetHeight
                    })
                }
                n.css(r),
                this._$body.append(n),
                function(e, i, s) {
                    t.delay(t.bind(function() {
                        e.prepareTransition().addClass("visible"),
                        t.isFunction(this[s]) && this[s]()
                    }, this), 200 * i)
                }
                .call(this, n, l++, e.additionalHelper)
            }, this),
            i || (this._$window.off(".welcome-tour:substep-resize-arrows-one").one("resize.welcome-tour:substep-resize-arrows-one", t.bind(function() {
                this.stopArrows()
            }, this)),
            this._$window.off(".welcome-tour:substep-resize-arrows").on("resize.welcome-tour:substep-resize-arrows", t.bind(t.debounce(function() {
                this.showArrows(e)
            }, 300), this)))
        },
        success: function() {
            var e = $('<div class="welcome-tour__modal-success ' + this._class("garbage") + " " + this.template_params.sidebar_class_name + '"></div>');
            this._$body.append(e),
            Modernizr.cssanimations ? (t.delay(t.bind(this.next, this), 1100),
            e.prepareTransition().addClass("tada")) : this.next()
        }
    })
}),
define("lib/interface/account/users/add_multiple", ["require", "underscore", "jquery", "twig", "lib/core/users", "lib/common/fn", "lib/components/base/modal", "elements_view", "lib/components/base/form"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("jquery")
      , s = e("twig")
      , n = e("lib/core/users")
      , o = e("lib/common/fn")
      , r = e("lib/components/base/modal")
      , a = e("elements_view")
      , l = e("lib/components/base/form");
    return a.extend({
        _classes: function() {
            return {
                input: "users-add-multiple-modal__inner__input",
                error: "validate-has-error",
                success: "validate-success",
                textarea: "users-add-multiple-modal__inner__textarea-wrapper-wrap"
            }
        },
        events: {
            "input .users-add-multiple-modal__inner__input": "checkInput",
            "blur .users-add-multiple-modal__inner__input": "checkInput",
            "click .users-add-multiple-modal__inner__more__btn": "showTextarea",
            "click .js-modal-accept:not(.button-input-disabled)": "sendInvitations"
        },
        initialize: function(e) {
            a.prototype.initialize.apply(this, arguments),
            this.options = e || {},
            this.modal = this.initModal(),
            this.setElement(this.modal.$modal)
        },
        destroy: function() {
            this.form && this.form.destroy(),
            this.remove()
        },
        initModal: function() {
            var e = this;
            return new r({
                class_name: (this.options.class_name || "modal-list") + " users-add-multiple-modal",
                container: this.options.container,
                disable_overlay_click: this.options.disable_overlay_click,
                init_animation: !0,
                init: s._preload(["/tmpl/settings/users/modal/add_multiple.twig"], function(e) {
                    this.$modal_body = e,
                    e.trigger("modal:loaded").html(s({
                        ref: "/tmpl/settings/users/modal/add_multiple.twig"
                    }).render({
                        can_close: !this.options.disable_overlay_click
                    })).trigger("modal:centrify"),
                    this.form = new l.View({
                        el: e
                    }),
                    this.form.model.on("has_changes", t.bind(function() {
                        e.find(".js-modal-accept").trigger("button:save:enable")
                    }, this)).on("has_reverted", t.bind(function() {
                        e.find(".js-modal-accept").trigger("button:save:disable")
                    }, this))
                }),
                destroy: function() {
                    e.destroy()
                }
            })
        },
        checkInput: function(e) {
            var t = i(e.currentTarget)
              , s = i.trim(t.val());
            s ? o.checkEmail(s) ? t.removeClass(this._class("error")).parent().addClass(this._class("success")) : "focusout" === e.type && t.addClass(this._class("error")).parent().removeClass(this._class("success")) : t.removeClass(this._class("error")).parent().removeClass(this._class("success")),
            this.modal.$modal_body.trigger("modal:centrify")
        },
        clearInput: function(e) {
            e.parent().find(this._selector("error")).remove()
        },
        showTextarea: function() {
            this.modal.$modal_body.find(this._selector("textarea")).show().find("textarea").val(this.getInputEmails())
        },
        getInputEmails: function() {
            return t.filter(t.uniq(i.makeArray(this.modal.$modal_body.find("input").map(function() {
                return this.value
            }))), function(e) {
                return e.length
            }).join("\n")
        },
        sendInvitations: function(e) {
            var s = i(e.currentTarget)
              , o = this.$("textarea:visible").length ? this.$("textarea").val() : this.getInputEmails();
            s.trigger("button:load:start"),
            i.ajax({
                url: "/ajax/invite",
                method: "POST",
                data: {
                    emails: o
                },
                dataType: "json"
            }).always(function() {
                s.trigger("button:load:stop")
            }).done(t.bind(function(e) {
                t.each(e.emails, function(e) {
                    n.add(e)
                }),
                this.options.onSave.call(this, e)
            }, this)).fail(t.bind(function() {
                this.modal.shakeError()
            }, this))
        }
    })
}),
define("lib/tour/welcome/users", ["require", "lib/tour/welcome/step", "lib/interface/account/users/add_multiple"], function(e) {
    "use strict";
    var t = e("lib/tour/welcome/step")
      , i = e("lib/interface/account/users/add_multiple");
    return t.extend({
        template_params: {
            sidebar_class_name: "right",
            caption: AMOCRM.lang.welcome_tour_step1_caption,
            text: [AMOCRM.lang.welcome_tour_step1_text1, AMOCRM.lang.welcome_tour_step1_text2, AMOCRM.lang.welcome_tour_step1_text3]
        },
        events: _.extend({}, t.prototype.events || {}, {
            rendered: "initAddUsersMultiple"
        }),
        initialize: function() {
            t.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            this.users_modal && this.users_modal.destroy(),
            t.prototype.destroy.apply(this, arguments)
        },
        initAddUsersMultiple: function() {
            var e = this;
            this.users_modal = new i({
                container: this.$(this._selector("content")),
                class_name: "welcome-tour__step__content__modal",
                disable_overlay_click: !0,
                onSave: function() {
                    this.modal.$modal.find(".modal-body, .modal-overlay").hide(),
                    e.success()
                }
            })
        }
    })
}),
define("lib/tour/welcome/pipeline", ["require", "jquery", "underscore", "twig", "lib/common/urlparams", "lib/tour/welcome/step"], function(e) {
    "use strict";
    var t = e("jquery")
      , i = e("underscore")
      , s = e("twig")
      , n = e("lib/common/urlparams")
      , o = e("lib/tour/welcome/step")
      , r = o.prototype.next
      , a = o.prototype.back;
    return o.extend({
        sub_steps: ["firstSubstep"],
        template_params: {
            sidebar_class_name: "right",
            no_content: !0,
            caption: AMOCRM.lang.welcome_tour_step2_caption,
            text: [AMOCRM.lang.welcome_tour_step2_text1, AMOCRM.lang.welcome_tour_step2_text2]
        },
        sub_step_params: {
            caption: AMOCRM.lang.welcome_tour_step2_caption2,
            text: [AMOCRM.lang.welcome_tour_step2_substep_text1, AMOCRM.lang.welcome_tour_step2_substep_text2, '<br><img src="/frontend/images/interface/welcome_tour/pipeline.png">']
        },
        arrows: [{
            "#quick_add_lead_name": {
                at: 1,
                text: AMOCRM.lang.welcome_tour_step2_arrow1,
                position: "right",
                style: {
                    marginTop: -20,
                    marginLeft: 20
                }
            },
            "#quick_lead_contact_search": {
                at: 2,
                text: AMOCRM.lang.welcome_tour_step2_arrow2,
                position: "right",
                style: {
                    marginLeft: 22,
                    marginTop: 14
                }
            },
            "#quick_add_form_btn": {
                at: 3,
                text: AMOCRM.lang.welcome_tour_step2_arrow3,
                position: "bottom",
                style: {
                    marginLeft: 40,
                    marginTop: 5
                }
            }
        }, {
            ".pipeline_cell-quick_add .pipeline_leads__item:first": {
                at: 4,
                text: AMOCRM.lang.welcome_tour_step2_arrow4,
                position: "right",
                style: {
                    marginTop: -30,
                    marginLeft: 10
                },
                additionalHelper: "showLeadPlaceholder"
            }
        }],
        _classes: function() {
            return i.extend({
                quick_add_wrapper: "pipeline_leads__quick_add__wrapper",
                quick_add_btn: "pipeline_leads__quick_add_button",
                quick_add_form: "pipeline_leads__quick_add_form",
                leads_item_wrapper: "pipeline_leads__item"
            }, o.prototype._classes.call(this))
        },
        _selectors: function() {
            return {
                quick_add_lead_name: "#quick_add_lead_name",
                quick_add_save: "#quick_add_form_btn",
                fake_lead: "#welcome_tour_fake_lead"
            }
        },
        initialize: function() {
            o.prototype.initialize.apply(this, arguments),
            this._$body.on("click" + this.ns, function(e) {
                e.stopPropagation()
            }),
            this._$document.on("keydown" + this.ns, i.bind(function(e) {
                return t(e.target).closest(this._selector("quick_add_form")).length ? void 0 : (e.stopPropagation(),
                !1)
            }, this))
        },
        destroy: function() {
            t(this._selector("quick_add_save")).off(this.ns),
            t(this._selector("quick_add_wrapper")).off(this.ns),
            this.$quick_add_form && this.$quick_add_form.off(this.ns).removeClass("expand"),
            this.$lead_item && this.$lead_item.off(this.ns),
            AMOCRM.data.current_view.pipeline.scrollResume(),
            o.prototype.destroy.apply(this, arguments)
        },
        firstSubstep: function() {
            var e = n.getQueryString();
            return e.length ? void this.refresh() : (this.$quick_add_form = t(this._selector("quick_add_form")),
            this.$quick_add_form.one(AMOCRM.transition_event + this.ns, i.bind(this.holeForm, this)).find(".button-input.button-cancel").remove().end().find("#linked-form__add-entity").html(s({
                ref: "/tmpl/leads/pipeline/quick_add/add_entity_in_tour.twig"
            }).render()),
            void (AMOCRM.data.current_view && AMOCRM.data.current_view._page_built ? this._firstSubstep() : this._$document.on("page:construct" + this.cur_ns + " page:changed" + this.cur_ns, i.bind(function() {
                this._firstSubstep()
            }, this))))
        },
        _firstSubstep: function() {
            this.click(t(this._selector("quick_add_btn")))
        },
        holeForm: function() {
            this.holeOverlay({
                $el: this.$quick_add_form
            }),
            AMOCRM.data.current_view.pipeline.scrollPause(),
            t(this._selector("quick_add_lead_name")).val(AMOCRM.lang.welcome_tour_step2_lead_placeholder).trigger("change"),
            t(this._selector("quick_add_save")).on("lead:saved" + this.ns, i.bind(function(e) {
                t(e.currentTarget).hasClass("button-input-disabled") || this.stopHoleOverlay()
            }, this)),
            this._$document.off(this.cur_ns),
            t(this._selector("quick_add_wrapper")).on("lead:inserted" + this.ns, i.bind(this.secondSubStep, this))
        },
        secondSubStep: function(e, t) {
            this.$quick_add_form.one(AMOCRM.transition_event + this.ns, i.bind(function() {
                this._secondSubStep(t)
            }, this))
        },
        _secondSubStep: function(e) {
            this.$lead_item && this.$lead_item.off(),
            this.$lead_item = e,
            this.holeOverlay({
                $el: e,
                sub_step_index: 2
            }),
            this.$(".welcome-tour__step__sidebar__caption, .welcome-tour__step__sidebar__text").one(AMOCRM.transition_event, i.bind(function() {
                this.$(".welcome-tour__step__sidebar__caption").text(this.sub_step_params.caption).removeClass("transparent"),
                this.$(".welcome-tour__step__sidebar__text").html("<p>" + this.sub_step_params.text.join("</p><p>") + "</p>").removeClass("transparent")
            }, this)).addClass("transparent"),
            this.$lead_item.on("lead:status-change" + this.ns, i.bind(function(e, t, i) {
                AMOCRM.data.current_view.pipeline.options.over = this._pipelineOver,
                AMOCRM.data.current_view.pipeline.options.sort = this._pipelineSort,
                AMOCRM.data.current_view.pipeline.options.change = this._pipelineChange,
                this.success()
            }, this))
        },
        showLeadPlaceholder: function() {
            var e = this
              , i = t(".pipeline_cell-quick_add .pipeline_leads__item:first")
              , s = t(".pipeline_cell-quick_add").next().find(".pipeline_items__list")
              , n = s.offset()
              , o = t('<div class="' + this._class("garbage") + ' welcome-tour__step__lead_placeholder"></div>')
              , r = i.clone();
            this.$lead_item = i,
            this.$lead_item.on("click" + this.ns, function(e) {
                e.preventDefault(),
                e.stopPropagation()
            }),
            o.css({
                width: i[0].offsetWidth,
                height: i[0].offsetHeight - 3,
                left: n.left,
                top: n.top
            }),
            this._$body.append(o),
            t(this._selector("fake_lead")).remove(),
            r.attr("id", "welcome_tour_fake_lead").css("opacity", 0).addClass(this._class("garbage")),
            s.prepend(r),
            this._pipelineOver = AMOCRM.data.current_view.pipeline.options.over,
            this._pipelineSort = AMOCRM.data.current_view.pipeline.options.sort,
            this._pipelineChange = AMOCRM.data.current_view.pipeline.options.change,
            AMOCRM.data.current_view.pipeline.options.over = this.pipelineOver,
            AMOCRM.data.current_view.pipeline.options.sort = this.pipelineOver,
            AMOCRM.data.current_view.pipeline.options.change = function() {
                e.$lead_item && (e.stopHoleOverlay(),
                e.holeOverlay({
                    $el: e.$lead_item,
                    sub_step_index: !1
                })),
                e._pipelineChange.apply(this, arguments)
            }
            ,
            o.prepareTransition().addClass("visible")
        },
        pipelineOver: function(e) {
            var i = t("#welcome_tour_fake_lead");
            e.placeholder.closest(".pipeline_items__list")[0] === t(".pipeline_cell-quick_add").next().children(".pipeline_items__list")[0] && e.placeholder.is(":first-child") ? i.hide() : i.show()
        },
        next: function(e) {
            e && e.stopPropagation && e.stopPropagation(),
            r.apply(this, arguments)
        },
        back: function(e) {
            e && e.stopPropagation && e.stopPropagation(),
            a.apply(this, arguments)
        }
    })
}),
define("lib/tour/welcome/statuses", ["require", "underscore", "lib/tour/welcome/step", "lib/components/modals/statuses"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("lib/tour/welcome/step")
      , s = e("lib/components/modals/statuses")
      , n = i.prototype.next
      , o = i.prototype.back;
    return i.extend({
        sub_steps: ["firstSubstep"],
        statuses_form: null,
        template_params: {
            sidebar_class_name: "left",
            caption: AMOCRM.lang.welcome_tour_step_statuses_caption,
            text: [AMOCRM.lang.welcome_tour_step_statuses_text1, AMOCRM.lang.welcome_tour_step_statuses_text2]
        },
        _selectors: function() {
            return {
                quick_add_lead_name: "#quick_add_lead_name",
                quick_add_save: "#quick_add_form_btn",
                fake_lead: "#welcome_tour_fake_lead"
            }
        },
        events: {
            "click #welcome_tour_back": "back",
            "click #welcome_tour_next": "next",
            "click #save_statuses_settings": "refreshActiveForm"
        },
        initialize: function() {
            i.prototype.initialize.apply(this, arguments),
            this._$body.on("click" + this.ns, t.bind(function(e) {
                e.stopPropagation()
            }, this))
        },
        destroy: function() {
            this._$body.off(this.ns),
            this.statuses_form && (this.statuses_form.modified = !1),
            AMOCRM.router.preventPageChange(!1),
            AMOCRM.router.removePreventConfig(),
            this.statuses && (this.statuses.destroy(),
            this.statuses.modal && this.statuses_form && !this.statuses_form.wasSaved && this.statuses.modal.destroy()),
            i.prototype.destroy.apply(this, arguments)
        },
        refreshActiveForm: function() {
            var e = this.statuses
              , i = e.getActiveForm();
            e.currentPipelineId != e.pipelineId && e.hasFormsChanges() && (e._forms && (t.each(e._forms, function(e) {
                e.destroy()
            }),
            e._forms = []),
            e._forms.push(i),
            t.isFunction(e.options.init) && e.options.init())
        },
        firstSubstep: function(e) {
            var i = void 0 === e ? "edit" : e.data.mode;
            this.statuses = new s({
                class_name: "welcome-tour__step__content__modal",
                $modal_container: this.$(this._selector("content")),
                disable_overlay_click: !0,
                init_animation: !0,
                dont_show_delete_confirm: !0,
                mode: i,
                init: t.bind(function() {
                    this.statuses_form = this.statuses._forms[0],
                    this.statuses_form && (this.statuses_form.model.on("statuses:saved", t.bind(this.success, this)),
                    this.statuses_form._elem("save_button").trigger("button:save:enable")),
                    this.statuses._elem("add_pipeline").on("click", {
                        mode: "add"
                    }, t.bind(this.firstSubstep, this))
                }, this),
                destroy: t.bind(function() {
                    this.statuses._elem("add_pipeline").off("click"),
                    "add" === i && (this.statuses = void 0)
                }, this)
            })
        },
        next: function(e) {
            e && e.stopPropagation && e.stopPropagation(),
            n.apply(this, arguments)
        },
        back: function(e) {
            e && e.stopPropagation && e.stopPropagation(),
            o.apply(this, arguments)
        }
    })
}),
define("lib/tour/welcome/form", ["require", "underscore", "twig", "clipboard", "lib/common/fn", "lib/components/base/modal", "lib/components/amoforms/loader", "lib/interface/settings/digital_pipeline/forms/amoforms", "lib/tour/welcome/step", "lib/interface/controls/overlay"], function(e) {
    "use strict";
    var t = e("underscore")
      , i = e("twig")
      , s = e("clipboard")
      , n = e("lib/common/fn")
      , o = e("lib/components/base/modal")
      , r = (e("lib/components/amoforms/loader"),
    e("lib/interface/settings/digital_pipeline/forms/amoforms"))
      , a = e("lib/tour/welcome/step")
      , l = 27;
    return e("lib/interface/controls/overlay"),
    a.extend({
        sub_steps: ["firstSubstep"],
        _selectors: function() {
            return {
                copy_code: "#welcome_amoform_copy_code"
            }
        },
        template_params: {
            sidebar_class_name: "right",
            caption: AMOCRM.lang.welcome_tour_step3_caption,
            text: [AMOCRM.lang.welcome_tour_step3_text1, AMOCRM.lang.welcome_tour_step3_text2, AMOCRM.lang.welcome_tour_step3_text3]
        },
        arrows: [{
            '#digital-pipeline__lead-sources .digital-pipeline__source-item[data-source-type="form"]': {
                at: 1,
                text: AMOCRM.lang.welcome_tour_step3_arrow1,
                position: "bottom",
                style: {
                    marginTop: -5,
                    marginLeft: 220
                }
            }
        }],
        _hole_overlay: function() {
            return {
                $el: $('#digital-pipeline__lead-sources .digital-pipeline__source-item[data-source-type="form"]'),
                offsets: {
                    left: -5,
                    right: 10
                }
            }
        },
        events: t.extend({}, a.prototype.events || {}, {
            "click button#welcome_tour_next": "clickControlsHide",
            "click button#welcome_tour_back": "clickControlsHide"
        }),
        initialize: function() {
            a.prototype.initialize.apply(this, arguments),
            this._$body.on("keydown", function(e) {
                e.keyCode === l && e.stopPropagation()
            })
        },
        destroy: function() {
            this._$body.off(this.ns).append(this.tour.$el),
            this.clipboard && this.clipboard.destroy(),
            this.amoforms && this.amoforms.Amoforms && (this.amoforms.Amoforms.form_modified = !1),
            this.$form_settings_btn && this.$form_settings_btn.off(this.ns),
            AMOCRM.router.preventPageChange(!1),
            AMOCRM.router.removePreventConfig(),
            a.prototype.destroy.apply(this, arguments)
        },
        firstSubstep: function() {
            AMOCRM.data.current_view && AMOCRM.data.current_view.hs ? this._firstSubstep() : this._$document.on("page:construct" + this.cur_ns + " page:changed" + this.cur_ns, t.bind(function() {
                this._firstSubstep()
            }, this))
        },
        _firstSubstep: function() {
            this.tour.show(),
            this.$form_settings_btn = $(".js-wp-amoforms"),
            this._$document.off(this.cur_ns),
            AMOCRM.data.current_view.hs.scrollPause(),
            this.holeOverlay(this._hole_overlay()),
            this.showArrows(),
            this.$form_settings_btn.on("click" + this.ns, t.bind(function(e) {
                e.stopPropagation(),
                $.ajax({
                    type: "GET",
                    url: "/ajax/v1/forms/new?tour=Y",
                    dataType: "json"
                }).done(t.bind(function(e) {
                    var t;
                    e = n.cleanResponse(e),
                    t = e.forms["new"],
                    this.showFormModal(t.code, t.page, t.form.id),
                    this.updateFormsList()
                }, this))
            }, this))
        },
        showFormModal: function(e, s, n) {
            var a = this;
            this.show(),
            this.stopHoleOverlay(),
            this._$document.trigger("controls:hide"),
            this.$form_settings_btn.off(this.ns),
            new o({
                container: this.$(this._selector("content")),
                class_name: "welcome-tour__step__content__modal welcome-amoforms-modal",
                disable_overlay_click: !0,
                init_animation: !0,
                init: i._preload(["/tmpl/common/amoforms/welcome_modal.twig"], function(o) {
                    o.addClass("clearfix").attr("id", "welcome_amoforms_modal_body").trigger("modal:loaded").html(i({
                        ref: "/tmpl/common/amoforms/welcome_modal.twig"
                    }).render({
                        form: {
                            code: e,
                            page: s
                        }
                    })).trigger("modal:centrify"),
                    this.$modal.on("click", ".js-modal-accept", t.bind(function() {
                        this.destroy(),
                        a.next()
                    }, this)).on("click", "a.blue-link", function(e) {
                        e.stopPropagation()
                    }).on("click", ".js-form-settings", t.bind(function() {
                        a.amoforms = new r({
                            entity: AMOCRM.data.current_entity,
                            form_id: n,
                            updateForms: a.updateFormsList,
                            disable_delete: !0
                        })
                    }, this)),
                    a.initClipboard(e)
                })
            })
        },
        updateFormsList: function() {
            var e, i = AMOCRM.data.current_view.sources;
            e = t.first(t.filter(i, function(e) {
                return "form" === e.params.type
            })),
            t.isFunction(e.getData) && e.getData(!0)
        },
        initClipboard: function(e) {
            var i = $(this._selector("copy_code"));
            this.clipboard = new s(i[0],{
                text: function() {
                    return e
                }
            }),
            this.clipboard.on("success", t.bind(function(e) {
                i.addClass("copied"),
                t.delay(function() {
                    i.removeClass("copied")
                }, 1500),
                e.clearSelection()
            }, this))
        },
        clickControlsHide: function() {
            this._$document.trigger("controls:hide")
        }
    })
}),
define("lib/tour/welcome", ["require", "underscore", "jquery", "twig", "elements_view", "lib/tour/qualification_form", "lib/common/cookie", "lib/common/router", "lib/tour/request_demo", "lib/tour/wordpress_review", "lib/tour/welcome/users", "lib/tour/welcome/pipeline", "lib/tour/welcome/statuses", "lib/tour/welcome/form"], function(e) {
    "use strict";
    var t, i = e("underscore"), s = e("jquery"), n = e("twig"), o = e("elements_view"), r = e("lib/tour/qualification_form"), a = e("lib/common/cookie"), l = e("lib/common/router"), c = e("lib/tour/request_demo"), d = e("lib/tour/wordpress_review"), u = {};
    return u = {
        tour: function() {
            new t
        },
        init: function() {
            AMOCRM.constant("show_wp_review_form") ? new d : AMOCRM.constant("show_welcome_back") ? new c : AMOCRM.constant("show_MainTour") && AMOCRM.constant("user_rights") && AMOCRM.constant("user_rights").is_admin && (AMOCRM.constant("show_qualification_form") ? new r({
                destroy: function() {
                    u.tour()
                }
            }) : u.tour())
        }
    },
    t = o.extend({
        id: "welcome_tour",
        className: "welcome-tour default-overlay",
        routes: [{
            at: 1,
            code: "users",
            handler: e("lib/tour/welcome/users"),
            url: "/settings/users/"
        }, {
            at: 2,
            code: "pipeline",
            handler: e("lib/tour/welcome/pipeline"),
            templates: ["/tmpl/leads/pipeline/quick_add/add_entity_in_tour.twig"],
            url: "/leads/pipeline/"
        }, {
            at: 3,
            code: "statuses",
            handler: e("lib/tour/welcome/statuses"),
            url: "/leads/pipeline/"
        }, {
            at: 4,
            code: "form",
            handler: e("lib/tour/welcome/form"),
            url: "/settings/pipeline/leads/"
        }],
        current_step: {},
        events: {
            click: "checkFinish"
        },
        initialize: function() {
            var e;
            return o.prototype.initialize.apply(this, arguments),
            this.max_step = i.max(this.routes, function(e) {
                return e.at
            }).at,
            e = (this.current_step.at || parseInt(a.get("welcome_last")) || 0) + 1,
            e > this.max_step ? void this.destroy() : (this.render(),
            void this.setStep(e))
        },
        destroy: function() {
            this.destroyed || (this._$document.trigger("overlay:unfix"),
            s("html").css("overflow", ""),
            this.destroyed = !0,
            this.isTheEnd(),
            this.remove())
        },
        checkFinish: function() {
            this.$el.hasClass("finished") && this.destroy()
        },
        render: function() {
            s("html").css("overflow", "hidden"),
            this._$body.append(this.$el),
            this.$el.trigger("overlay:show")
        },
        destroyCurrentStep: function() {
            this.current_step.view && this.current_step.view.destroy()
        },
        setStep: function(e) {
            var t, s, o, r = location.pathname;
            this.destroyCurrentStep(),
            this.current_step.at = e,
            t = this._getStep(this.current_step.at),
            o = i.isArray(t.templates) && t.templates.length ? t.templates : [],
            s = t.url && r !== t.url,
            s && l.navigate(t.url, {
                trigger: !0,
                replace: !0
            }),
            n._preload(o, i.bind(function() {
                this.current_step.view = new t.handler({
                    at: this.current_step.at,
                    code: t.code,
                    steps_count: this.max_step,
                    tour: this
                }),
                this.$el.after(this.current_step.view.$el),
                this.current_step.view.render({
                    at: this.current_step.at,
                    steps_count: this.max_step,
                    page_changed: s
                })
            }, this))()
        },
        _getStep: function(e) {
            return i.findWhere(this.routes, {
                at: e
            })
        },
        back: function() {
            this.current_step.at > 1 && this.setStep(this.current_step.at - 1)
        },
        next: function() {
            this.current_step.at < this.max_step ? (a.set({
                name: "welcome_last",
                value: this.current_step.at
            }),
            this.setStep(this.current_step.at + 1)) : (this.destroyCurrentStep(),
            this._$document.one("page:changed", i.bind(this.finish, this)),
            l.navigate("/dashboard/", {
                trigger: !0
            }))
        },
        refresh: function() {
            AMOCRM.router.navigate(this._getStep(this.current_step.at).url, {
                trigger: !0,
                replace: !0
            }),
            this._$document.one("page:changed", i.bind(function() {
                this.setStep(this.current_step.at)
            }, this))
        },
        finish: function() {
            var e = s('<div class="welcome-tour__finish modal-body modal-body-float-animation" id="welcome_tour_finish"><span>' + AMOCRM.lang.welcome_tour_finish + "</span></div>");
            this.$el.addClass("finished").append(e),
            e.prepareTransition().removeClass("modal-body-float-animation"),
            this._$document.trigger("overlay:fix"),
            i.delay(i.bind(function() {
                this.$el.addClass("visible").trigger("overlay:hide", {
                    callback: i.bind(function() {
                        this.destroy()
                    }, this)
                })
            }, this), 2e3)
        },
        hide: function() {
            this.$el.hide()
        },
        show: function() {
            this.$el.show()
        },
        isTheEnd: function() {
            AMOCRM.constant("show_MainTour", !1),
            AMOCRM.inbox && AMOCRM.inbox.requestPushPermission(),
            s.ajax({
                url: "/private/ajax/account.php",
                data: {
                    type: "welcome_tour",
                    action: "power_off"
                }
            })
        }
    }),
    s(function() {
        u.init()
    }),
    !0
}),
require(["jquery", "lib/components/base/notifications", "lib/components/base/inbox/inbox", "vendor/ifvisible", "fastclick", "vendor/modernizr", "lib/common/browserdetect", "lib/common/windowWidthController", "lib/vendor/plugins/jquery.swipe", "lib/vendor/plugins/jquery.autosize", "vendor/moment/langs", "vendor/moment/tz", "lib/core/router", "lib/tour/welcome"], function(e, t, i, s, n) {
    "use strict";
    AMOCRM.notifications = new t,
    AMOCRM.inbox = new i,
    AMOCRM.ifvisible = s,
    n.attach(document.body)
}),
define("app", function() {});
